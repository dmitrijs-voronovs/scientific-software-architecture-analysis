quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Integrability,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204210196:21,message,message,21,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196,2,['message'],['message']
Integrability,"After @andysim 's fix I get a normal print; ```; MO spaces... FC OCC VIR FV; ----------------------; 36 91 567 0. Number of basis functions in the DF-CC basis: 2548. Available memory : 61440.00 MB; Memory requirement for 3-index ints : 7413.66 MB; Memory requirement for DF-CC int trans: 23261.99 MB; Memory requirement for CC contractions: 60934.08 MB; Warning: T2 amplitudes will be stored on the disk!; Memory requirement for Wabef term : 34201.37 MB; ```. Though the calculation exceeds my 64 GiB RAM in the end. @kaljugit wow, looks like you went deep!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878:327,contract,contractions,327,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878,1,['contract'],['contractions']
Integrability,"After a discussion, the plan is to:. * Implement SymmDFJK vs PackedDFJK logic in the DFJK constructor, thus requiring memory and wK info at initialization time that we don't now.; * Overload the constructor so that there's a default and an elaborate signature; * For methods that require PackedDFJK because of downstream data structure assumptions, that will be handled in proc.py with a force_*dfjk flag passed to scf_helper; * SymmDFJK aka Matt's will be named MemDFJK. PackedDFJK aka Rob's will be named DiskDFJK. since the actual implementations aren't as orthogonal as those names suggest, references/more explicit explanations will be in HF and/or SCF_TYPE docstrings; * `SCF_TYPE` option will have three relevant choices; * `DF` formerly went to Rob's code. now will choose the best DFJK from available info. will be conservative on memory estimation; * `MEM_DF` will always go to Matt's code so that a user can test both or be smarter than the logic depending on known hardware/mem considerations; * `DISK_DF` will always go to Rob's code; * The read_options docstring for SCF_TYPE will label the MEM_DF and DISK_DF as expert choices; * In future, other algorithms will follow similar DF|MEM_DF|DISK_DF options in their MTD_TYPE algorithm controllers. Any further ideas on labeling these things welcome. @CDSherrill . Edits:. * `SymmDF` and `DFHelper` classes shall go to Pascal case",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382894140:958,depend,depending,958,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382894140,1,['depend'],['depending']
Integrability,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:170,contract,contraction,170,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081,2,['contract'],['contraction']
Integrability,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:40,message,message,40,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787,1,['message'],['message']
Integrability,"Ah I see your next message now. Yes, I agree it'd be nice if all defaults were consistent, but that'd mean nothing could be df. The last table at docs/introduction/capabilities can show what defaults to df and what to conventional. Admittedly casscf/rasscf aren't on there as I didn't get to them in my last testing push.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487:19,message,message,19,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487,1,['message'],['message']
Integrability,"Ah, did you `cmake ... -DOpenMP_CXX_LIBRARY_DIRS=/path/to/...` and it built successfully or you hard-coded it in `FindMathOpenMP.cmake`? No action needed in psi4 (besides some documentation) for the former, but I can imagine a route by which it fails by working the first time failing the second time b/c the hint var isn't forwarded. BTW, the ultimate test of whether this works is if `ldd -v .../psi4/core.so | grep gomp` comes back empty.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396757135:227,rout,route,227,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396757135,1,['rout'],['route']
Integrability,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-301264612:201,depend,dependencies,201,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612,1,['depend'],['dependencies']
Integrability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1251,interface,interfaces,1251,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,1,['interface'],['interfaces']
Integrability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:38,wrap,wrapper,38,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,1,['wrap'],['wrapper']
Integrability,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:616,depend,dependency,616,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,1,['depend'],['dependency']
Integrability,"Ah, yes, that did indeed slip my mind. Thank you for the reminder!. Here's how I would interpret it. First, I agree with Andy that, in the phrase ""Loop over all mu's in significant ""bra""-shell pairs"", significant refers to significant specifically in the given block. In the original paper, the entire Algorithm presented in Figure 1 is contained within an outer loop - ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"". This outer loop traverses the different types of shell pair blocks present in the calculation, e.g., |ss>, |ps>, |pp>, etc. (Note that the loop also separates different shell pair types of the same angular momenta by the contraction degrees of the shells in the shell pair). Then, for a given shell pair type (say, using |ps> as an example), the algorithm will be conducted. For the step ""Loop over all mu's in significant ""bra""-shell pairs"", the loop would be over all shells mu that are present in a significant shell pair of the given shell pair type. Using our example, the loop would be over all shells mu that are present in a significant |ps> shell pair. Something to reinforce this interpretation, is this line from the LinK paper, providing a definition to the condition used in the preselection step:; ""Here (mu_max | mu_max)^1/2 denotes the maximum over all integral estimates **of this shell-pair type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure desc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:405,contract,contraction,405,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867,2,['contract'],['contraction']
Integrability,"All good points from Zach. I slightly prefer map return style; it makes it more transparent that the `Localizer` class is a glorified wrapper on the `localize` function. But my opinions are loosely held. Incidentally, `localize_task` should be `localize` for sake of consistency.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-998196766:134,wrap,wrapper,134,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998196766,1,['wrap'],['wrapper']
Integrability,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:87,wrap,wrapped,87,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739,3,"['message', 'wrap']","['message', 'wrap', 'wrapped']"
Integrability,"All planned functionals added, and the full test suite is clean after the ft97 fix upstream (thanks!). CI expected to pass. What remains for this is modernizing the tweak/omega interface from c.2018 to c.2021 via named parameter setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-756317051:177,interface,interface,177,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-756317051,1,['interface'],['interface']
Integrability,"All right, I moved the location of the `FORCE_PEDANTIC` definition, as per the suggestion of @loriab. This seems to work, as when I compile a local instance of this Psi4 branch with an internally-built IntegratorXX, it now compiles, whereas it did not previously.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402:202,Integrat,IntegratorXX,202,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402,1,['Integrat'],['IntegratorXX']
Integrability,"All right, blanket deprecated `ERISieve`!. ... but there's a catch. It seems the compiler complains when trying to use `PSI_API` and `PSI_DEPRECATE(""message"")` together on the same class. I essentially had to hand-insert the associated macros to get the code to compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527976438:149,message,message,149,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527976438,1,['message'],['message']
Integrability,"All tests ran through except for:; FAILED tests/fsapt1/test_input.py::test_fsapt1 - AssertionError: Traceback (most recent call last):; with the message:; E !----------------------------------------------------------------------------------!; E ! !; E ! Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to !; E ! do in-core! Increase the amount of memory allocated to Psi4 or allow for !; E ! out-of-core to be used. !; E ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4nm_171103 !; E ! 8779956/work/psi4/src/psi4/lib3index/dfhelper.cc on line: 261 !; E ! The most recent 5 function calls were: !; E ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; E ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; E ! psi::DFHelper::initialize() !; E ! !; E !----------------------------------------------------------------------------------!. I think this is independent of this PR and the PR would be good to go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817:145,message,message,145,https://psicode.org,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817,1,['message'],['message']
Integrability,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241014675:157,message,messages,157,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675,1,['message'],['messages']
Integrability,"All the CTests have passed, except two that are not related to this PR; 1.) sapt7 (Error Message: `'psi4.core.UHF' object has no attribute 'diis_manager'`). 2.) scf-cholesky-basis (Error message: `Energy with Cholesky 1e-7: computed value (-230.6415254470) does not match (-230.6415254327) to atol=1e-08 by difference (-0.0000000142).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560:89,Message,Message,89,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560,2,"['Message', 'message']","['Message', 'message']"
Integrability,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:354,depend,depend,354,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542,2,['depend'],['depend']
Integrability,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559#issuecomment-271455005:151,integrat,integrated,151,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005,1,['integrat'],['integrated']
Integrability,"Also, I would replace all the inverse functions with calls to the same routines in `orthog.cc`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2652#issuecomment-1199856872:71,rout,routines,71,https://psicode.org,https://github.com/psi4/psi4/issues/2652#issuecomment-1199856872,1,['rout'],['routines']
Integrability,"Also, `set_tweak` could be made completely general; since the libxc interface has been unified, the only thing you need to do is check that the number of parameters given to the functional is correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-610234611:68,interface,interface,68,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-610234611,1,['interface'],['interface']
Integrability,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:206,depend,dependencies,206,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:28,depend,dependency,28,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198,2,['depend'],['dependency']
Integrability,"And yeah, I was planning to file a ticket in here that ADIIS should be implemented. It is already available in ERKALE and I think PySCF, also, although I think PySCF also has EDIIS and I'm not sure whether either is enabled in the SCF. PySCF is in my experience excellent at finding convergent solutions to a problem; using spherical symmetry in the SAD code is an essential feature. The only issue I found recently is that DIIS in PySCF does not treat linear dependencies properly, which means that whenever you have overcompleteness, the code doesn't find the correct solution. https://github.com/pyscf/pyscf/issues/1000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682:460,depend,dependencies,460,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682,1,['depend'],['dependencies']
Integrability,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:67,message,message,67,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737,1,['message'],['message']
Integrability,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/731#issuecomment-306527489:72,message,messages,72,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489,1,['message'],['messages']
Integrability,"Any chance at all that there's an old (what p4 used until maybe a month ago) pybind11 2.2.0 anywhere conceivably detectable, including in a conda env where other p4 dependencies are detected? CMake is perfectly capable of finding the pb11 you want and then C++ header detection takes over and finds the pb11 you _don't_ want. EDIT: **2.0.0**, not 2.2.0; Further EDIT: it does look like gcc7 is the highest they regularly test https://travis-ci.org/pybind/pybind11/builds/375778661?utm_source=github_status&utm_medium=notification",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831:165,depend,dependencies,165,https://psicode.org,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831,1,['depend'],['dependencies']
Integrability,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:26,contract,contractions,26,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916,1,['contract'],['contractions']
Integrability,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:379,contract,contractions,379,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701,1,['contract'],['contractions']
Integrability,"Apparently, the handling of correlated/non-correlated densities has been [inconsistent](http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532/9) for some time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-454457029:158,interface,interface,158,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-454457029,1,['interface'],['interface']
Integrability,"Are there any special concerns needed to prevent linear dependencies from causing problems in the EDIIS/ADIIS extrapolation, or am I safe to use linearly dependent SO basis quantities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538:56,depend,dependencies,56,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538,2,['depend'],"['dependencies', 'dependent']"
Integrability,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:615,depend,dependencies,615,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,1,['depend'],['dependencies']
Integrability,"Armadillo can be used without the wrapper without any problems. Personally I have problems understanding why the wrapper was implemented in the first place, it usually just is in the way. All that the wrapper does is link to the BLAS and LAPACK library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-446571835:34,wrap,wrapper,34,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-446571835,3,['wrap'],['wrapper']
Integrability,"As @hokru pointed out, this is because I forgot to define fragments in my system. Perhaps we should check for that in the n-body driver somehow and print a better error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743:169,message,message,169,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743,1,['message'],['message']
Integrability,"As I recall, switching the to disk_jk does heal them. Forcing that does seem the best route, as we want to get this in tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385258279:86,rout,route,86,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385258279,1,['rout'],['route']
Integrability,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:531,depend,dependancies,531,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509,1,['depend'],['dependancies']
Integrability,"As a note this is a perfect example where you probably want to squash commits so that the git history is more understandable. A quick rundown would be something like the following:. `git rebase -i HEAD~5`; Change the commits that you no longer want from `pick` to `squash`, save the file. See [here](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages) for more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-176995836:384,Message,Messages,384,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176995836,1,['Message'],['Messages']
Integrability,"As commented in the forum, if the problem is df linear dependencies, then setting e.g. `df_fitting_condition 1e-7` should fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465248469:55,depend,dependencies,55,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465248469,1,['depend'],['dependencies']
Integrability,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:348,message,message,348,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913,1,['message'],['message']
Integrability,"As of 0.2.287, conda binary is building chemps2 and properly downloading dependency hdf5 from defaults and gsl from copy of asmeurer's into psi4 channel. As of 0.2.291 (42175a9cc2a2ba082c33a676c0bc518125f5f445), conda binary is building dkh and properly linking _static_ Fortran libraries so no user PATH manipulations necessary. Checked, but please report if ever otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126863294:73,depend,dependency,73,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126863294,1,['depend'],['dependency']
Integrability,As the code is in place and we have a long test for it I say lets go ahead and get this in. This is a good unit of work currently and I think the discussion on how to integrate this properly into Psi4 is a long one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-369678429:167,integrat,integrate,167,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-369678429,1,['integrat'],['integrate']
Integrability,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415#issuecomment-227061602:333,depend,dependent,333,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201#issuecomment-169689686:50,rout,routines,50,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686,1,['rout'],['routines']
Integrability,"Bad luck -- opt13 hits memory problems. It passes the ""in-core AOs"" check with 200 kb to spare (14042044 and 14074472 below are need and supplied in ints), then runs out of memory for AO blocking. The result of the print statement in second snippet is `AAAA 1: 14176380 > 14074472 || 3 == 65`. Should we put padding back or go another route?. ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.104621 GiB; user supplied 0.104863 GiB. 14042044 14074472; Using in-core AOs. Traceback (most recent call last):; File ""stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:335,rout,route,335,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,1,['rout'],['route']
Integrability,"Based on your writing, I assume you're a student researcher. Posting error messages _like this_ is not a good way to get help. Large input files like this make it difficult for developers to find the actual problem. It's best practice to simplify the input file as much as possible while still making the error clear. Sometimes, doing that can tell _you_ where the problem is. If you don't know how to do this kind of troubleshooting, consult your seniors in your research group or your professor. I've played around with your latest input file and can confirm that you have made a fairly straightforward mistake, but you've discarded important information. As an exercise, please post a _simplified_ input that reproduces your problem, and a _complete_ error message. Once you've done that, I'll update the error message to be more explicit and offer some advice on how to bypass this. (Though once you understand the error, it's fairly straightforward.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955:75,message,messages,75,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955,3,['message'],"['message', 'messages']"
Integrability,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:703,rout,route,703,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['rout'],['route']
Integrability,"Because it's a quick test, and the values you get out are highly dependent on the functional. Also, you get the fun edge cases of a bare proton (no electrons), and a hydrogen atom (no beta electrons).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455:65,depend,dependent,65,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455,1,['depend'],['dependent']
Integrability,"Btw you don't have Cholesky routines as an alternative to RI? Seems like you do have CD for CC, you could just take the B matrices from the CD and use them for the SCF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223727271:28,rout,routines,28,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223727271,1,['rout'],['routines']
Integrability,"But why does GDMA work when called through the psi4 binary? ; Both psi4 python and pis4 binary use the same GDMA executable in the background (maybe I am wrong on this?), and gdma handles the `stdout` well when called with the binary (i.e. without python wrapping). It rather seems to me that the `stdout` connection between python and gdma is somehow broken and results in this bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436227472:255,wrap,wrapping,255,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436227472,1,['wrap'],['wrapping']
Integrability,"But yes, I agree that actually lifting the restriction mentioned in the original issue is either impossible or super tricky. Perhaps just reporting a clear error message when the mol name is not a valid Py identifier is the most friendly thing (e.g. I saw http://stackoverflow.com/a/29586366). Anyways, low priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286911897:162,message,message,162,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286911897,1,['message'],['message']
Integrability,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:238,depend,dependencies,238,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682,8,"['contract', 'depend']","['contracted', 'dependencies', 'dependency', 'dependent']"
Integrability,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:124,contract,contracting,124,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,2,"['contract', 'rout']","['contracting', 'routes']"
Integrability,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231269168:79,message,message,79,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168,1,['message'],['message']
Integrability,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239211359:847,inject,injecting,847,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359,1,['inject'],['injecting']
Integrability,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809#issuecomment-334001557:192,integrat,integrate,192,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557,1,['integrat'],['integrate']
Integrability,By the way: chemps2 v1.7-rc3 doesn't depend on GSL anymore. I have my own Wigner-nj generator now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220990273:37,depend,depend,37,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220990273,1,['depend'],['depend']
Integrability,Can `USE_OPENMP` be set dynamically? We could consider wrapping all C++ calls in a function that sets the environment. Could also be useful for fiddling with thread affinities as per Matt's suggestion. Sounds like a really horrible idea though...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390202737:55,wrap,wrapping,55,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390202737,1,['wrap'],['wrapping']
Integrability,"Can we either move the warning to the end or make it red with `message(""${Red}This is Red${ColourReset}"")`?. Where red is `""${Esc}[31m""` or bold red `${Esc}[1;31m""`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733525:63,message,message,63,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733525,1,['message'],['message']
Integrability,Can you provide a before-and-after example of what error messages look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371:57,message,messages,57,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291191371,1,['message'],['messages']
Integrability,"Can you update the test to also test using MOs obtained from an SCF that did _not_ finish successfully?. I like the interface, but it'd be best to get more opinions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925:116,interface,interface,116,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925,1,['interface'],['interface']
Integrability,"Cannot replicate this bug. Iterations are oscillating like crazy, but no; singularity. I get similar oscillations for singlet cation in cc-pVDZ; (eventually converges) with both DF and ID. -Rob. On Fri, Apr 29, 2016 at 1:54 PM, Rob Parrish robparrish@gmail.com wrote:. > Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; > bad eigenvalue in the DF metric, though I have traps in for this. Compiling; > a fork to check this out.; > ; > -Rob; > ; > On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > The following either gives NaN energy or (positive) 60,000 [Eh]; > > depending on MKL version and compile options. All basis sets smaller than; > > aug-cc-pVQZ seem to check out, did not try larger.; > > ; > > molecule mol {; > > 0 2; > > C -2.83891 -0.84747 -0.20778; > > N -2.06959 -0.27604 0.77905; > > C -0.85937 -0.82512 0.74757; > > N -0.82980 -1.74677 -0.21226; > > C -2.05910 -1.77487 -0.83179; > > C -2.45490 0.86620 1.59959; > > C 0.35903 -2.49473 -0.61265; > > F -1.01767 1.46174 -1.11980; > > B 0.28985 1.63764 -0.63648; > > F 0.23738 1.82826 0.77419; > > F 0.89453 2.73957 -1.24020; > > F 1.05039 0.46734 -0.88673; > > H -0.02604 -0.54755 1.38339; > > H -2.27287 -2.45330 -1.64959; > > H -3.86751 -0.55086 -0.37733; > > H -3.45079 0.68580 2.01748; > > H -1.72185 0.98138 2.40249; > > H -2.44673 1.75972 0.96603; > > H 0.98379 -1.85263 -1.24323; > > H 0.91655 -2.78676 0.28358; > > H 0.03922 -3.39046 -1.15377; > > C 2.81822 0.12352 1.52490; > > C 3.26768 -0.78277 0.56145; > > H 3.28632 0.11977 2.50813; > > H 2.01109 0.81253 1.27433; > > N 3.64537 -1.55240 -0.23308; > > }; > > ; > > set {; > > basis cc-pVQZ; > > scf_type df; > > guess gwh; > > reference rohf; > > }; > > ; > > energy('SCF'); > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215889548:632,depend,depending,632,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215889548,1,['depend'],['depending']
Integrability,"Carrying forward from #2201:. Quoth Francesco:; > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly. Quoth Susi:; > This is an inherent drawback of X2C which employs a restricted minimal balance basis. The orbital basis set of non-relativistic theory is the large component set that depicts the electronic part of the relativistic wave function, and the small component set is obtained by acting on the large component with something that looks like `sigma . p` that has the classical three-momentum operator which is essentially nabla. This approach becomes inefficient when the orbital basis is large; this is why four-component codes favor the use of separate basis sets for the small and large components.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868#issuecomment-869207320:162,depend,dependencies,162,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-869207320,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Caught another bug: fractional SAD orbital occupations were determined as; ```; double frac_act = std::pow(((double)(Z - nfzc * 2)) / ((double)nact * 2), 0.5);; ```; which is the square root of the correct number, and also does not give the right spin state. I'm wondering why aren't fractional occupations the default? The thing is that the SAD guess should either employ spherically averaged occupations, or symmetrize the atomic density matrix after the SCF has converged. Otherwise you might get unreliable behavior: since HF breaks symmetries, the density is not going to be spherically symmetric. Put this into a molecule, and the guess will give you an answer that depends on the orientation of the molecule. Or, one can use multiconfigurational methods such as MCHF to get the proper symmetry for the density matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450749375:672,depend,depends,672,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450749375,1,['depend'],['depends']
Integrability,"Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it. All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc. This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277 . In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370:167,Depend,Depending,167,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370,1,['Depend'],['Depending']
Integrability,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295524802:517,interface,interface,517,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802,1,['interface'],['interface']
Integrability,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:132,depend,dependency,132,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,1,['depend'],['dependency']
Integrability,"Closing issue. In neither of the posted input files do I see a ""fails to converge"" message. On modifying Peter's posted input to use the def2-QZVP basis, the SCF converges using 10 iterations. Likely explanations include ADIIS SCF convergence acceleration and the switch to libecpint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856#issuecomment-1133742940:83,message,message,83,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-1133742940,1,['message'],['message']
Integrability,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:37,wrap,wrapper,37,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"Commenting out an extra cmake line fixes the `coreNone` to `core.so`. Basic, but works. ```; >>> (1.3.x) ll stage/lib/psi4/; total 25704; -rwxr-xr-x. 1 psilocaluser psilocaluser 26286096 Nov 1 16:43 core.so; drwxr-xr-x. 7 psilocaluser psilocaluser 4096 Nov 1 15:58 driver; -rw-r--r--. 1 psilocaluser psilocaluser 5898 Nov 1 15:08 extras.py; -rw-r--r--. 1 psilocaluser psilocaluser 2934 Nov 1 14:50 header.py; -rw-r--r--. 1 psilocaluser psilocaluser 3693 Nov 1 15:08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:43 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; >>> (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```; ```; >>> (1.3.x) git diff; diff --git a/psi4/src/CMakeLists.txt b/psi4/src/CMakeLists.txt; index da11518..b287b0d 100644; --- a/psi4/src/CMakeLists.txt; +++ b/psi4/src/CMakeLists.txt; @@ -134,6 +134,6 @@ message(STATUS ""Psi4 rpath: ${psi4_RPATH}""); set_target_properties(core PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME core; EXPORT_NAME core; - SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; + #SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; INSTALL_RPATH ""${psi4_RPATH}""; BUILD_WITH_INSTALL_RPATH ON); diff --git a/psi4/src/create_new_plugin.cc b/psi4/src/create_new_plugin.cc; index 3734a7b..6f2bde2 100644; --- a/psi4/src/create_new_plugin.cc; +++ b/psi4/src/create_new_plugin.cc; @@ -32,6 +32,7 @@; #include <regex>; #include <sstream>; #include <string>; +#include <iterator>; ; #include ""psi4/psi4-dec.h""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848:1040,message,message,1040,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848,1,['message'],['message']
Integrability,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288899031:81,depend,dependent,81,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031,1,['depend'],['dependent']
Integrability,"Cool! I noticed ""The extension to higher symmetries does not seem; promising, however."" That looks pretty solid given that it's 2022 and we; still don't do it!. On Wed, Oct 5, 2022 at 1:37 PM Jonathon Misiewicz ***@***.***>; wrote:. > ***@***.**** commented on this pull request.; > ------------------------------; >; > In psi4/src/psi4/libmints/matrix.cc; > <https://github.com/psi4/psi4/pull/2734#discussion_r988229382>:; >; > > for (int p = 0; p < max_p; p++) {; > for (int q = 0; q < max_q; q++) {; > double value = block.get(h, p, q);; > - set(h, p + rows_begin[h], q + cols_begin[h], value);; > + set(h, p + rows_begin[h], q + cols_begin[h ^ symmetry_], value);; >; > That traces back to the MOLECULE code. See Section 4 of this report that; > TDC has saved; > <https://drive.google.com/file/d/1VtVpwvaleR1FF1hm2LchS2SQZ8_RHsJA/view>.; > Molecule - A Program System for Non-Empirical Calculation of the Electronic; > Structure of Molecules II. Integral Section. University of Stockholm; > Institute of Physics Report 74 - 29, December 1974.; >; > Hat tip to TDC for remembering this.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2734#discussion_r988229382>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBLGWXR5H5YZ7IKZATWBXDHRANCNFSM6AAAAAAQ32VGSQ>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2734#issuecomment-1268821483:1393,Message,Message,1393,https://psicode.org,https://github.com/psi4/psi4/pull/2734#issuecomment-1268821483,1,['Message'],['Message']
Integrability,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:271,integrat,integration,271,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875,1,['integrat'],['integration']
Integrability,"Could `std::string` operations serve the purpose here? We had some `char *` issues with pybind11 and although there's no direct interface in optking, there was talk of moving from `char *`s to `std::string`s for readability.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535#issuecomment-263942358:128,interface,interface,128,https://psicode.org,https://github.com/psi4/psi4/pull/535#issuecomment-263942358,1,['interface'],['interface']
Integrability,"Currently only SAPT(DFT) goes through `sapt_jk_terms.py`. I kind of hope that we can move more of the SAPT0 code over to something similar with Disp staying fully C++. We are going to gain a lot of SAPT0 capabilities soon like spin-flip SAPT, Sinf Exch-Ind and Exch-Disp, regularized SAPT, ISA Exch etc and the Python level interface should make it easier to handle without performance degradation. I think the proposed would work fine. You can use either of the following:; ```python; >>> psi4.core.get_variables() # Returns a dict of all variables; >>> psi4.core.has_variable(""CURRENT DIPOLE X"") # Returns a bool checking if the variable is set; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364689483:324,interface,interface,324,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364689483,1,['interface'],['interface']
Integrability,"DE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed through to the makefile(s).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4576,message,message,4576,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['message'],['message']
Integrability,"Dear Andy,. The treatment of the spherical harmonic functions in gdma is a bit odd; (it was originally based on Cadpac code). The spherical harmonics are; the R_lm (no sqrt(2l+1/4pi) factor) so the coefficient of the z^n term; in R_n0 is always 1. The normalizing factor for z^n exp[-zeta r^2] is; attached to the contraction coefficents so one doesn't need to worry; about it any more. I got the coefficients for the R_lm using; Mathematica, so they should be alright, but I admit that I haven't; checked them for orthogonality. The ratio of the normalising factors for; x^ly^mz^n and z^(l+m+n) is applied to the density matrix in lines 1810; onwards of dma.f90, so the normalization is done there and it's only; necessary to accumulate the integrals over the products of x^ly^mz^n terms. But this means that the spherical harmonics as they appear in the; spherical-cartesian transformation in gdma.f90 are not actually; orthonormal as they stand. This is easier to handle than it might sound. As far as the fchk file is; concerned, it is only necessary to provide orbitals described in terms; of orthonormal spherical harmonics, and the corresponding density matrix. I hope this clarifies things. I may well have made some mistakes in; implementing it for the h functions, but I have checked it carefully; several times. What puzzles me is how the normalising coefficients for; the cartesian terms get into the fchk description in terms of spherical; harmonics. Best wishes,; Anthony. On 12/03/2019 18:36, Andy Simmonett wrote:; > I could well be misreading the code here, but I think there's a problem; > in the H function transformation. If I look at the transformation; > coefficients; > <https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275>; > and compare them to Table 1 of this paper; > <http://onlinelibrary.wiley.com/doi/10.1002/qua.560540202/full>, there; > appears to be many discrepancies. The G functions that I looked at seem; > to match up perfectly, acco",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472175255:314,contract,contraction,314,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472175255,1,['contract'],['contraction']
Integrability,"Dear Anthony,. Thank you for the detailed explanation. In terms of spherical harmonics in Psi4, there are no hard coded terms anywhere as far as I can remember: all integrals are transformed on the fly, using a general regular solid harmonic generating routine. Therefore, G and H functions are both handled by the same arbitrary-order transformation code. Your illness-addled brain is still more powerful than mine, so apologies if I'm wrong here, but I think I have confirmed my error diagnosis from last night. I found my old Mathematica code for generating (real) regular solid harmonics and can exactly match the [L=5 transformation coefficients](https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git/blob/HEAD:/src/gdma.f90#l275), as well as the the coefficients listed in Table 1 of the GDMA manual. However, for the L<5 coefficients in gdma.f90 my RSH generating code does not match. I can get exact agreement for these lower angular momentum terms by adding a factor of; ![image](https://user-images.githubusercontent.com/201881/54278407-a47bc180-4568-11e9-8875-e9ea637c3c1b.png); to the generating code. Therefore it appears that there is an inconsistency in the Cartesian normalization convention between the {s,p,d,f,g} and the {h} functions in gdma.f90. I hope this helps,. Best regards,. Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253:253,rout,routine,253,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472403253,1,['rout'],['routine']
Integrability,"Dear Daniel,. I think you misunderstood the discussion. In the DFOCC module there are many methods and all of them have both DF and CD versions. All DF and CD methods are implemented in the exactly the same source codes. There is no separate programming for DF and CD methods and there is no any repetition. What we are discussing with Lori is something else. DF-CCSD code has many terms, the most expensive term is called PPL. For the PPL the default algorithm with the ""pure"" DF approach is:. D_ij^ab t_ij^ab = Tau_ij^ef W_abef. where W_abef tensor includes <ab|ef>_DF integrals (Einstein summation convention is used). Additionally, I have implemented the following hybrid approach recently:. D_ij^ab t_ij^ab = Tau_ij^ef <ab|ef>_DF/CD + W_ijam t_m^a. In the above formula <ab|ef>_DF/CD integrals are obtained using a DF/CD hybrid approach. I do not want to write too much details. CDS knows what I am doing and why I am trying it. Further, as you can see the explicit formulas are used are not identical with the default PPL algorithm. . DFOCC::ccsd_WabefT2() function computes: . D_ij^ab t_ij^ab = Tau_ij^ef W_abef. while DFOCC::ccsd_WabefT2_cd() function computes:. D_ij^ab t_ij^ab = Tau_ij^ef <ab|ef>_DF/CD. contraction. Hence, each function compute a different term indeed. The difference is not just the DF vs CD. Therefore, there is no repetition of codes, but there are similarities in both functions of course. @dgasmith @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221157526:1214,contract,contraction,1214,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221157526,1,['contract'],['contraction']
Integrability,"Decontracted orbital sets should go with decontracted fitting sets. The use of the decontracted basis in x2c is just in the diagonalization of T^2, so the orbitals are still solved in a contracted basis set. If you want to get orbitals / properties, then you might need to decontract the basis, although I'm not sure psi4 currently handles anything where core functions are that important.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252776511:186,contract,contracted,186,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252776511,1,['contract'],['contracted']
Integrability,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-132368809:342,message,message,342,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809,6,['message'],['message']
Integrability,"Density fitting can ""look"" like a 4-index integral as `(0p|qr)` which is how we compute them. CASM-style screening is unlikely to be able to be used in the contractions as it would make the GEMM's sparse rather than dense; however, the construction of the integrals can take some time and can benefit from this screening. The impact may be less, but still a useful thing to do!. Note: I am not proposing that you do this, just something to keep in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-457966565:156,contract,contractions,156,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-457966565,1,['contract'],['contractions']
Integrability,Dependencies,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1278#issuecomment-426605622:0,Depend,Dependencies,0,https://psicode.org,https://github.com/psi4/psi4/pull/1278#issuecomment-426605622,1,['Depend'],['Dependencies']
Integrability,"Depends on how impatient the user is :) Actually, very nice, example.; Thanks!. On Fri, Apr 12, 2019 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > *still going*; >; > @psi-rking <https://github.com/psi-rking>, here's an example where; > dynamic level 2 might have kicked in a bit early?; >; > base) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (1.3.x) grep '~' bgobbi_wb97x.out; > --------------------------------------------------------------------------------------------- ~; > Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > --------------------------------------------------------------------------------------------- ~; > Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; > --------------------------------------------------------------------------------------------- ~; > 1 -1771.54871790 -1.77e+03 8.23e-03 1.77e-03 o 2.50e-01 2.94e-02 o ~; > 2 -1771.54896434 -2.46e-04 4.20e-03 7.85e-04 o 3.99e-02 7.34e-03 o ~; > 3 -1771.54708256 1.88e-03 1.22e-02 2.75e-03 o 3.09e-02 7.32e-03 o ~; > 4 -1771.54962420 -2.54e-03 1.84e-03 4.35e-04 o 5.76e-02 7.34e-03 o ~; > 5 -1771.54991808 -2.94e-04 6.10e-04 1.42e-04 o 4.66e-02 7.34e-03 o ~; > 6 -1771.54999493 -7.68e-05 5.40e-04 1.21e-04 o 1.40e-02 1.83e-03 o ~; > 7 -1771.55001819 -2.33e-05 4.51e-04 8.25e-05 o 1.89e-02 1.84e-03 o ~; > 8 -1771.55002275 -4.56e-06 3.95e-04 7.58e-05 o 4.60e-03 4.59e-04 o ~; > 9 -1771.55002699 -4.24e-06 3.75e-04 4.74e-05 o 4.74e-03 4.59e-04 o ~; > 10 -1771.55002919 -2.20e-06 3.62e-04 3.71e-05 o 1.53e-02 1.38e-03 o ~; > 11 -1771.55003367 -4.48e-06 3.38e-04 3.16e-05 o 1.53e-02 1.38e-03 o ~; > 12 -1771.55003620 -2.53e-06 3.26e-04 3.22e-05 o 1.56e-02 1.38e-03 o ~; > 13 -1771.55003691 -7.15e-07 * 3.21e-04 3.16e-05 o 3.92e-03 3.44e-04 o ~; > 14 -1771.55003705 -1.33e-07 * 3.23e-04 2.89e-05 o 9.90e-04 * 8.66e-05 o ~; > 15 -1771.55003766 -6.15e-07 * 3.24e-04 2.84e-05 o 2.99e-03 2.58e-04 o ~; > 	Raising dynamic level to 2. ~; > ------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167:0,Depend,Depends,0,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482755167,1,['Depend'],['Depends']
Integrability,"Deprecation message added! I'm less familiar with deprecating things in Psi4, so let me know if anything else should be done on that front.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1521761303:12,message,message,12,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1521761303,1,['message'],['message']
Integrability,Did you get a change to look at this and see if the alternative route does what you need?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-784450007:64,rout,route,64,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-784450007,1,['rout'],['route']
Integrability,"Did you run `make docs`? We've been discouraging users from building the docs themselves, as they require several extra dependencies and we have them hosted (http://sirius.chem.vt.edu/psi4manual/latest/index.html). However, the developers do need to be able to test the docs build, hence the Makefile target is still there. We do want to continue shipping samples in the tarball, as the documentation links to them on github. We can, however, be more careful about making sure they're up to date before packing the tarball. Also, we can drop git tracking of SUMMARY, since it's prone to reshuffling its contents and may show up as modified after a docs build. Would that help?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22982958:120,depend,dependencies,120,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22982958,1,['depend'],['dependencies']
Integrability,"Do we have a figure in there yet illustrating the inter-fragment; definitions? I have no time to work on it today, but could tomorrow; (Saturday). On Fri, Dec 2, 2022 at 11:37 AM AlexHeide ***@***.***> wrote:. > @psi-rking <https://github.com/psi-rking> Can you give the optking docs; > another read through? Anything from your experiences with forum questions; > and such that we should add? If you have any thoughts on further clarifying; > the inter-fragment section that would also be super helpful. I'm printing; > the html now to make another editing pass.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2727#issuecomment-1335575353>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TEDXN7A6CEYGZ32SO3WLIXWFANCNFSM6AAAAAAQWELJAU>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335593560:873,Message,Message,873,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335593560,1,['Message'],['Message']
Integrability,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:618,depend,dependencies,618,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Does the overall energy look sensible when you've got the additional diffuse functions? . I occasionally find that def2-TZVPD converges to some odd state with strange properties (energy, dipole etc). I'd put it down to some form of numerical difficulties as I could usually use a mixed basis of def2-TZVP on some atoms and def2-TZVPD on others and get logical values (identity of which atoms to change was system dependent, but often H is the main culprit).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698:413,depend,dependent,413,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698,1,['depend'],['dependent']
Integrability,"Does the singlet cation exhibit the same failure with RHF/SAD? Could be a; bad eigenvalue in the DF metric, though I have traps in for this. Compiling; a fork to check this out. -Rob. On Fri, Apr 29, 2016 at 12:56 PM, Daniel Smith notifications@github.com; wrote:. > The following either gives NaN energy or (positive) 60,000 [Eh] depending; > on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ; > seem to check out, did not try larger.; > ; > molecule mol {; > 0 2; > C -2.83891 -0.84747 -0.20778; > N -2.06959 -0.27604 0.77905; > C -0.85937 -0.82512 0.74757; > N -0.82980 -1.74677 -0.21226; > C -2.05910 -1.77487 -0.83179; > C -2.45490 0.86620 1.59959; > C 0.35903 -2.49473 -0.61265; > F -1.01767 1.46174 -1.11980; > B 0.28985 1.63764 -0.63648; > F 0.23738 1.82826 0.77419; > F 0.89453 2.73957 -1.24020; > F 1.05039 0.46734 -0.88673; > H -0.02604 -0.54755 1.38339; > H -2.27287 -2.45330 -1.64959; > H -3.86751 -0.55086 -0.37733; > H -3.45079 0.68580 2.01748; > H -1.72185 0.98138 2.40249; > H -2.44673 1.75972 0.96603; > H 0.98379 -1.85263 -1.24323; > H 0.91655 -2.78676 0.28358; > H 0.03922 -3.39046 -1.15377; > C 2.81822 0.12352 1.52490; > C 3.26768 -0.78277 0.56145; > H 3.28632 0.11977 2.50813; > H 2.01109 0.81253 1.27433; > N 3.64537 -1.55240 -0.23308; > }; > ; > set {; > basis cc-pVQZ; > scf_type df; > guess gwh; > reference rohf; > }; > ; > energy('SCF'); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/371",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215879353:331,depend,depending,331,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215879353,1,['depend'],['depending']
Integrability,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:604,message,message,604,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,1,['message'],['message']
Integrability,"Doesn't seem to be working too great; I get on my machine; ```; $ psi4 -n 8 ; 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; Traceback (most recent call last):; File ""/home/work/psi4/install.susi/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/home/work/psi4/install.susi/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; ```; and the result is the same regardless of the guess...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290:472,message,message,472,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290,1,['message'],['message']
Integrability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:4049,wrap,wrapper,4049,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['wrap'],['wrapper']
Integrability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4348,wrap,wrapper,4348,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['wrap'],['wrapper']
Integrability,"Einsums is currently going to be made an optional dependency; and therefore, MP2-F12 will be made optional. There are some condo compiler issues we're not ready to tackle just yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2414129359:50,depend,dependency,50,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2414129359,1,['depend'],['dependency']
Integrability,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:729,Integrat,Integrate,729,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,2,"['Integrat', 'rout']","['Integrate', 'routines']"
Integrability,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:408,message,message,408,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172,1,['message'],['message']
Integrability,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260369576:90,contract,contractions,90,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576,1,['contract'],['contractions']
Integrability,"Excellent call, Jet - I've updated the dependencies to properly reflect how the PB11 deps get introduced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681:39,depend,dependencies,39,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681,1,['depend'],['dependencies']
Integrability,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202622738:317,rout,routine,317,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738,1,['rout'],['routine']
Integrability,"FWIW I think all DF codes should just call the orthogonalization routines in `orthog.cc`. You can use them either in the symmetric mode or the asymmetric mode. In the symmetric mode you contract with the matrix `X` that is produced by the orthogonalization; for the asymmetric one you can build the inverse matrix with `S^-1 = X X^T`. As I explain in [arXiv:2106.11081](http://arxiv.org/abs/2106.11081), this should eliminate any numerical instabilities from the density fitting routines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-907677526:65,rout,routines,65,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-907677526,3,"['contract', 'rout']","['contract', 'routines']"
Integrability,"FYI you can link to the actual code line by clicking on it and pasting the URL into the message (I then got fancy and renamed the link, so you don't see some horrendous url).... [lreri.cc:720](https://github.com/psi4/psi4public/blob/master/src/lib/libthce/lreri.cc#L720). and as you can see by following said link, line 720 is a blank line above a constructor definition...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157#issuecomment-128492830:88,message,message,88,https://psicode.org,https://github.com/psi4/psi4/issues/157#issuecomment-128492830,1,['message'],['message']
Integrability,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182588993:771,message,messages,771,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993,1,['message'],['messages']
Integrability,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:635,message,message,635,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,3,"['INTERFACE', 'message']","['INTERFACE', 'message']"
Integrability,"Firstly, wow, nice doing this benchmark. @andysim wrote:; > The direct range-separated code worked fine, confirming that the derivative integrals were correct. You are talking about the complete direct RSF gradient code? because it has also been disabled in the driver. The manual only ever explicitly told that the DF gradient code is not working, i believe. I actually asked about this once in the forum: http://forum.psicode.org/t/lrc-dft-gradients-time-plan/140/4 ; Basically my test back then caused me to suggest the route (direct and not DF gradients) @raimis is trying out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351404019:523,rout,route,523,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351404019,1,['rout'],['route']
Integrability,"For QM/MM, since you have many thousands of points, most QM programs use a simple external file for point charges so one does not have to send everything through the slower-but-smarter ""molecule recognition"" machinery. Besides, these external files are easier to write by the MM program interface as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857:287,interface,interface,287,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625891857,1,['interface'],['interface']
Integrability,"For future reference: To further decouple the finite difference code from the Psi4 core, let's recreate CdSalcList in QCDB. The PetiteList dependence appears to be exclusively through [compute_atom_map](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.cc#L244) which [already exists](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L3192) in QCDB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-430334458:139,depend,dependence,139,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-430334458,1,['depend'],['dependence']
Integrability,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182577836:431,message,messages,431,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836,1,['message'],['messages']
Integrability,For the linear dependency problems you might want to have a look at Knizia et al in 10.1021/ct200239p. Replacing the use of inverse overlap matrices with the solution of linear equations makes the algorithms much more tolerant to linear dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252990815:15,depend,dependency,15,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252990815,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:334,depend,depend,334,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742,3,['depend'],"['depend', 'dependencies']"
Integrability,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220613816:100,depend,depend,100,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816,1,['depend'],['depend']
Integrability,"From the cfour email chain today, it sounds like `CFOUR_NUM_CORES` is widespread. I'll add it to the whitelisted envvars. > export CFOUR_NUM_CORES=20; >; > From my experience I can say that using more than 4 processors will not increase performance and even sometimes the worse. Of course that depends also from the kind of computation (optimization, frequency, …).; > ; > Best regards,; > Alberto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661#issuecomment-289809443:294,depend,depends,294,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-289809443,1,['depend'],['depends']
Integrability,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702224:673,depend,dependency,673,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224,1,['depend'],['dependency']
Integrability,"Further discussion of replacing `libpsio` should be moved to a new issue. As for your specific proposal:. I'm not familiar with Q5Cost, and a quick Google search gives me a 14-year-old manual with so many out-of-date links that I doubt Q5Cost is actively maintained. That's a compelling argument against adopting it. Q5Cost was a proposed standard format for tensors-with-metadata. If MRCC is the only other major user and we have no reason to believe in other users, interoperability is not a compelling reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725#issuecomment-1272030427:468,interoperab,interoperability,468,https://psicode.org,https://github.com/psi4/psi4/issues/2725#issuecomment-1272030427,1,['interoperab'],['interoperability']
Integrability,"Further note that importing numpy first won't fix everything. Accelerate-linked `import psi4` can still break numpy linalg. Whether it's fixed by Accelerate to Numpy or Accelerate to mkl-rt-linked Numpy is undetermined. Seen in evec of degen pair of hessian ; ```projhess = np.array([[ 0.0159, 0.0000, 0.0000, -0.0069, -0.0000, 0.0000, -0.0069, -0.0000, 0.0000],; [ 0.0000, 0.0159, 0.0000, -0.0000, -0.0069, 0.0000, 0.0000, -0.0069, 0.0000],; [ 0.0000, 0.0000, 0.1832, 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0793],; [-0.0069, -0.0000, 0.0000, 0.0030, 0.0000, 0.0000, 0.0030, 0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, 0.0777, 0.0000, 0.0000, -0.0090],; [-0.0069, 0.0000, 0.0000, 0.0030, -0.0000, 0.0000, 0.0030, -0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0090, 0.0000, 0.0000, 0.0777]]); ```. And the code turned out to be fully up-to-date. My foolishness was in not using the dev env that properly sets up MKL from conda and instead just using Mac built-ins. CMake does not have the power to select/reject dependencies based on their `ldd` profile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-340284447:1208,depend,dependencies,1208,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-340284447,1,['depend'],['dependencies']
Integrability,"Generally psi4 is supposed to catch those and still finish gracefully, and with upcoming psi4 v1.4 one gets also more visible error messages (see PR https://github.com/psi4/psi4/pull/1862). But here psi4 is aborted which is indeed not user friendly.; I dont know the exceptions machinery well enough to say why but it happens also in the current developer version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241:132,message,messages,132,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241,1,['message'],['messages']
Integrability,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:564,depend,dependent,564,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['depend'],['dependent']
Integrability,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263272403:313,message,messages,313,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403,1,['message'],['messages']
Integrability,"Given the reporter, the geometry they input is probably garbage. While I agree attempts to optimize from this are in vain, there should be a proper error message instead of just crashing with an obscure C error code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167:154,message,message,154,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167,1,['message'],['message']
Integrability,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252908695:66,depend,dependencies,66,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:173,wrap,wrappers,173,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,3,['wrap'],"['wrapper', 'wrappers']"
Integrability,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764#issuecomment-318659874:73,depend,dependencies,73,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874,1,['depend'],['dependencies']
Integrability,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:635,message,messages,635,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,4,"['Message', 'message']","['Message', 'message', 'messages']"
Integrability,"Good point -- @jeffschriber understands the issue and plans to address it sometime. The summary is that the new MBIS volume ratio functionality is only half available. The `energy(); oeprop(..., ""MBIS_VOLUME_RATIOS"")` route is fine, but `set scf_properties [mbis_volume_ratios]; energy()` fails b/c some necessary data (free atom volumes) isn't available. This isn't a regression. It'd just be nice to even up the capabilities, esp. as a qcschema run can only use the second form.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575:218,rout,route,218,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-926645575,1,['rout'],['route']
Integrability,"Good to know!. And naming the block and applying `set basis_relativistic mysvp` fixes the original forum issue. It would still be nice if the error message had told him the problem was needing to define `basis_relativistic`, though...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102:148,message,message,148,https://psicode.org,https://github.com/psi4/psi4/issues/1332#issuecomment-435700102,1,['message'],['message']
Integrability,"Good, thanks!. Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:; - no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`); - psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`); - production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8; - source is probably a little out of date as this turned to c++14 around Christmas (`-- Setting (unspecified) option psi4_CXX_STANDARD: 11`); - I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`); - threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270.; - it's finding an AM=5 libint (`-- [36mFound Libint 5[m: /usr/lib/libint.a (found version 1.2.0)`). this'll make it through the tests but not good for production.; - aha, you're targeting v1.2.1, not v1.3! nevermind what I said about c++14; - `ImportError: Install python module networkx`; - Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824:920,message,message,920,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824,1,['message'],['message']
Integrability,"Good, this one's taken care of. In future, you can put `fixes psi4/psi4#487` in the commit message so that that issue will close automatically when the correcting PR gets merged into master. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/498#issuecomment-258581778:91,message,message,91,https://psicode.org,https://github.com/psi4/psi4/pull/498#issuecomment-258581778,1,['message'],['message']
Integrability,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122478325:633,message,message,633,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325,6,['message'],['message']
Integrability,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201110783:414,interface,interface,414,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783,1,['interface'],['interface']
Integrability,"Great work, @bennybp and @loriab. I didn't realize just how half assed my attempt to interface ERD was until reviewing this PR (I lost steam a little when I realized we weren't getting any speedup over libint). The error checking to catch bad use cases is great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277415985:85,interface,interface,85,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277415985,1,['interface'],['interface']
Integrability,"Great! Provided the stability instability doesn't pop up again, this is ready. If you definitely want VWN3 renamed, I'll do it. But since the functional repository names it VWN3 and the coding of the functional is a lot harder to check than the assembly of the superfunctional, I think the extra notes I added to `set_description` will bridge the clarity gap.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-210126325:336,bridg,bridge,336,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-210126325,1,['bridg'],['bridge']
Integrability,"Great!. If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380:143,integrat,integration,143,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380,1,['integrat'],['integration']
Integrability,"Great, we were talking yesterday about how an interfaces doc page was needed, and here it is!. I was going to just mention topic here, but it turned into a write-up, so made an independent issue (https://github.com/psi4/psi4/issues/122). Would you take a look and see if you agree with its strategy?. On the `pcm {...}` block, is that the same syntax across the other QC programs that pcmsolver is integrated with?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171668610:46,interface,interfaces,46,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171668610,2,"['integrat', 'interface']","['integrated', 'interfaces']"
Integrability,"Great. Let me explain the issue here. DFT does a numerical integration. If you want to compute a gradient, then _in principle_, you should include derivatives of the integration grid itself. Psi4 does not do that. (@susilehtola tells me that an open-source library in active development will handle that for us soon.) In the limit of an infinitely large grid, the error due to neglecting the geometry dependence of the grid vanishes. That error is _probably_ what you're seeing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791:59,integrat,integration,59,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791,3,"['depend', 'integrat']","['dependence', 'integration']"
Integrability,"Hello @raimis @loriab , I built psi4-v1.3.2 with visual studio 2019，I have changed the compilation option -openmp to -openmp:experimental(Although it does not fully support the syntax of openmp4.0), and fixed some include errors in the src。I compiled all the dependency libraries successfully，but at the end of the link an error occurred. I found that `FC_SYMBOL ""The type of Fortran name mangling"" 2`，I changed the value to 1 and get the same error. It looks like a problem with the calling interface of fortran, but i have no idea to solve it. Can you give me some ideas to solve this problem, thanks. ```; Error log:; [1262/1263] Linking CXX static library src\psi4\scfgrad\scfgrad.lib; [1263/1263] Linking CXX shared library src\core.cp37-win_amd64.pyd; FAILED: src/core.cp37-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -E vs_link_dll --intdir=src\CMakeFiles\core.dir --rc=""D:\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe"" --mt=""D:\Windows Kits\10\bin\10.0.17763.0\x64\mt.exe"" --manifests -- C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:259,depend,dependency,259,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:846,protocol,protocol,846,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430,1,['protocol'],['protocol']
Integrability,"Hello,; I installed Psi4 and chemps2 from Miniconda. How can I interface Chemps2 with Psi4? Thanks in advance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222644633:63,interface,interface,63,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222644633,1,['interface'],['interface']
Integrability,"Hi @JonathonMisiewicz ; Thank you for your response. > Let us know if there are addons that you need but don't know how to get. (Examples: dftd4 for DFT dispersion corrections, cct3 for some exotic coupled cluster variants, cppe for polarizable embedding.). I am using psi4 through geomeTRIC to minimize the structures of small molecules.; The other dependencies which I had mentioned earlier was to generate the input file (.in file) for the minimization; `geometric-optimize --psi4 <input.in>`. I am able to do this as long as I provide the `input.in` file, i.e. psi4 is working just fine for me. So thanks a lot @loriab and @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714:350,depend,dependencies,350,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714,1,['depend'],['dependencies']
Integrability,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:222,message,messages,222,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,1,['message'],['messages']
Integrability,"Hi @j3mdamas,. Yes, the defaults version 4.8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:823,depend,dependency,823,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['depend'],['dependency']
Integrability,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:106,interface,interface,106,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635,1,['interface'],['interface']
Integrability,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347174011:195,depend,depend,195,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011,2,['depend'],"['depend', 'dependencies']"
Integrability,"Hi Daniele. This combination is not supported. I think this functionality request is perhaps better aimed at the QCSchema developers (https://github.com/MolSSI/QCSchema/issues). One main issue is the ambiguity of what an extrapolation (or a composite recipe) actually means. Running CBS jobs via QCSchema is not implemented in Psi4, and my personal opinion is that it likely won't be implemented in Psi4 itself anytime soon. What may happen is that someone will take the CBS functionality out of Psi4, adapt it to create ""schema"" jobs for each calculation required in a similar way we do internally in the CBS wrapper, and then combine the individual atomic results to arrive at the composite result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792:610,wrap,wrapper,610,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792,1,['wrap'],['wrapper']
Integrability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:430,depend,depend,430,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,1,['depend'],['depend']
Integrability,"Hi Lori, . Thank you for your arrangements. I was in a trip and just returned. Now, I would like to catch up with psi4, otherwise it will a problem for me to proceed because of significant differences in my dfocc and the one in the psi4. . Now, how I can reach that repo? Because I need to slightly modify my tensor class. Further, I will add a new UHF-DF-CCSD code soon. Hence, before it I would like to synchronize my code with the public repo. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-444795651:405,synchroniz,synchronize,405,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-444795651,1,['synchroniz'],['synchronize']
Integrability,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:532,Contract,Contract,532,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,2,"['Contract', 'rout']","['Contract', 'routines']"
Integrability,"Hi Peter - typically it is the house's job to determine if a bug has been; resolved or not - did you all (1) find evidence of my reported bug and (2); find evidence that it was fixed? I did not report that one lightly. Also; quite worried - I am seeing indications you all are switching basis; function ordering from one perfectly well-defined lexical convention which; is well documented to yet another perfectly well-defined lexical; convention. Both equally valid except that the first has been baked into a; half-million line code over more than a decade. If the switch of basis; functions is made at a similar time, this will provide additional barriers; for our staff to verify your proposed fix. On Thu, May 19, 2022 at 10:32 PM Peter Kraus ***@***.***>; wrote:. > @robparrishqc <https://github.com/robparrishqc> libecpint is now used by; > default in Psi4 1.6 - could you check whether the issue is still present?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2564#issuecomment-1132490820>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKO3LYYQB4CGKQI4W2P73IDVK4PVRANCNFSM5UT7U6LA>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133500319:1228,Message,Message,1228,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133500319,1,['Message'],['Message']
Integrability,"Hi Ryan,. Capturing cout in a string or stringstream and feeding it to psi::PsiOutStream is OK if the message to be printed is limited in time and volume. If by calling a single function of a library, it executes for a long time and prints a lot of lines over its execution time, it might be good to have a way to intermediary feed them to the psi::PsiOutStream. Else you have to wait till the end of execution to get any information at all. If something goes wrong, you then also don't get an indication where things might have gone wrong. So is there a possibility to redirect cout's stream directly to psi::outfile, with a continuous output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83085867:102,message,message,102,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83085867,1,['message'],['message']
Integrability,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:245,rout,routing,245,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,3,"['interface', 'rout']","['interface', 'routing']"
Integrability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:631,depend,dependent,631,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,1,['depend'],['dependent']
Integrability,"Hi all! Just a heads-up. Something I would like to add to this PR before it gets merged completely, is a framework for generating GauXC HDF5 reference files via the Psi4/GauXC interface. I have a lot of the framework for this lying around separately, and I am working on porting it over to Psi4 proper, hooked up to the Pytest setup that Psi4 has.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2045233243:176,interface,interface,176,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2045233243,1,['interface'],['interface']
Integrability,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:278,contract,contraction,278,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024,1,['contract'],['contraction']
Integrability,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1378,integrat,integrated,1378,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['integrat'],['integrated']
Integrability,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/105#issuecomment-144729559:301,message,message,301,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559,1,['message'],['message']
Integrability,"Hi, Ugur.; I've found that something had changed in molden file generation mechanism since https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; ""Normalized contraction coefficients"" in [GTO] section are differ. Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152795096:188,contract,contraction,188,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152795096,1,['contract'],['contraction']
Integrability,"Hi, sorry in advance for commenting knowing next to nothing. Looking at this commit: https://github.com/raimis/gau2grid/commit/0a6678572b9c9589320c3df0f277e88e6a572252 . I assume it's generating code which will be compiled at runtime with MSVC, which will become a dependency. Is it correct?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390243811:265,depend,dependency,265,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390243811,1,['depend'],['dependency']
Integrability,"Hi. We run jupyter in a container. writing: import psi4; in a cell and then run it gives the error message (repeated at the ; bottom of mail). operating system:; NAME=""Ubuntu""; VERSION=""18.04.5 LTS (Bionic Beaver)"". psi4 version: 1.4+9485035. and. Python version = 3.9.6 | packaged by conda-forge | (default, Jul 11 ; 2021, 03:39:48); [GCC 9.3.0]; IPython version = 7.26.0. best regards; Sissel. ---------------------------------------------------------------------------; ImportError Traceback (most recent call ; last); /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 54 try:; ---> 55 from . import core; 56 except ImportError as err:. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call ; last); /tmp/ipykernel_64/253247311.py in <module>; ----> 1 import psi4. /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/__init__.py in ; <module>; 58 raise ImportError(""{0}\nLikely cause: GCC >= 4.9 not in ; [DY]LD_LIBRARY_PATH"".format(err)); 59 else:; ---> 60 raise ImportError(""{0}"".format(err)); 61; 62 from psi4.core import set_output_file, get_num_threads, ; set_num_threads. ImportError: ; /srv/conda/envs/notebook/lib/python3.9/site-packages/psi4/core.cpython-39-x86_64-linux-gnu.so: ; undefined symbol: __svml_exp4_mask_e9. On 2021-09-16 13:08, Jonathon Misiewicz wrote:; > A traceback is never adequate information for a bug report.; > ; > We need a Psi4 version number, exact steps to reproduce the error, and; > need to know what operating system you're using.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub [1], or unsubscribe; > [2].; > Triage notifications on the go with GitHub Mobile for iOS [3] or; > Android [4].; > ; > Links:; > ------; > [1] https://github.com/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607:99,message,message,99,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921085607,1,['message'],['message']
Integrability,"Hmm I definitely did, but don't anymore. Likely some of the cleaning that's been done lately removed dependency on a library that also defined a `str` class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/268#issuecomment-186931933:101,depend,dependency,101,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-186931933,1,['depend'],['dependency']
Integrability,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/274#issuecomment-187694715:845,rout,routine,845,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715,1,['rout'],['routine']
Integrability,"Hmm, I do think we rely on `export OMP_NESTED=""FALSE` in some places depending on the scheme involved. Would there be a good place to add this to the docs?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/671#issuecomment-305371763:69,depend,depending,69,https://psicode.org,https://github.com/psi4/psi4/issues/671#issuecomment-305371763,1,['depend'],['depending']
Integrability,"Hmm, I wonder if some other dependency was detected in /usr such that it got baked into rpath at a high position. Depending on rpath/runpath, LD_LIBRARY_PATH may or may not trump it. Otherwise, I quite agree that you are typing sensibly and the computer is behaving not. `source activate` only works with bash– could that be the problem with that command? If you're on psi4/psi4 (CMR-KTB) and anything besides `psimrcc-fd-freq2` fails, yes, post it here. If you're on dgasmith/psi4 inversion (CMR-KTB-INV), then we're only up to 92% passing anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252823348:28,depend,dependency,28,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252823348,2,"['Depend', 'depend']","['Depending', 'dependency']"
Integrability,"Hmm, I've contracted that the wfn returned from Hessian shall always contain current E, G, H, and I don't want to break that. What do ppl think of freq/hessian fns optionally taking in kwarg `ref_wfn` and if a gradient's found on it (user responsibility that it should be sensible one), then G0 won't be recomputed. And that same G0 will be used to assess eq/non-eq status.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-380230319:10,contract,contracted,10,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380230319,1,['contract'],['contracted']
Integrability,"Hmm, that is odd. The `bsse_type` uses the `Molecule.extract_subsets` interface and gets around this a bit. @shannonhouck Do you think you could explore this a bit?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843#issuecomment-347015589:70,interface,interface,70,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-347015589,1,['interface'],['interface']
Integrability,"Hmm, the combo `maxiter=0, fail_on_maxiter=false` is averting the naive (or greedy) user who wants the convergence stamp _and_ ""minimal"" iterations, as opposed to someone who knows what he's doing and using maxiter as a declarative interface. If others like the exception for maxiter=0, I'll go along with it, but my inclination is for consistency with all other maxiter != 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-784475485:232,interface,interface,232,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-784475485,1,['interface'],['interface']
Integrability,"Hmm, there seems to be an issue with temporary files being left behind in the `energy` and `gradient` calls if they're not routed through the `cbs_gufunc` routines. If I call `clean()` in between the failing tests [like so for `cbs-xtpl-energy`](https://github.com/psi4/psi4/files/1886155/cbs-xtpl-energy-mod.txt), the test passes fine. `_cbs_gufunc()` calls `clean()` for single calls here:; https://github.com/psi4/psi4/blob/c1bb2fef750fc7a214fd873f8a7c095780017bf9/psi4/driver/driver_cbs.py#L1571-L1580",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379446318:123,rout,routed,123,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379446318,2,['rout'],"['routed', 'routines']"
Integrability,"Hmmm. Just looked at my implementation and saw this gem; ```; if(H->nirrep() > 1 || H->rowdim() != H->coldim() || H->rowdim() != 3*molecule->natom()); throw PSIEXCEPTION(""Molecule::symmetrize_hessian: Matrix cannot be symmetrized."");; ```; The routine is just to clean up an already symmetric Hessian, not to apply symmetry (years since I wrote it, so I'm having to trawl through code to put things back in RAM). It should be easy to use the CDSalc class to apply symmetry to the Hessian. I remember chatting with @loriab about that, btu can't find the code snippet. Will ping back when I find it. There's no reason I can think of for the cleanup code being restricted to C1 symmetry; it should only need small tweaks to work for all point groups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-314470850:244,rout,routine,244,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314470850,1,['rout'],['routine']
Integrability,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:372,integrat,integration,372,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,2,['integrat'],['integration']
Integrability,"Hooray, that looks great. Skipped or xfailed is no problem (just how we handle testing optional dependencies). Outright failed is a problem, but I don't see any of those. I think you're good to go. I wish I understood clearly what was causing your psi4conda problem, but that's awkward to debug. I suspect interference in python path btwn active python (in anaconda) and active psi4 (in psi4conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933:96,depend,dependencies,96,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933,1,['depend'],['dependencies']
Integrability,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343778590:165,wrap,wrappings,165,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590,1,['wrap'],['wrappings']
Integrability,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:31,depend,dependency,31,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,2,['depend'],"['dependencies', 'dependency']"
Integrability,"How far back can you run the ROHF MP2 code with DETCI? It might be good to double check that I have not broken anything in the past 6 months+. Cheers,; Daniel Smith. > On Mar 12, 2016, at 3:08 PM, Lori A. Burns notifications@github.com wrote:; > ; > @CDSherrill https://github.com/CDSherrill, here's the rohf mp2 results from a few programs. Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-195804600:543,rout,route,543,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600,1,['rout'],['route']
Integrability,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:42,message,message,42,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255,1,['message'],['message']
Integrability,"Hrm, I was under the impression that none of the dmrg tests are being exercised by `quicktests`, so I run the dmrg tests in addition. Granted, this does not strictly have anything to do with `quicktests` I guess, but I think the dmrg tests should either interface with `quicktests` or at least be of the same order of magnitude.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249299134:254,interface,interface,254,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249299134,1,['interface'],['interface']
Integrability,"Huh, haven't tried `psi4 -t` in ages. Well, I've added ncurses to the runtime dependency list for the conda package. Should appear in tomorrow's build. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/289#issuecomment-189698585:78,depend,dependency,78,https://psicode.org,https://github.com/psi4/psi4/issues/289#issuecomment-189698585,1,['depend'],['dependency']
Integrability,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201394449:246,message,message,246,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449,1,['message'],['message']
Integrability,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265466569:385,message,message,385,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569,1,['message'],['message']
Integrability,"I agree that we don't want properties computations done internally --- we; want them done in a unified way through OEProp. However, we do (I guess?); want the user syntax properties = [ ... ] or whatever Daniel C. cooked up.; My understanding is that the CC properties user input syntax only works for; CC modules, which is not good. Here's an example from cc52:. property('ccsd',properties=['roa_tensor']). The reason Daniel developed this is because different modules need to be; run depending on the requested property. This is not usually the case for; non-CC codes, but it is confusing to users to have this mechanism available; for CC properties but not for other properties. I am fine with moving this over to some other more unified github issue, so; long as it is tracked somewhere. On Fri, Feb 26, 2016 at 11:01 AM, Daniel Smith notifications@github.com; wrote:. > Effectively we have quite a few tickets relating to properties and OEProp.; > I would very much like to consolidate most of these tickets into one so we; > can figure out what actually needs to be done. In many ways we probably; > should not propagate the current way the cc codes are handling the; > properties internally (the syntax is great), especially with regard to; > properties through OEProp.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/40#issuecomment-189340270.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-189349922:486,depend,depending,486,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-189349922,1,['depend'],['depending']
Integrability,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:927,depend,depend,927,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868,1,['depend'],['depend']
Integrability,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182877975:655,rout,routine,655,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975,1,['rout'],['routine']
Integrability,"I agree, but not going to debug this bizarre case in the C++ code. And if; you're going to catch the absurd geometry, then psi4 should never compute; the gradient. On Fri, Jul 8, 2022 at 12:24 PM Jonathon Misiewicz ***@***.***>; wrote:. > Given the reporter, the geometry they input is probably garbage.; >; > While I agree attempts to optimize from this are in vain, there should be; > a proper error message instead of just crashing with an obscure C error; > code.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TAGYFNA3TVUXXSR7DLVTBP4VANCNFSM53A6YHNQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978:402,message,message,402,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978,2,"['Message', 'message']","['Message', 'message']"
Integrability,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182861777:438,rout,routinely,438,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777,1,['rout'],['routinely']
Integrability,"I am not 100% convinced the dispersion handling - the way it's currently implemented - is very good. I'd propose the following:. - move all method and functional specific parameters from elsewhere into `qcdb/dashparam.py`. This includes citation handling that's currently done in `procrouting/empirical_dispersion.py`. - the rest of psi4 python-side should be ""parameter-agnostic"", ie there are obvious differences whether the dispersion _type_ is das2009, d2, or d3 (or later vv10) - this should get figured out (as it currently is) in `procrouting/empirical_dispersion.py` accordingly. . - the parameters and citations should be passed into the `EmpiricalDispersion` class from outside, whether it's the functional's dictionary or user overrides or dashparams database. It might be helpful to settle on _one_ interface as opposed to the currently-used two (tuple_params tuple or dashparams dict in kwargs). In fact, EmpiricalDispersion class shouldn't be doing any parameter lookup on its own. The `dashparam.dashcoeff` dict is already trawled through in `procrouding/dft_funcs/dict_builder`, where we modify the method's name and aliases, the dispersion `dashparam` dict can (should?) be appended too. However, I have a feeling that this is a little bit of a scope creep. I'm quite happy with the functional part as it is now and wouldn't mind having this merged as is (if the tests pass), and leave the empirical / non-local dispersion re-work for eg. the VV10 implementation...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-375392872:811,interface,interface,811,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-375392872,1,['interface'],['interface']
Integrability,"I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments. * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291:921,message,messages,921,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933477291,1,['message'],['messages']
Integrability,I am not really sure about all the LIBINT commands as I try to avoid dealing with the integral routines. I typically just pass a --max-am-eri=7 to my setup script so I can compile with higher angular momentum.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139112245:95,rout,routines,95,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139112245,1,['rout'],['routines']
Integrability,"I am open to finding a way to force the user into using only the appropriate combinations of `basis`/`basis_relativistic` if that sounds like a more sensible choice. In principle it would be enough to eliminate the `basis_relativistic` option and always set `basis_relativistic` to a decontracted version of `basis`. However, this could be problematic when the decontracted basis has linear dependencies (I am working on this issue but I am currently slightly stuck/too busy).; The reason we have so many options was just for testing reasons, and to allow cases where `basis_relativistic` is a basis different from `basis` (e.g. to remove linear dependencies directly in the deconstructed basis). The HF example above should do. Once you address the Python issue I can run some checks. Beside external tests, there is at least one way to tell if things are internally consistent in psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288920918:391,depend,dependencies,391,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288920918,2,['depend'],['dependencies']
Integrability,"I apologize, maybe I'm fiddling with something different that leads to the same error message. Perhaps it's better to keep the 100% reproducible case. My point was that it was still happening, even with psi 1.2 non-dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442904288:86,message,message,86,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442904288,1,['message'],['message']
Integrability,"I believe I know exactly what you have experienced, please correct me if I am wrong. . It is easy to come to the conclusion that buf4_init is like a constructor. Leading to the conclusion that when you pass a `dpdbuf4` to the `buf4_init` function you get a brand new instance of a class with data initialized to zero. However these are not objects in a proper OOP sense, and for that reason the when/why of data moving into `buffer->matrix` can be confusing. The comments here should have some warning that the data that *will be* pointed to by`buffer->matrix`, will only be ""blank"" if the tensor that this (`filenumber`, `label`) combination refers to does not exist. Exist here has a very broad scope since you may be referring to an entry in a file which was written by some other module, and often it is up to the programmer to know ""This quantity was written by module A, and it is safe for me to assume that it will be on disk when the code I am writing in module B will run because I made sure that module A runs before module B in the driver"". If you expect/want a tensor to be zero-ed out you should always do that explicitly when manipulating the data. This detail is easy to overlook since common operations using the `contractXXX` methods may be doing that without you realizing it. For example by setting the pre-factor on the target to zero. . There are plans in the works for a fairly major overhaul of libDPD to address various problems, one being that the interface is very cumbersome. Hopefully those efforts will make it much easier to get comfortable writing code that uses DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267204006:1230,contract,contractXXX,1230,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267204006,2,"['contract', 'interface']","['contractXXX', 'interface']"
Integrability,"I bet this is because of the calls to `exit()` in libpsio, combined with the lack of flushing of the error messages to the output. I have replaced the calls to `exit()` in #3118, which should solve this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205:107,message,messages,107,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205,1,['message'],['messages']
Integrability,"I can answer more fully later, but check where the `GENBAS` file lives in your CFOUR installation. It looks like it's looking for it at `/xstorage/tobias/bin/cfour/basis/GENBAS`. (This could be the trouble in the Psi4/Cfour route, too.) I don't remember the exact fallback procedure for GENBAS, but if it's missing from that spot, you could copy it to there or copy the one from the psi4 install (approx <install>/share/psi4/basis/GENBAS).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774:224,rout,route,224,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774,1,['rout'],['route']
Integrability,I can reproduce this and get an error message about frozen virtual DF-CCSD gradients not being implemented in `dfocc`. That is not consistent with a pb11 problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245:38,message,message,38,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-635993245,1,['message'],['message']
Integrability,"I can reproduce this on my Mac, but the problem there is obviously that my Jupyter notebook isn't using the conda environment which has Psi's dependencies. I recommend you look into the interaction between Jupyter and conda environments. I doubt this is a bug in Psi4. I won't be able to delve further into this for a few more days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-921318629:142,depend,dependencies,142,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-921318629,1,['depend'],['dependencies']
Integrability,"I can see an argument for both fast and rigorous CI solutions, and don't really have a strong opinion on how we should proceed. The minimal test may become important as we start getting more PRs; it's nice to be able to see if they're valid in a short window. That route is fine for me, as long as we plug the gaps with another test solution. Right now we only deal with a handful of PRs a day at most, so having to wait a few hours isn't too bad, which means your more extensive testing idea is valid. As I said, I don't really have a strong opinion; I was just making some suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182898239:265,rout,route,265,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182898239,1,['rout'],['route']
Integrability,"I can see how the Molden format is perhaps a good fit for this, as it; presents not only the desired quantity (AO basis density matrix) but also; the associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomme",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:224,contract,contractions,224,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,1,['contract'],['contractions']
Integrability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:570,depend,dependency,570,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,2,['depend'],"['dependencies', 'dependency']"
Integrability,"I compiled this PR with clang, ran `gibbs`, and still got the exact same error as Travis reports. ```; Structure for next step:; Cartesian Geometry (in Angstrom); C 0.0000000000 0.0000000000 0.0000000000; H 0.0000000000 0.8836649185 -0.6248454599; H 0.8836649185 0.0000000000 0.6248454599; H -0.8836649185 0.0000000000 0.6248454599; H 0.0000000000 -0.8836649185 -0.6248454599; ; Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; ```. This problem is not specific to gcc compilers, and it looks to be a bug in finding the highest point group. I'm puzzled how the original test didn't run into this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307:621,depend,dependent,621,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307,1,['depend'],['dependent']
Integrability,"I completely agree with @bgpeyton and @amjames that there are probably misuses of Z & mass in the code resulting from unclear or inconsistent definitions (I think there's even cases where the `Mol.property()` fn differs in behavior from the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:701,depend,depend,701,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['depend'],['depend']
Integrability,"I currently plan to combine the three geometry generators into one because their logic is so similar. Could you be more specific about the interface changes and desired new features _after_ the C++ code is moved over? If combining the geometry generators is obviously going to break something down the road, best to find out now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-360926158:139,interface,interface,139,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-360926158,1,['interface'],['interface']
Integrability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:93,message,messages,93,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,1,['message'],['messages']
Integrability,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:532,message,message,532,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,4,"['INTERFACE', 'message']","['INTERFACE', 'message']"
Integrability,"I do like HDF5, but it would add an extra dependency to Psi4 for something relatively simple. We use NumPy to write arrays [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L445), it should be noted the resulting data is in binary form and readable by anyone. Our Wavefunctions are written as `npz` objects for the SCF `GUESS READ` machinery [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L1340) using the above machinery. A JSON write would be equivalent and probably much more general. The above snippet is specific to Psi4's SCF Wavefunction, but I have been wanting to generalize this function for some time so that a user could read/write a general Wavefunction on command. We would be happy to work on the underlying data structures to make them more general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562#issuecomment-271298945:42,depend,dependency,42,https://psicode.org,https://github.com/psi4/psi4/issues/562#issuecomment-271298945,1,['depend'],['dependency']
Integrability,"I do like the ability to do slices (and it's the correct name IMO). Perhaps if View is not used much we can just cut it out and promote the Slice class which is probably ultimately more extensible. . Sorry to grab you for more changes, but you keep bringing up good ones :). -Daniel Smith; Sent from my iPhone. . > On May 31, 2017, at 22:55, fevangelista <notifications@github.com> wrote:; > ; > @fevangelista commented on this pull request.; > ; > In psi4/src/psi4/libmints/matrix.cc:; > ; > > + double value = block->get(h,p,q);; > + set(h,p + rows_start[h],q + cols_start[h],value);; > + }; > + }; > + }; > +}; > +; > +/**; > + * Set a matrix block; > + *; > + * @param rows Rows slice; > + * @param cols Columns slice; > + * @return SharedMatrix object; > + */; > +void set_block(Slice rows,Slice cols,SharedMatrix block);; > +; > For what I can see View was not integrated extensively and it is used only in exactly three lines of psi4. View is really a shared pointer plus a set of start/end Dimension objects. It uses pointers to store what are dimension-like objects and should be modernized. Slice here is just a set of start/end Dimension objects. Indeed I think it might be a good idea to write View using Slice (perhaps my choice of class name is not idea, we could also call it DimensionRange, Range, etc.). So I think this is not a case of repetition.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-305376168:867,integrat,integrated,867,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305376168,1,['integrat'],['integrated']
Integrability,"I don't comment here all that often anymore, which is bittersweet (and I very much miss both my colleagues on PSI4 and the Vortex). We have gone through my old notes on CCA (sketch at best, we know), and many nested references therein. For Cartesian AOs, CCA matters - this lets you use a single normalization coefficient for everything, and tolerate non-normalized off-diagonal cartesian tensor components (i.e, xx is normalized in D, xy is not normalized in D, xxx is normalized in F, xxy or xyz is not normalized in F) - Jet taught me this and it is one of the coolest tricks in the book. For spherical AOs, as far as we can tell, there is *no* CCA convention except that everything be normalized (as literally all codes do). The one ""CCA"" paper we can find on this topic itself glancingly cites an older Schlegel / Frisch paper (I think before the big happening), which itself is outdated by about > two dozen articles on solid harmonics. Everyone who codes integrals deals with basis ordering - what you shudder about is weird normalization factors (particularly non-diagonal ones), not rigid permutations. . The message is this: I am not convinced there is a standard. So maybe not optimal to follow to follow an implied one. Show me a reference of a real, used standard, and Lightspeed and Tachyon will be there tomorrow. . [report (7).pdf](https://github.com/psi4/psi4/files/8746880/report.7.pdf); [jcc.20815.pdf](https://github.com/psi4/psi4/files/8746882/jcc.20815.pdf); [sh.pdf](https://github.com/psi4/psi4/files/8746881/sh.pdf)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662:1118,message,message,1118,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1133519662,1,['message'],['message']
Integrability,"I don't have a chance to compile with icpc 18 right now, but we do have it; at NIH. One way to narrow this problem down is to wrap half of the; matrix.h functions in preprocessor pragmas to kill optimization (; https://software.intel.com/en-us/node/524550), leaving the rest compiled as; normal with -O2 or higher. By eliminating half of the functions'; optimization each time, it should be quite easy to figure out which; function is causing problems by bisection. On Mon, Feb 26, 2018 at 4:11 PM, Justin Turney <notifications@github.com>; wrote:. > I'm hitting a similar error message with dcft_gradient_UHF.cc but it; > reports that the error is in libmints/matrix.h. Reducing the optimization; > level was the only way I could get it to compile. Even compiling with -O2; > gives the error, -O1 is the only way to resolve it.; >; > I see no issue with the compiler- and file-specific flags for this.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/923#issuecomment-368651645>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAMUmdYwvJwuQd4BJz52tlrgzOg8dBWUks5tYx3YgaJpZM4SPiMy>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368659317:126,wrap,wrap,126,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368659317,2,"['message', 'wrap']","['message', 'wrap']"
Integrability,"I don't have an opinion about the include_pure_transform_ flag, depends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = cor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:64,depend,depends,64,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['depend'],['depends']
Integrability,"I don't know if it's relevant or not, but that error message was produced with the `psi4/linux-64::psi4-1.3.2+ecbda83-py37h31b3128_0` build from the `psi4` conda channel.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-759704666,1,['message'],['message']
Integrability,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:23,message,message,23,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547,4,['message'],['message']
Integrability,"I don't mind, but it's an additional external dependency I have to package in order to ship the manual along with the Debian packages. And those packages need to get manually approved, so it takes a while. I think I'll just drop the manual for now, upload 1.1 to Debian and then see about the psi theme in order to reactivate the manual. I do think it's a useful local resource to have, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/892#issuecomment-356291068:46,depend,dependency,46,https://psicode.org,https://github.com/psi4/psi4/issues/892#issuecomment-356291068,1,['depend'],['dependency']
Integrability,"I don't recall the actual recc. values, but that paper does discuss two sets of integration grid. probably (99, 590) for the main functional grid and ~SG1~(50, 146) for the VV10 grid.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827#issuecomment-339688990:80,integrat,integration,80,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339688990,1,['integrat'],['integration']
Integrability,I don't think there's a need to deprecate those. Users might depend on it and it's less typing if they stay in `Wavefunction`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970#issuecomment-664390954:61,depend,depend,61,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664390954,1,['depend'],['depend']
Integrability,I don't wholly trust the libint/libmints error messages to trigger when requested angmom too high. you've ruled out the libint compilation?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304:47,message,messages,47,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681079304,1,['message'],['messages']
Integrability,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:323,interface,interface,323,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,1,['interface'],['interface']
Integrability,"I found this partly non-quantum mechanical look at this issue helpful:; http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3079527/; At least in our context, in which users are selecting certain isotopies intentionally, and corresponding vibrational frequencies are being recomputed (mass-dependent), and the molecules are typically small and relatively rigid, the symmetry number should be included and lowered by isotopic substitutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345#issuecomment-210846873:282,depend,dependent,282,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210846873,1,['depend'],['dependent']
Integrability,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53050174:132,contract,contraction,132,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174,3,['contract'],['contraction']
Integrability,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:64,depend,dependencies,64,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,1,['depend'],['dependencies']
Integrability,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:814,contract,contraction,814,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849,3,"['contract', 'interface']","['contract', 'contraction', 'interface']"
Integrability,I have a computer at work with openSUSE 13.2 (Newer version compared to your 12.3) I have recently compiled psi4 on it without this error. Maybe it's an issue with that version of ld? Your error message seems to indicate that ld knows this behavior is a bug. My version of ld is newer than yours also:; $ ld --version; GNU ld (GNU Binutils; openSUSE 13.2) 2.24.0.20140403-6.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/785#issuecomment-323494378:195,message,message,195,https://psicode.org,https://github.com/psi4/psi4/issues/785#issuecomment-323494378,1,['message'],['message']
Integrability,"I have adjusted the case accordingly and I'm still encountering an error message: . ```; import psi4; import numpy as np. # Set Psi4 options for the calculation; psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [5, 0, 1, 1], # Doubly occupied orbitals; 'socc': [0, 0, 1, 0], # Singly occupied orbitals; 'restricted_docc': [5, 0, 0, 0], # Core orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:73,message,message,73,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['message'],['message']
Integrability,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:751,depend,dependencies,751,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['depend'],['dependencies']
Integrability,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:786,message,message,786,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331,1,['message'],['message']
Integrability,"I have made almost all PRs for easy/trivial code changes, which is ~80% of overall. For further progress, the easiest way is to use *Boost* library for:; - User/system time in `fnocc`, `libciomr`, and `libqt`; - File operations in `libfilesystem`; - Stacktrace printing in `libpsi4utils`. Actually, I'm a bit surprised that *Psi4* is not yet depended on *Boost*. What is *Psi4* policy on the new dependencies?. So there are two options:; 1. Use *Boost* for these cross-platform functionalities.; 2. Make a conditional compilation, so *Boost* dependency is only *Windows*. This will increase code complexity, but will avoid the new dependency on *Linux*.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403818314:342,depend,depended,342,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403818314,4,['depend'],"['depended', 'dependencies', 'dependency']"
Integrability,"I have noticed some other general gradient weirdness that might or might; not be related. I'll try to post that as another issue as soon as I get a; chance. On Wed, Apr 18, 2018, 12:32 PM Susi Lehtola <notifications@github.com>; wrote:. > SCAN is crazy grid dependent. You might need up to 500 radial points to; > get single points with microhartree accuracy.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/962#issuecomment-382448968>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdrK7ZaUCI_vgWtatmOzGCwmpY990ks5tp2qvgaJpZM4TTqrC>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382458405:258,depend,dependent,258,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382458405,1,['depend'],['dependent']
Integrability,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-213409294:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294,2,"['integrat', 'interface']","['integrated', 'interface']"
Integrability,"I have reworked this PR to a general renovation of `toclen.cc`. All errors are now handled by calling `psio_error()`, OS-provided messages are decoded by a new fn that may be useful elsewhere later and the toclen fns now first check if the stream is ought to be open and error out early with a more specific error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587:130,message,messages,130,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1250060587,2,['message'],"['message', 'messages']"
Integrability,"I have seen something about mkl and Windows and 2018/2019 compatibility recently but of course can't find it now. I don't recall it as alarming, so if this PR has worked in practice, LGTM. Has @raimis definitely lifted the ""Don't merge"" directive (too many slack messages flying around)? Avoiding checkmark until confirmed so we're not merge-happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973:263,message,messages,263,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973,1,['message'],['messages']
Integrability,I have updated my psi4 program and still got the message BasisSetNotFound; How can I download and install new basis set list,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917#issuecomment-364853728:49,message,message,49,https://psicode.org,https://github.com/psi4/psi4/issues/917#issuecomment-364853728,1,['message'],['message']
Integrability,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:66,message,message,66,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238,1,['message'],['message']
Integrability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['message'],['message']
Integrability,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286563411:389,rout,routes,389,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411,1,['rout'],['routes']
Integrability,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:99,message,message,99,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204,1,['message'],['message']
Integrability,"I just ran the input, and it produces (admittedly unhelpful) error message `Fatal Error: UHF Density fitting NYI`. The CC3 code is not set up to use density fitting yet, unfortunately. If you remove the `cc_type` keyword, it runs correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240188822:67,message,message,67,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240188822,1,['message'],['message']
Integrability,"I just removed opt10 from all ctest labels. Its still present, but will not run unless you specifically request it. It looks like the reference opt10 ran in about 45 minutes on 8 threads. @psi-rking If you are just testing angular dependancies can you reduce this to something like 6-31G?. Edit: Whoops, misread timing data. > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com wrote:; > ; > Yeah, we should have that mechanism to leave it as a longertest. Maybe that's what @dgasmith https://github.com/dgasmith has already done.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184228286.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184233000:231,depend,dependancies,231,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184233000,1,['depend'],['dependancies']
Integrability,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/100#issuecomment-105456704:82,depend,dependencies,82,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704,1,['depend'],['dependencies']
Integrability,"I keep hearing about this ""problem"" also elsewhere, but the fact is that the regular grid for cube files is ill fitted for integrating the density of steep regions (e.g. at the nuclei). ; python-based integrator for testing: https://gist.github.com/hokru/71c61f5afb2e5921b5b4955fed70f5db. cubes were made for visualization not for further analysis, iirc. Does chargemol only work with cube files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513:123,integrat,integrating,123,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513,2,['integrat'],"['integrating', 'integrator']"
Integrability,"I keep seeing ""continuous-integration/travis-ci — Waiting for status to be reported"", and it doesn't appear to have run your merge of Lori's commits. Is anybody else seeing the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183784922:26,integrat,integration,26,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183784922,1,['integrat'],['integration']
Integrability,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236132448:500,rout,routes,500,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448,1,['rout'],['routes']
Integrability,"I may have been unclear. It already works with multiple "":"" characters. Not sure if there is already such an error message somewhere. Format always seems: `<exception name>: <exception message>`, so the splitting the string at the first "":"" in 2 parts and then taking the second (=last) part should work well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933:115,message,message,115,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611520933,2,['message'],['message']
Integrability,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:570,depend,dependency,570,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,1,['depend'],['dependency']
Integrability,"I modified the error message from being about ""core electrons"" to just ""electrons."" Aside from that, @susilehtola's comments addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600:21,message,message,21,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600,1,['message'],['message']
Integrability,I presume this actually fixes props2 (in which case should also add back to tests/CM). My concern is the change that people won't automatically get their multipoles at the origin w/o explicitly asking and that behaviour is different btwen Cart/ZMat (psi4/psi4#782). Anyone else concerned?. The scf-coverage problems we've been seeing have been compilation dependent after DF_Helper merge. Do you consider the changes to this test a fix to slightly flawed test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808#issuecomment-332288034:356,depend,dependent,356,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332288034,1,['depend'],['dependent']
Integrability,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:286,rout,route,286,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,1,['rout'],['route']
Integrability,"I pulled up issue 782 to remind my self what is going on, but the comments; there are somewhat terse and they don't do enough to jog my memory even; though I had a conversation with Lori about it. I'm not sure the wider; community will be able to comment much on this point without doing a little; homework to figure out what is being asked about. Could we have a bit more; commentary describing the issue?. On Tue, Sep 26, 2017 at 2:16 PM, Lori A. Burns <notifications@github.com>; wrote:. > I presume this actually fixes props2 (in which case should also add back; > to tests/CM). My concern is the change that people won't automatically get; > their multipoles at the origin w/o explicitly asking and that behaviour is; > different btwen Cart/ZMat (psi4/psi4#782; > <https://github.com/psi4/psi4/issues/782>). Anyone else concerned?; >; > The scf-coverage problems we've been seeing have been compilation; > dependent after DF_Helper merge. Do you consider the changes to this test a; > fix to slightly flawed test?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/808#issuecomment-332288034>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qds6BK6y5mzxnLMsYRrJP9RA8FGQ6ks5smT9mgaJpZM4PkgZ8>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808#issuecomment-332291477:911,depend,dependent,911,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332291477,1,['depend'],['dependent']
Integrability,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:46,rout,routine,46,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,1,['rout'],['routine']
Integrability,I ran clang-format over some of the files and also looked manually for odd empty lines. There is the remaining question if the unused (as far as I see) `lsda/meta_cutoff` routines should stay or be remove?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-624507775:171,rout,routines,171,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-624507775,1,['rout'],['routines']
Integrability,"I recall that the restriction arises from an assumption I made about storage requirements. I think I was assuming that o^4 and o^3v arrays could be stored in a block of memory the size of t2, but I can’t be sure without looking through the code a bit. I’m not sure how difficult it would be to remove this restriction, but I will look into it. > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com> wrote:; > ; > Well, yes, he relative sizes would effect efficiency of contraction order,; > but I don't see why they would make the code not working at all... I; > suppose this restriction is in there somewhere but I don't see why.; > ; > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:; > ; > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; > assumption that's made in the contraction order? If nvirt < ndocc then it; > might be more efficient to contract first over the occupied orbitals?; > ; > —; > You are receiving this because you were mentioned.; > ; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > .; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339458114:487,contract,contraction,487,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339458114,3,['contract'],"['contract', 'contraction']"
Integrability,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277503822:365,synchroniz,synchronization,365,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822,1,['synchroniz'],['synchronization']
Integrability,"I second that. The original FCHK writer was specifically for GDMA, and I reverse engineered it from an example that I found in the GDMA repo. It's great that people who actually know what FCHK should look like have been able to patch it up, and it seems like it was only a very minor fix to our GDMA wrapper to get back up and running. Maybe we're close to converging on a proper FCHK!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537:300,wrap,wrapper,300,https://psicode.org,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537,1,['wrap'],['wrapper']
Integrability,"I see that this goes a lot further than I was expecting it to; some day that will stop surprising me. It's a shame about the apparent necessity to keep the inconsistent definitions, but you're probably right when you say lots of downstream code is going to rely on the current behavior, whether or not we see it as ""correct."" The dual-identity of type-A and type-B ghosts only complicates matters further, though I definitely see the need for it. It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow, but this is likely more complicated then it sounds. Either way, the ability to go back-and-forth between real and ghost is absolutely necessary, and type-B is the only one that can consistently do that. . Fixing only type-A ghosts to return zero mass may only confuse things further. If nothing else, the functions should at least do the same thing for type-A and type-B ghosts. Consistency between `Molecule.mass` and `Molecule.Z` could be worked on later, though as you pointed out it's probably not a good idea to change `Molecule.Z`. . As for a new `Molecule` function to ensure the user knows what they're going to get, are you referring specifically to a `molecular_weight` function or more generally a function to return either the mass or Z val as either zero or real depending on input? I could get behind either of those, though with `molecular_weight` I would suggest simply setting a default for ghost atoms to return zero mass as I can't imagine anyone would want a molecular weight including ghost atom masses. . EDIT: I just saw what you said about ACS and DGAS nre edit in [#844](https://github.com/psi4/psi4/pull/844). That could work, requiring the argument c-side and giving a default py-side, though I wonder how many places we'd have to update c-side calls to conform to this. Might be the best answer with the least pain involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363495902:1356,depend,depending,1356,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363495902,1,['depend'],['depending']
Integrability,"I see three different questions here:; 1. Is it possible to carry out MRCI in Psi?; 2. Can we get an error message better than a segfault, or for this not to segfault?; 3. Does the energy error indicate you've landed on the wrong electronic state? If so, how do you land on the right one?. My thoughts:. 1. Reading that paper, it looks like Sherrill and Piecuch did (as you suspected), a two-step computation. First, they did a CASSCF computation. Then they used the orbitals from that computation to do a RASCI computation. Then they fed those orbitals into a RAS computation to do their MRCI. That said, I cannot figure out what keywords they might have used to specify the right excitation levels. None of the keywords in the manual level.; 2. I would expect that the program should be able to accept orbitals this way. Unless another developer more experienced in detci sees otherwise, this looks to me a like a bug. I'll give some time for them to comment before investigating further myself.; 3. Just to be clear, do you have any reason to think that you landed on the C electronic state? If not, you may have landed on a different electronic state entirely. I recommend you look at the section of your SCF computation marked ""Final Occupation by Irrep"". Is that consistent with your desired electronic state? Is there any other low-lying electronic state that occupation could match?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517:107,message,message,107,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-634602517,1,['message'],['message']
Integrability,"I seemingly successfully commented out the inclusion of `libint/libint.h` in the following files. Is there any known reason that that's a Bad Idea?; - psi4/src/bin/ccenergy/ccenergy.cc; - psi4/src/bin/ccenergy/local.cc; - psi4/src/bin/cceom/local.cc; - psi4/src/bin/cclambda/local.cc; - psi4/src/bin/ccresponse/local.cc. That header is also included in `ccsort/local.cc` for at least the purpose of getting `LIBINT_MAX_AM`. If that is the sole purpose, is it better to continue including the header or to apply the compiler definitions that now ship with libint: `-USING_libint;-DMAX_AM_ERI=N` (`N` is value from linked lib, not value spec to psi4 cmake)?. That pair of compiler defs are not presently used by anything, so they can be tossed if you all turn against them. I'm still not sure if they pass the bar of ""requirements, not merely recommendations"" (https://cmake.org/cmake/help/v3.6/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements). The `USING_libint` I thought could be useful down the road as libmints interfaces to more integrals packages. The `USING_`s are replacing the double use of `ENABLE_` as cmake option and compile definition that was going on earlier. If you'd all like HAVE, WITH, ENABLED, or whatever, instead, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240423295:1041,interface,interfaces,1041,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240423295,1,['interface'],['interfaces']
Integrability,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/331#issuecomment-205812617:184,message,message,184,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617,1,['message'],['message']
Integrability,"I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. Are any of these now available in v5.1 that I should be activating?. ```; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM05-D not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM06-D3 not in Psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163,1,['interface'],['interface']
Integrability,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:218,depend,dependencies,218,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,1,['depend'],['dependencies']
Integrability,"I suppose I should add my setup is kind of unusual in that I don't develop with or for python, only C++, so never have that stuff installed. So it caught me out for a minute, but easy to fix. Not critical by any means, but If one were a stickler for good cmake practices code compilation should never fall over because of cmake missing dependency checks, . Perhaps I'll try and port psi4 build to meson one day .. famous last words. :D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067:336,depend,dependency,336,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067,1,['depend'],['dependency']
Integrability,"I suppose if people want to get the ""broken"" version of ADC, they can install Psi4 between (at least) 1.3.2 and 1.5, right? I don't think we need to deprecate features that don't work, and if `adcc` is a ""drop-in"" replacement for ADC, I'd too **vote for removal**. Maybe in 1.6, and perhaps 1.7, calls to ADC should be shimmed to `adcc` with a deprecation warning, and afterwards the ADC interface removed (if it's different than `adcc`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330:388,interface,interface,388,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330,1,['interface'],['interface']
Integrability,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133179959:596,message,message,596,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959,3,"['message', 'wrap']","['message', 'wrappers']"
Integrability,I think @matthewkennedy6 fixed this for frozen scans. It's just relaxed scans that still need an interface.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/42#issuecomment-182612789:97,interface,interface,97,https://psicode.org,https://github.com/psi4/psi4/issues/42#issuecomment-182612789,1,['interface'],['interface']
Integrability,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:86,contract,contraction,86,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,2,['contract'],['contraction']
Integrability,"I think I have a partial understanding of why the python snippet works with the psi4 executable, but not psi4's python api. I suspect something about psi4's GDMA interface requires/assumes that there is an output file. When you run psi4 as an executable, the results are written to an output file, so everything is fine. When you run psi4 through the python api, the results are by default printed to your terminal and there is no output file, so you run into this problem. Here's a workaround. Add the following line to the python snippet, immediately after the `import psi4` line:; ```; psi4.core.set_output_file('output.dat', False); ```; This line changes the default output of psi4's python api (from the terminal to a file ""output.dat""). When I insert this line, the python snippet runs successfully. Someone more familiar with the GDMA interface than myself should look into how to fix psi4 so that this workaround isn't necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228625767:162,interface,interface,162,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228625767,2,['interface'],['interface']
Integrability,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:178,message,message,178,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214,1,['message'],['message']
Integrability,I think in other orbital test we attempted to take magnitudes or norms to remove these issues. ROT is DOCC + ACT + VIR with the inactive pieces removed. I can see how the previous message was confusing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613:180,message,message,180,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613,1,['message'],['message']
Integrability,"I think it is very possible to use Psi4 for large basis set calculations as long as you use df or cd approximations. Of course, depending on your molecular system you should provide enough memory for OO methods. Finally, you should compile your psi4 with ""--max-am-eri=7"" option, which is necessary for our integral library (libint). I guess our binary versions are also compiled with high angular momentum options. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152821604:128,depend,depending,128,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152821604,1,['depend'],['depending']
Integrability,I think pywrap-alias does use some of detci's more obscure methods (below). I was also remembering a bad bout I had with ddd before last Christmas where Windows only hung up for detci mp5 run only by exe or by api. ```; (py38) >>> grep -e 'PASSED' -e 'D E T C I' ../tests/pywrap-alias/input.out ; [1] Au std...........................................................................PASSED; [2] MP2 sp...........................................................................PASSED; MP2 route check.................................................................PASSED; [3] MP3 occ..........................................................................PASSED; MP3 route check.................................................................PASSED; [4] MP3 detci (energy and route check)...............................................PASSED; [5] MP4 fnocc........................................................................PASSED; (a 'D E T C I' module); [6] MP11 sp..........................................................................PASSED; (a 'D E T C I' module); [7] ZAPT4 sp.........................................................................PASSED; (a 'D E T C I' module); [8] FCI sp...........................................................................PASSED; [9] MP2.5 sp.........................................................................PASSED; [10] cbs()............................................................................PASSED; [11] db().............................................................................PASSED; [12] CISD sp..........................................................................PASSED; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544:487,rout,route,487,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544,3,['rout'],['route']
Integrability,I think that a little noise in the gradients is inevitable with so many moving parts; that's why we have calls like [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275) for all (I think) gradients throughout the code. It sounds like we just need to consider non-Abelian symmetry in this routine to fix the issue you're describing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351180986:327,rout,routine,327,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351180986,1,['rout'],['routine']
Integrability,"I think that is likely the way to go, I believe you will still need to merge some of the new integral code. It may be worth splitting that off into a another PR to get a digestible component there. We usually can merge small chunks quicker and expanding functionality through python is usually quite preferred if that level of integration is sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983:327,integrat,integration,327,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983,1,['integrat'],['integration']
Integrability,I think the `np-array-interface` [test](https://github.com/psi4/psi4/blob/master/tests/numpy-array-interface/input.dat) should be checking for this already: it is hitting `Matrix.np_read()` after writing it into file.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426:22,interface,interface,22,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426,2,['interface'],['interface']
Integrability,"I think the desire to change the name was to reflect that it can be used for other general-purpose (_i.e._ not only evaluated at nuclei) ESP routines, such as grid properties. IIRC, those integrals are just the regular potential ints, modified to allow arbitrary centers to be provided. At one point in time they were strictly Cartesian AO only, to avoid multiple transformations (contraction should be performed with backtransformed D matrices in that case), but I'm not certain that's true anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351194994:141,rout,routines,141,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351194994,2,"['contract', 'rout']","['contraction', 'routines']"
Integrability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:183,message,message,183,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['message'],['message']
Integrability,"I think there are two issues here: there is a bug in the code, and the interface does not allow for useful core freezing. As for the bug, if we set `freeze_core = FC`:. ```; FC | C N Na | F I (ECP); -1 | 2 2 10 | 2 36 (28); -2 | 0 0 2 | 0 18 (28); ```; - for `freeze_core = -1`, the code ""correctly"" freezes 7 pairs on NaCN, 5 pairs on FI in addition to 14 pairs in I's ECP, and for the dimer it's 12 pairs.; - for `freeze_core = -2`, the code ""correctly"" freezes 1 pair on NaCN, 0 pairs on FI, but for the dimer it incorrectly freezes 0 pairs as the ECP has 14 pairs and the `-2` option would like to freeze only 10 pairs (1 on Na and 9 on I). As for the second problem, the most obvious way would be to allow the user to pass in a dictionary with `""element"": -shell` and/or `""element"": frozen_pairs` to specify exactly what to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-723724864:71,interface,interface,71,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-723724864,1,['interface'],['interface']
Integrability,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252942976:257,message,message,257,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976,1,['message'],['message']
Integrability,"I think this is enough for now. I want to very carefully check the handling of perturbations before making this accessible enough to be tested by our normal suite. For posterity, standard usage with the current interface is:; ```; std::shared_ptr<OneBodySOInt> wOBI(integral_->so_rel_potential());; OperatorSymmetry msymm(OperatorSymmetry::L, molecule_, integral_, soFactory_);; auto wMats = msymm.create_matrices(""SO Relativistic Potential"");; wMats.insert(wMats.begin(), soFactory_->create_matrix(""SO Relativistic Potential""));; wOBI->compute(wMats);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157:211,interface,interface,211,https://psicode.org,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157,1,['interface'],['interface']
Integrability,"I took a quick look at dfocc, and removing these lines; ```cpp; #include ""psi4/libciomr/libciomr.h""; #include ""psi4/libiwl/iwl.h""; #include ""psi4/libpsio/psio.hpp""; ```; from `array.h` doesn't cause any build failures. This was the only file I looked at, but reducing dependencies in that code should help to bring down the long build time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262108439:268,depend,dependencies,268,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262108439,1,['depend'],['dependencies']
Integrability,"I understand now. It's supposed to print something like the below, which is helpful and intelligible. (I think -- can change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:174,message,message,174,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,3,['message'],['message']
Integrability,"I was able to get the potential energy curve (PEC) for the ground state of the CF molecule but then once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:306,message,message,306,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['message'],['message']
Integrability,"I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2434,wrap,wrappers,2434,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['wrap'],['wrappers']
Integrability,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:554,rout,routines,554,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608,1,['rout'],['routines']
Integrability,"I was like ""what's a correct copy-paste error message"" until I read the change, and realized that this meant rectifying a copy-pasted error message in detci...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996:46,message,message,46,https://psicode.org,https://github.com/psi4/psi4/pull/1811#issuecomment-586557996,2,['message'],['message']
Integrability,"I was originally thinking the interface would be more like:; ```python; tddft(""B3LYP/cc-pVDZ""); ```; or ; ```python; ref_e, ref_wfn = psi4.energy(""B3LYP/cc-pVDZ"", return_wfn=True); tddft(ref_wfn); ```. I would be curious as to others thoughts on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626327302,1,['interface'],['interface']
Integrability,"I will need a little bit of time to properly parse the original message, but I suspect I know the source of the discrepancy. I am guilty of writing the original FCHK implementation; I wrote it as a simple interface to the GDMA code. I don't have access to any versions of Gaussian, so I used a combination of the example FCHK files that ship with GDMA, and the GDMA source, to reverse-engineer something resembling an FCHK file (that decision has backfired in recent weeks as people use the FCHK files we produce for other interfaces and find that it's incomplete: we've been working through those bug reports steadily). Where things get tricky is that Psi4 (and its progenitor) uses the [CCA integral](https://github.com/psi4/psi4/files/2957296/CCA.pdf) ""natural"" norm convention, unlike that other code (detailed on the last page of that attachment). Therefore, there's a factor of ; ![image](https://user-images.githubusercontent.com/201881/54209345-029a9d00-44b4-11e9-85b3-0789d498cc93.png); present in our basis function norms that some other codes lack. The presence of the overlap metric in the SCF equations means that the alternative basis function normalization manifests itself in different MO coefficients, but both conventions yield equivalent wavefunctions and properties. It's these corrections that are being applied in the snippet of code that @susilehtola referenced above. I surmise that these are not being applied consistently somewhere in the translation between Psi4 and GDMA.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927:64,message,message,64,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472035927,3,"['interface', 'message']","['interface', 'interfaces', 'message']"
Integrability,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:212,rout,routines,212,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['rout'],['routines']
Integrability,"I wouldn't ship it in its current state, but it sounds like the `-c psi4/label/agg` (built with gcc_linux-64) is what you want. It'll end up with more dependencies than it has now (this is a minimal build) but not any more from the gcc family (except maybe gfortran).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347207093:151,depend,dependencies,151,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347207093,1,['depend'],['dependencies']
Integrability,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264468397:385,depend,dependencies,385,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397,1,['depend'],['dependencies']
Integrability,"I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869303745:110,depend,dependent,110,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869303745,1,['depend'],['dependent']
Integrability,"I'd suggest trying to identify what the ""header"" to remove in a given error message is for a large variety of error messages, those raised C-side and those raised Py-side. Once you have that, look into the source to confirm the error messages follow that pattern, and when it's confirmed, remove what matches that pattern. Then you should be able to handle the case that an error message contains a colon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697:76,message,message,76,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611486697,4,['message'],"['message', 'messages']"
Integrability,"I'll break with our normal protocol and count my review as the third, because @CDSherrill has given approval (the tests pass).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454855676:27,protocol,protocol,27,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454855676,1,['protocol'],['protocol']
Integrability,"I'll post a PR for half of this soon. Any more comments on the interface for floats/arrays being separate (as now, with arrays not often used) or unified? I think I'm favoring the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442463950:63,interface,interface,63,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442463950,1,['interface'],['interface']
Integrability,"I'll review this once it passes tests. `test_cppe.py:test_cppe_tdscf_uhf` is currently failing. Based on the error message, this has nothing to do with CPPE but represents an indexing error in the code. For a first debug attempt, I would recommend removing both CPPE and the comparison against reference energies, and make sure the TDSCF completes in the first place. Let me know if you need assistance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192:115,message,message,115,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192,1,['message'],['message']
Integrability,"I'll try to wrap everything up this afternoon. I just need to do the official release (which is easy, just requires me making a changelog and stuff). And I will remove the restrict keyword from cmake",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-289815684:12,wrap,wrap,12,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-289815684,1,['wrap'],['wrap']
Integrability,"I'll work on dropping Ambit's dependency on Psi4. The functions that Ambit provides should live in Psi4 anyways as they are responsible for transferring data from Psi4 to Ambit. I'm not planning on Psi4 ""absorbing"" Ambit anytime soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234038643:30,depend,dependency,30,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234038643,1,['depend'],['dependency']
Integrability,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:1465,interface,interface,1465,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314,1,['interface'],['interface']
Integrability,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:81,depend,dependencies,81,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['depend'],['dependencies']
Integrability,"I'm having a hard time following all this, so let me try to make sure I'm understanding your concerns about `driver/p4util/numpy_helper.py:_np_read`. I think you're suggesting we explicitly mark `allow_pickle=False` for that function because; 1. security reasons mean `allow_pickle` should be `False` unless needed to be `True`; 2. `allow_pickle` is not needed to be `True` for that function (as demonstrated by `np-array-interface` passing, even with Travis passing in `False`); 3. some users may compile with pre-16.3 NumPy, where default definitions would make `allow_pickle=True`, which is bad by (1) and (2). Did I get that right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657:422,interface,interface,422,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485813657,1,['interface'],['interface']
Integrability,"I'm hitting a similar error message with `dcft_gradient_UHF.cc` but it reports that the error is in `libmints/matrix.h`. Reducing the optimization level was the only way I could get it to compile. Even compiling with -O2 gives the error, -O1 is the only way to resolve it. I see no issue with the compiler- and file-specific flags for this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368651645:28,message,message,28,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368651645,1,['message'],['message']
Integrability,"I'm letting @loriab merge, since she's more familiar with MolSSI interfaces.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905#issuecomment-1480168547:65,interface,interfaces,65,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1480168547,1,['interface'],['interfaces']
Integrability,"I'm looking around in the same area, and I think it might be a nice option to allow natural orbital occupancies to be gathered from the SCF wavefunction when the densities are requested as keyword arguments. In the current code, if you specify `density_a`, the occupancies are taken from the `core.Wavefunction.nmopi` which is the number of molecular orbitals per irrep. In the `write.cc` file in `libmints` which is called when `set print mos` and `set molden_write True` are set, the occupancy is reported correctly. If you use the molden interface directly, I think you would simply need to compute the reference wavefunction first, return this wavefunction, and pass it into molden with a new kwarg `scf_wfn` which would then use `core.HF.occupation_a()` and `core.HF.occupation_b()` to get the correct occupations. Then you could pass the SCF wavefunction into the post-SCF methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300673605:541,interface,interface,541,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300673605,1,['interface'],['interface']
Integrability,"I'm not 100% certain my ""fix"" is not just a hack - my understanding of basis sets and contractions is rather limited. The way I understand it, we're not trusting user input and are normalising all of the normal shells, using both `self.normalise_shell()` and `self.erd_normalise_shell()`. For normal shells, the inputs are the exponent `eps` and the normalisation constant `N` in: ; `psi = N * exp (-r**2 * eps)`. For ECP's, the inputs on each line aren't the exponent + normalisation, but rather they should be the three variables (`n`, `z`, `d` columns in g09 input) in the `i`th component of the potential `v(r)`:; `v(r)_i = d_i * r**(n_i) * e**(-z_i * r**2)`; The third column (`d`, if I got the above right) is stored in `self.PYcoef` and `self.PYoriginal_coef`. If this coefficient is set to zero, the whole component of the potential should be 0 - it shouldn't be normalised. The first column `n` goes to `self.rpowers` for each shell. Finally, the `self.PYexp` contains the exponent `z`. My two questions therefore are:; - should we perform any normalisation at all (including `self.normalise_shell()`) on ECP shells? To me the answer seems no...; - I am assuming the only way to tell a shell is an ECP shell from within `ShellInfo` class is if `self.rpowers` is populated. Wouldn't it be better, if `ShellInfo` received `pt=""Normalized""` when processing an ECP shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376423459:86,contract,contractions,86,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376423459,1,['contract'],['contractions']
Integrability,"I'm not convinced it adds much to the cmake output (I've added a few more lines higher up and added LAZ to the message line you wanted me to add to prove to myself it was doing something!):. Output from: cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX"". -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:111,message,message,111,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['message'],['message']
Integrability,"I'm not sure I understand how the numbers are different for the case of no charges. If this routine is only computing the potential from external point charges (i.e. not the nuclei), then the routine shouldn't be run at all if there are no external point charges!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890:92,rout,routine,92,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656570890,2,['rout'],['routine']
Integrability,"I'm not sure how often `oeprop` really gets called directly in an input, so this is an interesting case. I'm actually tempted to say this is ""expected"" behavior - if you're not calling `oeprop` within the pre-built workflow of another method, maybe it shouldn't get a name unless you specify one. . the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals? generally we only update the density in `properties`, so I'd wager you would actually get the SCF dipole back out. if I recall, it should be printed in the output file which density is used, but if you pull results directly from the python output then you won't necessarily know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545:476,contract,contract,476,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545,1,['contract'],['contract']
Integrability,"I'm not sure what you mean by ""pb"", but I understand the question. I'm the author of this part of the code, and I checked the signs very; thoroughly when the code was written. Most likely, this is a confusion about the sign conventions of the code.; You'll recall that the sign of a determinant depends on the ordering of the; spin orbitals. In this code, all alpha spin orbitals come first, and then; all beta spin orbitals (this winds up being an easier rule to state and; maintain than alternatives like ""order by spatial orbital, and then alpha; first and beta second within spatial orbital numbering""). With that ordering, the signs given are correct. (See, for example,; equation 2.260 of Szabo and Ostlund). Best,; David. On Wed, Sep 16, 2020 at 2:04 PM saadyalouz <notifications@github.com> wrote:. > Dear developers,; >; > I am currently running SA-CASSCF calculations on the formaldimine; > molecule. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.varia",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:295,depend,depends,295,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['depend'],['depends']
Integrability,"I'm of the opinion that we should either hunt it down or leave an error message describing how the input _should_ have been written. Given what the user is trying to do, the approach they took is the one I would have tried first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841:72,message,message,72,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-434799841,1,['message'],['message']
Integrability,"I'm reading the cmake overview docs (which are actually cohesive, imagine that) and agree with @ryanmrichard's second SO post. It seems practical to reason about INTERFACE (which, yes, now I see is different from the add_library() STATIC/SHARED/MODULE/IMPORTED/INTERFACE business) and PRIVATE separately, then, if both, consider PUBLIC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237732780:162,INTERFACE,INTERFACE,162,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237732780,2,['INTERFACE'],['INTERFACE']
Integrability,"I'm reasonably sure there was a reason why that `""f_options"" != False` check was necessary at some point, I just don't remember it right now. As long as all test pass, it should be fine, and I'm guessing DDD will make changes to the routines anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2028#issuecomment-723523530:233,rout,routines,233,https://psicode.org,https://github.com/psi4/psi4/pull/2028#issuecomment-723523530,1,['rout'],['routines']
Integrability,"I'm sorry, but the issue does not seem to be fully solved... Yes now the atom nr in the header of the cube file is correct:; ```; Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0571983,0); 5 -12.329260 -10.002258 -9.679907; 131 0.160000 0.000000 0.000000; 120 0.000000 0.160000 0.000000; 122 0.000000 0.000000 0.160000; 53 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708. ```; But the integrated electrons in the cube file still misses alot of electrons. I use the cube file as input for the Chargemol code, and it works perfect for all other than molecules with Iodine as in this example. ```; Starting DDEC program; 2018/08/14 12:53:41; Copyright (c) 2014, 2015, 2016 by Thomas A. Manz and Nidia Gabaldon Limas. Rights reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:586,integrat,integrated,586,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['integrat'],['integrated']
Integrability,I'm still figuring out the caching of Conda-installed dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268:54,depend,dependencies,54,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268,1,['depend'],['dependencies']
Integrability,"I'm stuck at this exception, possibly related to version dependencies or other recent changes ... before I delve in the debugging, has anybody seen it already? Thanks. ```; File ""C:\Users\Toni\mc3\envs\gg\lib\site-packages\psi4\driver\qcdb\psiutil.py"", line 231, in compare_molrecs; xptd = massage_dicts(xptd); File ""C:\Users\Toni\mc3\envs\gg\lib\site-packages\psi4\driver\qcdb\psiutil.py"", line 227, in massage_dicts; prov.pop('version'); AttributeError: 'str' object has no attribute 'pop'; ```. Edit: got it: a change in qcelemental 0.1.2 -> 3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-453056799:57,depend,dependencies,57,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-453056799,1,['depend'],['dependencies']
Integrability,"I'm surprised at the libxc problem, as that build number is at the top of the list here, https://anaconda.org/psi4/libxc/files, and you've got psi4 in the channels list. Perhaps you've got strict channel priority active? Psi4 _can't_ use the c-f libxc (another symbols issue) so it pins to the psi4 one. Perhaps `psi4::libxc` could get you a step deeper into the rabbit hole. :-). > Hopefully psi4 will hit conda forge soon. Agreed. There's some conflicting dependency issues to work out beforehand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164966523:458,depend,dependency,458,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164966523,1,['depend'],['dependency']
Integrability,I'm using 16.0.2 with no problems on my workstation. Didn't know about the `ENABLE_XHOST` configure option but I routinely use `setup --vectorization` with no issues. I'll give xhost a try shortly. Though I'm having trouble getting cfour running on my new cluster using 16.0.2 with my flags from the old cluster (with older Intel compiler). I'm wondering now if this is related.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198705736:113,rout,routinely,113,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705736,1,['rout'],['routinely']
Integrability,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:834,depend,depend,834,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,1,['depend'],['depend']
Integrability,I've added a test for UHF integral dumps. The tests are in both as PsiAPI _and_ as Psithon. The former is failing without any particularly informative error message. Suggestions on how to troubleshoot?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355999602:157,message,message,157,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355999602,1,['message'],['message']
Integrability,I've added the checks for the deriv >= 1 spin-restricted case. Let me know if this is about right. The output is attached.; [nan_output.log](https://github.com/psi4/psi4/files/8960850/nan_output.log). I'll add the other cases after early feedback on the current messages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527:262,message,messages,262,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527,1,['message'],['messages']
Integrability,I've changed the routines so that the memory management is entirely up to the caller.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-330901143:17,rout,routines,17,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330901143,1,['rout'],['routines']
Integrability,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37137150:145,depend,dependencies,145,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150,1,['depend'],['dependencies']
Integrability,"I've finally managed to get your branch to compile on my machine (Libint was throwing a fit like it always does whenever I want to do anything), so hopefully I can get to the bottom of the non-zero values soon. I get the correct SCF energy with libecpint through my (non-Psi4) code, so it has to be a wrapping issue. Edit: see below - it was indeed a wrapping issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980:301,wrap,wrapping,301,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803690980,2,['wrap'],['wrapping']
Integrability,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:202,integrat,integration,202,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628,1,['integrat'],['integration']
Integrability,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/286#issuecomment-189699831:107,rout,routing,107,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831,3,['rout'],"['route', 'routing']"
Integrability,"I've removed the work-in-progress marker as this first step is reasonably complete. The `Tensor` class as storage object has an acceptable interface both on the C++ and the Python side (I think!) I can use this to work further on the `linalg` namespace, add BLAS/LAPACK wrappers, and eventually transition the SCF to xtensor. I have tried to fix Azure CI, to no avail. I can't quite figure out whether I need to change the xtensor source or the CI setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023:139,interface,interface,139,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-484270023,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203440132:428,message,message,428,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132,1,['message'],['message']
Integrability,I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536:21,interface,interface,21,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536,1,['interface'],['interface']
Integrability,"I've tried to re-write some of the cbs docs more thoroughly, however my sphinx-fu is not up to scratch. Especially the bits in `driver_cbs.py` under Combined interface, I am not sure what the best way of markup is - the current one is quite ugly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-421439009:158,interface,interface,158,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-421439009,1,['interface'],['interface']
Integrability,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:177,message,message,177,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883,1,['message'],['message']
Integrability,"IIRC `nmopi_` is the number of molecular orbitals, so it definitely should account for linear dependencies...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-784716861:94,depend,dependencies,94,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-784716861,1,['depend'],['dependencies']
Integrability,"Ideally, the list of functionals in Psi4 would depend on the version of libxc available. And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082:47,depend,depend,47,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451102082,1,['depend'],['depend']
Integrability,"If [this](https://gitlab.com/libxc/libxc/merge_requests/62) LibXC PR goes through this should be closer to ready to go. They also deprecated many of the Minnesota wrappers for some reason, issue about it [here](https://gitlab.com/libxc/libxc/issues/42). So we will need to hand code these in as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-366317953:163,wrap,wrappers,163,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-366317953,1,['wrap'],['wrappers']
Integrability,"If a guess basis cleans up most of the discrepancies, then I think we're ok; for now, until the revamped SAD guess can go in. On Wed, Apr 20, 2016 at 10:04 AM, Lori A. Burns notifications@github.com; wrote:. > Landing on the correct SCF solution is tricky, and guaranteeing it is; > trickier still. I hear that in psi3, users routinely supplied docc/socc; > arrays to guide to the intended solution. Fortunately, psi4 has a variety; > of guesses to obtain the right solution, and someday, as @dgasmith; > https://github.com/dgasmith mentioned, a next-generation SAD guess will; > assure correctness for the ground states of elements, at least. But without; > a root-finding driver over the SCF code that attempts and discards guesses/; > does basis projections/ evaluates the nature of the system (which can be; > computational expensive), we cannot fix some system and method combinations; > without injuring others. It should be noted that no QC methodology to date; > is completely black box and no program always obtains the correct minima; > with default options. We are glad to have the lithium report at hand and; > will be pleased to use them to test the future SAD guess, but this is not a; > n issue that will be fixed by 1.0.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/335#issuecomment-212439352",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212443074:326,rout,routinely,326,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212443074,1,['rout'],['routinely']
Integrability,"If anyone else is having issues here, we've just configured the `ddx` interface to Psi4 and now solvent is working again on our systems—unfortunately there are no analytical gradients w/ the current interface, but I think this will change in the future (see discussion in #2767). The interface is documented nicely [here](https://psicode.org/psi4manual/master/ddx.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661:70,interface,interface,70,https://psicode.org,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661,3,['interface'],['interface']
Integrability,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:178,interface,interface,178,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062,1,['interface'],['interface']
Integrability,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441001:447,rout,route,447,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001,1,['rout'],['route']
Integrability,"If you need some help working out what's going wrong, please send over the test output you're getting. I've just looked through your changes and I'm not seeing anything that looks out of place. . I remember there being one bug that I fixed in libecpint that will have been in the Psi4 code, but it will have only been noticeable with a specific class of ECPs (those that have an n=1 term (or n=-1 depending on your convention). The line is https://github.com/psi4/psi4/blob/d16d02e69238f1b0d90a2f1283f38e818873e748/psi4/src/psi4/libmints/ecpint.cc#L473 and should be changed to . ```tooSmall = tooSmall || ( intValues(l, i) < tolerance );```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469:397,depend,depending,397,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469,1,['depend'],['depending']
Integrability,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332298418:52,bridg,bridge,52,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418,1,['bridg'],['bridge']
Integrability,"In addition, ```basis_guess true``` should be changed so that it does something similar to the automatic auxiliary basis set selection routine. E.g. use ```pcseg-0``` as guess basis for ```(aug-)pcseg-n``` series, ```def2-SVP``` (or a version thereof with some functions removed) for ```def2``` series, etc. That way you can assure that the ECPs match.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-455799123:135,rout,routine,135,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-455799123,1,['rout'],['routine']
Integrability,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:542,message,message,542,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,1,['message'],['message']
Integrability,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121658832:366,message,message,366,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832,6,['message'],['message']
Integrability,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:23,depend,dependency,23,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,3,"['depend', 'interface', 'wrap']","['dependency', 'interface', 'wrapper']"
Integrability,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1506,message,messages,1506,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,1,['message'],['messages']
Integrability,"In terms of the print function, `""{0:b}"".format(needed_irreps)` would give the binary representation. Perhaps that's the cleanest. If you go that route, you'd have to ensure that only the trailing `nirreps` characters are printing, which is easy to do using Python's slicing syntax.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/895#issuecomment-358783231:146,rout,route,146,https://psicode.org,https://github.com/psi4/psi4/pull/895#issuecomment-358783231,1,['rout'],['route']
Integrability,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238061055:195,depend,dependency,195,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055,2,"['INTERFACE', 'depend']","['INTERFACE', 'dependency']"
Integrability,"In the DFOCC case I just forget to use the ""puream false"" option. When I used the ""puream false"" option, I again get the incorrect normalization. Hence, I think the contraction normalization code for cartesian functions might include a bug. As far as I understand, in psi4 there is different shell info codes for ""puream true"" and ""puream false"" options. Am I right? @jturney @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874#issuecomment-349096893:165,contract,contraction,165,https://psicode.org,https://github.com/psi4/psi4/issues/874#issuecomment-349096893,1,['contract'],['contraction']
Integrability,"Incidentally, an independent PR of mine just ran into this particular error message. I'm eager to get this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972:76,message,message,76,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1251226972,1,['message'],['message']
Integrability,"Indeed, these are great improvements. Only the CheMPS2 print handling needs fixing before merging, I think. The PR has also greatly deranged the CMake module dependency chain, so `make -j8` fails over and over (but restartable). That needs to be handled soon but not necessarily immediately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-309297476:158,depend,dependency,158,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-309297476,1,['depend'],['dependency']
Integrability,"Installed changes:; - `prefix/include/herebeheaders.h` --> `prefix/include/psi4/herebeheaders.h`; - `share/psi/python` --> `share/psi4/python`, etc. Then, Jet, you're also proposing the following?; Source changes:; - `top-source-dir/lib/python` --> `top-source-dir/share/psi4/python`. I agree the `lib` is misleading, but two directory levels is a lot just to match names. I'd leave it as is or move to `share`. That won't affect the public interface, so easier to change in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173956800:441,interface,interface,441,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173956800,1,['interface'],['interface']
Integrability,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:51,depend,depends,51,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836,1,['depend'],['depends']
Integrability,"Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed. fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896:151,interface,interface,151,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896,1,['interface'],['interface']
Integrability,Is it possible that your computer ran out of memory?; Check dmesg after running it for oom-killer messages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-924997018:98,message,messages,98,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-924997018,1,['message'],['messages']
Integrability,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126180494:655,depend,dependency,655,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494,1,['depend'],['dependency']
Integrability,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:394,message,message,394,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['message'],['message']
Integrability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:3,depend,depends,3,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,1,['depend'],['depends']
Integrability,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:168,message,message,168,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426,1,['message'],['message']
Integrability,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,2,['interface'],['interface']
Integrability,It looks like Psi is providing wrappers for `dtzrqf` but not actually using the function (unless some downstream plugins are using it). So shouldn't be too hard. Thanks for the notice!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547:31,wrap,wrappers,31,https://psicode.org,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547,1,['wrap'],['wrappers']
Integrability,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:59,contract,contraction,59,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,2,['contract'],['contraction']
Integrability,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:26,interface,interface,26,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397,1,['interface'],['interface']
Integrability,"It shouldn't take a bit of time to execute. The implementation symbols are currently not exported but will be from the PR. I just want to expose the interface and not the implementation. Ultimately, I will move to keep the implementation header files from being installed as the interface headers are the only ones that should be used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208:149,interface,interface,149,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208,2,['interface'],['interface']
Integrability,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237716768:80,interface,interface,80,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768,5,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:767,interface,interfaces,767,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,1,['interface'],['interfaces']
Integrability,"It's `dftd3` run through the psi4 interface. All we've done is tack on `-abc` to the command and then parse the `E6(abc)` line. @dsirianni, maybe page up in your terminal and check (or re-run) d3zero vs d3bj that the output line is exactly the same (for our regex to handle). Another thing to test is whether `dftd3 -func bp -abc <molfile>` outright gives exactly the same thing (`bp` is the turbomole for bp86, iirc). you can grab the text of the molfile from that big dictionary that gets printed with verbose=4. That will make sure that the ATM value when run from `.dftd3param` file (which is what psi always does) matches when `dftd3` uses its internal parameters for bp86. Thanks for the help, @hokru. I was really hoping those four numbers were supposed to be the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-417121617:34,interface,interface,34,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-417121617,1,['interface'],['interface']
Integrability,"It's a feature not a bug?. Symmetric molecules are supposed to have symmetric wavefunctions (because; the Hamiltonian commutes with the symmetry operators). Certainly, the; exact wavefunction does has the full point group symmetry. Occasionally,; approximate QM methods can have lower-energy non-symmetric solutions.; Anytime the wavefunction has a lower symmetry than the molecule, this is; usually considered a bad thing and is often called ""artifactual (spatial); symmetry breaking."" Wes Allen and Daniel Crawford have some excellent; papers on this topic (I've made a couple contributions, also). In most applications, generally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:714,depend,depends,714,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['depend'],['depends']
Integrability,"It's a technical term :-) (http://forum.psicode.org/t/managed-methods-feedback-required/130/4?u=loriab), @psi-rking . Thanks for the answers, @jturney and @andysim, I'd feel better, too, if we assume less about the orientation, so long as there's no reason to the contrary. I believe @dgasmith is already adding the off-diagonals to #301, so that should wrap up this issue. And we're agreed on where such function should live in future, as they materialize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191996440:354,wrap,wrap,354,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191996440,1,['wrap'],['wrap']
Integrability,"It's not _really_ a Psi4 error message. Psi uses [QCElemental](https://github.com/MolSSI/QCElemental) for molecule parsing. It's QCElemental that raises the difficult error message, and it bubbles up through Psi. As such, I'm inclined to say this issue belongs on QCElemental's repo, not Psi's. @loriab is involved with both and is better equipped to judge where this belongs and whether it's even possible to identify the problematic line in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508:31,message,message,31,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910282508,2,['message'],['message']
Integrability,"I’m certain I used PK when I first wrote that G2 routine. I don’t see why it can’t be used now. On Jul 14, 2016, at 5:32 PM, Lori A. Burns notifications@github.com wrote:. > I think pk for g2 would be fine. Anything but df. @edeprince3 can comment if not. ; > ; > Sent from my iPhone; > ; > > On Jul 14, 2016, at 2:11 PM, Andy Simmonett notifications@github.com wrote:; > > ; > > OK, the DF Hessians (including proper orbital response terms, with the SCF fitting basis) are in there now. There's a problem with the OUT_OF_CORE algorithm somewhere in libJK, but PK/DIRECT work just fine so I'm not sure it's worth worrying about too much. I saw that g2 uses OUT_OF_CORE; is there a reason for this, @loriab? If it's OK to switch to PK for that method, I think that's a reasonable fix for now.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232800374:49,rout,routine,49,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232800374,1,['rout'],['routine']
Integrability,I’m traveling so I’ll see if I can update the libxc PR tonight. Which libxc (3 or 4) are each of you packagers actually aiming for? We’ve been trying to stay up to date with upstream dependencies and maximize functionals provided.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739:183,depend,dependencies,183,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739,1,['depend'],['dependencies']
Integrability,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:95,message,message,95,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,2,"['message', 'synchroniz']","['message', 'synchronization']"
Integrability,"Just a note that this bug actually affects all atoms that have 2 letters, not only `Cl`, making the current Psi4/geometric interface functional only for single-letter atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871#issuecomment-1425797037:123,interface,interface,123,https://psicode.org,https://github.com/psi4/psi4/issues/2871#issuecomment-1425797037,1,['interface'],['interface']
Integrability,"Just a quick note on the failing tests so I don't forget: `dft-smoke` fails because it includes DSD-PBEP86 (which was parametrised for -D2, now is parametrised without it); `dftd3-energy` fails because of `dashparams['sr8']` not being passed in. It would make sense to generalise that interface somewhat - set defaults and then update from the passed-in dict.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370332915:285,interface,interface,285,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370332915,1,['interface'],['interface']
Integrability,"Just be super careful if there are any subtractions; the result of subtracting two unsigned quantities is itself unsigned and, if negative, it'll wrap around and give garbage. Therefore things like `if (A - B > tol)` should be `if (A > B + tol)`. Probably not relevant for this case, but keep in mind that OpenMP loop iteration variables must be signed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830:146,wrap,wrap,146,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830,1,['wrap'],['wrap']
Integrability,"Just like the error message warns, SCF is not set up to restart from a wavefunction because there's need-to-project?, need-to-orthogonalize?, etc. issues that have to be handled. The wavefunction passing is set up to the level that the old `bypass_scf` kwarg handled. That is, a _completed_ scf_wfn can be passed into CC, CI, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227828506:20,message,message,20,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227828506,1,['message'],['message']
Integrability,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:796,message,message,796,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,1,['message'],['message']
Integrability,"Just to confirm: these are almost all just removal of the C-based wrapper functions, correct?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2724#issuecomment-1265862039:66,wrap,wrapper,66,https://psicode.org,https://github.com/psi4/psi4/pull/2724#issuecomment-1265862039,1,['wrap'],['wrapper']
Integrability,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173#issuecomment-272780463:126,integrat,integrates,126,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463,1,['integrat'],['integrates']
Integrability,"Landing on the correct SCF solution is tricky, and guaranteeing it is trickier still. I hear that in psi3, users routinely supplied docc/socc arrays to guide to the intended solution. Fortunately, psi4 has a variety of guesses to obtain the right solution, and someday, as @dgasmith mentioned, a next-generation SAD guess will assure correctness for the ground states of elements, at least. But without a root-finding driver over the SCF code that attempts and discards guesses/ does basis projections/ evaluates the nature of the system (which can be computational expensive), we cannot fix some system and method combinations without injuring others. It should be noted that no QC methodology to date is completely black box and no program always obtains the correct minima with default options. We are glad to have the lithium report at hand and will be pleased to use them to test the future SAD guess, but this is not an issue that will be fixed by 1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212439352:113,rout,routinely,113,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212439352,1,['rout'],['routinely']
Integrability,"Last request for the night: Can you take scf5 and run it a bunch of times in a row (maybe 20 times)? On my Ivy Bridge machine, it will sometimes pass, sometimes fail.... ```; Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places; ```. Is this what you're seeing? Or is this an unrelated problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198631685:111,Bridg,Bridge,111,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198631685,1,['Bridg'],['Bridge']
Integrability,"Last time we tried with py3.8 some dependencies were not yet available for python 3.8. Might be solved now. Adcc should not be a problem, since with pypi packages 3.8 is already supported.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741:35,depend,dependencies,35,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598880741,1,['depend'],['dependencies']
Integrability,"Let me rephrase: I tried to make my own wavefunction file, but when I succeed in that, I get a different error when setting up the active space, likely because the number of MOs in the basis set I'm picking isn't consistent with the active space defined in the input file. Anyways, this bug is the result of the exact same deep design issue in the Wavefunction class that led to #1851. **I don't know what the Wavefunction ""contract"" is, and wavefunction serialization disagrees about what the contract is with every single module that's having these problems.**. #1851 : Some modules assume that every wavefunction must have a PSIO object. Wavefunction serialization disagrees.; bsenjean's original report : The JK object constructors force callers to pass in an auxiliary basis set, even when the JK object will never use it. `detci` responds by assuming that every reference wavefunction must have a `DF_BASIS_SCF` set. Wavefunction serialization disagrees. Holger's previous analysis is right on for the mechanism of this.; Holger's new report : The properties code [assumes that every wavefunction has a matrix factory](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L88) and uses that to create an [OperatorSymmetry object](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1256). Wavefunction serialization disagrees. It doesn't attach a matrix factory, so libmints is left trying to create matrices out of `nullptr`. That segmentation faults, unsurprisingly. I don't have time to deal with these, because I have the gradient code to worry about, and I'm sure nobody else has time because _getting 1.4 out soon is kind of important_. I will say that this is not a good state of affairs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041:424,contract,contract,424,https://psicode.org,https://github.com/psi4/psi4/issues/1871#issuecomment-615460041,2,['contract'],['contract']
Integrability,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307915395:121,contract,contractions,121,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395,1,['contract'],['contractions']
Integrability,"Looking at the Window's error message, I think libmint's integral.cc needs to use C++14, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298:30,message,message,30,https://psicode.org,https://github.com/psi4/psi4/pull/2392#issuecomment-1006506298,1,['message'],['message']
Integrability,"Looking at this, we do not hardcode LibXC functionals in the full sense. We do present a list of functionals that are officially supported as we need to parse through them and make sure we actually support the underlying forms and dispersion corrections. Advanced users are free to build their own functionals from any LibXC primitive or mixed functional via the more advanced custom functional interface found [here](http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-347017285:395,interface,interface,395,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-347017285,1,['interface'],['interface']
Integrability,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:211,integrat,integration,211,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,3,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,"Looks good to me, but I just want to check one thing (that Lori knows way more about than I) before merging it. Do we want to check for FLEXIBLAS first? My only concern is that we could run into the OMP vs. GOMP issue by not knowing exactly which BLAS is wrapped. Do either of you think that's something we're likely to run into?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880219849:255,wrap,wrapped,255,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880219849,1,['wrap'],['wrapped']
Integrability,"Looks good. This is background work, not ready-to-go method algorithm, right?. Sometimes the code in dfocc tends to repeat (e.g., below <10 lines of the 138 added really differ between newly added and existing member functions). Would you want to consider consolidating such functions in future for ease of maintenance? It might also help the module's build time. ``` cpp; 2c2; < // CD-WabefT2: ; ---; > // WabefT2 ; 4c4; < void DFOCC::ccsd_WabefT2_cd(); ---; > void DFOCC::ccsd_WabefT2(); 6,8d5; < ; < timer_on(""WabefT2"");; < ; 11c8; < SharedTensor2d V, Vs, Ts, Va, Ta, bQ;; ---; > SharedTensor2d V, Vs, Ts, Va, Ta;; 12a10; > timer_on(""WabefT2"");; 44,48c42,44; < bQ = SharedTensor2d(new Tensor2d(""L <Q|AB>"", nQ_cd, navirA, navirA));; < bQ->read(psio_, PSIF_DFOCC_INTS, true, true);; < K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ_cd));; < K = bQ->transpose();; < bQ.reset();; ---; > K = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (AB|Q)"", navirA * navirA, nQ));; > K = bQabA->transpose();; > bQabA.reset();; 65c61; < I->contract(false, true, navirA*nb, navirA, nQ_cd, K, K, 0, a*navirA*nQ_cd, 1.0, 0.0);; ---; > I->contract(false, true, navirA*nb, navirA, nQ, K, K, 0, a*navirA*nQ, 1.0, 0.0);; 134a131,134; > // Read B(Q,ab); > bQabA = SharedTensor2d(new Tensor2d(""DF_BASIS_CC B (Q|AB)"", nQ, navirA, navirA));; > bQabA->read(psio_, PSIF_DFOCC_INTS, true, true);; > ; 137c137; < }// end ccsd_WabefT2_cd; ---; > }// end ccsd_WabefT2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220406272:1052,contract,contract,1052,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220406272,2,['contract'],['contract']
Integrability,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:1534,interface,interface,1534,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,3,"['interface', 'rout']","['interface', 'routines']"
Integrability,"Looks like there's a trivial merge conflict. Lmk if you prefer (1) I resolve with the GH interface, (2) I rebase and force-push, or (3) you want to handle it. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1336497610:89,interface,interface,89,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336497610,1,['interface'],['interface']
Integrability,"Lori's message is for the experienced developer while Peter's is for the beginner.; I'd also aim more for the beginner, but include the git commands for the reasons Jonathon mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-982018294:7,message,message,7,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982018294,1,['message'],['message']
Integrability,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122476853:592,message,message,592,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853,6,['message'],['message']
Integrability,"Makes sense to me. I will be heading home soon and they are still running. I will reply tomorrow morning with how the different fixes behaved, and, I will check for any ominous looking messages in the logfile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953192603:185,message,messages,185,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953192603,1,['message'],['messages']
Integrability,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79#issuecomment-94352477:253,message,message,253,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477,3,['message'],"['message', 'messages']"
Integrability,"Minor issue: with g++, cmake has a warning about xHost (which is intel specific):. ```; CMake Warning at cmake/Psi4Macros.cmake:105 (message):; Option unfulfilled as none of -xHost valid; Call Stack (most recent call first):; cmake/Psi4Macros.cmake:161 (add_C_flags); cmake/Psi4Macros.cmake:173 (add_flags); CMakeLists.txt:48 (option_with_flags); ```. I believe the gcc/g++ alternative is `-march=native`, but I don't have much experience with it. You might need to set the options differently depending on the compiler.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237278849:133,message,message,133,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237278849,2,"['depend', 'message']","['depending', 'message']"
Integrability,"Misc. notes:. * I'll need to change `np.array` to `ndarray` wherever appropriate, for standardization; * The `geoms` top-level elements in the metadata dictionary will be renamed to `displacements`, so we don't have a `geometry` field _and others_ in `geoms`. That was confusing.; * We'll need to decide on the convention for the label for the undisplaced geometry. @loriab's proposal was ""0: 0"", and shift to 1-indexing SALCs for the interface. My preference is for """", though I understand this will likely not widely shared.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148#issuecomment-425937948:435,interface,interface,435,https://psicode.org,https://github.com/psi4/psi4/issues/1148#issuecomment-425937948,1,['interface'],['interface']
Integrability,"Mmh, how many parallel processes do you have ? aio_handler.cc spawns a new thread that is specifically for writing the integrals to disk. When there is no writing left to do, the thread should die, and a new one is generated when further writing is needed. Here it looks like it's trying to generate the thread when it already exists... Or maybe the threads are not properly dying, and it gets to the maximum number of threads. Does your computation seem to proceed normally in spite of the error message ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277489656:497,message,message,497,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277489656,1,['message'],['message']
Integrability,"My current leaning is that they should be IMPORTED rather than INTERFACE (http://stackoverflow.com/a/36649194). IMPORTED is also what they were before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake), though certainly we want to abandon the Find modules where we can (any project we can influence) and replace with Config. I'm working on the ExternalProjects exporting their targets, so I'll report if I get anywhere.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237704967:63,INTERFACE,INTERFACE,63,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237704967,1,['INTERFACE'],['INTERFACE']
Integrability,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:602,message,message,602,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,1,['message'],['message']
Integrability,"My hunch is that the interface is not ""actually buggy"", but that it was silently changed MRCC-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1077506388:21,interface,interface,21,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1077506388,1,['interface'],['interface']
Integrability,"My issue here seems specific to our cluster. I have no problems on my workstation or our second cluster. Maybe the old (gcc 4.7.2) on the cluster makes troubles together with the local installation of gcc 4.9.4. But I have no real desire to dig into this... Btw, uncommenting these cmake debug messages did produce no output at all (or I did something wrong)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/657#issuecomment-289040592:294,message,messages,294,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-289040592,1,['message'],['messages']
Integrability,"My sincerest apologies to the Psi4 community, I didn't even begin to fathom that these timers were going to be such a fiasco. I dropped the sampling down to 1 point per timer so I expect they should be invisible now, but I can't confirm this at the moment. If someone wants to check this and close the issue if it's been resolved I would appreciate it. In the meantime I'll have to look into VTune as it appears to do everything I was making these timers do, but with a pretty GUI interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98518253:481,interface,interface,481,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98518253,1,['interface'],['interface']
Integrability,"My thoughts on the questions:; > How much validation do we want?. I would think that input would need to be validated always as the source is unknown, and output should be validated as part of the test suite, but then does not need to be validated at run-time before they are returned since (ideally) the test-suite ensures that our output jsons always adhere to the schema. Is there a best practice followed by applications using JSON APIs? For example does the JSON ""consumer"" always hold responsibility for checking that the object received is valid, or is it up to the JSON ""producer"" to ensure that objects are valid before sending them? . >A full test suite should like come from the schema itself?. Not sure what you mean here. Should the schema project provide functionality to validate objects that can be used by applications adhering to the schema to test that their JSON generating functions are generating valid objects? That would be great, and would reduce the amount of work that needs to be done by devs of individual QC packages to adopt the interface. > How we will we handle extra psi vars? Is the current setup sufficient.; If the schema allows for extra/arbitrary fields somewhere, we could provide all psivars/arrays there. If not then I guess we can just add handling of additional psivars in the future as they apply to new revisions of the schema?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/979#issuecomment-384995562:1060,interface,interface,1060,https://psicode.org,https://github.com/psi4/psi4/pull/979#issuecomment-384995562,1,['interface'],['interface']
Integrability,"My understanding is that there are two issues:; 1. All correlated densities are written to ""CC Density"". The reference Lori linked (http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm) says there are separate density sections for MP2, CI, and CC. Susi said it's adequate for the correlated density to be written to one of the three. Forum posters want the densities sent to the ""proper"" place. I don't know whether the current behavior is adequate for Gaussian or not, but I can easily believe this would confuse some other program that consumes FCHK files. I am not convinced that this is an aesthetic issue and that FCHK is ""undefined"" in this regard. Again, would it be possible to use the `name` attribute of a wavefunction to figure out the right density title?; 2. Sometimes a correlated wavefunction displays as having a ""density"" which is really the SCF density (http://forum.psicode.org/t/density-labels-in-fchk-files/1445/3) and sometimes the correlated density overwrites the reference density (http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532/13). Issue #1478 mentions this but doesn't go into details. In particular, I'm bothered by the fact that forum users report CC density does not override, but Susi reports that CC density does override. The difference is probably that Susi ran a property computation, but the forum user may have just run an energy computation. This part should be moved to #1478, with a caveat that whoever fixes this should check whether it fixes FCHK problems or not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631:1092,interface,interface,1092,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-533691631,1,['interface'],['interface']
Integrability,"Neither overall chg/mult nor fragment chg/mult will effect Mol.Z(at); all that info is stored separately. BasisSets are associated with each atom in Mol, so it does make some, though not a lot of, sense that ECPs should affect Z(at). Once upon a time there were true/false/large/small choices for `freeze_core`. They got dropped. I don't remember why, but I'd venture b/c they caused more confusion than convenience. But a lot more was handled c-side then. I expect a more flexible interface (that also takes frozen_docc into account) would have support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385871335:482,interface,interface,482,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385871335,1,['interface'],['interface']
Integrability,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1493,wrap,wrapper,1493,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294,1,['wrap'],['wrapper']
Integrability,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121080590:591,rout,route,591,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590,1,['rout'],['route']
Integrability,"No idea what is causing DSYEV to fail, but before I implemented the new wrapper this would have gone undetected, so if anyone tried to `git bisect` it crash/no crash would not be a good indicator. The old wrapper ignored the info value from LAPACK and let execution continue despite the diagonalization failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085:72,wrap,wrapper,72,https://psicode.org,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085,2,['wrap'],['wrapper']
Integrability,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241076197:476,contract,contract,476,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197,1,['contract'],['contract']
Integrability,"No worries, this was easy compared to the actual libint2 interface that you all had to write and test. I've updated the post to clarify that this PR closes #2114. I found and updated only one test with an unnecessary `ints_tolerance 0`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139#issuecomment-804380750:57,interface,interface,57,https://psicode.org,https://github.com/psi4/psi4/pull/2139#issuecomment-804380750,1,['interface'],['interface']
Integrability,"No, guess=read is specifically disabled https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L451 . As to how to run the calc, there's ways to deposit and collect scratch files in a qcng.compute run, and that could be done with the npy file and the optimize() fn or the optking qcng procedure. Ultimately, the optking qcng procedure should set the orbitals protocol so that it collects orbitals from gradients and can reseed them for the next gradient. The barrier to that right now is that psi4 can write the QCSchema Wavefunction, but it can't reinitialize a psi4.Wfn from it. (It's a BasisSet coeff issue I noticed last summer but haven't been able to follow up on.). So this input is something we don't want to prevent, but it would need some hacking at the present, and it might hit some other problem along the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037:382,protocol,protocol,382,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037,1,['protocol'],['protocol']
Integrability,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78#issuecomment-83015983:140,integrat,integrate,140,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983,1,['integrat'],['integrate']
Integrability,"No, the code is generated and compiled during the build. There is no compilation at run time and dependency on MSVC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390251325:97,depend,dependency,97,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390251325,1,['depend'],['dependency']
Integrability,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261729566:351,message,message,351,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566,3,"['INTERFACE', 'message']","['INTERFACE', 'message']"
Integrability,"Not a big deal. My preference would be to produce an equivalent file to; CFOUR. For example, the Crawford group has some chiroptical scripts; related to ROA that use second derivatives (file15-like) or dipole moment; derivatives (file17-like) but the headers vary slightly between PSI and; CFOUR, and this causes headaches, or worse, incorrect results if errors; aren't thrown. On Sun, Apr 15, 2018 at 10:03 PM, Lori A. Burns <notifications@github.com>; wrote:. > Origin aside, do I gather correctly that optking (or its successors;; > optking being the only visible consumer of the .hess file) isn't; > dependent on the 6 and if I could absorb the format into FCMFINAL, it'd; > be ok with your code, @psi-rking <https://github.com/psi-rking>?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/953#issuecomment-381467223>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTLfdpPdF-9uBf3JwnOPE52-M4vmYks5tpAoPgaJpZM4TPKkE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381624417:604,depend,dependent,604,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381624417,1,['depend'],['dependent']
Integrability,"Not a fluke. Note l. 93 of the configure build step reports that a suitable `adcc` could not be found, despite its inclusion in the build environment step. Sorry Lori, but I'm relying on you to solve this one. I have no idea how to isolate the dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069:244,depend,dependency,244,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069,1,['depend'],['dependency']
Integrability,"Not quite on the L2 conversion -- there's still https://github.com/psi4/psi4/pull/2473 awaiting bug diagnosis https://github.com/evaleev/libint/issues/242 . That said, #2473 isn't touching onebody.h/cc, so the message may indeed be defunct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3025#issuecomment-1677835469:210,message,message,210,https://psicode.org,https://github.com/psi4/psi4/issues/3025#issuecomment-1677835469,1,['message'],['message']
Integrability,"Not sure what you exactly mean. Setting vv10_b in the superfunctional is straightforward. I followed what was done for the LRC omega. . Ideally the user has not do anything for the pre-defined functionals once I get the -nl dashparam to work. The manual setting is more for developers who want to fit the vv10_b for a new functional. Using DFT-NL should be like using DFT-D. Having the vv10 integrator exposed to python and supplying a user-defined density would be nice. And for a post-scf VV10 correction that is probably the way to go for the scfitertopy implementation. Though this pybind is currently a level too much for me, i dont even understand the errors i get. Small steps for me ;-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364091920:391,integrat,integrator,391,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364091920,1,['integrat'],['integrator']
Integrability,Not sure what's going on. In your `/Users/crawdad/psi4/bin/psi4` do you have lines like https://github.com/psi4/psi4/blob/master/psi4/run_psi4.py#L142-L144 in there? The `KeyError` that's being raised is handled in the lines following. Could you also add a `print(args)` before the error and paste the results in (from your error message above the KeyError is raised near line 110)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258684467:330,message,message,330,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258684467,1,['message'],['message']
Integrability,Note that rewriting of hard-coded paths in binary and rpath (even if new path is longer) is one of conda's great and routine features. Just FYI that this issue is to suit developers convenience.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235922678:117,rout,routine,117,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235922678,1,['rout'],['routine']
Integrability,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:133,message,message,133,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,3,['message'],['message']
Integrability,"Numpy `.so` that links BLAS can be found at `python -c ""import os; import numpy as np; print(os.path.dirname(np.__file__))""` + `/numpy/core/multiarray.*.so`. Where the star depends on your python installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387923462:173,depend,depends,173,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387923462,1,['depend'],['depends']
Integrability,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:157,message,messages,157,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,1,['message'],['messages']
Integrability,"OK, I had only run the default 50 steps. On Wed, Mar 30, 2016 at 9:53 AM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Thats very odd, I get a failure; > at a large number of steps for both SCF and DFT. I guess you can consider; > that this doesn't identify the TS, but it should still fail with a; > understandable error message.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203471756",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203487706:366,message,message,366,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203487706,1,['message'],['message']
Integrability,"OK, I have finally managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:132,message,messages,132,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,1,['message'],['messages']
Integrability,"OK, I understand. In that case, maybe writing your own wrapper around HDF5 for temporary files would be a better option, because you would be able to pass strings to functions to specify the data you manipulate, while in TREXIO we have different functions for different data. So creating a new intermediate in the code would be straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396201059:55,wrap,wrapper,55,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396201059,1,['wrap'],['wrapper']
Integrability,"OK, another change of plan. The only reason to symmetrize the response terms is to be able to use JK instances that use symmetry under the hood (which, AFAIK, is only `OUT_OF_CORE`). I'm half way through doing this, but it makes the code very messy and I only just realized that `OUT_OF_CORE` can't even handle non-symmetric density matrices. I think the best plan at this point is for me to abandon the symmetrization, clean the code up, squash the last few commits and add a py-side error message if `OUT_OF_CORE` is requested. Does anybody disagree? If more important integral technologies were affected, I'd say we go ahead an symmetrize. As it is, we'd be introducing a lot of messy code, just to cover an unimportant corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234048374:491,message,message,491,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234048374,1,['message'],['message']
Integrability,"OK, then I suggest that for all cases where we're switching basis sets, we should do a `clean()` - it's done in the CBS routine which is used for `energy()` and `gradient()` (as the CBS routines can handle ""method/basis"" syntax), we might as well do it for `properties()`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562043:120,rout,routine,120,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562043,2,['rout'],"['routine', 'routines']"
Integrability,"OK. I'm also not sure about the automatic root following bit... If the energy has converged, the Fock gradient *has to* be small, since it is the orbital gradient. This is if you use DIIS. If, however, you use orbital rotation techniques with gradient descent methods, this can happen in case the preconditioning isn't working properly. But even in such cases most chemical models don't cause problems; it's orbital-dependent models that tend to be hairy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-450748956:416,depend,dependent,416,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-450748956,1,['depend'],['dependent']
Integrability,"OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater rad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:5209,depend,dependencies,5209,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['depend'],['dependencies']
Integrability,"Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997413176:117,interface,interface,117,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997413176,1,['interface'],['interface']
Integrability,"Oh yea, this need to have a double split so that original line breaks are kept.; ```python; lines = []; for x in msg.splitlines():; lines.extend(wrap(x, linewidth).splitlines()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334:145,wrap,wrap,145,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334,1,['wrap'],['wrap']
Integrability,"Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. If true, numpy is really calling the system BLAS instead of MKL, and perhaps the instability resides in there? Is there a way we can link psi4 to MKL in the conda build, to test this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311736829:125,depend,dependencies,125,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311736829,1,['depend'],['dependencies']
Integrability,"Oh, I see the problem: the mixing happens in `form_C` but SADNO doesn't call that routine in the zeroth iteration. I'm working on a guess agnostic fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016685742:82,rout,routine,82,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016685742,1,['rout'],['routine']
Integrability,"Oh, here's the full debuginfo. ==12645== Process terminating with default action of signal 11 (SIGSEGV); ==12645== Access not within mapped region at address 0x0; ==12645== at 0x11C73A9: psi::scfgrad::SCFGrad::compute_gradient() (scf_grad.cc:330); ==12645== by 0x11BF3EC: psi::scfgrad::scfgrad(psi::Options&) (wrapper.cc:16); ==12645== by 0x67BD9E: py_psi_scfgrad() (python.cc:177); ==12645== by 0x682F96: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (invoke.hpp:75); ==12645== by 0x31C2429AAA: boost::python::objects::function::call(_object_, _object_) const (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2429CC7: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2432C4A: boost::python::handle_exception_impl(boost::function0<void>) (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2427F84: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x3D50849C0D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508D9582: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508DDCBE: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D5086DA36: ??? (in /usr/lib64/libpython2.7.so.1.0)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/6#issuecomment-17472943:310,wrap,wrapper,310,https://psicode.org,https://github.com/psi4/psi4/issues/6#issuecomment-17472943,1,['wrap'],['wrapper']
Integrability,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205319180:23,message,message,23,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180,1,['message'],['message']
Integrability,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332340271:859,bridg,bridge,859,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271,1,['bridg'],['bridge']
Integrability,"Ok, I agree with your idea @dgasmith. I'll make sure the RHF stuff is working properly (I think there's still a small bug in the spherical harmonic hessians) and we can probably close this one out when all is working and more tests are added. I know you're both busy, but if you get a chance could you take a look at `tests/scf-hess1` and see if you have any recommendations about implementing the call into the `frequencies` wrapper, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230570771:426,wrap,wrapper,426,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230570771,1,['wrap'],['wrapper']
Integrability,"Ok, I have a PR to this branch that fixes it. Here's some information for those reviewing. The code that's causing the issue is the stuff that handles symmetry-dependent input arrays, such as DOCC, SOCC, making sure that they are mapped correctly if the molecule is displaced to a lower symmetry point group. The dimension `nirreps` is the current (displaced) symmetry and may be lower than the parent symmetry `nirreps_ref`. The problem came from re-use of the arrays that handle docc and frozen orbitals. In the first step they are read from wfn (which relays the info in the reduced symmetry so no mapping is needed). Then, after accumulating the info from wfn, the same arrays are used to query the input file, which has the full dimensions so the arrays should be resized. @raimis correctly identified the mismatch in the dimensioning and his idea of increasing the dimensions to `nirreps_ref` is correct; the conversion routine just doesn't do this correctly without reading past the end of the wfn's reduced dimension arrays. This fix just handles the wfn quantities first, then resizes for the mrcc parsing step. There are a few comments in there to help clarify what's happening. I think this section just failed to keep up with the many changes to how wfn handles things over the last decade. Thanks very much for your help, @raimis .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965:160,depend,dependent,160,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462803965,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:77,interface,interface,77,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['interface'],['interface']
Integrability,"Ok, I tested it and it's a piece of cake. I'll save the info in Molden format and change the script for VMD to use this interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-285471455:120,interface,interface,120,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-285471455,1,['interface'],['interface']
Integrability,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223826600:341,interface,interface,341,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600,1,['interface'],['interface']
Integrability,"Ok, I've a better theory of What's Going Wrong — it can't find `iomp5`. Try . (1) hinting it with `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/dir/containing/iomp5/`. (2) uncommenting all those `#message` in https://github.com/psi4/psi4/blob/master/external/common/lapack/FindMathOpenMP.cmake#L39-L67",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396741289:187,message,message,187,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396741289,1,['message'],['message']
Integrability,"Ok, I've cleared up the last two missing items.; - [x] user dft dicts `dft_functional={..., 'dispersion': {...}}` now work. they go through the same route, but the pieces are treated a little differently. ""params"" are the final say -- the user option `DFT_DISPERSION_PARAMETERS` has no effect. ""name"" and ""citation"" aren't ""blessed"" like the official ones, so they're not going to get printed unless they match official ones. I think that's reasonable -- don't want to be printing citations unquestioned.; - [x] now tracing citations again. see below for examples. always printing the disp level citation. printing the dash param citation if available (not listed for many common functionals. No opportunity for user-defined citation. It can be put it, but I didn't see the point of trusting unverified values.; - [x] put in a few more checks that'll catch some problems when adding new official fctl dictionaries.; - [x] renamed some files based on slack discussion. ```; ================================================================================; => DLDF+D09: Empirical Dispersion <=. Podeszwa and Szalewicz Dispersion Correction; Pernal, K.; Podeszwa, R.; Patkowski, K.; Szalewicz, K. (2009), Phys. Rev. Lett., 103: 263201. s6 = 1.000000. ================================================================================; => OTPSS-D: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799; Parametrisation from: L. Goerigk, S. Grimme, J. Chem. Theory. Comput. 6, 107-126, 2010. s6 = 1.000000; alpha6 = 20.000000; sr6 = 1.150000. ================================================================================; => Custom: Empirical Dispersion <=. Grimme's -D2 Dispersion Correction; Grimme, S. (2006), J. Comp. Chem., 27: 1787-1799. s6 = 2.750000; alpha6 = 20.000000; sr6 = 1.100000. ================================================================================; ```. Also been rebased. Windows is failing b/c it's downloading py27. I'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307:149,rout,route,149,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-426866307,1,['rout'],['route']
Integrability,"Ok, checked a AM=4 from the current state against a pre-CMakeRewrite AM=4. Conclusion, we're dealing with the same-sized library.; - `libint.h` and `libderiv.h` identical; - generated libint and libderiv file lists identical. Nevertheless, there _is_ a problem. The AM catches in libmints/eribase.cc are up for discussion; - AM=4, as-is: 'quick' all pass. 'full' all but the usual ones pass but only irc (deriv catch) cases report a ERI AM problem; - @andysim changed all the checks recently from `>=` to `>` in https://github.com/psi4/psi4/commit/fb42b53e3aec742cf0c45b7ff3c35f4051b77b81#diff-911b4dff3a9d02cf3541610b10f56ea3L1811; - If I change the _energy_ check back to `>=` and build as AM=4, cbs-xtpl-wrapper and dft-b2plyp (both int catches) join the irc tests in reporting ERI AM problems. So they're fixed by undoing the comparison change.; - But there are still some tests (scf11-freq-freom-energies, fd-freq-energy-large, opt-lindep-change) that fail at AM=4 _without_ reporting an ERI error, in fact they just quit after `=> Auxiliary Basis Set <=` block, yet these tests work just fine with AM=5, so their problem (a) is a AM one and (b) was reported as a AM one pre-CMakeRewrite. So, (1) what led to those changes to the AM comparisons, Andy, and is it possible you're more confident about one than about all? (2) What else are we not comparing right to still have lindep-change, etc. broken?. Ryan, add the '=' back, and in practical terms, you should be back in business.; For the future, irc test cases are failing for me (once they have sufficient AM), probably because they're not playing nicely with the analytic Hessian. Get @avcopan to investigate once code is in a more useable state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240647129:707,wrap,wrapper,707,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240647129,1,['wrap'],['wrapper']
Integrability,"Ok, now I am on . ```; commit 35ed00607bd31a3fe5668ce6f1aae70c9c28b436; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:270,interface,interfaces,270,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,5,['interface'],['interfaces']
Integrability,"Ok, thank you Susi. @loriab I see that you have added a synchronization step in AIOHandler::write, see former commit id c205621. Do you remember the reason for that ? As far as I can remember, the way AIOHandler is designed we should never need a synchronization here. @jturney From the git history, the error message Susi is seeing was added by you during KTB. Do you remember why you put it there ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277502940:56,synchroniz,synchronization,56,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277502940,3,"['message', 'synchroniz']","['message', 'synchronization']"
Integrability,"Ok, the only non-invasive way I see around this is the below in the main CM file (change primary language as needed):. ```; if(CMAKE_CXX_COMPILER_ID MATCHES Intel); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); else(); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-march=native"" ""-xHost"" ""/arch:AVX2""); endif(); ```. For Intel, `-march=native` might be a near approximation to `-xHost`, but I'd rather use the latter official flag.; Do you want to try this out for Libxc, @susilehtola?. I observed another problem that when conda compilers are present and `-DCMAKE_CXX_COMPILER=icpc` passed, that the `-fno-plt` set in the envvar `CXXFLAGS` by conda env activation was unsupported by Intel and so triggered all three `ENABLE_XHOST` options to fail unless `CXXFLAGS=` explicitly cleared/set beforehand. I had deliberately _not_ made psi4 CMake dependent on envvars, but it looks like CMake started doing that in 3.10, hmpf. https://cmake.org/cmake/help/v3.10/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854:1031,depend,dependent,1031,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854,1,['depend'],['dependent']
Integrability,"Ok, this has been rebased and a lot of the internal CI commits have been squashed. It's now in pretty good working order. Remaining reservations:. * `qcel.constants` interface may still change; * snsmp2 only works if you pull from my branch (which CM is set up to do; but snsmp2 conda pkg won't work) b/c they use psifiles and physconst. I patched those up, of course, but I don't want to send that PR to RMcG until we're sure about the interface.; * ionization tests still seem fragile. the dftd3-dft-bench-ionization works with CI but not for me locally. Even with these, I think it's pretty much RTG. Glad to hear arguments against or arguments about want qcelemental conda pkg first. #### Note that this _does_ add qcelemental dependence, whereas the previous codata 2014 one didn't (that just used qcelemental-generated data added to _this_ repo).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1234#issuecomment-426084025:166,interface,interface,166,https://psicode.org,https://github.com/psi4/psi4/pull/1234#issuecomment-426084025,3,"['depend', 'interface']","['dependence', 'interface']"
Integrability,"Ok, this one's been rebased and is ready for review. Many thanks to @loriab for the help integrating the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1382#issuecomment-445559926:89,integrat,integrating,89,https://psicode.org,https://github.com/psi4/psi4/pull/1382#issuecomment-445559926,1,['integrat'],['integrating']
Integrability,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:614,wrap,wrap,614,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259,2,"['message', 'wrap']","['message', 'wrap']"
Integrability,"Okay, I've updated the body of this issue with five SCF outputs that fail to converge with the default `INTS_TOLERANCE` (1e-12), but do converge when `INTS_TOLERANCE` is explicitly set to 0.0. All calculations were done with a clean version of psi4 master (the previous outputs were with a psi4 branch containing commits from an unrelated project). @susilehtola yes, that is the relevant commit in which the default `INTS_TOLERANCE` changed. I agree that the new default appears conservative enough, and I'm surprised such a small threshold has this kind of effect, even for a large, diffuse basis set. Do you know of any integral screening protocols specific to diffuse functions?. @hokru your observation that some virtual orbitals have negative energies is true for all zero-screening outputs. Would this imply that the SCF solution is not the global minimum? I don't have any specifics about these structures, they're part of a large dataset for a ML project. However, they all look relatively ordinary. @JonathonMisiewicz Your observation that `INTS_TOLERANCE` has a large effect on the very first SCF iteration also is true of all five outputs. In the second example, the first SCF iteration differs between the two outputs by almost four(!) hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779545622:641,protocol,protocols,641,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779545622,1,['protocol'],['protocols']
Integrability,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139102907:291,rout,routines,291,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907,1,['rout'],['routines']
Integrability,"On the SAPT wavefunction: right now, we do not know what SAPT should return. I see that you have added an error message reading ""SAPT incomplete wavefunction is only dimer SCF"", which is a bit confusing because at first I thought SAPT had a problem _reading_ the wavefunction in. Maybe a message reading ""SAPT returns incomplete wavefunction, only dimer SCF"" would be better. Also, I don't think SAPT can meaningfully return a wavefunction, at least not in its current state... Do you think it would be better if methods like that just returned an empty structure or the equivalent of a NULL pointer in Python ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184846709:112,message,message,112,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184846709,2,['message'],['message']
Integrability,"On the `exception.message`, change https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L3934 from `== False` to `is False`, then run cepa2. You should get an exception that doesn't have a message, so it throws another exception. On the Cons, yes, there are rather more kept errors than I would have expected. We can ignore them more broadly in `.flake8` if we choose, including all line lengths and imports not used. The noqa for things like VARH don't bother me too much. On the overriding a single error, yes, would have to insert to ignore code fairly promptly to keep getting good results. I've had the driver to within a few chosen exceptions of pep8 compliant, so maintaining it as such I don't think is too onerous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263290760:18,message,message,18,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263290760,2,['message'],['message']
Integrability,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234668387:941,interface,interface,941,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387,1,['interface'],['interface']
Integrability,"One final logistical point before I head off for the night: my current plan is to make these changes and commit those. If you are willing to add `occ`/`dfocc` documentation and docstring changes to your to-do list, I say we can call this PR a wrap so I can slay the behemoth that is orbital convergence. If you don't have time for that, I can take documentation on, but that will delay getting orbital convergence fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581087208:243,wrap,wrap,243,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581087208,1,['wrap'],['wrap']
Integrability,"One thing I found before I decided to drop looking into this personally:; Psi rotates the orbitals [pairwise](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/stability.cc#L269). My experience with orbital optimization says the correct thing to do here is multiply the coefficient matrices by a matrix exponential of the unstable vector, and that the current approach will lead to different orbitals depending on what order you apply the pairwise rotations in. It's probably worth reexamining why this pairwise approach is justified, or confirming that it isn't. This calls to mind the Givens rotation approach from the old Sherrill-Krylov paper. And now back to other projects for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909:420,depend,depending,420,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909,1,['depend'],['depending']
Integrability,One thing to note about the c++ standard is that it is showing up on the command line twice. I'm almost certain that one is coming from pybind11 interface definitions (which might not be a good idea). . cd /home/ben/programming/psi4/build.reference/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /opt/intel2017/compilers_and_libraries_2017.1.132/linux/bin/intel64/icpc; -I/home/ben/programming/psi4/psi4.reference/psi4/include; -I/home/ben/programming/psi4/psi4.reference/psi4/src; -isystem /home/ben/programming/psi4/build.reference/stage/home/ben/programming/psi4/install.reference/include; -isystem /usr/include/python2.7 -xHost -qopenmp; -std=c++11 -O3 -DNDEBUG -fPIC -std=c++11; -o CMakeFiles/options.dir/print.cc.o; -c /home/ben/programming/psi4/psi4.reference/psi4/src/psi4/liboptions/print.cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281389274:145,interface,interface,145,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281389274,1,['interface'],['interface']
Integrability,"Ooh, I like option 2. Thanks for the suggestion! I guess most other packages don't have this problem because they don't generate Makefiles for you. Another solution could be using a relative path so that it always finds the include files relative to the binary, regardless of whether or not they are installed. I guess it depends on how you guys want users to run things. But I think in general, most users will be confused by the current behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-226007667:322,depend,depends,322,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226007667,1,['depend'],['depends']
Integrability,"Oops, I missed your comment. The old `addBasis` still works the same way, and the normalization associated with it is appropriate for external basis functions derived from density fitting. In QM/MM we normally want some Gaussians at different points in space, and in this case we want unit normalization so that the charges, dipoles, etc. specified don't need to be adjusted. Essentially there are two use cases, and I just added a new one here. Not really a bug fix, but also harmless if we want it in 1.4 - entirely up to you. It gives us a backend that can be tested for the multipole interface at least :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219:588,interface,interface,588,https://psicode.org,https://github.com/psi4/psi4/pull/2069#issuecomment-771874219,1,['interface'],['interface']
Integrability,"Opportunity to avoid Libxc5 surprises ourselves and help Libxc out by testing their new parameters interface: https://gitlab.com/libxc/libxc/-/merge_requests/284 . I'll get to it later this week, but if anyone wants to play with the p4/xc connection, go for testing. Ping me on any setup issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934:99,interface,interface,99,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934,1,['interface'],['interface']
Integrability,"Optimization flags come from [another source](https://github.com/AnacondaRecipes/aggregate/blob/master/ctng-compilers-activation-feedstock/recipe/conda_build_config.cos6.x86_64.yaml#L46), but yes, I see what you mean that they look to be clobbered. I can rebuild openblas locally to see if that helps. But I'd be surprised if there were fundamental accuracy errors in the openblas package that weren't noticed by the whole conda-forge-dependent community (where openblas is their default blas_impl) or conda defaults (which still has `nomkl` options)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840:435,depend,dependent,435,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840,1,['depend'],['dependent']
Integrability,"Origin aside, do I gather correctly that optking (or its successors; optking being the only visible consumer of the `.hess` file) isn't dependent on the `6` and if I could absorb the format into `FCMFINAL`, it'd be ok with your code, @psi-rking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381467223:136,depend,dependent,136,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381467223,1,['depend'],['dependent']
Integrability,P.S. Ignore most of my commit messages (I have too much fun when coding :)),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-932984324:30,message,messages,30,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-932984324,1,['message'],['messages']
Integrability,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:269,message,message,269,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785,1,['message'],['message']
Integrability,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:224,message,message,224,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915,1,['message'],['message']
Integrability,"PSIO errors are notoriously difficulty to understand, but my intuition is to say that this is a memory issue, if it's dependent on the size of the active space. What do you mean by ""I ask for 16gb memory on the cluster""? I'm not debugging your queuing system, but does that mean you're changing `psi4.set_memory(int(2e9))`? That looks closer to 1.6 than 16 GB.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900:118,depend,dependent,118,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660255900,1,['depend'],['dependent']
Integrability,"Pardon my asking and not looking at the code and `timer.dat`s, but right now we always calc the ind-exch(s^2) and disp-exch(s^2) and optionally the (s^inf) variants if requested by `DO_IND_EXCH_SINF` and/or `DO_DISP_EXCH_SINF`, right?. This arrangement is great for probing the terms, but does it make sense to define a route whereby the s^2 terms are skipped, the s^inf terms computed instead and `energy(sapt0)` returns the inf totals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252:320,rout,route,320,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-458285252,1,['rout'],['route']
Integrability,"Pass [these](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L40-L42) in via `cmake -DPYTHON_EXECUTABLE=/such/and/such/python -DPYTHON...`. Note that one can use conda to get a head start on dependencies like cmake, Libint, libxc, python, etc. (http://psicode.org/psi4manual/master/conda.html#faq-psi4deps). Also math libs, though they haven't made it into docs yet. But you seem to have the build under control. `otool -L` looks fine, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316421062:199,depend,dependencies,199,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316421062,1,['depend'],['dependencies']
Integrability,"Passed 15.79 sec; Start 213: mints1; 395/412 Test #310: pywrap-molecule .................. Passed 15.68 sec; Start 410: skeletonscf; 396/412 Test #335: scf3 ............................. Passed 16.05 sec; Start 240: numpy-array-interface; 397/412 Test #383: psi4numpy-rhf .................... Passed 16.60 sec; Start 175: docs-bases; 398/412 Test #217: mints5 ........................... Passed 15.35 sec; Start 216: mints4; 399/412 Test #212: mcscf3 ........................... Passed 15.82 sec; Start 309: pywrap-db3; 400/412 Test #213: mints1 ........................... Passed 14.72 sec; Start 176: docs-dft; 401/412 Test #210: mcscf1 ........................... Passed 15.82 sec; Start 209: matrix1; 402/412 Test #410: skeletonscf ...................... Passed 15.75 sec; Start 365: options1; 403/412 Test #175: docs-bases ....................... Passed 14.47 sec; Start 403: json-schema-1-throws; 404/412 Test #216: mints4 ........................... Passed 14.79 sec; Start 88: cepa1; 405/412 Test #240: numpy-array-interface ............ Passed 15.57 sec; 406/412 Test #309: pywrap-db3 ....................... Passed 14.49 sec; 407/412 Test #209: matrix1 .......................... Passed 15.24 sec; 408/412 Test #176: docs-dft ......................... Passed 16.24 sec; 409/412 Test #365: options1 ......................... Passed 13.68 sec; 410/412 Test #403: json-schema-1-throws ............. Passed 13.62 sec; 411/412 Test #88: cepa1 ............................ Passed 16.51 sec; 412/412 Test #319: sapt4 ............................ Passed 1885.78 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 85.75 sec*proc (2 tests); autotest = 1081.30 sec*proc (26 tests); cart = 14263.36 sec*proc (123 tests); cas = 59.52 sec*proc (1 test); casscf = 245.49 sec*proc (11 tests); cbs = 978.44 sec*proc (11 tests); cc = 5456.09 sec*proc (65 tests); cdomp2 = 39.91 sec*proc (2 tests); cepa = 180.93 sec*proc (7 tests); ci = 233.38 sec*proc (8 tests); cisd = 294.07 sec*",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:38061,interface,interface,38061,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['interface'],['interface']
Integrability,Passed 3.04 sec; Start 241: ocepa-grad1; 291/411 Test #283: opt-freeze-coords ................ Passed 2.87 sec; Start 314: sad1; 292/411 Test #108: dcft2 ............................ Passed 1.83 sec; Start 351: dft-reference; 293/411 Test #236: mpn-bh ........................... Passed 2.81 sec; Start 118: dfcasscf-fzc-sp; 294/411 Test #344: dfep2-1 .......................... Passed 2.76 sec; Start 3: casscf-fzc-sp; 295/411 Test #255: omp2p5-grad1 ..................... Passed 2.61 sec; Start 384: psi4numpy-rhf-hessian; 296/411 Test #314: sad1 ............................. Passed 2.30 sec; Start 137: dfmp2-grad4; 297/411 Test #269: opt3 ............................. Passed 3.64 sec; Start 120: dfccd1; 298/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.88 sec; Start 88: cepa2; 299/411 Test #241: ocepa-grad1 ...................... Passed 3.89 sec; Start 391: python-mints2; 300/411 Test #351: dft-reference .................... Passed 2.90 sec; Start 239: numpy-array-interface; 301/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.53 sec; Start 235: mp2-property; 302/411 Test #239: numpy-array-interface ............ Passed 0.65 sec; Start 388: python-curve; 303/411 Test #120: dfccd1 ........................... Passed 1.64 sec; Start 253: omp2p5-1; 304/411 Test #3: casscf-fzc-sp .................... Passed 3.57 sec; Start 119: dfcasscf-sp; 305/411 Test #88: cepa2 ............................ Passed 2.64 sec; Start 130: dfmp2-2; 306/411 Test #137: dfmp2-grad4 ...................... Passed 3.41 sec; Start 139: dfomp2-1; 307/411 Test #253: omp2p5-1 ......................... Passed 1.33 sec; Start 136: dfmp2-grad3; 308/411 Test #391: python-mints2 .................... Passed 2.45 sec; Start 284: props1; 309/411 Test #388: python-curve ..................... Passed 2.06 sec; Start 116: ao-dfcasscf-sp; 310/411 Test #119: dfcasscf-sp ...................... Passed 1.71 sec; Start 135: dfmp2-grad2; 311/411 Test #235: mp2-property ..................... Passed 2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:27999,interface,interface,27999,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['interface'],['interface']
Integrability,Passed 32.49 sec; Start 229: mp2-grad2; 219/411 Test #225: mom .............................. Passed 5.76 sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 233: mp3-grad1; 223/411 Test #229: mp2-grad2 ........................ Passed 3.96 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 4.67 sec; Start 235: mp2-property; 225/411 Test #231: mp2p5-grad1 ...................... Passed 6.26 sec; Start 236: mpn-bh; 226/411 Test #232: mp2p5-grad2 ...................... Passed 6.64 sec; Start 237: nbody-he-cluster; 227/411 Test #226: mp2-1 ............................ Passed 12.37 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 4.88 sec; Start 239: numpy-array-interface; 229/411 Test #235: mp2-property ..................... Passed 3.31 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 241: ocepa-grad1; 231/411 Test #236: mpn-bh ........................... Passed 4.34 sec; Start 242: ocepa-grad2; 232/411 Test #241: ocepa-grad1 ...................... Passed 11.81 sec; Start 243: ocepa1; 233/411 Test #238: nbody-intermediates .............. Passed 18.27 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 5.53 sec; Start 245: ocepa3; 235/411 Test #219: mints-benchmark .................. Passed 41.71 sec; Start 246: omp2-1; 236/411 Test #110: dcft4 ............................ Passed 423.92 sec; Start 247: omp2-2; 237/411 Test #246: omp2-1 ........................... Passed 4.28 sec; Start 248: omp2-3; 238/411 Test #204: frac-ip-fitting .................. Passed 69.19 sec; Start 249: omp2-4; 239/411 Test #247: omp2-2 ........................... Passed 16.82 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:21315,interface,interface,21315,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['interface'],['interface']
Integrability,"Per this [discussion](http://forum.psicode.org/t/numpy-psi4-dependency/199), there was talk of requiring numpy. However, I can't seem to find the announcement of it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225172815:60,depend,dependency,60,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225172815,1,['depend'],['dependency']
Integrability,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307880460:229,contract,contractions,229,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460,2,['contract'],['contractions']
Integrability,"Playing around with absolute errors between finite difference and analytical for a UKS water cation (mean/max):; ```; # Cation Water; B3LYP - 0.000005 / 0.000019; TPSS - 0.000259 / 0.001291; TPSS - 0.000264 / 0.001321 # (150, 434) ; M05 - 0.001182 / 0.006572; ```. Big kick from GGA -> MGGA as commented. Now what if we run UKS and RKS gradients on a neutral molecule:; ```; # Neutral Water; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000024; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000091; ```. So now we know pretty much that the XC input and output is correct, the integration of the XC data to gradient is correct, and that the normal XC data to AO gradient integration is correct. With this knowledge we are left with a single piece of code that could be [wrong](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/v.cc#L2477-L2496). We therefore spot the error (a good exercise before looking at the answer) and we now get the following:. ```; # Cation Water - fixed; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000028; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000050; ```. This makes me happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-384487129:595,integrat,integration,595,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-384487129,2,['integrat'],['integration']
Integrability,"Please let us know how you installed Psi4. In particular, we need to know the version number that should appear in the header of your input file. @loriab, I hate to keep pinging you on things, but I feel that the CFOUR interface is your department.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126:219,interface,interface,219,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126,1,['interface'],['interface']
Integrability,Please take a look at [this message](https://github.com/psi4/psi4/pull/644#issuecomment-286609790). I think you've got the same problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/585#issuecomment-286612538:28,message,message,28,https://psicode.org,https://github.com/psi4/psi4/pull/585#issuecomment-286612538,1,['message'],['message']
Integrability,"Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553:24,message,message,24,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553,1,['message'],['message']
Integrability,Possible fixes for the angular momentum and contraction coefficients are here:. https://github.com/psi4/psi4/compare/master...PeterKraus:ecp_fix,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926#issuecomment-370134225:44,contract,contraction,44,https://psicode.org,https://github.com/psi4/psi4/issues/926#issuecomment-370134225,1,['contract'],['contraction']
Integrability,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:116,depend,depending,116,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,2,['depend'],['depending']
Integrability,"Posting Dom's very nice summary for easier perusal and searchability. Effective `scf_type df` Testing: `mem_df` & `disk_df`; =====================================================. All tests listed below examine calls to both `energy()` and `gradient()` when; employing the `scf_type mem_df` and `scf_type disk_df` settings. Each test; employs a different model chemistry (indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:531,message,message,531,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['message'],['message']
Integrability,"Pretty much anything that is global should be on its way out. . I haven't quite figured out how to rationalize two objects that are connected, but are separate entities yet. Currently I have just been appending the object to the Wavefunction python-side:. ``` python; def prop(wfn, ...):; oeprop = psi4.OEProp(wfn, ...); wfn.oeprop = oeprop; return wfn; ```. This works, but you get a vague attribute not found python message if the wavefunction does not have an oeprop object. We can go through and add `None` types for all of these attributes, but that doesn't really work long term.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234665928:418,message,message,418,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234665928,1,['message'],['message']
Integrability,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178853828:513,wrap,wrappers,513,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828,2,['wrap'],['wrappers']
Integrability,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274087513:381,depend,dependency,381,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513,3,['depend'],['dependency']
Integrability,QCEngine support would be great for a general interface and access to all the LNO and F12 goodies!. The PSI4 (and I suspect also ORCA and Molpro) interface is a bit different in the sense that those programs compute the integrals and hand them over to MRCC for arbitrary order CC(n) type of calculations. Dates back to when MRCC was essentially only doing that. . Not sure how much use the (broken) 'classic' interface has.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1092765492:46,interface,interface,46,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1092765492,3,['interface'],['interface']
Integrability,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:187,interface,interface,187,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151,1,['interface'],['interface']
Integrability,"Rebase is done!. > Right, internal build, by adding `ENABLE_gauxc=ON` about here: https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L135 . And please check there's a gauxc test somewhere in ctests or pytests that runs with smoke or quick -- the ones I noticed were marked long. Thanks for the heads-up! There were no smoke/quick tests for the GauXC interface, so I tagged a couple of the tests in `test\_compositejk.py` as such. The Azure file was updated, as well. . Let's see how the CI responds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2278146048:383,interface,interface,383,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2278146048,1,['interface'],['interface']
Integrability,"Rebased and pushed, some timings en route.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-316501447:36,rout,route,36,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-316501447,1,['rout'],['route']
Integrability,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/132#issuecomment-121991365:397,message,message,397,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365,6,['message'],['message']
Integrability,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-123019591:1199,interface,interfaces,1199,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591,1,['interface'],['interfaces']
Integrability,"Regarding the general case `MultipoleInt` vs. special routines like `DipoleInt`. Keep in mind that asking for `MultipoleInt`s with order=2 will give overlap, dipole, quadrupole. Asking for `QuadrupoleInt`s will only give quadrupoles. Computing the extra integrals isn't really a big deal in terms of efficiency, but it might be a little surprising for the user to find that the indexing doesn't start from zero. The current quadrupole integral implementation just calls Libint2 and picks out only the quadrupole components. Going with only MultipoleInts is better for maintenance, but changes the API and could lead to some surprises. However, there isn't really any efficiency penalty for doing that, so I don't really have a strong opinion either way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077806309:54,rout,routines,54,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077806309,1,['rout'],['routines']
Integrability,Relativity does add some further complications into the mix. IIRC the X2C transform would have to be computed differently. (Whether it's an electric or magnetic field depends on the frame!),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558061727:167,depend,depends,167,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558061727,1,['depend'],['depends']
Integrability,"Removed the DETCI refs from the docs table, and in select ccsd. . I also updated occ psivars. It was setting `CURRENT CORRELATION ENERGY` for `{df/cd}-ccsd(t)` but it was not setting `CCSD(T) CORRELATION ENERGY`. The test now runs through a more complete set of cross checking. Testing conv (fnocc, ccenergy) and df/cd (fnocc, occ) both with and without frozen core. . Note: The changes to occ required a rebuild, and I am noticing when doing df/cd (either occ or fnocc module) I get a message printed to `stdout`""No atoms detected, returning"". Are we aware of this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827387:486,message,message,486,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827387,1,['message'],['message']
Integrability,Reopening because; > Someone more familiar with the GDMA interface than myself should look into how to fix psi4 so that this workaround isn't necessary.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228661577:57,interface,interface,57,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228661577,1,['interface'],['interface']
Integrability,"Reproach well deserved, @jgonthier. Info has been in [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L71), but that admittedly is an awful error message. I've figured out how to hit it locally (conda directory structure bypasses it all), and a fix will appear soon to a PR near you. Thanks for the report. @edeustua, `-DOpenMP_LIBRARY-DIRS` probably _is_ the intended solution. The usual case where this issue appears is you're building Psi with GCC compilers and MKL LAPACK. For a usual from-intel (as opposed to from-conda) MKL installation, libraries mkl_rt and iomp5 are in different locations. With GCC+MKL, Psi needs to explicitly use iomp5 to suppress the tenacious gomp. But unless the location of iomp5 is already known to CMake through another detection sequence, it can't find the library, hence the (poor) error message you got. `OpenMP_LIBRARY_DIRS` is the intended solution. If I'm misunderstanding your circumstance, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976:170,message,message,170,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976,2,['message'],['message']
Integrability,"Right, Ed's SAPT's CPHF still prints E but no longer considers deltaE for convergence. (There's a few more notes on the Google Doc.) Austin's away -- I'll get this compiling. Was there another message (appears in my email) that got deleted on GH?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232261:193,message,message,193,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232261,1,['message'],['message']
Integrability,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:79,message,message,79,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684,1,['message'],['message']
Integrability,"Roberto, I could not find libpcm.so in /interfaces/lib. If I ran nm on all files I get:. ```; interfaces/lib/libgetkw.a(Getkw.cpp.o):; 000000000000eb18 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE10BOOL_ARRAY; 000000000000ea58 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3DBL; 000000000000ea38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3INT; 000000000000ea98 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3STR; 000000000000ea78 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4BOOL; 000000000000eab8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4DATA; 000000000000eaf8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9DBL_ARRAY; 000000000000ead8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9INT_ARRAY; 000000000000eb38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9STR_ARRAY; 000000000000ea18 b __ZGVZN5Getkw8readlineERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_19basic_istringstreamIcS3_NS0_9allocatorIcEEEEE3buf; U __ZN10GetkwErrorC1ERNSt3__119basic_ostringstreamIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; U __ZN10GetkwErrorD1Ev; 0000000000001e90 T __ZN5Getkw10popSectionEv; 0000000000001640 T __ZN5Getkw10setVerboseEb; 0000000000001a80 T __ZN5Getkw11pushSectionERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000002110 T __ZN5Getkw7readKeyEP7SectionRNSt3__113basic_istreamIcNS2_11char_traitsIcEEEE; 00000000000020d0 T __ZN5Getkw8convBoolERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000003af0 T __ZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 00000000000009a0 T __ZN5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171058175:40,interface,interfaces,40,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171058175,2,['interface'],['interfaces']
Integrability,SCAN is crazy grid dependent. You might need up to 500 radial points to get single points with microhartree accuracy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382448968:19,depend,dependent,19,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382448968,1,['depend'],['dependent']
Integrability,"Same here, just ; /edfs/users/deprince/software/psi4/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. > On Feb 27, 2018, at 11:34 AM, Robert T. McGibbon <notifications@github.com> wrote:; > ; > Any error message on the crash?; > ; > No.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/923#issuecomment-368940098>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGpwnGu_Xbo1lZTU4IJZALbsctYGNks5tZC6bgaJpZM4SPiMy>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940820:240,message,message,240,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940820,1,['message'],['message']
Integrability,See the newly generated `output.ref` for user-facing interface at default print level. I've manually checked print levels 2 and 3.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-759538205:53,interface,interface,53,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-759538205,1,['interface'],['interface']
Integrability,"Seems Psi4 and EMSL and libint are internally consistent, so the issue is to accept `.gbs` files that are truly Gaussian-style in AM labeling, not just Gaussian-style in format. Do you happen to know, @susilehtola, if G94 (a) does not skip any letters, such that EMSL and G94 are inconsistent for all AM >=7 or (b) skips a different letter so that EMSL and G94 are inconsistent only for AM==7? It sounds like (a), but I want to be sure. . I was only faintly aware that there was an ""L=l"" gbs format. Found [this](http://www.ccl.net/chemistry/resources/messages/1996/09/12.004-dir/) on it, so will investigate, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282107744:552,message,messages,552,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282107744,1,['message'],['messages']
Integrability,"Seems reasonable to me. We can inject the default parameters for the model parameters (``ga``, ``gc``, ``wf``) when we transform the parameters provided from *dftd4* to the qcng format. It might make sense to add them in the ``parameters.toml`` file in *dftd4* as well, not sure about that yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2121#issuecomment-1368077959:31,inject,inject,31,https://psicode.org,https://github.com/psi4/psi4/issues/2121#issuecomment-1368077959,1,['inject'],['inject']
Integrability,"Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; ...; -- Using CheMPS2: /theoryfs2/ds/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2348,depend,dependencies,2348,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,1,['depend'],['dependencies']
Integrability,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:1542,depend,dependent,1542,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,1,['depend'],['dependent']
Integrability,"Since `cppe` has its own Python interface now (which it did not when I started this PR), I guess there is no reason to interface with psi4 on the C++ layer?. I guess it would be much simpler wrt maintenance of the code to refactor everything and use the `cppe` Python interface directly. What do you think, @loriab, @dgasmith, @robertodr ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596:32,interface,interface,32,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596,3,['interface'],['interface']
Integrability,"Since nobody answered this yet, let me do so and bump this thread... You are right Lori, at present the s^2 variants are always computed, and the s^inf variants are computed in addition if the respective variables are True. As the new addition makes it possible to run complete SAPT0 without the s^2 approximation, it definitely makes sense to create a route that does exactly that, skipping the s^2 calculations altogether. However, it probably needs a new name (`energy('sapt0-sinf')` or similar) so the meaning of the standard and widely used `energy('sapt0')` is unchanged. It might also make sense to define new optional routes for higher-order SAPT that combine SAPT0-level s^inf exchange corrections with higher-level s^2 exchange corrections. I don't have a good name for such routes though: `energy('sapt2-sinf')` is not a good idea because it's not _all_ s^inf.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052:353,rout,route,353,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052,3,['rout'],"['route', 'routes']"
Integrability,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:408,interface,interface,408,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,2,['interface'],['interface']
Integrability,"So I've added the option to be able to run frequency calculations via the cbs interface, both using the `""method/basis""` and `frequency(cbs, ...)` syntax. I've added the tests for this too - I wanted to get a reference value for the `HF/cc-pV[DT]Z` extrapolation from other codes (thanks @hokru), but we failed to get it run correctly. When compared to large basis sets, one gets these results:. Freq 1 | Freq 2 | Freq 3 | zeta | RMS; -- | -- | -- | -- | -- ; 1809.246 | 3923.151 | 4020.177 | 2 |   174.1217 ; 1753.040 | 4126.975 | 4226.872 | 3 |    4.1162; 1750.381 | 4130.709 | 4230.122 | 4 |    1.4733; 1748.147 | 4130.445 | 4230.985 | 5 |    0.2300; 1748.003 | 4130.108 | 4230.827 | 6 |    ; 1747.741 | 4130.226 | 4230.575 | [dt] |   0.2207; 1749.876 | 4131.278 | 4230.490 | [tq] |   1.2899; 1747.595 | 4130.375 | 4231.193 | [q5] |   0.3520. I think the convergence is reasonable - it's clear the results (even with HF/[dt]) are not complete junk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-424317527:78,interface,interface,78,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-424317527,1,['interface'],['interface']
Integrability,"So be it, https://github.com/psi4/psi4/pull/348/commits/2fb0d6ba85dc30392cf2c2f2213244221160eae0 . I think that wraps this issue up. Will close it when the relevant docs get checked in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345#issuecomment-210979527:112,wrap,wraps,112,https://psicode.org,https://github.com/psi4/psi4/issues/345#issuecomment-210979527,1,['wrap'],['wraps']
Integrability,"So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions. Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; ```; SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; std::shared_ptr<BasisSet> bs3) {; auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; }; ```; and it is also revealed in the Python interface, which means that you should be able to call it. Hopefully someone else can tell how to fit all the pieces together.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063:402,wrap,wrapper,402,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:606,message,message,606,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684,1,['message'],['message']
Integrability,"Some comments for posterity:; * The Coulomb terms also come from the derivatives of two-electron integrals. You can (and for efficiency should) contract the TEI derivatives against the 1RDM to get the Coulomb terms. Conceptually, this is the interaction of an orbital with the mean field of all orbitals. It's not a pure one-electron interaction, but it's close enough.; * For purposes of thinking about the implementation, this issue is two very different ones: (1) exposing the existing pieces of the SCF gradient and (2) further decomposing those pieces into per-orbital contributions, where applicable. (1) is as easy as setting array variables on the wavefunction. Per-orbital contributions aren't even computed, as they shouldn't be in an efficient code, so (2) is non-trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091:144,contract,contract,144,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091,1,['contract'],['contract']
Integrability,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:991,contract,contracted,991,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763,1,['contract'],['contracted']
Integrability,"Somewhere I saw a question about whether psi4 in psi4conda could update. . tl;dr no, create a new environment instead, as you'll get the latest, and it's far more predictable. Technically, yes, `conda update psi4 -c psi4` should get you the latest stable release, v1.3.2 from mid-2019, or `conda update psi4 -c psi4/label/dev` should get you the latest nightly build from this week. However, practical advice is that whenever your psi4 is more than a few months old, don't update, just create a new environment, `conda create -n <env-name-of-your-choice> python=3.<python-version-of-your-choice> psi4 -c psi4/label/dev`, activate that env, and use that new psi4 instead of the (remaining, still functional) psi4 in the main environment of psi4conda. The reasons that a freshly solved environment is better is that: (1) Far upstream packages like mkl or numpy or hdf5 update over time and new psi4 may not be built against the older ones in the psi4conda env, so you don't get the newest psi. (2) To make psi4-served conda packages easy to use for both compiling and installing binary psi4, I don't pin dependencies very tightly, so the constraints of the env may not allow all the latest packages to be pulled or even a consistent set of packages. Same advice for any psi4 install, not just psi4conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944:1102,depend,dependencies,1102,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944,1,['depend'],['dependencies']
Integrability,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190956405:373,message,message,373,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405,1,['message'],['message']
Integrability,Sorry for taking so long:. ```; # define library; add_library(core STATIC ${CORE_SOURCE_FILES} ${CORE_HEADER_FILES}). # link dependencies; target_link_libraries(; core; ${Boost_LIBRARIES}; ${ICONV_LIBRARIES}; ${CORE_SYSTEM_LIBRARIES}; ). # This has been sufficient to enable C++11 for me. I should probably explicitly list; # the features I require.; target_compile_features(core PUBLIC cxx_constexpr); ```. Since I stated `PUBLIC` on the `target_compile_features` targets that depend on `core` will require that specific C++11 to be enabled.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-158770738:125,depend,dependencies,125,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-158770738,2,['depend'],"['depend', 'dependencies']"
Integrability,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225993854:818,interface,interface,818,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854,2,['interface'],['interface']
Integrability,"Sorry to get in on this kind of late, but that message:; >`...stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name typedef typename _Iterator::iterator_category iterator_category; ^`. Does seem vaguely familiar and I have not been able to get psi4 working on our clusters with intel-16.1. I have not tried recently though so if it would help you out at all @jgonthier I could try a build tonight and let you know what I see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288590352:47,message,message,47,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288590352,1,['message'],['message']
Integrability,"Sorry, @loriab, I didn't see your previous message announcing the cleanup and introduction of the new qmefp-puream test. I think it's all good as-is, but the folders qc-scfefp-sp1 and qc-scfefp-sp2 appear to not contain an input.dat. Should they be deleted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115#issuecomment-171512142:43,message,message,43,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171512142,1,['message'],['message']
Integrability,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:603,depend,dependent,603,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761,2,['depend'],"['dependency', 'dependent']"
Integrability,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:154,integrat,integration,154,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,3,['integrat'],"['integrate', 'integration']"
Integrability,"Sorry, I overlooked that statement in your original message. Note to self: learn to read bug reports more carefully in future",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311746162:52,message,message,52,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311746162,1,['message'],['message']
Integrability,"Sorry, I’m out of action due to serious illness so probably can’t be much help. I was working on derivatives but they were buggy. They should in theory be simple, but I don’t know when I’ll be in a position to get back to them. Sorry again :/. > On 7 Nov 2018, at 21:23, Andy Simmonett <notifications@github.com> wrote:; > ; > Description; > ; > This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine.; > ; > Todos; > ; > Notable points (developer or user-interest) that this PR has or will accomplish.; > ; > Improve the speed and stability of the ECP integrals.; > Questions; > ; > @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?; > Checklist; > ; > Make libecpint play nicely with our CMake infrastructure; > Write wrappers for ECP integral code, making the new code path optional for now; > Tests added for any new features; > Status; > ; > Ready for review; > Ready for merge; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/1340; > ; > Commit Summary; > ; > Import libecpint via CMake; > File Changes; > ; > M CMakeLists.txt (3); > M external/upstream/CMakeLists.txt (1); > A external/upstream/libecpint/CMakeLists.txt (57); > M psi4/CMakeLists.txt (9); > M psi4/psi4Config.cmake.in (2) ; > Patch Links:; > ; > https://github.com/psi4/psi4/pull/1340.patch; > https://github.com/psi4/psi4/pull/1340.diff; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371:887,wrap,wrappers,887,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371,1,['wrap'],['wrappers']
Integrability,"Sorry, didn’t mean to question the need for -fopenmp to compile the openblasusing program. Just concerned about this quote. . “AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.“. If that’s true and if other programs rely on openblas native threading, then the conda openblas can never be used for psi even after PR and rebuild. . Whereas if USE_OPENMP=1 only adds capabilities, there’s a plan forward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801:191,rout,routines,191,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801,1,['rout'],['routines']
Integrability,"Sounds good! @susilehtola's diagnosis of a badly behaved numerical functional sounds viable to me. He's more knowledgeable about how to treat such situations than I am. And yes, I'm starting to think I should amend the ADIIS/EDIIS error message to explicitly mention that something else is the usual culprit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323:237,message,message,237,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323,1,['message'],['message']
Integrability,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:452,contract,contracted,452,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331,2,['contract'],['contracted']
Integrability,"Stupid question, you do reuse integrals on the same shell, don't you? As in J. Chem. Phys. 2003, 118, 9481. The other issue is that for Cr2 the integrals are horribly slow probably because the integrals engine isn't taking advantage of the general contraction. E.g. cc-pVDZ is [20s16p8d2f|6s5p3d1f] for Cr so you'll end up doing a whole lot of extra work to get those integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224448359:248,contract,contraction,248,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224448359,1,['contract'],['contraction']
Integrability,Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505108492:134,rout,routines,134,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505108492,1,['rout'],['routines']
Integrability,"Summing up discussion from the conference call on Wednesday:; * This is a non-trivial bug to fix. The easy fix of removing `psio_` from the wavefunction won't work from DFOCC, as that is how DFOCC gets some of its integrals.; * DGAS is generally uneasy with changes to the wavefunction specification. The current plan is to put actual error messages instead of segfaults for the four aforementioned modules and leave this aside, otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470:341,message,messages,341,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-608613470,1,['message'],['messages']
Integrability,"Sure, I'm ok with that modification. On Fri, Feb 26, 2016 at 2:24 PM, Lori A. Burns notifications@github.com; wrote:. > If the above works, and you think it'd be helpful, I can edit; > https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to; > something like; > ; > ```; > elif reference == 'ROHF':; > if mtd_type == 'CONV':; > if module == 'DETCI': # no default for this case; > func = run_detci; > elif module in ['']:; > psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282#issuecomment-189441001.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282#issuecomment-189441755:584,rout,route,584,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441755,1,['rout'],['route']
Integrability,"Tagged `action-items-needed`. It isn't clear to me if there's anything that needs to be changed in `libmints`, or if we're just going to tell users to use the ddCOSMO interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-869213120:167,interface,interface,167,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-869213120,1,['interface'],['interface']
Integrability,"Technically, the problem is in the DFOCC module, not the OCC module. Thoughts, @bozkaya? The part that grabs my attention is the line `Memory requirement for CC contractions: -49826.57 MB`. Somehow, I doubt that negative memory is accurate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-560949511:161,contract,contractions,161,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-560949511,1,['contract'],['contractions']
Integrability,Test #314: sapt4 ............................ Passed 176.27 sec; Start 31: cc16; 15/401 Test #113: dcft8 ............................ Passed 344.19 sec; Start 275: opt14; 16/401 Test #354: tu6-cp-ne2 ....................... Passed 347.59 sec; Start 41: cc26; 17/401 Test #110: dcft5 ............................ Passed 355.89 sec; Start 276: opt-irc-1; 18/401 Test #112: dcft7 ............................ Passed 358.91 sec; Start 90: cepa-module; 19/401 Test #164: dft1 ............................. Passed 106.51 sec; Start 96: cisd-opt-fd; 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 Test #42: cc27 ............................. Passed 392.24 sec; Start 44: cc29; 22/401 Test #75: cc7 .............................. Passed 394.89 sec; Start 47: cc31; 23/401 Test #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69: cc52; 29/401 Test #96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting; 31/401 Test #19: cbs-xtpl-wrapper ................. Passed 62.39 sec; Start 166: dft1-alt; 32/401 Test #90: cepa-module ...................... Passed 125.09 sec; Start 343: sapt-dft2; 33/401 Test #236: ocepa-freq1 ...................... Passed 489.86 sec; Start 58: cc41; 34/401 Test #179: isapt2 ........................... Passed 46.85 sec; Start 366: dft-custom-dhdf; 35/401 Test #316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-de,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:3011,wrap,wrapper,3011,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['wrap'],['wrapper']
Integrability,"Testing if I can still send messages. This PR has shiny new features, by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-282393960:28,message,messages,28,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-282393960,1,['message'],['messages']
Integrability,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195957592:333,message,message,333,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592,3,['message'],['message']
Integrability,"Thank you for bring this to our attention! I was also able to recreate the bug using your example. I looked into it a little bit, and found something interesting. Particularly, it seems the presence of randomness is dependent on the size of the basis set. When one switches the basis set in your minimal example from STO-3G to STO-6G:. ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/sto-6g',; ```. One seems randomness in the final answer, but to a decreased amount:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.18948320502566343; -0.18948320502566343; -0.19856521894753998; -0.18948320502566343; -0.18948320502566343; -0.3347954277756876; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; ```. That said, the answer PK commonly converges to here seems wrong anyway, as using DIRECT leads to an answer of -0.47102563660383534 h, and DF leads to the close answer of -0.4711430783826256 h. . When switching to the 3-21G basis set:; ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/3-21g',; ```. Everything seems to look good:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element ; 1 --multiplicity 2; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; ```. Consistent answers, and closely matching the DIRECT energy of -0.4964017399788503 h. These findings lead me to suspect that the issue you pointed out here is due to PK having issues handling calculations with extremely small basis function counts. Regardless, I shall look into this more. Thank you again for bringing this to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896:216,depend,dependent,216,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896,1,['depend'],['dependent']
Integrability,"Thank you for fixing the gradient routines. Having PSI4 gradients will be really helpful. I am calling PSI4 in my QMMM calculations, so I will run through some of my pre-made test cases and look at extern1 to confirm that I am doing everything correctly. Thanks,; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184#issuecomment-156224641:34,rout,routines,34,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156224641,1,['rout'],['routines']
Integrability,Thank you for the explanation! I really like how dependencies become more explicit (greppable).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276181143:49,depend,dependencies,49,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276181143,1,['depend'],['dependencies']
Integrability,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40186517:582,message,message,582,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,Thank you. The input came from an xyz file sent to me and I hadn't thought to check it for errors.; But that psi4 error message would be much more helpful if translated into intelligible English.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283:120,message,message,120,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910170283,1,['message'],['message']
Integrability,"Thanks @PeterKraus, I'm pretty sure I was also trying all the guess algorithms but probably with the basis_guess also - annoying... -and that is probably the root of the problem -> basis_guess from non-ECP to ECP basis set. (@PeterKraus I have sent you a PM on forum.psicode.org on related/unrelated stuff, as there is no message option here on github?!?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432532178:322,message,message,322,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432532178,1,['message'],['message']
Integrability,"Thanks @andysim, I can do that name change. And I think the ""strictly Cartesian"" is still true. This is the way they are used in `psipcm.cc`:; ```; if (basisset_->has_puream()) {; D_carts = std::make_shared<Matrix>(""D carts"", basisset_->nao(), basisset_->nao());; D_carts->back_transform(D, my_aotoso_);; } else; D_carts = D;. ContractOverDensityFunctor contract_density_functor(ntess_, tess_pot_e_, D_carts);; // Add in the electronic contribution to the potential at each tessera; potential_int_->compute(contract_density_functor);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351198084:327,Contract,ContractOverDensityFunctor,327,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351198084,1,['Contract'],['ContractOverDensityFunctor']
Integrability,"Thanks @loriab for your detailed answer. In fact, I would like to do focal-point analyses for small molecules (including HF, MP2, CC, DBOC, and relativistic corrections) in a somewhat automated form. Psi4, which is able to execute MRCC and CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:374,rout,route,374,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['rout'],['route']
Integrability,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:879,message,message,879,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['message'],['message']
Integrability,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185833831:131,interface,interfaces,131,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831,1,['interface'],['interfaces']
Integrability,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:185,rout,routine,185,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075,1,['rout'],['routine']
Integrability,"Thanks for fixing that one! I have found another however which comes up when I request to save all wavefunction properties via QCEngine using the latest dev version of psi4, here is the error message.; ```; QCEngine Input Error: Traceback (most recent call last):; File ""/Users/joshua/miniconda3/envs/psi4/lib//python3.8/site-packages/psi4/driver/schema_wrapper.py"", line 410, in run_qcschema; ret = qcel.models.AtomicResult(**ret_data, stdout=_read_output(outfile)); File ""pydantic/main.py"", line 274, in pydantic.main.BaseModel.__init__\npydantic.error_wrappers.ValidationError: 1 validation error for AtomicResult\nwavefunction -> occupations_a; Return quantity scf_occupations_a does not exist in the values. (type=value_error); ```. I think this is related to the lines here which pulls out the occupations which have been commented out I am not sure if these simply need to be uncommented or if there is some formatting that needs to be worked out https://github.com/psi4/psi4/blob/670a85012a2864dd6673ac4a39243156205c500e/psi4/driver/schema_wrapper.py#L344. ccing @dgasmith in case he knows the status of this. @hokru could you please re-open this issue or should I make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946:192,message,message,192,https://psicode.org,https://github.com/psi4/psi4/issues/1987#issuecomment-719726946,1,['message'],['message']
Integrability,"Thanks for helping with that, Lori. I think the CMake and libmints integration tasks are pretty well separated at this point. The stuff I added to external was mostly placeholder so please overwrite at will - you have write access to my branch. It looks like some upstream changes to the CMake config file naming scheme might be needed, so I just decided to build a standalone lib and worry about integration later - therefore you won't be interfering with anything if you feel like changing the CMake stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421:67,integrat,integration,67,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421,2,['integrat'],['integration']
Integrability,"Thanks for looking into it. It looks like none of these involve `Array2d::diagonalize`, so this PR is good on that front. This PR does not touch `Matrix::diagonalize`, so those calls are safe from it. But, some `Tensor2d::diagonalize` calls would indeed fail after this PR. I think the easiest option here is to back out the removal of `Tensor2d::diagonalize` overloads for now. FYI, my plan was to _eventually_ change the function signature of `Tensor2d::diagonalize` after this PR. The `init_dim` and `cutoff` arguments have been defunct (as in no-op, unused) for ages. But that can wait until dfocc is no longer in such flux, I can excise `sq_rsp` while keeping the current interfaces.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378:677,interface,interfaces,677,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378,1,['interface'],['interfaces']
Integrability,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:142,integrat,integration,142,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,9,"['depend', 'integrat']","['depends', 'integrate', 'integration']"
Integrability,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20536164:213,interface,interface,213,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164,1,['interface'],['interface']
Integrability,"Thanks for testing!. The `No such TARGET` messages are nothing to worry about. I have it printing every language, but only the active/requested langs become part of `tgt::MathOpenMP`. Whoops on ambit. I must have been building with intel again. If you would, try adding https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L50 and https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L55 lines to https://github.com/psi4/psi4/blob/master/external/upstream/ambit/CMakeLists.txt . Unfortunately, the only way to test it running is to build the ambit template plugin. But just compiling is a start. For gpu_dfcc, I've built it with gcc54 and the rest of psi with gcc72. But there's no reason a pure gcc54 build shouldn't work. Fortunately, conda supplies both. I'm glad to tweak gpudfcc openmp if need be. I can only build, not run, so the setup may be lacking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712:42,message,messages,42,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712,1,['message'],['messages']
Integrability,"Thanks for the MVS bug fix, @susilehtola. I'll pull it over when it gets merged on GL. And for the tag, too. It'll be nice to have a one that includes Daniel's python interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383599351:167,interface,interface,167,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383599351,1,['interface'],['interface']
Integrability,"Thanks for the PR, Erica! I pushed some lines to the Azure CI so that einsums is enabled and your code has a chance of running :-) . It won't always be this ugly -- ultimately Einsums will be req'd. There's also a blas dependency detail (mkl=2022 vs. 2023) I need to work out to get rid of that openblas pkg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-1862153818:219,depend,dependency,219,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1862153818,1,['depend'],['dependency']
Integrability,"Thanks for the bug report! I knew there was no way I got that thoroughly right. Add `message(STATUS ""Detecting MathOpenMP -- ?OpenMP=${ENABLE_OPENMP}, ?MKL=${isMKL}, CXX=${CMAKE_CXX_COMPILER_ID}"")` near the top of https://github.com/psi4/psi4/blob/master/external/common/lapack/FindMathOpenMP.cmake and also uncomment the debug printing at the end of that file. Rerun the cmake to generate a fresh objdir and start the build, but no need to let it go past compiling the first psi4 dir. Post the sections like you did above, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304:85,message,message,85,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304,1,['message'],['message']
Integrability,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:97,rout,routine,97,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061,1,['rout'],['routine']
Integrability,Thanks for the clarification! Revising the error message should reduce confusion.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477:49,message,message,49,https://psicode.org,https://github.com/psi4/psi4/issues/2577#issuecomment-1126191477,1,['message'],['message']
Integrability,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:57,wrap,wrapping,57,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058,4,"['message', 'wrap']","['message', 'wrap', 'wrapping']"
Integrability,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35465591:264,wrap,wrapper,264,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591,2,['wrap'],['wrapper']
Integrability,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:290,message,message,290,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['message'],['message']
Integrability,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220698751:149,depend,depends,149,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751,1,['depend'],['depends']
Integrability,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:435,rout,routing,435,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,3,"['depend', 'rout']","['dependencies', 'depending', 'routing']"
Integrability,"Thanks for the quick replies/bug fixes!. @susilehtola - we have indeed had our eye on integrating libxc, but it's coming down to manpower/tech debt issues right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291:86,integrat,integrating,86,https://psicode.org,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291,1,['integrat'],['integrating']
Integrability,"Thanks for the reply and suggestions @loriab !. > Good, thanks!; > ; > Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:. It's the ia32 (32bit) build, the x86_64 one is here:; https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=amd64&ver=1%3A1.2.1-1&stamp=1546603567&raw=0. > * no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`). Thanks, I thought I had removed them already. > * psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`). It is using python3, this must be some indirect dependency which I can do nothing about.; ; > * production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8. OK, I will look into that. > * I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`). Hrm right, I will take another look at building the manual, thanks for pointing that out. > * threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270. Ok, I'll try to run that during bulid as well. > * Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`). That one is likely due to 32bit: `tests/options1/input.dat` tried to allocate more than 4 GB in the last two attempts in the `check set_memory() wrapper` test; the same applies to `json-v11-energy` and `json_data[""memory""] = ""5GB""`. . So those a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762:716,depend,dependency,716,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762,1,['depend'],['dependency']
Integrability,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:409,message,message,409,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270,1,['message'],['message']
Integrability,"Thanks for the report. You're right, dependency handling in that l2 fork is lacking. I think I've finally got dependencies straight in the successor to the fork https://github.com/evaleev/libint/pull/233/files#diff-8e69ff48dd421c27038dafc327ded859e9be46b2e1aecec070d8b263a7b03d02R266 . Note that depending on how you build the l2 library, those boost headers may be bundled with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043:37,depend,dependency,37,https://psicode.org,https://github.com/psi4/psi4/issues/2427#issuecomment-1032300043,3,['depend'],"['dependencies', 'dependency', 'depending']"
Integrability,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:1847,message,message,1847,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,1,['message'],['message']
Integrability,"Thanks for the response. Psi is no stranger to forking our dependencies to fit our needs. Remember that one of our requirements is ease of use. For example, let's take our `dfmp2` code. We need to store over 18 different intermediates on disk, most of which are meaningless outside of the context of DFMP2. Needing to have a JSON file listing all intermediates, and making sure that the intermediate names of different modules don't clash, are problems we don't have in the current code, and introducing those make ease-of-use more complicated. That said, I see the merit in having a unified listing of all intermediates, at least on a per-module level. I'll think more about this, and of course, I can only speak for myself, not all Psi core developers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396175430:59,depend,dependencies,59,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396175430,1,['depend'],['dependencies']
Integrability,"Thanks for the suggestion. This is going to have trouble as-is because `driver` is under schema control https://github.com/MolSSI/QCElemental/blob/master/qcelemental/models/common_models.py#L57-L70 . Do you have this working locally? Could you be running `psi4 --json` rather than `psi4 --qcschema`? The former is an old but still supported route that undergoes fewer checks, iirc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-946912359:341,rout,route,341,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-946912359,1,['rout'],['route']
Integrability,"Thanks for the swift response from both of you. `set tpdm true` combined with the `get_tpdm` function gets the TPDM as a matrix into Python, which is what I need for my use case. (The map from matrix indices to orbital indices would also be nice, but I think I can dig that up myself.) So this isn't blocking me anymore, and there shouldn't be much ""digging into details"" of DETCI required!. I think the primary question is if we want to have a `detci` dirty mode or not, and if so, how much information it should keep. The other action item is to have an error message instead of the segfault, but I can do that myself, now that I have more context on expected DETCI operation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576:562,message,message,562,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586435576,1,['message'],['message']
Integrability,"Thanks for the tip. Would you elaborate on ""Don't include any commit; already pushed to a central server"" a quote from the link you sent? Would; I need to cancel the pull request, then go ahead and push the squashed; version to my fork, then reinitiate the pull request?. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Fri, Jan 29, 2016 at 4:19 PM, Daniel Smith notifications@github.com; wrote:. > As a note this is a perfect example where you probably want to squash; > commits so that the git history is more understandable. A quick rundown; > would be something like the following:; > ; > git rebase -i HEAD~5; > Change the commits that you no longer want from pick to squash, save the; > file.; > ; > See here; > https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages; > for more information.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/228#issuecomment-176995836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-177002304:853,Message,Messages,853,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-177002304,1,['Message'],['Messages']
Integrability,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252802760:258,depend,dependency,258,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760,7,"['depend', 'message']","['dependency', 'message']"
Integrability,"Thanks for this!. Mimicking is the right thing to do here. We encode irreducible representations into bitstring so that the nonzero blocks of our matrix are exactly those with the property `row_irrep ^ col_irrep ^ symmetry_ = 0`. As a consequence, `A ^ B = C`. The check itself looks correct to me, and this is a huge improvement. For the sake of debug information, I'm tempted to ask for calls to `rowspi().print()` and `colspi().print` on all three matrices involved before the error message appears. I'd also like if the error message included the symmetries of all three matrices and the particular Ha that created the problem. Susi, what do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1262315350:486,message,message,486,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1262315350,2,['message'],['message']
Integrability,"Thanks for trying out Psi4 and the Psi4/Cfour interface, @tobirolinew. I can probably fix your immediate problem, but please read on. :-). There's three ways of running a Cfour calc through a more flexible front-end right now:; * QCEngine (already present in a Psi4 installation. takes a dictionary as input. geometry must be in Cartesians.); * QCDB (extra install. depends on QCEngine. inputs look much like Psi4/Cfour only `psi4.` becomes `qcdb.`. can use Z-Matrices.); * Psi4/Cfour (the first in time of these three. what you're trying now.). I'm trying to deprecate this last one in favor of the better maintained first ones. Your job would look something like the below through QCEngine (code below not tested). ```; import psi4; import qcengine as qcng. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; """"""). atomicinput = {; ""driver"": ""energy"",; ""molecule"": h2o.to_schema(dtype=2),; ""model"": {; ""method"": ""ccsd(t)"",; ""basis"": ""aug-pvqz"",; },; ""keywords"": {; ""SCF_CONV"": 12,; ""CC_CONV"": 12,; },; }. atomicresult = qcng.compute(atomicinput, ""cfour""). import pprint; pprint.pprint(atomic_result.dict()); ```. What types of calcs are you ultimately looking to run? How would you like to proceed: the QCEngine or Psi4/Cfour route? Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883:46,interface,interface,46,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883,3,"['depend', 'interface', 'rout']","['depends', 'interface', 'route']"
Integrability,"Thanks for waiting. I've had a lot to do lately. Psi4 isn't interpreting your input file like you intended. Psi4 1.4 will contain an error message indicating something is an amiss. The first issue is that you never actually create a molecule in the input fragment you gave me. Maybe you account for this in the full script, but if you don't, supply your string to the function `psi4.geometry`. The second issue is a deeper one. Psi interprets all singly-occupied orbitals as alpha orbitals, so Psi sees your input file and thinks you want a singlet with two unpaired alpha electrons. That's physical nonsense, so Psi4 will (in an error message we added in 1.4) complain and refuse to proceed. In 1.3, it will not be smart enough to realize an issue, proceed, and potentially give nonsense. Of course, what you want is a singlet diradical ROHF state, with an unpaired alpha electron and an unpaired beta electron in each determinant in your linear combination. I know how to tell Psi you want a singlet, but I'm not aware of any way to further specify that you want a singlet diradical ROHF state. Is there a reason why you need the diradical to be the starting point for your CASSCF?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469:139,message,message,139,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641504469,2,['message'],['message']
Integrability,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227#issuecomment-175470082:628,interface,interface,628,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082,1,['interface'],['interface']
Integrability,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:49,integrat,integration,49,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759,3,['integrat'],"['integrate', 'integrated', 'integration']"
Integrability,"Thanks very much, @amjames! @loriab did a ton of heavy lifting to get them able to be integrated into the docs, so many thanks to her as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/637#issuecomment-284583309:86,integrat,integrated,86,https://psicode.org,https://github.com/psi4/psi4/pull/637#issuecomment-284583309,1,['integrat'],['integrated']
Integrability,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298452280:54,integrat,integrate,54,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280,1,['integrat'],['integrate']
Integrability,"Thanks! fyi, if you include ""fixes #310"" in the commit message, it'll close the issue when the PR gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196683371:55,message,message,55,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196683371,1,['message'],['message']
Integrability,"Thanks!. * this is dimer - m1 - m2, and the monomer geometries are uniform, so what you're seeing is a big increase in inaccuracy for the dimer depending on if its extent is near or far. is that right?; * any idea about ""OptM3 with GC"" characteristics and how it relates to defgrid2 https://sites.google.com/site/orcainputlibrary/numerical-precision?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-928273414:144,depend,depending,144,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928273414,1,['depend'],['depending']
Integrability,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292#issuecomment-189992984:730,message,message,730,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984,1,['message'],['message']
Integrability,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297866382:301,integrat,integrations,301,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382,1,['integrat'],['integrations']
Integrability,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182875337:386,rout,routine,386,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337,1,['rout'],['routine']
Integrability,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344708105:222,depend,dependencies,222,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105,1,['depend'],['dependencies']
Integrability,"Thanks, @susilehtola, but I patched up master earlier in the week to get things working, as the retweaking and py interface stuff were wrt master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-386621898:114,interface,interface,114,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-386621898,1,['interface'],['interface']
Integrability,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:141,interface,interface,141,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805,1,['interface'],['interface']
Integrability,"Thanks. Don't worry about pulling my changes into this tree--that sounds like it would unnecessarily complicate matters. I did (briefly) try my suggestion for format_kwargs_for_input and it didn't work out--the input parser does not like the binary format! An alternative is to use json rather than pickle. This works for the format_kwargs_for_input case (both python 2 and python 3 tests pass) but not for wrappers.py (db_func is a function, which json can't serialize by default, so pywrap-db2 still fails under python 3) and I have didn't look at the pickle use in text.py. As far as automated testing goes, I've found just testing the setups I use regularly gets most of the benefits (especially as some people are not great at running tests before committing!). I am a fan...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20634786:407,wrap,wrappers,407,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20634786,1,['wrap'],['wrappers']
Integrability,"Thanks. I haven't tackled Mac yet (or clang on Linux) on the conda revamp, but it's unlikely to be a problem. If I had built packages the canonical conda way (dynamic link _everything_), psi4 wouldn't have had this problem in the first place. Slowly all my ""tricks"" in the original psi4 binary (where python itself was practically the only non-static dependency) have been given up for good technical reasons in favor of system packages from the conda ecosystem. On Mac (clang), I never implemented those tricks in the first place, so it didn't hit this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-380133564:351,depend,dependency,351,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-380133564,1,['depend'],['dependency']
Integrability,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:151,depend,dependency,151,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286,2,"['depend', 'integrat']","['dependency', 'integrations']"
Integrability,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:34,synchroniz,synchronizing,34,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077,2,"['Depend', 'synchroniz']","['Depending', 'synchronizing']"
Integrability,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184429744:629,rout,routinely,629,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744,1,['rout'],['routinely']
Integrability,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178857878:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878,3,"['Integrat', 'interface', 'rout']","['Integrate', 'interface', 'routines']"
Integrability,"That depends on the version. Fedora 28 has 4.0.5, Fedora 29 has 4.2.3, Fedora 30 might get the next version of libxc...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451101422:5,depend,depends,5,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451101422,1,['depend'],['depends']
Integrability,That depends on whether `integral_->electrostatic()` is threaded or not. But threading over grid points would probably be faster in this case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1614#issuecomment-488006485:5,depend,depends,5,https://psicode.org,https://github.com/psi4/psi4/issues/1614#issuecomment-488006485,1,['depend'],['depends']
Integrability,That loop looks about as simple as it gets. What kills me is the loop structure ~10 lines above is nearly identical. Any error message on the crash?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368927971:127,message,message,127,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368927971,1,['message'],['message']
Integrability,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:842,depend,dependencies,842,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['depend'],['dependencies']
Integrability,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081364:368,rout,route,368,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364,2,['rout'],['route']
Integrability,"That would make sense. Yeah, would be great if you could check this. On Oct 25, 2017 4:19 PM, ""Eugene DePrince"" <notifications@github.com> wrote:. > I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339460309:663,contract,contraction,663,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309,1,['contract'],['contraction']
Integrability,"That's a good idea, Peter. As far as I know, the XML stuff is only for the high level API, which we are not using. We still parse the basis sets with the same parser and use the same internal data structures - there's just a simple conversion to the library's data structures and then they are handed off. So your concern about duplicate basis set libraries is not a concern, but it would be nice to be able to disable the high level API at compile time, to remove the XML dependency. It's not a huge problem if not - the XML lib is easily obtained from conda forge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-804509150:473,depend,dependency,473,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-804509150,1,['depend'],['dependency']
Integrability,"That's great! I can see the log now, at least for the continuous-integration/Distelli link. Not the Disteli-CI link; that could just be the malformed URL causing a problem though. What's the difference between those hooks?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235419018:65,integrat,integration,65,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419018,1,['integrat'],['integration']
Integrability,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:323,rout,routine,323,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180,1,['rout'],['routine']
Integrability,"That's much clearer, thank you. The syntax seems good to me, but I vote for single access / multi storage. That prevents the syntax from getting unwieldy if we decide we need variables of types other than float and array. My main reason is that having different accessors feels like a clunky interface to me, especially for PsiAPI. Variable getting in PsiAPI should treat types like Python does, not C++.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485:292,interface,interface,292,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485,1,['interface'],['interface']
Integrability,"That's the merge of @loriab's new printing / running machinery into the existing master, which we expect to pass. What we need to see is 9c5d3c3 of this PR. It's not running because of merge conflicts (I only just noticed that error message), so you'll need to pull the master branch in and add the conflict resolution to the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183790721:233,message,message,233,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183790721,1,['message'],['message']
Integrability,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:476,integrat,integration,476,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610,1,['integrat'],['integration']
Integrability,"The ""one word"" in the terminal is probably a system message that psi4 was killed off for some reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-924958424:52,message,message,52,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-924958424,1,['message'],['message']
Integrability,"The ""other"" lebedev_mapping_: That's just the declaration for it. The problem is that `SphericalGrid::build` is a _static_ method so the; constructor isn't called when that happens. Someone might yank out the; `new` there and still statically access `lebedev_mapping_` and we are back; where we started. There's no guarantee of construction, so I stapled it; into the one place it's actually used. (And, again, I don't understand why it's used at all as it never seems to; show up downstream). Even if it was in the constructor though (which would fire on the _new_) it; would still need the mutex to ensure it's initialized once as; lebedev_mapping_ is also (purposefully) static. No sense doing the rebuild; of the map on every single object instantiation. On Wed, Oct 5, 2022, 4:59 AM Susi Lehtola ***@***.***> wrote:. > lebedev_mapping_ is a member of SphericalGrid, so initialize_lebedev(); > should be called in the constructor of SphericalGrid. No need to add; > mutexes etc.; >; > More worryingly, I also see another lebedev_mapping_ in cubature.cc; >; > https://github.com/psi4/psi4/blob/ac8f87a1dd3fdda2aabc3318713d6e5ce00e2c70/psi4/src/psi4/libfock/cubature.cc#L5065; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2736#issuecomment-1268150804>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JCEAMFQBY2H6OKMPYLWBU7NRANCNFSM6AAAAAAQ5DTWOY>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086:1493,Message,Message,1493,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268457086,1,['Message'],['Message']
Integrability,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184433294:894,rout,routinely,894,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294,1,['rout'],['routinely']
Integrability,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184432870:867,rout,routinely,867,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870,1,['rout'],['routinely']
Integrability,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288525890:213,message,message,213,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890,1,['message'],['message']
Integrability,"The DFT kernel was not threaded previously and now depends on the BLAS not threading itself automatically. If we roll back to 1.1 does the issue become better?. -Daniel Smith; Sent from my iPhone. . > On Jun 6, 2018, at 04:29, Peter Kraus <notifications@github.com> wrote:; > ; > To add to Lori's table from here, I've compiled the 1.2-rc2 tag against various blas/lapack combinations, and ran the dft-bench-ionisation test (wB97X-D, revTPSS, PW6B95, TPSS, PWB6K only):; > ; > 	N=1	N=4	N=1	N=4; > Psi4/1.2-rc2-acml-5.3.1	FAIL	 	 	 ; > Psi4/1.2-rc2-lapack-3.8.0	395.944	299.438	1.00	1.32; > Psi4/1.2-rc2 (1.2rc2.dev35)	268.523	223.574	1.47	1.77; > Psi4/1.2-rc2-blis-0.3.2	356.723	262.964	1.11	1.51; > Psi4/1.2-rc2-openblas-0.2.20	FAIL	 	 	 ; > Psi4/1.2-rc2-openblas-0.3.0	FAIL	 	 	 ; > All compiled with gcc-7.1.0, cmake-3.8.2, dftd3-3.2-r0.; > ; > ACML-5.3.1 is a binary.; > ; > Netlib's BLAS and lapack (3.8.0) compiled with -O3 -march=barcelona -fPIC and -O3 -frecursive -march=barcelona -fPIC respectively, including deprecated functions. I had to add -DENABLE_dkh=ON to the psi4 build options, otherwise the fortran compiler wouldn't get picked up.; > ; > The 1.2rc2.dev35 is a binary that was available in conda, compiled against mkl 2018.0.2, intel-openmp 2018.0.0.; > ; > Flame's blis-0.3.2 was compiled into netlib's lapack-3.8.0, with ./configure auto; lapack compiled as above.; > ; > OpenBLAS-0.2.20 was compiled with USE_THREAD=0 USE_OPENMP=0 TARGET=BARCELONA. OpenBLAS-0.3.0 was compiled with both make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 and make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 CFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" FFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" and linked using the .so and .a; it doesn't pass at all even with psi4 -n 1.; > ; > The node I used is a 2 x Quad-Core AMD Opteron(tm) Processor 2352, running up-to-date Debian 8.; > ; > —; > You are receiving this because you were mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290:51,depend,depends,51,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290,1,['depend'],['depends']
Integrability,"The DSYEV problems might be due to the machine generated code in libxc returning NaNs. I still think it would be a good idea to clean these up within Psi4 if they arise, since not all functionals are well-behaving and ""fixing"" the functional amounts to using larger density / gradient thresholds. The B5050LYP issue boggles me. I did rewrite the routine to accept external parameters in October, but as far as I can see the resulting definition is exactly the same as before. The underlying functionals may have been regenerated, but that also should not affect anything. Could this be just an issue within Psi4, e.g. changes in the density-fitting routines or the fitting basis? One could just run the calculations with conventional integrals, since (h2o)2 is still small.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298:346,rout,routine,346,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298,2,['rout'],"['routine', 'routines']"
Integrability,"The Jensen _pc_ basis sets [1-7] are analogous to the Dunning _cc_ basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the _cc_ basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:1004,wrap,wrapper,1004,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['wrap'],['wrapper']
Integrability,"The MCSCF printing and the NO are different routines (hence why `nat_orbs` was broken for MCSCF, but not CI). What kind of printing would you want here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/590#issuecomment-275767955:44,rout,routines,44,https://psicode.org,https://github.com/psi4/psi4/issues/590#issuecomment-275767955,1,['rout'],['routines']
Integrability,"The MRCC interface is a different case because:; 1. At the time it was coded, we had a developer who would volunteer to deal with it if requested.; 2. We had a well-defined use case where we already knew that adding the feature was the correct fix. Those are two special conditions, and there's a reason that there aren't other messages like the MRCC message in the Psi codebase!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068221472,3,"['interface', 'message']","['interface', 'message', 'messages']"
Integrability,"The ROHF Hessian isn't very stable, could be that CG isn't valid depending on the condition value of the Hessian.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716#issuecomment-530400897:65,depend,depending,65,https://psicode.org,https://github.com/psi4/psi4/issues/1716#issuecomment-530400897,1,['depend'],['depending']
Integrability,"The `MintsHelper::one_body_ao_computer` function is a helper routine for all one-body integrals to parallelize them. All of the overlap, potential, etc run through them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505191466:61,rout,routine,61,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505191466,1,['rout'],['routine']
Integrability,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:238,depend,dependent,238,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204,1,['depend'],['dependent']
Integrability,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83124188:569,wrap,wrapper,569,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188,1,['wrap'],['wrapper']
Integrability,"The affected files are psi_start.cc, python.cc, and version.cc . One potential complication is that it has to be accessible before much else has started up in order to be a command-line option. After The Inversion might be a time to find a solution that won't need changing again in short order. The fact of the versioned_code target building first rather than last is, I think, just because it hasn't any dependencies, since it really only depends on `git describe`. If you want to tweak this to happen later, rather than sooner, go right ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239193115:406,depend,dependencies,406,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239193115,2,['depend'],"['dependencies', 'depends']"
Integrability,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:245,depend,depends,245,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257,2,"['depend', 'message']","['depends', 'messages']"
Integrability,"The attempt at a coherent decision put basic methods `SCF_TYPE` and `MP2_TYPE` at `DF` among conv/df/cd-ness. And higher-order methods `MP_TYPE`, `CC_TYPE`, `CEPA_TYPE` at `CONV`. OMP2 is controlled by `MP2_TYPE`, so it should still be defaulting to density-fitted. Let me know if it's not. For the higher-order OMP3/OMP2.5/OCEPA(0), CONV and DF have the same reference and gradient capabilities. For higher-order non-oo, CONV tends to be more supported. If we set `MP_TYPE` or `CEPA_TYPE` at `DF`, then, at best, users will get different CONV or DF depending on mp2 vs. mp4 or cepa(0) vs cepa(3). Other route is to split off more `*_TYPE` options for the oo methods, whereupon they really start to proliferate. I rather prefer to keep the defaults as they are at present (omp2 df, others conv). But will go with consensus. This message is just the background info of implications.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/279#issuecomment-188499509:550,depend,depending,550,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-188499509,3,"['depend', 'message', 'rout']","['depending', 'message', 'route']"
Integrability,"The authors' DM21 functional implementation has a PySCF interface, so you can already use PySCF to run calculations. Hooking it up to Psi4 will be a much bigger task, since unlike PySCF, Psi4 doesn't handle density functionals in Python...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2380#issuecomment-991694381:56,interface,interface,56,https://psicode.org,https://github.com/psi4/psi4/issues/2380#issuecomment-991694381,1,['interface'],['interface']
Integrability,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:272,contract,contracted,272,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073,1,['contract'],['contracted']
Integrability,"The big picture purpose of this PR is not clear to me. I understand that bullet point 4 is test coverage. Are the other three bullet points changing an interface, adding functionality, or pure code reorganization?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-919135259:152,interface,interface,152,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-919135259,1,['interface'],['interface']
Integrability,"The bug is also basis set dependent (def2-SVPD runs fine in Psi4 1.3.2), which also points to this. As a workaround, this issue can probably be solved for this system by using a better initial guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594#issuecomment-1147657283:26,depend,dependent,26,https://psicode.org,https://github.com/psi4/psi4/issues/2594#issuecomment-1147657283,1,['depend'],['dependent']
Integrability,The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909:27,message,messages,27,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909,1,['message'],['messages']
Integrability,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:1152,depend,dependent,1152,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,1,['depend'],['dependent']
Integrability,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232996171:633,rout,routines,633,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171,1,['rout'],['routines']
Integrability,"The code is probably attempting to use an out-of-core algorithm for one of the contractions, because it thinks it only has the default of 500 Mb; increasing the number of frozen virtuals probably allows it to run in core, which is why that trick is successful. If you add `memory 10 Gb` (or however much you have available) to the top of your input, it should help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523#issuecomment-261793389:79,contract,contractions,79,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261793389,1,['contract'],['contractions']
Integrability,"The conda packages are in a state of transition just now wrt gcc, so I can't give you bullet-proof directions for this procedure without a lot of back-and-forth, but there is a procedure to build psi4 from source using all dependencies from conda, including MKL. It's outlined here (http://psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380494702:223,depend,dependencies,223,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380494702,1,['depend'],['dependencies']
Integrability,"The correlation reference you're looking for is: S. H. Vosko, L. Wilk, and M. Nusair, “Accurate spin-dependent electron liquid correlation energies for local spin density calculations: A critical analysis,” Can. J. Phys., 58 (1980) 1200-11. I just wasn't sure if there needed to be a reference for the specific x/c combination.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1111#issuecomment-414866720:101,depend,dependent,101,https://psicode.org,https://github.com/psi4/psi4/issues/1111#issuecomment-414866720,1,['depend'],['dependent']
Integrability,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184418683:180,rout,routinely,180,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683,1,['rout'],['routinely']
Integrability,The dftd3 and gcp system calls (and others like that) will need to checked by someone familiar with the windows shell.; When I made the ORCA-to-gcp interface it gave all sorts of trouble on Windows with escape characters.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-383499846:148,interface,interface,148,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-383499846,1,['interface'],['interface']
Integrability,"The diffs come up clean for every section of variable printing in OCEPA, CEPA, OMP2, OMP3, OMP2.5, MP3, MP2.5, MP2... Numbers vary, unsurprisingly. There's no printing difference depending on closed vs open-shell except for ROHF-MP2. I can't find an ROHF-MP2 test anywhere, so I compared a UHF-MP2 and an ROHF-MP2 calculation. After fixing one silly mistake (see last commit), the diff was exactly what I expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766:179,depend,depending,179,https://psicode.org,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766,1,['depend'],['depending']
Integrability,"The extraction of the error message looks complicated, but I want to catch the case where the message contains other "":"" characters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812:28,message,message,28,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611412812,2,['message'],['message']
Integrability,"The fchk interface works, the only issues are aesthetic. However, other parts of Psi4 aren't functioning as they should, i.e. the issue of the reference density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272#issuecomment-533646187:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/issues/1272#issuecomment-533646187,1,['interface'],['interface']
Integrability,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:625,integrat,integration,625,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672,1,['integrat'],['integration']
Integrability,The functional interface should be modified in such a way that Psi4 pulls the info about the functionals (i.e. the citations) from libxc; there's little sense in duplicating this information.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1597#issuecomment-482030604:15,interface,interface,15,https://psicode.org,https://github.com/psi4/psi4/pull/1597#issuecomment-482030604,1,['interface'],['interface']
Integrability,"The gdma wrapper expects an output file and/or fails to detect `stdout` correctly; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/gdma_interface/wrapper.cc#L51. A work around is to specify an output file for the python script; `psi4.core.set_output_file(""script.out"")`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661:9,wrap,wrapper,9,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661,2,['wrap'],['wrapper']
Integrability,The gmda interface seems pretty straightforward. I could look into this since I'm using it daily. . Is there any documentation on how to keep an isolated installation of psi4 for development? Any tips would be appreciated!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228698239:9,interface,interface,9,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228698239,1,['interface'],['interface']
Integrability,The input file should be fort.56. Memory should be handled here: https://github.com/psi4/psi4/blob/8418efe67717940cda6e8446814d9689e9c303e8/psi4/src/psi4/mrcc/mrcc.cc#L932. Threading should be handled here: https://github.com/psi4/psi4/blob/8418efe67717940cda6e8446814d9689e9c303e8/psi4/driver/procrouting/proc.py#L4994. It's been a long time since any of these interfaces were managed. Are you sure the mrcc was compiled with openmp enabled?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165#issuecomment-2135954456:362,interface,interfaces,362,https://psicode.org,https://github.com/psi4/psi4/issues/3165#issuecomment-2135954456,1,['interface'],['interfaces']
Integrability,"The interface include directories/libraries of (external) projects don't seem to propagate when they are added via `psi4_add_library`. I think you mentioned you had a problem with this before. It looks like the problem might be line 64 in `Psi4Macros.cmake`:. ```; target_link_libraries(${libname} INTERFACE ${name_i}); ```. I think that should be PUBLIC rather than INTERFACE. That way, the `${libname}` library will use the added library, as well as pass it along on its interface. Changing that causes other build issues, though, and I'm not 100% positive what it should be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237703940:4,interface,interface,4,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237703940,4,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"The issue has been reported to the MRCC forum. It is broken even with Molpro 2022.; Perhaps it would be more maintainable to teach QCEngine how to run standalone MRCC calculations, rather than trying to pass SCF wavefunctions via a fragile interface that keeps being broken?. PS: [MRCC forum topic](https://www.mrcc.hu/index.php/forum/running-mrcc/287-molpro-w-mrcc-keywd-errror)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283:240,interface,interface,240,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283,1,['interface'],['interface']
Integrability,"The key change is that in 1.3.2, psi4 was using Libint1. Now in 1.4 and 1.5, psi4 uses Libint2 that is much capable and has a cleaner interface and is maintained. Along with that is better screening, and it looks like you've hit a case that didn't have an expected use, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/twobody.cc#L244-L249 . If you're exploring, perhaps switch to ab|ab to proceed. If the aa|bb was deliberate, let us know, though there probably won't be a prompt change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439#issuecomment-1037759512:134,interface,interface,134,https://psicode.org,https://github.com/psi4/psi4/issues/2439#issuecomment-1037759512,1,['interface'],['interface']
Integrability,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:336,integrat,integration,336,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,1,['integrat'],['integration']
Integrability,"The libecpint results have been very thoroughly tested against near-exact numerical integration routines, so I would be surprised if they are wrong. I will have to take a closer look at what you've done so far to know whether the problem is bugs in the original code or a change in the way certain things are handled. I can clarify though that libecpint does _no_ normalization of the basis functions. I do know the reason there are now some non-zero quantities though - I was screening them assuming everything would eventually be transformed to spherical gaussians! So it won't have affected results as long as cartesians weren't being used. . @PeterKraus has also noted a problem with linking against pugixml, and I'm not sure what the problem is, but hopefully we'll work out how to fix it soon. . That said, it is worth noting that I have almost finished wrapping a python package of libecpint, so that might prove an easier root to install the library?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802951976:84,integrat,integration,84,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802951976,3,"['integrat', 'rout', 'wrap']","['integration', 'routines', 'wrapping']"
Integrability,"The main things worth looking at:; * psi4/driver/driver.py, psi4/src/core.cc; 	Do we have any recommended changes to the error messages? Any error messages I should add but didn't?; * Are there any files I didn't edit that I should have, just based on the fact that I am renaming an entire module?; * I also removed some options which the code stopped using. (The MO_RELAX and IGNORE_TAU options, both of which were marked to be used as debug tools.) Is there anything I should do for that other than remove mention of them in psi4/src/read_options.cc and anywhere they appeared in the DCT code?. Beyond that, the changes should be search and replace. Particularly zealous reviewers can double-check that the only instances of `dcft` left are those that refer to specific citations or say that `dcft` was the old name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590:127,message,messages,127,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-532653590,2,['message'],['messages']
Integrability,The newly built adcc conda packages (with the less strict dependency constraints) are now available in the [adcc/label/dev](https://anaconda.org/adcc/adcc/files) channel. Perhaps would be good to try them here and check they ease compatibility as expected.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196:58,depend,dependency,58,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598785196,1,['depend'],['dependency']
Integrability,"The numpy from Miniforge3-MacOSX-arm64 comes with libopenblas. They just hide the actual blas library behind more a more generic interface like cblas. This way they can easily switch between openblas or mkl for example.; You can check what is being actually used:. ```; Holgers-MacBook-Air:kruse :~ > otool -L /Users/kruse/miniforge3/lib/libcblas.dylib; /Users/kruse/miniforge3/lib/libcblas.dylib:; 	@rpath/libopenblas.0.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.5.dylib (compatibility version 6.0.0, current version 6.0.0); 	@rpath/libomp.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1292.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961478826:129,interface,interface,129,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961478826,1,['interface'],['interface']
Integrability,"The original basis is SO. The behavior for D and F are different because ""AO basis quantities"" mean different things for those two cases. For the F matrix, ""AO basis"" means that you have a formula in terms of one-electron functions, and you just throw those in. To change basis, you just linearity. F_pq = C_mu,p C_nu,q F_mu,nu. For D, ""AO basis"" means ""if you contract this against an AO basis integral, you'll get the same result as if you had contracted an MO basis quantity against MO basis integral."" In that case, D_mu,nu F_mu,nu = D_p,q F_p,q = D_p,q C_mu,p C_nu,q F_mu,nu, so we end with D_mu,nu = C_mu,p C_nu,q D_p,q. Note that it _differs_ whether you need to contract your C matrices against the AO or the MO basis quantity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-680945095:361,contract,contract,361,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-680945095,3,['contract'],"['contract', 'contracted']"
Integrability,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226018652:356,depend,depending,356,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652,1,['depend'],['depending']
Integrability,The primary goal of this PR was completed through another route with #554 and the remaining bits added in 759e83e.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543#issuecomment-270960957:58,rout,route,58,https://psicode.org,https://github.com/psi4/psi4/pull/543#issuecomment-270960957,1,['rout'],['route']
Integrability,"The problem appears to be as follows:. The Bozkaya OO code and the DCT OO code use different indexing conventions with libdpd. What one code says is a column index, the other says is a row index. Consequently, they conflict with each other when trying to pull files from libtrans. At the least, that is what is happening on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_integrals_UHF.cc#L362) of the DCT code. While a user can fix this with `clean()` calls, an in-program fix is harder. If we put a `clean()` call at the end of the energy calls in `procrouting`, we obliterate the density matrices that may be needed if `energy` was called by `gradient`. The only solutions I can see are to unify the indexing conventions or to leave modification/sorting of `libtrans` files to `libtrans`. We had also best do _something_ to prevent this problem from recurring. What that looks like will depend on the fix we make. Either way, might I suggest we put this on the agenda for PsiCon?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456:919,depend,depend,919,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435137456,1,['depend'],['depend']
Integrability,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:596,interface,interface,596,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234,2,['interface'],['interface']
Integrability,"The problem first appeared [here](https://travis-ci.org/psi4/psi4public/builds/106133128), and it affects every clang build on the Travis machines. I did some hacking of the setup, to run cc1 through Valgrind [here](https://travis-ci.org/andysim/psi4public), but it's showing an illegal instruction. That could be a genuine illegal instruction being generated (how, I have no idea), or just a red herring due to Valgrind not recognizing one of the instructions generated. The fact that none of us can reproduce it is mystifying to me. That commit simply pulled in the new cctransort code from the private repo into master. I don't believe there's anything wrong with the cctransort code, but I'd like to be able to depend on the CI tests again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-180503623:715,depend,depend,715,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180503623,1,['depend'],['depend']
Integrability,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-179352477:166,interface,interface,166,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477,1,['interface'],['interface']
Integrability,"The psi4 code unchanged since May 2019 has suddenly started throwing circular import errors?. Any changes to the dependency list? Particularly, is qcengine present?. Python 3.11 only? I've never tried a 3.11 prerelease.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203208847:113,depend,dependency,113,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203208847,1,['depend'],['dependency']
Integrability,"The reason its bouncing is we are not entirely sure the range-seperatated gradients are correct. This admittedly could use a better error message. On `psi4.gradient('scf/3-21g', df_functional='wb97x', dertype=1)` I think this shows a need to scan for valid `kwargs`. This could be difficult to do however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-346668004:138,message,message,138,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346668004,1,['message'],['message']
Integrability,"The reference wavefunction shouldn't be changed, but cloning the wavefunction _before_ `cctransort`, and then having `cctransort` set `same_a_b_orbs_` sounds reasonable to me. I'd also agree with the driver changing this right before or right after `cctransort`, depending on what is most convenient for the internal logic of `cctransort`. `Wavefunction` doesn't define a way to set change `same_a_b_orbs_`, but we can add one easily.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239:263,depend,depending,263,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041983239,1,['depend'],['depending']
Integrability,"The result of test has changed:; ```; $ ctest --output-on-failure -R cookbook-rohf-orb-rot; Test project /home/raimis/psi4.git/linux_build; Start 401: cookbook-rohf-orb-rot; 1/1 Test #401: cookbook-rohf-orb-rot ............***Failed 22.19 sec; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy......................................................PASSED; 	A CCSD energy.....................................................PASSED; 	X SCF energy......................................................PASSED; 	X CCSD energy.....................................................PASSED; 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 84, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	A SCF energy: computed value (-150.1081361) does not match (-150.0872987) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cart = 22.19 sec*proc (1 test); cookbook = 22.19 sec*proc (1 test); psi = 22.19 sec*proc (1 test). Total Test time (real) = 22.35 sec. The following tests FAILED:; 	401 - cookbook-rohf-orb-rot (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095:1087,message,message,1087,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-457158095,1,['message'],['message']
Integrability,"The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511:848,message,messages,848,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511,1,['message'],['messages']
Integrability,"The switch to 2022 CMake fork of Libint2 in #2413 should have healed this issue, as it has better dependency handling and demands fewer dependencies. Try it out when you get a chance, please. You may find this dependency table helpful: https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md#prerequisites",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-1077930064:98,depend,dependency,98,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-1077930064,3,['depend'],"['dependencies', 'dependency']"
Integrability,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/125#issuecomment-121739386:62,depend,dependency,62,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386,2,['depend'],['dependency']
Integrability,"The test failure looks completely random. I expect this will pass tests if it goes through again. I can't re-force tests, so the best solution I have is to amend the commit message and force push the PR. That'll force another run of tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856:173,message,message,173,https://psicode.org,https://github.com/psi4/psi4/pull/2406#issuecomment-1013371856,1,['message'],['message']
Integrability,"The`tu4-h2o-freq` also was also a victim of a merge problem. It needs `dertype=1` because the DZ basis has a fitting basis with _f_ orbitals. That means the Hessians require AM=5, so Travis gets upset. I guess the stderr messages aren't part of the log; do you think there's a simple fix for that, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144975:221,message,messages,221,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144975,1,['message'],['messages']
Integrability,"There are no new docs for those, but I had them as open items when I opened the PR. I spoke with Lori about them since, and we agreed that listing them in ""What are the add-on capabilities for Psi4 and what are their dependencies?"" and including links to repos was sufficient. I checked them to indicate their documentation status was resolved (though I agree the check alone indicates some new doc was added)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205#issuecomment-869713777:217,depend,dependencies,217,https://psicode.org,https://github.com/psi4/psi4/pull/2205#issuecomment-869713777,1,['depend'],['dependencies']
Integrability,"There are suggestions that our ADC code is currently incorrect and we have marked it, we could consider deprecating our own ADC module in favor of this approach. Otherwise the select adc approach is the correct one. For now I would inject a name of `adcc-adc` or similar so that it is currently a unique identifier for testing and we can correctly wire up the select functionality later. Dictionary objects are fine to return to the user, the Wavefunction is a PyBind11 dynamic object so you can set additional objects to it `wfn.mydata = {""hello"": ""world""}`. I would take this approach for the first pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288:232,inject,inject,232,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547900288,1,['inject'],['inject']
Integrability,There are various ways to modify the wfn object at the python level. E.g. using the numpy interface (https://psicode.org/psi4manual/master/numpy.html) or wfn serialization (https://github.com/psi4/psi4/blob/master/samples/serial-wfn/input.dat). You can easily overwrite the Density or Coefficient matrix with a numpy array or a psi4 matrix object. What is an example operation where our current interface is insufficient?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2086#issuecomment-762070854:90,interface,interface,90,https://psicode.org,https://github.com/psi4/psi4/issues/2086#issuecomment-762070854,2,['interface'],['interface']
Integrability,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:714,depend,dependencies,714,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202,1,['depend'],['dependencies']
Integrability,"There is at least one group that I know of that is working on developing basis sets specifically contracted for X2C computations. Thus, it may not be a good idea to automatically decontract the basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-289018269:97,contract,contracted,97,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-289018269,1,['contract'],['contracted']
Integrability,"There is one slight problem, though. The orbitals appear to be blocked by symmetry group, so they don't come out in energy ordering. I would need to modify the bitstring part of the dump_vec routine to map the bitstrings into Aufbau order. I couldn't find with a quick look if there's already something that would give me a mapping between detci's orbital numbering vs. the energy ordering. I note that I could build the mapping from calcinfo's scfeigval members, but is there a cleaner way to do this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-300683881:191,rout,routine,191,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-300683881,1,['rout'],['routine']
Integrability,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98491250:480,integrat,integrate,480,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250,2,['integrat'],"['integrate', 'integration']"
Integrability,"There's a lot going on here, so bear with me. In DF algorithms we approximate `(ab|cd)≈(ab|P) M_PQ (Q|cd)`, where `M` is the inverse of the metric tensor `M = (P|Q)^{-1}`. For calculations involving symmetric densities (such as SCF energies), we can write the `M` quantity as a product of inverse square roots instead; multiplying one to the left and the other to the right gives two identical intermediates, saving memory. That symmetric approach is used in the conventional algorithms that existed pre-1.4. When computing the inverse square root that's needed, the [power() function](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2284) is used; that function respects a cutoff that is used to eliminate (near) linear dependencies and increase stability (and was widely implemented by @susilehtola as part of an effort to increase stability of the code). In cases where the density involved is not totally symmetric, such as excited states, the symmetric DF intermediates are not used and instead the decomposition is asymmetric: `(ab|cd)≈[(ab|P)] [M_PQ (Q|cd)]`. This asymmetric decomposition is also used in the recently introduced `wcombine` algorithm that combines coulomb-attenuated integrals and conventional ERIs to speed up exchange evaluation. To generate the second intermediate in this approach, a full inverse of the metric is needed, instead of the inverse square root, and this is achieved by calling [general_invert()](https://github.com/psi4/psi4/blob/98a085e31f5974769eec0d9b40e03645aaed1b7d/psi4/src/psi4/libmints/matrix.cc#L2236). This matrix inversion does not eliminate (near) linear dependencies and the system reported in #2279 is susceptible (see comments below for a demo). The `wcombine` algorithm was implemented after @susilehtola's cleanup efforts and inadvertently failed to remove linear dependencies during metric inversion; this PR corrects this oversight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900:782,depend,dependencies,782,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904773900,3,['depend'],['dependencies']
Integrability,There's some build-time --> run-time transitions that wouldn't be too hard.; - [x] libefp --> pylibefp (in #953) July 2018; - [ ] gdma --> py-wrapped gdma exe; - [ ] chemps2 --> pychemps2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-406479505:142,wrap,wrapped,142,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-406479505,1,['wrap'],['wrapped']
Integrability,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:794,interface,interface,794,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,2,['interface'],['interface']
Integrability,"They may not directly use PyDIIS but they include a header file that does include pybind; therefore, a fix was needed. . I would think that instead of adding `target_link_libraries(XXXX PUBLIC pybind11::headers)` to the modules that need it the modules should state their own dependencies. For example, `scfgrad` should have:. ```; target_link_libraries(scfgrad PUBLIC scf_solver). not. target_link_libraries(scfgrad PUBLIC pybind11::headers); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387#issuecomment-1000871565:276,depend,dependencies,276,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1000871565,1,['depend'],['dependencies']
Integrability,"Third the ""rather fragile"" understatement. It'll stay as it is for now. But I've got geometric working in another branch. And a summer student is hooking up pylibefp. So more options and better interface forthcoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385430713:194,interface,interface,194,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385430713,1,['interface'],['interface']
Integrability,"This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. > How do we feel about having the integral-direct DF-J implementation in two separate JK subclasses? The plan is to remove this in the second CompositeJK PR, when DFJLinK and DFJCOSK are combined, but is the dual implementation of DF-J something people would take issue with?. No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1300831794:351,wrap,wrappings,351,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1300831794,1,['wrap'],['wrappings']
Integrability,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:114,message,message,114,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877,1,['message'],['message']
Integrability,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279194347:126,depend,depends,126,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347,1,['depend'],['depends']
Integrability,"This bug has been holding up a forum help request for a couple weeks, but beyond that, this isn't urgent at all. Good luck!. It occurs to me that I was messing with the ZMAT/Cartesian system in #1108. The changes I made _shouldn't_ have broken anything, but that would explain why we're getting this bug in dev, but user isn't getting it in 1.2.1. Send me a message if you need me to explain the context for that PR. The bug I was wrangling was nasty, so my issue description may be a little confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-437329548:358,message,message,358,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-437329548,1,['message'],['message']
Integrability,"This could explain some bugs we've been seeing lately. I don't know who introduced ""coldim"" and why it is needed if we already; have nmopi. On Tue, Feb 23, 2021 at 9:37 PM Eugene DePrince <notifications@github.com>; wrote:. > DF-CC freaks out when linear dependencies are present, and i tracked the; > issue to an inconsistency between reference_wavefunction_->nmopi() and; > reference_wavefunction_->Ca()->coldim(). The latter has the correct value; > when linear dependencies are removed.; >; > Should nmopi() and Ca()->coldim() be consistent in this case?; >; > Minimal input:; >; > molecule {; > o; > h 1 1.0; > h 1 1.0 2 104.5; > }; >; > set {; > basis 'aug-cc-pvtz'; > scf_type df; > cc_type df; > s_tolerance 1e-3; > }; > energy('ccsd'); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2120>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5THGTZ2CCKELMGOIZ3TARQ5JANCNFSM4YDUMEUA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707:255,depend,dependencies,255,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785511707,2,['depend'],['dependencies']
Integrability,"This fundamentally isn't how Psi4 works. Psi uses a AO density matrix representation wherever it can, switching to a real space for evaluation of DFT functionals but nowhere else. Maybe you can use Psi4 functions to write your own HF code with this functionality (I'd need to think harder to know if that's even doable), but you can't inject such a density into Psi4's existing HF algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158:335,inject,inject,335,https://psicode.org,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158,1,['inject'],['inject']
Integrability,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074419:634,message,message,634,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419,1,['message'],['message']
Integrability,"This is diatomic subroutine is a neat feature to have, especially for; pedagogical purposes. On Fri, Nov 11, 2016 at 5:54 PM, Andy Simmonett notifications@github.com; wrote:. > Description; > ; > Completely changes the algorithm used for fitting diatomic potentials from; > Lagrange interpolations (was tens of thousands of lines of Python) to using weighted; > least squares http://dx.doi.org/10.1063/1.4862157, which can be; > implemented with a couple of lines of Python.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Remove the old interpolation code.; > - Add weighted least squares routine.; > - Add exception to handle non-convergent cases.; > - Document changes.; > - New function to plot the fit to screen/file using matplotlib.; > ; > Status; > - Ready to go; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/515; > Commit Summary; > - Completely overhauls the diatomic code to use weighted least squares; > fitting, instead of Lagrange interpolation. Optionally generates plots of; > the results.; > ; > File Changes; > - _M_ doc/sphinxman/source/diatomic.rst; > https://github.com/psi4/psi4/pull/515/files#diff-0 (2); > - _M_ psi4/driver/diatomic.py; > https://github.com/psi4/psi4/pull/515/files#diff-1 (170); > - _D_ psi4/driver/diatomic_fits.py; > https://github.com/psi4/psi4/pull/515/files#diff-2 (49060); > - _M_ psi4/driver/p4util/exceptions.py; > https://github.com/psi4/psi4/pull/515/files#diff-3 (12); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/515.patch; > - https://github.com/psi4/psi4/pull/515.diff; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/515, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdkAhbXRujKqYMI0ebQRkBB4FdOHOks5q9PILgaJpZM4KwN-5; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/515#issuecomment-260078097:635,rout,routine,635,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260078097,1,['rout'],['routine']
Integrability,"This is great; I really like that you've addressed the inconsistency between CI and CC, which I didn't notice before. The scheme in your last message looks good to me. I think that numbering the first excited state `1`, and the second `2`, _etc._ makes the most sense, for obvious reasons. Zero basing the excited states would lead to an off-by-one error in the cardinal and ordinal notation. LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260098726:142,message,message,142,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260098726,1,['message'],['message']
Integrability,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:707,depend,dependencies,707,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409,1,['depend'],['dependencies']
Integrability,"This is not particularly surprising as the M0x functionals use rather high polynomials in the density which exacerbate their grid dependency and general stability. . To be extra sure can you run a few other meta-GGA's that are not of the M0x series to check their stability. That could potentially be telling, especially if this is with regard to our meta-GGA gradient code or LibXC's kernels.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-381257009:130,depend,dependency,130,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-381257009,1,['depend'],['dependency']
Integrability,"This is the output I get from running the same system directly through libecpint's main API (with normalised contraction coefficients in the orbital basis). All the results seem to agree with the output you have labelled as `native'. This suggests to me that something is going wrong when the libecpint containers are being created, but I'm struggling to see what exactly it is. It might be worth comparing what your ECP object for argon looks like with one created by libecpint by loading from file. [output.txt](https://github.com/psi4/psi4/files/6173525/output.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000:109,contract,contraction,109,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000,1,['contract'],['contraction']
Integrability,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20548249:1087,rout,routines,1087,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249,1,['rout'],['routines']
Integrability,"This is very strange! Yes, the CD-MP2 Correlation Energy is positive,; which is definitely wrong. I can't imagine why seemingly innocent; changes to the input file would change the result, unless there is; just a memory leak or something. Valgrind might be a good idea. On Fri, Feb 12, 2016 at 12:05 PM, Lori A. Burns notifications@github.com; wrote:. > I'm finding non-deterministic energies for cd-mp2, depending on amount of; > extraneous stuff commented in the input file. For example, the below works; > as is, but gives a different answer when the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.945130559",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183423323:405,depend,depending,405,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323,1,['depend'],['depending']
Integrability,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:174,depend,dependencies,174,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317,1,['depend'],['dependencies']
Integrability,"This is what the Basis Set Exchange's comparison tool reports. [7zapa-nr.txt](https://github.com/psi4/psi4/files/6870639/7zapa-nr.txt); [6zapa-nr.txt](https://github.com/psi4/psi4/files/6870640/6zapa-nr.txt); [5zapa-nr.txt](https://github.com/psi4/psi4/files/6870641/5zapa-nr.txt); [4zapa-nr.txt](https://github.com/psi4/psi4/files/6870642/4zapa-nr.txt); [3zapa-nr.txt](https://github.com/psi4/psi4/files/6870643/3zapa-nr.txt); [2zapa-nr.txt](https://github.com/psi4/psi4/files/6870644/2zapa-nr.txt). A further study shows that 2zapa-6zapa are the sets from the Supporting Information of the nZaPa paper. However, 7zapa in Psi4 is not the basis from that paper. According to notes in the MolSSI's internal Basis Set Exchange repository, some of the contraction coefficients were fixed in the nZaPa-CV paper and the rectified contractions should also be used in the non-CV sets i.e. the nZaPa sets. Since it looks like these are different, I'll just revert to the old Psi4 copy and fix the formatting by hand....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254#issuecomment-885837392:749,contract,contraction,749,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885837392,2,['contract'],"['contraction', 'contractions']"
Integrability,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:597,message,message,597,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604,1,['message'],['message']
Integrability,This issue is adressed in https://github.com/psi4/psi4/pull/1133; I did not use the GridIterator interface as the memory overhead of passing the complete grid from python is currently neglibible. ; Also only one of the Grid functions is converted. Converting the others after the split will be trivial.; Therefore closing the issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116#issuecomment-414577458:97,interface,interface,97,https://psicode.org,https://github.com/psi4/psi4/issues/1116#issuecomment-414577458,1,['interface'],['interface']
Integrability,"This issue is solvable, but I'm not sure how good the end result will be. The code needs to be changed so that it. 1. determines the number of alpha and beta electrons in the new wave function; 2. assembles the occupied orbitals in the old basis based on the number of electrons in the two calculations; 2.1. if the number of electrons matches, everything is fine and the occupied orbitals are used as-is; 2.2. if the new calculation has K fewer electrons, then the code must drop the K lowest-lying orbitals from the input; 2.3. if the new calculation has K more electrons, then the guess fails, a warning message is printed out and the code switches to e.g. SAD; 3. compute the projection with the given input orbitals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664898846:607,message,message,607,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664898846,1,['message'],['message']
Integrability,"This issue was originally about issues with converging an SCF, and now I'm not sure what it's about. I need you to re-focus the issue. Are you saying that for the same geometry, Psi is giving different energies/gradients depending on which optimization run it was part of?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746:221,depend,depending,221,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746,1,['depend'],['depending']
Integrability,"This job completes just fine for me on the current master, although with some entirely reasonable warning messages. What version of Psi4 are you using? My guess is that you're using 1.7 or earlier, and #2619 fixed this bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858#issuecomment-1397482999:106,message,messages,106,https://psicode.org,https://github.com/psi4/psi4/issues/2858#issuecomment-1397482999,1,['message'],['messages']
Integrability,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:1073,depend,depends,1073,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576,1,['depend'],['depends']
Integrability,"This looks great! Thanks for figuring out this very tricky problem. A long time ago, @fevangelista and I figured out the machinery to map symmetry-dependent arrays like `DOCC` and `SOCC` into the appropriate subgroups. Would you mind quickly testing to see if `DOCC` can be specified in c2v symmetry with your current version? If not, we'll have to open a follow up PR to make sure this mapping is done (I think it's best left out of this PR to avoid scope creep).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242:147,depend,dependent,147,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242,1,['depend'],['dependent']
Integrability,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:674,contract,contract,674,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,4,['contract'],"['contract', 'contracts']"
Integrability,"This sounds nice! Python accessibility of amplitudes would be a great new feature. And cleanup from C structs towards Wavefunction object would also be welcome. The proposed layer of abstraction between DPD and libpsio is perhaps worth some discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:660,interface,interface,660,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['interface'],['interface']
Integrability,This was done to force linear dependencies on a small system for debugging. The forum post has the originally reported molecule where 1 MO is removed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1998#issuecomment-683270457:30,depend,dependencies,30,https://psicode.org,https://github.com/psi4/psi4/issues/1998#issuecomment-683270457,1,['depend'],['dependencies']
Integrability,"This whole thread was very useful. I was able to create a conda environment with the latest psi4, openff-toolkit, and openff-recharge using this yml. The only thing not really mentioned in this thread, or the psicode latest installation is pinning pydantic version 1.x. I was getting this error ; ```; `; __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__) TypeError: Array.validate_type() takes 2 positional arguments but 3 were given`; ```. from this line of code in my example ( i believe it, recharge may need to pin pydantic 1.x). ```; from openff.recharge.esp.storage import MoleculeESPRecord; qc_data_record = MoleculeESPRecord.from_molecule(; openff_mol_3D, conformer=conformer, grid_coordinates=grid, esp=esp, electric_field=None, esp_settings=qc_data_settings; ); ```. ```. name: psi4; channels:; - conda-forge; - conda-forge/label/libint_dev; dependencies:; - conda-forge::psi4>=1.8.2; - conda-forge::openff-toolkit; - conda-forge::openff-recharge; - conda-forge::pydantic<2. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752:898,depend,dependencies,898,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752,1,['depend'],['dependencies']
Integrability,This will be a nice interface to have!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521029898:20,interface,interface,20,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521029898,1,['interface'],['interface']
Integrability,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:201,depend,dependencies,201,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,2,['depend'],['dependencies']
Integrability,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470461:697,message,message,697,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461,1,['message'],['message']
Integrability,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:166,integrat,integration,166,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492,4,"['depend', 'integrat']","['depends', 'integration']"
Integrability,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170794065:260,depend,dependencies,260,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065,3,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"To answer your probable follow-up question, we hope to have a new Conda package soon. It depends on a tricky bug fix I'm working on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1782#issuecomment-575400886:89,depend,depends,89,https://psicode.org,https://github.com/psi4/psi4/issues/1782#issuecomment-575400886,1,['depend'],['depends']
Integrability,"To be clear, if the MKL_DEBUG_CPU_TYPE=5 envvar trick is used, all MKL functions will execute the AVX2 path, but if there are CPU dispatch routines inserted into the program by the Intel compiler, then code that is outside the MKL functions will probably still only use SSE2 when run on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888:139,rout,routines,139,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633672888,1,['rout'],['routines']
Integrability,"To cut down on the printing, you could use `core.be_quiet()` and `core.reopen_outfile()` depending on the print level",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791590947:89,depend,depending,89,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791590947,1,['depend'],['depending']
Integrability,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:217,interface,interface,217,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598,1,['interface'],['interface']
Integrability,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267205350:377,depend,depending,377,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350,1,['depend'],['depending']
Integrability,"Turns out @robertodr's original `_EP_IS_EXTERNAL_PROJECT` error [was because](http://public.kitware.com/pipermail/cmake-developers/2015-April/025035.html) I moved all the external_* dependencies from `ExternalProject_Add(psi4-core ...) add_dependencies(psi4-core chemps2_external ...)` to `ExternalProject_Add(psi4-core DEPENDS chemps2_external ...)`, and CMake didn't learn to accept interface libs in that role until 3.3. So, I still rather want 3.3 because the DEPENDS looks tidier and the HDF5 version thing, but I can make 3.2 work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281446113:182,depend,dependencies,182,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281446113,4,"['DEPEND', 'depend', 'interface']","['DEPENDS', 'dependencies', 'interface']"
Integrability,"Two comments:; - `dlDF` is based off M05, you might want to try TPSS or SCAN.; - I am not really sure this clears our derivative code from problems. All meta functionals use the same integration code and could still be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382383114:183,integrat,integration,183,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382383114,1,['integrat'],['integration']
Integrability,"Two of the versions of Psi4 dependencies on your machine are incompatible with each other. For us to have any idea _why_ they are incompatible, we need to know how you got these dependencies in the first place. Did you try to build Psi from source? Did you try to install Psi4 with conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1080979081:28,depend,dependencies,28,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1080979081,2,['depend'],['dependencies']
Integrability,"Two rather immediate questions:; * Do we want to allow computing separate reference and correlation densities? We have some machinery for this in Psi starting [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L472), but no current code in Psi uses this. The alternative is that the caller code manually adds the reference 1PDM/2PDM/Lagrangian to the correlated values.; * The interface I'm currently planning for the 1RDM/Lagrangian is that the caller code passes a map from an array of orbital space labels to a SharedMatrix with the relevant 1RDM/Lagrangian block. This is what most codes have natively, the one exception being CC. Opinions on this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736#issuecomment-546491403:406,interface,interface,406,https://psicode.org,https://github.com/psi4/psi4/issues/1736#issuecomment-546491403,1,['interface'],['interface']
Integrability,"Unclear if it is a related, but running `make test` then leads to the following error:. > Traceback (most recent call last):; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/bin/psi4"", line 140, in <module>; import psi4; File ""/usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/lib//psi4/__init__.py"", line 59, in <module>; raise ImportError(""{0}"".format(err)); ImportError: To be able to register buffer protocol support for the type 'psi4.core.CIVector' the associated class<>(..) invocation must include the pybind11::buffer_protocol() annotation!. Maybe I manually rebuild pybind11 incorrectly in my attempts to get psi4 compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273485753:404,protocol,protocol,404,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273485753,1,['protocol'],['protocol']
Integrability,"Unfortunately it looks like you just repushed the same changes. . First run, `git rebase -i HEAD~7`. You should see all of your changes plus a few more. Change all of your commits from ""pick"" to ""squash"" _except_ for your very first one where you want to switch to ""reword"" so that you can rephrase this message. Save this file, you will then get a chance to reword the squashed commits (I would). You can then run `git log --oneline` to make sure the history looks right. Also, examine a few files to make sure the correct changes are there. When you are ready to push, `git push origin master --force` will overwrite the history on the remote. If something goes wrong before you push you can reset these changes by `git reset --hard origin/master`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292#issuecomment-190452935:304,message,message,304,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-190452935,1,['message'],['message']
Integrability,"Unmarking this as attached to any milestone. As noted in my previous message, this is a very difficult (and not pressing) bug to fix because we _really_ want to avoid touching wavefunction API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339:69,message,message,69,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339,1,['message'],['message']
Integrability,"Update that I've got the interface modernized to named tweaks, and I'm working on the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-763229656:25,interface,interface,25,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-763229656,1,['interface'],['interface']
Integrability,"Update: testing is currently made very difficult by an issue with exception messages not propagating out of the threaded neighborhood of https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/aio_handler.cc ; But it was a good idea to actually try it, because I have found another corner case _even beyond this issue_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304827495:76,message,messages,76,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304827495,1,['message'],['messages']
Integrability,Version 1.4 will include a new integral library https://github.com/psi4/psi4/pull/1721 with much improved screening for 1e-integrals. That will give a decent speed-up already. The interface to ddCOSMO mentioned above is still planned and high on the priority list.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-583252363:180,interface,interface,180,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-583252363,1,['interface'],['interface']
Integrability,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307878490:83,contract,contractions,83,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490,2,['contract'],['contractions']
Integrability,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:174,interface,interface,174,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755,1,['interface'],['interface']
Integrability,"We might be talking about two different things. @loriab is talking about `add_library`, while I'm talking about `target_link_libraries`. This is my understanding (although someone can correct me if I'm wrong): when doing a `target_link_libraries`, INTERFACE will only add it to the library's interface. PUBLIC will actually make the project link to the target library. Ie. ```; target_link_libraries(mints PUBLIC erd); ```. will add anything that is part of the erd's interface to mints (headers, libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files will be compiled with erd's include directory, etc). It will also add erd to mints interface (anything linked to mints will pull in the erd includes). On the other hand. ```; target_link_libraries(mints INTERFACE erd); ```. will only add it to mint's interface (and not actually cause header paths, etc, to be added to the command line for files in mints, but will be added for libraries depending on mints).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237727449:248,INTERFACE,INTERFACE,248,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237727449,8,"['INTERFACE', 'depend', 'interface']","['INTERFACE', 'depending', 'interface']"
Integrability,"We now have [a reproducible example of the problem](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471/4?u=jmisiewicz)! As @jgonthier suspected, this indicates a negative eigenvalue in the orbital hessian. The following input will run into the problem. Stability analysis indicates a tiny negative eigenvalue in the MO hessian. When you follow the instability, SAPT completes with no problems. The error message should be rewritten to suggest the user adds stability following. If we want to collect pathological test cases for future SCF work, we should also recommend they post their failing inputs on the forums. ```; molecule {; 0 1; C -1.39179 -0.20044 0.00015; Cl -0.43716 1.29883 0.00009; F -1.08662 -0.91763 1.08111; F -1.08730 -0.91729 -1.08123; H -2.44780 0.05805 0.00053; --; 0 2; Cl 2.22327 -0.26007 -0.00012; }. set {; basis 6-311++G**; reference uhf; soscf true; soscf_max_iter 30; }. energy('sapt0'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893:417,message,message,417,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-532191893,1,['message'],['message']
Integrability,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107#issuecomment-121081025:169,rout,route,169,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025,2,['rout'],['route']
Integrability,"We should use a more informative/tailored error message. But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522:48,message,message,48,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522,1,['message'],['message']
Integrability,"We'll also need to consider [interface codes](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/interface_dftd3.py#L152-L157) that do file writing, too. Is it wanted to keep only mpi process == 1 writing the files or to keep the filenames unique so it doesn't matter if N mpi processes are writing the files? Or either, depending on the situation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266885278:29,interface,interface,29,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266885278,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"Weirdly, cc44 was failing with `-n2` as expected a couple weeks ago, but today it runs just fine. Threads and low mem appear to be setting correctly. Possibly something with the extra SCF routing control or composite JK.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2576#issuecomment-1540837654:188,rout,routing,188,https://psicode.org,https://github.com/psi4/psi4/issues/2576#issuecomment-1540837654,1,['rout'],['routing']
Integrability,"Well, I wholly approve of this sentence: ""Please note that ; sSAPT0 is thus not the same as requesting `exch_scale_alpha 3.0`."" For the psivars, I think I'll just compute from the keyword in the driver, same as you do and pass it along the the qcdb routine (which doesn't access `psi4` commands. Below is what you're doing I think. ``` python; alpha = psi4.get_option('SAPT', 'EXCH_SCAL_ALPHA'); scale = 1.0 if alpha is True else (0.0 if alpha is False else alpha); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/248#issuecomment-183819601:249,rout,routine,249,https://psicode.org,https://github.com/psi4/psi4/pull/248#issuecomment-183819601,1,['rout'],['routine']
Integrability,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98490617:160,integrat,integrate,160,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617,2,['integrat'],"['integrate', 'integration']"
Integrability,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339448378:56,contract,contraction,56,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378,3,['contract'],"['contract', 'contraction']"
Integrability,What happens if you use a tighter integration grid?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075911725:34,integrat,integration,34,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075911725,1,['integrat'],['integration']
Integrability,What is left for this PR and what level of integration are you shooting for in this first pass?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003:43,integrat,integration,43,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003,1,['integrat'],['integration']
Integrability,"What you say seems exact. Just to be sure: when you are in ""developer mode"" (you get the library from the GitHub repo, not the tar.gz), when you run `make` Emacs parses an org-mode file and creates a JSON from the tables. Then, this JSON file is read by a Python script to generate C functions and headers, and the Fortran and Python interfaces. The names of the functions are `trexio_<group>_write_<attribute>`. So you can edit the trex.org file to add extra info to the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically genera",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:334,interface,interfaces,334,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918,1,['interface'],['interfaces']
Integrability,"What's strange is that DFHelper thinks it has 19 gib, it only needs 5 gib, but it insists on using its disk machinery. It could just be a printing error where the code is printing out the wrong message. The calculation should give you a ""timer.dat"" file too. can you post that as well? That one has timers around the disk writes, so we can see if they're actually happening.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503207470:194,message,message,194,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503207470,1,['message'],['message']
Integrability,"When I passed OpenMP_CXX_LIBRARY_DIRS (correctly!) to cmake, it found libiomp5.so fine during the cmake step but then the build failed in the step configuring psi4-core where, presumably, the lapack detection cmake routines run again. At that point, OpenMP_CXX_LIBRARY_DIRS isn't set and it fails to find iomp5. I got past that point of the build by physically adding the relevant path into the HINTS list that includes ${OpenMP_CXX_LIBRARY_DIRS} in FindMathOpenMP.cmake (not exactly a portable solution but hopefully helps locate the problem). ```; $ ldd core.so ; linux-vdso.so.1 (0x00007ffc19d77000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x000014c592535000); libmkl_rt.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_rt.so (0x000014c591e88000); libiomp5.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64/libiomp5.so (0x000014c591aad000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x000014c59188f000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x000014c59150e000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x000014c59117b000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x000014c590f63000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x000014c590ba9000); /lib64/ld-linux-x86-64.so.2 (0x000014c595e3e000); ```. No dependence on libgomp.so and ""make test"" has passed 408/411 tests (2 longs ones still running, and cubeprop-esp failed due to a slight difference in the ESP cubes, although I've seen that fail before).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271:215,rout,routines,215,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271,2,"['depend', 'rout']","['dependence', 'routines']"
Integrability,"When I run this input file, the error message I get is `Killed: 9` which [often signifies being out of memory](https://stackoverflow.com/a/33978359). You've only allowed 2GB RAM for the entire program. We also know `DFHelper Memory: AOs need 0.898 GiB`. I haven't looked at the analytic hessian code, but being out of memory seems like the most likely culprit here. We can add ""get memory estimate of analytic hessian and reduce if possible"" to our to-do list, but for your computation, all you can do is give it more memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890:38,message,message,38,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925013890,1,['message'],['message']
Integrability,Which is essentially what the wrappers I wrote do.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-126341283:30,wrap,wrappers,30,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126341283,1,['wrap'],['wrappers']
Integrability,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178858441:23,Integrat,Integrate,23,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441,2,"['Integrat', 'rout']","['Integrate', 'routines']"
Integrability,"Why did the matrices come out lower/upper diagonal before, how is that fixed now? Does the integral routine only fill one half when the basis sets are the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2986#issuecomment-1591433295:100,rout,routine,100,https://psicode.org,https://github.com/psi4/psi4/pull/2986#issuecomment-1591433295,1,['rout'],['routine']
Integrability,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:753,wrap,wrap,753,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,2,['wrap'],['wrap']
Integrability,"Wondering if it mightn't be better to just continue routing everything with a `/` to `driver_cbs._cbs_gufunc` only now with an extra kwarg `cbs_allowed=True` that is false for `def properties()`. I worry about not breaking (or complicating) recursive driver cases (where cbs and nbody function re-enter energy, hessian, properties etc. after being broken into smaller pieces (like `mp2/cc-pv[dt]z` --> `mp2/cc-pvdz`)).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379562840:52,rout,routing,52,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379562840,1,['rout'],['routing']
Integrability,"Wondering what's the status of 1.4 - AFAIK there was a paper out describing it, yet the latest (only) alpha release is over a year old. Do you have timeframe for 1.4? For Debian, I think I would need to package a couple more new dependencies which takes a while, so if it won't ship in 2020 anyway, it might not need to be rushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888:229,depend,dependencies,229,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888,1,['depend'],['dependencies']
Integrability,"Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589:153,integrat,integrating,153,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589,1,['integrat'],['integrating']
Integrability,Would it make sense to add a `qc_module adcc` in this case?; Then a new `select_adc` in proc.py could manage both the (old) `run_adc` and `run_adcc`. . Though having an optional/external `qc_module` is unprecedented I think. --. Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055:254,rout,routine,254,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055,1,['rout'],['routine']
Integrability,Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307:95,depend,dependence,95,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307,1,['depend'],['dependence']
Integrability,"Would you post the input that triggered this, please? I had thought we had the disk/mem routing printing right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503136419:88,rout,routing,88,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503136419,1,['rout'],['routing']
Integrability,"Yea, this one is on us. We need to talk a bit about how to make operations like you are showing easier. We were only thinking of -D when originally building this interface, but allowing a bit more flexibility when mixing these functionals together would be useful. The other option is to use a function generator in `custom_hyb_funcs.py` or `superfuncs.py` that loops over all nl `dash_params`, generates a new function, and appends it the dictionary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364492929:162,interface,interface,162,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364492929,1,['interface'],['interface']
Integrability,"Yeah the not defined option is best. The extra printing looks good. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 29, 2016 5:11 AM, ""Lori A. Burns"" notifications@github.com wrote:. > I like the options-processing macros, @ryanmrichard; > https://github.com/ryanmrichard.; > ; > Here you meant AND, yes? Or even better, if(NOT DEFINED ${variable})?; > https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11; > ; > You may want to copy Psi4Macros from libint back over to psi4 (diff here:; > loriab/libint1@e992700; > https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff); > as I fixed that processing problem, expanded to bool options, elaborated; > printing, and tested a range of input values/specification routes.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-236132448, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi4KbNA_LZ9m3xza9XqeG7EkicSaDks5qacPBgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236171587:797,rout,routes,797,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236171587,1,['rout'],['routes']
Integrability,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258979667:36,interface,interface,36,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667,1,['interface'],['interface']
Integrability,"Yeah, that ""fc not implemented for oo"" message is of module scope. That's not unreasonable for a module author to write, but it is harder to interpret b/c of the known connection btwn occ/dfocc. And reasonably impossible for an outsider who sees psi as a cohesive entity to interpret. Some mention in the docs would be nice. But the scalable way forward as I see it is to add ae/fc to managed methods like https://github.com/psi4/psi4/pull/1850/files#diff-dbf22cd80d16f6d8ef8250145a6d91bfR153 and to expand explicit testing for NYI https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R154. That way, a user who doesn't specify a module will get a ""can't do"" at the driver level and module authors can stay module-local in their messaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054:39,message,message,39,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054,1,['message'],['message']
Integrability,"Yeah, the issue is that https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699` improperly wraps around when `memory_` < `2*two_memory`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/716#issuecomment-308205184:146,wrap,wraps,146,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-308205184,1,['wrap'],['wraps']
Integrability,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204212411:181,message,message,181,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411,2,['message'],['message']
Integrability,"Yeah, we’re using a released libxc4. But that contains an unfavored (by them) fix that has to be hand applied to each release. Their favored fix is in their master but can’t be released because it breaks ABI so has to wait until libxc5. This PR has the interface to the libxc5 fix. Peculiar story but yes, still relevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-529103526:253,interface,interface,253,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-529103526,1,['interface'],['interface']
Integrability,"Yeah. The C matrix is contracted against the AO ERI integrals, so you need to pass in C matrices in the AO basis. I missed that the first time. 😅",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2184#issuecomment-845956657:22,contract,contracted,22,https://psicode.org,https://github.com/psi4/psi4/pull/2184#issuecomment-845956657,1,['contract'],['contracted']
Integrability,"Yeh, the MRCC wrapper code requires that the traditional two electron integrals be on disk (not there with DF methods or integral direct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-35249235:14,wrap,wrapper,14,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35249235,1,['wrap'],['wrapper']
Integrability,"Yep, gcc version is your problem. Note this part of the cmake output:. > CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; > Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; > this build won't work without GCC intervention:; > https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; > Call Stack (most recent call first):; > CMakeLists.txt:119 (include). Acquire a >=4.9 gcc according to that link (or any way you care to) and pass `gcc-name` and `gxx-name` to icc/icpc as Daniel and that link advised. After that, the cmake warning won't go away (which is why I couldn't make it a fatal error), but it will compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733493:125,message,message,125,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733493,1,['message'],['message']
Integrability,"Yep, which brings us (well, me) to the actual moving. I'm planning on making a PR _very_ early into the development process for this, because the interfacing requirements are murky, and I want to make sure that what I'm preparing is suitable for this ""variety of reasons"" we want this code moved. I'm assuming the limitations of the current interface will be clearer once I start playing with the code. Since I don't have to wrap my head around pointers and references for the rest of this issue, I'm hoping progress will be a bit faster.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-359186675:341,interface,interface,341,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-359186675,2,"['interface', 'wrap']","['interface', 'wrap']"
Integrability,"Yes that's exactly the error I had. With that fix, it may be possible at some point to have, for example, libint/libderiv as dependencies of libmints only, and then anything depending on libmints will pull in libint headers. That's something to play with (that was your original intent I think).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237869256:125,depend,dependencies,125,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237869256,2,['depend'],"['dependencies', 'depending']"
Integrability,"Yes! I just spoke to Stefan Grimme about it this week. On Fri, Aug 30, 2019, 5:25 AM Chrinide <notifications@github.com> wrote:. > Dear Psi4 Developers,; >; > Is there any plan to add the newly DFTD4 interface in Psi4; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1710?email_source=notifications&email_token=AAXVA5QI52CHLFQNLL3YE5LQHDRPZA5CNFSM4ISLIJ2KYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HIM3Y5A>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5VQ3EV6BB4PVR3LQ43QHDRPZANCNFSM4ISLIJ2A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1710#issuecomment-526599417:200,interface,interface,200,https://psicode.org,https://github.com/psi4/psi4/issues/1710#issuecomment-526599417,1,['interface'],['interface']
Integrability,"Yes, I agree that details instructions and more demonstrations could be; added in separate PR, and not a reason to stall Alex's integration efforts. On Fri, Dec 2, 2022 at 2:04 PM Lori A. Burns ***@***.***>; wrote:. > /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/optking.rst:346:; > ERROR: Undefined substitution referenced: ""optking_frag_mode"".; >; > docs error above. probably needs double underscore after optking.; >; > Do we have a figure in there yet illustrating the inter-fragment; > definitions? I have no time to work on it today, but could tomorrow; > (Saturday).; >; > interfrag figure would be great. but if we get to the point where; > everything else is ready, I think that could be a separate PR.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2727#issuecomment-1335779471>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TB764VCREPSYNXVVTTWLJI3HANCNFSM6AAAAAAQWELJAU>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335896146:128,integrat,integration,128,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335896146,2,"['Message', 'integrat']","['Message', 'integration']"
Integrability,"Yes, I think simply producing that list would be sufficient. LibXC could also product a `char**` that we could wrap and pull out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-329267656:111,wrap,wrap,111,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-329267656,1,['wrap'],['wrap']
Integrability,"Yes, I've been updating them as I notice them, and 2845 is the most recent. afaik, there aren't any outstanding expired types. Sorry about the poor commit message - it was part of a big docs update. If you're still working from v1.3, https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848 may be useful patches, too. Thanks for working on keeping this old version going. On the moving-past-v1.3 front, I now have a version of Libint2 that has solid harmonic ordering runtime-switchable, so a single build could work for all open-source consumers, finally including psi. But that'll require upstream acceptance into L2 and new versions (maybe could get away with rebuild?) of the quantum chem packages. So nothing imminent, but some progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502:155,message,message,155,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502,1,['message'],['message']
Integrability,"Yes, NumPy is officially required at runtime see [here](https://github.com/psi4/psi4/wiki/2_Planning#-what-are-the-tools-and-dependencies-strictly-required-for-building-psi4) for requirement list. We'll accept PRs that rely on NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225178276:125,depend,dependencies-strictly-required-for-building-,125,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225178276,1,['depend'],['dependencies-strictly-required-for-building-']
Integrability,"Yes, adding a header=true is possible. What conv crit changed so you know? Geom opt, scf, cc, other? I suspect geom opt since we switched that out in Dec. . So in your Jupiter notebook, you're importing psi4, setting an output file (soon to incl header), running a single job(cclib consumable) closing that output file, processing or storing it, setting another output file, running another single job?. I ask b/c the Jupiter route usually amalgamates lots of outputs (that cclib won't like). Another route would be to have a node that prints the header at each energy/gradient/Hess/opt/freq call.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596:426,rout,route,426,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596,2,['rout'],['route']
Integrability,"Yes, indeed. I was testing this afternoon that AM=4 passed the quicktests and failed the expected all tests. They all behaved as expected wrt pass/fail, but the failures (except for irc) didn't print the usual diagnostic message. Running a specimen through gdb tonight reveals compute_quartet segfault. So something likely unaligned, possibly only with int, not deriv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240606872:221,message,message,221,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240606872,1,['message'],['message']
Integrability,"Yes, it's often right (that's how I got the reference value for the compare_values function, from a simple input file). My concern is that in a more complex input file, it started throwing odd energies, depending on the (commented) input file contents. It's possible there was something funny with my setup, but the error is consistent enough that I'm really suspicious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183512111:203,depend,depending,203,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183512111,1,['depend'],['depending']
Integrability,"Yes, proposals to create interfaces to external programs are far beyond the scope of this issue. Please make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-2426850861:25,interface,interfaces,25,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2426850861,1,['interface'],['interfaces']
Integrability,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195054956:134,message,message,134,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956,1,['message'],['message']
Integrability,"Yes, that's just what we needed. We made some changes in 1.6 (finally delivering on the driver refactor we promised in the 1.4 paper) with a very high likelihood of causing bugs in how Psi4 passes information around, which is what your error appears to be. ""Check the interface to CFOUR works"" may have slipped through the cracks of things we tested. Lori would know for sure. I unfortunately don't have CFOUR so can't test this myself, but I'll agitate to get a hold of one of the developers who does.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225:268,interface,interface,268,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225,1,['interface'],['interface']
Integrability,"Yes, the 1 electron integral routines are getting a very significant rewrite after that pull request is in; they will use libint2, and will be screened for overlap. The original 1e integral code was really written with the standard core hamiltonian in mind, where performance is never an issue. Parallelization of that rewritten code should be relatively easy. I haven't quite decided the best order to reconcile the changes to the integral engine with #1946 yet, but we'll get that merged as soon as we can. Thanks for posting this issue so that we can all coordinate - hopefully everything will be much easier when all of the old integral code is ripped out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528:29,rout,routines,29,https://psicode.org,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528,1,['rout'],['routines']
Integrability,"Yes, the Fedora packages use shared Boost libs, but since they're versioned dependencies there shouldn't be any problem as the dependency breaks when the Boost soname changes. Anyway, this should be solved with 1.1 since there's no Boost anymore. Because the Fedora packaging guidelines have changed, I'll also be able to compile in more functionality such as CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-263455822:76,depend,dependencies,76,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263455822,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172147949:564,depend,dependencies,564,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949,1,['depend'],['dependencies']
Integrability,"Yes, the symmetrize call is nice and should help cleanup any inevitable; small numerical noise. Would be great if it could be extended to; non-Abelian point groups! But the noise @wardence is seeing looks a bit; more serious than just roundoff error. (Sorry to tease an issue before it; gets posted.). On Tue, Dec 12, 2017 at 3:17 PM, Andy Simmonett <notifications@github.com>; wrote:. > I think that a little noise in the gradients is inevitable with so many; > moving parts; that's why we have calls like this; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275>; > for all (I think) gradients throughout the code. It sounds like we just; > need to consider non-Abelian symmetry in this routine to fix the issue; > you're describing; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351180986>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdgWeF2gB7_UhJZNjJt2DDz91wdahks5s_t9IgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351195906:726,rout,routine,726,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351195906,1,['rout'],['routine']
Integrability,"Yes, there's now py27, py35, py36 for Linux and Mac. I've been getting the build and packaging automated again these past few days. There's a few more external projects that need final integration (simint, ambit, a slight dkh fix). I'm aiming for RC1 by mid next week because I'll be away for a bit after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-289781613:185,integrat,integration,185,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289781613,1,['integrat'],['integration']
Integrability,"Yes, this is a bug. The wrong one should produce an error. Take a look at the `remove_symmetry` routine of `Matrix`. Something like the following might work:. ```; MintsHelper helper(wfn->basisset(), wfn->options(), 0);; SharedMatrix sotoao = helper.petite_list()->sotoao();. SharedMatrix work; work = SharedMatrix( new Matrix( ""work"", num_irreps, nsopi, nmopi ) );; SharedMatrix AO_RDM; AO_RDM = SharedMatrix( new Matrix( nao, nao ) );; AO_RDM->remove_symmetry (work, sotoao);; ```. There are various examples of using `remove_symmetry` in `libmints/writer.cc` and `libscf_solver/hf.cc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/274#issuecomment-187696803:96,rout,routine,96,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187696803,1,['rout'],['routine']
Integrability,"Yes, we'd like to depend on BSE rather than the internal library after a round of checking consistency. This is also important for roundtripping QCSchema Wfn.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253#issuecomment-883195975:18,depend,depend,18,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-883195975,1,['depend'],['depend']
Integrability,"Yes, works! That wraps up the documentation shuffling, I think. Provides all the good stuff of the trac page is in the 116MB `db/trac.db` file, that tarball looks good, too. Another issue closed, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121398769:17,wrap,wraps,17,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121398769,1,['wrap'],['wraps']
Integrability,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:541,depend,dependencies,541,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,2,['depend'],['dependencies']
Integrability,"You could probably use the `ciwave.cc::get_dimension` which will get you the offsets for orbital indices. Feel free to write something there that provides orders. The above message in the `form_*` functions is probably all thats required. I would say yes to a dirty flag, but have a warning that it isn't exactly supported. There are a lot of functionality there that is only meant to be used in conjunction with some careful usage.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586440640:173,message,message,173,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586440640,1,['message'],['message']
Integrability,"You may have found a memory allocation/usage bug. What kind of; computation is this?. Unfortunately we don't really have a way to estimate scratch usage at; present. It's a feature we'd like to add, but it needs to be added for; every module separately, so is a somewhat daunting task. In principle, can; be known ahead of time based on number of basis functions, number of atoms,; etc., but is different for every method (and sometimes depends on the; particular algorithm used within that method). On Mon, Aug 24, 2020 at 5:55 PM David Slochower <notifications@github.com>; wrote:. > I see memory usage significantly above psi4.set_memory() limit. I do see; > the note in the documentation that memory usage might be *slightly*; > higher, but if I even request within 20% of a node's total memory; > (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now,; > running with psi4.set_memory(""200 GB""), I see persistent VIRT usage of; > 259 GB and RES 256 GB. I know that determining the *actual* amount of memory; > consumed by a process is tricky; > <https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process>,; > but this is important to me to prevent the scheduler from killing my jobs.; > After some troubleshooting, I am requesting 300 GB from the scheduler, but; > 200 GB from psi4, and end up with ~260 GB used. Is this expected?; >; > Relatedly, but separate, is there a way to estimate what the scratch file; > size may be? I was planning to use node-local storage until I found out my; > scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead; > of time (number of atoms × level of theory × some magic thing?); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1985>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5WFYJDHW36AZTXMGCDSCLOVDANCNFSM4QJ6TFCA>; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520:437,depend,depends,437,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520,1,['depend'],['depends']
Integrability,"You mean a standard format for point charge files for QMMM? Not that I know of. ; I know the AMBER QM/MM interface a bit, and there are all kinds of formats for different QM programs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625897093,1,['interface'],['interface']
Integrability,"You might also consider putting a check in the Libxc interface. If the code can dump out the density data for the points yielding NaNs, this would be valuable information for filing bugs in Libxc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1158381577:53,interface,interface,53,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1158381577,1,['interface'],['interface']
Integrability,"You're completely correct. The first version of MRPT2 was forked from the MRCCSD code, and used an out-of-core sort. However, not all integrals are needed in MP2, so it's quite wasteful to sort all integrals and only use a subset, which inspired us to write an integral direct version. When the CINTS code from Psi3 was replaced, this integral direct code didn't make it into Psi4. It should be quite easy for me to write a density fitted version, which is an even better approach. I have a few other things to do first, but I'll reply to this message when the code is done. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/30#issuecomment-32127370:544,message,message,544,https://psicode.org,https://github.com/psi4/psi4/issues/30#issuecomment-32127370,1,['message'],['message']
Integrability,"Your read of the paper sounds right to me. I think a better fix would be to temporarily unset `freeze_core` if it's been set, print a warning message, carry through with the computation, and then set it back. I'll wait to hear back from the author of the Psi implementation before making any changes, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462818976:142,message,message,142,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462818976,1,['message'],['message']
Integrability,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059613:375,INTERFACE,INTERFACE,375,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613,3,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"Yup. And no changes to dependency lists either; no qcengine. And yes, this is with Python 3.11 in Fedora rawhide.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203221687:23,depend,dependency,23,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203221687,1,['depend'],['dependency']
Integrability,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:373,depend,dependencies,373,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,2,['depend'],['dependencies']
Integrability,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ___________________",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3295,message,message,3295,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['message'],['message']
Integrability,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/qcdb/molecule.py:1298: in run_dftd3; verbose=verbose); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:10261,rout,routine,10261,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability,_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12; 154/415 Test #9: castup2 .......................... Passed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....................... Passed 116.86 sec; Start 38: cc21; 162/415 Test #19: cbs-xtpl-nbody ..............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:14527,wrap,wrapper,14527,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,_xc : 10.133u 0.133s 6.536w 33504 calls; SAPT(DFT): Monomer B DFT : 28.650u 0.350s 17.421w 1 calls; SAPT(DFT):SAPT(DFT):JK : 0.250u 0.000s 0.149w 1 calls; SAPT(DFT):SAPT(DFT):elst : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):exch : 0.200u 0.000s 0.126w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; DFH: transform() : 0.117u 0.017s 0.075w 1 calls; DFH: Total Workflow : 0.033u 0.000s 0.021w 6 calls; DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; DF Integrals : 0.767u 0.083s 0.514w 1 calls; W Integrals : 0.000u 0.000s 0.001w 1 calls; Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. -----------------------------------------------------------; SAPT(DFT): Dimer SCF : 2.883u 0.033s 1.795w 1 calls; | JK: (A|mn) : 0.683u 0.000s 0.418w 1 calls; | JK: (A|Q)^-1/2 : 0.083u 0.000s 0.053w 1 calls; | JK: (Q|mn) : 0.100u 0.017s 0.062w 1 calls; | HF: Form H : 0.017u 0.000s 0.006w 1 calls; | HF: Form S/X : 0.000u 0.000s 0.002w 1 calls; | HF: Guess : 0.133u 0.000s 0.089w 1 calls; | | SAD Guess : 0.133u 0.000s 0.087w 1 calls; | HF: Form G : 0.517u 0.000s 0.309w 11 calls; | | JK: D : 0.000u 0.000s 0.000w 11 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 11 calls; | | JK: JK : 0.517u 0.000s 0.308w 11 calls; | | | JK: J : 0.033u 0.000s 0.027w 11 calls; | | | | JK: J1 : 0.017u 0.000s 0.014w 11 calls; | | | | JK: J2 : 0.017u 0.000s 0.013w 11 calls; | | | JK:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:2918,Contract,Contractions,2918,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,1,['Contract'],['Contractions']
Integrability,"`DESTDIR` hasn't been part of Psi4 cmake for a few years since it was updated for Windows compatibility. Looking through some docs, I see it can have influence if set as an environment variable. That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186:280,rout,routes,280,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186,1,['rout'],['routes']
Integrability,"``` CMAKE_INSTALL_DATADIR=share```. %%DATADIR%% is not a literal, this is just an error message with substituted tokens. ```%%DATADIR%%=/usr/local/share/psi4```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214286601:88,message,message,88,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214286601,1,['message'],['message']
Integrability,"```; $ ctest -R cubeprop-esp -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp ...................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:563,depend,dependency,563,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,2,['depend'],['dependency']
Integrability,"```; $ ctest -R json-schema_0_properties -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:575,depend,dependency,575,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,2,['depend'],['dependency']
Integrability,"```; >>> ""ijij->"".encode().decode(""latin-1""); 'ijij->'; >>> r""ijij->""; 'ijij->'; >>> ; ```. I would think it is rather the parsing. I tried to step through `get_combined_dims_view` in `einsum.c.src` but it is quite confusing. . At the beginning of the function, the value of `label` is `labels=0x3ffffffcdf8 ""i\377j\377\375\377\061\340""` for the `iijj` case and `labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340""` for the `ijij` case. Conversely, the value of `label` is 105 and 106 towards the end of the function for the `iijj`` case and 105 and 254 for the ""ijij"" case, the latter being the weird unicode character from the error message. At that point I see:. ```; 2135 if (combineoffset < 0 && new_dims[i] != 0 &&; (gdb) p i; $229 = 1023; (gdb) p label; $230 = 254; (gdb) p iop; $231 = 0; (gdb) p new_dims[i]; $232 = 4296307584; (gdb) n; 1502 return ((PyArrayObject_fields *)arr)->dimensions[idim];; (gdb) n; 2142 return NULL;; ```. which looks odd, and the `NULL` is part of the error message we see:. ```; if (combineoffset < 0 && new_dims[i] != 0 &&; new_dims[i] != PyArray_DIM(op, idim)) {; PyErr_Format(PyExc_ValueError,; ""dimensions in operand %d for collapsing ""; ""index '%c' don't match (%d != %d)"",; iop, label, (int)new_dims[i],; (int)PyArray_DIM(op, idim));; return NULL;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452041570:633,message,message,633,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452041570,2,['message'],['message']
Integrability,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:86,message,message,86,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705,1,['message'],['message']
Integrability,"```; execute_process(; COMMAND /bin/sh -c ""if test -t 1; then return 1; else return 0; fi""; RESULT_VARIABLE OUTPUT_IS_TERMINAL; OUTPUT_FILE /dev/stdout; ). message(""OUTPUT_IS_TERMINAL=${OUTPUT_IS_TERMINAL}""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2680#issuecomment-1213467412:156,message,message,156,https://psicode.org,https://github.com/psi4/psi4/issues/2680#issuecomment-1213467412,1,['message'],['message']
Integrability,"```; sapt4; 2016-02-16 10:46; SAPT incomplete wavefunction is only dimer SCF; SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places. An error has occurred Py-side; Traceback:; <class 'p4xcpt.TestComparisonError'>: SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places.: File ""<string>"", line 67, in <module>. File ""/Users/stanlen1/gitrepos/psi4/share/python/p4util/util.py"", line 100, in compare_values; raise TestComparisonError(message); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184840463:496,message,message,496,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184840463,1,['message'],['message']
Integrability,"```DESTDIR``` is **always** set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. psi4 build adds ```DESTDIR``` to its inner stage directory which causes this problem. > That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). What does this mean?; Every port uses DESTDIR to supply stage directory. It is super well tested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325649105:329,rout,routes,329,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325649105,1,['rout'],['routes']
Integrability,"`coldim` isn't a wavefunction attribute. It's the dimension of the columns of the orbital coefficient `Matrix` and is thus a `Matrix` attribute. Redundancy is not the problem here. The problem is that `nmopi_` is _wrong_. Why it's wrong is a deeper issue. The `common_init` code is called anytime a wavefunction is initialized, and it initializes all orbital spaces by assuming no linear dependences. This is reasonable if you can rely on the linear dependency checking code to be called later and to re-initialize orbital spaces if necessary. If you cannot (as in this case), you get this issue. My naive vote would be to move orbital space initialization out of `common_init` entirely. If you're initializing from a reference wavefunction that already has those spaces defined, there's no need to touch those. Otherwise, initialize MO spaces only once you have determined the number of MOs, i.e., after [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/hf.cc#L785).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560:388,depend,dependences,388,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560,2,['depend'],"['dependences', 'dependency']"
Integrability,"a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix that ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:1846,rout,routine,1846,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,1,['rout'],['routine']
Integrability,ad2 ..................... Passed 28.08 sec; Start 204: frac-ip-fitting; 71/404 Test #299: pywrap-alias ..................... Passed 36.56 sec; Start 250: omp2-5; 72/404 Test #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec; Start 249: omp2-4; 77/404 Test #242: ocepa-grad2 ...................... Passed 26.85 sec; Start 263: omp3-grad2; 78/404 Test #153: dfomp2p5-grad2 ................... Passed 20.54 sec; Start 170: dft1-alt; 79/404 Test #204: frac-ip-fitting .................. Passed 44.19 sec; Start 347: sapt-dft2; 80/404 Test #244: ocepa2 ........................... Passed 30.49 sec; Start 19: cbs-xtpl-wrapper; 81/404 Test #11: cbs-delta-energy ................. Passed 54.44 sec; Start 77: cc8; 82/404 Test #17: cbs-xtpl-opt ..................... Passed 56.20 sec; Start 43: cc28; 83/404 Test #249: omp2-4 ........................... Passed 21.37 sec; Start 147: dfomp3-2; 84/404 Test #263: omp3-grad2 ....................... Passed 20.20 sec; Start 107: dcft1; 85/404 Test #77: cc8 .............................. Passed 8.45 sec; Start 151: dfomp2p5-2; 86/404 Test #183: isapt2 ........................... Passed 47.88 sec; Start 46: cc30; 87/404 Test #147: dfomp3-2 ......................... Passed 14.61 sec; Start 276: opt11; 88/404 Test #151: dfomp2p5-2 ....................... Passed 13.89 sec; Start 82: cc9a; 89/404 Test #107: dcft1 ............................ Passed 14.95 sec; Start 371: dft-custom-dhdf; 90/404 Test #43: cc28 ............................. Passed 26.56 sec; Start 81: cc9; 91/404 Test #82: cc9a ............................. Passed 8.92 sec; Start 78: cc8a; 92/404 Test #46: cc30 ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:7615,wrap,wrapper,7615,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['wrap'],['wrapper']
Integrability,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198621819:110,Bridg,Bridge-E,110,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819,1,['Bridg'],['Bridge-E']
Integrability,"als are doubly occupied.; (""docc"" = ""doubly occupied""). Also, if you're doing a RAS, you need to tell the code the max number of; holes in RAS I, and the max number of particles in RAS III. I forget the; keywords off the top of my head. Additionally, if it's high-spin open-shell, at least to keep the SCF; straight (can't remember if DETCI needs this or not), you probably should; be specifying the symmetries of the singly occupied orbitals with the SOCC; keyword. There may or may not be some additional problems. On Tue, Aug 13, 2019 at 6:42 AM Susi Lehtola <notifications@github.com>; wrote:. > The following input fails with a segfault; >; > molecule {; > 0 5; > Fe; > }; >; > set basis pcseg-0; > set reference rohf; > set scf_type pk; > set mcscf_type conv; > # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]; >; > # Ar core; > set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; > # spd active space; > set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; > set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; > set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; > cas_e, cas_wfn = energy('rasscf', return_wfn=True); >; > # Dynamical correlation from Ar core; > set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; > set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; > ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); >; > There's something wrong in the input or the code, since there's an error; > message in the log file; >; > ==> Setting up CI strings <==; >; > There are 2730 alpha and 105 beta strings; > (subgr_lex_addr): Impossible walk!; > The CI space requires 18211 (1.82E+04) determinants and 44 blocks; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1693?email_source=notifications&email_token=AAXVA5TD2EJDK5M4KQ6Q5TTQEKFYNA5CNFSM4ILJOWVKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HE5Q2AQ>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AAXVA5QEYCCJVE5424DTXB3QEKFYNANCNFSM4ILJOWVA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260:1463,message,message,1463,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520830260,1,['message'],['message']
Integrability,"ary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1093,depend,dependencies,1093,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['depend'],['dependencies']
Integrability,asscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 13.43 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #10: castup3 .......................... Passed 9.55 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 15.41 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 9.22 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 34.00 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 27.35 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #278: opt13 ............................ Passed 937.76 sec; Start 20: cc1; 26/411 Test #11: cbs-delta-energy ................. Passed 87.39 sec; Start 21: cc10; 27/411 Test #20: cc1 .............................. Passed 39.26 sec; Start 22: cc11; 28/411 Test #21: cc10 ............................. Passed 16.76 sec; Start 23: cc12; 29/411 Test #316: sapt2 ............................ Passed 390.55 sec; Start 24: cc13; 30/411 Test #17: cbs-xtpl-opt ..................... Passed 79.98 sec; Start 26: cc13b; 31/411 Test #19: cbs-xtpl-wrapper ................. Passed 69.43 sec; Start 27: cc13c; 32/411 Test #23: cc12 ............................. Passed 22.65 sec; Start 28: cc13d; 33/411 Test #22: cc11 ............................. Passed 25.63 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 186.38 sec; Start 30: cc15; 35/411 Test #26: cc13b ............................ Passed 73.68 sec; Start 31: cc16; 36/411 Test #27: cc13c ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:2521,wrap,wrapper,2521,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['wrap'],['wrapper']
Integrability,asscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.82 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 221.87 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 28.09 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 42.99 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 275.86 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1945,wrap,wrapper,1945,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['wrap'],['wrapper']
Integrability,assed 11.23 sec; Start 229: mp2-grad2; 219/411 Test #206: ghosts ........................... Passed 34.53 sec; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.32 sec; Start 236: mpn-bh; 226/411 Test #235: mp2-property ..................... Passed 4.28 sec; Start 237: nbody-he-cluster; 227/411 Test #232: mp2p5-grad2 ...................... Passed 13.18 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 12.06 sec; Start 239: numpy-array-interface; 229/411 Test #226: mp2-1 ............................ Passed 30.19 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.80 sec; Start 241: ocepa-grad1; 231/411 Test #219: mints-benchmark .................. Passed 43.72 sec; Start 242: ocepa-grad2; 232/411 Test #236: mpn-bh ........................... Passed 7.46 sec; Start 243: ocepa1; 233/411 Test #204: frac-ip-fitting .................. Passed 80.74 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 18.49 sec; Start 245: ocepa3; 235/411 Test #241: ocepa-grad1 ...................... Passed 28.23 sec; Start 246: omp2-1; 236/411 Test #183: isapt2 ........................... Passed 136.14 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 36.59 sec; Start 248: omp2-3; 238/411 Test #246: omp2-1 ........................... Passed 16.61 sec; Start 249: omp2-4; 239/411 Test #237: nbody-he-cluster ................. Passed 71.20 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:21285,interface,interface,21285,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['interface'],['interface']
Integrability,assed 3.66 sec; Start 230: mp2-grad2; 220/412 Test #225: molden2 .......................... Passed 3.82 sec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Start 235: mp3-grad2; 225/412 Test #232: mp2p5-grad1 ...................... Passed 4.41 sec; Start 236: mp2-property; 226/412 Test #234: mp3-grad1 ........................ Passed 3.21 sec; Start 237: mpn-bh; 227/412 Test #233: mp2p5-grad2 ...................... Passed 6.31 sec; Start 238: nbody-he-cluster; 228/412 Test #227: mp2-1 ............................ Passed 10.68 sec; Start 239: nbody-intermediates; 229/412 Test #235: mp3-grad2 ........................ Passed 5.49 sec; Start 240: numpy-array-interface; 230/412 Test #236: mp2-property ..................... Passed 4.03 sec; Start 241: ocepa-freq1; 231/412 Test #240: numpy-array-interface ............ Passed 1.00 sec; Start 242: ocepa-grad1; 232/412 Test #237: mpn-bh ........................... Passed 4.64 sec; Start 243: ocepa-grad2; 233/412 Test #242: ocepa-grad1 ...................... Passed 11.23 sec; Start 244: ocepa1; 234/412 Test #244: ocepa1 ........................... Passed 5.71 sec; Start 245: ocepa2; 235/412 Test #239: nbody-intermediates .............. Passed 18.78 sec; Start 246: ocepa3; 236/412 Test #205: frac-ip-fitting .................. Passed 70.79 sec; Start 247: omp2-1; 237/412 Test #220: mints-benchmark .................. Passed 46.59 sec; Start 248: omp2-2; 238/412 Test #247: omp2-1 ........................... Passed 4.70 sec; Start 249: omp2-3; 239/412 Test #184: isapt2 ........................... Passed 124.89 sec; Start 250: omp2-4; 240/412 Test #238: nbody-he-cluster ................. Passed 44.71 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:21392,interface,interface,21392,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['interface'],['interface']
Integrability,"b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2464,depend,dependency,2464,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['depend'],['dependency']
Integrability,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:4891,depend,dependencies,4891,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['depend'],['dependencies']
Integrability,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:744,message,messages,744,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,1,['message'],['messages']
Integrability,c-sp .................... Passed 17.22 sec; Start 291: psimrcc-ccsd_t-3; 347/413 Test #223: mints9 ........................... Passed 2.09 sec; Start 364: x2c3; 348/413 Test #333: scf1 ............................. Passed 6.77 sec; Start 190: fci-tdm; 349/413 Test #224: mints10 .......................... Passed 2.65 sec; Start 97: cisd-h2o-clpse; 350/413 Test #222: mints-helper ..................... Passed 2.06 sec; Start 137: dfmp2-grad2; 351/413 Test #353: dft-reference .................... Passed 3.64 sec; Start 354: stability2; 352/413 Test #273: opt5 ............................. Passed 7.47 sec; Start 300: pubchem2; 353/413 Test #205: frac ............................. Passed 8.25 sec; Start 271: opt3; 354/413 Test #216: mints3 ........................... Passed 2.75 sec; Start 335: scf2; 355/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 3.01 sec; Start 356: tu2-ch2-energy; 356/413 Test #190: fci-tdm .......................... Passed 2.43 sec; Start 241: numpy-array-interface; 357/413 Test #364: x2c3 ............................. Passed 3.21 sec; Start 312: rasci-c2-active; 358/413 Test #181: fsapt2 ........................... Passed 5.35 sec; Start 351: sapt-sf1; 359/413 Test #97: cisd-h2o-clpse ................... Passed 2.35 sec; Start 331: scf-guess-read2; 360/413 Test #300: pubchem2 ......................... Passed 1.65 sec; Start 259: omp3-1; 361/413 Test #241: numpy-array-interface ............ Passed 0.85 sec; Start 347: dfep2-2; 362/413 Test #354: stability2 ....................... Passed 2.54 sec; Start 334: scf-occ; 363/413 Test #356: tu2-ch2-energy ................... Passed 1.48 sec; Start 87: cepa0-grad2; 364/413 Test #335: scf2 ............................. Passed 3.66 sec; Start 86: cepa0-grad1; 365/413 Test #351: sapt-sf1 ......................... Passed 2.53 sec; Start 218: mints5; 366/413 Test #347: dfep2-2 .......................... Passed 2.64 sec; Start 366: options1; 367/413 Test #388: cookbook-rohf-orb-rot ............ Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:33619,interface,interface,33619,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['interface'],['interface']
Integrability,"c.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. Th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:2670,wrap,wrapper,2670,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['wrap'],['wrapper']
Integrability,c; Start 77: cc8; 82/404 Test #17: cbs-xtpl-opt ..................... Passed 56.20 sec; Start 43: cc28; 83/404 Test #249: omp2-4 ........................... Passed 21.37 sec; Start 147: dfomp3-2; 84/404 Test #263: omp3-grad2 ....................... Passed 20.20 sec; Start 107: dcft1; 85/404 Test #77: cc8 .............................. Passed 8.45 sec; Start 151: dfomp2p5-2; 86/404 Test #183: isapt2 ........................... Passed 47.88 sec; Start 46: cc30; 87/404 Test #147: dfomp3-2 ......................... Passed 14.61 sec; Start 276: opt11; 88/404 Test #151: dfomp2p5-2 ....................... Passed 13.89 sec; Start 82: cc9a; 89/404 Test #107: dcft1 ............................ Passed 14.95 sec; Start 371: dft-custom-dhdf; 90/404 Test #43: cc28 ............................. Passed 26.56 sec; Start 81: cc9; 91/404 Test #82: cc9a ............................. Passed 8.92 sec; Start 78: cc8a; 92/404 Test #46: cc30 ............................. Passed 23.04 sec; Start 69: cc51; 93/404 Test #19: cbs-xtpl-wrapper ................. Passed 39.85 sec; Start 292: psimrcc-fd-freq2; 94/404 Test #170: dft1-alt ......................... Passed 45.46 sec; Start 237: nbody-he-cluster; 95/404 Test #78: cc8a ............................. Passed 11.18 sec; Start 27: cc13c; 96/404 Test #81: cc9 .............................. Passed 11.79 sec; Start 1: adc1; 97/404 Test #347: sapt-dft2 ........................ Passed 45.78 sec; Start 79: cc8b; 98/404 Test #276: opt11 ............................ Passed 30.65 sec; Start 65: cc48; 99/404 Test #79: cc8b ............................. Passed 6.52 sec; Start 80: cc8c; 100/404 Test #27: cc13c ............................ Passed 17.28 sec; Start 30: cc15; 101/404 Test #80: cc8c ............................. Passed 10.62 sec; Start 256: omp2p5-grad2; 102/404 Test #69: cc51 ............................. Passed 28.59 sec; Start 63: cc46; 103/404 Test #371: dft-custom-dhdf .................. Passed 41.90 sec; Start 68: cc50; 104/404 Test #1: a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:8712,wrap,wrapper,8712,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['wrap'],['wrapper']
Integrability,"change the wording if there's a suggestion.) This error message _is_ raised, but because the parser tries all formats (e.g., xyz, psi4) in turn, when it fails them all, it raises an error message with the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under [psi4, xyz, xyz+, psi4+]:; H6 1.51000000 0.78000000 0 44000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:1124,message,message,1124,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,1,['message'],['message']
Integrability,"class, it is important that the implementation be as efficient and maintainable as possible. In that respect, I think there are some general improvements to be made:; > ; > The way you've structured incremental Fock keeps eight lists of matrices attached to each `JK` object: copies of the previous `J`, `K`, `wK`, and `D` matrices, and differences between the last two iterations `J`, `K`, `wK`, `D`. In the interest of efficiency, I think it would be best to not store these matrices. Incremental Fock as implemented in the `DFJCOSK` class is a little better about this. That code adds the difference in `J`/`K`/`wK` to the appropriate buffer, which is not zeroed out between SCF iterations. This requires keeping only one list of matrices, the previous iteration `D`, which in my opinion is cleaner. (I have some thoughts on getting around storing the previous `D` matrix too.); > ; > Speaking more broadly about the design of the `JK` class, one valuable aspect of the `JK` class is that it is stateless and decoupled from the SCF procedure. `JK` classes have a well-defined [interface](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L175-L209). The variables like `incfock_count_` that you've proposed adding to the `JK` class break this statelessness, and my opinion that kind of logic should be in the SCF driver, not the `JK` object.; > ; > Let me know if any of these thoughts are unclear. I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. The scope of this PR is to fix the numerical instabilities of `incfock` in COSX. Per @davpoolechem, using `incfock` on COSX indeed leads to significant time savings on larger systems, even if it is always OFF by default for the last iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623:1296,interface,interface,1296,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623,1,['interface'],['interface']
Integrability,d 1.52 sec; Start 229: mp2-grad2; 234/411 Test #229: mp2-grad2 ........................ Passed 1.88 sec; Start 230: mp2-module; 235/411 Test #230: mp2-module ....................... Passed 35.05 sec; Start 231: mp2p5-grad1; 236/411 Test #231: mp2p5-grad1 ...................... Passed 1.53 sec; Start 232: mp2p5-grad2; 237/411 Test #232: mp2p5-grad2 ...................... Passed 1.75 sec; Start 233: mp3-grad1; 238/411 Test #233: mp3-grad1 ........................ Passed 1.47 sec; Start 234: mp3-grad2; 239/411 Test #234: mp3-grad2 ........................ Passed 1.76 sec; Start 235: mp2-property; 240/411 Test #235: mp2-property ..................... Passed 2.66 sec; Start 236: mpn-bh; 241/411 Test #236: mpn-bh ........................... Passed 3.13 sec; Start 237: nbody-he-cluster; 242/411 Test #237: nbody-he-cluster ................. Passed 25.31 sec; Start 238: nbody-intermediates; 243/411 Test #238: nbody-intermediates .............. Passed 9.70 sec; Start 239: numpy-array-interface; 244/411 Test #239: numpy-array-interface ............ Passed 0.74 sec; Start 240: ocepa-freq1; 245/411 Test #240: ocepa-freq1 ...................... Passed 47.05 sec; Start 241: ocepa-grad1; 246/411 Test #241: ocepa-grad1 ...................... Passed 2.50 sec; Start 242: ocepa-grad2; 247/411 Test #242: ocepa-grad2 ...................... Passed 8.81 sec; Start 243: ocepa1; 248/411 Test #243: ocepa1 ........................... Passed 2.08 sec; Start 244: ocepa2; 249/411 Test #244: ocepa2 ........................... Passed 17.07 sec; Start 245: ocepa3; 250/411 Test #245: ocepa3 ........................... Passed 9.75 sec; Start 246: omp2-1; 251/411 Test #246: omp2-1 ........................... Passed 1.19 sec; Start 247: omp2-2; 252/411 Test #247: omp2-2 ........................... Passed 4.05 sec; Start 248: omp2-3; 253/411 Test #248: omp2-3 ........................... Passed 3.58 sec; Start 249: omp2-4; 254/411 Test #249: omp2-4 ........................... Passed 10.52 sec; Start 250: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:22238,interface,interface,22238,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['interface'],['interface']
Integrability,d 2.87 sec; Start 314: sad1; 292/411 Test #108: dcft2 ............................ Passed 1.83 sec; Start 351: dft-reference; 293/411 Test #236: mpn-bh ........................... Passed 2.81 sec; Start 118: dfcasscf-fzc-sp; 294/411 Test #344: dfep2-1 .......................... Passed 2.76 sec; Start 3: casscf-fzc-sp; 295/411 Test #255: omp2p5-grad1 ..................... Passed 2.61 sec; Start 384: psi4numpy-rhf-hessian; 296/411 Test #314: sad1 ............................. Passed 2.30 sec; Start 137: dfmp2-grad4; 297/411 Test #269: opt3 ............................. Passed 3.64 sec; Start 120: dfccd1; 298/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.88 sec; Start 88: cepa2; 299/411 Test #241: ocepa-grad1 ...................... Passed 3.89 sec; Start 391: python-mints2; 300/411 Test #351: dft-reference .................... Passed 2.90 sec; Start 239: numpy-array-interface; 301/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.53 sec; Start 235: mp2-property; 302/411 Test #239: numpy-array-interface ............ Passed 0.65 sec; Start 388: python-curve; 303/411 Test #120: dfccd1 ........................... Passed 1.64 sec; Start 253: omp2p5-1; 304/411 Test #3: casscf-fzc-sp .................... Passed 3.57 sec; Start 119: dfcasscf-sp; 305/411 Test #88: cepa2 ............................ Passed 2.64 sec; Start 130: dfmp2-2; 306/411 Test #137: dfmp2-grad4 ...................... Passed 3.41 sec; Start 139: dfomp2-1; 307/411 Test #253: omp2p5-1 ......................... Passed 1.33 sec; Start 136: dfmp2-grad3; 308/411 Test #391: python-mints2 .................... Passed 2.45 sec; Start 284: props1; 309/411 Test #388: python-curve ..................... Passed 2.06 sec; Start 116: ao-dfcasscf-sp; 310/411 Test #119: dfcasscf-sp ...................... Passed 1.71 sec; Start 135: dfmp2-grad2; 311/411 Test #235: mp2-property ..................... Passed 2.60 sec; Start 225: mom; 312/411 Test #130: dfmp2-2 .......................... Passed 1.55 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:28137,interface,interface,28137,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['interface'],['interface']
Integrability,"d distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not; > a trivial task.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105224328.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1746,depend,dependencies,1746,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['depend'],['dependencies']
Integrability,"d still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 packa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1790,depend,dependency,1790,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['depend'],['dependency']
Integrability,"dentification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:4273,message,message,4273,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['message'],['message']
Integrability,"dern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00007f4312184000); 	libxc.so => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:1136,message,message,1136,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['message'],['message']
Integrability,"do something about it. . Basically, if it's a `method/basis` string, that gets parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring for it is kinda moot anyway. > ; > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete. This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:1456,interface,interface,1456,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,1,['interface'],['interface']
Integrability,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:936,depend,dependencies,936,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,2,['depend'],"['dependencies', 'dependency']"
Integrability,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,adapter,adapter,1081,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapter'],['adapter']
Integrability,e; pyqtchart 5.12 py37he336c9b_8 conda-forge; pyqtwebengine 5.12.1 py37he336c9b_8 conda-forge; pyrsistent 0.18.1 py37h5e8e339_0 conda-forge; pysocks 1.7.1 py37h89c1867_3 conda-forge; pytest 6.2.5 py37h06a4308_2 ; python 3.7.12 hb7a2778_100_cpython conda-forge; python-dateutil 2.8.2 pyhd3eb1b0_0 ; python_abi 3.7 2_cp37m conda-forge; pytz 2021.3 pyhd3eb1b0_0 ; pyyaml 6.0 py37h7f8727e_1 ; pyzmq 22.3.0 py37h336d617_1 conda-forge; qcelemental 0.24.0 pyhd8ed1ab_0 psi4; qcengine 0.23.0 pyhd8ed1ab_0 psi4; qt 5.12.9 h9d6b050_2 conda-forge; qtconsole 5.2.2 pyhd8ed1ab_1 conda-forge; qtconsole-base 5.2.2 pyhd8ed1ab_1 conda-forge; qtpy 2.0.1 pyhd8ed1ab_0 conda-forge; rdkit 2020.09.5 py37he53b9e1_0 conda-forge; readline 8.1 h46c0cb4_0 conda-forge; reportlab 3.5.67 py37hfdd840d_1 ; reproc 14.2.1 h36c2ea0_0 conda-forge; reproc-cpp 14.2.1 h58526e2_0 conda-forge; requests 2.25.1 pyhd3deb0d_0 conda-forge; ruamel_yaml 0.15.80 py37h5e8e339_1004 conda-forge; send2trash 1.8.0 pyhd8ed1ab_0 conda-forge; setuptools 49.6.0 py37h89c1867_3 conda-forge; simint 0.7 h642920c_1 psi4; six 1.15.0 pyh9f0ad1d_0 conda-forge; soupsieve 2.3.1 pyhd8ed1ab_0 conda-forge; sqlalchemy 1.4.32 py37h7f8727e_0 ; sqlite 3.38.0 hc218d9a_0 ; terminado 0.13.3 py37h89c1867_0 conda-forge; testpath 0.6.0 pyhd8ed1ab_0 conda-forge; tk 8.6.12 h27826a3_0 conda-forge; toml 0.10.2 pyhd3eb1b0_0 ; tornado 6.1 py37h5e8e339_2 conda-forge; tqdm 4.59.0 pyhd8ed1ab_0 conda-forge; traitlets 5.1.1 pyhd8ed1ab_0 conda-forge; typing-extensions 4.1.1 hd3eb1b0_0 ; typing_extensions 4.1.1 pyh06a4308_0 ; urllib3 1.26.3 pyhd8ed1ab_0 conda-forge; wcwidth 0.2.5 pyh9f0ad1d_2 conda-forge; webencodings 0.5.1 py_1 conda-forge; wheel 0.36.2 pyhd3deb0d_0 conda-forge; widgetsnbextension 3.6.0 py37h89c1867_0 conda-forge; wrapt 1.13.3 py37h7f8727e_2 ; xz 5.2.5 h516909a_1 conda-forge; yaml 0.2.5 h516909a_0 conda-forge; zeromq 4.3.4 h9c3ff4c_1 conda-forge; zipp 3.7.0 pyhd3eb1b0_0 ; zlib 1.2.11 h166bdaf_1014 conda-forge; zstd 1.5.2 ha95c52a_0 conda-forge; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:8795,wrap,wrapt,8795,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['wrap'],['wrapt']
Integrability,ec; Start 231: mp2-module; 221/412 Test #219: mints8 ........................... Passed 15.95 sec; Start 232: mp2p5-grad1; 222/412 Test #229: mp2-grad1 ........................ Passed 3.19 sec; Start 233: mp2p5-grad2; 223/412 Test #230: mp2-grad2 ........................ Passed 3.94 sec; Start 234: mp3-grad1; 224/412 Test #207: ghosts ........................... Passed 34.34 sec; Start 235: mp3-grad2; 225/412 Test #232: mp2p5-grad1 ...................... Passed 4.41 sec; Start 236: mp2-property; 226/412 Test #234: mp3-grad1 ........................ Passed 3.21 sec; Start 237: mpn-bh; 227/412 Test #233: mp2p5-grad2 ...................... Passed 6.31 sec; Start 238: nbody-he-cluster; 228/412 Test #227: mp2-1 ............................ Passed 10.68 sec; Start 239: nbody-intermediates; 229/412 Test #235: mp3-grad2 ........................ Passed 5.49 sec; Start 240: numpy-array-interface; 230/412 Test #236: mp2-property ..................... Passed 4.03 sec; Start 241: ocepa-freq1; 231/412 Test #240: numpy-array-interface ............ Passed 1.00 sec; Start 242: ocepa-grad1; 232/412 Test #237: mpn-bh ........................... Passed 4.64 sec; Start 243: ocepa-grad2; 233/412 Test #242: ocepa-grad1 ...................... Passed 11.23 sec; Start 244: ocepa1; 234/412 Test #244: ocepa1 ........................... Passed 5.71 sec; Start 245: ocepa2; 235/412 Test #239: nbody-intermediates .............. Passed 18.78 sec; Start 246: ocepa3; 236/412 Test #205: frac-ip-fitting .................. Passed 70.79 sec; Start 247: omp2-1; 237/412 Test #220: mints-benchmark .................. Passed 46.59 sec; Start 248: omp2-2; 238/412 Test #247: omp2-1 ........................... Passed 4.70 sec; Start 249: omp2-3; 239/412 Test #184: isapt2 ........................... Passed 124.89 sec; Start 250: omp2-4; 240/412 Test #238: nbody-he-cluster ................. Passed 44.71 sec; Start 251: omp2-5; 241/412 Test #248: omp2-2 ........................... Passed 17.52 sec; Start 252: omp2-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:21529,interface,interface,21529,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['interface'],['interface']
Integrability,ed 15.43 sec; Start 399: json-v11-gradient; 385/412 Test #381: psi4numpy-cphf ................... Passed 14.94 sec; Start 401: json-schema-1-ghost; 386/412 Test #384: psi4numpy-rhf-gradient ........... Passed 14.67 sec; Start 379: mints12; 387/412 Test #355: tu2-ch2-energy ................... Passed 14.64 sec; Start 310: pywrap-molecule; 388/412 Test #397: python-memdfjk ................... Passed 14.35 sec; Start 388: python-energy; 389/412 Test #405: json-schema-1-properties ......... Passed 14.49 sec; Start 335: scf3; 390/412 Test #215: mints3 ........................... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v11-gradient ................ Passed 14.86 sec; Start 212: mcscf3; 392/412 Test #379: mints12 .......................... Passed 14.63 sec; Start 383: psi4numpy-rhf; 393/412 Test #401: json-schema-1-ghost .............. Passed 15.23 sec; Start 210: mcscf1; 394/412 Test #310: pywrap-molecule .................. Passed 14.37 sec; Start 240: numpy-array-interface; 395/412 Test #388: python-energy .................... Passed 14.64 sec; Start 213: mints1; 396/412 Test #335: scf3 ............................. Passed 14.09 sec; Start 309: pywrap-db3; 397/412 Test #217: mints5 ........................... Passed 14.04 sec; Start 175: docs-bases; 398/412 Test #212: mcscf3 ........................... Passed 13.97 sec; Start 216: mints4; 399/412 Test #210: mcscf1 ........................... Passed 13.81 sec; Start 410: skeletonscf; 400/412 Test #383: psi4numpy-rhf .................... Passed 14.91 sec; Start 209: matrix1; 401/412 Test #240: numpy-array-interface ............ Passed 13.74 sec; Start 176: docs-dft; 402/412 Test #213: mints1 ........................... Passed 14.04 sec; Start 365: options1; 403/412 Test #309: pywrap-db3 ....................... Passed 13.36 sec; Start 403: json-schema-1-throws; 404/412 Test #175: docs-bases ....................... Passed 13.52 sec; Start 88: cepa1; 405/412 Test #216: mints4 ........................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:37077,interface,interface,37077,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['interface'],['interface']
Integrability,"eometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1760,Message,Message,1760,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['Message'],['Message']
Integrability,"ers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE_CXX_API=ON \; -D REQUIRE_CXX_API_COMPILED=OFF \; -D BUILD_TESTING=ON \; -D CMAKE_PREFIX_PATH=""/psi/toolchainconda/envs/singleboost;/psi/toolchainconda/envs/singlegmp;/psi/toolchainconda/envs/singleeigen"" \; -D ENABLE_MPFR=OFF \; -D LIBINT_LOCAL_EIGEN3_INSTALL=OFF \; -D CMAKE_CXX_COMPILER",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:2008,depend,dependency,2008,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['depend'],['dependency']
Integrability,est #302: pywrap-cbs1 ...................... Passed 30.77 sec; Start 91: cepa-module; 58/411 Test #316: sapt2 ............................ Passed 305.80 sec; Start 319: sapt5; 59/411 Test #58: cc41 ............................. Passed 36.59 sec; Start 69: cc51; 60/411 Test #230: mp2-module ....................... Passed 54.15 sec; Start 60: cc43; 61/411 Test #91: cepa-module ...................... Passed 23.95 sec; Start 167: dft-b3lyp; 62/411 Test #279: opt14 ............................ Passed 73.59 sec; Start 74: cc5a; 63/411 Test #60: cc43 ............................. Passed 20.33 sec; Start 204: frac-ip-fitting; 64/411 Test #317: sapt3 ............................ Passed 71.21 sec; Start 104: dcft-grad2; 65/411 Test #104: dcft-grad2 ....................... Passed 11.72 sec; Start 115: dcft9; 66/411 Test #74: cc5a ............................. Passed 36.60 sec; Start 292: psimrcc-fd-freq2; 67/411 Test #69: cc51 ............................. Passed 55.79 sec; Start 19: cbs-xtpl-wrapper; 68/411 Test #319: sapt5 ............................ Passed 62.74 sec; Start 144: dfomp2-grad2; 69/411 Test #115: dcft9 ............................ Passed 17.82 sec; Start 46: cc30; 70/411 Test #144: dfomp2-grad2 ..................... Passed 12.75 sec; Start 61: cc44; 71/411 Test #167: dft-b3lyp ........................ Passed 61.83 sec; Start 149: dfomp3-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 58.04 sec; Start 11: cbs-delta-energy; 73/411 Test #149: dfomp3-grad2 ..................... Passed 14.73 sec; Start 43: cc28; 74/411 Test #46: cc30 ............................. Passed 23.10 sec; Start 259: omp3-3; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 46.33 sec; Start 17: cbs-xtpl-opt; 76/411 Test #292: psimrcc-fd-freq2 ................. Passed 55.91 sec; Start 100: ci-property; 77/411 Test #61: cc44 ............................. Passed 42.92 sec; Start 389: python-pubchem; 78/411 Test #43: cc28 ............................. Passed 33.97 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:6525,wrap,wrapper,6525,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['wrap'],['wrapper']
Integrability,est #371: dft-custom-dhdf .................. Passed 87.91 sec; Start 279: opt14; 43/411 Test #240: ocepa-freq1 ...................... Passed 60.77 sec; Start 76: cc7; 44/411 Test #47: cc31 ............................. Passed 43.50 sec; Start 145: dfomp2-grad3; 45/411 Test #281: opt-irc-2 ........................ Passed 97.20 sec; Start 319: sapt5; 46/411 Test #317: sapt3 ............................ Passed 76.93 sec; Start 69: cc51; 47/411 Test #316: sapt2 ............................ Passed 359.14 sec; Start 167: dft-b3lyp; 48/411 Test #279: opt14 ............................ Passed 77.60 sec; Start 292: psimrcc-fd-freq2; 49/411 Test #319: sapt5 ............................ Passed 74.24 sec; Start 29: cc14; 50/411 Test #69: cc51 ............................. Passed 68.34 sec; Start 75: cc6; 51/411 Test #76: cc7 .............................. Passed 103.34 sec; Start 204: frac-ip-fitting; 52/411 Test #167: dft-b3lyp ........................ Passed 67.69 sec; Start 19: cbs-xtpl-wrapper; 53/411 Test #145: dfomp2-grad3 ..................... Passed 121.49 sec; Start 114: dcft8; 54/411 Test #29: cc14 ............................. Passed 41.75 sec; Start 61: cc44; 55/411 Test #292: psimrcc-fd-freq2 ................. Passed 66.23 sec; Start 74: cc5a; 56/411 Test #75: cc6 .............................. Passed 56.18 sec; Start 159: dft-grad-meta; 57/411 Test #19: cbs-xtpl-wrapper ................. Passed 49.61 sec; Start 24: cc13; 58/411 Test #204: frac-ip-fitting .................. Passed 62.23 sec; Start 297: pubchem1; 59/411 Test #61: cc44 ............................. Passed 50.54 sec; Start 17: cbs-xtpl-opt; 60/411 Test #74: cc5a ............................. Passed 53.95 sec; Start 100: ci-property; 61/411 Test #114: dcft8 ............................ Passed 75.09 sec; Start 280: opt-irc-1; 62/411 Test #159: dft-grad-meta .................... Passed 54.04 sec; Start 389: python-pubchem; 63/411 Test #297: pubchem1 ......................... Passed 54.36 sec; Start 28: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:5100,wrap,wrapper,5100,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['wrap'],['wrapper']
Integrability,est #372: dft-custom-dhdf .................. Passed 97.85 sec; Start 76: cc6; 63/412 Test #281: opt-irc-1 ........................ Passed 72.44 sec; Start 193: fd-freq-energy; 64/412 Test #280: opt14 ............................ Passed 89.89 sec; Start 260: omp3-3; 65/412 Test #70: cc51 ............................. Passed 73.29 sec; Start 320: sapt5; 66/412 Test #76: cc6 .............................. Passed 70.93 sec; Start 261: omp3-4; 67/412 Test #318: sapt3 ............................ Passed 90.41 sec; Start 231: mp2-module; 68/412 Test #260: omp3-3 ........................... Passed 33.57 sec; Start 17: cbs-xtpl-opt; 69/412 Test #193: fd-freq-energy ................... Passed 58.53 sec; Start 116: dcft9; 70/412 Test #317: sapt2 ............................ Passed 354.70 sec; Start 293: psimrcc-fd-freq2; 71/412 Test #261: omp3-4 ........................... Passed 31.51 sec; Start 21: cc1; 72/412 Test #116: dcft9 ............................ Passed 25.23 sec; Start 20: cbs-xtpl-wrapper; 73/412 Test #21: cc1 .............................. Passed 21.49 sec; Start 250: omp2-4; 74/412 Test #231: mp2-module ....................... Passed 55.07 sec; Start 19: cbs-xtpl-nbody; 75/412 Test #17: cbs-xtpl-opt ..................... Passed 47.15 sec; Start 251: omp2-5; 76/412 Test #250: omp2-4 ........................... Passed 22.47 sec; Start 205: frac-ip-fitting; 77/412 Test #320: sapt5 ............................ Passed 82.22 sec; Start 168: dft-b3lyp; 78/412 Test #251: omp2-5 ........................... Passed 18.07 sec; Start 62: cc44; 79/412 Test #19: cbs-xtpl-nbody ................... Passed 29.87 sec; Start 28: cc13c; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 52.36 sec; Start 145: dfomp2-grad2; 81/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.06 sec; Start 31: cc15; 82/412 Test #28: cc13c ............................ Passed 20.22 sec; Start 44: cc28; 83/412 Test #31: cc15 ............................. Passed 30.15 sec; Start 264: omp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:6928,wrap,wrapper,6928,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['wrap'],['wrapper']
Integrability,est #389: python-pubchem ................... Passed 53.08 sec; Start 61: cc44; 49/411 Test #111: dcft5 ............................ Passed 256.36 sec; Start 170: dft1-alt; 50/411 Test #61: cc44 ............................. Passed 68.38 sec; Start 100: ci-property; 51/411 Test #170: dft1-alt ......................... Passed 47.95 sec; Start 2: adc2; 52/411 Test #2: adc2 ............................. Passed 41.32 sec; Start 230: mp2-module; 53/411 Test #100: ci-property ...................... Passed 53.35 sec; Start 219: mints-benchmark; 54/411 Test #305: pywrap-checkrun-rohf ............. Passed 328.05 sec; Start 348: sapt-compare; 55/411 Test #219: mints-benchmark .................. Passed 40.12 sec; Start 38: cc23; 56/411 Test #348: sapt-compare ..................... Passed 43.18 sec; Start 131: dfmp2-3; 57/411 Test #230: mp2-module ....................... Passed 79.66 sec; Start 40: cc25; 58/411 Test #145: dfomp2-grad3 ..................... Passed 526.80 sec; Start 19: cbs-xtpl-wrapper; 59/411 Test #131: dfmp2-3 .......................... Passed 40.26 sec; Start 307: pywrap-db1; 60/411 Test #35: cc2 .............................. Passed 327.30 sec; Start 74: cc5a; 61/411 Test #307: pywrap-db1 ....................... Passed 39.70 sec; Start 17: cbs-xtpl-opt; 62/411 Test #41: cc26 ............................. Passed 280.38 sec; Start 29: cc14; 63/411 Test #19: cbs-xtpl-wrapper ................. Passed 77.77 sec; Start 42: cc27; 64/411 Test #74: cc5a ............................. Passed 97.39 sec; Start 276: opt11; 65/411 Test #318: sapt4 ............................ Passed 1909.66 sec; Start 47: cc31; 66/411 Test #276: opt11 ............................ Passed 105.52 sec; Start 273: opt7; 67/411 Test #17: cbs-xtpl-opt ..................... Passed 206.55 sec; Start 36: cc21; 68/411 Test #273: opt7 ............................. Passed 91.44 sec; Start 206: ghosts; 69/411 Test #110: dcft4 ............................ Passed 800.05 sec; Start 312: rasci-ne; 70/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:5705,wrap,wrapper,5705,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['wrap'],['wrapper']
Integrability,etkw3getINSt3__16vectorIiNS1_9allocatorIiEEEEEERKT_RKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEE; 0000000000005e10 S __ZNK5Getkw3getIbEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 00000000000060f0 S __ZNK5Getkw3getIdEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 0000000000005b30 S __ZNK5Getkw3getIiEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 00000000000016f0 T __ZNK5Getkw4reprERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEE; 0000000000001650 T __ZNK5Getkw5printEv; 00000000000017a0 T __ZNK5Getkw7getSectERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; U __ZTI10GetkwError; 000000000000bd10 S __ZTI5Getkw; 000000000000c7f8 S __ZTS5Getkw; 000000000000bcf0 S __ZTV5Getkw; 000000000000eb00 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE10BOOL_ARRAY; 000000000000ea40 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3DBL; 000000000000ea20 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3INT; 000000000000ea80 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3STR; 000000000000ea60 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4BOOL; 000000000000eaa0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4DATA; 000000000000eae0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9DBL_ARRAY; 000000000000eac0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9INT_ARRAY; 000000000000eb20 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9STR_ARRAY; 000000000000ea00 b __ZZN5Getkw8readlineERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_19basic_istringstreamIcS3_NS0_9allocatorIcEEEEE3buf; interfaces/lib/libgetkw.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171058175:5253,interface,interfaces,5253,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171058175,1,['interface'],['interfaces']
Integrability,"etonsointegrals .............. Passed 1.37 sec; Start 175: docs-dft; 390/411 Test #334: scf3 ............................. Passed 1.13 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.14 sec; Start 215: mints4; 392/411 Test #209: mcscf1 ........................... Passed 0.86 sec; Start 208: matrix1; 393/411 Test #354: tu2-ch2-energy ................... Passed 0.98 sec; Start 364: options1; 394/411 Test #382: psi4numpy-rhf .................... Passed 0.89 sec; Start 402: json-schema-1-throws; 395/411 Test #211: mcscf3 ........................... Passed 0.76 sec; Start 87: cepa1; 396/411 Test #309: pywrap-molecule .................. Passed 1.18 sec; 397/411 Test #216: mints5 ........................... Passed 1.01 sec; 398/411 Test #396: python-memdfjk ................... Passed 1.06 sec; 399/411 Test #212: mints1 ........................... Passed 0.85 sec; 400/411 Test #409: skeletonscf ...................... Passed 0.69 sec; 401/411 Test #239: numpy-array-interface ............ Passed 0.72 sec; 402/411 Test #174: docs-bases ....................... Passed 0.62 sec; 403/411 Test #175: docs-dft ......................... Passed 0.68 sec; 404/411 Test #215: mints4 ........................... Passed 0.63 sec; 405/411 Test #208: matrix1 .......................... Passed 0.56 sec; 406/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; 407/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 408/411 Test #364: options1 ......................... Passed 0.58 sec; 409/411 Test #87: cepa1 ............................ Passed 1.69 sec; 410/411 Test #18: cbs-xtpl-func .................... Passed 1416.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1680.10 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 56.67 sec*proc (2 tests); autotest = 2018.64 sec*proc (26 tests); cart = 19448.39 sec*proc (123 tests); cas = 58.63 sec*proc (1 test); casscf = 130.95 sec*proc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:37641,interface,interface,37641,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['interface'],['interface']
Integrability,"etry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert are finding for their computations that turn symmetry off (difference is because of my slightly perturbed geometry). And the dipole moment is pleasantly 0.000 debye, like it's supposed to be. . So, you guys are actually finding a symmetric solution when you use C1 (which is what's supposed to happen), and it's the correct-symmetry solution, unlike the C2v solution that Psi4 is falling into at this geometry. I take some small consolation in the fact that Q-Chem also finds the same C2v solution at 90 degrees, in my quick tests (with or without symmetry turned on). I don't know of a general strategy to teach Psi4 that D2 is a better choice in this case than C2v, because both are legitimate subgroups. And I don't think the idea of running everything in C1 is necessarily a good idea either, since then one is opened up to the possibility of getting unphysical symmetry breaking solutions like in the case of NO3. But, in this case, using symmetry also got us an unphysical symmetry-broken solution because we used the wrong point group. So, I'm not sure of a general strategy for all this, although I share the concern of @dgasmith that the behavior can be non-deterministic depending on small details that shouldn't matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:3180,depend,depending,3180,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['depend'],['depending']
Integrability,f-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411 Test #20: cc1 .............................. Passed 164.35 sec; Start 28: cc13d; 33/411 Test #11: cbs-delta-energy ................. Passed 341.48 sec; Start 29: cc14; 34/411 Test #26: cc13b ............................ Passed 204.38 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 209.71 sec; Start 31: cc16; 36/411 Test #13: cbs-xtpl-alpha ........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:2526,wrap,wrapper,2526,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['wrap'],['wrapper']
Integrability,f1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: options1; 388/413 Test #336: scf3 ............................. Passed 0.87 sec; Start 214: mints1; 389/413 Test #332: scf-bs ........................... Passed 1.06 sec; Start 211: mcscf1; 390/413 Test #216: mints3 ........................... Passed 1.11 sec; Start 177: docs-dft; 391/413 Test #223: mints9 ........................... Passed 2.13 sec; Start 162: dft-grac; 392/413 Test #347: dfep2-2 .......................... Passed 2.02 sec; Start 311: pywrap-molecule; 393/413 Test #8: castup1 .......................... Passed 1.50 sec; Start 310: pywrap-db3; 394/413 Test #213: mcscf3 ........................... Passed 0.90 sec; Start 176: docs-bases; 395/413 Test #217: mints4 ........................... Passed 0.61 sec; Start 210: matrix1; 396/413 Test #366: options1 ......................... Passed 0.61 sec; Start 103: cubeprop-frontier; 397/413 Test #241: numpy-array-interface ............ Passed 0.80 sec; Start 88: cepa1; 398/413 Test #214: mints1 ........................... Passed 0.75 sec; 399/413 Test #177: docs-dft ......................... Passed 0.62 sec; 400/413 Test #218: mints5 ........................... Passed 1.04 sec; 401/413 Test #212: mcscf2 ........................... Passed 1.45 sec; 402/413 Test #211: mcscf1 ........................... Passed 0.71 sec; 403/413 Test #300: pubchem2 ......................... Passed 1.60 sec; 404/413 Test #176: docs-bases ....................... Passed 0.57 sec; 405/413 Test #310: pywrap-db3 ....................... Passed 0.66 sec; 406/413 Test #210: matrix1 .......................... Passed 0.67 sec; 407/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; 408/413 Test #162: dft-grac ......................... Passed 1.48 sec; 409/413 Test #280: opt13 ............................ Passed 825.08 sec; 410/413 Test #103: cubeprop-frontier ................ Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:37319,interface,interface,37319,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['interface'],['interface']
Integrability,"few comments:. It's the ia32 (32bit) build, the x86_64 one is here:; https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=amd64&ver=1%3A1.2.1-1&stamp=1546603567&raw=0. > * no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`). Thanks, I thought I had removed them already. > * psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`). It is using python3, this must be some indirect dependency which I can do nothing about.; ; > * production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8. OK, I will look into that. > * I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`). Hrm right, I will take another look at building the manual, thanks for pointing that out. > * threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270. Ok, I'll try to run that during bulid as well. > * Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`). That one is likely due to 32bit: `tests/options1/input.dat` tried to allocate more than 4 GB in the last two attempts in the `check set_memory() wrapper` test; the same applies to `json-v11-energy` and `json_data[""memory""] = ""5GB""`. . So those are accounted for, the ones which are weird are the . ```; Exit Status: infile ( -11 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; failures. I've updated the packaging and am running a new build/test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762:1256,message,message,1256,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,"four/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'ccsd(t)'},; 'molecule': {'atom_labels': ['', '', ''],; 'atomic_numbers': [8, 1, 1],; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragments': [[0, 1, 2]],; 'geometry': [0.0,; 0.0,; -0.12403886030029525,; 0.0,; -1.431430901356359,; 0.9842933627189459,; 0.0,; 1.431430901356359,; 0.9842933627189459],; 'mass_numbers': [16, 1, 1],; 'masses': [15.99491461957,; 1.00782503223,; 1.00782503223],; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'H2O',; 'provenance': {'creator': 'QCElemental',; 'routine': 'qcelemental.molparse.from_string',; 'version': 'v0.24.0'},; 'real': [True, True, True],; 'schema_name': 'qcschema_molecule',; 'schema_version': 2,; 'symbols': ['O', 'H', 'H'],; 'validated': True},; 'provenance': {'cpu': 'Intel(R) Xeon(R) CPU E7-4870 v2 @ '; '2.30GHz',; 'creator': 'QCEngine',; 'hostname': 'nod10',; 'qcengine_version': 'v0.23.0',; 'username': 'tobias',; 'version': 'v0.23.0',; 'wall_time': 1.2955999374389648}},; 'success': False}; ```; ; Could you please help me what causes this error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:2995,rout,routine,2995,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['rout'],['routine']
Integrability,freq-energy ................... Passed 58.53 sec; Start 116: dcft9; 70/412 Test #317: sapt2 ............................ Passed 354.70 sec; Start 293: psimrcc-fd-freq2; 71/412 Test #261: omp3-4 ........................... Passed 31.51 sec; Start 21: cc1; 72/412 Test #116: dcft9 ............................ Passed 25.23 sec; Start 20: cbs-xtpl-wrapper; 73/412 Test #21: cc1 .............................. Passed 21.49 sec; Start 250: omp2-4; 74/412 Test #231: mp2-module ....................... Passed 55.07 sec; Start 19: cbs-xtpl-nbody; 75/412 Test #17: cbs-xtpl-opt ..................... Passed 47.15 sec; Start 251: omp2-5; 76/412 Test #250: omp2-4 ........................... Passed 22.47 sec; Start 205: frac-ip-fitting; 77/412 Test #320: sapt5 ............................ Passed 82.22 sec; Start 168: dft-b3lyp; 78/412 Test #251: omp2-5 ........................... Passed 18.07 sec; Start 62: cc44; 79/412 Test #19: cbs-xtpl-nbody ................... Passed 29.87 sec; Start 28: cc13c; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 52.36 sec; Start 145: dfomp2-grad2; 81/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.06 sec; Start 31: cc15; 82/412 Test #28: cc13c ............................ Passed 20.22 sec; Start 44: cc28; 83/412 Test #31: cc15 ............................. Passed 30.15 sec; Start 264: omp3-grad2; 84/412 Test #145: dfomp2-grad2 ..................... Passed 33.33 sec; Start 27: cc13b; 85/412 Test #62: cc44 ............................. Passed 57.63 sec; Start 390: python-pubchem; 86/412 Test #205: frac-ip-fitting .................. Passed 71.71 sec; Start 262: omp3-5; 87/412 Test #168: dft-b3lyp ........................ Passed 75.48 sec; Start 245: ocepa2; 88/412 Test #27: cc13b ............................ Passed 23.72 sec; Start 243: ocepa-grad2; 89/412 Test #264: omp3-grad2 ....................... Passed 24.30 sec; Start 257: omp2p5-grad2; 90/412 Test #44: cc28 ............................. Passed 51.88 sec; Start 150: dfomp3-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:7604,wrap,wrapper,7604,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['wrap'],['wrapper']
Integrability,"fyi, you can put `fixes psi4/psi4#281` in the commit message of one of the commits in the PR, then the issue will close when the PR gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189511708:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189511708,1,['message'],['message']
Integrability,"g (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2758,message,message,2758,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['message'],['message']
Integrability,"g noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdjLHuk3Pa0yVJNLncI2ChdXedn-Rks5vIbzcgaJpZM4aad4X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1159,contract,contracted,1159,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782,2,"['contract', 'depend']","['contracted', 'depends']"
Integrability,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2190,interface,interface,2190,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['interface'],['interface']
Integrability,"ghts reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in your electron density input file is adequate.; ; ******************** TIME CONTROL ********************; Finished check_grid_spacing in 0.11500000208616257 seconds; ******************************************************; ; ; ******************** TIME CONTROL ********************; Finished format_total_cube_density in 1.1610000133514404 seconds; ******************************************************; ; ncore = 0.0000; nvalence = 62.0000; pixelvolume = 4.0960E-03; numerically integrated valence density = 3.3967E+01; sum_valence_occupancy_correction = 0.0000E+00; checkme = 2.8033E+01; The electrons are not properly accounted for. ```. So here 28 electrons short in the cube of the 62 expected.... running on latest master:; ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.3a1.dev221. Git: Rev {master} 28a9a54. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:2479,integrat,integrated,2479,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['integrat'],['integrated']
Integrability,"gy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ---------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3078,message,message,3078,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['message'],['message']
Integrability,"helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:4607,message,message,4607,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['message'],['message']
Integrability,hema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 212: mints1; 399/411 Test #409: skeletonscf ...................... Passed 0.60 sec; Start 364: options1; 400/411 Test #239: numpy-array-interface ............ Passed 0.64 sec; Start 215: mints4; 401/411 Test #211: mcscf3 ........................... Passed 0.68 sec; Start 174: docs-bases; 402/411 Test #334: scf3 ............................. Passed 0.68 sec; Start 402: json-schema-1-throws; 403/411 Test #175: docs-dft ......................... Passed 0.66 sec; Start 87: cepa1; 404/411 Test #216: mints5 ........................... Passed 0.66 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36904,interface,interface,36904,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['interface'],['interface']
Integrability,"hon'); +sys.path.append(os.path.dirname(__file__) + '/../../../driver'); +#sys.path.append(os.environ.get('PSIDATADIR')+'/driver'); try:; import qcdb; except ImportError:; @@ -72,7 +72,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - dbse = raw_input(' dbse = ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2049,rout,route,2049,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,2,['rout'],['route']
Integrability,"http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting. Try that one... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 9:08 PM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > http://stackoverflow.com/questions; > ; > Would seem to confirm @bennybp is right.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > ; > On Aug 4, 2016 8:46 PM, ""Ben Pritchard"" notifications@github.com wrote:; > ; > > We might be talking about two different things. @loriab; > > https://github.com/loriab is talking about add_library, while I'm; > > talking about target_link_libraries.; > > ; > > This is my understanding (although someone can correct me if I'm wrong):; > > when doing a target_link_libraries, INTERFACE will only add it to the; > > library's interface. PUBLIC will actually make the project link to the; > > target library. Ie; > > ; > > target_link_libraries(mints PUBLIC erd); > > ; > > will add anything that is part of the erd's interface to mints (headers,; > > libraries, etc, declared INTERFACE or PUBLIC) to the mints project (files; > > will be compiled with erd's include directory, etc). It will also add erd; > > to mints interface (anything linked to mints will pull in the erd; > > includes). On the other hand; > > ; > > target_link_libraries(mints INTERFACE erd); > > ; > > will only add it to mint's interface (and not actually cause header; > > paths, etc, to be added to the command line for files in mints, but will be; > > added for libraries depending on mints).; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/pull/442#issuecomment-237727449, or mute; > > the thread; > > https://github.com/notifications/unsubscribe-auth/AFCRi4fOIlApdwffAQCnOh3vJtJFA7ADks5qcoffgaJpZM4JHR4P; > > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237730328:49,interface,interface-public-private-mean-in-cmake-target-compilation-setting,49,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237730328,9,"['INTERFACE', 'depend', 'interface']","['INTERFACE', 'depending', 'interface', 'interface-public-private-mean-in-cmake-target-compilation-setting']"
Integrability,"hub.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring for it is kinda moot anyway. > ; > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete. This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:1620,interface,interface,1620,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,1,['interface'],['interface']
Integrability,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3353,Integrat,Integration,3353,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,"['Integrat', 'rout']","['Integration', 'routines']"
Integrability,"id) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv::compute_gradient (this=0x7ffc67b35840); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/scf_grad.cc:249; #13 0x00007f21a9b3855d in psi::scfgrad::scfgrad (ref_wfn=..., options=...); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/wrapper.cc:46; #14 0x00007f21a841948d in py_psi_scfgrad (ref_wfn=...) at /home/work/psi4-1.9.1/psi4/src/core.cc:317; #15 0x00007f21a84ae799 in pybind11::detail::argument_loader<std::shared_ptr<psi::scf::HF> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (this=0x7ffc67b35f10, ; f=@0x56025a2cca88: 0x7f21a84193f0 <py_psi_scfgrad(std::shared_ptr<psi::scf::HF>)>); at /usr/include/pybind11/cast.h:1480; #16 0x00007f21a84a146f in pybind11::detail::argument_loader<std::shared_ptr<psi::scf::HF> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>)) && (this=0x7ffc67b35f10, ; f=@0x56025a2cca88: 0x7f21a84193f0 <py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:2229,wrap,wrapper,2229,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['wrap'],['wrapper']
Integrability,"in cc/ccdensity/ael.cc; This code determines approximate excitation level. It used to work.; Apparently no longer called. I'm not sure why.; (I'm not on the very latest psi4, so it's possible it's been excised. On Thu, Oct 6, 2022 at 8:39 PM TiborGY ***@***.***> wrote:. > As an old-timer, I would say yes, libciomr is the place. At least as long; > as there is still a libciomr, that's where I would look. This is nice; > improvement!; >; > ccdensity has a sq_rsp too. did you miss that one?; >; > I ran a search and none of the remaining hits were from ccdensity.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2686#issuecomment-1270997653>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TGYDX6IXCJ5SUMXZVLWB55NJANCNFSM56SE6U4Q>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686#issuecomment-1271795143:865,Message,Message,865,https://psicode.org,https://github.com/psi4/psi4/pull/2686#issuecomment-1271795143,1,['Message'],['Message']
Integrability,"index bdcda4962..000000000; --- a/cmake/custom_sanitize.cmake; +++ /dev/null; @@ -1,44 +0,0 @@; -if(ENABLE_ASAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - else(); - message(WARNING ""ASAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_TSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - else(); - message(WARNING ""TSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:3079,message,message,3079,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,4,['message'],['message']
Integrability,"ions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis sets into user-supplied `.gbs`'s (which is what I was doing for my systems anyway) and the CBS function will happily use them, as long as they match the regex.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1131,interface,interface,1131,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,2,"['depend', 'interface']","['dependent', 'interface']"
Integrability,irc-1; 74/413 Test #75: cc5a ............................. Passed 101.97 sec; Start 281: opt14; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 99.42 sec; Start 21: cc1; 76/413 Test #149: dfomp3-2 ......................... Passed 52.68 sec; Start 80: cc8b; 77/413 Test #246: ocepa2 ........................... Passed 63.98 sec; Start 158: dfomp2p5-grad2; 78/413 Test #17: cbs-xtpl-opt ..................... Passed 82.27 sec; Start 65: cc47; 79/413 Test #80: cc8b ............................. Passed 39.55 sec; Start 194: fd-freq-energy; 80/413 Test #21: cc1 .............................. Passed 62.73 sec; Start 64: cc46; 81/413 Test #281: opt14 ............................ Passed 79.81 sec; Start 35: cc19; 82/413 Test #373: dft-custom-dhdf .................. Passed 92.67 sec; Start 265: omp3-grad2; 83/413 Test #327: scf-bz2 .......................... Passed 127.64 sec; Start 109: dcft1; 84/413 Test #65: cc47 ............................. Passed 41.31 sec; Start 20: cbs-xtpl-wrapper; 85/413 Test #282: opt-irc-1 ........................ Passed 95.47 sec; Start 258: omp2p5-grad2; 86/413 Test #158: dfomp2p5-grad2 ................... Passed 61.57 sec; Start 144: dfomp2-4; 87/413 Test #35: cc19 ............................. Passed 58.05 sec; Start 319: sapt3; 88/413 Test #194: fd-freq-energy ................... Passed 85.55 sec; Start 82: cc9; 89/413 Test #64: cc46 ............................. Passed 87.60 sec; Start 153: dfomp2p5-2; 90/413 Test #207: frac-traverse .................... Passed 238.30 sec; Start 321: sapt5; 91/413 Test #258: omp2p5-grad2 ..................... Passed 77.83 sec; Start 294: psimrcc-fd-freq2; 92/413 Test #109: dcft1 ............................ Passed 84.01 sec; Start 67: cc49; 93/413 Test #144: dfomp2-4 ......................... Passed 69.24 sec; Start 79: cc8a; 94/413 Test #20: cbs-xtpl-wrapper ................. Passed 95.04 sec; Start 78: cc8; 95/413 Test #265: omp3-grad2 ....................... Passed 116.89 sec; Start 83: cc9a; 96/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:8170,wrap,wrapper,8170,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['wrap'],['wrapper']
Integrability,"ithout needing to edit anything. (I did have to use -DOpenMP_LIBRARY_DIRS to point at the Intel version of libiomp5.so.). I did get:. `No such TARGET ""OpenMP::OpenMP_C""` and `No such TARGET ""OpenMP::OpenMP_Fortran""`. in the cmake output but it built and (the few tests before I killed it) ran fine. As a further test, I've also tried enabling lots of other optional bits (ambit, CheMPS2, dkh, libefp, simint, gdma, PCMSolver, and snsmp2) to check whether the fortran error caused any issues with them. It looks like everything builds apart from ambit (which looks like it was only just re-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/build.make:106: recipe for target 'external/upstream/ambit/ambit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:1006,message,message,1006,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,1,['message'],['message']
Integrability,le ....................... Passed 75.42 sec; Start 151: dfomp3-grad2; 65/413 Test #170: dft1 ............................. Passed 105.14 sec; Start 58: cc40; 66/413 Test #75: cc5a ............................. Passed 70.15 sec; Start 19: cbs-xtpl-nbody; 67/413 Test #62: cc44 ............................. Passed 56.22 sec; Start 47: cc30; 68/413 Test #70: cc51 ............................. Passed 79.80 sec; Start 244: ocepa-grad2; 69/413 Test #183: fsapt-allterms ................... Passed 566.00 sec; Start 373: dft-custom-dhdf; 70/413 Test #252: omp2-5 ........................... Passed 67.36 sec; Start 282: opt-irc-1; 71/413 Test #151: dfomp3-grad2 ..................... Passed 66.98 sec; Start 17: cbs-xtpl-opt; 72/413 Test #47: cc30 ............................. Passed 68.93 sec; Start 265: omp3-grad2; 73/413 Test #244: ocepa-grad2 ...................... Passed 64.99 sec; Start 281: opt14; 74/413 Test #58: cc40 ............................. Passed 77.29 sec; Start 20: cbs-xtpl-wrapper; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 78.00 sec; Start 194: fd-freq-energy; 76/413 Test #327: scf-bz2 .......................... Passed 122.73 sec; Start 60: cc42; 77/413 Test #373: dft-custom-dhdf .................. Passed 91.90 sec; Start 246: ocepa2; 78/413 Test #282: opt-irc-1 ........................ Passed 84.38 sec; Start 319: sapt3; 79/413 Test #265: omp3-grad2 ....................... Passed 64.41 sec; Start 21: cc1; 80/413 Test #60: cc42 ............................. Passed 60.49 sec; Start 158: dfomp2p5-grad2; 81/413 Test #20: cbs-xtpl-wrapper ................. Passed 71.25 sec; Start 301: pywrap-alias; 82/413 Test #17: cbs-xtpl-opt ..................... Passed 84.79 sec; Start 294: psimrcc-fd-freq2; 83/413 Test #194: fd-freq-energy ................... Passed 71.76 sec; Start 321: sapt5; 84/413 Test #281: opt14 ............................ Passed 84.37 sec; Start 12: cbs-parser; 85/413 Test #246: ocepa2 ........................... Passed 62.00 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:7285,wrap,wrapper,7285,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['wrap'],['wrapper']
Integrability,"le is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2570,depend,dependency,2570,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,1,['depend'],['dependency']
Integrability,"lectron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 3; Number of AO shells: 12; Number of SO shells: 9; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 12 2 4 7 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 13773 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformatio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:7266,Wrap,Wrapper,7266,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Wrap'],['Wrapper']
Integrability,"liance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:1416,depend,depending,1416,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,1,['depend'],['depending']
Integrability,"libxc defines cam_alpha = full exact exchange and cam_beta = short-range only exact exchange.; So, in the long range you have cam_alpha, and in the short range you have cam_alpha+cam_beta. For N12-SX the code in libxc reads; ```; case XC_HYB_GGA_X_N12_SX:; params->CC = CC_N12_SX;; p->cam_alpha = 0.00;; p->cam_beta = 0.25;; p->cam_omega = 0.11;; ```; where cam_beta is the one you have above, and the minus sign comes from the convention used in Psi4. (You can define F = H0 + J(P) + K(P), or F = H0 + J(P) - K(P), depending how you define your exchange matirx. The former choice is more physical as it includes the minus sign within K.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/916#issuecomment-365321499:516,depend,depending,516,https://psicode.org,https://github.com/psi4/psi4/pull/916#issuecomment-365321499,1,['depend'],['depending']
Integrability,"line 81, in <module>; from .driver import endorsed_plugins; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/opt/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /opt/psi4/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZNK3psi12Wavefunction26tpdm_gradient_contributionEv; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1514132855674/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 51; The most recent 5 function calls were:. psi::plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&); py_psi_plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >); pybind11::cpp_function::dispatcher(_object*, _object*, _object*). forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002AC3069B82CD Unknown Unknown Unknown; libpthread.so.0 00002AC301BBD1F0 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC30148A0D1 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC3014847A6 Unknown Unknown Unknown; libdl.so.2 00002AC301DCB5EC Unknown Unknown Unknown; libdl.so.2 00002AC301DCB10F Unknown Unknown Unknown; core.so 00002AC303C6DC02 Unknown Unknown Unknown; core.so 00002AC303DC58E2 Unknown Unknown Unknown; core.so 00002AC303DE4A13 Unknown Unknown Unknown; core.so 00002AC303955DEC Unknown Unknown Unknown; libpython3.6m.so. 00002AC30175D1C9 Unknown Unknown Unknown; libpython3.6m.so. 00002AC301705E96 Unknown Unknown Unknown; libpython3.6m.so. 00002AC3018614B5 Unknown Unknown Unknown; libpython3.6m.so. 00002AC301810E03 Unknown Unknown Unknown; libpython3.6m.so. 00002AC30182F8FA Unknown Unknown Unknown; python 0000000000400C1D Unknown Unknown Unknown; libc.so.6 00002AC3026F9A15 Unknown Unknown Unknown; python 000000000040",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373052900:1359,Rout,Routine,1359,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373052900,1,['Rout'],['Routine']
Integrability,ls .............. Passed 0.89 sec; Start 293: psimrcc-pt2; 384/411 Test #210: mcscf2 ........................... Passed 1.22 sec; Start 378: mints12; 385/411 Test #411: skeletonwavefunction ............. Passed 0.92 sec; Start 309: pywrap-molecule; 386/411 Test #293: psimrcc-pt2 ...................... Passed 0.87 sec; Start 211: mcscf3; 387/411 Test #102: decontract ....................... Passed 1.19 sec; Start 396: python-memdfjk; 388/411 Test #229: mp2-grad2 ........................ Passed 1.47 sec; Start 214: mints3; 389/411 Test #298: pubchem2 ......................... Passed 1.42 sec; Start 382: psi4numpy-rhf; 390/411 Test #309: pywrap-molecule .................. Passed 1.08 sec; Start 209: mcscf1; 391/411 Test #378: mints12 .......................... Passed 1.17 sec; Start 188: fci-tdm; 392/411 Test #211: mcscf3 ........................... Passed 0.72 sec; Start 308: pywrap-db3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.79 sec; Start 239: numpy-array-interface; 394/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 409: skeletonscf; 395/411 Test #209: mcscf1 ........................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #188: fci-tdm .......................... Passed 0.71 sec; Start 364: options1; 397/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 212: mints1; 398/411 Test #214: mints3 ........................... Passed 1.04 sec; Start 402: json-schema-1-throws; 399/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 215: mints4; 400/411 Test #175: docs-dft ......................... Passed 0.58 sec; Start 216: mints5; 401/411 Test #239: numpy-array-interface ............ Passed 0.67 sec; Start 208: matrix1; 402/411 Test #364: options1 ......................... Passed 0.55 sec; Start 174: docs-bases; 403/411 Test #212: mints1 ........................... Passed 0.56 sec; Start 87: cepa1; 404/411 Test #402: json-schema-1-throws ............. Passed 0.56 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:36767,interface,interface,36767,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['interface'],['interface']
Integrability,ls; Properties : 51.000u 0.717s 30.270w 55840 calls; Functional : 16.767u 0.117s 10.525w 55840 calls; V_xc : 10.133u 0.133s 6.536w 33504 calls; SAPT(DFT): Monomer B DFT : 28.650u 0.350s 17.421w 1 calls; SAPT(DFT):SAPT(DFT):JK : 0.250u 0.000s 0.149w 1 calls; SAPT(DFT):SAPT(DFT):elst : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):exch : 0.200u 0.000s 0.126w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; DFH: transform() : 0.117u 0.017s 0.075w 1 calls; DFH: Total Workflow : 0.033u 0.000s 0.021w 6 calls; DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; DF Integrals : 0.767u 0.083s 0.514w 1 calls; W Integrals : 0.000u 0.000s 0.001w 1 calls; Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. -----------------------------------------------------------; SAPT(DFT): Dimer SCF : 2.883u 0.033s 1.795w 1 calls; | JK: (A|mn) : 0.683u 0.000s 0.418w 1 calls; | JK: (A|Q)^-1/2 : 0.083u 0.000s 0.053w 1 calls; | JK: (Q|mn) : 0.100u 0.017s 0.062w 1 calls; | HF: Form H : 0.017u 0.000s 0.006w 1 calls; | HF: Form S/X : 0.000u 0.000s 0.002w 1 calls; | HF: Guess : 0.133u 0.000s 0.089w 1 calls; | | SAD Guess : 0.133u 0.000s 0.087w 1 calls; | HF: Form G : 0.517u 0.000s 0.309w 11 calls; | | JK: D : 0.000u 0.000s 0.000w 11 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 11 calls; | | JK: JK : 0.517u 0.000s 0.308w 11 calls; | | | JK: J : 0.033u 0.000s 0.027w 11 calls; | ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:2814,Contract,Contraction,2814,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,1,['Contract'],['Contraction']
Integrability,ma-1-properties; 372/411 Test #298: pubchem2 ......................... Passed 1.36 sec; Start 309: pywrap-molecule; 373/411 Test #401: json-schema-1-orient ............. Passed 2.44 sec; Start 408: skeletonmointegrals; 374/411 Test #403: json-schema-1-gradient ........... Passed 2.11 sec; Start 410: skeletonsointegrals; 375/411 Test #330: scf-bs ........................... Passed 1.83 sec; Start 387: python-energy; 376/411 Test #378: mints12 .......................... Passed 1.28 sec; Start 354: tu2-ch2-energy; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:35941,interface,interface,35941,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['interface'],['interface']
Integrability,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2990,depend,dependency,2990,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,1,['depend'],['dependency']
Integrability,maybe a bkgd dependency like clang version changed such that mac isn't getting dftd4 3.6 but an oldr 3.3 hence the errors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018794586:13,depend,dependency,13,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018794586,1,['depend'],['dependency']
Integrability,"mentation_2018/en/debugger//gdb-igfx/info/; CC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-cc; XDG_RUNTIME_DIR=/run/user/1000; READELF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-readelf; GCC_AR=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gcc-ar; OBJDUMP=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-objdump; LESSCLOSE=/usr/bin/lesspipe %s %s; GPROF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10076,depend,dependencies,10076,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['depend'],['dependencies']
Integrability,mpmath is a required for one of the dependencies which was probably added sometime between your first cloning and your re-clone. . A couple of things: ; - Was the installation of mpmath successful? ; - Did you install into the base env or a different one? ; - Is that one active? ; - You can see if mpmath is available in the env that is active while you are trying to build by looking at the output from `conda list`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181157:36,depend,dependencies,36,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181157,1,['depend'],['dependencies']
Integrability,"mport qcdb; except ImportError:; @@ -72,7 +72,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - dbse = raw_input(' dbse = ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2099,rout,route,2099,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,2,['rout'],['route']
Integrability,"n before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solut",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1939,Message,Message,1939,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['Message'],['Message']
Integrability,"n easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdlnHpEnsW3uYECUYCgCd3NnmYLimks5q9TIfgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2212,interface,interface,2212,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,2,"['interface', 'message']","['interface', 'message']"
Integrability,"ndent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to wo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1179,integrat,integrating,1179,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['integrat'],['integrating']
Integrability,"ne 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4112,message,message,4112,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['message'],['message']
Integrability,"neat, thanks Andy! I started looking at the build/packaging for libecpint last week, so hopefully I can keep up with your interface progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802937537:122,interface,interface,122,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802937537,1,['interface'],['interface']
Integrability,"ng, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1880,Message,Message,1880,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['Message'],['Message']
Integrability,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:955,depend,dependency,955,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['depend'],['dependency']
Integrability,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1767,message,message,1767,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,3,['message'],['message']
Integrability,"nually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libraries) to set library folder path.; Then, Intel Compiler + Intel OMP libraries works even single thread calculation for dft-custom-gga test. Anyway, I am not sure why on",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:1135,message,message,1135,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['message'],['message']
Integrability,"odd, I know of the increased grid dependency from colleagues. But both qchem and Grimme's manual SCAN implementation in Turbomole do not seem to have NaN issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345775474:34,depend,dependency,34,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345775474,1,['depend'],['dependency']
Integrability,"ok, I just rebased this, rebuilt with all addons, and ran fulltests. I think it's ready. The interface to physconst may change soonish, but the values of the physical constants won't. after this merges, there'll need to be a pause on merges b/c I want to tag a `1.3a1` (since answers can change with constants).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1213#issuecomment-425678168:93,interface,interface,93,https://psicode.org,https://github.com/psi4/psi4/pull/1213#issuecomment-425678168,1,['interface'],['interface']
Integrability,"ok，thanks.在 2023年2月14日，上午6:34，Jonathon Misiewicz ***@***.***> 写道：﻿; @mars303 Is there still an issue here, or can we close this?. —Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2869#issuecomment-1428848043:245,Message,Message,245,https://psicode.org,https://github.com/psi4/psi4/issues/2869#issuecomment-1428848043,1,['Message'],['Message']
Integrability,"on.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp .....................***Failed 6.27 sec. 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cubeprop = 6.27 sec*proc (1 test); psi = 6.27 sec*proc (1 test). Total Test time (real) = 6.33 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:1756,message,message,1756,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,1,['message'],['message']
Integrability,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2343,depend,depend,2343,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,1,['depend'],['depend']
Integrability,"ose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3764,message,message,3764,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['message'],['message']
Integrability,"ou can also use libxc identifiers in Psi4 but the syntax is a bit more verbose (you need to define a Psi4-style functional). Yes, I agree that `xc = 'lda_x,lda_c_vwn_rpa'` is better in terms of readability. Thanks for letting me know!. > That does not suffice. In addition to setting the grid with e.g. mf.grids.atom_grid = (100,590) you need to turn pruning off explicitly with mf.grids.prune = None. I noticed that too which is why I had used it in the script I provided. > By defaults PySCF truncates basis functions to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1212,depend,dependencies,1212,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['depend'],['dependencies']
Integrability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3821,interface,interface,3821,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,p ........................ Passed 6.39 sec; Start 8: castup1; 22/411 Test #8: castup1 .......................... Passed 1.55 sec; Start 9: castup2; 23/411 Test #9: castup2 .......................... Passed 3.53 sec; Start 10: castup3; 24/411 Test #10: castup3 .......................... Passed 3.78 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 23.24 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 12.37 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 59.71 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.36 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 5.43 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 12.13 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 32.38 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 37.42 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 6.42 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 3.59 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 3.22 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 3.59 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 18.49 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 7.05 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 9.49 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 15.84 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 22.66 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 5.86 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:2986,wrap,wrapper,2986,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['wrap'],['wrapper']
Integrability,p ........................ Passed 6.75 sec; Start 8: castup1; 22/411 Test #8: castup1 .......................... Passed 1.50 sec; Start 9: castup2; 23/411 Test #9: castup2 .......................... Passed 4.01 sec; Start 10: castup3; 24/411 Test #10: castup3 .......................... Passed 4.07 sec; Start 11: cbs-delta-energy; 25/411 Test #11: cbs-delta-energy ................. Passed 28.35 sec; Start 12: cbs-parser; 26/411 Test #12: cbs-parser ....................... Passed 10.90 sec; Start 13: cbs-xtpl-alpha; 27/411 Test #13: cbs-xtpl-alpha ................... Passed 73.68 sec; Start 14: cbs-xtpl-energy; 28/411 Test #14: cbs-xtpl-energy .................. Passed 8.11 sec; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 6.02 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 11.17 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 33.93 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 39.62 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 8.61 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 4.22 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 4.24 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 4.36 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 21.72 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 8.83 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 11.97 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 18.77 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 29.63 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 8.11 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:3006,wrap,wrapper,3006,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['wrap'],['wrapper']
Integrability,"parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on getting adcc distributed via conda ourselves, so I guess one could just pull it from there as part of the usual psi4 installation procedure. If the interfacing is done on the python level as I described above and as I did in the PR so far, this should not introduce big changes. One could even easily make the dependency optional. I am happy to hear other suggestions, too :smile:. Since we have a mandatory binary blob (in the form of the `adccore` library) for the moment, building the code completely as part of the psi4 setup is not possible unfortunately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:2624,depend,dependency,2624,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['depend'],['dependency']
Integrability,"pends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should alwa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1048,depend,depending,1048,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['depend'],['depending']
Integrability,"place 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is nice, but the fringe cases I've seen where standard NULL fails to accomplish the same behavior are bit contrived. . I think those are the main features of C++11 that people would be using; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2688,wrap,wrapper,2688,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,1,['wrap'],['wrapper']
Integrability,"primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1097,Depend,Dependencies,1097,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,2,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2303,depend,dependencies,2303,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['depend'],['dependencies']
Integrability,"quickly added some (non-parallel) timers and @zachglick is correct:; ```; HF: Form G : 5.233u 0.133s 0.805w 10 calls; | JK: D : 0.000u 0.000s 0.000w 10 calls; | JK: USO2AO : 0.017u 0.000s 0.000w 10 calls; | JK: JK : 5.217u 0.133s 0.804w 10 calls; | | DFH: compute_JK() : 5.217u 0.133s 0.804w 10 calls; | | | DFH: Grabbing AOs : 0.000u 0.000s 0.000w 10 calls; | | | DFH: compute_J : 0.267u 0.000s 0.046w 10 calls; | | | DFH: compute_K : 4.867u 0.133s 0.756w 10 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 10 calls; PCM: compute_eMEP : 126.433u 0.417s 69.654w 11 calls; PCM: compute_PCM_type : 7.533u 0.000s 4.518w 11 calls; PCM: compute_V : 115.633u 0.000s 69.407w 11 calls; | PCM_V: contract : 0.000u 0.000s 0.000w 11 calls; | PCM_V: pot_int : 115.633u 0.000s 69.407w 11 calls; ```. This is an indole-benzene stack with DF-HF/MINIX and 4 threads, making the run time PCM bound.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438269712:682,contract,contract,682,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438269712,1,['contract'],['contract']
Integrability,"r pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:7846,message,message,7846,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['message'],['message']
Integrability,rc-1 ........................ Passed 116.92 sec; Start 204: frac-ip-fitting; 67/411 Test #91: cepa-module ...................... Passed 178.98 sec; Start 61: cc44; 68/411 Test #167: dft-b3lyp ........................ Passed 65.78 sec; Start 46: cc30; 69/411 Test #74: cc5a ............................. Passed 101.58 sec; Start 17: cbs-xtpl-opt; 70/411 Test #302: pywrap-cbs1 ...................... Passed 201.06 sec; Start 43: cc28; 71/411 Test #115: dcft9 ............................ Passed 163.68 sec; Start 104: dcft-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 73.44 sec; Start 230: mp2-module; 73/411 Test #61: cc44 ............................. Passed 90.14 sec; Start 19: cbs-xtpl-wrapper; 74/411 Test #46: cc30 ............................. Passed 123.09 sec; Start 159: dft-grad-meta; 75/411 Test #43: cc28 ............................. Passed 112.18 sec; Start 57: cc40; 76/411 Test #17: cbs-xtpl-opt ..................... Passed 138.99 sec; Start 297: pubchem1; 77/411 Test #19: cbs-xtpl-wrapper ................. Passed 90.48 sec; Start 389: python-pubchem; 78/411 Test #159: dft-grad-meta .................... Passed 52.62 sec; Start 100: ci-property; 79/411 Test #230: mp2-module ....................... Passed 122.41 sec; Start 65: cc48; 80/411 Test #18: cbs-xtpl-func .................... Passed 2286.51 sec; Start 2: adc2; 81/411 Test #297: pubchem1 ......................... Passed 56.65 sec; Start 11: cbs-delta-energy; 82/411 Test #104: dcft-grad2 ....................... Passed 167.43 sec; Start 59: cc42; 83/411 Test #389: python-pubchem ................... Passed 54.35 sec; Start 259: omp3-3; 84/411 Test #100: ci-property ...................... Passed 59.03 sec; Start 81: cc9; 85/411 Test #57: cc40 ............................. Passed 93.38 sec; Start 170: dft1-alt; 86/411 Test #2: adc2 ............................. Passed 41.64 sec; Start 149: dfomp3-grad2; 87/411 Test #65: cc48 ............................. Passed 82.20 sec; Start 153: dfomp2p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:7341,wrap,wrapper,7341,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['wrap'],['wrapper']
Integrability,"ream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow. Interestingly, the stand-alone version I built doesn't even link against libiomp5.so or and LAPACK or BLAS libraries (apart from the CUDA libraries):; ```; $ ldd gpu_dfcc.so; linux-vdso.so.1 (0x00007ffd6e3f1000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x0000151f3769b000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x0000151f37497000); librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x0000151f3728f000); libpython2.7.so.1.0 => /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0 (0x0000151f36d12000); libcublas.so.9.1 => /usr/lib/x86_64-linux-gnu/libcublas.so.9.1 (0x0000151f3377b000); libcusolver.so.9.1 => /usr/lib/x86_64-linux-gnu/libcusolver.so.9.1 (0x0000151f2e006000); libcudart.so.9.1 => /usr/lib/x86_64-linux-gnu/libcudart.so.9.1 (0x0000151f2dd98000); core.so => not found; libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x0000151f2da17000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x0000151f2d684000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x0000151f2d46c000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x0000151f2d0b2000); /lib64/ld-linux-x86-64.so.2 (0x0000151f37b7f000); libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x0000151f2ce94000); libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x0000151f2cc91000); ```; So it could be that some of these issues arise from dependencies that aren't actually needed. I could be wrong, mind!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:3342,depend,dependencies,3342,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,1,['depend'],['dependencies']
Integrability,"reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3204,interface,interface,3204,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['interface'],['interface']
Integrability,"right now nbody->cbs->singleresult is the only multilevel path implemented. it has the routing split btwn `SingleResult` and `CBSComputer` in the main task_planner.py https://github.com/dgasmith/psi4/blob/recursive/psi4/driver/task_planner.py#L149-L154 . nbody also has a separate processing step in its computer so that it first inits, takes a break for some logic, then spins up the next level (single or cbs) in `build_tasks`, which is a dummy fn in all other computers. I've got working locally the findif->cbs->singleresult multilevel path. this doesn't require intermediate logic, so the spinning up of the next step (cbs or singleresult) could be done internally to the FinDifComputer based on whether `method == 'cbs'` or not. This requires FinDifComputer to be aware that computers other than SingleResult exist. Organizationally, is it better to (a) keep the logic of CBSComputer vs SingleResult in task_planner and pass it to the Findifcomputer (possibly at the need to add build_tasks to FinDifComputer) or to (b) tuck it away within FinDifComputer? I'm thinking (a). Secondly, with using actual pydantic objects instead of dicts and turning on no-extras, Computers are objecting to formerly passed-through kwargs (e.g., `irrep` through cbs). At a first pass, I've been popping them in the Computer and explicitly passing them on where relevant. I'm thinking this is the wrong approach (again, why should cbs admit existence of findif). So my next approach would be to split up kwargs in task_planner and pass them on as relevant only within that file. (Leftover kwargs still passed into the computers -- pydantic will probably object, but the user meant something by them.). thoughts on any of this? @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-549948276:87,rout,routing,87,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-549948276,1,['rout'],['routing']
Integrability,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:0,rout,route,0,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968,4,['rout'],"['route', 'routines']"
Integrability,"s also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1820,message,message,1820,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['message'],['message']
Integrability,"s have stuff in src and built forms; ```; > cat ../psi4/metadata.py ; __version__ = '1.7'; __version_long = '1.7+6ce35a5'; __version_upcoming_annotated_v_tag = '1.8a1'. def version_formatter(dummy):; return '(inplace)'; > cat stage/lib/psi4/metadata.py ; __version__ = '1.7'; __version_branch_name = ''; __version_cmake = '1.7.0.0'; __version_is_clean = 'True'; __version_last_release = '1.7'; __version_long = '1.7+6ce35a5'; __version_prerelease = 'False'; __version_release = 'True'. def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans. if __name__ == '__main__':; print(version_formatter(formatstring='all')); ```. So I think tarballs are roughly still working. But I can totally believe that either I'm working in an edge case or the two of you have found one. My closest suspects:; * perhaps you're in a repo that isn't the psi repo. I bet that'd defeat https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L50 that switches the version logic from git to tarball; * that version logic is tested for release tarballs only, not tarballs of random commits; * the increasing dependency on qcengine (which arose long after the versioning system design) for finite difference and dispersion depends a lot on computing the psi4 (and other) versions. Hence the ""pull tags"" message. I can believe there's a way that communication breaks down. I'd suggest you compare commands and cat-ed files and see where the discrepancy in workflow/environment arises.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:4191,depend,dependency,4191,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,3,"['depend', 'message']","['dependency', 'depends', 'message']"
Integrability,sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.41 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 226.61 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 38.66 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 49.77 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 289.64 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1947,wrap,wrapper,1947,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['wrap'],['wrapper']
Integrability,scf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b; 23/411 Test #22: cc11 ............................. Passed 16.46 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 274.86 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 46.68 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 47.39 sec; Start 30: cc15; 27/411 Test #195: fd-freq-gradient-large ........... Passed 355.17 sec; Start 31: cc16; 28/411 Test #25: cc13a ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1949,wrap,wrapper,1949,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['wrap'],['wrapper']
Integrability,sed 3.08 sec; Start 364: tu1-h2o-energy; 131/415 Test #303: psimrcc-pt2 ...................... Passed 1.68 sec; Start 212: mcscf1; 132/415 Test #414: json-schema-1-gradient ........... Passed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13602,interface,interface,13602,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['interface'],['interface']
Integrability,"so depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to worry that he/she does. > Should adcc be distributed/build with psi4 in the end? (conda, cmake, etc.). Not sure what will work best. We are working on gett",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1281,interface,interface,1281,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['interface'],['interface']
Integrability,"so the environment is solvable on Linux:; ```conda create -n amber ambertools=20.9 python=3.7 blas=*=mkl gau2grid psi4/label/dev::libxc psi4/label/dev::psi4=1.4a2.dev1058 -c conda-forge -c defaults -c psi4/label/dev```. on Mac, I agree that `libgfortran` is the problem. it comes about b/c conda-forge pins on gfortran v4 and defaults on gfortran v3 (then there's various soversions and libgfortran versions, too). once upon a time, the pinning that was applied by run_exports was >3.0.1, but that's been narrowed to >3.0.1,<4.0.0 . there's still some old add-on packages with the former, so if I suppress the libgfortran pinning on psi4 itself (psi4=1.4a2.dev1084 for py37 at https://anaconda.org/psi4/psi4/files), then I can get an environment to solve with it and ambertools=20. of course, then the libgfortran.3.dylib is missing, but if I symlink (!) that to libgfortran.4.dylib, I can get some psi4 test cases to pass (gdma fails to load lib, while some dft is off a bit). altogether, not a satisfactory or safe fix. and libxc is both required and fortran, so I can't just build you a non-fortran psi4. so unless I think of something else, I think you just can't mix fortran dependencies when compiled against a mix of c-f and defaults pinnings. sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014:1180,depend,dependencies,1180,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014,1,['depend'],['dependencies']
Integrability,sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 255.04 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 101.66 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 311.67 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 122.44 sec; Start 31: cc16; 36/411 Test #30: cc15 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2526,wrap,wrapper,2526,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['wrap'],['wrapper']
Integrability,ssed 3.99 sec; Start 121: dfccdl1; 326/411 Test #257: omp3-1 ........................... Passed 4.41 sec; Start 377: pywrap-align-chiral; 327/411 Test #284: props1 ........................... Passed 5.03 sec; Start 4: casscf-semi; 328/411 Test #243: ocepa1 ........................... Passed 6.83 sec; Start 246: omp2-1; 329/411 Test #327: scf-guess-read1 .................. Passed 2.70 sec; Start 363: zaptn-nh2; 330/411 Test #377: pywrap-align-chiral .............. Passed 3.07 sec; Start 314: sad1; 331/411 Test #388: python-curve ..................... Passed 4.00 sec; Start 253: omp2p5-1; 332/411 Test #121: dfccdl1 .......................... Passed 4.11 sec; Start 397: json-v11-energy; 333/411 Test #363: zaptn-nh2 ........................ Passed 2.47 sec; Start 384: psi4numpy-rhf-hessian; 334/411 Test #246: omp2-1 ........................... Passed 4.32 sec; Start 239: numpy-array-interface; 335/411 Test #314: sad1 ............................. Passed 3.56 sec; Start 213: mints2; 336/411 Test #239: numpy-array-interface ............ Passed 0.68 sec; Start 328: scf-upcast-custom-basis; 337/411 Test #295: psithon1 ......................... Passed 9.99 sec; Start 391: python-mints2; 338/411 Test #397: json-v11-energy .................. Passed 4.06 sec; Start 119: dfcasscf-sp; 339/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.87 sec; Start 120: dfccd1; 340/411 Test #213: mints2 ........................... Passed 3.23 sec; Start 203: frac; 341/411 Test #328: scf-upcast-custom-basis .......... Passed 3.10 sec; Start 355: tu3-h2o-opt; 342/411 Test #253: omp2p5-1 ......................... Passed 6.90 sec; Start 210: mcscf2; 343/411 Test #4: casscf-semi ...................... Passed 8.94 sec; Start 116: ao-dfcasscf-sp; 344/411 Test #391: python-mints2 .................... Passed 2.70 sec; Start 406: skeletonaointegrals; 345/411 Test #119: dfcasscf-sp ...................... Passed 3.75 sec; Start 214: mints3; 346/411 Test #210: mcscf2 ........................... Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:31376,interface,interface,31376,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['interface'],['interface']
Integrability,st #149: dfomp3-grad2 ..................... Passed 123.25 sec; Start 69: cc51; 57/411 Test #26: cc13b ............................ Passed 128.87 sec; Start 75: cc6; 58/411 Test #30: cc15 ............................. Passed 109.80 sec; Start 386: cookbook-rohf-orb-rot; 59/411 Test #167: dft-b3lyp ........................ Passed 66.58 sec; Start 28: cc13d; 60/411 Test #299: pywrap-alias ..................... Passed 70.59 sec; Start 242: ocepa-grad2; 61/411 Test #47: cc31 ............................. Passed 162.25 sec; Start 20: cc1; 62/411 Test #24: cc13 ............................. Passed 309.67 sec; Start 31: cc16; 63/411 Test #280: opt-irc-1 ........................ Passed 96.64 sec; Start 17: cbs-xtpl-opt; 64/411 Test #204: frac-ip-fitting .................. Passed 68.08 sec; Start 100: ci-property; 65/411 Test #29: cc14 ............................. Passed 343.83 sec; Start 74: cc5a; 66/411 Test #278: opt13 ............................ Passed 797.72 sec; Start 19: cbs-xtpl-wrapper; 67/411 Test #359: tu6-cp-ne2 ....................... Passed 350.78 sec; Start 107: dcft1; 68/411 Test #292: psimrcc-fd-freq2 ................. Passed 76.46 sec; Start 159: dft-grad-meta; 69/411 Test #69: cc51 ............................. Passed 82.00 sec; Start 58: cc41; 70/411 Test #75: cc6 .............................. Passed 84.41 sec; Start 379: cc-module; 71/411 Test #242: ocepa-grad2 ...................... Passed 79.99 sec; Start 91: cepa-module; 72/411 Test #100: ci-property ...................... Passed 63.75 sec; Start 61: cc44; 73/411 Test #159: dft-grad-meta .................... Passed 50.20 sec; Start 297: pubchem1; 74/411 Test #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:6558,wrap,wrapper,6558,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['wrap'],['wrapper']
Integrability,st #253: mbis-1 ........................... Passed 10.77 sec; Start 258: mbis-6; 76/185 Test #258: mbis-6 ........................... Passed 16.06 sec; Start 259: mcscf1; 77/185 Test #259: mcscf1 ........................... Passed 2.04 sec; Start 262: mints1; 78/185 Test #262: mints1 ........................... Passed 1.93 sec; Start 263: mints2; 79/185 Test #263: mints2 ........................... Passed 3.59 sec; Start 272: mints10; 80/185 Test #272: mints10 .......................... Passed 2.30 sec; Start 274: molden1; 81/185 Test #274: molden1 .......................... Passed 3.07 sec; Start 275: molden2; 82/185 Test #275: molden2 .......................... Passed 2.82 sec; Start 284: mp2p5-grad1; 83/185 Test #284: mp2p5-grad1 ...................... Passed 2.74 sec; Start 288: mp2-property; 84/185 Test #288: mp2-property ..................... Passed 4.86 sec; Start 289: mpn-bh; 85/185 Test #289: mpn-bh ........................... Passed 3.94 sec; Start 302: numpy-array-interface; 86/185 Test #302: numpy-array-interface ............ Passed 1.88 sec; Start 305: olccd-grad2; 87/185 Test #305: olccd-grad2 ...................... Passed 8.44 sec; Start 306: olccd1; 88/185 Test #306: olccd1 ........................... Passed 3.32 sec; Start 310: omp2-2; 89/185 Test #310: omp2-2 ........................... Passed 6.22 sec; Start 314: omp2-grad1; 90/185 Test #314: omp2-grad1 ....................... Passed 3.07 sec; Start 317: omp2p5-2; 91/185 Test #317: omp2p5-2 ......................... Passed 6.67 sec; Start 320: omp3-1; 92/185 Test #320: omp3-1 ........................... Passed 3.05 sec; Start 328: opt1; 93/185 Test #328: opt1 ............................. Passed 6.47 sec; Start 348: opt-freeze-coords; 94/185 Test #348: opt-freeze-coords ................ Passed 6.55 sec; Start 351: phi-ao; 95/185 Test #351: phi-ao ........................... Passed 21.33 sec; Start 355: props4; 96/185 Test #355: props4 ........................... Passed 3.14 sec; Start 356: psimrcc-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:7939,interface,interface,7939,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['interface'],['interface']
Integrability,st #79: cc8a ............................. Passed 53.51 sec; Start 282: opt-irc-1; 88/413 Test #158: dfomp2p5-grad2 ................... Passed 80.48 sec; Start 20: cbs-xtpl-wrapper; 89/413 Test #81: cc8c ............................. Passed 52.58 sec; Start 17: cbs-xtpl-opt; 90/413 Test #21: cc1 .............................. Passed 86.44 sec; Start 78: cc8; 91/413 Test #82: cc9 .............................. Passed 67.08 sec; Start 34: cc18; 92/413 Test #142: dfomp2-2 ......................... Passed 51.07 sec; Start 319: sapt3; 93/413 Test #373: dft-custom-dhdf .................. Passed 90.03 sec; Start 321: sapt5; 94/413 Test #83: cc9a ............................. Passed 56.13 sec; Start 391: python-pubchem; 95/413 Test #265: omp3-grad2 ....................... Passed 78.67 sec; Start 194: fd-freq-energy; 96/413 Test #34: cc18 ............................. Passed 48.82 sec; Start 247: ocepa3; 97/413 Test #78: cc8 .............................. Passed 62.52 sec; Start 69: cc50; 98/413 Test #20: cbs-xtpl-wrapper ................. Passed 78.50 sec; Start 294: psimrcc-fd-freq2; 99/413 Test #282: opt-irc-1 ........................ Passed 94.89 sec; Start 50: cc33; 100/413 Test #327: scf-bz2 .......................... Passed 118.72 sec; Start 33: cc17; 101/413 Test #391: python-pubchem ................... Passed 60.41 sec; Start 63: cc45; 102/413 Test #319: sapt3 ............................ Passed 76.94 sec; Start 56: cc39; 103/413 Test #17: cbs-xtpl-opt ..................... Passed 105.69 sec; Start 206: frac-ip-fitting; 104/413 Test #321: sapt5 ............................ Passed 74.14 sec; Start 68: cc4a; 105/413 Test #69: cc50 ............................. Passed 50.27 sec; Start 101: ci-property; 106/413 Test #247: ocepa3 ........................... Passed 59.63 sec; Start 169: dft-b3lyp; 107/413 Test #50: cc33 ............................. Passed 44.16 sec; Start 275: opt7; 108/413 Test #63: cc45 ............................. Passed 27.72 sec; Start 150: dfomp3-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:9330,wrap,wrapper,9330,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['wrap'],['wrapper']
Integrability,t #313: rasci-h2o ........................ Passed 1.13 sec; Start 222: mints-helper; 376/413 Test #132: dfmp2-2 .......................... Passed 1.70 sec; Start 356: tu2-ch2-energy; 377/413 Test #329: scf-guess-read1 .................. Passed 1.55 sec; Start 8: castup1; 378/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 1.46 sec; Start 332: scf-bs; 379/413 Test #384: psi4numpy-rhf .................... Passed 0.97 sec; Start 216: mints3; 380/413 Test #380: mints12 .......................... Passed 1.30 sec; Start 336: scf3; 381/413 Test #104: decontract ....................... Passed 1.30 sec; Start 300: pubchem2; 382/413 Test #355: tu1-h2o-energy ................... Passed 1.26 sec; Start 212: mcscf2; 383/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.63 sec; Start 213: mcscf3; 384/413 Test #356: tu2-ch2-energy ................... Passed 0.86 sec; Start 218: mints5; 385/413 Test #330: scf-upcast-custom-basis .......... Passed 1.54 sec; Start 241: numpy-array-interface; 386/413 Test #351: sapt-sf1 ......................... Passed 1.06 sec; Start 217: mints4; 387/413 Test #222: mints-helper ..................... Passed 1.14 sec; Start 366: options1; 388/413 Test #336: scf3 ............................. Passed 0.87 sec; Start 214: mints1; 389/413 Test #332: scf-bs ........................... Passed 1.06 sec; Start 211: mcscf1; 390/413 Test #216: mints3 ........................... Passed 1.11 sec; Start 177: docs-dft; 391/413 Test #223: mints9 ........................... Passed 2.13 sec; Start 162: dft-grac; 392/413 Test #347: dfep2-2 .......................... Passed 2.02 sec; Start 311: pywrap-molecule; 393/413 Test #8: castup1 .......................... Passed 1.50 sec; Start 310: pywrap-db3; 394/413 Test #213: mcscf3 ........................... Passed 0.90 sec; Start 176: docs-bases; 395/413 Test #217: mints4 ........................... Passed 0.61 sec; Start 210: matrix1; 396/413 Test #366: options1 ......................... Passed 0.61 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:36254,interface,interface,36254,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['interface'],['interface']
Integrability,t #317: sapt3 ............................ Passed 76.93 sec; Start 69: cc51; 47/411 Test #316: sapt2 ............................ Passed 359.14 sec; Start 167: dft-b3lyp; 48/411 Test #279: opt14 ............................ Passed 77.60 sec; Start 292: psimrcc-fd-freq2; 49/411 Test #319: sapt5 ............................ Passed 74.24 sec; Start 29: cc14; 50/411 Test #69: cc51 ............................. Passed 68.34 sec; Start 75: cc6; 51/411 Test #76: cc7 .............................. Passed 103.34 sec; Start 204: frac-ip-fitting; 52/411 Test #167: dft-b3lyp ........................ Passed 67.69 sec; Start 19: cbs-xtpl-wrapper; 53/411 Test #145: dfomp2-grad3 ..................... Passed 121.49 sec; Start 114: dcft8; 54/411 Test #29: cc14 ............................. Passed 41.75 sec; Start 61: cc44; 55/411 Test #292: psimrcc-fd-freq2 ................. Passed 66.23 sec; Start 74: cc5a; 56/411 Test #75: cc6 .............................. Passed 56.18 sec; Start 159: dft-grad-meta; 57/411 Test #19: cbs-xtpl-wrapper ................. Passed 49.61 sec; Start 24: cc13; 58/411 Test #204: frac-ip-fitting .................. Passed 62.23 sec; Start 297: pubchem1; 59/411 Test #61: cc44 ............................. Passed 50.54 sec; Start 17: cbs-xtpl-opt; 60/411 Test #74: cc5a ............................. Passed 53.95 sec; Start 100: ci-property; 61/411 Test #114: dcft8 ............................ Passed 75.09 sec; Start 280: opt-irc-1; 62/411 Test #159: dft-grad-meta .................... Passed 54.04 sec; Start 389: python-pubchem; 63/411 Test #297: pubchem1 ......................... Passed 54.36 sec; Start 28: cc13d; 64/411 Test #24: cc13 ............................. Passed 61.45 sec; Start 58: cc41; 65/411 Test #17: cbs-xtpl-opt ..................... Passed 52.63 sec; Start 2: adc2; 66/411 Test #100: ci-property ...................... Passed 50.10 sec; Start 219: mints-benchmark; 67/411 Test #58: cc41 ............................. Passed 34.52 sec; Start 170: dft1-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:5494,wrap,wrapper,5494,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['wrap'],['wrapper']
Integrability,t ................ Passed 1.41 sec; Start 335: scf3; 386/412 Test #405: json-schema-1-properties ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Start 410: skeletonscf; 392/412 Test #406: skeleton ......................... Passed 1.57 sec; Start 175: docs-bases; 393/412 Test #383: psi4numpy-rhf .................... Passed 1.25 sec; Start 216: mints4; 394/412 Test #212: mcscf3 ........................... Passed 1.34 sec; Start 209: matrix1; 395/412 Test #210: mcscf1 ........................... Passed 1.13 sec; Start 403: json-schema-1-throws; 396/412 Test #240: numpy-array-interface ............ Passed 0.83 sec; Start 88: cepa1; 397/412 Test #355: tu2-ch2-energy ................... Passed 1.66 sec; 398/412 Test #365: options1 ......................... Passed 0.66 sec; 399/412 Test #335: scf3 ............................. Passed 1.37 sec; 400/412 Test #176: docs-dft ......................... Passed 0.77 sec; 401/412 Test #309: pywrap-db3 ....................... Passed 0.79 sec; 402/412 Test #189: fci-tdm .......................... Passed 1.52 sec; 403/412 Test #213: mints1 ........................... Passed 0.95 sec; 404/412 Test #407: skeletonaointegrals .............. Passed 1.98 sec; 405/412 Test #410: skeletonscf ...................... Passed 0.71 sec; 406/412 Test #175: docs-bases ....................... Passed 0.64 sec; 407/412 Test #209: matrix1 .......................... Passed 0.60 sec; 408/412 Test #403: json-schema-1-throws ............. Passed 0.61 sec; 409/412 Test #216: mints4 ........................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:37277,interface,interface,37277,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['interface'],['interface']
Integrability,"tagging @robertodr because of pcmsolver, but I assume it's an issue on psi4's side of the interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1656#issuecomment-670372487:90,interface,interface,90,https://psicode.org,https://github.com/psi4/psi4/issues/1656#issuecomment-670372487,1,['interface'],['interface']
Integrability,"th/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/liberd.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libsimint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libefp.dylib (compatibility version 0.0.0, current version 0.0.0); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib (compatibility version 1.0.0, current version 1.0.0); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libchemps2.2.dylib (compatibility version 2.0.0, current version 0.0.0); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```; - I can play a few tricks with `install_name_tool` to basically get rid of the dependency on `libLAPACK.dylib` and `libBLAS.dylib`. I did that by changing `core.so` to reference `libz` in their place:; ```; $ install_name_tool -change /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib libz.dylib core.so; $ install_name_tool -change /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib libz.dylib core.so; $ otool -L core.so; core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libpcm.1.dylib (compatibility version 1.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	@rpath/libgdma.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compati",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311749244:1642,depend,dependency,1642,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749244,1,['depend'],['dependency']
Integrability,"thanks, @konpat, this is mostly waiting on v1.3 tag before merge. what's hooked up at present is enough to collect sinf info for runs en masse, and I think that's the plan. Then use best-ways-to-sum-together findings to decide what `energy('sapt???')` should be defined (though I agree that something like `energy('sapt0-sinf')` is almost certainly wanted). would you want to add a paragraph about the sinf methods to https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/sapt.rst ? `.. include:: autodir_options_c/sapt__aio_cphf.rst` is how to auto-inject the read_options.cc blurb into the narrative docs. feel free to put any papers in the introduction.rst sections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629:558,inject,inject,558,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629,1,['inject'],['inject']
Integrability,"the (conventional or DF) integrals written to disk. This got; handled by some logic where necessary for scf_type = disk_df, apparently,; but did not get handled for mem_df. Works ok for ccenergy? It also needs conventional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:951,message,message,951,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['message'],['message']
Integrability,"thub.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE_CXX_API=ON \; -D REQUIRE_CXX_API_COMPILED=OFF \; -D BUILD_TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:1783,depend,dependencies,1783,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['depend'],['dependencies']
Integrability,"tonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 212: mints1; 399/411 Test #409: skeletonscf ...................... Passed 0.60 sec; Start 364: options1; 400/411 Test #239: numpy-array-interface ............ Passed 0.64 sec; Start 215: mints4; 401/411 Test #211: mcscf3 ........................... Passed 0.68 sec; Start 174: docs-bases; 402/411 Test #334: scf3 ............................. Passed 0.68 sec; Start 402: json-schema-1-throws; 403/411 Test #175: docs-dft ......................... Passed 0.66 sec; Start 87: cepa1; 404/411 Test #216: mints5 ........................... Passed 0.66 sec; 405/411 Test #208: matrix1 .......................... Passed 0.54 sec; 406/411 Test #212: mints1 ........................... Passed 0.53 sec; 407/411 Test #364: options1 ......................... Passed 0.54 sec; 408/411 Test #215: mints4 ........................... Passed 0.52 sec; 409/411 Test #174: docs-bases ....................... Passed 0.51 sec; 410/411 Test #402: json-schema-1-throws ............. Passed 0.54 sec; 411/411 Test #87: cepa1 ............................ Passed 1.69 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:37496,interface,interface,37496,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['interface'],['interface']
Integrability,"ub.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2867,wrap,wrap,2867,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['wrap'],['wrap']
Integrability,"uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day. thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge. I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547:39,integrat,integratorxx,39,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547,2,['integrat'],['integratorxx']
Integrability,"uration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/min",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2291,depend,dependencies,2291,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,1,['depend'],['dependencies']
Integrability,"utdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = output[""proc""].poll() == 0; > assert success, output[""stdout""] + output[""stderr""]; E AssertionError: SCF energy............................................................................FAILED; E Traceback (most recent call last):; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/bin/psi4"", line 333, in <module>; E exec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; =========================================================================================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8034,message,message,8034,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['message'],['message']
Integrability,"ution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1580,wrap,wrap,1580,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['wrap'],['wrap']
Integrability,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1416,integrat,integration,1416,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['integrat'],['integration']
Integrability,w 2 calls; RV: Form V : 51.150u 0.583s 31.023w 24 calls; Properties : 51.000u 0.717s 30.270w 55840 calls; Functional : 16.767u 0.117s 10.525w 55840 calls; V_xc : 10.133u 0.133s 6.536w 33504 calls; SAPT(DFT): Monomer B DFT : 28.650u 0.350s 17.421w 1 calls; SAPT(DFT):SAPT(DFT):JK : 0.250u 0.000s 0.149w 1 calls; SAPT(DFT):SAPT(DFT):elst : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):exch : 0.200u 0.000s 0.126w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; DFH: transform() : 0.117u 0.017s 0.075w 1 calls; DFH: Total Workflow : 0.033u 0.000s 0.021w 6 calls; DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; DF Integrals : 0.767u 0.083s 0.514w 1 calls; W Integrals : 0.000u 0.000s 0.001w 1 calls; Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. -----------------------------------------------------------; SAPT(DFT): Dimer SCF : 2.883u 0.033s 1.795w 1 calls; | JK: (A|mn) : 0.683u 0.000s 0.418w 1 calls; | JK: (A|Q)^-1/2 : 0.083u 0.000s 0.053w 1 calls; | JK: (Q|mn) : 0.100u 0.017s 0.062w 1 calls; | HF: Form H : 0.017u 0.000s 0.006w 1 calls; | HF: Form S/X : 0.000u 0.000s 0.002w 1 calls; | HF: Guess : 0.133u 0.000s 0.089w 1 calls; | | SAD Guess : 0.133u 0.000s 0.087w 1 calls; | HF: Form G : 0.517u 0.000s 0.309w 11 calls; | | JK: D : 0.000u 0.000s 0.000w 11 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 11 calls; | | JK: JK : 0.517u 0.000s 0.308w 11 c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:2761,Contract,Contraction,2761,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,1,['Contract'],['Contraction']
Integrability,"whoa, quite a lot of details to handle DFT xtpl -- thanks for working it all out!. > Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?. I'd do a minimum of cleanup here and save it for ddd in 1.5. > The fact that the DFT VV10 ENERGY contribution is included in DFT FUNCTIONAL TOTAL ENERGY is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Having VV10 follow the empirical dispersion pattern feels more natural to me. Can add a message warning that usage has changed whenever the var is called for a spell like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L624-L628",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952:687,message,message,687,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952,1,['message'],['message']
Integrability,"y makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue, but it sounds like an extra `rm -rf` or two gets the desired behavior?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:1588,depend,dependencies,1588,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,2,['depend'],['dependencies']
Integrability,"you want the dftd3-python pkg from conda-forge. I think you've got the executable/lib, but the qcengine interface uses the python bindings which are in a different package.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528087425:104,interface,interface,104,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528087425,1,['interface'],['interface']
Integrability,"you'd submit to psi4 with `input.protocols.native_files = ""all""` and then access the file _contents_ as `result.native_files[""grid_field.dat""]`, and that can be readily read into arrays. we don't have any grid-dependent qcvariables at present. adding those would probably need a pass that included MO cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384:33,protocol,protocols,33,https://psicode.org,https://github.com/psi4/psi4/issues/2307#issuecomment-929603384,2,"['depend', 'protocol']","['dependent', 'protocols']"
Modifiability," 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1394,variab,variable,1394,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['variab'],['variable']
Modifiability, - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5402,plugin,plugins,5402,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1398,plugin,plugins,1398,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,2,['plugin'],['plugins']
Modifiability," 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAIL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8490,variab,variable,8490,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['variab'],['variable']
Modifiability," 4.728530D-01 8.484700D-02; 1.932000D-01 7.632000D-03; D 1 1.00; 4.728530D-01 1.000000D+00; D 1 1.00; 1.932000D-01 1.000000D+00; D 1 1.00; 7.820000D-02 1.0000000; F 1 1.00; 4.064000D-01 1.000000D+00; F 1 1.00; 1.848000D-01 1.0000000. ****. I 0; I-ECP 4 28; g potential; 1; 2 1.00000000 0.00000000; s-g potential; 3; 2 40.03337600 49.98964900; 2 17.30057600 281.00655600; 2 8.85172000 61.41673900; p-g potential; 4; 2 15.72014100 67.41623900; 2 15.20822200 134.80769600; 2 8.29418600 14.56654800; 2 7.75394900 28.96842200; d-g potential; 4; 2 13.81775100 35.53875600; 2 13.58780500 53.33975900; 2 6.94763000 9.71646600; 2 6.96009900 14.97750000; f-g potential; 4; 2 18.52295000 -20.17661800; 2 18.25103500 -26.08807700; 2 7.55790100 -0.22043400; 2 7.59740400 -0.22164600. """""",; key=""basis"",; name=""ECP+valence"",; ). psi4.set_options(; {; ""e_convergence"": 1e-8,; ""d_convergence"": 1e-8,; }; ). psi4.core.set_output_file(""output_ecp_plus_valence.dat"", False). psi4.energy(""scf""); e1 = psi4.variable(""HF TOTAL ENERGY""). ### valence only; psi4.basis_helper(; """"""; assign aug-cc-pvtz; assign I noecp. [noecp]; I 0; S 11 1.00; 5.546500D+03 1.560000D-04; 8.382140D+02 9.860000D-04; 1.821870D+02 2.792000D-03; 3.121230D+01 -4.325100D-02; 1.953140D+01 2.341340D-01; 8.240990D+00 -7.509430D-01; 2.194550D+00 8.829680D-01; 1.109110D+00 4.620610D-01; 3.746410D-01 2.228600D-02; 1.770800D-01 -4.353000D-03; 8.106100D-02 1.102000D-03; S 11 1.00; 5.546500D+03 -7.300000D-05; 8.382140D+02 -5.080000D-04; 1.821870D+02 -1.158000D-03; 3.121230D+01 1.219300D-02; 1.953140D+01 -8.785400D-02; 8.240990D+00 3.382000D-01; 2.194550D+00 -5.765500D-01; 1.109110D+00 -4.092980D-01; 3.746410D-01 5.674590D-01; 1.770800D-01 6.124890D-01; 8.106100D-02 1.432310D-01; S 1 1.00; 3.746410D-01 1.000000D+00; S 1 1.00; 1.770800D-01 1.000000D+00; S 1 1.00; 1.001000D-01 1.000000D+00; S 1 1.00; 4.120000D-02 1.0000000; P 9 1.00; 1.889880D+02 5.850000D-04; 2.128680D+01 3.692300D-02; 1.003960D+01 -2.353240D-01; 3.451800D+00 3.414830D-01; 1.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760:3088,variab,variable,3088,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760,2,['variab'],['variable']
Modifiability," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21420,plugin,plugin,21420,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,4,['plugin'],['plugin']
Modifiability," >	 // => Auxiliary Basis Set <= //; 												 >	 std::shared_ptr<BasisSet> auxiliary = reference_->get_basisset(""DF_BASIS_SAPT"");; 												 >; // => Sizing <= //											 // => Sizing <= //. int nn = primary_->nbf();										 int nn = primary_->nbf();; 												 <; int na = Cocc0A->colspi()[0];									 int na = Cocc0A->colspi()[0];; int nb = Cocc0B->colspi()[0];									 int nb = Cocc0B->colspi()[0];; int nr = Cvir0A->colspi()[0];									 int nr = Cvir0A->colspi()[0];; int ns = Cvir0B->colspi()[0];									 int ns = Cvir0B->colspi()[0];; int nQ = auxiliary->nbf();										 int nQ = auxiliary->nbf();; size_t nrQ = nr * (size_t)nQ;									 size_t nrQ = nr * (size_t)nQ;; size_t nsQ = ns * (size_t)nQ;									 size_t nsQ = ns * (size_t)nQ;. int nT = 1;												 int nT = 1;; #ifdef _OPENMP												#ifdef _OPENMP; nT = Process::environment.get_n_threads();								 nT = Process::environment.get_n_threads();; #endif													#endif. // => Stashed Variables <= //									 // => Stashed Variables <= //. std::shared_ptr<Matrix> S = matrix_cache[""S""];							 std::shared_ptr<Matrix> S = matrix_cache[""S""];; std::shared_ptr<Matrix> D_A = matrix_cache[""D_A""];						 <; std::shared_ptr<Matrix> P_A = matrix_cache[""P_A""];						 <; std::shared_ptr<Matrix> V_A = matrix_cache[""V_A""];							 std::shared_ptr<Matrix> V_A = matrix_cache[""V_A""];; std::shared_ptr<Matrix> J_A = matrix_cache[""J_A""];						 <; std::shared_ptr<Matrix> K_A = matrix_cache[""K_A""];						 <; std::shared_ptr<Matrix> D_B = matrix_cache[""D_B""];						 <; std::shared_ptr<Matrix> P_B = matrix_cache[""P_B""];						 <; std::shared_ptr<Matrix> V_B = matrix_cache[""V_B""];							 std::shared_ptr<Matrix> V_B = matrix_cache[""V_B""];; std::shared_ptr<Matrix> J_B = matrix_cache[""J_B""];						 <; std::shared_ptr<Matrix> K_B = matrix_cache[""K_B""];						 <; std::shared_ptr<Matrix> K_O = matrix_cache[""K_O""];						 <; 												 <; // => Auxiliary C matrices <= //								 <; 												 <; std::shared_ptr<Matrix> Cr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790:2882,Variab,Variables,2882,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614790,2,['Variab'],['Variables']
Modifiability," > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2600,variab,variable,2600,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['variab'],['variable']
Modifiability," CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'un",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:1220,config,config,1220,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['config'],['config']
Modifiability," Setting option MAX_AM_ERI: 6; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4033,config,configuration,4033,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,2,['config'],['configuration']
Modifiability," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1587,plugin,plugin,1587,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['plugin'],['plugin']
Modifiability," TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1150,adapt,adapters,1150,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapters']
Modifiability," dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1192,config,configuration,1192,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,1,['config'],['configuration']
Modifiability," for TARGET blas:; blas.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; blas.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; blas.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;... ```. Building then fails with:; ```; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:3118,config,configure,3118,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['config'],['configure']
Modifiability," from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:1424,variab,variable,1424,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,1,['variab'],['variable']
Modifiability," gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2242,plugin,plugin,2242,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugin']
Modifiability," lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3963,plugin,plugin,3963,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['plugin'],['plugin']
Modifiability," make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2720,plugin,plugins,2720,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,2,"['plugin', 'variab']","['plugins', 'variables']"
Modifiability," pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1112,config,configfile,1112,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['config'],['configfile']
Modifiability," state and; maintain than alternatives like ""order by spatial orbital, and then alpha; first and beta second within spatial orbital numbering""). With that ordering, the signs given are correct. (See, for example,; equation 2.260 of Szabo and Ostlund). Best,; David. On Wed, Sep 16, 2020 at 2:04 PM saadyalouz <notifications@github.com> wrote:. > Dear developers,; >; > I am currently running SA-CASSCF calculations on the formaldimine; > molecule. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1452,variab,variables,1452,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['variab'],['variables']
Modifiability," test (wB97X-D, revTPSS, PW6B95, TPSS, PWB6K only):.   | N=1 | N=4 | N=1 | N=4; -- | -- | -- | -- | --; Psi4/1.2-rc2-acml-5.3.1 | FAIL |   |   |  ; Psi4/1.2-rc2-lapack-3.8.0 | 395.944 | 299.438 | 1.00 | 1.32; Psi4/1.2-rc2 (1.2rc2.dev35) | 268.523 | 223.574 | 1.47 | 1.77; Psi4/1.2-rc2-blis-0.3.2 | 356.723 | 262.964 | 1.11 | 1.51; Psi4/1.2-rc2-openblas-0.2.20 | FAIL |   |   |  ; Psi4/1.2-rc2-openblas-0.3.0 | FAIL |   |   |  . All compiled with gcc-7.1.0, cmake-3.8.2, dftd3-3.2-r0:. `cmake -H. -BBUILDS/$1 -DCMAKE_INSTALL_PREFIX=/opt/packages/psi4/$1 -DLAPACK_INCLUDE_DIRS=/path/to/lapack -DMAX_AM_ERI=5` . ACML-5.3.1 is a binary. . Netlib's BLAS and lapack (3.8.0) compiled with `-O3 -march=barcelona -fPIC` and `-O3 -frecursive -march=barcelona -fPIC` respectively, including deprecated functions. I had to add `-DENABLE_dkh=ON` to the psi4 build options, otherwise the fortran compiler wouldn't get picked up. The 1.2rc2.dev35 is a binary that was available in conda, compiled against `mkl 2018.0.2, intel-openmp 2018.0.0`. Flame's blis-0.3.2 was compiled into netlib's lapack-3.8.0, with `./configure auto`; lapack compiled as above. OpenBLAS-0.2.20 was compiled with `USE_THREAD=0 USE_OPENMP=0 TARGET=BARCELONA`. OpenBLAS-0.3.0 was compiled with both: ; `make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32` and ; `make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 CFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" FFLAGS=""-fPIC -fopenmp -fstack-protector-strong""` and; `make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=0 USE_OPENMP=0 NUM_THREADS=32 CFLAGS=""-fopenmp -march=barcelona -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=barcelona -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""` ; linked using the `.so` and `.a`; it doesn't pass at all even with `psi4 -n 1`. The node I used is a 2 x Quad-Core AMD Opteron(tm) Processor 2352, running up-to-date Debian 8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-394986909:1304,config,configure,1304,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-394986909,1,['config'],['configure']
Modifiability," the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically generate the JSON code from the data of the table and put it in the file, similarly to what happens when you are using a Jupyter Notebook and you evaluate a cell. Note: the `last=1` argument handles the presence/absence of a comma in the generated JSON. So `last=1` should be present only in the very last JSON block of the file. ; When you compile the library, this will generate the functions `trexio_[read|write|has]_psi4mp2_w` and `trexio_[read|write|has]_psi4ccsd_w`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:1589,Variab,Variable,1589,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918,1,['Variab'],['Variable']
Modifiability," this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1147,plugin,plugins,1147,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['plugin'],['plugins']
Modifiability," to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out why the difference was around 35 uH for decane. Furthermore, since the no. of grid points coming out of pyscf and psi4 were different even for the same number of radial and angular grid points, I even tried to use the same grids as psi4 in pyscf but still got the same result. Here is the script I used; ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1697,config,config,1697,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['config'],['config']
Modifiability," to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one coul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1011,plugin,plugin,1011,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['plugin'],['plugin']
Modifiability," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4086,Config,Configuring,4086,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Config'],['Configuring']
Modifiability,"""Gradient per KS-MO"" does _not_ ""just require exposing it."" First, you need to define it properly. Exact exchange depends on two KS-MOs, not just one, so it isn't clear to me how you'd meaningfully define this as a one KS-MO property. Then, you'd need to implement it, since Psi4 doesn't do this naturally. You'd probably need to decompose the density as a sum of densities for each MO and run the gradient computation on each, so a gradient computation takes #MO's times longer. This should not be the default algorithm. Putting the gradient terms on the wavefunction as array variables seems relatively straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578:578,variab,variables,578,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578,1,['variab'],['variables']
Modifiability,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:403,config,configfile,403,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097,2,"['config', 'plugin']","['configfile', 'plugins']"
Modifiability,"## XYZ Files. Just as an aside, here's two easier ways to deal with molecules when you have the coordinates. chg/mult from the xyz are possible https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py#L117-L136. tu1.py; ```; import psi4. psi4.set_memory(""600 mb""). ### <<< Either ; #with open(""h2o.xyz"") as fp:; # fh2o = fp.read(); #; #psi4.geometry(fh2o). ### --- Or. h2o = psi4.core.Molecule.from_arrays(elem=[""O"", ""H"", ""H""], units=""Angstrom"", geom=[; 0.000000000000, 0.000000000000, -0.065775570538, ; 0.000000000000, -0.759061990794, 0.521953018295, ; 0.000000000000, 0.759061990794, 0.521953018295]) ; psi4.activate(h2o). ### >>> End. psi4.set_options({; ""basis"": ""cc-pVDZ"",; }); psi4.energy('scf'). psi4.compare_values(-76.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```. h2o.xyz; ```; 3; sdlkfs; O 0.000000000000 0.000000000000 -0.065775570538 ; H 0.000000000000 -0.759061990794 0.521953018295 ; H 0.000000000000 0.759061990794 0.521953018295 . ```; ## Single Core. To actually address your problem, can you try the following edits? If you edit the installed copy, no recompile needed. Hopefully this solves it -- thanks for the report!; ```; diff --git a/psi4/driver/procrouting/empirical_dispersion.py b/psi4/driver/procrouting/empirical_dispersion.py; index d23f016..ea4f79d 100644; --- a/psi4/driver/procrouting/empirical_dispersion.py; +++ b/psi4/driver/procrouting/empirical_dispersion.py; @@ -213,7 +213,7 @@ class EmpiricalDispersion(object):; resi,; self.engine,; raise_error=True,; - local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); ; dashd_part = float(jobrec.extras['qcvars']['DISPERSION CORRECTION ENERGY']); if wfn is not None:; @@ -231,7 +231,7 @@ class EmpiricalDispersion(object):; resi,; ""gcp"",; raise_error=True,; - local_options={""scratch_director",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:781,variab,variable,781,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['variab'],['variable']
Modifiability,"### Storing data on `Wavefunction` instances. #### Choices (dipole gradient used as example). - (a) store in dedicated slot, `wfn.dipole_gradient_`. access through `wfn.dipole_gradient()`; - (b) store in `wfn.arrays_`. access through `wfn.variable('CURRENT DIPOLE GRADIENT')` or `wfn.variable('MTD DIPOLE GRADIENT')`; - (c) do (b) but also accessible through `wfn.dipole_gradient()` which just performs `wfn.arrays_` lookup; - (d) store in both `wfn.dipole_gradient_` and `wfn.arrays_` (memory-independent copies). access through `wfn.dipole_gradient()` (former) or `wfn.variable('CURRENT DIPOLE GRADIENT')` (latter) or `wfn.variable('MTD DIPOLE GRADIENT')` (latter). #### Present; - E/G/H are (d) and both, either, or neither may be set or consistent. even for energies, these haven’t been thoroughly rolled out past SCF.; - non-E/G/H are (b). #### Future; - E/G/H; - first (v1.4) work on getting data set in both places (reserved slot (e.g., `energy_`) and map (i.e., `variables_`)); - next cycle (v.1.5) do (c); - next next cycle (v1.6) do (b); - non-E/G/H, do (c)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-449694968:239,variab,variable,239,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-449694968,4,['variab'],['variable']
Modifiability,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:90,plugin,plugin,90,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,2,['plugin'],['plugin']
Modifiability,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:62,config,configuration,62,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,1,['config'],['configuration']
Modifiability,"#### filesystem. By my survey, libfilesystem occurs at:; - [ ] plugins. due for an overhaul. Skipping plugin use on Windows until overhaul seems reasonable to me.; - [x] fisapt. dependency removed in #1098 ; - [x] libcubeprop/cubeprop. dependency removed in #1098 ; - [x] libefp. libefp itself removed from c-side in #953 ; - [ ] libcubeprop/csg. libfilesystem dependency remains. The libcubeprop/csg filesys calls are harder to migrate because they're at the bottom of the call stack. But I also recall that you had cubeprop test cases working already on Windows. Is it worth finishing off libcubeprop/csg? Or is the situation as outlined stable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-406507542:63,plugin,plugins,63,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-406507542,2,['plugin'],"['plugin', 'plugins']"
Modifiability,#1585 is also half-bugfix half-enhancement; but I understand if you'd rather not pull it in due to incoming DDD in the near future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-480821372:31,enhance,enhancement,31,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-480821372,1,['enhance'],['enhancement']
Modifiability,"#2158 failed all azure - Win with a mdi failure at test time and Lin with Py detection failures at Psi configure time. So far this one is ok. It's beyond the configure, but this one is using cmake 3.19. 2158 was using cmake 3.20 which has changes to Py detection. I'm keeping an eye on both PRs, but it's hardly caused by the PR changes themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626:103,config,configure,103,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626,2,['config'],['configure']
Modifiability,"'; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start_time; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad.np.tolist(); }; print(f""{psi4.core.get_num_threads()=}""). with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```. ## Psithon vs. QCSchema. Another aside -- your input is written as a python script containing a single job and dropping the key results to json. This could also run through QCSchema with json input and json output, either API like https://github.com/psi4/psi4/blob/master/tests/pytests/test_addons.py#L792-L819 or command-line. Let me know if you'd want more details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:4363,variab,variable,4363,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['variab'],['variable']
Modifiability,(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2588,Config,ConfigMath,2588,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,"* Fixed mp2-module failure. Changed the symmetry reset to only occur if the user provided a default symmetry. My changes overrode Bozkaya's DF code running computations in C1, and the computational symmetry change resulted in BH3 landing on different UHF solutions.; * Fixed pywrap-all failure. Per discussion in Slack, findif now saves and resets the core variables from the reference, after all displacements are finished.; * Addressed concerns of @andysim. I now set DOCC explicitly for my test case, to show compatibility with my symmetry-breaking findif solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964:357,variab,variables,357,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964,1,['variab'],['variables']
Modifiability,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:1582,config,configs,1582,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['config'],['configs']
Modifiability,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:774,config,configuration,774,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,2,['config'],['configuration']
Modifiability,* [ ] Adapt CC* modules to take in Wfn so that truncated virtual space proceeds transparently. Feature request (http://forum.psicode.org/t/rvs-approximations-for-cc2-or-adc-2/504),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-298973221:6,Adapt,Adapt,6,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-298973221,1,['Adapt'],['Adapt']
Modifiability,"* [ ] Remove the unused `PseudospectralGrid` class from `cubature.cc` and references to it throughout the code (particularly `read_options.cc`).; * [ ] Refactor the `DFTGrid` class so that the constructor accepts a single `std::map<std::string, std::any>` map instead of individual maps of different data types as noted [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L4314).; * [ ] Remove the dependence of the `DFTGrid` on global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135:152,Refactor,Refactor,152,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135,1,['Refactor'],['Refactor']
Modifiability,"* run `make sphinxman` at least once by hand and check in resulting psifiles.py and all the updated and new `samples/` files and dirs. * figure out any new `Additional Contributors` since last release and edit header.py accordingly. Get their particulars for codemeta.json. invite any >=3 PRs to GH org. * follow the procedure outlined in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py) (I haven't pushed the versions with enhanced comments) to; * update upstream and downstream deps/addons that may have advanced since last release. edit recipes and psi4 `external/` code.; * rebuild the psi4, psi4-rt, psi4-dev, psi4-docs stack on Linux and Mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604:558,enhance,enhanced,558,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604,1,['enhance'],['enhanced']
Modifiability,"******. CC integral sort will use 116.60 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:43 2017; Module time:; 	user time = 0.42 seconds = 0.01 minutes; 	system time = 0.37 seconds = 0.01 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 5.26 seconds = 0.09 minutes; 	system time = 0.90 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:11881,Config,Configuration,11881,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Config'],['Configuration']
Modifiability,"**user summary**:; This is not a bug that is affecting any DFT calculations currently run with PSI4.; The bug is found in unused code. ---. The radial grid is entirely build with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L2433. The function supposed to call `build_becke` `build_treutler` is never called, instead a dummy function is called that only populates the `RadialGrid` class, which is never used in `cubature.cc` anyway (looks like it is nowhere used). . On the plus side, the bug fixed with this PR is never encountered. The downside is that the TREUTLER scheme is not entirely correct because at least the eta mapping parameters (`TreutlerEta`) are missing. If `build_treutler` is correct or not, I cannot 100% say. In a quick & dirty fashion I enforced it. _Without_ eta (set to 1.0) all DFT `ctests` pass. That's good!; I added the missing eta parameters with updated BS radii a while ago, but didn't notice that the etas changed nothing. I thought the effect was just too small. But there is a very minor one. Including the etas has 11 of 37 tests fail. (Did not run the pytests). I will refactor `cubature.cc` ..somehow.. in the near future. ---. I will approve & merge tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400:1135,refactor,refactor,1135,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400,1,['refactor'],['refactor']
Modifiability,"*OpenMP* issue!. It seems will be no better support of *OpenMP* in *MSVC* soon. So I was looking for an alternative solution as it is increasing code complexity and will add too much burden to keep *Psi4* compatible with *OpenMP* 2.0. One options is `clang-cl`, *MSVC* compatibility layer of *LLVM* (http://clang.llvm.org/docs/MSVCCompatibility.html), which supports *OpenMP* 4.0. After some hacking of *CMake* and *Psi4*, I managed to compile and pass the tests (https://ci.appveyor.com/project/raimis/psi4/build/1.0.601). So I will make new PRs to adapt `clang-cl` and close #1200, #1224, #1225, #1226, #1228, #1229, and #1230. Also, #1231 could be reverted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-423183802:550,adapt,adapt,550,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-423183802,1,['adapt'],['adapt']
Modifiability,", but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1917,plugin,plugin,1917,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['plugin'],['plugin']
Modifiability,", v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:3233,variab,variable,3233,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['variab'],['variable']
Modifiability,", xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAPT(DFT) Results; > ---------------------------------------------------------------------------------------------------------; > Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > ```. Added the !dHF cases in `sapt-dft1` and `sapt-dft2`. For `sapt-dft-api`, the dHF feature is intrinsically unsupported, because the dHF calculation is not fully contained in the sapt_dft() call; a part of it is in the run_sapt_dft() call. . Added the scaling scheme/factor output lines in the output f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:3229,variab,variable,3229,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['variab'],['variable']
Modifiability,- 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cma,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4951,plugin,plugins,4951,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:18,plugin,plugins,18,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,1,['plugin'],['plugins']
Modifiability,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234531219:260,variab,variable,260,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219,2,"['config', 'variab']","['configure', 'variable']"
Modifiability,"- Step 1. Modify the perl script to write the reference values out instead of checking them could even write them directly into input.dat with a variable name.; - Step 2. Hunt down the corresponding psivars and add the `compare_value` statements.; - Step 3. The ones that don't work in 2 point at missing psivars which need to be added. 1.) should be somewhat easy but some perl knowledge required. 2) not too difficult either. 3) will take the most time, finding the code in `psi4/src/psi4/cc*` that needs to be modified will take the most time. . I am not completely sure I get what you want to do with your point (3) do you want to just lump `compare_values` together in a function that takes a `wfn` and `ref_vals` dict and does all the `compare_values` needed rather than putting lots of them in the input files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376638034:145,variab,variable,145,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376638034,1,['variab'],['variable']
Modifiability,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239526159:119,variab,variable,119,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159,2,['variab'],['variable']
Modifiability,"- Very cool. I'm not sure exactly if I'd be able to make that work for my plugin, because so many of the things are still either `icc/icpc` specific or tied to your build machine, but it will make getting the info out easier.; - Using conda's `info/has_prefix` / string replacement stuff for relocatable build, I assume some of strings will get modified on installation to point to the proper place.; - I'm not a collaborator on the psi4/psi4 issue tracker, so I can't see that issue. But if anyone on your team wants to take the RESP plugin and modify or improve it, that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172396551:74,plugin,plugin,74,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172396551,2,['plugin'],['plugin']
Modifiability,- [ ] Examine `properties` function in driver (that encodes the extended workflows beyond sp or time-trivial keyword needed to compute CC properties) and the `oeprop` syntax that most all other methods use. Devise and implement a unified interface that still works with the code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-341899122:64,extend,extended,64,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341899122,1,['extend'],['extended']
Modifiability,"- [ ] Implement potential-based small-basis guess as described in [Chem Phys Lett 531, 229 (2012)](http://dx.doi.org/10.1016/j.cplett.2012.02.012). The method avoids doing projections altogether, but the main problem is that one needs cross-basis Coulomb and exchange integrals (IJ|kl) and (Ik|Jl) where IJ are in the new, large basis and kl are in the small input basis. For DFT, the density variables would be evaluated in the small basis, and the quadrature would be done in the new basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-508700421:393,variab,variables,393,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-508700421,1,['variab'],['variables']
Modifiability,"- [ ] `ccenergy/rotate.cc` is the only file in all of `ccenergy` that bothers with QT -> Pitzer conversions. Refactor that file using modern libmints tech (`Dimension`, `Slice`, `Matrix`) and then purge any mention of QT vs Pitzer from `ccenergy`; - [ ] `ccenergy` has a wavefunction, so we should be able to remove most of `MOInfo` from there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1099438825:109,Refactor,Refactor,109,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1099438825,1,['Refactor'],['Refactor']
Modifiability,- [x] Add FCIDUMP capabilities within Psi4. There are currently many third-party plugins that do that and it seems needed enough to have it within the main code. Done in #872,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-341901567:81,plugin,plugins,81,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341901567,1,['plugin'],['plugins']
Modifiability,"- [x] If sticking with Ed's SAPT module, make a energies_ member in the class, and save all the little pieces to that map.; - [x] Assign all the little pieces to PSI variables with names in `https://github.com/cdsgroup/qcdb/qcdb/psivarrosetta.py`; - [x] Sum them up according to Fig 1 from aforementioned paper; - [x] Alter driver to do more sapt levels; - [x] Alter driver to incorporate the dMP2; - [x] Check. Parts of below may be handy. ```; # SAPT-DFT; qcdb.compare_values(-4.3034, h2kc * df['SAPTDFT-SA-adz' ]['S22-2'], digits, 'SAPTDFT-SA-adz'); qcdb.compare_values(-4.6994, h2kc * df['SAPTDFT-SA-atz' ]['S22-2'], digits, 'SAPTDFT-SA-atz'); qcdb.compare_values(-4.8234, h2kc * df['SAPTDFT-SA-aqz' ]['S22-2'], digits, 'SAPTDFT-SA-aqz'). # SAPT0; qcdb.compare_values(-5.3837, h2kc * df['SAPT0-SA-adz' ]['S22-2'], digits, 'SAPT0-SA-adz'); qcdb.compare_values(-5.6258, h2kc * df['SAPT0-SA-atz' ]['S22-2'], digits, 'SAPT0-SA-atz'); qcdb.compare_values(-5.7281, h2kc * df['SAPT0-SA-aqz' ]['S22-2'], digits, 'SAPT0-SA-aqz'); qcdb.compare_values(-5.7476, h2kc * df['SAPT0-SA-a5z' ]['S22-2'], digits, 'SAPT0-SA-a5z'). # sSAPT0; qcdb.compare_values(-5.3440, h2kc * df['SAPT0S-SA-adz' ]['S22-2'], digits, 'SAPT0S-SA-adz'); qcdb.compare_values(-5.5828, h2kc * df['SAPT0S-SA-atz' ]['S22-2'], digits, 'SAPT0S-SA-atz'); qcdb.compare_values(-5.6852, h2kc * df['SAPT0S-SA-aqz' ]['S22-2'], digits, 'SAPT0S-SA-aqz'); qcdb.compare_values(-5.7045, h2kc * df['SAPT0S-SA-a5z' ]['S22-2'], digits, 'SAPT0S-SA-a5z'). # SCS-SAPT0; qcdb.compare_values(-5.2855, h2kc * df['SAPTSCS-SA-adz' ]['S22-2'], digits, 'SAPTSCS-SA-adz'); qcdb.compare_values(-5.5244, h2kc * df['SAPTSCS-SA-atz' ]['S22-2'], digits, 'SAPTSCS-SA-atz'); qcdb.compare_values(-5.6297, h2kc * df['SAPTSCS-SA-aqz' ]['S22-2'], digits, 'SAPTSCS-SA-aqz'); qcdb.compare_values(-5.6508, h2kc * df['SAPTSCS-SA-a5z' ]['S22-2'], digits, 'SAPTSCS-SA-a5z'). # SAPT2; qcdb.compare_values(-4.2041, h2kc * df['SAPT2-SA-adz' ]['S22-2'], digits, 'SAPT2-SA-adz'); qcdb.compa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37#issuecomment-121347393:166,variab,variables,166,https://psicode.org,https://github.com/psi4/psi4/issues/37#issuecomment-121347393,1,['variab'],['variables']
Modifiability,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5316,Config,Configuring,5316,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Config'],['Configuring']
Modifiability,-------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2555,Config,ConfigMath,2555,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,-----------; [A] [B] [C] [D] [E]; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like; ------------- ------------- --------------- ----------- --------------; --> GLOBAL frozen_docc frozen_docc nocc frozen_docc; --> GLOBAL active active nact active; dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep/group/symmetry wfn_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states ArrayType; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence ArrayType; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps ArrayType; --> dmrg_noiseprefactors dmrg_noiseprefactors sweep_noise_prefac dmrg_noise_magnitude ArrayType; (none) dmrg_dvdson_rtol dmrg_dvdson_rtol sweep_dvdson_rtol dmrg_r_convergence ArrayType; --> dmrg_print_corr dmrg_print_corr print_corr dmrg_corr_print; --> dmrg_chkpt dmrg_chkpt dmrg_mps_write; --> dmrg_store_unit dmrg_store_unit dmrg_unitary_write; --> dmrg_do_diis dmrg_do_diis dmrg_diis; --> dmrg_diis_branch dmrg_diis_branch scf_diis_thr dmrg_diis_start_convergence; --> dmrg_store_diis dmrg_store_diis dmrg_diis_write; dmrg_maxiter dmrg_max_iter dmrg_max_iter scf_max_iter dmrg_maxiter; --> dmrg_which_root dmrg_which_root excitation (offset-1) dmrg_follow_root; dmrg_avg_states dmrg_state_avg dmrg_state_avg scf_state_avg dmrg_avg_states; --> dmrg_active_space dmrg_active_space scf_active_space dmrg_scf_orbs; --> dmrg_loc_random dmrg_loc_random dmrg_local_init; (none) dmrg_caspt2 dmrg_caspt2 caspt2_calc dmrg_caspt2; (none) dmrg_caspt2_orb dmrg_caspt2_orb caspt2_orbs dmrg_caspt2_orbs; (none) dmrg_ipea dmrg_ipea caspt2_ipea dmrg_caspt2_ipea; (none) dmrg_imag_shift dmrg_imag_shift caspt2_imag dmrg_imag_level_shift; (none) dmrg_molden dmrg_molden dmrg_molden_write; (none) dmrg_density_ao dmrg_density_ao dmrg_opdm_ao_print. dumpfilename (fcidump) fcidump; nelectrons; nvir; caspt2_ch,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-223864136:1368,plugin,plugins,1368,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223864136,1,['plugin'],['plugins']
Modifiability,". On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tens",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1188,plugin,plugin,1188,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['plugin'],['plugin']
Modifiability,. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-ener,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5605,plugin,plugins,5605,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:119,variab,variable,119,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316,2,['variab'],"['variable', 'variables']"
Modifiability,".1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Adding test cases: Psi4 + CheMPS2; -- Adding test cases: Psi4 + dkh; -- Adding test cases: Psi4 + libefp; -- Adding test cases: Psi4 + gdma; -- Adding test cases: Psi4 + PCMSolver; -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:5797,Config,Configuring,5797,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['Config'],['Configuring']
Modifiability,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11461,config,config,11461,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['config'],['config']
Modifiability,".8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06.8247099Z pytest_scratches = []; 2018-12-06T18:15:06.8247318Z for pat in patterns:; 2018-12-06T18:15:06.8247695Z pytest_scratches.extend(glob.glob(pat)); 2018-12-06T18:15:06.8247928Z for fl in pytest_scratches:; 2018-12-06T18:15:06.8248147Z > os.unlink(fl); 2018-12-06T18:15:06.8249031Z E PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pytest_output.dat'; 2018-12-06T18:15:06.8249336Z ; 2018-12-06T18:15:06.8249582Z ..\lib\psi4\tests\conftest.py:28: PermissionError; ```; So for now, they will run on core only!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:2131,extend,extend,2131,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['extend'],['extend']
Modifiability,".cp37-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /debug /INCREMENTAL src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib"" F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .""; LINK Pass 1: command ""C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.ob",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:3105,plugin,plugin,3105,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['plugin'],['plugin']
Modifiability,".cp37-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /debug /INCREMENTAL src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\CMakeFiles\core.dir/intermediate.manifest src\CMakeFiles\core.dir/manifest.res"" failed (exit code 1120) with the following output:; 正在创建库 src\core.lib 和对象 src\core.exp; F:\fnocc.lib(diis.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv_，该符号在函数 ""void _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:5836,plugin,plugin,5836,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['plugin'],['plugin']
Modifiability,".txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1088,config,configuration,1088,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['config'],['configuration']
Modifiability,/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4992,plugin,plugins,4992,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4586,plugin,plugin,4586,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: mis,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5262,plugin,plugins,5262,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG' # aka PLUGIN_FLAGS; info['--libs'] = sep_cmake_list('-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_thread.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_core.a;/lib64/libpthread.so;/lib64/libm.a;-openmp;-Wl,--end-group;-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_lapack95_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;-openmp;-Wl,--end-group'). if len(argv) == 1:; retstr = """"""Build conditions of Psi4. Usage:; >>> psi4-config --all; >>> psi4-config --flags --libs; """"""; elif argv[1] == '--all':; retstr = ''; for k, v in info.iteritems():; retstr += """"""%-20s --> %s\n"""""" % (k, v); else:; retstr = []; for arg in sys.argv[1:]:; retstr.append(info[arg]); retstr = ' '.join(retstr). return retstr. def sep_cmake_list(cmlist):; return ' '.join(cmlist.split(';')). if __name__ == '__main__':; pass; psiver = ""0.3.479""; githash = ""{master} 9a95002 ""; sys.exit(main(sys.argv)). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172395303:3433,config,config,3433,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303,2,['config'],['config']
Modifiability,/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5720,plugin,plugins,5720,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and; > pytest (long;cart),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5778,plugin,plugins,5778,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6497,Plugin,Plugins,6497,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Plugin'],['Plugins']
Modifiability,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:2907,refactor,refactoring,2907,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['refactor'],['refactoring']
Modifiability,"0D-01 -4.353000D-03; 8.106100D-02 1.102000D-03; S 11 1.00; 5.546500D+03 -7.300000D-05; 8.382140D+02 -5.080000D-04; 1.821870D+02 -1.158000D-03; 3.121230D+01 1.219300D-02; 1.953140D+01 -8.785400D-02; 8.240990D+00 3.382000D-01; 2.194550D+00 -5.765500D-01; 1.109110D+00 -4.092980D-01; 3.746410D-01 5.674590D-01; 1.770800D-01 6.124890D-01; 8.106100D-02 1.432310D-01; S 1 1.00; 3.746410D-01 1.000000D+00; S 1 1.00; 1.770800D-01 1.000000D+00; S 1 1.00; 1.001000D-01 1.000000D+00; S 1 1.00; 4.120000D-02 1.0000000; P 9 1.00; 1.889880D+02 5.850000D-04; 2.128680D+01 3.692300D-02; 1.003960D+01 -2.353240D-01; 3.451800D+00 3.414830D-01; 1.974560D+00 5.347880D-01; 1.024200D+00 2.651410D-01; 4.494370D-01 2.578700D-02; 1.866480D-01 5.220000D-04; 7.348100D-02 6.060000D-04; P 9 1.00; 1.889880D+02 -2.560000D-04; 2.128680D+01 -1.168200D-02; 1.003960D+01 8.319200D-02; 3.451800D+00 -1.569700D-01; 1.974560D+00 -2.245180D-01; 1.024200D+00 -1.144510D-01; 4.494370D-01 3.753560D-01; 1.866480D-01 5.751360D-01; 7.348100D-02 2.459170D-01; P 1 1.00; 5.981000D-01 1.000000D+00; P 1 1.00; 9.618000D-02 1.000000D+00; P 1 1.00; 3.590000D-02 1.0000000; D 9 1.00; 1.326620D+02 5.720000D-04; 3.760540D+01 4.402000D-03; 1.038910D+01 -4.092200D-02; 6.490170D+00 9.966100D-02; 3.454510D+00 3.226630D-01; 1.844130D+00 4.003430D-01; 9.624780D-01 2.683060D-01; 4.728530D-01 8.484700D-02; 1.932000D-01 7.632000D-03; D 1 1.00; 4.728530D-01 1.000000D+00; D 1 1.00; 1.932000D-01 1.000000D+00; D 1 1.00; 7.820000D-02 1.0000000; F 1 1.00; 4.064000D-01 1.000000D+00; F 1 1.00; 1.848000D-01 1.0000000. ****. """""",; key=""basis"",; name=""only_valence"",; ). psi4.set_options(; {; ""e_convergence"": 1e-8,; ""d_convergence"": 1e-8,; }; ). psi4.core.set_output_file(""output_only_valence.dat"", False). psi4.energy(""scf""); e2 = psi4.variable(""HF TOTAL ENERGY""). ### Compare; diff = e2 - e1. print(""\nComparison""); print(""-"" * 40); print(f""ECP + valence {e1: 16.10f}""); print(f""Only valence {e2: 16.10f}""); print(); print(f""Difference {diff: 16.10f}""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760:5251,variab,variable,5251,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760,1,['variab'],['variable']
Modifiability,"1. Intel says so. No idea why, I am just following directions.; 2. I believe something was still using the variables. Either way this; mimics the behavior of the original script.; 3. That behavior makes no sense with modern Psi4, i.e. it won't work why; have it?; 4. Again bypass it and do what? Unless you plan on going back to an; executable this is how to link to MKL.; 5. There's lapack problems otherwise.; 6. Thanks, I usually don't put the end stuff, but I was following; established syntax in the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563#issuecomment-272895474:107,variab,variables,107,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-272895474,1,['variab'],['variables']
Modifiability,1. optking/beran: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > pl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4552,plugin,plugins,4552,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c09931_0 ; fonttools 4.25.0 pyhd3eb1b0_0 ; freetype 2.11.0 h70c0345_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; gettext 0.19.8.1 h73d1719_1008 conda-forge; giflib 5.2.1 h7b6447c_0 ; glib 2.70.2 h780b84a_4 conda-forge; glib-tools 2.70.2 h780b84a_4 conda-forge; greenlet 1.1.1 py37h295c915_0 ; gst-plugins-base 1.14.5 h0935bb2_2 conda-forge; gstreamer 1.18.5 h9f60fe5_3 conda-forge; hdf5 1.10.6 hb1b8bf9_0 ; icu 68.1 h58526e2_0 conda-forge; idna 2.10 pyh9f0ad1d_0 conda-forge; importlib-metadata 4.8.2 py37h06a4308_0 ; importlib_metadata 4.8.2 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ipykernel 6.10.0 py37h25bab4e_0 conda-forge; ipython 7.32.0 py37h89c1867_0 conda-forge; ipython_genutils 0.2.0 py_1 conda-forge; ipywidgets 7.7.0 pyhd8ed1ab_0 conda-forge; jbig 2.1 h7f98852_2003 conda-forge; jedi 0.18.1 py37h89c1867_0 conda-forge; jinja2 3.1.1 pyhd8ed1ab_0 conda-forge; jpeg 9d h7f8727e_0 ; jsonschema 4.4.0 pyhd8ed1ab_0 conda-forge; jupyter 1.0.0 py37h89c1867_7 conda-forge; jupyter_client 7.1.2 pyhd8ed1ab_0 conda-forge; jupyter_console 6.4.3 pyhd8ed1ab_0 conda-forge; jupyter_core 4.9.2 py37h89c1867_0 conda-forge; jupyterlab_pygments 0.1.2 pyh9f0ad1d_0 conda-forge; jupyterlab_widgets 1.1.0 pyhd8ed1ab_0 co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:2340,plugin,plugins-base,2340,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['plugin'],['plugins-base']
Modifiability,"193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Sca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2454,variab,variable,2454,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,"3, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1283,adapt,adapters,1283,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapters']
Modifiability,32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest reg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4640,plugin,plugins,4640,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"3975_0 psi4/label/dev; mkl 2018.0.2 1; mkl-devel 2018.0.1 h470d631_5; mkl-include 2017.0.3 intel_8 psi4/label/dev; mkl_fft 1.0.1 py35h3010b51_0; mkl_random 1.0.1 py35h629b387_0; more-itertools 4.1.0 py35_0; ncurses 6.0 h9df7e31_2; networkx 2.1 py35_0; numpy 1.14.2 py35hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.2.1 py35hce75f6e_0 psi4/label/dev; pip 10.0.1 py35_0; pluggy 0.6.0 py35hb428803_0; psi4-dev 1.2a1.dev8 py35h45acd66_0 psi4/label/dev; py 1.5.3 py35_0; pybind11 2.2.3 py35_0 psi4/label/dev; pytest 3.5.1 py35_0; python 3.5.5 hc3d631a_3; readline 7.0 ha6073c6_4; rhash 1.3.5 hbf7ad62_1; setuptools 39.1.0 py35_0; six 1.11.0 py35h423b573_1; sqlite 3.23.1 he433501_0; tk 8.6.7 hc745277_3; wheel 0.31.0 py35_0; xz 5.2.3 h5e939de_4; zlib 1.2.11 ha838bed_2. ```; gcc --version; `gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609`. $CC --version; `x86_64-conda_cos6-linux-gnu-cc (crosstool-NG fa8859cb) 7.2.0`. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008:2266,variab,variable,2266,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008,1,['variab'],['variable']
Modifiability,"4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; I'll have a poke about to see if I can get it to build, either within the main psi4 build or stand alone ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1540,Config,Configuring,1540,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['Config'],['Configuring']
Modifiability,"70008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:10524,COUPLING,COUPLING,10524,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['COUPLING'],['COUPLING']
Modifiability,": CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;shared;sss; -- Found Libint2 5: /mnt/f/psi4/build_linux/stage/lib/libint2.so.2 (found version 2.7.2); -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable optking could not be located, Building optking instead.; -- Found Libxc: /mnt/f/psi4/build_linux/stage/lib/libxc.a (found version 6.1.0); -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Configuring done (71.4s); -- Generating done (129.1s); -- Build files have been written to: /mnt/f/psi4/build_linux; ```. is there anything missing?. THANKS!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:4987,Config,Configuring,4987,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['Config'],['Configuring']
Modifiability,":gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect supe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3232,variab,variables,3232,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['variab'],['variables']
Modifiability,; + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2628,Config,ConfigMath,2628,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2740,variab,variables,2740,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['variab'],['variables']
Modifiability,"; 2.194550D+00 8.829680D-01; 1.109110D+00 4.620610D-01; 3.746410D-01 2.228600D-02; 1.770800D-01 -4.353000D-03; 8.106100D-02 1.102000D-03; S 11 1.00; 5.546500D+03 -7.300000D-05; 8.382140D+02 -5.080000D-04; 1.821870D+02 -1.158000D-03; 3.121230D+01 1.219300D-02; 1.953140D+01 -8.785400D-02; 8.240990D+00 3.382000D-01; 2.194550D+00 -5.765500D-01; 1.109110D+00 -4.092980D-01; 3.746410D-01 5.674590D-01; 1.770800D-01 6.124890D-01; 8.106100D-02 1.432310D-01; S 1 1.00; 3.746410D-01 1.000000D+00; S 1 1.00; 1.770800D-01 1.000000D+00; S 1 1.00; 1.001000D-01 1.000000D+00; S 1 1.00; 4.120000D-02 1.0000000; P 9 1.00; 1.889880D+02 5.850000D-04; 2.128680D+01 3.692300D-02; 1.003960D+01 -2.353240D-01; 3.451800D+00 3.414830D-01; 1.974560D+00 5.347880D-01; 1.024200D+00 2.651410D-01; 4.494370D-01 2.578700D-02; 1.866480D-01 5.220000D-04; 7.348100D-02 6.060000D-04; P 9 1.00; 1.889880D+02 -2.560000D-04; 2.128680D+01 -1.168200D-02; 1.003960D+01 8.319200D-02; 3.451800D+00 -1.569700D-01; 1.974560D+00 -2.245180D-01; 1.024200D+00 -1.144510D-01; 4.494370D-01 3.753560D-01; 1.866480D-01 5.751360D-01; 7.348100D-02 2.459170D-01; P 1 1.00; 5.981000D-01 1.000000D+00; P 1 1.00; 9.618000D-02 1.000000D+00; P 1 1.00; 3.590000D-02 1.0000000; D 9 1.00; 1.326620D+02 5.720000D-04; 3.760540D+01 4.402000D-03; 1.038910D+01 -4.092200D-02; 6.490170D+00 9.966100D-02; 3.454510D+00 3.226630D-01; 1.844130D+00 4.003430D-01; 9.624780D-01 2.683060D-01; 4.728530D-01 8.484700D-02; 1.932000D-01 7.632000D-03; D 1 1.00; 4.728530D-01 1.000000D+00; D 1 1.00; 1.932000D-01 1.000000D+00; D 1 1.00; 7.820000D-02 1.0000000; F 1 1.00; 4.064000D-01 1.000000D+00; F 1 1.00; 1.848000D-01 1.0000000. ****. """""",; key=""basis"",; name=""only_valence"",; ). psi4.set_options(; {; ""e_convergence"": 1e-8,; ""d_convergence"": 1e-8,; }; ). psi4.core.set_output_file(""output_only_valence.dat"", False). psi4.energy(""scf""); e2 = psi4.variable(""HF TOTAL ENERGY""). ### Compare; diff = e2 - e1. assert compare_values(0.0, diff, 7, ""ECP + valence vs. only valence""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2121013202:5381,variab,variable,5381,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2121013202,1,['variab'],['variable']
Modifiability,=========================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ===========================================================,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3837,plugin,plugin,3837,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,========================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packag,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3864,plugin,plugin,3864,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"> . > PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. > ; > You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 . Thanks, I will check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316:542,plugin,plugin,542,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316,1,['plugin'],['plugin']
Modifiability,"> ; > ; > FWIW, I cannot make the input fail with mkl2020.1 on my Ryzen (gen1) workstation.; > It has instructions till AVX2. MKL and any binaries generated by Intel compilers are almost always detecting CPU vendors based on vendor first and instruction support second. Something like this:; ```; if ( CPU_VENDOR == Intel){; if ( CPU_HAS_AVX_512 ) <call AVX-512 version of the function>; if ( CPU_HAS_AVX2 ) <call AVX2 version of the function>; ...; else <call SSE2 version of the function>; } else { //non-Intel CPU; <call SSE2 version of the function>; }; ```; So this means that unless one adds some some unofficial hacks before compiling the binaries, all AMD CPUs, regardless of their AVX support, will be running SSE2 (or similarly unoptimized) codepaths only.; This unfair CPU dispatch function can be overridden at runtime for the MKL using an unofficial debug environmental variable, but if the binary was compiled with an Intel compiler, then all parts touched by the auto-vectorizer are probably still going to execute the SSE2 (or a similarly unoptimized) path on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655:883,variab,variable,883,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655,1,['variab'],['variable']
Modifiability,"> ; > ; > The PSIO error can occur for running out of RAM? Is it writing to a virtual file (for the lack of better term)?. On some systems, /tmp is a ramdisk by default, so if PSI4 is configured to use that as a scratch dir, the system can easily run out of memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594:184,config,configured,184,https://psicode.org,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594,1,['config'],['configured']
Modifiability,"> ; > I was wondering, since you are modifying the class, would you be able to implement these changes as well?. I could look into it, but I have other priorities for the next couple of months. I am also yet to receive any feedback/reviews on the changes pushed so far, so I would prefer to have the commits of this PR to be about refactoring only.; I think adding new features would be better done in a separate PR, after this is merged or rejected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560:331,refactor,refactoring,331,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560,1,['refactor'],['refactoring']
Modifiability,"> > ## User API & Changelog headlines; > > ```; > > * [x] N/A; > > ```; > ; > The entire `psi::Matrix` class is marked as `PSI_API`, so I think adding any public member functions amounts to a change in API. The reason I didn't mark anything here as an API change is because neither of the new `eigen_map` functions are added to the list of exported `Psi4::Matrix` functions in `export_mints.cc`, which means that they cannot be utilized in the PsiAPI or Psithon input modes. Which is fine, because you'd probably prefer the `Psi4::Matrix` as a NumPy array in those contexts anyway. . The `PSI_API` flag makes the symbols for these functions visible in the Psi4 shared object library, but I'm not sure if that alone constitutes a User API change. I suppose it could count for plugin developers, as it is a new functionality within Psi4 that they can utilize in their plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143#issuecomment-1995408756:775,plugin,plugin,775,https://psicode.org,https://github.com/psi4/psi4/pull/3143#issuecomment-1995408756,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"> > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed.; > ; > MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. This is completely correct. The lone OLCCD algorithm in `occ` does not compute LCCD with the input orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739:628,variab,variables,628,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739,1,['variab'],['variables']
Modifiability,"> > > > lgtm, thanks! Is there any atomic unit for specific rotation?; > ; > > > since specific rotation is normalized for path length and concentration in experimental settings, I'd say the use of deg/[dm (g/cm^3)] for specific rotation is even more ubiquitous than the use of NM for wavelength for dynamic properties. @lothian may have more to say on this topic.; > ; > > Are we talking about storing the specific rotation or the G' tensor? I would think we'd want to store the latter in atomic units (along with the field energy, also in a.u.), and not store the specific rotation, which can quickly be computed from the tensor and the energy.; > ; > Both tensors and scalars are saved to psivars in the PR. I think that's usual procedure as we try to be explicit (mp2 tot, mp2 corl, hf tot) even if the arithmetic is easy. We are trying to map psivars more closely to qcschema properties though, which are rigidly atomic units. Over there, it's easy to request the ubiquitous user units of deg/[dm (g/cm^3)] be returned from au storage. We can add such capability to the `psi4.variable()` query in psi4. So my question was whether we could store the qcvars data in au. The qcvar name with nm I think is a reasonable exception since that won't translate directly to qcschema. in that case, we could in theory store the specific rotation in ""atomic units"" if such a thing even exists. it's computed in `ccresponse` from the trace of the G' tensor (in a.u.) which is then normalized for path length, concentration, and molecular weight to give the ""specific"" rotation, so I suppose we'd need atomic units for those quantities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716630918:1081,variab,variable,1081,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716630918,1,['variab'],['variable']
Modifiability,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:725,config,configure,725,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,2,['config'],['configure']
Modifiability,"> > I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR.; > ; > Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?. I will commit to doing it. I will likely open it up within the next few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373:74,refactor,refactor,74,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373,1,['refactor'],['refactor']
Modifiability,"> > It appears that the current solidharmonics.cc is not used ANYWHERE in the Psi4 code.; > ; > Somehow solidharmonics.cc is getting used, because changing it changes the integral ordering (link is to the `gss` to `sss` PR: https://github.com/psi4/psi4/pull/2537/files#diff-76f4c1f378b6a48ede6c4f938378b54719f968680edca78453d9751e87cebbf9); > ; > EDIT: not necessarily a block on your plan, but that's not isolated code. Looks like I did a naive `grep -r ""solidharmonics.cc""` instead of its functions. My bad. In that case, refactoring solidharmonics.cc with my new code can serve as an effective test for my functions, but it does make it harder :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209829926:524,refactor,refactoring,524,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209829926,1,['refactor'],['refactoring']
Modifiability,"> > So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however.; > ; > > Thoughts?; > ; > Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best. DFJCOSK won't explicitly undo most of this PR, nicely enough, though it will require some changes to how the computed_shells member functions/variables are handled. Regardless, it won't lead to significant changes in test_erisieve, so a separate PR should work fine. And ultimately, the big point of this PR is to allow testing of density screening in test_erisieve without needing to directly construct and use separate TwoBodyAOInt objects, since the plan is to remove density screening from TwoBodyAOInt entirely. . Thank you for your feedback!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815:216,extend,extend,216,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815,2,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"> > Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.; > ; > Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?. Where are you trying to set this at? The first thing that comes to mind is the functional can be ""locked"" so that when a threaded V matrix is computed we can correctly replicate the `SuperFunctional` to compute on each thread. It may be worth double checking that you have the correct locking guards around this like other setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219:58,variab,variable,58,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219,1,['variab'],['variable']
Modifiability,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:761,refactor,refactoring,761,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129,2,['refactor'],"['refactor', 'refactoring']"
Modifiability,"> > The second reason is that we already have reviews on CompositeJK, and to break this into two PRs at this point would also involve extra work for the core developers too.; > ; > You have it backwards. Most of the work in PR reviewing is reading the code and figuring out what you're trying to do. Seeing ""oh, this is just moving code"" around is not work for me. Figuring out what parts of your PR are about Composite JK, what parts are about refactoring LinK, and what parts are about Direct-DF-J is a lot of work. Zach's plan does mean more work for you, but a smoother review process. I am still not willing to break this into two PRs (due to the fact that I am in finals season and do not have much time). However, what I can do, is point to which parts of the code involve refactoring the LinK, Direct-DF-J, and CompositeJK in the PR description.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1097103857:445,refactor,refactoring,445,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1097103857,2,['refactor'],['refactoring']
Modifiability,"> > Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > > ; > ; > > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > ; > > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > > ; > ; > > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).; > ; > ; > ; > Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR. I could also do both 1 and 2 in this PR, if that makes things easier. Which do y'all prefer (2 then 1, or 1 and 2) @zachglick @JonathonMisiewicz ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035:218,maintainab,maintainable,218,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035,1,['maintainab'],['maintainable']
Modifiability,"> @davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?; > ; > ```; > Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; > ```. After some quick tinkering, I was fix the issue by adding the line. `psi4.set_options({ ""scf_subtype"": ""auto"" })`. under the definition of `mol`. Setting `SCF_SUBTYPE` explicitly like this circumvents the switch to the `INCORE` MemDF algorithm in the DFHelper constructor that is causing the exception. . Cross-checking against the test output from another Psi4 build leads to basically no difference in the output files, specifically in MemDF header printout, so I believe the intent of the test is also preserved (i.e., there are no alterations into what configurations of MemDF are tested).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904:930,config,configurations,930,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904,1,['config'],['configurations']
Modifiability,"> @loriab After attempting to implement your suggestion, I find it looks uglier. Might I suggest that we wait until ADC and EOM are hooked up, and then discuss which way of formatting these variables is best? Once we have more options, my opinion may change. sure, sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1064148919:190,variab,variables,190,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1064148919,1,['variab'],['variables']
Modifiability,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:716,config,configure,716,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,2,['config'],['configure']
Modifiability,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:140,variab,variables,140,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358,1,['variab'],['variables']
Modifiability,"> Also add it https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L77-L80 and https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L14-L20, please. then lgtm!. Done. I've made Flexiblas the first one to look for, since it's backend agnostic and can also be used to wrap MKL.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632:134,Config,ConfigMath,134,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632,1,['Config'],['ConfigMath']
Modifiability,"> Are there any Python bindings that hit the deprecated fns?. I don't think so? They are not used in `py::class_<Dimension>` in `export_mints.cc`, if there are other places to look for Python bindings let me know and I will check. > This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. Perhaps, but I delayed it because. 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282:496,plugin,plugins,496,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282,1,['plugin'],['plugins']
Modifiability,"> As a point of organization, keep responses _on_ comments on specific lines of code limited to responses _about_ those comments. Your point about BSISA didn't belong below my point about how a comment needed to be corrected.; > ; > I still don't like the idea of adding member variables to `PopulationAnalysisCalc` that are not required for all or even most population analyses. This is how you get the explosion of member variables polluting a certain Psi module. I recommend either making a subclass or demoting those member variables to arguments of a function call inside the parent population analysis. The latter option requires that any further requests for a particular population analysis be done at the time the population analysis is done, rather than reading a new OEProp request. This makes more sense to me. Actually, I do like your idea for the latter option. Let me ask others what they think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742616334:278,variab,variables,278,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742616334,3,['variab'],['variables']
Modifiability,"> As a point of organization, keep responses _on_ comments on specific lines of code limited to responses _about_ those comments. Your point about BSISA didn't belong below my point about how a comment needed to be corrected.; > ; > I still don't like the idea of adding member variables to `PopulationAnalysisCalc` that are not required for all or even most population analyses. This is how you get the explosion of member variables polluting a certain Psi module. I recommend either making a subclass or demoting those member variables to arguments of a function call inside the parent population analysis. The latter option requires that any further requests for a particular population analysis be done at the time the population analysis is done, rather than reading a new OEProp request. This makes more sense to me. Okay, I refactored my code to match your suggested changes (passing the former member variables into a function)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742726551:278,variab,variables,278,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742726551,5,"['refactor', 'variab']","['refactored', 'variables']"
Modifiability,"> Bumping this - the [C7g](https://aws.amazon.com/ec2/instance-types/c7g/) ARM-based Amazon EC2 instances are probably the most cost-effective choice for high-performance CPU computing in the cloud right now. Not trying to derail this conversation, but I am not convinced that is true, at least if one plans to run close to 100% utilization for extended periods of time.; Something like a c7gd.12xlarge (48 vCPU, 96 GiB RAM, NVME SSD in the node) costs 590 USD per month, if the cheapest Amazon region (Mumbai, India) is used and 1 year is paid for in advance.; From a different provider one can rent a bare metal Ampere Altra Q80-30 server (80 cores, 128 GiB RAM, NVME SSD in the node), for 185 USD per month + $85 setup fee.; Even a 48 core latest-gen AMD EPYC, which will quite likely be faster than the Graviton 3 instance, costs only $218/month, and it comes with 256 GiB of RAM. Both of these options are cheaper per hour than Amazon's spot pricing (!!) for c7gd.12xlarge. So unless there are complications like funding agencies not allowing grant funds to be spent at arbitrary server providers, I think one can get more bulk compute for less money, compared to Amazon. Of course on-demand EC2 is very good for doing short bursts of compute, but for job marathons I don't think Amazon is all that competitive, not even with their own ARM CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263:345,extend,extended,345,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263,1,['extend'],['extended']
Modifiability,"> Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it.; > ; > All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc.; > ; > This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in [#2261 (comment)](https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277); > ; > In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified. All fair criticisms, and that clears it up. The code was originally pure C and later modified to fit (nominally) within a C++ framework, hence the structure of the variable declarations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467:109,variab,variables,109,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467,4,['variab'],"['variable', 'variables']"
Modifiability,"> DESTDIR is always set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. You mean _you_ are setting `DESTDIR` as an environment variable, right? Whereas old psi used to use it explicitly (https://github.com/psi4/psi4/blob/1.2.x/external/upstream/libxc/CMakeLists.txt#L33), that string doesn't appear in the source now, and in an objdir, it only activates if the envvar is set, and I've tested with GNU Make that it isn't set by default. >> That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). > What does this mean?; > Every port uses DESTDIR to supply stage directory. It is super well tested. I meant environment variables capable of influencing the psi4 build system have not been exercised -- I've stuck with CMake variables. I was not acquainted with user use of DESTDIR, as `CMAKE_INSTALL_PREFIX` has worked fine for users and other ports like Fedora (https://src.fedoraproject.org/rpms/psi4/blob/rawhide/f/psi4.spec#_134). > psi4 build adds DESTDIR to its inner stage directory which causes this problem. When I run an install and set envvar DESTDIR, I do see the two dirs under it that are your original issue. I'm glad to finally understand how this comes about, and I can look into this eventually. For now, I'd suggest either using `CMAKE_INSTALL_PREFIX` or the subdirectory (one of two) from env DESTDIR; either looks to contain the full installation directory you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040:203,variab,variable,203,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040,3,['variab'],"['variable', 'variables']"
Modifiability,"> Details about how the integrals were computed should be the province of the JK object, not the HF wavefunction, so I disagree with creating this new variable as described.; > ; > Can we instead have `computed_shells_per_iter_` on the JK object and query the JK object, after the HF, for test purposes?. That should definitely be doable! Give me a bit, and that change can be made.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1112211696:151,variab,variable,151,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1112211696,1,['variab'],['variable']
Modifiability,"> Good points. The code does run UHF/UKS as needed, and the MBIS routine can handle these cases as well. I have a few reference values for free atom volumes for elements H, Li, C, N, O, F, Ne, Si, S, and Cl, and we match these values. So I feel good about getting those ground states correct, but in general they many not be accurate, particularly for transition metals I'd imagine. I am inclined to trust the source of the ground state occupancy values from SAD, though. Note that SAD hasn't been using those values in a long time; instead it runs spin-restricted calculations. Also, SAD isn't symmetry aware at the moment, which is a problem especially for transition metals and lanthanides and actinides where e.g. the s and d orbitals are very close in energy and the energy differences between different configurations are just eV. The proper way to do it is to impose symmetry, so that the occupations can be controlled. This is the way it is in PySCF; the ground states are from fully numerical calculations I did in https://journals.aps.org/pra/abstract/10.1103/PhysRevA.101.012516",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679:809,config,configurations,809,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679,1,['config'],['configurations']
Modifiability,"> Good work Andy. I like the intent of this PR, which is to consolidate incremental Fock code between different derived `JK` classes. I think that if the incremental Fock feature is to be promoted to the parent `JK` class, it is important that the implementation be as efficient and maintainable as possible. In that respect, I think there are some general improvements to be made:; > ; > The way you've structured incremental Fock keeps eight lists of matrices attached to each `JK` object: copies of the previous `J`, `K`, `wK`, and `D` matrices, and differences between the last two iterations `J`, `K`, `wK`, `D`. In the interest of efficiency, I think it would be best to not store these matrices. Incremental Fock as implemented in the `DFJCOSK` class is a little better about this. That code adds the difference in `J`/`K`/`wK` to the appropriate buffer, which is not zeroed out between SCF iterations. This requires keeping only one list of matrices, the previous iteration `D`, which in my opinion is cleaner. (I have some thoughts on getting around storing the previous `D` matrix too.); > ; > Speaking more broadly about the design of the `JK` class, one valuable aspect of the `JK` class is that it is stateless and decoupled from the SCF procedure. `JK` classes have a well-defined [interface](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L175-L209). The variables like `incfock_count_` that you've proposed adding to the `JK` class break this statelessness, and my opinion that kind of logic should be in the SCF driver, not the `JK` object.; > ; > Let me know if any of these thoughts are unclear. I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. The scope of this PR is to f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623:283,maintainab,maintainable,283,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623,1,['maintainab'],['maintainable']
Modifiability,"> Have you tried with Python 3.11 yet?. update, I've built python 3.11 rc and numpy from source (first time ever). I did have to use the most recent v2.10.0 pb11. By turning off some diis (see below), I can get the variant on test tu1 to run through 6 SCF iterations (not to convergence) before segfaulting. major things still to investigate -- installing scipy, what lapack libraries for numpy is pip hiding from me, are the timer files closing cleanly when it throws the install-scipy-or-disable-accelerator message. and, of course, all this is on master, not the 1.3.2 of interest to you. . ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; set scf scf_initial_accelerator none; set diis off; energy('scf'). compare_values(-76.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357:788,variab,variable,788,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357,1,['variab'],['variable']
Modifiability,"> However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. No, these are plots of the same structure. That's why I'm not sure what is going on. ; > If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. Could it be that given these structures differ slightly from the ones that the forcefield was parameterized with that the MM energies are so much higher? In the second plot that I linked, I generated my own initial guesses and with those structures the MM energies are closer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-289561812:486,parameteriz,parameterized,486,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-289561812,1,['parameteriz'],['parameterized']
Modifiability,"> I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428:72,refactor,refactor,72,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428,1,['refactor'],['refactor']
Modifiability,"> I am still not 100% sold on such an explicit long-handed way test_standard_suite is written. Yes, I am increasingly open to a refactoring and consolidation once the build-out is complete. The `test_<mtd>_<driver>_default`s are particularly good candidates. Plus, consolidation has a good chance of allowing autodoc-ing, so that the same path info isn't in test_standard_suite.py, select fns of proc.py, and http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations . But the long-hand isn't the limiting factor in getting the ref data gathered and the psi module codes maximally compliant, so stable for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1971#issuecomment-666493740:128,refactor,refactoring,128,https://psicode.org,https://github.com/psi4/psi4/pull/1971#issuecomment-666493740,1,['refactor'],['refactoring']
Modifiability,"> I am using the latest git snapshot of the master branch. gtk. [this](https://anaconda.org/psi4/psi4-dev/files) is what I was talking about. It hides dependency tracking from many psi builders and seeds cmake configuration. I was hoping that could carry most builds until FindMPFR called by Libint2Config and I come to terms. Are you building libint2 through psi or using the libint2 conda-package or detecting other pre-built (will need to silence find_apckage(... components) in that case)? For now, I'd add `find_package(eigen)` and hack cmake_module_path as needed. And this should stay open until I get it patched correctly upstream. ```; ambit >=0.5.1,<0.6.0a0, chemps2 >=1.8.9,<1.8.10.0a0, cmake >=3.8, dkh >=1.2,<1.3.0a0, eigen, gau2grid >=2.0.3,<3.0a0, gcc_linux-64 7.*, gdma >=2.2.6,<2.2.7.0a0, gfortran_linux-64 7.*, gxx_linux-64 7.*, hdf5 >=1.10.6,<1.10.7.0a0, libint2 2.6.0 hc9558a2_9, libxc >=4.3.4,<5.0a0, mkl-devel 2019.*, mpfr, msgpack-python, networkx >=2.4, numpy >=0.12.0, pcmsolver >=1.2.1,<1.2.2.0a0, pybind11-headers >=2.5.0,<2.6.0a0, pytest, pytest-xdist, python >=3.8,<3.9.0a0, qcelemental >=0.17.0,<1.0, qcengine >=0.17.0,<1.0, simint >=0.7,<0.8.0a0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507:210,config,configuration,210,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507,1,['config'],['configuration']
Modifiability,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343774871:129,variab,variables,129,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871,2,['variab'],['variables']
Modifiability,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:114,inherit,inherits,114,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935,2,['inherit'],"['inherit', 'inherits']"
Modifiability,"> I made all of the requested changes, barring the `iteration_` variable, which I personally believe is necessary. If you have a workaround, please let me know :).This PR should be _really_ close to being finalized. At risk of being grumpy, please don't say you made all the requested changes unless you actually have. There were many of my comments that still haven't been addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577:64,variab,variable,64,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577,1,['variab'],['variable']
Modifiability,"> I really want to know how you stumbled onto this. :-) Yeah, so ""superbigam"" is now 7-7-4-12-7-5, and when I built that in Dec for 2.8.0 I only set the 12 for eri3, forgetting my own advice to make eri2 equal eri3. So rebuilding for 2.8.2, I knew I had to add symbols to the configuration.cc patch for eri2. Started searching patterns and realized I had P twice in the spdfg string. Then realized libmints (where I thought I had copied it from) had the same trouble. Then realized that libint had a mix of troubles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3130#issuecomment-1932715288:276,config,configuration,276,https://psicode.org,https://github.com/psi4/psi4/pull/3130#issuecomment-1932715288,1,['config'],['configuration']
Modifiability,"> I think cmake will largely ignore those flags for psi4. Not true by default. Some Psi4 files and plugins like CCT3 are affected.; ```; make --trace; ...; cd /home/gytibor/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src/psi4/libdiis && /home/gytibor/.conda/envs/psi4gcc/bin/x86_64-conda-linux-gnu-c++ -DUSING_LAPACK_MKL -I/home/gytibor/psi4/psi4/include -I/home/gytibor/psi4/psi4/src -I/home/gytibor/.conda/envs/psi4gcc/include/python3.9 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include -march=native -O3 -DNDEBUG -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++1z -MD -MT src/psi4/libdiis/CMakeFiles/diis.dir/diismanager.cc.o -MF CMakeFiles/diis.dir/diismanager.cc.o.d -o CMakeFiles/diis.dir/diismanager.cc.o -c /home/gytibor/psi4/psi4/src/psi4/libdiis/diismanager.cc; ```; Interestingly, `-DCMAKE_Fortran_FLAGS="""" -DCMAKE_CXX_FLAGS="""" -DCMAKE_C_FLAGS=""""` not only appends to, but removes the flags coming from conda:; ```; make --trace; ...; cd /home/gytibor/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src/psi4/libdiis && /home/gytibor/.conda/envs/psi4gcc/bin/x86_64-conda-linux-gnu-c++ -DUSING_LAPACK_MKL -I/home/gytibor/psi4/psi4/include -I/home/gytibor/psi4/psi4/src -I/home/gytibor/.conda/envs/psi4gcc/include/python3.9 -isystem /home/gytibor/.conda/envs/psi4gcc/include -march=native -O3 -DNDEBUG -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++1z -MD -MT src/psi4/libdiis/CMakeFiles/diis.dir/diismanager.cc.o -MF CMakeFiles/diis.dir/diismanager.cc.o.d -o CMakeFiles/diis.dir/diismanager.cc.o -c /home/gytibor/psi4/psi4/src/psi4/libdiis/diismanager.cc; ```; Probably the easiest way to keep the conda flags out of the build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026051711:99,plugin,plugins,99,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026051711,1,['plugin'],['plugins']
Modifiability,"> I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. Yes, there's some graphs to prove it I should dig up. Thanks for reading the printouts -- I glanced at the logic but not the warnings. Now memory and algorithm are printed with ""high-memory""/""low-memory"" labels and without efficiency judgements.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537:44,adapt,adapted,44,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537,1,['adapt'],['adapted']
Modifiability,"> I was not acquainted with user use of DESTDIR, as CMAKE_INSTALL_PREFIX has worked fine for users and other ports like Fedora . ```DESTDIR``` is a GNU standard. It is totally separate from ```CMAKE_INSTALL_PREFIX```. ```${DESTDIR}``` is also implicitly prepended to ${CMAKE_INSTALL_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. You need to build psi4 with the env variable ```DESTDIR=/tmp/path-to-onstall-psi4-to```.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. But psi4 writes the the whole build directory there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325740409:415,variab,variable,415,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325740409,1,['variab'],['variable']
Modifiability,"> I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... In another project, I have the glossary-like doc generated by python to cut down on that. Perhaps someday ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001:55,variab,variable,55,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001,1,['variab'],['variable']
Modifiability,"> I would keep the ""COSX"" for recognition. That's a good point; ""COSX"" is a fairly well-known algorithm. For consistency throughout the psi4's `libfock` library, I think it would be good to call it ""COSK"" over ""COSX""; all reference to the exchange matrix use the variable ""K"". > This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. Yes, the SCF is first converged on a small grid (specified by `COSK_RADIAL_POINTS` and `COSK_SPHERICAL_POINTS`). Afterwards, a single iteration is performed on a larger grid (specified by `COSK_RADIAL_POINTS_FINAL` and `COSK_SPHERICAL_POINTS_FINAL`). A good future mini-optimization would be to add a third medium grid, which would be used to converge the SCF after the small grid but before the final grid evaluation. > I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though. Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one. After we gain experience with the psi4 COSX we can make a couple useful defaults. I agree, it would be nice to have named quadrature grids. For now, I'll update the manual with some recommended spherical/radial point values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160:263,variab,variable,263,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160,1,['variab'],['variable']
Modifiability,"> I'm in favor of deprecating Da and Db for anything other than internal SCF use and creating a new wavefunction member to store all the densities, with proper labeling. This will of course be a lot of code refactoring, but that is quite literally the entire point of me doing all this cc PRs. And of course, somebody will need to tell dfocc about this API change. 🙂. Thanks for the enumeration of the organizational state of all the densities. The new Wfn member for finalized, labeled densities sounds good to me. Are the ES CC densities ready for that state yet, or are they still in preparation? For any that are still in preparation but still in need of saving, I guess I propose a temporary member of Wfn that is marked as having a finite lifetime. Same as Wfn.arrays, just not Wfn.arrays :-) Ben's already nervous about storing the per-atom charges that end up in qcvars, so I'm just not in favor of densities there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094491672:207,refactor,refactoring,207,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094491672,1,['refactor'],['refactoring']
Modifiability,"> I've started the review, but I'm confused by the original Ochsenfeld paper.; > ; > At the start of the algorithm, why do they say ""Loop over all mu in significant bra-shell pairs"" rather than ""Loop over all shells mu""? Every shell is in at least one significant pair, right?; > ; > I imagine this has to do with their reference to Ahlrichs prescreening and ""the significant shell pairs have been preselected by overlap criteria,"" but I don't follow the details. The shell prescreening for kets can be done over all shells, or over shells blocked by task (atom-pair). See the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" header. In my implementation, I did it over all shells prior to entering the task loop, but those two implementations are equivalent. I will refactor my code so that it conforms to the algorithm in the paper, for easier review and less confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618:793,refactor,refactor,793,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618,1,['refactor'],['refactor']
Modifiability,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172149716:46,plugin,plugins,46,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716,1,['plugin'],['plugins']
Modifiability,"> Immediate questions: @davpoolechem - Is JK stable enough for this PR, or do you need a hold on this while refactoring? @jturney - Does this sound more like a new library of its own, or something that belongs in `libmints`? @andyj10224 - Can you comment on what the difference is between `libffm` and `fmm tree`?. CFMM requires two parts: Multipole operations, as well as an octree structure.; FMMTree implements the octree structure needed for CFMM, and there is a lot of code there, so I am splitting this into three parts to aid the review process and to avoid too large a PR. The `FMMTree` class will be in `libfmm` as well. For the record, this PR will not affect `libfock` or any `JK` classes. That will happen in Part 3 (when JK is more stable)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845:108,refactor,refactoring,108,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845,1,['refactor'],['refactoring']
Modifiability,"> Is SAPT(DFT)/SF-SAPT included with the sapt.cc changes? Since they are mainly python procedures. I just fixed plain SAPT in the latest commit, as it has to be py-side. I'm not sure what to do about sf-sapt and dft-sapt at this point. Leaving those for now unless other have ideas. > How are plugins handled? Especially endorsed ones like sns-mp2, v2rdm_cassscf etc. They'll have to set their own name like https://github.com/piecuch-group/cct3/pull/2/files#diff-dd599d9e2da08b736cbf0b96add9a840R414 or in the pymodule.py file. I've done it for cct3 and adcc (whose py is in psi4/driver) and caspt2 but will have to adjust the other ones you mentioned. And some like pcmsolver, pe, efp/scf won't get recorded. When plugins move to cookiecutter or similar, the module stamping should get baked into the template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1935#issuecomment-648244261:293,plugin,plugins,293,https://psicode.org,https://github.com/psi4/psi4/pull/1935#issuecomment-648244261,2,['plugin'],['plugins']
Modifiability,"> Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Is there any potential harm to this when VV10 is done self consistently?; Only issue I see is breaking old user or p4numpy scripts that rely on the energy being summed up. Is this PR a 1.4 target? If not, could we put a warning or similar in place somewhere that it is subject to change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802058786:106,variab,variables,106,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802058786,1,['variab'],['variables']
Modifiability,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:46,config,configuration,46,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['config'],['configuration']
Modifiability,"> Nice work Andy! As I see it, this PR does three things:; > ; > 1. Adds a direct DFJ algorithm; > 2. Moves the LinK code out of the DirectJK class; > 3. Adds individual J/K classes in order to prevent future code duplication; > ; > Because these additions are fairly independent, I think it would be appropriate to break up this PR into two separate PRs. In the first PR, you do steps (1) and (2) by implementing a `DFJlinK` class which is derived from `JK`, just like all of the existing JK algorithms. In the second PR, you refactor the `DFJlinK` class so that it uses a `DFJ` and `LinK` class.; > ; > Also before any of this is done, I think it would be good to address the changes to density-screening we discussed last week. In the interest of minimizing the work of both me and the reviewers, I do _not_ think it would be a good idea to split this into two PRs, since it would involve adding a new JK class (`DFJLinK`), and then removing it, and then adding one again (`CompositeJK`). This would lead to a whole mess of merge conflicts, and involves me taking apart code that is 100% working, and then rewriting it. The second reason is that we already have reviews on CompositeJK, and to break this into two PRs at this point would also involve extra work for the core developers too. Comments on this are appreciated, but I feel __strongly__ about this opinion. On the other hand, I do agree that it would be good to discuss the density screening changes first before this PR is merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1097060877:527,refactor,refactor,527,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1097060877,1,['refactor'],['refactor']
Modifiability,"> Now that I have a copy of the paper, I've been able to review the density screening part of the PR. That half of the PR doesn't follow the standards of similar code, which is the big problem here, and fixing it requires a restructure. I request that you refactor the density screening part of this before I look at the incremental Fock build part. Trying to do both at once is too likely to cause confusion.; > ; > As for your handling of UHF and ROHF, I don't have expertise there. If you haven't already, do a quick search for density screening for open-shell references, and check the papers that cite Ahlrichs for any titles that specifically mention open-shells or new developments in Direct SCF. Hi Jonathon, I just implemented the refactoring. To request density screening, the user would just set `screening density` in the options. I believe the density screening part of the code is all refactored now, so feel free to look at the IFB part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-897257155:256,refactor,refactor,256,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-897257155,3,['refactor'],"['refactor', 'refactored', 'refactoring']"
Modifiability,> ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out. That site also states; > An automatic frozencore checker was also implemented that reorders orbitals for situations where the assigned molecular frozen core (based on counting core orbitals) is wrong because valence orbitals on light atoms happen to be lower in energy than the core orbitals of heavy atoms.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343#issuecomment-961190042:146,adapt,adapt,146,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961190042,1,['adapt'],['adapt']
Modifiability,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:142,plugin,plugins,142,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"> One thing I am confused about, why is the `screening` keyword only in the sapt module? I think we should refactor it as a global module. That's odd! ; Since we have `INTS_TOLERANCE` for every module maybe we should do the same with `screening`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898699140:107,refactor,refactor,107,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898699140,1,['refactor'],['refactor']
Modifiability,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:729,config,config,729,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['config'],['config']
Modifiability,"> So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however. > Thoughts?. Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693:214,extend,extend,214,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693,1,['extend'],['extend']
Modifiability,"> Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class. Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691:56,variab,variable,56,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691,1,['variab'],['variable']
Modifiability,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:192,rewrite,rewrite,192,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154,1,['rewrite'],['rewrite']
Modifiability,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:580,config,configure,580,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['config'],['configure']
Modifiability,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:101,parameteriz,parameterizes,101,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540,1,['parameteriz'],['parameterizes']
Modifiability,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:1230,inherit,inherited,1230,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467,1,['inherit'],['inherited']
Modifiability,"> Thanks, the basis set name makes sense. I will start naming my basis sets, but would it be possible to use a deterministic name for basis sets instead of a random one?. This feels like a @loriab question. > The `gradient` method does not use the `restart_file` keyword. I tried it, and it defaulted to the SAD guess. the SCF took 13 iterations to converge for the molecule in the original input file. As far as I can tell, only `energy` will utilize the guess from the restart file. I suppose I could call `energy(..., restart_file=X)`, then use `set guess read`, and then call `gradient`. That feels like more juggling than should be necessary. If `energy` takes this, then `gradient`, `frequencies`, and `properties`, etc. _should_ as well. We (meaning @loriab) are currently refactoring the above functions, to better support for embarrassingly parallel computations. I recommend that we wait until _after_ that refactoring to make the necessary changes here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1121447923:780,refactor,refactoring,780,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1121447923,2,['refactor'],['refactoring']
Modifiability,"> Thanks. In that case, can we change the comment at the start of the file to mention that? As written, I thought the two energies were supposed to be identical. Sounds good. This is why I like parameterized pytest for seeing the input differences. @bennybp, did I get the why-different reasons right above? And if you're changing that comment, maybe regenerate the ref file w/o test fail:. https://github.com/psi4/psi4/pull/2905/files#diff-667f7008a6b3ab105b3130447305716990d91451c161ed7eaf1f04886bd32a00R361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207:194,parameteriz,parameterized,194,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207,1,['parameteriz'],['parameterized']
Modifiability,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:744,refactor,refactoring,744,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381,1,['refactor'],['refactoring']
Modifiability,"> The below line still does an assert within the threaded code. I don't think that hurts any, just pointing out it's still there in case you wanted to remove it. It's already constrained, so I think it's harmless and can remain as a hint for refactoring. My guess is that that file would be helped by separate validation and work steps as many of the functions have defensive checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017:242,refactor,refactoring,242,https://psicode.org,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017,1,['refactor'],['refactoring']
Modifiability,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:263,variab,variables,263,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567,1,['variab'],['variables']
Modifiability,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:1100,adapt,adapt,1100,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718,1,['adapt'],['adapt']
Modifiability,"> The other major issue is the docs. I'll need to update the section describing excite state psivars, but @loriab, how do you feel about grouping psivars together? See discussion https://github.com/psi4/psi4/pull/2462#discussion_r822344906. I'd still strongly favor something like the below. It lets the variables (n,m,h,i) be defined in the definition, and new methods can join existing psivar entries. Also just less visual clutter when all but the methods line up. What do you think?. ```; .. psivar:: ADC ROOT n TOTAL ENERGY; TDDFT ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY; CCSD ROOT n TOTAL ENERGY; ... def incl n. .. psivar:: TDDFT ROOT n (h) -> ROOT m (i) OSCILLATOR ENERGY; CCSD ROOT n (h) -> ROOT m (i) OSCILLATOR ENERGY. def incl n, m, h, i; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129510593:304,variab,variables,304,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129510593,1,['variab'],['variables']
Modifiability,"> The second reason is that we already have reviews on CompositeJK, and to break this into two PRs at this point would also involve extra work for the core developers too. You have it backwards. Most of the work in PR reviewing is reading the code and figuring out what you're trying to do. Seeing ""oh, this is just moving code"" around is not work for me. Figuring out what parts of your PR are about Composite JK, what parts are about refactoring LinK, and what parts are about Direct-DF-J is a lot of work. Zach's plan does mean more work for you, but a smoother review process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1097072812:436,refactor,refactoring,436,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1097072812,1,['refactor'],['refactoring']
Modifiability,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:500,plugin,plugins,500,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,1,['plugin'],['plugins']
Modifiability,"> This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX. Thanks! Yeah, this precedence is the big reason I named the SCF_TYPE for DFJLinK the way I did. > and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. . This is correct. I plan on adding a new SCF_TYPE naming scheme for CompositeJK in the next CompositeJK PR. > There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. This is also correct. It's basically a refactoring of the code to combine the DFCOSK DFJ with the old DirectJK LinK into a new, separate JK class. > No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder. Awesome, thanks! This dual implementation is something I plan on removing in the next CompositeJK PR, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994:613,refactor,refactoring,613,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994,1,['refactor'],['refactoring']
Modifiability,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:185,variab,variable,185,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404,1,['variab'],['variable']
Modifiability,"> Three hours and nine minutes, according to the timestamps I have for relevant events. I believe the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Thanks for the info. It must be the Intel compiler and multiarch flags that lengthen my builds by an order of magnitude. > Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?. I expect the integral files in that tarball to be perfectly good. I've checked my local diff again, and nothing else should be harmful. One caveat is that the integrals author generally dissuades building AM>7, so I had to defeat those checks, but I know people who have built higher than that tarball (albeit different versions of the code) without known ill effects. If you've got an `.so`, and psi4 passes a few tests, I think you're good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493:834,config,configuration,834,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493,1,['config'],['configuration']
Modifiability,"> What version of cmake do you use?. Personally, I use a near-latest. The Psi4 minimum is 3.15. We could go higher, but at least one of the dependencies doesn't want to go beyond 3.16 until Ubuntu does. If you happen to be thinking of FetchContent instead of ExternalProject, I'm not keen on a rewrite, and we do have a couple deps (python ones) that aren't under CMake control. In what way is the copy from `<builddir>/objdir/stage` to `CMAKE_INSTALL_PREFIX` going awry?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655:294,rewrite,rewrite,294,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655,1,['rewrite'],['rewrite']
Modifiability,"> Where is libplugin called for?. I'm not 100% sure if this is necessary or not -- I was trying to adapt my old plugin from a couple years ago (for RESP charge fitting) that no longer compiles, so that might be just accidental on my part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172149347:99,adapt,adapt,99,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149347,2,"['adapt', 'plugin']","['adapt', 'plugin']"
Modifiability,"> Wow, a lot of PYTHON->Python for you to track down there. Is that syntax change a recent thing? LGTM!. I guess long, long ago, cmake's native python's detection had no notion of finding matching interpreter/library pairs. That reported its results as `PYTHON_FOUND` and friends. Hence numpy/pb11/us used the `FindPythonLibsNew` module that had mixed c++/py in mind and also reported as `PYTHON_*`. But the cmake native detection has been much revamped, reformed, and componentized, enough to [inspire pybind11 to switch over](https://github.com/pybind/pybind11/pull/2370/files). The new setup reports as `Python_*`. The long time it's taken to get cmake's new detection modules hammered out leads to the big jump to 3.15. There may still be plugin and docs build follow-up items, but I think I've caught most of the `Python`s. Main thing ppl have to do is edit their setup scripts if they're hinting the `PYTHON_EXECUTABLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688:743,plugin,plugin,743,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688,1,['plugin'],['plugin']
Modifiability,"> Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object). Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406:204,maintainab,maintainable,204,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406,1,['maintainab'],['maintainable']
Modifiability,"> You also have find_package(Libint ...) that can't work because libint2 doesn't provide cmake files, and you don't provide them either. The https://github.com/loriab/libint/tree/l2cmake branch provides the config file https://github.com/loriab/libint/blob/l2cmake/cmake/Libint2Config.cmake.in via either the repo or the tarballs https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L57-L70 . If you're not familiar with l2, you'll want to familiarize with the build stages of a cmake+cmake build https://github.com/loriab/libint/blob/l2cmake/CMakeLists.txt#L26-L44 . One can use a libtool+cmake build but then you have to disable `find_package` according to my notes above, particularly https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L14-L15 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008110483:207,config,config,207,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008110483,1,['config'],['config']
Modifiability,"> You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py; > ; > This is a bit complex compared to what you wish to do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:390,config,config,390,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['config'],['config']
Modifiability,"> `${DESTDIR}` is also implicitly prepended to ${CMAKE_INSTALL_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:197,variab,variable,197,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,1,['variab'],['variable']
Modifiability,"> if the goal is to re-enable compilation on apple Silicon with Accelerate, then we also need to take care of DGGSVD3/DGGSVP3, which are not shipped with the library. These functions are not used or exported to the python side by psi4. Yes, that was the intent -- to reenable Accelerate. Thanks for posting to get this on record. As far as I recall and observe, the lapack plan for psi has been for libqt to provide a C interface for all lapack, whether used internally or not, so that plugins can depend on psi for all blas/lapack. Python exports are as-needed. The latter function generically (not Matrix) could be handled by numpy nowadays. Whether we want to continue to serve the role of clapack is probably a question for a psi conf call. I agree, checking for those fns and conditionally excluding them at build-time is what I should do with this PR. What I don't like about it is that it's not going to work with the c-f scheme (https://conda-forge.org/docs/maintainer/knowledge_base.html#how-it-works) where one builds against a standards-compliant generic lapack, then, perhaps, switchs to Accelerate at runtime. I haven't run across a substitution I can define for DGGSVD3/DGGSVP3 -- has anyone else? Apple's recalcitrant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407:486,plugin,plugins,486,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407,1,['plugin'],['plugins']
Modifiability,> is there any reason not to grab this variable from the incoming wavefunction?. I think that's a safe solution nowadays.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194:39,variab,variable,39,https://psicode.org,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194,1,['variab'],['variable']
Modifiability,"> starting with conda psi4 0.3.491, you should be getting all the headers (though not namespace protected) and the basic psi4-config script. There's one missing header, which is `psi4config.h`. conda psi4 0.3.491 includes `include/psiconfig.h.cmake.in`, but not the fully configured `include/psiconfig.h`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-174064319:126,config,config,126,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-174064319,2,['config'],"['config', 'configured']"
Modifiability,"> that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running get_funcs.pl. The easiest way to force the list to be regenerated is to remove the build directory and rebuild. aha, thanks. you can also just add a blank line to top-level CMakeLists.txt to retrigger cmake config. LRC-BOP now working. >> I want to work on converting the c-f recipe to cmake and building out for Windows, so I may have some build MRs over at libxc. > What do you mean?. I mean I'm trying to build out the conda-forge arch matrix for libxc (https://github.com/conda-forge/libxc-feedstock/pull/8) so that psi4 windows can pull a pre-built libxc instead of doing an internal build. So I may have merge requests in your intervening week before v5.1 tagging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197:337,config,config,337,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197,1,['config'],['config']
Modifiability,"> v2rdm strikes again! :-); > ; > fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive. Thank you for the heads-up on this! I'll work on getting rid of ERISieve there, as well, and deprecate ERISieve here for 1.8. With this PR being connected to v2rdm_casscf, it'd probably be wise to make this PR post-1.8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258:105,plugin,plugin,105,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258,1,['plugin'],['plugin']
Modifiability,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:297,variab,variable,297,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826,2,"['refactor', 'variab']","['refactored', 'variable']"
Modifiability,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:569,plugin,plugins,569,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600,2,['plugin'],"['plugin', 'plugins']"
Modifiability,">>> lgtm, thanks! Is there any atomic unit for specific rotation?. >> since specific rotation is normalized for path length and concentration in experimental settings, I'd say the use of deg/[dm (g/cm^3)] for specific rotation is even more ubiquitous than the use of NM for wavelength for dynamic properties. @lothian may have more to say on this topic. > Are we talking about storing the specific rotation or the G' tensor? I would think we'd want to store the latter in atomic units (along with the field energy, also in a.u.), and not store the specific rotation, which can quickly be computed from the tensor and the energy. Both tensors and scalars are saved to psivars in the PR. I think that's usual procedure as we try to be explicit (mp2 tot, mp2 corl, hf tot) even if the arithmetic is easy. We are trying to map psivars more closely to qcschema properties though, which are rigidly atomic units. Over there, it's easy to request the ubiquitous user units of deg/[dm (g/cm^3)] be returned from au storage. We can add such capability to the `psi4.variable()` query in psi4. So my question was whether we could store the qcvars data in au. The qcvar name with nm I think is a reasonable exception since that won't translate directly to qcschema.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716616770:1056,variab,variable,1056,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716616770,1,['variab'],['variable']
Modifiability,">>> sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. >> MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that occ does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. > This is completely correct. The lone OLCCD algorithm in occ does not compute LCCD with the input orbitals. Great, thanks. `oremp2` is in good shape, then, and I'll add negative assertions for `olccd`. Here's the summary of what gets checked (details are at QCEngine): https://github.com/psi4/psi4/pull/2653/files#diff-e2cf14f98c8e885f5abc7385ca737bfeba9f2f62caead630129e6d7cd9678e71R193-R203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770:620,variab,variables,620,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770,1,['variab'],['variables']
Modifiability,"@JonathonMisiewicz . Let's subdivide further into 3 issues: the dfocc pcg, the occ lccd, and the occ olccd. * dfocc pcg: I think with the switch to coupling to `tol_t2` we're both satisfied. your approach fixes all the tests with far fewer iterations than my original sol'n; * occ lccd: you're right that the three errors were in spin components. I found that a `0.5 * tol_Eod` adds a single iteration about a quarter of the time, and fixes all the tests. Since triggering convergence on a small energy _rise_ is already a little unexpected, this prefactor doesn't bother me. I'm not adamant though -- adjusting e_conv for the stdsuite tests is a lot more palatable than adjusting pcg_conv.; * occ olccd: there's two errors -- one in spin components and another with the correlation energy itself (below). I tried to back off the prefactor, but nothing looser than a full order of magnitude fixed the tests. It's adding 2-4 iterations to every test (so 8-11 iterations becomes 10-14). That's severe, especially as it affects all the oo methods, not just olccd. So if you think it's better to skip this fix for a while, I'm ok with that. . `test_olccd_energy_module[olccd uhf conv ae: * occ -qz2p-ene0] OLCCD CORRELATION ENERGY: computed value (-0.21805777) does not match (-0.21805608) to atol=1e-06 by difference (-0.00000169).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760:148,coupling,coupling,148,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760,1,['coupling'],['coupling']
Modifiability,"@JonathonMisiewicz I refactored the variable names in the LinK code, but not the regular directJK code yet until I get your opinion on the new names",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-991449598:21,refactor,refactored,21,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-991449598,2,"['refactor', 'variab']","['refactored', 'variable']"
Modifiability,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1209,variab,variable,1209,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432,3,['variab'],['variable']
Modifiability,"@JonathonMisiewicz please tag me next time ;). The check should be human readable. Please declare new variables for all of the results of the ternary operations. If I were to write a size check for a matrix multiply of `C(m,n) = A(m,k) B(k,n)`, I would write the check something along the lines of `if((m_in != m_out) || (n_in != n_out) || (k1 != k2))`. And yes, in case of an error, one should print out the dimensions of all three matrices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178:102,variab,variables,102,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178,1,['variab'],['variables']
Modifiability,"@JonathonMisiewicz something to keep in mind, that may help while investigating the bug, The error you are seeing is raised by psio when it checks that a particular write won't extend into the next entry. So there may be differences in the size of other blocks, however if the overwrite is smaller than the old quantity you will never write into the next entry and an error wont occur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050:177,extend,extend,177,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050,1,['extend'],['extend']
Modifiability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:136,config,configuration,136,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,1,['config'],['configuration']
Modifiability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:356,CONFIG,CONFIG,356,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,1,['CONFIG'],['CONFIG']
Modifiability,@amjames maybe this is helpful in moving forward with the reformatting in #1206 and coupled cluster rewrite #1247 as a basis before further working on #1061 ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1257#issuecomment-424029557:100,rewrite,rewrite,100,https://psicode.org,https://github.com/psi4/psi4/pull/1257#issuecomment-424029557,1,['rewrite'],['rewrite']
Modifiability,"@amjames, I get these errors when I am using my plugins. I usually don't get it when I am running psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194431083:48,plugin,plugins,48,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194431083,1,['plugin'],['plugins']
Modifiability,"@amjames, sure you pulled `loriab:pcm2`, not `loriab:pcm`? Check that [these lines](https://github.com/loriab/psi4/blob/pcm2/psi4/CMakeLists.txt#L104-L109) are matching. It looks like it's still using the cmake/FindPCMSolver `MODULE` mode, not the new `CONFIG` mode.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-279749140:253,CONFIG,CONFIG,253,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-279749140,1,['CONFIG'],['CONFIG']
Modifiability,"@amjames, to my knowledge there is not yet a detailed plan about I/O ... your comments gave me an excuse to bring up the topic prior to our next developers' meeting. What you're saying about DPD makes sense to me... the users of DPD shouldn't have to worry about opening/closing files themselves, DPD should handle these details for them. I didn't realize or remember that it didn't already handle this. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 2:07:40 PM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: Re: [psi4/psi4] Coupled Cluster Rewrite (#1247). @CDSherrill<https://github.com/CDSherrill> I was under the impression that psio was going to be completely removed, but if the plan is to replace the internals and keep psio around as the abstraction layer then there is no need for DPD to implement one. However we do need DPD to insulate its user. Since the DPD instances rely on files being open/closed externally any other code using any DPD instance that does not properly ensure files are managed will leave all DPD instances in an invalid state. This is especially important for exposing amplitude access py side since in theory those accessor methods could be called at any point after a handle to the ccwfn is obtained. I guess what I really meant by that point wasn't that something needs to go in between DPD <-> PSIO, rather that DPD shouldn't be passing responsibility over management of an implementation detail on to it's users. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247#issuecomment-423279853>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9QdoFCG1HVF9-VktlmDeetttgktmX6ks5uc9lsgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918:618,Rewrite,Rewrite,618,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918,1,['Rewrite'],['Rewrite']
Modifiability,@andysim #442 has it finished for both libint and libderiv. Also included are `libintConfig.cmake` and `libderivConfig.cmake` files needed for `find_package`. That obviously won't help you until the rewrite is accepted though....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232780003:199,rewrite,rewrite,199,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232780003,1,['rewrite'],['rewrite']
Modifiability,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235422113:113,config,configuration,113,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113,1,['config'],['configuration']
Modifiability,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235131408:107,layers,layers,107,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408,1,['layers'],['layers']
Modifiability,"@andysim Yea, everything else was ready to go and we agreed internally that with the CMake rewrite it would be best off if we rebased them ourselves. Getting _very_ hard to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233789450:91,rewrite,rewrite,91,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233789450,1,['rewrite'],['rewrite']
Modifiability,"@andysim no tool, sadly. I think CLion can handle this kind of refactoring, I went with `grep`, `sed`, and squashing compiler warnings. Very tedious and slow going... @loriab I think it's a result of using `sed` and it should make no difference for the compiler. Do we have a style guide for when to use/not use `auto`? Otherwise I followed Meyers' guidelines in ""Effective Modern C++""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1269#issuecomment-429967769:63,refactor,refactoring,63,https://psicode.org,https://github.com/psi4/psi4/pull/1269#issuecomment-429967769,1,['refactor'],['refactoring']
Modifiability,"@bennybp, so constraints of Windows (mainly `DESTDIR=/path/to/somewhere make install` not available for on-the-fly relocation of install step) mean that our tidy scheme for cmake superbuild _staged_ install to `objdir/stage/$CMAKE_INSTALL_PREFIX/[bin|lib|share]` followed by cmake superbuild _final_ install to `$CMAKE_INSTALL_PREFIX/[bin|lib|share]` is about to crumble. The people making this change haven't seen ill effects, so I've been trying to remember why using the entire build prefix is important. I suspect it all has to do with `rpath`s (which were irrelevant to libint, as it has no managed dependencies). Psi4 _does_ manage rpaths carefully (bottom of next linked file), culminating in [`BUILD_WITH_INSTALL_RPATH`](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L126). IIRC, the full path scheme (`stage/$CMAKE_INSTALL_PREFIX`) allows both absolutely located and relatively located dependencies to be set for the staged installation, then those are still valid for the final superbuild installation. Note that conda rewrites `rpath`s, so the problem this scheme is solving wouldn't show up for conda-build. Nor would it show up for internal builds of dependencies (covered by relative paths). A conda-centric (psi4-path-advisor) build may also bypass the problem, since dependencies collocated. A spack-type build or one that uses local installations of dependencies found throughout the filesystem is more likely to hit the problem and need this treatment. As you designed the superbuild scheme, pinging you to see if my concerns are shared or overblown. Also @robertodr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980:1048,rewrite,rewrites,1048,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980,1,['rewrite'],['rewrites']
Modifiability,"@bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1937#issuecomment-650368198:90,variab,variables,90,https://psicode.org,https://github.com/psi4/psi4/pull/1937#issuecomment-650368198,2,['variab'],['variables']
Modifiability,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:115,config,configuration,115,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,1,['config'],['configuration']
Modifiability,"@dgasmith : Do you mean set up empty `Ind20,u` variable in case it's not computed ? As it is, the closed-shell SAPT0 code either computes coupled or uncoupled induction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364637354:47,variab,variable,47,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364637354,1,['variab'],['variable']
Modifiability,"@dgasmith @schiebermc. As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. So this PR just fixes some missing `for` clauses and clean up *OpenMP* pragmas.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1200#issuecomment-443178956:144,adapt,adaptation,144,https://psicode.org,https://github.com/psi4/psi4/pull/1200#issuecomment-443178956,1,['adapt'],['adaptation']
Modifiability,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:103,plugin,plugin,103,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896,1,['plugin'],['plugin']
Modifiability,"@dgasmith LibEFP is pure C, so there's no Boost in there (at least that I'm aware of). I think that means I'm off the hook! A lot of the work can be done using the refactoring tools in Qt Creator and/or a Python script, I hope.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235353805:164,refactor,refactoring,164,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235353805,1,['refactor'],['refactoring']
Modifiability,"@dgasmith Would you prefer I sub out all `core.set_variable(...)` with `wfn.set_variable(...)` or just ensure that all variables set are also bound to the wavefunction? I've was about to commit the latter as I've just got that working properly, but I'm not sure how important it is to keep access to the psivars w/ `P::e`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952#issuecomment-380454214:119,variab,variables,119,https://psicode.org,https://github.com/psi4/psi4/pull/952#issuecomment-380454214,1,['variab'],['variables']
Modifiability,"@dgasmith, I didn't realize you were trying to deprecate the variables. I can just populate V, Ex, Ey and Ez std::vectors (in OEProp) with the data, in the order that the grid points are specified, and bind the getters to python. The problem is then making a clean interface. The user is hidden from the oeprop objects themselves through the `property` wrappers. Perhaps something analogous to the `return_wfn` keyword, to return the `oeprop` instance?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234664083:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234664083,1,['variab'],['variables']
Modifiability,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347016004:195,plugin,plugins,195,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004,1,['plugin'],['plugins']
Modifiability,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273803591:618,rewrite,rewrite,618,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591,1,['rewrite'],['rewrite']
Modifiability,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356771661:165,flexible,flexible,165,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661,1,['flexible'],['flexible']
Modifiability,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248348353:36,rewrite,rewrite,36,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353,3,['rewrite'],['rewrite']
Modifiability,@jgonthier use another name instead of `linux` in `user-config.jam` Like this:. ```; using intel : linux-cray : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : mpich ;; ```. or whatever else. Be also sure that the MPI settings are passed correctly: http://www.boost.org/doc/libs/1_59_0/doc/html/mpi/getting_started.html#mpi.config; Let me know how it goes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-162564022:56,config,config,56,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-162564022,2,['config'],['config']
Modifiability,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218387805:440,plugin,plugins,440,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805,2,['plugin'],['plugins']
Modifiability,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:473,config,configures,473,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474,2,"['Config', 'config']","['Config', 'configures']"
Modifiability,"@jturney It is true if you have `timer` and `#pragma omp parallel` both in the plugin.; However, if I have; ```; void timer_on(const char *key, int thread_rank); {; ...; if (thread_rank != 0 and thread_rank != omp_get_thread_num()) {; printf(""\nTimer_on::Thread rank does not agree! arg=%d, %d=omp_get_thread_num()"",thread_rank, omp_get_thread_num());; }; ...; }; ```; in `/psi4/src/psi4/libqt/timer.cc`, and a plugin with; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; timer_on(""inner"",omp_get_thread_num());; printf(""Hello World from thread = %d\n"", omp_get_thread_num());; timer_off(""inner"",omp_get_thread_num());; } ; timer_off(""energy"");; return 0.0;; }; ```; It will print:; ```; Timer_on::Thread rank does not agree! arg=2, 0=omp_get_thread_num(); ```; That's what I don't understand here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308820958:79,plugin,plugin,79,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308820958,2,['plugin'],['plugin']
Modifiability,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:225,plug-in,plug-ins,225,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938,1,['plug-in'],['plug-ins']
Modifiability,"@kannon92 , just blow away your build dir and configure from scratch. That should fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265224163:46,config,configure,46,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265224163,1,['config'],['configure']
Modifiability,"@loriab , you are the best. I changed the class into class PSI_API PKJK, and all is well. So, should I make a PR for every case I encounter where my plugins can't see the symbols?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384374821:149,plugin,plugins,149,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384374821,1,['plugin'],['plugins']
Modifiability,"@loriab - many, but I think I might be nearing the end of these updates. I apparently hadn't used this plugin since the days of boost ... it probably would have been easier to rewrite the stupid thing from scratch than to repair it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373:103,plugin,plugin,103,https://psicode.org,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373,2,"['plugin', 'rewrite']","['plugin', 'rewrite']"
Modifiability,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:69,variab,variables,69,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"@loriab @adamjstewart I think there is some mpi enabled code in gtfock, and I know that you can write plugins that use mpi, Ashutosh and I played around with that a little last year. In general though I don't think it really gets you that much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226007585:102,plugin,plugins,102,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226007585,1,['plugin'],['plugins']
Modifiability,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:909,variab,variable,909,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534,1,['variab'],['variable']
Modifiability,"@loriab After attempting to implement your suggestion, I find it looks uglier. Might I suggest that we wait until ADC and EOM are hooked up, and _then_ discuss which way of formatting these variables is best? Once we have more options, my opinion may change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1064090557:190,variab,variables,190,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1064090557,1,['variab'],['variables']
Modifiability,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:186,variab,variables,186,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,2,['variab'],"['variable', 'variables']"
Modifiability,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249690183:237,config,configure,237,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183,1,['config'],['configure']
Modifiability,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252797491:351,variab,variables,351,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491,3,['variab'],"['variable', 'variables']"
Modifiability,"@loriab I think everything is fine from the superbuild perspective and I like the proposed dump- everything-in-external-directory structure. I think you have to be careful about assuming these external projects will have too much CMake stuff set, which is part of the reason I defined the compile time macros Psi4 side. The config files for GDMA, libint, etc. are not part of the actual distributions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238380074:324,config,config,324,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238380074,1,['config'],['config']
Modifiability,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:195,variab,variable,195,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,2,['variab'],"['variable', 'variables']"
Modifiability,@loriab Is this still an issue? I know you had done some work on the plugin build semantics recently,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/91#issuecomment-105535771:69,plugin,plugin,69,https://psicode.org,https://github.com/psi4/psi4/pull/91#issuecomment-105535771,1,['plugin'],['plugin']
Modifiability,"@loriab Just tried to link with conda chemps2 using the one from the test subchannel. CMake does not seem to realize CheMPS2 is there and keeps saying ""no suitable chemps2 found"" in spite of me passing; `-DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/global/home/users/jgonthier/software/miniconda -DCheMPS2_DIR=/global/home/users/jgonthier/software/miniconda` to CMake. Am I forgetting an option/env variable ?. @susilehtola Thanks for the suggestion ! I guess we could also always re-built a local version of gcc... Hopefully if the binary works it won't come to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288500982:395,variab,variable,395,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288500982,1,['variab'],['variable']
Modifiability,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:623,config,configure,623,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,1,['config'],['configure']
Modifiability,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:967,inherit,inherited,967,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015,1,['inherit'],['inherited']
Modifiability,"@loriab after some consideration with @lothian , I think the simplest course of action would be to simply not store the scalar variable. the unit question is somewhat nontrivial, plus there is the issue of scaling the rotation by the molecular weight of the system (which is handled very differently for solvated molecules, but is not accounted for in `ccresponse`). therefore the best way to make sure the user knows what they're getting is to let them compute it themselves from the mixed electric dipole-magnetic dipole response tensor. . following this logic, I also propose removing the scalar electric dipole polarizability, which is also easily computed using the trace of the stored tensor. I would update the new test to reflect this, just want to be sure this is an agreeable solution for everyone before I commit the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962:127,variab,variable,127,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962,1,['variab'],['variable']
Modifiability,@loriab ah! I didn't even check for `.a`s vs `.so`s. It looks like the conda recipe passes the shared flag to `b2` so I only had the `.dylib`s for almost all of the libraries. . I toggled the `Boost_USE_STATIC_LIBS` flag in `ConfigBoost.cmake` and the paths appear to be set correctly to find the `.dylib`s in `$HOME/anaconda/envs/psi4-py2.7`. I am checking to make sure that compiles fine now. ( I have to admit I don't really know what the difference between `.so` and `.dylib` is but CMake seems to think the `.dylib`s are okay. . I also modified the recipe so I can build the `.a`s as well. I report back later this evening after I check these options with hombrew boost linked/unlinked to see if having the .`a`s in the search path stops CMake from using the home-brew binaries. . Thanks for the help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-196536537:225,Config,ConfigBoost,225,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196536537,1,['Config'],['ConfigBoost']
Modifiability,"@loriab could you add a pipeline variable, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249:33,variab,variable,33,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249,1,['variab'],['variable']
Modifiability,"@loriab could you configure the pipeline variables, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339:18,config,configure,18,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"@loriab could you define the variables in the pipeline settings, so the PR can pass. A demonstration on my *Azure* account:; - By default (`ctest.type=quick` and `pytest.type=quick`), the automatic and manual builds behave the same: https://dev.azure.com/raimisg/psi4/_build/results?buildId=478 Time ~1 h; - Setting `ctest.type=full` and manually triggering a build, it does all the ctests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=479 Time ~4 h; - Setting `pytest.type=full` and manually triggering a build, it does all the pytests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=480 Time ~3 h; - `ctest.type=full` and `pytest.type=full` runs out of time. Max time is 6 h.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398:29,variab,variables,29,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398,1,['variab'],['variables']
Modifiability,"@loriab this probably isn't the greatest place for this, but oh well. I'm trying to run a5Z using the setup we discussed earlier (your branches and repos). I'm getting a segfault in compute shell quartet. Is it possible the angular momentum variables are (still) not being passed correctly to mints? If I run with a smaller basis everything's fine so I suspect that this is caused by using more than the default angular momentum. I'll investigate further tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240571773:241,variab,variables,241,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240571773,1,['variab'],['variables']
Modifiability,"@loriab, I think we might be able to check the first box. I tested on my linux box and I can compile and run plugins with scf and mointegrals. Do you want a separate manual page or it is ok to post new info in the same page where we describe ""--new-plugin""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-212549702:109,plugin,plugins,109,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-212549702,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-213240900:156,plugin,plugin,156,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"@loriab, okay, I think I got my plugin compiling against the latest psi4 conda build. The code is [here](https://github.com/rmcgibbo/resp2) and the build log on Travis-CI [here](https://travis-ci.org/rmcgibbo/resp2), if you're curious, at least about the configure/make stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172287504:32,plugin,plugin,32,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172287504,2,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,"@loriab, please re-review. The last commit changed variable definitions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2769#issuecomment-1320216508:51,variab,variable,51,https://psicode.org,https://github.com/psi4/psi4/pull/2769#issuecomment-1320216508,1,['variab'],['variable']
Modifiability,"@loriab: I think I agree with you but perhaps @psi-rking can help disentangle this. This is the code in `findidf/fd_freq_0.cc`:. ```; if (print_lvl >= 3) {; outfile->Printf(""\n\tForce Constants for irrep %s in mass-weighted, "", irrep_lbls[h]);; outfile->Printf(""symmetry-adapted cartesian coordinates.\n"");; mat_print(H_irr[h], salcs_pi[h].size(), salcs_pi[h].size(), ""outfile"");; }. // diagonalize force constant matrix; int dim = salcs_pi[h].size();; double *evals = init_array(dim);; double **evects = block_matrix(dim, dim);. sq_rsp(dim, dim, H_irr[h], evals, 3, evects, 1e-14);. // Build Bu^1/2 matrix for this irrep; SharedMatrix B_irr_shared = salc_list.matrix_irrep(h);; double **B_irr = B_irr_shared->pointer();. for (int i = 0; i < dim; ++i); for (int a = 0; a < Natom; ++a); for (int xyz = 0; xyz < 3; ++xyz); B_irr[i][3 * a + xyz] /= sqrt(mol->mass(a));. double **normal_irr = block_matrix(3 * Natom, dim);; C_DGEMM('t', 'n', 3 * Natom, dim, dim, 1.0, B_irr[0], 3 * Natom, evects[0],; dim, 0, normal_irr[0], dim);. if (print_lvl >= 3) {; outfile->Printf(""\n\tNormal coordinates (non-mass-weighted) for irrep %s:\n"", irrep_lbls[h]);; eivout(normal_irr, evals, 3 * Natom, dim, ""outfile"");; }; ```. It looks to me that contrary to what the print functions say, we first compute the Hessian (non-mass weighted), diagonalize it, and then mass-weight and symmetrize the eigenvectors?. @loriab, the normal coordinates that we print out now are not normalized. It's unclear what the Molden requirement are when it comes to mass-weighting or normalization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286474443:271,adapt,adapted,271,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286474443,1,['adapt'],['adapted']
Modifiability,@loriab: can you try with https://github.com/psi4/psi4public/commit/0e7d3c9e2d11df2e54cd258a4453894efca059b7? it fixes the problem (which I can reproduce) on my machine. unfortunately you can't configure the cmake search order as much as I would like.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134772723:194,config,configure,194,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134772723,1,['config'],['configure']
Modifiability,"@loriab: the following patches to `psi4/share/psi4/plugin/ambit/CMakeLists.txt.template` should fix the above problem. Can you try it when you have a chance?. line 54; ```; extern ""C""; SharedWavefunction @plugin@(SharedWavefunction ref_wfn, Options &options); {; using namespace ambit;. ambit::initialize(); // <== add; ```. line 181:; ```; //B.print();. ambit::finalize(); // <== add. return ref_wfn;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593#issuecomment-293693404:51,plugin,plugin,51,https://psicode.org,https://github.com/psi4/psi4/pull/593#issuecomment-293693404,2,['plugin'],['plugin']
Modifiability,"@loriab: yes, I forgot that's how we solved psi4/psi4private#115. Let me point out that I observe the same behavior if turn df_scf_guess on or off. So my main concern was efficiency, because we seem to recompute the PK integrals twice for both df_scf_guess=off or on. I think that for consistency we should perhaps warn the user if he/she selects df_scf_guess=off and of course not recompute PK integrals again. I am not particularly concerned with being able to do DF followed by PK, I just had a test fail in our plugin and I traced it back to the fact that orbitals from DF/PK gave slightly different energies (<1e-10). Perhaps we could re-enable df_scf_guess=on, but with the new info passing that's not too difficult to reproduce with two scf calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189096514:515,plugin,plugin,515,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189096514,1,['plugin'],['plugin']
Modifiability,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:113,config,configuration,113,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:125,config,configuration,125,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:114,config,configuration,114,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:114,config,configuration,114,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920:114,config,configuration,114,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920,2,['config'],['configuration']
Modifiability,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191759336:636,enhance,enhancements,636,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336,2,"['enhance', 'plugin']","['enhancements', 'plugins']"
Modifiability,"@maxscheurer Awesome! Thank you for working to get this PR in. It was a new type of plugin for us, so thank you for bearing with the comments and changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-528740493:84,plugin,plugin,84,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-528740493,1,['plugin'],['plugin']
Modifiability,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:1440,config,configuration,1440,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,1,['config'],['configuration']
Modifiability,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:685,config,configure,685,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"@psi4/editors, if consensus builds on the ctest label refactoring, I'm willing to do it now and be done with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262031166:54,refactor,refactoring,54,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262031166,1,['refactor'],['refactoring']
Modifiability,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:145,config,configuration,145,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048,1,['config'],['configuration']
Modifiability,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:105,variab,variables,105,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957,1,['variab'],['variables']
Modifiability,"@rbast, the EXPLICIT_LIB and EXTERNAL_LIB removal is because nothing outside cmake/math knows about those variables, so they're orphaned. LAPACK_LIBRARIES and LAPACK_INCLUDE_DIRS are being used in (I think, never used them myself) the EXPLICIT_LIB role.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279508615:106,variab,variables,106,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279508615,1,['variab'],['variables']
Modifiability,"@rmcgibbo, I made a [PR](https://github.com/rmcgibbo/psi4public/pull/1) to your PR so that variable labels stay consistent. This/your PR also needs rebasing. So please either (a) pull in my PR and rebase this one or (b) let me know, and I'll rebase my branch and do a PR (with your commit) directly. Thanks for the contribution kick-starting our Wavefunction.variables_ work. Btw, the git history rewrite this fall reduced repo size by 90%. If you wanted much quicker clones, you could delete your fork and re-fork.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643#issuecomment-284940969:91,variab,variable,91,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284940969,2,"['rewrite', 'variab']","['rewrite', 'variable']"
Modifiability,"@robertodr I am using the default compiler that ships with OS X El Capitan (`llvm-gcc`, and `llvm-g++`) version:. ```; Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1; Apple LLVM version 7.0.0 (clang-700.1.76); Target: x86_64-apple-darwin15.2.0; Thread model: posix; ```. For fortran I use `gfortran-4.9`:. ```; GNU Fortran (Homebrew gcc49 4.9.3 --with-fortran) 4.9.3; Copyright (C) 2015 Free Software Foundation, Inc.; ```. Here is the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`:. ```; if(APPLE); if(NOT DEFINED CMAKE_MACOSX_RPATH); set(CMAKE_MACOSX_RPATH ON); endif(); endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171441011:119,Config,Configured,119,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171441011,1,['Config'],['Configured']
Modifiability,@robertodr I have moved the Windows configuration to FindTargetOpenMP.cmake and made some clean up while debugging.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235:36,config,configuration,36,https://psicode.org,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235,1,['config'],['configuration']
Modifiability,"@robertodr and @andysim ; I could certainly make a PsiAPI test for energies, although I think the leading underscore of `_energies_from_fcidump` will have to be removed, since it denotes that the function is private. @CDSherrill ; I intended for this bit of code to do exactly what you describe:. ``` wfn_irrep = 0; for h, n_socc in enumerate(active_socc):; if n_socc % 2 == 1:; wfn_irrep ^= h; ```. The line `wfn_irrep ^= h` accumulates the XOR of all irreps `h` in `wfn_irrep`. I could rewrite it as `wfn_irrep = wfn_irrep^h` to make it more intelligible. I think that the format of `active_socc` is not a list of irreps, instead it's a list of orbital counts per irrep, which is why I XOR `h` and not `n_socc`. The `if n_socc % 2 == 1` check takes advantage of the fact that a number XORed with itself is 0, so only irreps with an odd number of orbitals matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451459103:488,rewrite,rewrite,488,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451459103,1,['rewrite'],['rewrite']
Modifiability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:322,rewrite,rewrite,322,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,1,['rewrite'],['rewrite']
Modifiability,"@susilehtola , AM is `MAX_AM_ERI` the CMake variable. Its translation to the quantities that appear in libint.h and libderiv.h is [here](https://github.com/evaleev/libint/blob/v1/README_CMake.md#building)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300614426:44,variab,variable,44,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300614426,1,['variab'],['variable']
Modifiability,"@susilehtola Applying random perturbations to the initial guess (without having a converged SCF solution) was just pure conjecture from my part.; Of course in general, applying the random rotation scheme may lead to a number of different outcomes, the SCF procedure may converge to the same solution, a solution with a different energy or not converge at all.; So ideally, one would first obtain a converged SCF solution, then use the random rotations to generate a few (say, 3-15, user configurable) perturbed initial guesses from it, run SCF on all of them, and see if any of them converges to a lower minima.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-352287278:487,config,configurable,487,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-352287278,1,['config'],['configurable']
Modifiability,@tallakahath Please pull the branch and then commit the addition of `MBIS VALENCE WIDTHS` to the [glossary](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/glossary_psivariables.rst). Just follow the pattern of the other MBIS variables.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226#issuecomment-2452051681:240,variab,variables,240,https://psicode.org,https://github.com/psi4/psi4/pull/3226#issuecomment-2452051681,1,['variab'],['variables']
Modifiability,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:58,variab,variables,58,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,@tomspur we're moving forward with the rewrite and we'd like your input. I sent you an invite to join the Slack channel on your institutional email. Let me know if you want to join using another email address and I'll re-send the invite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-425112027:39,rewrite,rewrite,39,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-425112027,1,['rewrite'],['rewrite']
Modifiability,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:121,plugin,plugin,121,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219,1,['plugin'],['plugin']
Modifiability,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230783977:70,rewrite,rewrite,70,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977,4,"['plugin', 'rewrite']","['plugin', 'plugins', 'rewrite']"
Modifiability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:83,plugin,plugin,83,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,5,['plugin'],"['plugin', 'plugin-makefile', 'plugins']"
Modifiability,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:101,variab,variable,101,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956,1,['variab'],['variable']
Modifiability,"A plugin is expected to link with OpenMP libs but not necessarily with BLAS, as it can get all its math functionality through psi4 core.so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400682940:2,plugin,plugin,2,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400682940,1,['plugin'],['plugin']
Modifiability,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7607,Config,Configuring,7607,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Config'],['Configuring']
Modifiability,ATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4049,plugin,plugin,4049,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"Aa a matter of fact, cmake finds packages through pkg-config perfectly fine. This is documented in cmake docs: https://cmake.org/cmake/help/v3.0/module/FindPkgConfig.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450763624:54,config,config,54,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450763624,1,['config'],['config']
Modifiability,"Aaah, great work! If it's fortran direct access, rather than DPD, that should hopefully be easy to cure with some `close` statements in the plugin 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600:140,plugin,plugin,140,https://psicode.org,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600,1,['plugin'],['plugin']
Modifiability,"Actually after double checking I was completely wrong on the symmetry; explanation. Sorry for any confusion I caused. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:26 AM, Justin Turney justin.turney@gmail.com; wrote:. > The numbers printed by the sointegral plugin are not the symmetry blocked; > indices but the absolute indices (non-symmetry blocked). The order of the; > absolute indices come directly from the basis set. For your input file the; > the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; > A1 (1s on carbon), so by symmetry this integral does not exist. The; > transformation matrix for obtaining symmetry blocked integrals is obtained; > with:; > ; > // prints the transformation matrix.; > soBasis->petite_list()->sotoao()->print();; > ; > What you probably want to look into is printing the {p,q,r,s}irrep and; > {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; > post-symmetry-blocking-transformation.; > ; > You're right, the difference between absolute and symmetry blocked indices; > could be better explained. With respect to two-electron integrals, Psi; > never reports integrals of value zero to prevent wasting CPU cycles, again; > this could be made clearer.; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com; > wrote:; > ; > > OK, found it. The overlap is zero for those orbitals.; > > ; > > But I was under the impression that sointegrals gave me all unique; > > integrals because of symmetry, including those that are zero due to the; > > overlap. This should be made clearer in the docs.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68#issuecomment-73901139:298,plugin,plugin,298,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73901139,2,['plugin'],['plugin']
Modifiability,"Actually, I think I have a better idea for testing this stuff. I can implement ""ESP"" and ""FIELD"" methods in OEProp that will compute the ESP and fields at the `PROPERTIES_ORIGIN` and set the results in Psi vars. I don't think the grid iterators should populate those variables, because the grids could be huge. By allowing `PROPERTIES_ORIGIN` to specify a single grid point, we can easily store the value for testing. This will also allow us to construct loops over grids in Python, without having to generate a grid.dat file. Thoughts, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234655165:267,variab,variables,267,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234655165,1,['variab'],['variables']
Modifiability,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301289886:475,config,configuration,475,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886,2,['config'],['configuration']
Modifiability,"Added a few lines to tests `cc39` and `cc29` for checking the variables for polarization and rotation. I tested them myself, in case Travis doesn't use those tests, and put the outputs in the PR description. I hope everything is in order!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-344331581:62,variab,variables,62,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344331581,1,['variab'],['variables']
Modifiability,"Adding printouts; ```; foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY); message(""al is \""${_al}\""""); message(""ald is \""${_ald}\""""); ```; yields the following output; ```; al is ""-lopenblaso""; ald is """"; ```. so I guess you need to add a check if ald is an empty variable..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648#issuecomment-286957146:285,variab,variable,285,https://psicode.org,https://github.com/psi4/psi4/issues/648#issuecomment-286957146,1,['variab'],['variable']
Modifiability,"After discussion with Lori, work on getting this PR through will resume after MQM. We also have a plan to deal with plugin incompatibilities. Feel free to review earlier if you wish.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1163433170:116,plugin,plugin,116,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1163433170,1,['plugin'],['plugin']
Modifiability,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:218,variab,variable,218,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624,4,['variab'],"['variable', 'variables']"
Modifiability,"Ah, I think @SebWouters said CASPT2 is only in 1.7, and there's a CheMPS2 API change between 1.6 and 1.7. But according to https://github.com/SebWouters/CheMPS2/issues/20, a new plugin from today should be such that the CheMPS2/Psi4 interfacing code is 1.7/HEAD compliant. So I don't see that what you're doing _shouldn't_ work. Would have to try it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185857811:178,plugin,plugin,178,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185857811,1,['plugin'],['plugin']
Modifiability,"Ah, got it. I don't have a good reference unfortunately, but a good rule of thumb is to assume that C++ is not initializing memory for you. Assigning to an entire array can be quite expensive, so it's left to the programmer. Moreover, you may be assigning values to it later, which would render any compiler-assigned initial value moot. The old `init_int_array` and friends were inherited from Psi3: they take care of allocating *and* zeroing the memory for you (using `malloc` and then `memset`) so they made things a little more convenient for the programmer. The modern C++ equivalent is to use `std::vector<int> myVec(nElements);` That simply makes a vector of length `nElements`, which can be passed to any function expecting an `int *` by passing `myVec.data()` or `&myVec[0]`. Note that even this way of constructing a vector doesn't initialize the data at all: to do that you need to either `std::fill(myVec.begin(), myVec.end(), 0);` or, better still, tell the compiler which value to use to construct the vector with `std::vector<int> myVec(nElements, 0);` . You can see in my commit that I only zeroed the first (index 0) element. The reason for that is because the loop over irreps starts from 1 in that code, so indices 1+ are correctly assigned. Index 0 was not being touched, so it retained whatever value resulted from the call to `new` that created the array. I hope this helps - please let me know if there's anything I can clarify at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250:379,inherit,inherited,379,https://psicode.org,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250,1,['inherit'],['inherited']
Modifiability,"Ah, so it seems I made a mistake in my assumptions. The failed CI tells me this:. `/home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/threeindexintegrals.cc:33:10: fatal error: psi4/libmints/sieve.h: No such file or directory; #include <psi4/libmints/sieve.h>`; ; It seems that PKJK is, in fact, _not_ the only place that uses ERISieve. This v2rdm_casscf plugin does, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347:427,plugin,plugin,427,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347,1,['plugin'],['plugin']
Modifiability,"Ah, the conda recipe may not be catching the problem if involving caching since always invoked fresh. Yes, at least try a `setup` configure and look at https://github.com/psi4/psi4public/wiki/8_FAQ_Contents#how-to-see-what-setup-and-cmake-commands-are-active-for-the-object-directory to see if it can help debug your direct cmake build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130117260:130,config,configure,130,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130117260,1,['config'],['configure']
Modifiability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:239,plugin,plugin,239,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,2,['plugin'],"['plugin', 'pluginintegrales']"
Modifiability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:80,config,configurations,80,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,2,['config'],['configurations']
Modifiability,"Ahhh. Commenting it out was a bad idea indeed. Thank you for pointing this out @susilehtola. It looks like the simplest way I can enable the functionality I need without breaking other things is to add a new protected variable `persistent_external_potentials_` and associated public methods `push_back_persistent_external_potential()` and `clear_persistent_external_potential()` to the `HF` class. Then the persistent potentials will not be cleared at each iteration. However, then we would have three mechanisms for doing nearly the same thing: `HF::external_potentials_` for dealing with PCM/DDX/PE, `HF::persistent_external_potentials_` for my user-supplied one-electron operators, and the `ExternalPotential` class for external point charges. Perhaps a better strategy would be to extend the `ExternalPotential` capabilities? It does seem to already allow for a diffuse charge density expanded in an auxiliary bases, but I couldn't find an example that uses this option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920:218,variab,variable,218,https://psicode.org,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920,2,"['extend', 'variab']","['extend', 'variable']"
Modifiability,"All DSD functionals, with the exception of the CORE-DSD-BLYP functional, were changed to the version from the 2013 paper. The versions without dispersion correction are now parameterized differently from the D2 and D3BJ versions. They will differ from previous version of Psi4, however our DSD-PBEPBE-D3BJ was checked against G16 and with frozen core on it passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/945#issuecomment-378480164:173,parameteriz,parameterized,173,https://psicode.org,https://github.com/psi4/psi4/pull/945#issuecomment-378480164,1,['parameteriz'],['parameterized']
Modifiability,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/187#issuecomment-156849608:58,config,configure,58,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608,3,"['config', 'plugin']","['config', 'configure', 'plugin']"
Modifiability,"All requested changes made. I have also run the _entire_ test suite, modulo plugins and dft benchmarks. I stumbled across a rather critical bug that way: empirical_dispersion needed to be updated with the new FINDIF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426:76,plugin,plugins,76,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426,1,['plugin'],['plugins']
Modifiability,"All right, I believe all outstanding issues up to this point have been resolved! As of recent, all checks and queries based on GauXC's AM (e.g., L2 cross-validation) are now conducted at runtime instead of compile-time, GauXC GPU memory allocation is user-controllable, and the build system is set up to propogate `CMAKE_CUDA_ARCHITECTURES` to GauXC in a reasonable fashion. Current issues in CI seem to revolve around problems with finding a suitable `basis_set_exchange` package to use for configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429:492,config,configuration,492,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429,1,['config'],['configuration']
Modifiability,"All the plugin templates are working now (I tried them myself last week). I think those last issues you had were from lingering files or mixing plugins/mointegrals/ with share/plugins/mointegrals.cc_template . If you have more code concerns repost here or for general questions, please try the forum (http://forum.psicode.org/)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-196390208:8,plugin,plugin,8,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-196390208,3,['plugin'],"['plugin', 'plugins']"
Modifiability,All we need for plugins are the headers to create the .so file and the psi4 executable to run against.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-135774593:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-135774593,1,['plugin'],['plugins']
Modifiability,"Alright I have extended two tests none of the quicktests run through ccdensity but I ran both of these and the passed. The changes don't seem to mess up comparison to output.ref so I didn't change them. . Pending feedback about how to index the roots I have followed what is in place for eom-cc ES energies. . `CC DIPOLE X` is the ground state. `CC ROOT 1 DIPOLE X` is first ES, and so on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260009547:15,extend,extended,15,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260009547,1,['extend'],['extended']
Modifiability,"Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824:138,variab,variables,138,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824,1,['variab'],['variables']
Modifiability,"Also, if you run `setup`, then `cd obj; make`, but realize something was set wrong (e.g. the path to libpython.so, the cmake variable `PYTHON_LIBRARY`), and then modify within cmake (`ccmake ..` and change a setting, hit `g` to regenerate), the build system doesn't seem to realize that nothing has changed and skip the appropriate stuff. I just did this, and we're rebuilding all the libint files :(",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130121250:125,variab,variable,125,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130121250,1,['variab'],['variable']
Modifiability,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:454,plugin,plugin-ize,454,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854,1,['plugin'],['plugin-ize']
Modifiability,And regarding the build: I cloned Psi4 yesterday on a machine where I never had Psi4 installed. The configure is also telling me that pybind11 could not be located and that it will be built.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288530704:100,config,configure,100,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288530704,1,['config'],['configure']
Modifiability,And search your plugin for `@CXX@`. I don't know where that's coming from.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271947159:16,plugin,plugin,16,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271947159,1,['plugin'],['plugin']
Modifiability,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225233909:153,config,configuration,153,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909,1,['config'],['configuration']
Modifiability,"Any chance it could be a disk space issue? I created a minimal env with cmake, eigen, mpfr, python, GCC, and it unpacked fine. Gnu compilers, but surely that wouldn't matter at the unpacking stage. ```; -- Found LAPACK MKL: /theoryfs2/common/software/intel2019/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_rt.so;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Could NOT find Libint2 (missing: Libint2_DIR); -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable Libxc could not be located, Building Libxc instead.; -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- Documentation targets available: doxyman (html); -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Running some tests requires pytest. Please install it manually (try: /home/psilocaluser/toolchainconda/envs/minbld/bin/python3.6 -m pip install pytest); -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636:1393,Config,Configuring,1393,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636,1,['Config'],['Configuring']
Modifiability,"Apparently I'd failed to run a ""git merge upstream/master"" after ""git fetch upstream"" when I created my local fork last week, so my most recent commit on master was by @dgasmith 18 days ago. As a result, none of the work between the Big Inversion appeared in my new fork, including the new_plugin code section in run_psi4.py. @jturney's question revealed the discrepancy. Plugin templates work now. Thanks, all!. -TDC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258732954:372,Plugin,Plugin,372,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258732954,1,['Plugin'],['Plugin']
Modifiability,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:114,config,configure,114,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,6,"['Variab', 'config', 'variab']","['Variables', 'config', 'configure', 'configure-libint-for-building-', 'variables']"
Modifiability,"Are you building with pcmsolver on? I think @robertodr will have to answer the why in your link. I think most people configure through the setup script, not with cmake directly. With cmake directly and without pcmsolver, https://github.com/psi4/psi4meta/blob/master/conda-recipies/psi4/build.sh has been working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130114938:117,config,configure,117,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130114938,1,['config'],['configure']
Modifiability,"Are you describing that `c1_deep_copy` on R/U/ROHF wfns are fine b/c https://github.com/psi4/psi4/blob/1ecf33397370ebaa3b2ec14dd276c22519c66ed4/psi4/src/psi4/libscf_solver/rhf.cc#L999-L1002 etc. in the derived classes copy over the orbitals; whereas, `c1_deep_copy` on say, CC, is lacking because those derived wfn classes haven't extended the method?. This makes sense historically since `c1_deep_copy`'s purpose was simply transitioning a symmetry-using SCF wfn into a c1-only post-SCF module. But I can see its deficiencies beyond that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874:331,extend,extended,331,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874,1,['extend'],['extended']
Modifiability,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775#issuecomment-320452824:21,plugin,plugin,21,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824,2,['plugin'],"['plugin', 'plugin-compile']"
Modifiability,Are you on OS X? I think you have a version of boost that has a different ABI or is linked against a different libstdc++/libc++ than your (non-standard) compiler `/usr/local/bin/clang-omp` is configured to target.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199#issuecomment-169146307:192,config,configured,192,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169146307,1,['config'],['configured']
Modifiability,"Are you setting `PSIDATADIR`? To what? I don't agree with it searching in ""/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin"". Often, just a new objdir suffices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271974463:115,plugin,plugins,115,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271974463,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:177,config,configuration,177,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,5,"['adapt', 'config']","['adaptations', 'config', 'configuration', 'configured']"
Modifiability,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261727164:138,adapt,adapt,138,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164,1,['adapt'],['adapt']
Modifiability,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:176,plugin,plugin,176,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509,2,"['coupling', 'plugin']","['coupling', 'plugin']"
Modifiability,"As a point of organization, keep responses _on_ comments on specific lines of code limited to responses _about_ those comments. Your point about BSISA didn't belong below my point about how a comment needed to be corrected. I still don't like the idea of adding member variables to `PopulationAnalysisCalc` that are not required for all or even most population analyses. This is how you get the explosion of member variables polluting a certain Psi module. I recommend either making a subclass or demoting those member variables to arguments of a function call inside the parent population analysis. The latter option requires that any further requests for a particular population analysis be done at the time the population analysis is done, rather than reading a new OEProp request. This makes more sense to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742615125:269,variab,variables,269,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742615125,3,['variab'],['variables']
Modifiability,"As best as I can tell, it's not actually _used_ Python-side, except for `dfmp2`. My first choice would be to keep the function C-side, but not export it Py-side. If that would be a problem for plugins, sticking a warning in the `docstring` is the best solution. I can't imagine how we would have separate user API and programmer API. The only plugins I imagine using `compute_gradient` are V2RDM and Forte. V2RDM doesn't call it Py-side. Forte does, but I can personally take responsibility for moving that to C-side, if Francesco approves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-869934318:193,plugin,plugins,193,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-869934318,2,['plugin'],['plugins']
Modifiability,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415#issuecomment-227061602:284,config,configure,284,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602,2,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"At _every_ recompile, `$objdir/src/bin/psi4/gitversion.h` is generated with contents below that get used in defining the output file header. ```; #define GIT_VERSION ""{master} b04cdf9 ""; #define PSI_VERSION ""0.4.90""; ```. Then either `$objdir/bin/psi4-config --version` or `$objdir/bin/psi4 --version` will yield the version. So I don't use the `VERSION` file at all for versioning. But I haven't gotten rid of it either b/c of dashboard suspicions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/271#issuecomment-187431099:252,config,config,252,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187431099,1,['config'],['config']
Modifiability,"At risk of encouraging procrastination, the alignment of error codes in `config.h` has been lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364:73,config,config,73,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364,1,['config'],['config']
Modifiability,"Awesome. I'll merge this into my PR and rebase tomorrow morning. On Tue, Mar 7, 2017 at 11:05 PM, Lori A. Burns <notifications@github.com>; wrote:. > @rmcgibbo <https://github.com/rmcgibbo>, I made a PR; > <https://github.com/rmcgibbo/psi4public/pull/1> to your PR so that; > variable labels stay consistent. This/your PR also needs rebasing. So; > please either (a) pull in my PR and rebase this one or (b) let me know, and; > I'll rebase my branch and do a PR (with your commit) directly. Thanks for; > the contribution kick-starting our Wavefunction.variables_ work.; >; > Btw, the git history rewrite this fall reduced repo size by 90%. If you; > wanted much quicker clones, you could delete your fork and re-fork.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/643#issuecomment-284940969>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_gsl1aKAenbQoYI_7elUN9aYliQyks5rjikCgaJpZM4MWI2g>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643#issuecomment-284949491:276,variab,variable,276,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284949491,2,"['rewrite', 'variab']","['rewrite', 'variable']"
Modifiability,"Biggest issue is moving the variables between the Functional/LibXCFunctional/Superfunctional; objects. Some of the C++ magic is completely lost to me. This line [here](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/src/psi4/libfunctional/superfunctional.cc#L98); is supposed to set the density cutoff to the superfunctional. But this [print out](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/src/psi4/libfunctional/superfunctional.cc#L287) shows me it does not work. I can set this value using python [superfunctional](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/driver/procrouting/dft/superfunctionals.py#L80) but that doesn't seem consistent. I spend a lot of time trying to fix this, but for now I am too confused. Need to revisit later. I welcome any pointers to what could be wrong :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-610439837:28,variab,variables,28,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-610439837,1,['variab'],['variables']
Modifiability,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281235825:178,rewrite,rewrite,178,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825,2,['rewrite'],['rewrite']
Modifiability,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:29,variab,variables,29,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,2,['variab'],['variables']
Modifiability,"CMake has ```CHECK_FORTRAN_FUNCTION_EXISTS(FUNCTION VARIABLE)``` which menas that it shouldn't be too difficult: check if the new one exists, otherwise use the old one. Right?; https://cmake.org/cmake/help/v3.0/module/CheckFortranFunctionExists.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433513043:52,VARIAB,VARIABLE,52,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433513043,1,['VARIAB'],['VARIABLE']
Modifiability,CMake was set to look for 4.30 with this syntax: `find_package(Libxc 4.3.0 CONFIG QUIET)`. It *should* rebuild correctly now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619567599:75,CONFIG,CONFIG,75,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619567599,1,['CONFIG'],['CONFIG']
Modifiability,"Can confirm `qcengine` uses the number of physical cores on a machine by default, as seen [here](https://github.com/MolSSI/QCEngine/blob/c171e80c51afc5bc08ac8a84971b526fd33671d3/qcengine/config.py#L43-L46). Running psi4 with `8` threads (I have 8 logical CPU cores) produces similar performance:. ```sh; time qcengine run psi4 caffeine.json > qcng_out.json ; qcengine run psi4 caffeine.json > qcng_out.json 45.94s user 1.78s system 578% cpu 8.249 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 67.32s user 1.73s system 680% cpu 10.142 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 53.52s user 1.06s system 701% cpu 7.781 total; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475:187,config,config,187,https://psicode.org,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475,1,['config'],['config']
Modifiability,"Can try some of [these solutions](https://stackoverflow.com/questions/19345930/cmake-lost-in-the-concept-of-global-variables-and-parent-scope-or-add-subdirec), but probably not worth it. I wonder if there's a psi4 call that can return Libint's AM (thinking ahead to pytest `@using_am_atleast_6`)? My checkmark still stands as-is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409#issuecomment-445009245:115,variab,variables-and-parent-scope-or-add-subdirec,115,https://psicode.org,https://github.com/psi4/psi4/pull/1409#issuecomment-445009245,1,['variab'],['variables-and-parent-scope-or-add-subdirec']
Modifiability,"Can you elaborate on the first sentence? I understand that globals are bad for code writing (you have to worry about interference from parts of the code you don't even know about) and maintainability (it's much harder to find what changed a variable value in debugging). I do not understand what globals have to do with QCDB, QCSchema, or to quote #883, ""complex Psi4 runs involving multiple computations.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-441833991:184,maintainab,maintainability,184,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-441833991,2,"['maintainab', 'variab']","['maintainability', 'variable']"
Modifiability,"Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it. All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc. This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277 . In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370:100,variab,variables,100,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370,3,['variab'],['variables']
Modifiability,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:103,plugin,plugin,103,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214,1,['plugin'],['plugin']
Modifiability,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:291,plugin,plugins,291,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,3,['plugin'],['plugins']
Modifiability,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:211,variab,variables,211,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,1,['variab'],['variables']
Modifiability,"Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. The other option might be to use `pkg-config` and check the `Libs.private` (I guess):. ```; grep ^Libs /usr/lib/x86_64-linux-gnu/pkgconfig/lapack-openblas.pc; Libs: -L${libdir} -llapack; Libs.private: -L${libdir} -llapack -lgfortran -lpthread -lm; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865:20,config,configure-time,20,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865,2,['config'],"['config', 'configure-time']"
Modifiability,"Currently only SAPT(DFT) goes through `sapt_jk_terms.py`. I kind of hope that we can move more of the SAPT0 code over to something similar with Disp staying fully C++. We are going to gain a lot of SAPT0 capabilities soon like spin-flip SAPT, Sinf Exch-Ind and Exch-Disp, regularized SAPT, ISA Exch etc and the Python level interface should make it easier to handle without performance degradation. I think the proposed would work fine. You can use either of the following:; ```python; >>> psi4.core.get_variables() # Returns a dict of all variables; >>> psi4.core.has_variable(""CURRENT DIPOLE X"") # Returns a bool checking if the variable is set; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364689483:540,variab,variables,540,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364689483,2,['variab'],"['variable', 'variables']"
Modifiability,"DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2284,variab,variable,2284,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['variab'],['variable']
Modifiability,"DMRG is also going to be complicated, because it doesn't have a proper wavefunction. I needed to fix that for libtrans refactor anyways, so I'll add this to my list. My other Psi projects are on pause until 1.5 anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779:119,refactor,refactor,119,https://psicode.org,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779,1,['refactor'],['refactor']
Modifiability,"Dear David,. It's psi4 beta 5, and I don't have a .psi4rc file. I use Ubuntu 14.04.1 LTS, have compiled psi4 with the intel compiler, with MKL, with boost from the debian package repository, and with the plugin option on. For the rest I didn't set any options. Best regards,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73074811:204,plugin,plugin,204,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73074811,1,['plugin'],['plugin']
Modifiability,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105440640:691,plugin,plugin,691,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640,1,['plugin'],['plugin']
Modifiability,"Dear Sebastian, ; I think that the problem is rather related to PSI4 than dmrg. Just look at the example you provided for water molecule :. ```; Number of atoms: 3; Number of AO shells: 9; Number of SO shells: 7; Number of primitives: 22; Number of atomic orbitals: 13; Number of basis functions: 13. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 7 0 4 2 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 1270 non-zero two-electron integrals.; Stored in file 33.; ```. Calling plugin fcidump.so.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ## Created the file H2O.631G.FCIDUMP. As you see a full 2- electron integral calculation is performed for ALL basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; I would like to circumvent this heavy calculation for the case of larger molecules as i am only interested in HOMO-LUMO region. Any way i try your advice but may i know at which line of fcidump.cc i have to copy and paste ; 781-811 and 814-858 lines of dmrgscf.cc ?. Furthermore may i know what is the x matrix : ""Number of variables in the x-matrix = 1032""; and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"". ALL THE BEST; LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105341330:614,plugin,plugin,614,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105341330,2,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105182036:511,plugin,plugin,511,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036,1,['plugin'],['plugin']
Modifiability,"Details about how the integrals were computed should be the province of the JK object, not the HF wavefunction, so I disagree with creating this new variable as described. Can we instead have `computed_shells_per_iter_` on the JK object and query the JK object, after the HF, for test purposes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1112143902:149,variab,variable,149,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1112143902,1,['variab'],['variable']
Modifiability,"Diagnosis: simint is sly (or, you can't defeat the header search). Completely fresh build dir, configured from the start to build simint locally with sse (`-DCMAKE_DISABLE_FIND_PACKAGE_simint=ON -DSIMINT_VECTOR=sse`). Consequently every signal in sight (see below) is set to local build and sse. _But_, there's still a simint installed alongside libint, etc. and that simint is avxfma. And it is those simint headers that show up in `./psi4-core-prefix/src/psi4-core-build/src/psi4/libmints/CMakeFiles/mints.dir/CXX.includecache` and are presumably defining SIMINT_AVX and thus triggering the offending `intrinsics_avx.h` inclusion. In the end, the same trouble as with multiple pybind11's – CMake can't trump native C++ header-seeking, so one has to keep any interferences out of sight. Resolved, sorry for the wild goose chase. ```; #pragma once; #define SIMINT_SSE; ```. ```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:95,config,configured,95,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['config'],['configured']
Modifiability,"Did plugin makefile writing ever work upon testing (https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/psi4/src/bin/psi4_main/create_new_plugin.cc#L137-L141)? I'm getting the below in the Makefile from a `psi4 --new-plugin`. I'll fix it, just trying to determine if it's a little fix or a ditch-templating-for-python-sooner-rather-than-later fix. ```; # Flags that were used to compile Psi4.; CXX = PLUGIN_CXX; CXXDEFS = PLUGIN_DEFINES; CXXFLAGS = PLUGIN_FLAGS; LDFLAGS = PLUGIN_LDFLAGS; INCLUDES = PLUGIN_INCLUDES; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235478566:4,plugin,plugin,4,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235478566,2,['plugin'],['plugin']
Modifiability,"Disclaimer that I have a PR that _also_ rewrites orbital reading/writing to use wavefunction serialization. My PR will be part of a larger change of the orbital reading tech to account for loss of symmetry (which also involves accounting for axis permutations), so I'm fine with putting the wavefunction serialization change in a non-feature PR. If it matters, my code is passing intense field tests, but I'd rather not make the PR until I have the bugs ironed out. I know for sure that one bug is due to a libmints bug that @jturney is investigating. My guess is that is the last bug, but famous last words.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446#issuecomment-449607046:40,rewrite,rewrites,40,https://psicode.org,https://github.com/psi4/psi4/pull/1446#issuecomment-449607046,1,['rewrite'],['rewrites']
Modifiability,"Do you want me to fix it up, or do you want to give it a try? The below should do the trick. ```; # on master; git checkout -b moldennormco; # last commit should be ""Fix typo in doc and specify non-mass-weighted/normalized normal modes""; git pull --rebase upstream master; # last commit should be ""Fix typo ..."" and ; # first non-you commit should be ""Merge pull request #641 "" with hash 0c08 ; # (from https://github.com/psi4/psi4/commits/master); git push origin moldennormco:master; # fails because you're trying to rewrite published history; git push -f origin moldennormco:master; # success; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286614076:519,rewrite,rewrite,519,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286614076,1,['rewrite'],['rewrite']
Modifiability,"Does `/home/jacobson/bin/psi4_wb97xd3_def2tzvp.py` contain a `qcng.compute()` call? May I see that file?. I don't run much through queues, so I don't have a feel for what qcng/config.py can/should pick up from the environment or host setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399:176,config,config,176,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399,1,['config'],['config']
Modifiability,"Drat, didn't think about `MAXNODE` differences btwn repos, and it only shows up `MAX_AM_ERI` >=7. Anyone ever need to reset it higher than the psi4 settings? If so, I can make it configurable. ```; # psi4/libint; /libint/src/libint_compiler/emit_order.c:#define MAXNODE 20000; /libint/src/libderiv_compiler/emit_deriv12_managers.c:#define MAXNODE 20000; /libint/src/libderiv_compiler/emit_deriv1_managers.c:#define MAXNODE 20000; ```. ```; # evaleev/libint; /libint/src/bin/libint/emit_order.c:#define MAXNODE 20000; /libint/src/bin/libderiv/emit_deriv12_managers.c:#define MAXNODE 10000; /libint/src/bin/libderiv/emit_deriv1_managers.c:#define MAXNODE 5000; /libint/src/bin/libr12/emit_gr_order.c:#define MAXNODE 3000; /libint/src/bin/libr12/emit_grt_order.c:#define MAXNODE 20000; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300271087:179,config,configurable,179,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300271087,1,['config'],['configurable']
Modifiability,"During the course of working on this, I've decided a more extensive, very-API breaking refactor will be needed. The problem is that in the current iteration of the code, DIIS has the responsibility for doing the extrapolation, and that naturally fails if the user requests EDIIS but not DIIS. I'll need to refactor this to have classes just to compute EDIIS/ADIIS/DIIS coefficients, and another class to do the actual extrapolation step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786:87,refactor,refactor,87,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786,2,['refactor'],['refactor']
Modifiability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:4072,config,configuration,4072,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['config'],['configuration']
Modifiability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4371,config,configuration,4371,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['config'],['configuration']
Modifiability,"Elsewhere, I've added builds of all the `--new-plugin plugname +template` templates, so we'll know if they ever break. . Here (https://github.com/psi4/psi4/pull/304/files#diff-960310e869df2437e6e4b4ad1fa11867R1799) is there any more specific error to catch, or is it one of those c-side psi-exceptions that can't be caught with specificity?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304#issuecomment-192756982:47,plugin,plugin,47,https://psicode.org,https://github.com/psi4/psi4/pull/304#issuecomment-192756982,1,['plugin'],['plugin']
Modifiability,"Excellent, an error!. Ok, that header is provided by `gcc_impl_linux-64` pkg and shows up for me at `/path/to/env/x86_64-conda_cos6-linux-gnu/sysroot/usr/include/sys/cdefs.h`. Same?. Note that if you hate this and just want to get on with life, drop the `--intel` from `psi4-path-advisor`, use the resulting `cmake -C/various/psi4DepsCache.cmake ... -H. -Bobjdir` command and tack on your own `-DCMAKE_CXX_COMPILER=icpc` etc. to configure against your system gcc 5.4, which will do just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370:429,config,configure,429,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370,1,['config'],['configure']
Modifiability,"Excellent, thanks for your tremendous effort.; Given that my test cases were not modified and still seem to work, i do not have any complaints. > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed.; No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089:763,variab,variables,763,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089,1,['variab'],['variables']
Modifiability,Extra items in the NumPy can be done by either adding unused fields or putting the the `array` or `variable` attributes on the Wavefunction.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459550513:99,variab,variable,99,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459550513,1,['variab'],['variable']
Modifiability,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4367,Config,Configuring,4367,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['Config'],['Configuring']
Modifiability,"FOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4060,config,configure,4060,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['config'],['configure']
Modifiability,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134687960:300,config,configure,300,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960,1,['config'],['configure']
Modifiability,"Fantastic news! I think we can probably kill this branch and concentrate on getting the latest and greatest in instead. We're doing a massive rewrite of the integrals right now, so best to wait until that's merged before working on the ECPs I think - we don't want to have any merge problems. When we have the new integrals code in (very soon, hopefully), I'll ping you and try to coordinate the ECP rewrite. Thanks for the very positive update :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196:142,rewrite,rewrite,142,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196,2,['rewrite'],['rewrite']
Modifiability,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235532620:445,variab,variable,445,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620,1,['variab'],['variable']
Modifiability,"Finally, I have built an experimental *Psi4* package for *Windows*: https://anaconda.org/raimis/psi4. Limitations/issues:; - Minimal functionality: no addons and plugins; - Slow: not optimized and with debugging instrumentation; - ~~Can be used as a *Python* package only (i.e. `psi4` command is not working)~~ -- #1420; - ~~`PSI_SCRATCH` has to be set, otherwise it will crash~~ -- #1413; - A few tests are failing:; - ~~`cbs-parser`~~ -- #1442; - ~~`ci-property`~~ -- #1440; - ~~`cc46`~~ -- #1422; - ~~`cc47`~~ -- #1422; - ~~`cc53`~~ -- #1438; - ~~`fci-tdm`~~ -- #1441; - ~~`fci-tdm-2`~~ -- #1441; - ~~`psimrcc-fd-freq2`~~ -- #1427; - ~~`psithon2`~~ -- #1410. If you are a *Windows* user, could you try and give feed back, please:; ```; > conda install -c raimis -c psi4 -c conda-forge psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-445293936:162,plugin,plugins,162,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-445293936,1,['plugin'],['plugins']
Modifiability,"First batch of questions:. Can TREXIO be extended to support other C++ types, such as `complex` or `double`?; If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?; Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1387486579:41,extend,extended,41,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387486579,1,['extend'],['extended']
Modifiability,Fix uninitialized variables in dfocc affecting UHF calcs are okay. Thank you very much Lori!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270#issuecomment-186778555:18,variab,variables,18,https://psicode.org,https://github.com/psi4/psi4/pull/270#issuecomment-186778555,1,['variab'],['variables']
Modifiability,For Wavefunction objects we suggest moving over to the `variables` attribute. See the [Wavefunction](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L232) and [MP2](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L180) classes. Ultimately we want all variables to move here and remove the global object.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683#issuecomment-296413930:56,variab,variables,56,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296413930,2,['variab'],['variables']
Modifiability,"For consistency's sake regarding Psi4 AddOns, I'd really like to keep `ENABLE_simint` as a boolean and have something like `SIMINT_TARGET_ARCH` as an optional variable. Would something like [this](https://github.com/tunabrain/tungsten/blob/master/cmake/OptimizeForArchitecture.cmake) allow selecting a good default for `SIMINT_TARGET_ARCH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533#issuecomment-275186110:159,variab,variable,159,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-275186110,1,['variab'],['variable']
Modifiability,"For history, back when Python detection in cmake was very broken (exe and lib weren't matching pair), numpy made their own alternate find python cmake file and pybind11 used numpy's and psi4 used pybind11's. I hear cmake has totally rewritten theirs, and pybind11 is now amenable to either (https://github.com/pybind/pybind11/pull/2370, I think). So, yes, upgrade now reasonable. Note that psi, in turn, installs the python finder module so that plugins can use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163:446,plugin,plugins,446,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163,1,['plugin'],['plugins']
Modifiability,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172263911:296,config,configure,296,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911,6,"['config', 'flexible', 'plugin']","['config', 'configure', 'flexible', 'plugin']"
Modifiability,"For organization purposes:. - [x] Remove debugging; - [x] Remove dead three-body coupling terms; - [x] Replace memory_manager with smart pointers (target of next PR); - [x] Add additional warning for PT (target of two PRs in, will also add the `wfn`); - [ ] Add back some rudimentary memory tracking. I'm going to shift my focus back to a paper I'm writing but should resume the smart pointer-ing when I feel I need a break (probably a week or so).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905:81,coupling,coupling,81,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905,1,['coupling'],['coupling']
Modifiability,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:310,rewrite,rewrite,310,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742,1,['rewrite'],['rewrite']
Modifiability,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220613816:619,plugin,plugin,619,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816,1,['plugin'],['plugin']
Modifiability,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-121430626:451,adapt,adapt,451,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626,2,['adapt'],['adapt']
Modifiability,"Full rework of SAD guess (#1451, #1452, #1456, #1458, #1477, #1479, #1481), fixing issues with fractional occupations, ECPs, and ghost atoms. Sad with spin-averaged fractional occupations is now the default guess in Psi4, yielding huge performance improvements. This is especially significant for unrestricted and restricted open-shell methods, for which the default guess was GWH which is even worse than CORE. Implemented the on-the-fly extended Huckel guess (#1498, #1529), which is based on the SAD solver. DIIS maximum absolute error criterion for SCF, instead of the default RMS error (#1460). Removed inconsistencies and bugs in formatted checkpoint files (#1475). Code assumes that the post-HF wave function contains a correlated density. Fixed inconsistencies in the passing of DF_FITTING_CONDITION; the default value is now 1e-10 in line with what was actually used by the code before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888:439,extend,extended,439,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888,1,['extend'],['extended']
Modifiability,"Glad to hear it's mostly working; * https://github.com/psi4/psi4/pull/2829 might help `matrix1`; * yes, the hungarian file had that change and now resides https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/scipy_hungarian.py#L103; * the datastructures is refactored into a different class https://github.com/MolSSI/QCElemental/blob/master/qcelemental/datum.py#L45 but your changes are good; * it looks like the uno_bipartite file has had some updates, incl. node -> nodes https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/gph_uno_bipartite.py#L108",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147:271,refactor,refactored,271,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147,1,['refactor'],['refactored']
Modifiability,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263098427:163,plugin,plugin,163,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427,1,['plugin'],['plugin']
Modifiability,"Glad to hear you were able to converge the geometry. I'll leave the ECP logging question to Lori, but I can speak to the orbital reading issue. The issue here is one of the two improvements to the orbital read/guess system that I need for my own research, so the permanent fix is high priority for me. However, the relevant code is intimately tied up with a part of the code that is currently unergoing a large rewrite, so I won't be able to start on the fixes until that's done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571:411,rewrite,rewrite,411,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571,1,['rewrite'],['rewrite']
Modifiability,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-182553481:196,plugin,plugins,196,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:535,inherit,inherit,535,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,1,['inherit'],['inherit']
Modifiability,"Go ahead, I have not even started. On Sat, 17 Nov 2018, 02:29 Jonathon Misiewicz <notifications@github.com; wrote:. > Unfortunately, I was right. Commenting out this line I added in #1108; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372>; > fixes the issue.; >; > That particular line ensures that when cloning a CoordEntry as part of; > cloning a molecule, the clone of a ZMAT coordinate inherits the computed; > Cartesians of the original atom, if any. That change was vital to prevent a; > bug where basis sets wouldn't be centered on atoms after cloning, and I; > believe that needs to be kept.; >; > I know Peter said he planned to hack on this, but I'm tempted to take this; > myself. This is holding me up from helping a user on the forum.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1325#issuecomment-439575958>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFFvoxZ6s8Qaqkkz0plIu-exW2oXNtVgks5uv2aAgaJpZM4YErPm>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-439600435:426,inherit,inherits,426,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-439600435,1,['inherit'],['inherits']
Modifiability,"Good catch. Yes, the ambit plugin wasn't even doing anything with ambit until c274b18e825bff404cd828c39fa3f840be6d9579. Please switch the check from `AMBIT_FOUND` to `ENABLE_AMBIT`, as that will catch both detect-external and build-internal ambits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230487517:27,plugin,plugin,27,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230487517,1,['plugin'],['plugin']
Modifiability,Good move fixing the `PYTHON_LIBRARY` CMake variable; mixed detection of Python interpreter/library/headers is definitely a scourge of Psi4 compilation. But I set that variable all the time and don't get an actual link to `libpython`. So I think it is just the version you're building is before we stopped linking explicitly.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275141079:44,variab,variable,44,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275141079,2,['variab'],['variable']
Modifiability,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:386,adapt,adapting,386,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,1,['adapt'],['adapting']
Modifiability,"Good to know the cause. In the cmake rewrite, psi4 and all add-ons are getting safeguards that catch attempts to build in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-239645645:37,rewrite,rewrite,37,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239645645,1,['rewrite'],['rewrite']
Modifiability,"Got it. Expect a PR with the gory details and comments over the weekend. If anybody needs this _right away_, you need to change [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2089-L2093) from; ```; PAbp[A][b] /= -(eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfocc; B++) {; ```; to; ```; PAbp[A][b] /= (eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfvir; B++) {; ```. There's a sign error, and you're looping over the wrong variable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519:484,variab,variable,484,https://psicode.org,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519,1,['variab'],['variable']
Modifiability,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:275,flexible,flexible,275,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803,1,['flexible'],['flexible']
Modifiability,Have you modeled on the examples [here](http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-blas-lapack-for-building-psi4)? . You can work from conda mkl nowadays with `conda install mkl-devel`. cmake commands are https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-dev-src/psi4DepsMKLCache.cmake#L15-L16,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380309166:104,config,configure-blas-lapack-for-building-,104,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380309166,1,['config'],['configure-blas-lapack-for-building-']
Modifiability,"Have you tried running it through Valgrind? If it's an uninitialized variable that GCC is magically zeroing out for you, Valgrind will tell you about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-176579308:69,variab,variable,69,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176579308,1,['variab'],['variable']
Modifiability,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:1065,config,configuration,1065,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,1,['config'],['configuration']
Modifiability,"Hello. Thank you for explain me. I still have some problems with this plug-in, it seems like I am doing something wrong or the plugin does not work yet. I make a complete pastebin to make it simpler to analyze: http://pastebin.com/4EAjU7CC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195784330:70,plug-in,plug-in,70,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195784330,2,"['plug-in', 'plugin']","['plug-in', 'plugin']"
Modifiability,"Here is a script can orthogonalize orbitals between different geometries. However it does not consider frozen orbitals. They can be simply added following the comments inside the script. ```; #!/usr/bin/python; import psi4. # some global variables; nirrep = None; nrdoccpi = None; nruoccpi = None; nactvpi = None; nmopi = None. """"""; This function makes (C1)^T S2 C1 orthogonal; C1: converged CASSCF orbitals at geometry 1; S2: SO overlap matrix at geometry 2; return: orthogonal orbitals; """"""; def ortho_orbs(wfn1, wfn2, semi = True):; title = ""\n ==> Orthogonalize Orbitals Between Different Geometries <==\n""; psi4.core.print_out(title). # make sure there is no frozen orbitals; psi4.core.print_out(""\n Testing frozen orbitals ... ""); global nirrep; nirrep = wfn2.nirrep(); nfdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_DOCC"")); nfuoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_UOCC"")); nf = nfdoccpi.n() + nfuoccpi.n(); if nf != 0:; psi4.core.print_out(""False""); raise ValueError(""I am too lazy to consider frozen orbitals.""); else:; psi4.core.print_out(""Pass""). # get C1 and S2; C1 = wfn1.Ca(); S2 = wfn2.S(). # figure out irreps and orbital spaces; global nmopi; global nrdoccpi; global nactvpi; global nruoccpi; nmopi = wfn2.nmopi(); nrdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""RESTRICTED_DOCC"")); nactvpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""ACTIVE"")); nruoccpi = psi4.core.Dimension(nirrep); for i in range(nirrep):; nruoccpi[i] = nmopi[i] - nrdoccpi[i] - nactvpi[i]. # create subspace orbitals: core, active, virtual; psi4.core.print_out(""\n Preparing orbitals of subspaces ... ""); Ccore = psi4.core.Matrix(""C core"", nmopi, nrdoccpi); Cactv = psi4.core.Matrix(""C actv"", nmopi, nactvpi); Cvirt = psi4.core.Matrix(""C virt"", nmopi, nruoccpi). # fill in data to orbitals of subspaces; for h in range(nirrep):; offset1 = nrdoccpi[h]; offset2 = nactvpi[h] + offset1. for i in range(nmo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-313731339:238,variab,variables,238,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339,1,['variab'],['variables']
Modifiability,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/302#issuecomment-192282809:79,adapt,adapt,79,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809,1,['adapt'],['adapt']
Modifiability,"Hi @JonathonMisiewicz . > Can TREXIO be extended to support other C++ types, such as complex or double?. `double` type is fully supported (it is the default for floats or can be explicitly accessed by using the `_64` suffix in the API). In fact, we fully support 32- and 64-bit integers and floats as well as strings and arrays of strings. The `complex` type is supported implicitly, namely the real and imaginary parts can be written in two independent calls to the TREXIO API. > If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?. Exactly, it is up to the user to decide which data to store. > Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?. I think you would need to modify a format for that, only items listed in the `trex.org` (`trex.json`) can be written since the source code of the library is auto-generated from the format specification. @scemama please correct me if I am wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470:40,extend,extended,40,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470,1,['extend'],['extended']
Modifiability,"Hi @JonathonMisiewicz,; Have you heard about the ESCDF library? It might be better adapted to what you want to do. It is also based on HDF5, but it is more low-level and flexible than TREXIO. See https://th.fhi-berlin.mpg.de/site/uploads/Publications/Oliveira_The_CECAM_electronic.pdf section G page 153.; I have never tried it, so I have no opinion on how easy it is to use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466:83,adapt,adapted,83,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466,2,"['adapt', 'flexible']","['adapted', 'flexible']"
Modifiability,"Hi @bozkaya, I agree that if/else blocks everywhere are not something anyone wants to see for your code. But I believe the trend with C++ code is toward greater abstraction so that the same code can cover more uses. Perhaps I didn't choose a fitting example above, but various people who have looked into DFOCC have been alarmed at the seemingly repeated code and numerous data structures. So maybe, as you say, when the individual methods are working as you want them, a consolidation and refactoring step could be useful. CCSD(T) gradients sound exciting!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221353542:490,refactor,refactoring,490,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221353542,1,['refactor'],['refactoring']
Modifiability,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:763,variab,variable,763,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,1,['variab'],['variable']
Modifiability,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:592,variab,variable,592,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,1,['variab'],['variable']
Modifiability,"Hi Daniele. This combination is not supported. I think this functionality request is perhaps better aimed at the QCSchema developers (https://github.com/MolSSI/QCSchema/issues). One main issue is the ambiguity of what an extrapolation (or a composite recipe) actually means. Running CBS jobs via QCSchema is not implemented in Psi4, and my personal opinion is that it likely won't be implemented in Psi4 itself anytime soon. What may happen is that someone will take the CBS functionality out of Psi4, adapt it to create ""schema"" jobs for each calculation required in a similar way we do internally in the CBS wrapper, and then combine the individual atomic results to arrive at the composite result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792:502,adapt,adapt,502,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792,1,['adapt'],['adapt']
Modifiability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:21,plugin,plugin,21,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,2,['plugin'],['plugin']
Modifiability,"Hi Dr. Lehtola,. Would you be able to post the output file as well? I was hoping to know exactly what code you're using because there have been a lot of revisions to JK algorithm selection based on memory lately. This would help me look at the code block that selected your algorithm and possibly help with your first bug. This bug usually shows up when the user selects an ""SCF_TYPE"" and then doesn't supply an amount of memory that warrants Disk/core. The second bug isn't so much a bug as a troublesome name. MemDFJK is a JK build package that is optimized to work in the case that there is enough core memory to hold the 3-index integral tensors, and DiskDFJK is a JK build package that we found performs better in the case where these tensors have to be read from disk. They were named after the cases in which they worked best for us not for their capabilities or limitations. . That being said, each of these packages has machinery to handle both in-core and disk-based integral handling. Psi4 chooses the package based on the value of the memory_ variable, and each package should then use the algorithm (""Disk"" or ""Core"") that best fits the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352:1055,variab,variable,1055,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352,1,['variab'],['variable']
Modifiability,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300648648:767,rewrite,rewrite,767,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648,1,['rewrite'],['rewrite']
Modifiability,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:311,plugin,plugin,311,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,2,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:1245,plugin,plugin,1245,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,2,['plugin'],['plugin']
Modifiability,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105276187:86,plugin,plugin,86,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187,9,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:103,config,configurations,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,2,['config'],['configurations']
Modifiability,"Hi everyone,. I'm on 1.4 and have cherry-picked in the changes from 9163cbd08865d26129cfbaf5c302fc14f870f30f. I'm building from source, as may be relevant to the MKL issues listed in #2283 I'm building with mkl/2019.0.117 (and stuck here for a bit because of my need for MKL_DEBUG_CPU_TYPE to continue to _work_). In addition, I have gcc/9.2.0 and icc/2020.2-108 going in my build env, with the C and CXX and Fortran compilers set to the intel compilers in my cmake config options. I'm running calculations with wB97M-V and was noticing the same issues @jminuse was. After cherry-picking and recompiling the issue persists. Adding `set wcombine false`, as suggested by @andysim makes the issue go away. . Without `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 4.329 GiB; user supplied 4.329 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90903258181044 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -308.38044687527724 -1.47141e+00 1.27547e-03 DIIS; @DF-RKS iter 2: -308.40241691478502 -2.19700e-02 1.31335e-03 DIIS; @DF-RKS iter 3: -308.53663731037796 -1.34220e-01 4.92966e-04 DIIS; @DF-RKS iter 4: -308.55582354785412 -1.91862e-02 1.78690e-04 DIIS; @DF-RKS iter 5: -308.55841981379780 -2.59627e-03 4.24843e-05 DIIS; @DF-RKS iter 6: -308.55870799442886 -2.88181e-04 2.96248e-05 DIIS; @DF-RKS iter 7: -308.55881660865606 -1.08614e-04 1.50957e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:466,config,config,466,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182,1,['config'],['config']
Modifiability,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:453,extend,extend,453,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,5,"['config', 'extend']","['configure', 'extend']"
Modifiability,"Hi, @raimis. We did use Boost until a couple of years ago. Its primary role was to link the C++ layer to Python, but it became extremely annoying to support and we ripped it out, using the header-only Pybind11 instead. A *lot* of users ran into build problems with mismatches in the boost versions found at configure time and that linked at compile time. These kinds of problems are easy to encounter if multiple boost implementations are available on a system, and the errors that result are very cryptic. For this reason, we went to a lot of trouble to remove all traces of Boost and it would be best not to reintroduce if possible. Looking at the list of problematic features quickly, they seem like they could be handled in C++11 (chrono library) or in the python layer. Would it be easy in your estimation to just compile away the time reporting for MSVC builds, and we can make a different PR later on to reintroduce them by using C++11 instead? Same for the stack trace. I'm not sure how/where the filesystem is used, so that could be a trickier one to handle - I'll look at it when I get a chance. We were trying to migrate OS interactions like filesystem stuff from C++ to Python where possible, so this could be good motivation for us to start seriously looking at doing so. Thanks again for your hard work with the MSVC conversion - it looks like you've had a lot of work to do. I'm not trying to make life harder for you, but I think it's fair to say that our experience with Boost was quite negative in the later years, so it is worth debating alternatives.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403834794:307,config,configure,307,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403834794,1,['config'],['configure']
Modifiability,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:219,config,config,219,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761,2,['config'],['config']
Modifiability,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:335,flexible,flexible,335,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,2,['flexible'],['flexible']
Modifiability,"Hm, this is a bit odd. The failing function (`free_atom_volumes(wfn)`) really shouldn't be called since you're only requesting the charges. I've created a PR to fix this, in addition to fixing the larger issue with computing MBIS volume ratios via scf_properties. Interestingly, this code fails in your case since you pass a wavefunction to oeprop that doesn't have 'CURRENT ENERGY' as a set variable. My PR doesn't address that, though I could help out if you also want to compute the volume ratios.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833:392,variab,variable,392,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833,1,['variab'],['variable']
Modifiability,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:546,config,configure,546,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['config'],['configure']
Modifiability,"Hmm, okay. Not building with pcmsolver. I'll trying using the setup script, if that's the standard flow. I did look a lot at your conda recipe, and that's part of what got me confused. I think it has to do with caching of CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT when cmake is configured multiple times, but idk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130116528:280,config,configured,280,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130116528,1,['config'],['configured']
Modifiability,"Hmm. I agree it is probably not worth spending a lot of time on, but for CMake noobs like me `-D SIMINT_VECTOR=...` not having any effect on its own is definitely surprising.; Looking at https://github.com/psi4/psi4/blob/ce8ce9a5e0fad4ebd2d5dee9b6d06b01047574b1/external/upstream/simint/CMakeLists.txt#L8; it appears as if there is a variable that already contains the string describing the vectorization type of the found simint binary. I have no idea how `simint_VECTOR` is (correctly) getting set to SSE, but _something_ must be somehow detecting that it is not the AVX default value set at ; https://github.com/psi4/psi4/blob/7afd2276795993fcfc7a769e5c2568d108678fc5/CMakeLists.txt#L167",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135:334,variab,variable,334,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135,1,['variab'],['variable']
Modifiability,"Hold off merging this, please. I'm going to rename the variables that @dgasmith mentioned today when I get a chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532#issuecomment-263862379:55,variab,variables,55,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-263862379,1,['variab'],['variables']
Modifiability,"How about defining both, to catch typos/confusion, but only documenting those with syntax in line with existing variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253959008:112,variab,variables,112,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959008,1,['variab'],['variables']
Modifiability,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:395,config,configure,395,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,1,['config'],['configure']
Modifiability,How many of these plugins do you have? :-). Are we racing btwn you working through your plugin library and adding `PSI_API`s and me finishing off 1.2?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049#issuecomment-399307593:18,plugin,plugins,18,https://psicode.org,https://github.com/psi4/psi4/pull/1049#issuecomment-399307593,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212422557:502,Config,Configuration,502,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557,1,['Config'],['Configuration']
Modifiability,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:28,variab,variables,28,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480,3,['variab'],['variables']
Modifiability,I agree that extending `_nbody_gufunc()` is probably the easier way to do this. I'll have a look at it next week.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/977#issuecomment-397192582:13,extend,extending,13,https://psicode.org,https://github.com/psi4/psi4/issues/977#issuecomment-397192582,1,['extend'],['extending']
Modifiability,"I agree with Holger about Psithon vs PsiAPI: work primarily in PsiAPI, but translate an input file to Psithon to show you _can_. Lori's topic list is a good one. Explicitly mention how to get orbitals and how to get variables (like the correlation energy) off the wavefunction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298:216,variab,variables,216,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298,1,['variab'],['variables']
Modifiability,"I agree with nuking, none of these subroutines are used anywhere in Psi4. This PR will only be useful in the off chance that the bindings are being used by some plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433448621:161,plugin,plugin,161,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433448621,1,['plugin'],['plugin']
Modifiability,"I agree with you; there shouldn't be any normalisation applied to ECPs. When I put the ECP code in I wanted re-use as much of the existing basis set handling code as possible, in the spirit of the DRY principle. Unfortunately there are a few subtle differences between how Gaussian shells and ECPs should be handled; I thought I had caught them all, but I didn't get the normalisation right. Thank you very much for pointing it out and fixing it. The parsing machinery used to take several trips between Python and C++ layers, so I attempted to consolidate it all Py-side. In the process I may have left some stuff in there that's not needed, so cleanup like this is very welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376511152:519,layers,layers,519,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376511152,1,['layers'],['layers']
Modifiability,"I also ran into lapack issues with libefp when trying to compile psi4 with the latest PGI compiler (16.10 community edition). I just checked your branch @loriab and libefp configures+builds normally, both with MKL and PGI blas (basically system_native). There are unrelated PGI issues that prevent a full psi4 build, but those are for another time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276692658:172,config,configures,172,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276692658,1,['config'],['configures']
Modifiability,"I can fix v2rdm_casscf - I just pulled these new changes to psi. > On Jan 3, 2018, at 12:47 PM, Roberto Di Remigio <notifications@github.com> wrote:; > ; > I see it's the switch to a strong enum that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the v2rdm_casscf repository, wait for it to be applied and then update the plugin's version in this PR?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/872#issuecomment-355077662>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGh-i1i5u-bNJtPsuPz4wXRe-jUOGks5tG70_gaJpZM4QyuVF>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355082034:358,plugin,plugin,358,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355082034,1,['plugin'],['plugin']
Modifiability,"I can put in an `INSIST_FIND_PACKAGE` signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. On the Libxc front, their development moved to GitLab (https://gitlab.com/libxc/libxc). I've added CMake to their build system, but their only official release since its been in (4.0, a few weeks ago) isn't compatible with Psi4 yet). So you're right that it's GH:loriab/libxc for now. But that repo should absolutely be installing `share/cmake/Libxc/LibxcConfig.cmake` and similar files. Note that [this line](https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L21) has to be in place for Psi to work. I'm glad to look at your build directive if that'd help. There's also a conda package for Libxc, but that won't much interest you for packaging purposes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343717373:129,variab,variables,129,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343717373,1,['variab'],['variables']
Modifiability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:253,plugin,plugin,253,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,5,['plugin'],"['plugin', 'plugin-makefile', 'plugins']"
Modifiability,I can't explain why the second instance is not reading the orbitals. A couple of quick tests that would be useful: a) does adding `set guess read` before the call to your plugin (and after the SCF call) change the behavior? and b) does the same thing happen if you call SCF instead of your plugin on the second function call?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227780765:171,plugin,plugin,171,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227780765,2,['plugin'],['plugin']
Modifiability,"I can't quite figure out how to pass custom vectors via Psithon/PsiAPI using `psi4.properties`.; If I pass a list of vectors (e.g., dipole integrals), [this](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/proc.py#L2962) code block obviously fails... Directly passing vectors to `cpscf_linear_response` obviously works somehow, but I could not find anything in the test suite that explicitly covers the ""user-provided vector""-case at all... Are there any plugins/3rd party codes relying on calling `cpscf_linear_response` directly with custom vectors as arguments, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817:513,plugin,plugins,513,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817,1,['plugin'],['plugins']
Modifiability,"I compiled everything (including Chemps2) in the CMakeRewrite with gcc.; For the most gcc tends to be one of the more strict compilers so if you can; compile with it, you can compile with anything. Although this doesn't help; on the old build it does hopefully provide some solace.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 13, 2016 6:49 PM, ""Lori A. Burns"" notifications@github.com wrote:. > I'm not ignoring this issue so much as I hadn't gotten to CheMPS2 in the; > cmake rewrite until yesterday. I'll be sure to check it with g++. It's; > conceivable that it was only working with intel compilers.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/452#issuecomment-239645635, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi0ozNgFxkroLGTV-YLzxj6CxComLks5qfknrgaJpZM4JYrrg; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452#issuecomment-239647631:514,rewrite,rewrite,514,https://psicode.org,https://github.com/psi4/psi4/issues/452#issuecomment-239647631,1,['rewrite'],['rewrite']
Modifiability,"I completely agree. Right now CC properties go through OEProp, but from within the module. Moving that to python has been on my list for a while. . Setting the `ref_wfn` Da/Db in ccdensity is complicated because the `Psi::ccdensity::onepdm()` function is not a member of any class that inherits from `wavefunction`. . So, in order to do this there needs to be some hook opened up in the base class (ie `set_postscf_Da`). . A cleaner solution would be to re-organize the various cc\* modules into one module with the ccwavefunction playing the role the ""MOinfo"" and ""params"" structs. Though, that would be a much larger project.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258885888:286,inherit,inherits,286,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258885888,1,['inherit'],['inherits']
Modifiability,"I confirmed that sapt8 got broken because we stopped storing `Ind20,u` in the `Ind20,r` variable in usapt0.cc. I am not sure where the `SAPT IND ENERGY` variable that is used for the test is defined. Does open-shell SAPT0 even go through `sapt_jk_terms.py` ? It seems like the code flow changed a bit since I implemented it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364678447:88,variab,variable,88,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364678447,2,['variab'],['variable']
Modifiability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:606,config,configurations,606,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,1,['config'],['configurations']
Modifiability,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:515,variab,variables,515,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110,1,['variab'],['variables']
Modifiability,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:280,config,configured,280,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,1,['config'],['configured']
Modifiability,"I didn't try too hard to break it on public (which doesn't have wavefunction_pass) so it's possible this never appears before the infrastructure changes. But nevertheless, those changes on the whole are for the better, and it's disturbing that infrastructure changes + suitable tweaking to make the extensive occ/dfocc test suite pass can still hide a situation like this. `Ecorr`, `Emp2AA`, etc. are computed out of sight. ... Aha! Initializing variable (below) seems to help in https://github.com/psi4/psi4/blob/master/src/bin/dfocc/mp2_direct.cc#L90; Only affects UHF. Will continue explorations along these lines. ```; 121 if (mo_optimized == 0) Esosmp2AB = sos_scale * Emp2AB;; 122 else if (mo_optimized == 1) Esosmp2AB = sos_scale2 * Emp2AB;; 123 ; 124 Emp2_t1 = 0.0;; 125 if (reference == ""ROHF"" && orb_opt_ == ""FALSE"") {; 126 if (wfn_type_ == ""DF-OMP2"" || wfn_type_ == ""CD-OMP2"") {; 127 //Singles-contribution; 128 Emp2_t1 = 0.0;; 129 //Alpha; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183550049:446,variab,variable,446,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183550049,1,['variab'],['variable']
Modifiability,"I don't have a solution, but thanks for the nice exposition of the problem. I'm a little troubled that your ""... after this point if hombrew boost is unlinked"" output doesn't have python. If any of `filesystem python regex serialization system timer chrono thread` are missing, it'll trigger building the prepackaged. Would you check again that _all_ those are present as `.a` in your anaconda package? I have gotten psi4 to link against pre-built boost conda packages before on Linux, so the problem is definitely not purely that (though it sounds like it could be an affinity to frameworks thing that crops up on Mac). If you don't have all those `.a`s but do have the `.so`s, you could try toggling https://github.com/psi4/psi4/blob/master/cmake/ConfigBoost.cmake#L14 . If the above comes up clean, would you want to try; `-DBoost_ADDITIONAL_VERSIONS=1.59 -DBOOST_ROOT=$HOME/anaconda/envs/psi4-py2.7` ? There's no particular reason it'd work, but it's covering a couple more bases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-196520712:749,Config,ConfigBoost,749,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196520712,1,['Config'],['ConfigBoost']
Modifiability,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:114,inherit,inherits,114,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923,2,['inherit'],"['inherit', 'inherits']"
Modifiability,"I don't think the ROHF orbital energies are incorrect, but they're [ambiguously defined](https://aip.scitation.org/doi/10.1063/1.4849615) due to an arbitrary choice of coupling between same-symmetry closed and open shell blocks. We do have [CUHF](https://aip.scitation.org/doi/full/10.1063/1.3503173) available, which gives an S^2 eigenfunction (i.e. ROHF) with the orbital energies emerging the same as what would come from semicanonicalization; either that or the default ROHF (followed by semicanonicalization) should be equally good references for SAPT, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265:168,coupling,coupling,168,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265,1,['coupling'],['coupling']
Modifiability,"I don't think you've pulled from github since the plugin fix was added. As long as your `printmo.cc` has `Process::environment.wavefunction();` in it, you'll keep getting this error. This (https://github.com/psi4/psi4/blob/master/share/plugin/mointegrals.cc.template) is the corrected template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195795181:50,plugin,plugin,50,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195795181,2,['plugin'],['plugin']
Modifiability,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:730,inherit,inheritance,730,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,1,['inherit'],['inheritance']
Modifiability,"I dont seem to have made a PR with the fix. Anyway, now I can add it to the refactored code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1188#issuecomment-433605809:76,refactor,refactored,76,https://psicode.org,https://github.com/psi4/psi4/issues/1188#issuecomment-433605809,1,['refactor'],['refactored']
Modifiability,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683#issuecomment-296845920:40,variab,variables,40,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920,2,['variab'],['variables']
Modifiability,"I forgot a rather important detail - when DFOCC says it is running all further computations in C1 symmetry, it does not just mean that spin-adapted orbitals won't be used. It even creates a C1 clone of the molecule. The `symmetrize_gradient` call symmetrizes to the C1 symmetry of the clone, not the symmetry of the molecule that went into the `gradient` call. As long as that symmetry-less molecule clone is used internally, I don't see how a fix for the issue would be possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061:140,adapt,adapted,140,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061,1,['adapt'],['adapted']
Modifiability,I found a copy of the function to computer the nuclear contribution to the dipole moment in the Molecule class. So I am going to leave that part of the refactoring for another PR. I think this is ready to go once all tests pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444600475:152,refactor,refactoring,152,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444600475,1,['refactor'],['refactoring']
Modifiability,I guess we can be confident that no plugins use this since these classes were not tagged with PSI_API?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964152653:36,plugin,plugins,36,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964152653,1,['plugin'],['plugins']
Modifiability,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:825,config,configuration,825,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,1,['config'],['configuration']
Modifiability,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254667012:136,plugin,plugins,136,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012,3,['plugin'],"['plugin-makefile', 'plugins']"
Modifiability,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:998,adapt,adapted,998,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['adapt'],['adapted']
Modifiability,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:235,config,configure,235,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,2,['config'],"['configuration', 'configure']"
Modifiability,"I have changed some CMake variable and now the compilation works fine (I think it was related to having CMAKE_OLDINCLUDEDIR set to /usr/include, causing a permission problem in the installation step). Linking with OpenBLAS also seems to have worked fine:. ```; [sfux@develop01 x86_64]$ ldd lib/psi4/core.so ; linux-vdso.so.1 => (0x00007ffc83bea000); libpython2.7.so.1.0 => /cluster/apps/python/2.7.12/x86_64/lib64/libpython2.7.so.1.0 (0x00007f1a75aa0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a7588b000); libopenblas.so.0 => /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so.0 (0x00007f1a736f5000); libstdc++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:26,variab,variable,26,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['variab'],['variable']
Modifiability,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:390,extend,extended,390,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,1,['extend'],['extended']
Modifiability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:34,extend,extended,34,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['extend'],['extended']
Modifiability,"I just refactored my code to reduce code duplicity (Ran all C-Tests, still passed). I changed the build_JK function by adding two boolean switches that determine whether to build J and/or K. So the function header is now; `build_JK(ints, D, J, K, do_J, do_K)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952:7,refactor,refactored,7,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952,1,['refactor'],['refactored']
Modifiability,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239052313:360,rewrite,rewrite,360,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313,1,['rewrite'],['rewrite']
Modifiability,"I just updated the docs too. One thing I am confused about, why is the `screening` keyword only in the sapt module? I think we should refactor it as a global module.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692:134,refactor,refactor,134,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692,1,['refactor'],['refactor']
Modifiability,"I know that I do not need to use ""long int"" for ""naoccA"" and ""navirA"" variables. However, there are many variables (eg. V^3 type) that requires the usage of long int. Instead of changing specific variables one by one, I have just applied a ""find/replace"". You are right that size_t would be a better solution. But long int is also okay as it is used in the ccenergy and fnocc modules. Further, in the near future I will replace ccsd_triples.cc file with a newer version which includes (T) gradients. At that stage I will consider to use the ""size_t"" instead of ""long int"". Hence, I think that the present change is okay.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/706#issuecomment-301900431:70,variab,variables,70,https://psicode.org,https://github.com/psi4/psi4/pull/706#issuecomment-301900431,3,['variab'],['variables']
Modifiability,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:32,variab,variable,32,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['variab'],['variable']
Modifiability,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236132448:114,variab,variable,114,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448,1,['variab'],['variable']
Modifiability,"I looked into this recently. The issue is that O2 has two degenerate orbitals. The issue begins when psi4 guesses the correct occupation. To determine which orbital is occupied we sort the orbitals and then populate them with electrons. If the alpha and beta orbitals end up being sorted in the same way we get a closed-shell det, if their order is switched (as it sometimes happens) then we get an open shell determinant (say pi_a pi'_b). Here is some debug info that I printed about a week ago. It shows the iterations through the sorted eigenvalues. You can see that in the second set the orbitals are picked in a different order and we get an open shell configuration. *Correct*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 6 // <; nalphapi_ -> 0, 5, 7 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 2 // < corresponding beta is in the same irrep; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // <; nbetapi_ -> 0, 5, 7 // <; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. *Fail*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 7 // <; nalphapi_ -> 0, 5, 6 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 3 // < corresponding beta is from irrep #2; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // < order is flipped here; nbetapi_ -> 0, 5, 7 // < order is flipped here; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]; ```. I am not sure what's the origin of the different ordering. I would assume that the sorting algorithm is deterministic. Perhaps the diagonalization step is not in the case of degenerac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307585640:658,config,configuration,658,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585640,1,['config'],['configuration']
Modifiability,"I made all of the requested changes, barring the `iteration_` variable, which I personally believe is necessary. If you have a workaround, please let me know :).This PR should be _really_ close to being finalized.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937361392:62,variab,variable,62,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937361392,1,['variab'],['variable']
Modifiability,"I mentioned this on Slack, but at present, only the Correlated procedure is used in Psi, and the others are legacy code. I have no idea what plugins are doing, but I assumed those all used Correlated as well. Let me know if you're going to change that. I imagine that you're using the SCF procedure for CASSCF purposes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756#issuecomment-557577957:141,plugin,plugins,141,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557577957,1,['plugin'],['plugins']
Modifiability,"I refactored my code, per Susi's suggestions. The only things left are whether or not my way of handling the python exporting of `do_incfock_iter` is ideal, and my question on stability analysis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-940155921:2,refactor,refactored,2,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-940155921,1,['refactor'],['refactored']
Modifiability,"I see it's the switch to a strong `enum` that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the `v2rdm_casscf` repository, wait for it to be applied and then update the plugin's version in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355077662:206,plugin,plugin,206,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355077662,1,['plugin'],['plugin']
Modifiability,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:16,plugin,plugin,16,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943,1,['plugin'],['plugin']
Modifiability,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194615624:313,plugin,plugin,313,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624,3,['plugin'],['plugin']
Modifiability,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172235413:603,plugin,plugins,603,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413,3,['plugin'],['plugins']
Modifiability,"I strongly concur. If you do anything now, you'll have to deal with Boost::python, whereas the current development head (https://github.com/jturney/psi4/commits/CMakeRewrite-KillTheBoost) uses pybind11 for python binding. I think the new plan is to merge that branch (which is 250 commits ahead) back into master this week with main functionality intact but some lesser items subject to polish and change (e.g., docs, cmake, plugins, psimrcc-fd-freq2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-246810068:425,plugin,plugins,425,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-246810068,1,['plugin'],['plugins']
Modifiability,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:443,config,configures,443,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,1,['config'],['configures']
Modifiability,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197551790:38,adapt,adapting,38,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790,1,['adapt'],['adapting']
Modifiability,"I think Debian Jessie, which is still in Extended LTS period, ships with GCC 4.9. Stretch (which is in LTS) ships with 6.3. Similarly, it looks like everything older than (and including) RHEL7 came with GCC 4.8, but for RHEL6 and RHEL7 their respective DTS packages come with GCC 6.2 or newer. I vote to deprecate GCC 5 on principle...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-768020329:41,Extend,Extended,41,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-768020329,1,['Extend'],['Extended']
Modifiability,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316152578:314,variab,variables,314,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578,1,['variab'],['variables']
Modifiability,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:662,extend,extended,662,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['extend'],['extended']
Modifiability,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:195,variab,variables,195,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,3,['variab'],"['variable', 'variables']"
Modifiability,"I think the best course of action is for me to take this as part of my foray into the `cc` mega-module, after I'm through with the test pass. Incidentally, the current plan for my `cc` module pass is: get `cc` tests off perl, this issue, move variables to `wfn`, move `ccdensity` to Matrix objects, then give `ccdensity` a Wavefunction. There's a lot more that could be done, but my primary interest is in syncing up densities across multiple modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149:243,variab,variables,243,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149,1,['variab'],['variables']
Modifiability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:123,config,configuration,123,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['config'],['configuration']
Modifiability,"I thought about the explicit checking of psivars. In fact, I figured that if anything would fail the test suite, it would be if there were tests which checked these (evidently there was not). I could possibly add one at a later date- it would help keep plugins which parse a dictionary created by `core.get_variables()` from randomly breaking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-344102578:253,plugin,plugins,253,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344102578,1,['plugin'],['plugins']
Modifiability,"I thought the octupoles were re-shaped Py-side to be arrays of the appropriate dimension? The following line passes tests and shows octupoles as a 3-by-3-by-3 matrix. ```; compare_values(np.array([0, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, 0, 0, 0, 0, -0.9526489, 0, -0.9526489, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, -6.8644462]).reshape((3, 3, 3)),; variable(""MP2 OCTUPOLE""), 4, ""MP2 OCTUPOLE"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890:363,variab,variable,363,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890,1,['variab'],['variable']
Modifiability,"I tried my suggested fix using GCC and it didn't work. Neither did [this](https://gcc.gnu.org/onlinedocs/gcc-4.8.4/gcc/Function-Specific-Option-Pragmas.html) or [this](http://odellconnie.blogspot.com/2012/02/controlling-gcc-optimization-with.html) so I'd rather stick with zeroing out offending elements, as in this PR; portability is far more important than worrying about some arbitrary cutoff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-293473618:320,portab,portability,320,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293473618,1,['portab'],['portability']
Modifiability,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-170054358:94,config,config,94,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358,3,['config'],['config']
Modifiability,"I tried valgrind. I found a couple of functions with assumed return type; due to an incorrect syntax (probably the problem), one invalid read (going; 8 bytes too far), and a couple of uninitialized variables that probably; don't matter. Enough to give it another go. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Thu, Jan 28, 2016 at 11:13 PM, Andy Simmonett notifications@github.com; wrote:. > Have you tried running it through Valgrind? If it's an uninitialized; > variable that GCC is magically zeroing out for you, Valgrind will tell you; > about it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/228#issuecomment-176579308.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-176991048:198,variab,variables,198,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176991048,2,['variab'],"['variable', 'variables']"
Modifiability,"I understand the docs (https://www.openmp.org/spec-html/5.0/openmpse57.html) such that an integer of `1` is the same behaviour as `(omp_set_nested(0);` where 0 is a bool. > If the environment variable is set to false, the initial value of max-active-levels-var is set to 1. The `max-active-levels-var` corresponds to `omp_set/get_max_active_levels`. Below does seem to pass the sapt-tu5 test with jaQZ (and which I can make fail with `omp_set_max_active_levels(0);`). . ```; #ifdef _OPENMP; omp_set_max_active_levels(1);; #endif; ```. The threading test gives the same level of threading as compiling with `omp_set_nested(0)` (and conda psi4). . Though I am hesitant making a 'too quick' PR about it. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041:192,variab,variable,192,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041,1,['variab'],['variable']
Modifiability,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:119,plugin,plugins,119,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262,1,['plugin'],['plugins']
Modifiability,I went ahead and rewrite the history. I think your instructions worked.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286876414:17,rewrite,rewrite,17,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286876414,1,['rewrite'],['rewrite']
Modifiability,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:514,rewrite,rewrite,514,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544,1,['rewrite'],['rewrite']
Modifiability,"I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... I'll get docs up and un-draft this (hopefully tonight) and save test pass for tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560:53,variab,variable,53,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560,1,['variab'],['variable']
Modifiability,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:954,extend,extend,954,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083,1,['extend'],['extend']
Modifiability,I would hope that you wouldn't need to set a global variable to get the basis set passed to the wavefunction object. Agreed that this is a bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177#issuecomment-837233698:52,variab,variable,52,https://psicode.org,https://github.com/psi4/psi4/issues/2177#issuecomment-837233698,1,['variab'],['variable']
Modifiability,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:200,adapt,adapted,200,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['adapt'],['adapted']
Modifiability,I'd rather just not set the coupled variables if we do not compute them. I guess the argument the other way is folks might have a script expecting these values either in the printing or psivars. I still think not setting the coupled variables is a bit cleaner overall.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-363350484:36,variab,variables,36,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-363350484,2,['variab'],['variables']
Modifiability,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-130124191:33,plugin,plugin,33,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191,4,['plugin'],"['plugin', 'plugins']"
Modifiability,I'll rebase my plugin work to this and open a new PR.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488#issuecomment-258132017:15,plugin,plugin,15,https://psicode.org,https://github.com/psi4/psi4/pull/488#issuecomment-258132017,1,['plugin'],['plugin']
Modifiability,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:720,variab,variable,720,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169,2,['variab'],['variable']
Modifiability,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-250948669:945,flexible,flexible,945,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669,1,['flexible'],['flexible']
Modifiability,"I'm compiling everything by myself. I think the error might be because I got rid of the ```libstdc++``` flag, because I configured with:; ```-DCMAKE_CXX_FLAGS=""-march=native"" ```. This might be an issue related to:; https://stackoverflow.com/questions/35006614/what-does-symbol-not-found-expected-in-flat-namespace-actually-mean. But when I kept it I couldn't configure if I remember correctly. I will check this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248:120,config,configured,120,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248,2,['config'],"['configure', 'configured']"
Modifiability,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:331,config,config,331,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199,2,['config'],"['config', 'configuration']"
Modifiability,"I'm going to adapt the sample file, too, afterwards this can be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830:13,adapt,adapt,13,https://psicode.org,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830,1,['adapt'],['adapt']
Modifiability,"I'm not 100% certain my ""fix"" is not just a hack - my understanding of basis sets and contractions is rather limited. The way I understand it, we're not trusting user input and are normalising all of the normal shells, using both `self.normalise_shell()` and `self.erd_normalise_shell()`. For normal shells, the inputs are the exponent `eps` and the normalisation constant `N` in: ; `psi = N * exp (-r**2 * eps)`. For ECP's, the inputs on each line aren't the exponent + normalisation, but rather they should be the three variables (`n`, `z`, `d` columns in g09 input) in the `i`th component of the potential `v(r)`:; `v(r)_i = d_i * r**(n_i) * e**(-z_i * r**2)`; The third column (`d`, if I got the above right) is stored in `self.PYcoef` and `self.PYoriginal_coef`. If this coefficient is set to zero, the whole component of the potential should be 0 - it shouldn't be normalised. The first column `n` goes to `self.rpowers` for each shell. Finally, the `self.PYexp` contains the exponent `z`. My two questions therefore are:; - should we perform any normalisation at all (including `self.normalise_shell()`) on ECP shells? To me the answer seems no...; - I am assuming the only way to tell a shell is an ECP shell from within `ShellInfo` class is if `self.rpowers` is populated. Wouldn't it be better, if `ShellInfo` received `pt=""Normalized""` when processing an ECP shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376423459:522,variab,variables,522,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376423459,1,['variab'],['variables']
Modifiability,"I'm not following, I'm afraid. On a build with only pb11 built internally and configured and launched from odd directories to try to provoke a `pwd` issue, these are the only Target files I get under `stage/`, and they seem to be in place and not duplicated. ```; objdir1: (insist) find stage/ -name ""*Target*""; stage/usr/local/psi4/share/cmake/TargetLAPACK; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Config.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; stage/usr/local/psi4/share/cmake/pybind11/pybind11Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets-release.cmake; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343783023:78,config,configured,78,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343783023,1,['config'],['configured']
Modifiability,I'm not ignoring this issue so much as I hadn't gotten to CheMPS2 in the cmake rewrite until yesterday. I'll be sure to check it with g++. It's conceivable that it was only working with intel compilers.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452#issuecomment-239645635:79,rewrite,rewrite,79,https://psicode.org,https://github.com/psi4/psi4/issues/452#issuecomment-239645635,1,['rewrite'],['rewrite']
Modifiability,"I'm sorry about the disruption. The executable or the config script or the output file will spit out the proper version, if that helps. ``` bash; >>> bin/psi4 --version; 0.4.14; >>> bin/psi4-config --version; 0.4.14; ```. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 0.4.14 Driver. Git: Rev {master} 2485238 dirty; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182961246:54,config,config,54,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182961246,2,['config'],['config']
Modifiability,"I'm troubled by your steps 1 & 2. The command `psi4 --new-plugin myplugin +mointegrals` (which can be executed anywhere in your filesystem– in or out of the psi4 repo clone doesn't matter) _creates_ a new directory `myplugin` already populated by various files, which you should be able to cd into and execute `make` within. Steps 1 & 2 shouldn't be necessary. They might be interfering b/c the name of the directory is bound up in the name of the plugin, which requirement the `--new-plugin` automatically satisfies. That is, once you're done with the experimentation stage, choose your name `myplugin` carefully, because it's a bother to switch out later. Or are you generating a plugin from the conda binary? That requires a little different procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194479817:58,plugin,plugin,58,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194479817,4,['plugin'],['plugin']
Modifiability,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1511,config,configure,1511,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,1,['config'],['configure']
Modifiability,I'm using 16.0.2 with no problems on my workstation. Didn't know about the `ENABLE_XHOST` configure option but I routinely use `setup --vectorization` with no issues. I'll give xhost a try shortly. Though I'm having trouble getting cfour running on my new cluster using 16.0.2 with my flags from the old cluster (with older Intel compiler). I'm wondering now if this is related.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198705736:90,config,configure,90,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705736,1,['config'],['configure']
Modifiability,"I'm using `mp.set_start_method('spawn', force=True)` which seemed long-term safe (cf [this Python discussion](https://discuss.python.org/t/switching-default-multiprocessing-context-to-spawn-on-posix-as-well/21868)), although perhaps `forkserver` would be just as safe. I had to do some refactoring elsewhere to get this to work but it ultimately worked out, so this isn't blocking me. Still, it would be nice not to have to worry about this behavior - not sure what in Psi4 breaks with `fork`, or if it's easily fixable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778:286,refactor,refactoring,286,https://psicode.org,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778,1,['refactor'],['refactoring']
Modifiability,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:1308,evolve,evolved,1308,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,1,['evolve'],['evolved']
Modifiability,I've found that in ConfigPython.cmake PYTHON_LIBRARY is being used but in the link in src/bin/psi4 PYTHON_LIBRARIES is being used. Once I made the change in src/bin/psi4 I was able to link.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152671:19,Config,ConfigPython,19,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152671,1,['Config'],['ConfigPython']
