quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,".4 */; 4283 case 504:; 4284 return ""Gateway Time-out""; /* RFC2616 Section 10.5.5 */; 4285 case 505:; 4286 return ""HTTP Version not supported""; /* RFC2616 Section 10.5.6 */; 4287 case 506:; 4288 return ""Variant Also Negotiates""; /* RFC 2295, Section 8.1 */; 4289 case 507:; 4290 return ""Insufficient Storage""; /* RFC2518 Section 10.6, RFC4918; 4291 * Section 11.5 */; 4292 case 508:; 4293 return ""Loop Detected""; /* RFC5842 Section 7.1 */; 4294 ; 4295 case 510:; 4296 return ""Not Extended""; /* RFC 2774, Section 7 */; 4297 case 511:; 4298 return ""Network Authentication Required""; /* RFC 6585, Section 6 */; 4299 ; 4300 /* Other status codes, not shown in the IANA HTTP status code; 4301 * assignment.; 4302 * E.g., ""de facto"" standards due to common use, ... */; 4303 case 418:; 4304 return ""I am a teapot""; /* RFC2324 Section 2.3.2 */; 4305 case 419:; 4306 return ""Authentication Timeout""; /* common use */; 4307 case 420:; 4308 return ""Enhance Your Calm""; /* common use */; 4309 case 440:; 4310 return ""Login Timeout""; /* common use */; 4311 case 509:; 4312 return ""Bandwidth Limit Exceeded""; /* common use */; 4313 ; 4314 default:; 4315 /* This error code is unknown. This should not happen. */; 4316 if (conn) {; 4317 mg_cry_internal(conn,; 4318 ""Unknown HTTP response code: %u"",; 4319 response_code);; 4320 }; 4321 ; 4322 /* Return at least a category according to RFC 2616 Section 10. */; 4323 if (response_code >= 100 && response_code < 200) {; 4324 /* Unknown informational status code */; 4325 return ""Information"";; 4326 }; 4327 if (response_code >= 200 && response_code < 300) {; 4328 /* Unknown success code */; 4329 return ""Success"";; 4330 }; 4331 if (response_code >= 300 && response_code < 400) {; 4332 /* Unknown redirection code */; 4333 return ""Redirection"";; 4334 }; 4335 if (response_code >= 400 && response_code < 500) {; 4336 /* Unknown request error code */; 4337 return ""Client Error"";; 4338 }; 4339 if (response_code >= 500 && response_code < 600) {; 4340 /* Unknown server er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:128706,Log,Login,128706,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['Log'],['Login']
Testability,.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.10,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:83945,Test,Test,83945,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.4 1; : 673 Minimum Test error found - save the configuration ; : 673 | 47.0153 38.3207 0.0201285 0.00181671 43687.7 0; : 674 Minimum Test error found - save the configuration ; : 674 | 46.5986 38.0788 0.0201224 0.00182147 43713.7 0; : 675 Minimum Test error found - save the configuration ; : 675 | 45.6663 37.2199 0.020138 0.00182969 43696.1 0; : 676 Minimum Test error found - save the configuration ; : 676 | 44.8146 36.9047 0.0201419 0.00182761 43681.7 0; : 677 | 44.1854 37.155 0.0200983 0.0017637 43633.4 1; : 678 Minimum Test error found - save the configuration ; : 678 | 43.7163 36.54 0.0202108 0.00183597 43537.9 0; : 679 Minimum Test error found - save the configuration ; : 679 | 43.1003 36.3421 0.0201203 0.00181258 43697.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:87571,Test,Test,87571,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,".42237; var3 = -1.39543; var4 = -2.02943; created tree: TreeB0; ... event: 0 (200); ======> EVENT:0; var1 = -1.54361; var2 = -0.822373; var3 = -0.395426; var4 = -2.02943; created tree: TreeB1; ======> EVENT:0; var1 = 0.463304; var2 = 1.37192; var3 = -1.16769; var4 = -1.77551; created tree: TreeB2; created data file: tmva_example_multiple_background.root; ; ========================; --- Training; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg0] : Added class ""Background""; : Add Tree TreeB0 of type Background with 200 events; <HEADER> Factory : Booking method: BDTG; : ; : the option NegWeightTreatment=InverseBoostNegWeights does not exist for BoostType=Grad; : --> change to new default NegWeightTreatment=Pray; : Rebuilding Dataset datasetBkg0; : Building event vectors for type 2 Signal; : Dataset[datasetBkg0] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[datasetBkg0] : create input formulas for tree TreeB0; <HEADER> DataSetFactory : [datasetBkg0] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 100; : Signal -- testing events : 100; : Signal -- training and testing events: 200; : Background -- training events : 100; : Background -- testing events : 100; : Background -- training and testing events: 200; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.427 +0.620 +0.834; : var2: +0.427 +1.000 +0.756 +0.779; : var3: +0.620 +0.756 +1.000 +0.854; : var4: +0.834 +0.779 +0.854 +1.000; : ----------------------------------------; <HEADER> DataSetInfo : Correlation matrix (Background):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 +0.390 +0.543 +0.801; : var2: +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:2125,test,testing,2125,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,5,['test'],['testing']
Testability,.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80436,Test,Test,80436,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.506) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.665 (0.640) 0.854 (0.822) 0.807 (0.790) ; : bg0 0.538 (0.520) - 0.415 (0.374) 0.843 (0.833) ; : bg1 0.885 (0.886) 0.542 (0.491) - 0.728 (0.646) ; : bg2 0.928 (0.890) 0.956 (0.959) 0.847 (0.895) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.898 (0.878) 0.971 (0.950) 0.982 (0.975) ; : bg0 0.828 (0.810) - 0.696 (0.676) 0.954 (0.951) ; : bg1 0.951 (0.966) 0.803 (0.745) - 0.958 (0.966) ; : bg2 0.998 (0.991) 0.998 (0.996) 0.998 (0.993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) - 0.222 (0.213) 0.419 (0.371) ; : bg1 0.927 (0.909) 0.213 (0.130) - 0.290 (0.332) ; : bg2 0.549 (0.529) 0.546 (0.564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) - 0.705 (0.733) 0.768 (0.764) ; : bg1 0.999 (0.998) 0.752 (0.746) - 0.776 (0.809) ; : bg2 0.789 (0.786) 0.773 (0.794) 0.730 (0.736) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.979 (0.985) 1.000 (0.996) 0.986 (0.986) ; : bg0 0.943 (0.940) - 0.899 (0.901) 0.956 (0.947) ; : bg1 1.000 (0.999) 0.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:29876,test,test,29876,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:93155,Test,Test,93155,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: DNN_CPU; : ; DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.0043655 0.99836 [ -3.2801 5.7307 ]; : m_jjj: 0.0044371 0.99827 [ -3.2805 5.7307 ]; : m_lv: 0.0054053 1.0003 [ -3.2810 5.7307 ]; : m_jlv: 0.0044637 0.99837 [ -3.2803 5.7307 ]; : m_bb: 0.0043676 0.99847 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.017919 1.0069 [ -3.3498 3.4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:53659,test,test,53659,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,['test'],['test']
Testability,".708; [5, 4] train loss: 0.642; [5, 8] train loss: 0.635; [5, 12] train loss: 0.633; [5] val loss: 0.707; [6, 4] train loss: 0.607; [6, 8] train loss: 0.588; [6, 12] train loss: 0.585; [6] val loss: 0.700; [7, 4] train loss: 0.553; [7, 8] train loss: 0.564; [7, 12] train loss: 0.542; [7] val loss: 0.637; [8, 4] train loss: 0.474; [8, 8] train loss: 0.446; [8, 12] train loss: 0.436; [8] val loss: 0.758; [9, 4] train loss: 0.381; [9, 8] train loss: 0.435; [9, 12] train loss: 0.456; [9] val loss: 1.218; [10, 4] train loss: 0.438; [10, 8] train loss: 0.436; [10, 12] train loss: 0.444; [10] val loss: 0.632; Finished Training on 10 Epochs!; running Torch code defining the model....; The PyTorch CNN model is created and saved as PyTorchModelCNN.pt; : Loaded pytorch train function: ; : Loaded pytorch optimizer: ; : Loaded pytorch loss function: ; : Loaded pytorch predict function: ; : Loaded model from file: PyTorchTrainedModelCNN.pt; PyTorch : [dataset] : Evaluation of PyTorch on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.12 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN_CPU; : ; TMVA_DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_CNN_CPU; : ; TMVA_CNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:41396,test,testing,41396,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['test'],['testing']
Testability,".895) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.898 (0.878) 0.971 (0.950) 0.982 (0.975) ; : bg0 0.828 (0.810) - 0.696 (0.676) 0.954 (0.951) ; : bg1 0.951 (0.966) 0.803 (0.745) - 0.958 (0.966) ; : bg2 0.998 (0.991) 0.998 (0.996) 0.998 (0.993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) - 0.222 (0.213) 0.419 (0.371) ; : bg1 0.927 (0.909) 0.213 (0.130) - 0.290 (0.332) ; : bg2 0.549 (0.529) 0.546 (0.564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) - 0.705 (0.733) 0.768 (0.764) ; : bg1 0.999 (0.998) 0.752 (0.746) - 0.776 (0.809) ; : bg2 0.789 (0.786) 0.773 (0.794) 0.730 (0.736) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.979 (0.985) 1.000 (0.996) 0.986 (0.986) ; : bg0 0.943 (0.940) - 0.899 (0.901) 0.956 (0.947) ; : bg1 1.000 (0.999) 0.955 (0.957) - 0.953 (0.959) ; : bg2 0.946 (0.924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:30280,test,test,30280,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,.9 0; : 563 Minimum Test error found - save the configuration ; : 563 | 188.987 113.393 0.0203794 0.00207901 43715 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164.293 100.588 0.0203765 0.00182671 43127.2 0; : 576 Minimum Test error found - save the configuration ; : 576 | 162.136 99.7953 0.0201485 0.00182291 43654.8 0; : 577 Minimum Test error found - save the configuration ; : 577 | 160.429 98.8873 0.0202404 0.00182125 43433.1 0; : 578 Minimum Test error found - save the configuration ; : 578 | 158.663 98.2522 0.020118 0.00181189 43701.3 0; : 579 Minimum Test error found - save the configuration ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:75625,Test,Test,75625,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.9 0; : 679 Minimum Test error found - save the configuration ; : 679 | 43.1003 36.3421 0.0201203 0.00181258 43697.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:88192,Test,Test,88192,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum Test error found - save the configuration ; : 752 | 17.2045 20.1301 0.0200899 0.00181385 43773 0; : 753 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:93269,Test,Test,93269,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0925 30.8793 0.0200419 0.00175584 43749.1 2; : 703 Minimum Test error found - save the configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.64,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:88985,Test,Test,88985,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,".9, 1.0 . Example: Interval(.5,1.,6) ; [ min max ] ; ------------------------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0 ; ; bin 0 1 2 3 4 5 . . Function Members (Methods); public:. virtual~Interval(); static TClass*Class(); Double_tGetElement(Int_t position) const; Double_tGetMax() const; Double_tGetMean() const; Double_tGetMin() const; Int_tGetNbins() const; Double_tGetRndm(TRandom3&) const; Double_tGetStepSize() const; Double_tGetWidth() const; TMVA::IntervalInterval(const TMVA::Interval& other); TMVA::IntervalInterval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::Interval&operator=(const TMVA::Interval&); voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. Double_tfMaxthe constraints of the Interval; Double_tfMin; Int_tfNbinswhen >0 : number of bins (discrete interval); when =0 continuous interval; static TMVA::MsgLogger*fgLoggermessage logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interval(Double_t min, Double_t max, Int_t nbins = 0). Interval(const TMVA::Interval& other). ~Interval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize() const; retuns the step size between the numbers of a ""discrete Interval"". Double_t GetRndm(TRandom3& ) const; get uniformely distributed number within interval. Double_t GetMin() const; accessors. { return fMin; }. Double_t GetMax() const; { return fMax; }. Double_t GetWidth() const; { return fMax - fMin; }. Int_t GetNbins() const; { return fNbins; }. Double_t GetMean() const; { return (fMax + fMin)/2; }. void SetMax(Double_t m); { fMax = m; }. void SetMin(Double_t m); { fMin = m; }. » Author: Peter Speckmayer » Copyright (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Interval.html:2082,log,logger,2082,root/html528/TMVA__Interval.html,https://root.cern,https://root.cern/root/html528/TMVA__Interval.html,1,['log'],['logger']
Testability,".9, 1.0 . Example: Interval(.5,1.,6) ; [ min max ] ; ------------------------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0 ; ; bin 0 1 2 3 4 5 . . Function Members (Methods); public:. virtual~Interval(); static TClass*Class(); Double_tGetElement(Int_t position) const; Double_tGetMax() const; Double_tGetMean() const; Double_tGetMin() const; Int_tGetNbins() const; Double_tGetRndm(TRandom3&) const; Double_tGetStepSize() const; Double_tGetWidth() const; TMVA::IntervalInterval(const TMVA::Interval& other); TMVA::IntervalInterval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::Interval&operator=(const TMVA::Interval&); voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. Double_tfMaxthe constraints of the Interval; Double_tfMin; Int_tfNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval; static TMVA::MsgLogger*fgLoggermessage logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Interval(Double_t min, Double_t max, Int_t nbins = 0). Interval(const TMVA::Interval& other). ~Interval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize() const; retuns the step size between the numbers of a ""discrete Interval"". Double_t GetRndm(TRandom3& ) const; get uniformely distributed number within interval. Double_t GetMin() const; accessors. { return fMin; }. Double_t GetMax() const; { return fMax; }. Double_t GetWidth() const; { return fMax - fMin; }. Int_t GetNbins() const; { return fNbins; }. Double_t GetMean() const; { return (fMax + fMin)/2; }. void SetMax(Double_t m); { fMax = m; }. void SetMin(Double_t m); { fMin = m; }. » Author: Peter Speckmayer » Copyright (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Interval.html:2083,log,logger,2083,root/html530/TMVA__Interval.html,https://root.cern,https://root.cern/root/html530/TMVA__Interval.html,2,['log'],['logger']
Testability,".924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ==> Wrote root file: TMVAMulticlass.root; ==> TMVAMulticlass is done!; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/TMVAMultiClassGui.h""; ; ; using namespace TMVA;; ; void TMVAMulticlass( TString myMethodList = """" ); {; ; // This loads the library; TMVA::Tools::Instance();; ; // to get access to the GUI and all tmva macros; //; // TString tmva_dir(TString(gRootDir) + ""/tmva"");; // if(gSystem->Getenv(""TMVASYS"")); // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; ; ; //---------------------------------------------------------------; // Default MVA methods to be trained + tested; std::map<std::string,int> Use;; Use[""MLP""] = 1;; Use[""BDTG""] = 1;; #ifdef R__HAS_TMVAGPU; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 1;; #else; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 0;; #endif; Use[""FDA_GA""] = 0;; Use[""PDEFoam""] = 1;; ; //---------------------------------------------------------------; ; std::cout << std::endl;; std::cout << ""==> Start TMVAMulticlass"" << std::endl;; ; if (myMethodList != """") {; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; ; std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; for (UInt_t i=0; i<mlist.size(); i++) {; std::string re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:32066,test,test,32066,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['test'],['test']
Testability,".993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) - 0.222 (0.213) 0.419 (0.371) ; : bg1 0.927 (0.909) 0.213 (0.130) - 0.290 (0.332) ; : bg2 0.549 (0.529) 0.546 (0.564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) - 0.705 (0.733) 0.768 (0.764) ; : bg1 0.999 (0.998) 0.752 (0.746) - 0.776 (0.809) ; : bg2 0.789 (0.786) 0.773 (0.794) 0.730 (0.736) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.979 (0.985) 1.000 (0.996) 0.986 (0.986) ; : bg0 0.943 (0.940) - 0.899 (0.901) 0.956 (0.947) ; : bg1 1.000 (0.999) 0.955 (0.957) - 0.953 (0.959) ; : bg2 0.946 (0.924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ==> Wrote root file: TMVAMulticlass.root; ==> TMVAMulticlass is done!; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:30684,test,test,30684,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,".; 1637 ; 1638UserGroup_t *TSystem::GetGroupInfo(const char * /*group*/); 1639{; 1640 AbstractMethod(""GetGroupInfo"");; 1641 return nullptr;; 1642}; 1643 ; 1644//---- environment manipulation ------------------------------------------------; 1645 ; 1646////////////////////////////////////////////////////////////////////////////////; 1647/// Set environment variable.; 1648 ; 1649void TSystem::Setenv(const char *, const char *); 1650{; 1651 AbstractMethod(""Setenv"");; 1652}; 1653 ; 1654////////////////////////////////////////////////////////////////////////////////; 1655/// Unset environment variable.; 1656 ; 1657void TSystem::Unsetenv(const char *name); 1658{; 1659 Setenv(name, """");; 1660}; 1661 ; 1662////////////////////////////////////////////////////////////////////////////////; 1663/// Get environment variable.; 1664 ; 1665const char *TSystem::Getenv(const char *); 1666{; 1667 AbstractMethod(""Getenv"");; 1668 return nullptr;; 1669}; 1670 ; 1671//---- System Logging ----------------------------------------------------------; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// Open connection to system log daemon. For the use of the options and; 1675/// facility see the Unix openlog man page.; 1676 ; 1677void TSystem::Openlog(const char *, Int_t, ELogFacility); 1678{; 1679 AbstractMethod(""Openlog"");; 1680}; 1681 ; 1682////////////////////////////////////////////////////////////////////////////////; 1683/// Send mess to syslog daemon. Level is the logging level and mess the; 1684/// message that will be written on the log.; 1685 ; 1686void TSystem::Syslog(ELogLevel, const char *); 1687{; 1688 AbstractMethod(""Syslog"");; 1689}; 1690 ; 1691////////////////////////////////////////////////////////////////////////////////; 1692/// Close connection to system log daemon.; 1693 ; 1694void TSystem::Closelog(); 1695{; 1696 AbstractMethod(""Closelog"");; 1697}; 1698 ; 1699//---- Standard output redirection -----------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:53275,Log,Logging,53275,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,2,"['Log', 'log']","['Logging', 'log']"
Testability,".; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less."". Note also that for GoF test of unbinned data ROOT provides also the class; ROOT::Math::GoFTest. The class has also method for doing one sample tests; (i.e. comparing the data with a given distribution). void SetContent(const Double_t* content); Replace bin contents by the contents of array content. Int_t GetContour(Double_t* levels = 0); Return contour values into array levels if pointer levels is non zero. The function returns the number of contour levels.; see GetContourLevel to return one contour only. Double_t GetContourLevel(Int_t level) const; Return value of contour number level; use GetContour to return the array of all contour levels. Double_t GetContourLevelPad(Int_t level) const; Return the value of contour number ""level"" in Pad coordinates ie: if the Pad; is in log scale along Z it returns le log of the contour level value.; see GetContour to return the array of all contour levels. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the maximum number of entries to be kept in the buffer. void SetContour(Int_t nlevels, const Double_t* levels = 0); Set the number and values of contour levels. By default the number of contour levels is set to 20. The contours values; in the array ""levels"" should be specified in increasing order. if argument levels = 0 or missing, equidistant contours are computed. void SetContourLevel(Int_t level, Double_t value); Set value for one contour level. Double_t GetMaximum(Double_t maxval = 3.40282347E+38F) const; Return maximum value smaller than maxval of bins in the range,; unless the value has been overridden by TH1::SetMaximum,; in which case it returns that value. (This happens, for example,; when the histogram is drawn and the y or z axis limits are changed. To get the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:122040,log,log,122040,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,4,['log'],['log']
Testability,".; 4566 b.ApplySequence(*fReadActionSequence, fObject);; 4567}; 4568 ; 4569////////////////////////////////////////////////////////////////////////////////; 4570/// Read leaves into i/o buffers for this branch.; 4571/// For split-class branch, base class branch, data member branch, or top-level branch.; 4572/// which do have a branch count and are not a counter.; 4573 ; 4574void TBranchElement::ReadLeavesMemberBranchCount(TBuffer& b); 4575{; 4576 R__ASSERT(fStreamerType != TVirtualStreamerInfo::kCounter);; 4577 ; 4578 ValidateAddress();; 4579 if (fObject == nullptr); 4580 {; 4581 // We have nowhere to copy the data (probably because the data member was; 4582 // 'dropped' from the current schema) so let's no copy it in a random place.; 4583 return;; 4584 }; 4585 ; 4586 // If not a TClonesArray or STL container master branch; 4587 // or sub-branch and branch inherits from tobject,; 4588 // then register with the buffer so that pointers are; 4589 // handled properly.; 4590 if (TestBit(kBranchObject)) {; 4591 b.MapObject((TObject*) fObject);; 4592 } else if (TestBit(kBranchAny)) {; 4593 b.MapObject(fObject, fBranchClass);; 4594 }; 4595 ; 4596 fNdata = (Int_t) fBranchCount->GetValue(0, 0);; 4597 TStreamerInfo *info = GetInfoImp();; 4598 if (!info) {; 4599 return;; 4600 }; 4601 R__PushCache onfileObject(((TBufferFile&)b),fOnfileObject,1); // Here we have a single object that contains a variable size C-style array.; 4602 // Since info is not null, fReadActionSequence is not null either.; 4603 b.ApplySequence(*fReadActionSequence, fObject);; 4604}; 4605 ; 4606////////////////////////////////////////////////////////////////////////////////; 4607/// Read leaves into i/o buffers for this branch.; 4608/// For split-class branch, base class branch, data member branch, or top-level branch.; 4609/// which do not have a branch count and are a counter.; 4610 ; 4611void TBranchElement::ReadLeavesMemberCounter(TBuffer& b); 4612{; 4613 ValidateAddress();; 4614 if (fObject == nullptr); 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:170001,Test,TestBit,170001,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,".; 464 * Relative error; 465 * arithmetic domain # trials peak rms; 466 * IEEE 0,5 10000 6.9e-15 4.5e-16; 467 * IEEE 0,85 250000 2.2e-13 1.7e-14; 468 * IEEE 0,1000 30000 5.3e-12 6.3e-13; 469 * IEEE 0,10000 250000 9.3e-11 7.1e-12; 470 * IEEE 0,100000 10000 8.7e-10 4.8e-11; 471 * Outputs smaller than the IEEE gradual underflow threshold; 472 * were excluded from these statistics.; 473 *; 474 * ERROR MESSAGES:; 475 * message condition value returned; 476 * incbet domain x<0, x>1 0.0; 477 * incbet underflow 0.0; 478 *; 479 * Cephes Math Library, Release 2.8: June, 2000; 480 * Copyright 1984, 1995, 2000 by Stephen L. Moshier; 481 */; 482 ; 483 ; 484double incbet( double aa, double bb, double xx ); 485{; 486 double a, b, t, x, xc, w, y;; 487 int flag;; 488 ; 489 if( aa <= 0.0 || bb <= 0.0 ); 490 return( 0.0 );; 491 ; 492 // LM: changed: for X > 1 return 1.; 493 if (xx <= 0.0) return( 0.0 );; 494 if ( xx >= 1.0) return( 1.0 );; 495 ; 496 flag = 0;; 497 ; 498/* - to test if that way is better for large b/ (comment out from Cephes version); 499 if( (bb * xx) <= 1.0 && xx <= 0.95); 500 {; 501 t = pseries(aa, bb, xx);; 502 goto done;; 503 }; 504 ; 505**/; 506 w = 1.0 - xx;; 507 ; 508/* Reverse a and b if x is greater than the mean. */; 509/* aa,bb > 1 -> sharp rise at x=aa/(aa+bb) */; 510 if( xx > (aa/(aa+bb)) ); 511 {; 512 flag = 1;; 513 a = bb;; 514 b = aa;; 515 xc = xx;; 516 x = w;; 517 }; 518 else; 519 {; 520 a = aa;; 521 b = bb;; 522 xc = w;; 523 x = xx;; 524 }; 525 ; 526 if( flag == 1 && (b * x) <= 1.0 && x <= 0.95); 527 {; 528 t = pseries(a, b, x);; 529 goto done;; 530 }; 531 ; 532/* Choose expansion for better convergence. */; 533 y = x * (a+b-2.0) - (a-1.0);; 534 if( y < 0.0 ); 535 w = incbcf( a, b, x );; 536 else; 537 w = incbd( a, b, x ) / xc;; 538 ; 539/* Multiply w by the factor; 540 a b _ _ _; 541 x (1-x) | (a+b) / ( a | (a) | (b) ) . */; 542 ; 543 y = a * std::log(x);; 544 t = b * std::log(xc);; 545 if( (a+b) < kMAXSTIR && std::abs(y) < kMAXLOG && std::abs(t) < ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:11338,test,test,11338,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['test'],['test']
Testability,".; 5 : Landscape mode with a large margin at the bottom of the page.; The large margin is useful for some PostScript printers (very often; for the colour printers) as they need more space to grip the paper; for mechanical reasons. Note that some PostScript colour printers; can also use the so called special A4 format permitting the full; usage of the A4 area; in this case larger margins are not necessary; and Type=1 or 2 can be used.; 3 : Encapsulated PostScript. This Type permits the generation of files; which can be included in other documents, for example in LaTeX; files.; . Making several pictures in the same Postscript file: case 1; The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when TCanvas::Clear is called by; object->Draw().; ; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);; // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;; // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page; // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; ; Making several pictures in the same Postscript file: case 2; This example shows 2 pages. The canvas is divided.; TPostScript::NewPage must be called before starting a new; picture.object->Draw does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that c1->Update must be called at the end of the first; picture.; ; {; TFile *f1 = new TFile(""hsimple.root"");; TCanvas *c1 = new TCanvas(""c1"");; TPostScript *ps = new TPostScript(""file.ps"",112);; c1->Divide(2,1);; // picture 1; ps->NewPage();; c1->cd(1);; hpx->Draw();; c1->cd(2);; hprof->Draw();; c1->Update();; // picture 2;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:4053,test,test,4053,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,3,['test'],['test']
Testability,.; Definition at line 198 of file MethodPyGTB.cxx. ◆ ReadModelFromFile(). void MethodPyGTB::ReadModelFromFile ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 514 of file MethodPyGTB.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodPyGTB::ReadWeightsFromStream ; (; std::istream & ; ). inlinevirtual . Implements TMVA::PyMethodBase.; Definition at line 65 of file MethodPyGTB.h. ◆ ReadWeightsFromStream() [2/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::PyMethodBase. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::PyMethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). virtual void TMVA::MethodPyGTB::ReadWeightsFromXML ; (; void * ; ). inlinevirtual . Implements TMVA::PyMethodBase.; Definition at line 64 of file MethodPyGTB.h. ◆ TestClassification(). void MethodPyGTB::TestClassification ; (; ). virtual . initialization ; Reimplemented from TMVA::MethodBase.; Definition at line 388 of file MethodPyGTB.cxx. ◆ Train(). void MethodPyGTB::Train ; (; void ; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 330 of file MethodPyGTB.cxx. Friends And Related Symbol Documentation. ◆ Factory. friend class Factory. friend . Definition at line 69 of file MethodPyGTB.h. ◆ Reader. friend class Reader. friend . Definition at line 70 of file MethodPyGTB.h. Member Data Documentation. ◆ classValues. std::vector<Float_t> TMVA::MethodPyGTB::classValues. protected . Definition at line 74 of file MethodPyGTB.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodPyGTB::fDataSetManager. private . Definition at line 68 of file MethodPyGTB.h. ◆ fFilenameClassifier. TString TMVA::MethodPyGTB::fFilenameClassifier. protected . Definition at line 78 of file MethodPyGTB.h. ◆ fInit. TString TMVA::MethodPyGTB::fInit. protected . Definition at line 127 of file MethodPyGTB.h. ◆ f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:33849,Test,TestClassification,33849,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,1,['Test'],['TestClassification']
Testability,".; Definition at line 370 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 2956 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 445 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 447 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:119926,Log,Log,119926,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['Log'],['Log']
Testability,".; Definition at line 377 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:121256,Log,Log,121256,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['Log'],['Log']
Testability,".; Definition at line 531 of file MethodPyRandomForest.cxx. ◆ DeclareOptions(). void MethodPyRandomForest::DeclareOptions ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 120 of file MethodPyRandomForest.cxx. ◆ GetHelpMessage(). void MethodPyRandomForest::GetHelpMessage ; (; ); const. protectedvirtual . Implements TMVA::IMethod.; Definition at line 551 of file MethodPyRandomForest.cxx. ◆ GetMulticlassValues(). std::vector< Float_t > & MethodPyRandomForest::GetMulticlassValues ; (; ). virtual . Reimplemented from TMVA::MethodBase.; Definition at line 475 of file MethodPyRandomForest.cxx. ◆ GetMvaValue(). Double_t MethodPyRandomForest::GetMvaValue ; (; Double_t * ; errLower = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 443 of file MethodPyRandomForest.cxx. ◆ GetMvaValues(). std::vector< Double_t > MethodPyRandomForest::GetMvaValues ; (; Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). virtual . get all the MVA values for the events of the current Data type ; Implements TMVA::PyMethodBase.; Definition at line 385 of file MethodPyRandomForest.cxx. ◆ HasAnalysisType(). Bool_t MethodPyRandomForest::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . Implements TMVA::PyMethodBase.; Definition at line 112 of file MethodPyRandomForest.cxx. ◆ Init(). void MethodPyRandomForest::Init ; (; void ; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 304 of file MethodPyRandomForest.cxx. ◆ ProcessOptions(). void MethodPyRandomForest::ProcessOptions ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 197 of file MethodPyRandomForest.cxx. ◆ ReadModelFromFile(). void MethodPyRandomForest::ReadModelFromFile ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 504 of file MethodPyRandomForest.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodPyRa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html:32539,log,logProgress,32539,doc/master/classTMVA_1_1MethodPyRandomForest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html,1,['log'],['logProgress']
Testability,".; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::RuleFitAPI Class ReferenceTMVA. ; J Friedman's RuleFit method. ; Definition at line 51 of file RuleFitAPI.h. Classes; struct  IntParms;  ; struct  RealParms;  . Public Member Functions;  RuleFitAPI (const TMVA::MethodRuleFit *rfbase, TMVA::RuleFit *rulefit, EMsgType minType);  ; virtual ~RuleFitAPI ();  destructor ;  ; void CheckRFWorkDir ();  check if the rulefit work dir is properly setup. ;  ; const TString GetRFWorkDir () const;  ; void HowtoSetupRF ();  howto message ;  ; virtual TClass * IsA () const;  ; Bool_t ReadModelSum ();  read model from rulefit.sum ;  ; void SetRFWorkDir (const char *wdir);  set the directory containing rf_go.exe. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TestRuleFit ();  ; void TrainRuleFit ();  ; void VarImp ();  ; void WelcomeMessage ();  welcome message ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Types; enum  EModel { kRfLinear =0; , kRfRules =1; , kRfBoth =2; };  ; enum  ERFMode { kRfRegress =1; , kRfClass =2; };  ; enum  ERFProgram { kRfTrain =0; , kRfPredict; , kRfVarimp; };  . Protected Member Functions; void FillIntParmsDef ();  set default int params ;  ; void FillRealParmsDef ();  set default real params ;  ; TString GetRFName (TString name);  ; void ImportSetup ();  import setup from MethodRuleFit ;  ; void InitRuleFit ();  default initialisation SetRFWorkDir(""./rulefit""); ;  ; Bool_t OpenRFile (TString name, std::ifstream &f);  ; Bool_t OpenRFile (TString name, std::ofstream &f);  ; Int_t ReadFloat (std::ifstream &f, Float_t *v, Int_t n=1) const;  ; Int_t ReadInt (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html:1111,Test,TestRuleFit,1111,doc/master/classTMVA_1_1RuleFitAPI.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html,1,['Test'],['TestRuleFit']
Testability,".; No Matches. TCollection Member List. This is the complete list of members for TCollection, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TObject *obj)=0TCollectionpure virtual; AddAll(const TCollection *col)TCollectionvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddVector(TObject *obj1,...)TCollection; AppendPad(Option_t *option="""")TObjectvirtual; AssertClass(TClass *cl) constTCollection; begin() constTCollectioninline; Browse(TBrowser *b) overrideTCollectionvirtual; Capacity() constTCollectioninline; CheckedHash()TObjectinline; Class()TCollectionstatic; Class_Name()TCollectionstatic; Class_Version()TCollectioninlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") override=0TCollectionpure virtual; Clone(const char *newname="""") const overrideTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TCollectioninlinestatic; Delete(Option_t *option="""") override=0TCollectionpure virtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollection-members.html:494,Assert,AssertClass,494,doc/master/classTCollection-members.html,https://root.cern,https://root.cern/doc/master/classTCollection-members.html,1,['Assert'],['AssertClass']
Testability,".; Reimplemented in TGDoubleVSlider, TGTripleVSlider, and TGTripleHSlider. ◆ StreamerNVirtual(). void TGDoubleSlider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 166 of file TGDoubleSlider.h. Member Data Documentation. ◆ fMarkEnds. Bool_t TGDoubleSlider::fMarkEnds. protected . lines marking where stretch zones begin ; Definition at line 59 of file TGDoubleSlider.h. ◆ fMove. Int_t TGDoubleSlider::fMove. protected . 1: move min value 2: move max value 3: move min and max value 0: don't move any value ; Definition at line 54 of file TGDoubleSlider.h. ◆ fPos. Double_t TGDoubleSlider::fPos. protected . logical position between fVmin and fVmax ; Definition at line 43 of file TGDoubleSlider.h. ◆ fPressPoint. Int_t TGDoubleSlider::fPressPoint. protected . mouse position at button press event ; Definition at line 51 of file TGDoubleSlider.h. ◆ fPressSmax. Double_t TGDoubleSlider::fPressSmax. protected . logical max position at button press event ; Definition at line 53 of file TGDoubleSlider.h. ◆ fPressSmin. Double_t TGDoubleSlider::fPressSmin. protected . logical min position at button press event ; Definition at line 52 of file TGDoubleSlider.h. ◆ fRelPos. Int_t TGDoubleSlider::fRelPos. protected . slider position in pixel coordinates ; Definition at line 46 of file TGDoubleSlider.h. ◆ fReversedScale. Bool_t TGDoubleSlider::fReversedScale. protected . reverse which end is min and max ; Definition at line 58 of file TGDoubleSlider.h. ◆ fScale. Int_t TGDoubleSlider::fScale. protected . tick mark scale ; Definition at line 49 of file TGDoubleSlider.h. ◆ fScaleType. Int_t TGDoubleSlider::fScaleType. protected . tick mark scale type (no, downright, both) ; Definition at line 50 of file TGDoubleSlider.h. ◆ fSliderPic. const TGPicture* TGDoubleSlider::fSliderPic. protected . picture to draw slider ends ; Definition at line 60 of file TGDoubleSlider.h. ◆ fSmax. Double_t TGDoubleSlider::fSmax. protected . logical position of max value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:39617,log,logical,39617,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['log'],['logical']
Testability,".; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [priv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:10722,test,test,10722,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,1,['test'],['test']
Testability,".; fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char* fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char* path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTabCom.html:10750,test,test,10750,root/html530/TTabCom.html,https://root.cern,https://root.cern/root/html530/TTabCom.html,3,['test'],['test']
Testability,".;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;  ; class  TAttBBox2D;  Abstract base class for elements drawn in the editor. More...;  ; class  TAttFill;  Fill Area Attributes class. More...;  ; class  TAttLine;  Line Attributes class. More...;  ; class  TAttMarker;  Marker Attributes class. More...;  ; class  TAttPad;  Manages default Pad attributes. More...;  ; class  TAttText;  Text Attributes class. More...;  ; class  TBase64;  This code implements the Base64 encoding and decoding. More...;  ; class  TBenchmark;  This class is a ROOT utility to help benchmarking applications. More...;  ; class  TBrowser;  Using a TBrowser one can browse all ROOT objects. More...;  ; class  TBrowserImp;  ABC describing GUI independent browser implementation protocol. More...;  ; class  TBuffer;  Buffer base class used for serializing objects. More...;  ; class  TBuffer3D;  Generic 3D primitive description class. More...;  ; class  TCanvasImp;  ABC describing GUI independent main window (with menubar, scrollbars and a drawing area). More...;  ; class  TColor;  The color creation and management class. More...;  ; class  TColorGradient;  TColorGradient extends basic TColor. More...;  ; class  TVirtualPad::TContext;  small helper class to store/restore gPad context in TPad methods More...;  ; class  TDirectory::TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  ; class  TContextMenu;  This class provides an interface to context sensitive popup menus. More...;  ; class  TContextMenuImp;  This class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Base.html:2514,benchmark,benchmarking,2514,doc/master/group__Base.html,https://root.cern,https://root.cern/doc/master/group__Base.html,1,['benchmark'],['benchmarking']
Testability,".;  ; class  TGLOvlSelectRecord;  Selection record for overlay objects. More...;  ; class  TGLPadPainter;  ""Delegating"" part of TGLPadPainter. More...;  ; class  TGLParametricEquation;  A parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): More...;  ; class  TGLParametricEquationGL;  GL-renderer wrapper for TGLParametricEquation. More...;  ; class  TGLParametricPlot;  ; class  TGLPerspectiveCamera;  Perspective projection camera - with characteristic foreshortening. More...;  ; class  TGLPhysicalShape;  Concrete physical shape - a GL drawable. More...;  ; class  TGLPlane;  3D plane class - of format Ax + By + Cz + D = 0 More...;  ; class  TGLPlot3D;  Description of TGLPlot3D. More...;  ; class  TGLPlotBox;  Implementation of a box around a histogram/function for plot-painters. More...;  ; class  TGLPlotCamera;  Camera for TGLPlotPainter and sub-classes. More...;  ; class  TGLPlotCoordinates;  Helper class for plot-painters holding information about axis ranges, numbers of bins and flags if certain axis is logarithmic. More...;  ; class  TGLPlotPainter;  Base class for plot-painters that provide GL rendering of various 2D and 3D histograms, functions and parametric surfaces. More...;  ; class  TGLPolyLine;  To draw a 3D polyline in a GL window. More...;  ; class  TGLPolyMarker;  To draw a 3D polymarker in a GL window. More...;  ; class  TGLPShapeObj;  Wrap TGLPysicalShape into TObject so that it can be edited using GED. More...;  ; class  TGLPShapeObjEditor;  GUI editor for TGLPShapeObj. More...;  ; class  TGLPShapeRef;  Base class for references to TGLPysicalShape that need to be notified when the shape is destroyed. More...;  ; class  TGLQuadric;  Wrapper class for GLU quadric shape drawing object. More...;  ; class  TGLRect;  Viewport (pixel base) 2D rectangle class. More...;  ; class  TGLRnrCtx;  The TGLRnrCtx class aggregates data for a given redering context as needed by various parts of the ROOT's OpenGL infrastru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:6693,log,logarithmic,6693,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['log'],['logarithmic']
Testability,".AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TControlBar(const char* orientation, const char* title, Int_t x, Int_t y); virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Action(); voidAddButton(TControlBarButton* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:2211,benchmark,benchmarks,2211,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,5,['benchmark'],['benchmarks']
Testability,".AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Action(); voidAddButton(TControlBarButton* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar); voidAddSeparator(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TControlBar.html:2219,benchmark,benchmarks,2219,root/html602/TControlBar.html,https://root.cern,https://root.cern/root/html602/TControlBar.html,2,['benchmark'],['benchmarks']
Testability,.C 'High Level Factory Example' RooStats tutorial macro #602 ;  rs701_BayesianCalculator.C 'Bayesian Calculator' RooStats tutorial macro #701 ;  rs801_HypoTestInverterOriginal.C 'Hypothesis Test Inversion' RooStats tutorial macro #801 ;  rs_bernsteinCorrection.C 'Bernstein Correction' RooStats tutorial macro ;  rs_numberCountingCombination.C 'Number Counting Example' RooStats tutorial macro #100 ;  rs_numbercountingutils.C 'Number Counting Utils' RooStats tutorial ;  StandardBayesianMCMCDemo.C Standard demo of the Bayesian MCMC calculator ;  StandardBayesianNumericalDemo.C Standard demo of the numerical Bayesian calculator ;  StandardFeldmanCousinsDemo.C Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  StandardFrequentistDiscovery.C StandardFrequentistDiscovery ;  StandardHistFactoryPlotsWithCategories.C StandardHistFactoryPlotsWithCategories ;  StandardHypoTestDemo.C Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypotheiss tests calculators and test statistics ;  StandardHypoTestInvDemo.C Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  StandardProfileInspectorDemo.C Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  StandardProfileLikelihoodDemo.C Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  StandardTestStatDistributionDemo.C StandardTestStatDistributionDemo.C ;  TestNonCentral.C ;  TwoSidedFrequentistUpperLimitWithBands.C TwoSidedFrequentistUpperLimitWithBands ;  Zbi_Zgamma.C Demonstrate Z_Bi = Z_Gamma ;  ► spectrum;  Background_compton.C Example to illustrate the background estimator (class TSpectrum) including Compton edges ;  Background_decr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_incr.C Example to illustrate the background estimator (class TSpectrum) ;  Background_order.C Example to illustrate the influence of the clipping,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:149846,test,test,149846,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,15,['test'],"['test', 'tests']"
Testability,.C ;  peaks.C Illustrates how to find peaks in histograms ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  SearchHR1.C Example to illustrate high resolution peak searching function (class TSpectrum) ;  SearchHR3.C Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlcreatedb.py Create a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlfilldb.py Fill run catalog with nfiles entries ;  sqlselect.CQuery example to MySQL test database ;  sqlselect.py Query example to MySQL test database ;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:157706,test,test,157706,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['test'],['test']
Testability,".C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  loopdir11.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  Legendre.py Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:129261,test,test,129261,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['test'],['test']
Testability,".C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.10/09 - Reference Guide Generated on Thu May 31 2018 12:15:45 using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:162242,benchmark,benchmarks,162242,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['benchmark'],['benchmarks']
Testability,.C;  TMVAClassification_Likelihood.class.C;  TMVAClassification_LikelihoodPCA.class.C;  TMVAClassification_MLPBNN.class.C;  TMVAClassification_PDEFoam.class.C;  TMVAClassification_PDERS.class.C;  TMVAClassification_RuleFit.class.C;  TMVAClassification_SVM.class.C;  TMVAClassificationCategory_Fisher.class.C;  TMVAClassificationCategory_Likelihood.class.C;  TMVACrossValidation_BDTG.class.C;  TMVACrossValidation_BDTG_fold1.class.C;  TMVACrossValidation_BDTG_fold2.class.C;  TMVACrossValidation_Fisher.class.C;  TMVACrossValidation_Fisher_fold1.class.C;  TMVACrossValidation_Fisher_fold2.class.C;  TMVAMulticlass_BDTG.class.C;  TMVAMulticlass_MLP.class.C;  ► datasetBkg0;  ► weights;  TMVAMultiBkg0_BDTG.class.C;  ► datasetBkg1;  ► weights;  TMVAMultiBkg1_BDTG.class.C;  ► datasetBkg2;  ► weights;  TMVAMultiBkg2_BDTG.class.C;  MDF.C;  MyPdfV1.cxx;  MyPdfV1.h;  MyPdfV2.cxx;  MyPdfV2.h;  MyPdfV3.cxx;  MyPdfV3.h;  pca.C;  RooCFAuto000Pdf.cxx;  RooCFAuto000Pdf.h;  RooGenPdfPdf.cxx;  RooGenPdfPdf.h;  test.py;  ► geom;  ► gdml;  doc;  ► inc;  TGDMLParse.h;  TGDMLWrite.h;  ► src;  TGDMLParse.cxx;  TGDMLWrite.cxx;  ROOTwriter.py;  writer.py;  ► geocad;  doc;  ► inc;  TGeoToStep.h;  ► src;  TGeoToOCC.cxx;  TGeoToOCC.h;  TGeoToStep.cxx;  TOCCToStep.cxx;  TOCCToStep.h;  ► geom;  doc;  ► inc;  LinkDef1.h;  LinkDef2.h;  TGeoArb8.h;  TGeoAtt.h;  TGeoBBox.h;  TGeoBoolNode.h;  TGeoBranchArray.h;  TGeoBuilder.h;  TGeoCache.h;  TGeoCompositeShape.h;  TGeoCone.h;  TGeoElement.h;  TGeoEltu.h;  TGeoExtension.h;  TGeoGlobalMagField.h;  TGeoHalfSpace.h;  TGeoHelix.h;  TGeoHype.h;  TGeoManager.h;  TGeoMaterial.h;  TGeoMatrix.h;  TGeoMedium.h;  TGeoNavigator.h;  TGeoNode.h;  TGeoPara.h;  TGeoParaboloid.h;  TGeoParallelWorld.h;  TGeoPatternFinder.h;  TGeoPcon.h;  TGeoPgon.h;  TGeoPhysicalConstants.h;  TGeoPhysicalNode.h;  TGeoPolygon.h;  TGeoRCPtr.h;  TGeoRegion.h;  TGeoScaledShape.h;  TGeoShape.h;  TGeoShapeAssembly.h;  TGeoSphere.h;  TGeoStateInfo.h;  TGeoSystemOfUnits.h;  TGeoTorus.h;  TGeoTrd1.h;  T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:11683,test,test,11683,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['test'],['test']
Testability,".Definition THLimitsFinder.cxx:153; THLimitsFinder::FindGoodLimitsvirtual Int_t FindGoodLimits(TH1 *h, Double_t xmin, Double_t xmax)Compute the best axis limits for the X axis.Definition THLimitsFinder.cxx:53; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; TIterDefinition TCollection.h:235; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::AbstractMethodvoid AbstractMethod(const char *method) constUse this method to implement an ""abstract"" method that you don't want to leave purely abstract.Definition TObject.cxx:1035; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::Infovirtual void Info(const char *method, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:213288,Test,TestBit,213288,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,".Definition TMethodCall.h:37; TMethodCall::GetCallFuncCallFunc_t * GetCallFunc() constDefinition TMethodCall.h:93; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::Copyvoid Copy(TObject &named) const overrideCopy this to obj.Definition TNamed.cxx:94; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::fTitleTString fTitleDefinition TNamed.h:33; TNamed::fNameTString fNameDefinition TNamed.h:32; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TRegexpRegular expression class.Definition TRegexp.h:31; TRegexp::IndexSsiz_t Index(const TString &str, Ssiz_t *len, Ssiz_t start=0) constFind the first occurrence of the regexp in string and return the position, or -1 if there is no match...Definition TRegexp.cxx:213; TStringBasic string c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:167146,Test,TestBit,167146,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['Test'],['TestBit']
Testability,".Definition TPadPainter.h:26; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::GetBorderModeShort_t GetBorderMode() const overrideDefinition TPad.h:199; TPad::SetBorderSizevoid SetBorderSize(Short_t bordersize) overrideDefinition TPad.h:326; TPad::GetTickyInt_t GetTicky() const overrideDefinition TPad.h:239; TPad::PaintBordervoid PaintBorder(Color_t color, Bool_t tops)Paint the pad border.Definition TPad.cxx:3644; TPad::ResizePadvoid ResizePad(Option_t *option="""") overrideCompute pad conversion coefficients.Definition TPad.cxx:5624; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TPad::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitives in this pad on the C++ source file out.Definition TPad.cxx:5847; TPad::GetGridxBool_t GetGridx() const overrideDefinition TPad.h:235; TPad::fX2Double_t fX2X of upper X coordinate.Definition TPad.h:38; TPad::SetLogzvoid SetLogz(Int_t value=1) overrideSet Lin/Log scale for Z.Definition TPad.cxx:6111; TPad::GetY2Double_t GetY2() const overrideDefinition TPad.h:243; TPad::Closevoid Close(Option_t *option="""") overrideDelete all primitives in pad and pad itself.Definition TPad.cxx:1070; TPad::PaintModifiedvoid PaintModified() overrideTraverse pad hierarchy and (re)paint only modified pads.Definition TPad.cxx:3812; TPad::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TPad.h:261; TPad::fX1Double_t fX1X of lower X coordinate.Definition TPad.h:36; TPad::GetListOfPrimitivesTList * GetListOfPrimitives() const overrideDefinition TPad.h:245; TPad::SetPadvoid SetPad(const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=35, Short_t bordersize=5, Short_t bordermode=-1) overrideSet all pad parameters.Definition TPad.cxx:6171; TPad::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in pad.Definition TPad.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:123483,Log,Log,123483,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Log'],['Log']
Testability,".GetName())<< ""determined event sample size to select test sample from=""<<useForTesting<<Endl;; 1255 ; 1256 ; 1257 ; 1258 // associate undefined events; 1259 if( splitMode == ""ALTERNATE"" ){; 1260 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""split 'ALTERNATE'"" << Endl;; 1261 Int_t nTraining = availableTraining;; 1262 for( EventVector::iterator it = eventVectorUndefined.begin(), itEnd = eventVectorUndefined.end(); it != itEnd; ){; 1263 ++nTraining;; 1264 if( nTraining <= requestedTraining ){; 1265 eventVectorTraining.insert( eventVectorTraining.end(), (*it) );; 1266 ++it;; 1267 }; 1268 if( it != itEnd ){; 1269 eventVectorTesting.insert( eventVectorTesting.end(), (*it) );; 1270 ++it;; 1271 }; 1272 }; 1273 } else {; 1274 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""split '"" << splitMode << ""'"" << Endl;; 1275 ; 1276 // test if enough events are available; 1277 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""availableundefined : "" << availableUndefined << Endl;; 1278 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""useForTraining : "" << useForTraining << Endl;; 1279 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""useForTesting : "" << useForTesting << Endl;; 1280 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""availableTraining : "" << availableTraining << Endl;; 1281 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""availableTesting : "" << availableTesting << Endl;; 1282 ; 1283 if( availableUndefined<(useForTraining-availableTraining) ||; 1284 availableUndefined<(useForTesting -availableTesting ) ||; 1285 availableUndefined<(useForTraining+useForTesting-availableTraining-availableTesting ) ){; 1286 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName())<< ""More events requested than available!"" << Endl;; 1287 }; 1288 ; 1289 // select the events; 1290 if (useForTraining>availableTraining){; 1291 eventVectorTraining.insert( eventVectorTraining.end() , eventVectorUndefined.begin(), eventVectorUndef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:55810,Log,Log,55810,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,".Length()); }. TString & Replace(Ssiz_t pos, Ssiz_t n1, const TString& s, Ssiz_t n2); { return Replace(pos, n1, s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. TString & Swap(TString& other); Swap the contents of other and this without reallocation. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. TSubString & operator=(const char* s). char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. TString(const char* a1, Ssiz_t n1, const char* a2, Ssiz_t n2); Special concatenation constructor. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TString.html:25845,Assert,AssertElement,25845,root/html604/TString.html,https://root.cern,https://root.cern/root/html604/TString.html,1,['Assert'],['AssertElement']
Testability,".Length()); }. TString & Replace(Ssiz_t pos, Ssiz_t n1, const TString& s, Ssiz_t n2); { return Replace(pos, n1, s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. TString & Swap(TString& other); Swap the contents of other and this without reallocation. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TString.html:25662,Assert,AssertElement,25662,root/html602/TString.html,https://root.cern,https://root.cern/root/html602/TString.html,1,['Assert'],['AssertElement']
Testability,".ReplaceAll(""$SharedLib"",""\""$SharedLib\"""");; 3702 cmd.ReplaceAll(""$SharedLib"",library);; 3703 if (linkDepLibraries) {; 3704 if (produceRootmap) {; 3705 cmd.ReplaceAll(""$DepLibs"",depLibraries);; 3706 } else {; 3707 cmd.ReplaceAll(""$DepLibs"",linkLibraries);; 3708 }; 3709 }; 3710 cmd.ReplaceAll(""$LinkedLibs"",linkLibraries);; 3711 cmd.ReplaceAll(""$LibName"",libname);; 3712 cmd.ReplaceAll(""\""$BuildDir"",""$BuildDir"");; 3713 cmd.ReplaceAll(""$BuildDir"",""\""$BuildDir\"""");; 3714 cmd.ReplaceAll(""$BuildDir"",build_loc);; 3715 TString optdebFlags;; 3716 if (mode & kDebug); 3717 optdebFlags = fFlagsDebug + "" "";; 3718 if (mode & kOpt); 3719 optdebFlags += fFlagsOpt;; 3720 cmd.ReplaceAll(""$Opt"", optdebFlags);; 3721#ifdef WIN32; 3722 R__FixLink(cmd);; 3723 cmd.ReplaceAll(""-std="", ""-std:"");; 3724#endif; 3725 ; 3726 TString testcmd = fMakeExe;; 3727 TString fakeMain;; 3728 AssignAndDelete( fakeMain, ConcatFileName( build_loc, libname ) );; 3729 fakeMain += ""_ACLiC_main"";; 3730 fakeMain += extension;; 3731 std::ofstream fakeMainFile( fakeMain, std::ios::out );; 3732 fakeMainFile << ""// File Automatically generated by the ROOT Script Compiler ""; 3733 << std::endl;; 3734 fakeMainFile << ""int main(char*argc,char**argvv) {};"" << std::endl;; 3735 fakeMainFile.close();; 3736 // We could append this fake main routine to the compilation line.; 3737 // But in this case compiler may output the name of the dictionary file; 3738 // and of the fakeMain file while it compiles it. (this would be useless; 3739 // confusing output).; 3740 // We could also the fake main routine to the end of the dictionary file; 3741 // however compilation would fail if a main is already there; 3742 // (like stress.cxx); 3743 // dict.Append("" "").Append(fakeMain);; 3744 TString exec;; 3745 AssignAndDelete( exec, ConcatFileName( build_loc, libname ) );; 3746 exec += ""_ACLiC_exec"";; 3747 testcmd.ReplaceAll(""$SourceFiles"",""-D__ACLIC__ \""$SourceFiles\"""");; 3748 testcmd.ReplaceAll(""$SourceFiles"",dict);; 3749 testcmd.ReplaceAll(""$O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:126140,test,testcmd,126140,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['testcmd']
Testability,".at(0) *factors.at(1) + factors.at(2));; ; //return 100.- (10 + factors.at(1)) *factors.at(2)* TMath::Abs( TMath::Sin(factors.at(0)) );; }; };; ; ; class MyGA2nd : public GeneticAlgorithm {; public:; MyGA2nd( IFitterTarget& target, Int_t size, vector<Interval*>& ranges ) : GeneticAlgorithm(target,; size, ranges ){; }; ; ; // this method has to be activated if one wants to change the behaviour of the evolution; // works only with the head version; //void Evolution(){; // fSexual = true;; // if (fSexual) {; // fPopulation.MakeCopies( 5 );; // fPopulation.MakeChildren();; // fPopulation.NextGeneration();; ; // fPopulation.Mutate( 10, 3, kTRUE, fSpread, fMirror );; // fPopulation.Mutate( 40, fPopulation.GetPopulationSize()*3/4 );; // } else {; // fPopulation.MakeCopies( 3 );; // fPopulation.MakeMutants(100,true, 0.1, true);; // fPopulation.NextGeneration();; // }; // }; };; ; ; ; void TMVAGAexample() {; ; std::cout << ""Start Test TMVAGAexample"" << std::endl; << ""========================"" << std::endl; << ""\nEXAMPLE"" << std::endl;; // define all the parameters by their minimum and maximum value; // in this example 3 parameters are defined.; vector<Interval*> ranges;; ranges.push_back( new Interval(0,15,30) );; ranges.push_back( new Interval(0,13) );; ranges.push_back( new Interval(0,5,3) );; ; for( std::vector<Interval*>::iterator it = ranges.begin(); it != ranges.end(); it++ ){; std::cout << "" range: "" << (*it)->GetMin() << "" "" << (*it)->GetMax() << std::endl;; }; ; IFitterTarget* myFitness = new MyFitness();; ; // prepare the genetic algorithm with an initial population size of 20; // mind: big population sizes will help in searching the domain space of the solution; // but you have to weight this out to the number of generations; // the extreme case of 1 generation and populationsize n is equal to; // a Monte Carlo calculation with n tries; ; MyGA2nd mg( *myFitness, 100, ranges );; // mg.SetParameters( 4, 30, 200, 10,5, 0.95, 0.001 );; ; #define CONVSTEPS 20; #define ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAGAexample_8C.html:4574,Test,Test,4574,doc/master/TMVAGAexample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAGAexample_8C.html,1,['Test'],['Test']
Testability,".clear();; 369 for (UInt_t i=0; i<dsi.GetNSpectators(); i++) {; 370 ttf = new TTreeFormula( TString::Format( ""Formula%s"", dsi.GetSpectatorInfo(i).GetInternalName().Data() ),; 371 dsi.GetSpectatorInfo(i).GetExpression().Data(), tr );; 372 CheckTTreeFormula( ttf, dsi.GetSpectatorInfo(i).GetExpression(), hasDollar );; 373 fSpectatorFormulas.push_back( ttf );; 374 }; 375 ; 376 //; 377 // the cuts (one per class, if non-existent: formula pointer = 0); 378 //; 379 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform cuts"" << Endl;; 380 for (formIt = fCutFormulas.begin(), formItEnd = fCutFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 381 fCutFormulas.clear();; 382 for (UInt_t clIdx=0; clIdx<dsi.GetNClasses(); clIdx++) {; 383 const TCut& tmpCut = dsi.GetClassInfo(clIdx)->GetCut();; 384 const TString tmpCutExp(tmpCut.GetTitle());; 385 ttf = 0;; 386 if (tmpCutExp!="""") {; 387 ttf = new TTreeFormula( Form(""CutClass%i"",clIdx), tmpCutExp, tr );; 388 Bool_t worked = CheckTTreeFormula( ttf, tmpCutExp, hasDollar );; 389 if( !worked ){; 390 Log() << kWARNING << ""Please check class \"""" << dsi.GetClassInfo(clIdx)->GetName(); 391 << ""\"" cut \"""" << dsi.GetClassInfo(clIdx)->GetCut() << Endl;; 392 }; 393 }; 394 fCutFormulas.push_back( ttf );; 395 }; 396 ; 397 //; 398 // the weights (one per class, if non-existent: formula pointer = 0); 399 //; 400 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform weights"" << Endl;; 401 for (formIt = fWeightFormula.begin(), formItEnd = fWeightFormula.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 402 fWeightFormula.clear();; 403 for (UInt_t clIdx=0; clIdx<dsi.GetNClasses(); clIdx++) {; 404 const TString tmpWeight = dsi.GetClassInfo(clIdx)->GetWeight();; 405 ; 406 if (dsi.GetClassInfo(clIdx)->GetName() != tinfo.GetClassName() ) { // if the tree is of another class; 407 fWeightFormula.push_back( 0 );; 408 continue;; 409 }; 410 ; 411 ttf = 0;; 412 if (tmpWeight!="""") {; 413 ttf =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:15993,Log,Log,15993,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,".cxx. ◆ SearchHighRes(). Int_t TSpectrum3::SearchHighRes ; (; const Double_t *** ; source, . Double_t *** ; dest, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Double_t ; sigma, . Double_t ; threshold, . Bool_t ; backgroundRemove, . Int_t ; deconIterations, . Bool_t ; markov, . Int_t ; averWindow . ). This function searches for peaks in source spectrum It is based on deconvolution method. ; First the background is removed (if desired), then Markov spectrum is calculated (if desired), then the response function is generated according to given sigma and deconvolution is carried out. It returns number of found peaks.; Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual; backgroundRemove-logical variable, set if the removal of background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow-averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching; Goal: to identify automatically the peaks in spectrum with the presence of the continuous background, one- and two-fold coincidences (ridges) and statistical fluctuations - noise.; The common problems connected with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified; non-sensitivity of the algorithm to continuous background; non-sensitivity to one-fold coincidences (coincidences peak - p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum3.html:35617,log,logical,35617,doc/master/classTSpectrum3.html,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html,2,['log'],['logical']
Testability,".cxx:2281; TF1::Browsevoid Browse(TBrowser *b) overrideBrowse.Definition TF1.cxx:993; TF1::GetParNamevirtual const char * GetParName(Int_t ipar) constDefinition TF1.h:557; TF1::~TF1~TF1() overrideTF1 default destructor.Definition TF1.cxx:953; TF1::fgCurrentstatic TF1 * fgCurrentDefinition TF1.h:327; TF1::EvalParvirtual Double_t EvalPar(const Double_t *x, const Double_t *params=nullptr)Evaluate function with given coordinates and parameters.Definition TF1.cxx:1468; TF1::fNpxInt_t fNpxNumber of points used for the graphical representation.Definition TF1.h:267; TF1::SetParLimitsvirtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)Set lower and upper limits for parameter ipar.Definition TF1.cxx:3507; TF1::DoInitializevoid DoInitialize(EAddToList addToGlobList)Common initialization of the TF1.Definition TF1.cxx:802; TF1::GetXvirtual Double_t GetX(Double_t y, Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the X value corresponding to the function value fy for (xmin<x<xmax).Definition TF1.cxx:1863; TF1::GetCurrentstatic TF1 * GetCurrent()Static function returning the current function being processed.Definition TF1.cxx:1569; TF1::SetParNamevirtual void SetParName(Int_t ipar, const char *name)Set name of parameter number ipar.Definition TF1.cxx:3450; TF1::GetObjectInfochar * GetObjectInfo(Int_t px, Int_t py) const overrideRedefines TObject::GetObjectInfo.Definition TF1.cxx:1918; TF1::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TF1.cxx:1536; TF1::GetSavevirtual Double_t GetSave(const Double_t *x)Get value corresponding to X in array of fSave values.Definition TF1.cxx:2344; TF1::fgAbsValuestatic std::atomic< Bool_t > fgAbsValueDefinition TF1.h:324; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489; TF1::DrawCopyvirtual TF1 * DrawCopy(Option_t *option="""") constDraw a copy of this function with its current attr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:185913,log,logx,185913,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['logx']
Testability,".cxx:242; TFumili::fGrDouble_t * fGr[fMaxParam] Gradients of objective functionDefinition TFumili.h:38; TFumili::fGTDouble_t fGTExpected function change in next iteration.Definition TFumili.h:61; TFumili::SetParameterInt_t SetParameter(Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) overrideSets for parameter number ipar initial parameter value, name parname, initial error verr and limits v...Definition TFumili.cxx:1641; TFumili::fCwordTString fCwordCommand string.Definition TFumili.h:63; TFumili::FitLikelihoodIvirtual void FitLikelihoodI(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Minimization function for H1s using a Likelihood method.Definition TFumili.cxx:1972; TFumili::fRPDouble_t fRPPrecision of fit ( machine zero on CDC 6000) quite old yeh?Definition TFumili.h:59; TFumili::fCmParDouble_t * fCmPar[fMaxParam] parameters of commandsDefinition TFumili.h:55; TFumili::fDFDouble_t * fDF[fMaxParam] First derivatives of theoretical functionDefinition TFumili.h:54; TFumili::GetSumLogDouble_t GetSumLog(Int_t) overrideReturn Sum(log(i) i=0,n used by log-likelihood fits.Definition TFumili.cxx:921; TFumili::fSumLogDouble_t * fSumLog[fNlog]Definition TFumili.h:40; TFumili::fAMXDouble_t * fAMX[fMaxParam] Maximum param valueDefinition TFumili.h:50; TFumili::fDEBUGBool_t fDEBUGdebug infoDefinition TFumili.h:30; TFumili::fNlimMulInt_t fNlimMulfNlimMul - after fNlimMul successful iterations permits four-fold increasing of fPLDefinition TFumili.h:21; TFumili::fGRADBool_t fGRADuser calculated gradientsDefinition TFumili.h:28; TFumili::InvertZvoid InvertZ(Int_t)Inverts packed diagonal matrix Z by square-root method.Definition TFumili.cxx:945; TStringBasic string class.Definition TString.h:139; TVirtualFitterAbstract Base Class for Fitting.Definition TVirtualFitter.h:29; bool; double; int. mathfumiliincTFumili.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8h_source.html:14732,log,log,14732,doc/master/TFumili_8h_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8h_source.html,2,['log'],"['log', 'log-likelihood']"
Testability,".cxx:284; TSystem::LoadAllLibrariesvirtual UInt_t LoadAllLibraries()Load all libraries known to ROOT via the rootmap system.Definition TSystem.cxx:1970; TSystem::GetDirPtrvirtual void * GetDirPtr() constDefinition TSystem.h:416; TSystem::SetObjExtvirtual void SetObjExt(const char *objExt)Set object files extension, should be either .o, .obj, etc.Definition TSystem.cxx:4244; TSystem::SetLinkdefSuffixvirtual void SetLinkdefSuffix(const char *suffix)The 'suffix' will be appended to the name of a script loaded by ACLiC and used to locate any eventual...Definition TSystem.cxx:4227; TSystem::fHelpersTSeqCollection * fHelpersDefinition TSystem.h:321; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::GetBuildDirvirtual const char * GetBuildDir() constReturn the path of the build directory.Definition TSystem.cxx:3915; TSystem::Openlogvirtual void Openlog(const char *name, Int_t options, ELogFacility facility)Open connection to system log daemon.Definition TSystem.cxx:1677; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::AddIncludePathvirtual void AddIncludePath(const char *includePath)Add a directory to the already set include path.Definition TSystem.cxx:4159; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::GetEffectiveGidvirtual Int_t GetEffectiveGid()Returns the effective group id.Definition TSystem.cxx:1591; TSystem::EAclicModeEAclicModeDefinition TSystem.h:269; TSystem::kDefault@ kDefaultDefinition TSystem.h:269; TSystem::kDebug@ kDebugDefinition TSystem.h:269; TSystem::kOpt@ kOptDefinition TSystem.h:269; TSystem::~TSystemvirtual ~TSystem()Delete the OS interface.Definition TSystem.cxx:139; TSystem::SetDisplayvirtual void SetDisplay()Set DISPLAY environment va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:173548,log,log,173548,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['log'],['log']
Testability,".cxx:3542; TPad::PixeltoXYvirtual void PixeltoXY(Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y)Convert pixel to X/Y coordinates.Definition TPad.cxx:7406; TPad::DrawCrosshairvirtual void DrawCrosshair()Function called to draw a crosshair in the canvas.Definition TPad.cxx:1605; TPad::YtoPadDouble_t YtoPad(Double_t y) const overrideConvert y from Y to pad.Definition TPad.cxx:3572; TPad::RangeChangedvirtual void RangeChanged()Definition TPad.h:316; TPad::fUyminDouble_t fUyminMinimum value on the Y axis.Definition TPad.h:75; TPad::SetPadvoid SetPad(const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=35, Short_t bordersize=5, Short_t bordermode=-1) overrideSet all pad parameters.Definition TPad.cxx:6171; TPad::SetCursorvoid SetCursor(ECursor cursor) overrideSet cursor type.Definition TPad.cxx:2911; TPad::GetCanvasIDInt_t GetCanvasID() const overrideGet canvas identifier.Definition TPad.cxx:2738; TPad::fLogzInt_t fLogz(=0 if Z linear scale, =1 if log scale)Definition TPad.h:93; TPad::fYtoPixelkDouble_t fYtoPixelkConversion coefficient for Y World to pixel.Definition TPad.h:45; TPad::UpdateAsyncvoid UpdateAsync() overrideAsynchronous pad update.Definition TPad.cxx:2947; TPad::TPadTPad()Pad default constructor.Definition TPad.cxx:132; TPad::AbsPixeltoXDouble_t AbsPixeltoX(Int_t px) overrideDefinition TPad.h:168; TPad::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in pad.Definition TPad.cxx:6927; TPad::GetMaxPickDistancestatic Int_t GetMaxPickDistance()Static function (see also TPad::SetMaxPickDistance)Definition TPad.cxx:2794; TPad::VtoAbsPixelInt_t VtoAbsPixel(Double_t v) const overrideConvert Y NDC to absolute pixel.Definition TPad.cxx:7467; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::fUtoPixelkDouble_t fUtoPixelkConversion coefficient for U NDC to pixel.Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:298964,log,log,298964,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['log'],['log']
Testability,.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:44872,test,testRooFit,44872,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testRooFit']
Testability,.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.h;  mixmax.icc;  mixmax_skip_N17.icc;  mixmax_skip_N240.icc;  mixmax_skip_N256.icc;  mixmax_skip_N256.oldS.icc;  MixMaxEngineImpl.h;  MixMaxEngineImpl17.cxx;  MixMaxEngineImpl240.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46298,test,testRooFit,46298,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testRooFit']
Testability,.cxx;  MixMaxEngineImpl256.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testKahan.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:45178,test,testkdTreeBinning,45178,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testkdTreeBinning']
Testability,.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  LinkDef.h;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:55354,test,testUnbinGausFit,55354,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['testUnbinGausFit']
Testability,.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  TQpSolverBase.h;  TQpVar.h;  ► src;  TGondzioSolver.cxx;  TMehrotraSolver.cxx;  TQpDataBase.cxx;  TQpDataDens.cxx;  TQpDataSparse.cxx;  TQpLinSolverBase.cxx;  TQpLinSolverDens.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:53896,test,testUnbinGausFit,53896,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testUnbinGausFit']
Testability,.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  Vavilo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46700,test,testSpecFuncBeta,46700,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSpecFuncBeta']
Testability,.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  StdEngine.cxx;  TComplex.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  TRandom.cxx;  TRandom1.cxx;  TRandom2.cxx;  TRandom3.cxx;  TRandomGen.cxx;  triangle.c;  triangle.h;  TStatistic.cxx;  UnBinData.cxx;  ► test;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  SparseDataComparer.cxx;  SparseFit3.cxx;  SparseFit4.cxx;  testFit.cxx;  testFitPerf.cxx;  testGraphFit.cxx;  testMinim.cxx;  testRooFit.cxx;  WrapperRooPdf.h;  binarySearchTime.cxx;  kDTreeTest.cxx;  newKDTreeTest.cxx;  stdsort.cxx;  stressGoFTest.cxx;  stressTF1.cxx;  stressTMath.cxx;  testAnalyticalIntegrals.cxx;  testBinarySearch.cxx;  testDistSampler.cxx;  testIntegration.cxx;  testIntegrationMultiDim.cxx;  testkdTreeBinning.cxx;  testMathRandom.cxx;  testRootFinder.cxx;  testSampleQuantiles.cxx;  testSortOrder.cxx;  testSpecFuncBeta.cxx;  testSpecFuncBetaI.cxx;  testSpecFuncErf.cxx;  testSpecFuncGamma.cxx;  testSpecFuncSiCi.cxx;  testTMath.cxx;  testTStatistic.cxx;  ► v7;  ► inc;  ► ROOT;  TFit.hxx;  ► mathmore;  ► inc;  ► Math;  ChebyshevApprox.h;  Derivator.h;  DistFuncMathMore.h;  GSLFunctionAdapter.h;  GSLIntegrator.h;  GSLMCIntegrator.h;  GSLMinimizer.h;  GSLMinimizer1D.h;  GSLMultiRootFinder.h;  GSLNLSMinimizer.h;  GSLQuasiRandom.h;  GSLRandom.h;  GSLRandomFunctions.h;  GSLRndmEngines.h;  GSLRootFinder.h;  GSLRootFinderDeriv.h;  GSLRootHelper.h;  GSLSimAnMinimizer.h;  GSLSimAnnealing.h;  IntegrationTypes.h;  InterpolationTypes.h;  Interpolator.h;  KelvinFunctions.h;  LinkDef.h;  LinkDef_Func.h;  LinkDef_RootFinding.h;  MCIntegrationTypes.h;  MCParameters.h;  MultiNumGradFunction.h;  MultiRootFinder.h;  ParamFunction.h;  PdfFuncMathMore.h;  Polynomial.h;  QuantFuncMathMore.h;  QuasiRandom.h;  RootFinderAlgorithms.h;  SpecFuncMathMore.h;  Vavilov.h;  VavilovAccurate.h;  VavilovAccurateCdf.h;  VavilovAccuratePdf.h;  Vavilo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:46723,test,testSpecFuncBetaI,46723,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSpecFuncBetaI']
Testability,.cxx;  RuleCut.cxx;  RuleEnsemble.cxx;  RuleFit.cxx;  RuleFitAPI.cxx;  RuleFitParams.cxx;  SdivSqrtSplusB.cxx;  SeparationBase.cxx;  SimulatedAnnealing.cxx;  SimulatedAnnealingFitter.cxx;  SVEvent.cxx;  SVKernelFunction.cxx;  SVKernelMatrix.cxx;  SVWorkingSet.cxx;  TActivation.cxx;  TActivationChooser.cxx;  TActivationIdentity.cxx;  TActivationRadial.cxx;  TActivationReLU.cxx;  TActivationSigmoid.cxx;  TActivationTanh.cxx;  Timer.cxx;  TNeuron.cxx;  TNeuronInput.cxx;  TNeuronInputAbs.cxx;  TNeuronInputChooser.cxx;  TNeuronInputSqSum.cxx;  TNeuronInputSum.cxx;  Tools.cxx;  TransformationHandler.cxx;  TSpline1.cxx;  TSpline2.cxx;  TSynapse.cxx;  Types.cxx;  VariableDecorrTransform.cxx;  VariableGaussTransform.cxx;  VariableIdentityTransform.cxx;  VariableImportance.cxx;  VariableInfo.cxx;  VariableNormalizeTransform.cxx;  VariablePCATransform.cxx;  VariableRearrangeTransform.cxx;  VariableTransform.cxx;  VariableTransformBase.cxx;  VarTransformHandler.cxx;  Volume.cxx;  ► test;  ► DNN;  TestActivationFunctions.cxx;  TestActivationFunctions.h;  TestActivationFunctionsCpu.cxx;  TestActivationFunctionsCuda.cxx;  TestBackpropagation.cxx;  TestBackpropagation.h;  TestBackpropagationCpu.cxx;  TestBackpropagationCuda.cxx;  TestCuda.cxx;  TestDataLoader.cxx;  TestDataLoader.h;  TestDataLoaderCpu.cxx;  TestDataLoaderCuda.cxx;  TestDerivatives.cxx;  TestDerivatives.h;  TestDerivativesCpu.cxx;  TestDerivativesCuda.cxx;  TestLossFunctions.cxx;  TestLossFunctions.h;  TestLossFunctionsCpu.cxx;  TestLossFunctionsCuda.cxx;  TestMatrixArithmetic.h;  TestMatrixArithmeticCpu.cxx;  TestMatrixArithmeticCuda.cxx;  TestMinimization.cxx;  TestMinimization.h;  TestMinimizationCpu.cxx;  TestMinimizationCuda.cxx;  Utility.h;  ► tmvagui;  ► inc;  ► TMVA;  annconvergencetest.h;  BDT.h;  BDT_Reg.h;  BDTControlPlots.h;  BoostControlPlots.h;  compareanapp.h;  correlations.h;  correlationscatters.h;  correlationscattersMultiClass.h;  correlationsMultiClass.h;  CorrGui.h;  CorrGuiMultiClass.h;  deviati,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:94214,test,test,94214,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,4,"['Test', 'test']","['TestActivationFunctions', 'test']"
Testability,.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vc;  ► examples;  ► buddhabrot;  main.cpp;  main.h;  ► finitediff;  main.cpp;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  testFitPerf.cxx;  ► genvector;  vectorOperation.cxx;  ► mandelbrot;  main.cpp;  main.h;  mandel.cpp;  mandel.h;  ► matrix;  main.cpp;  ► polarcoord;  main.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► includ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:57085,test,testSMatrix,57085,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testSMatrix']
Testability,.cxx;  TQpProbSparse.cxx;  TQpResidual.cxx;  TQpSolverBase.cxx;  TQpVar.cxx;  ► rtools;  ► inc;  ► Math;  RMinimizer.h;  LinkDef.h;  ► src;  RMinimizer.cxx;  ► smatrix;  ► inc;  ► Math;  BinaryOperators.h;  BinaryOpPolicy.h;  CholeskyDecomp.hHeader file containing the templated implementation of matrix inversion routines for use with ROOT's SMatrix classes (symmetric positive definite case) ;  CramerInversion.icc;  CramerInversionSym.icc;  Dfact.h;  Dfactir.h;  Dfinv.h;  Dinv.h;  Dsfact.h;  Dsinv.h;  Expression.h;  Functions.h;  HelperOps.h;  MatrixFunctions.h;  MatrixInversion.icc;  MatrixRepresentationsStatic.h;  MConfig.h;  SMatrix.h;  SMatrix.icc;  SMatrixDfwd.h;  SMatrixFfwd.h;  StaticCheck.h;  SVector.h;  SVector.icc;  UnaryOperators.h;  LinkDef.h;  LinkDefAll.h;  LinkDefD32.h;  ► src;  Dict.h;  ► test;  kalman.C;  matrix_op.h;  matrix_util.h;  matrixOperations.C;  stressKalman.cxx;  stressOperations.cxx;  testInversion.cxx;  testIO.cxx;  testKalman.cxx;  testOperations.cxx;  testSMatrix.cxx;  TestTimer.h;  Track.h;  TrackLinkDef.h;  ► splot;  ► inc;  LinkDef.h;  TSPlot.h;  ► src;  TSPlot.cxx;  ► unuran;  ► inc;  LinkDef.h;  TUnuran.h;  TUnuranBaseDist.h;  TUnuranContDist.h;  TUnuranDiscrDist.h;  TUnuranEmpDist.h;  TUnuranMultiContDist.h;  TUnuranSampler.h;  ► src;  TUnuran.cxx;  TUnuranContDist.cxx;  TUnuranDiscrDist.cxx;  TUnuranEmpDist.cxx;  TUnuranMultiContDist.cxx;  TUnuranSampler.cxx;  UnuranDistr.h;  UnuranDistrAdapter.h;  UnuranRng.h;  ► test;  unuranDiscrete.cxx;  unuranDistr.cxx;  unuranHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;  TMemStatHelpers.h;  TMemStatHook.h;  TMemStatMng.h;  ► src;  TMemStat.cxx;  TMemStatBacktrace.cxx;  TMemStatHelpers.cxx;  TMemSt,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:57453,test,testSMatrix,57453,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testSMatrix']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1., RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 0.001, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimultaneous.html:49792,test,test,49792,root/html602/RooSimultaneous.html,https://root.cern,https://root.cern/root/html602/RooSimultaneous.html,2,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:46643,test,test,46643,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,2,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. RooDataSet* generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); Special generator interface for generation of 'global observables' -- for RooStats tools. inline RooSimultaneous(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooSimultaneous(*this,newname) ; }. Bool_t selfNormalized() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooSimultaneous.html:45403,test,test,45403,root/html530/RooSimultaneous.html,https://root.cern,https://root.cern/root/html530/RooSimultaneous.html,1,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. inline RooSimultaneous(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooSimultaneous(*this,newname) ; }. Bool_t selfNormalized() const; { return kTRUE ; }. Double_t expectedEvents(const RooArgSet* nset) const. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. RooPlot* p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimultaneous.html:45046,test,test,45046,root/html528/RooSimultaneous.html,https://root.cern,https://root.cern/root/html528/RooSimultaneous.html,1,['test'],['test']
Testability,".d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized generator contenxt for simultaneous p.d.f.s. inline RooSimultaneous(); Constructors, assignment etc. { }. TObject* clone(const char* newname) const; { return new RooSimultaneous(*this,newname) ; }. Bool_t selfNormalized() const; { return kTRUE ; }. Double_t expectedEvents(const RooArgSet* nset). Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. RooPlot* plotOn(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:44386,test,test,44386,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['test'],['test']
Testability,".def""; 4447 ROOT::TMetaUtils::Info(nullptr, ""==== END interpreter configuration ====\n\n"");; 4448 }; 4449 ; 4450 interp.getOptions().ErrorOut = true;; 4451 interp.enableRawInput(true);; 4452 ; 4453 if (gOptCxxModule) {; 4454 for (llvm::StringRef DepMod : gOptModuleDependencies) {; 4455 if (DepMod.endswith(""_rdict.pcm"")) {; 4456 ROOT::TMetaUtils::Warning(nullptr, ""'%s' value is deprecated. Please use [<fullpath>]%s.pcm\n"",; 4457 DepMod.data(),; 4458 GetModuleNameFromRdictName(DepMod).str().data());; 4459 }; 4460 DepMod = GetModuleNameFromRdictName(DepMod);; 4461 // We might deserialize.; 4462 cling::Interpreter::PushTransactionRAII RAII(&interp);; 4463 if (!interp.loadModule(DepMod.str(), /*complain*/false)) {; 4464 ROOT::TMetaUtils::Error(nullptr, ""Module '%s' failed to load.\n"",; 4465 DepMod.data());; 4466 }; 4467 }; 4468 }; 4469 ; 4470 if (!isGenreflex) { // rootcling; 4471 // ROOTCINT uses to define a few header implicitly, we need to do it explicitly.; 4472 if (interp.declare(""#include <assert.h>\n""; 4473 ""#include \""Rtypes.h\""\n""; 4474 ""#include \""TObject.h\"""") != cling::Interpreter::kSuccess; 4475 ) {; 4476 // There was an error.; 4477 ROOT::TMetaUtils::Error(nullptr, ""Error loading the default rootcling header files.\n"");; 4478 return 1;; 4479 }; 4480 }; 4481 ; 4482 if (interp.declare(""#include <string>\n"" // For the list of 'opaque' typedef to also include string.; 4483 ""#include <RtypesCore.h>\n"" // For initializing TNormalizedCtxt.; 4484 ""namespace std {} using namespace std;"") != cling::Interpreter::kSuccess) {; 4485 ROOT::TMetaUtils::Error(nullptr, ""Error loading the default header files.\n"");; 4486 return 1;; 4487 }; 4488 ; 4489 // We are now ready (enough is loaded) to init the list of opaque typedefs.; 4490 ROOT::TMetaUtils::TNormalizedCtxt normCtxt(interp.getLookupHelper());; 4491 ROOT::TMetaUtils::TClingLookupHelper helper(interp, normCtxt, nullptr, nullptr, nullptr);; 4492 TClassEdit::Init(&helper);; 4493 ; 4494 // flags used only for the pragma pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:183560,assert,assert,183560,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['assert'],['assert']
Testability,".empty() && fDataErrorLowPtr );; 485 assert( fDataError.empty() && !fDataErrorPtr );; 486 assert( !fCoordErrors.empty() && fCoordErrors.size() == 1 );; 487 assert( !fCoordErrorsPtr.empty() && fCoordErrorsPtr.size() == 1 && fCoordErrorsPtr[0] );; 488 assert( &fCoordErrors[0].front() == fCoordErrorsPtr[0] );; 489 ; 490 fData[ fNPoints ] = y;; 491 fCoordErrors[0][ fNPoints ] = ex;; 492 fDataErrorHigh[ fNPoints ] = eyh;; 493 fDataErrorLow[ fNPoints ] = eyl;; 494 ; 495 FitData::Add( x );; 496 fSumContent += y;; 497 if (y != 0 || eyl != 1.0 || eyh != 1.0) fSumError2 += (eyl+eyh)*(eyl+eyh)/4;; 498 ; 499 }; 500 ; 501 /**; 502 add multi-dim coordinate data with only value; 503 */; 504 void BinData::Add( const double* x, double val ); 505 {; 506 assert( kNoError == fErrorType );; 507 ; 508 assert( !fData.empty() && fDataPtr );; 509 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 510 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 511 assert( fDataError.empty() && !fDataErrorPtr );; 512 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 513 ; 514 fData[ fNPoints ] = val;; 515 ; 516 FitData::Add( x );; 517 fSumContent += val;; 518 }; 519 ; 520 /**; 521 add multi-dim coordinate data with only error in value; 522 The class stores internally the inverse of the error in this case; 523 */; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 532 ; 533 fData[ fNPoints ] = val;; 534 fDataError[ fNPoints ] = (eval != 0.0) ? 1.0/eval : 0.0;; 535 ; 536 FitData::Add( x );; 537 fSumContent += val;; 538 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 539 if (!fIsWeighted); 540 if (val != 0 && std::abs( eval*eval/val - 1.0) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:15615,assert,assert,15615,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,".end() );; 1437 testingEventVector->insert ( testingEventVector->end(), tmpEventVector[Types::kTesting].at(cls).begin(), tmpEventVector[Types::kTesting].at(cls).end() );; 1438 }; 1439 }; 1440 // delete the tmpEventVector (but not the events therein); 1441 tmpEventVector[Types::kTraining].clear();; 1442 tmpEventVector[Types::kTesting].clear();; 1443 ; 1444 tmpEventVector[Types::kMaxTreeType].clear();; 1445 ; 1446 if (mixMode == ""RANDOM"") {; 1447 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""shuffling events""<<Endl;; 1448 ; 1449 std::shuffle(trainingEventVector->begin(), trainingEventVector->end(), rndm);; 1450 std::shuffle(testingEventVector->begin(), testingEventVector->end(), rndm);; 1451 }; 1452 ; 1453 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""trainingEventVector "" << trainingEventVector->size() << Endl;; 1454 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""testingEventVector "" << testingEventVector->size() << Endl;; 1455 ; 1456 // create dataset; 1457 DataSet* ds = new DataSet(dsi);; 1458 ; 1459 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;; 1460 ds->SetEventCollection(trainingEventVector, Types::kTraining );; 1461 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;; 1462 ds->SetEventCollection(testingEventVector, Types::kTesting );; 1463 ; 1464 ; 1465 if (ds->GetNTrainingEvents() < 1){; 1466 Log() << kFATAL << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any training events, I better stop here and let you fix that one first "" << Endl;; 1467 }; 1468 ; 1469 if (ds->GetNTestEvents() < 1) {; 1470 Log() << kERROR << ""Dataset "" << std::string(dsi.GetName()) << "" does not have any testing events, guess that will cause problems later..but for now, I continue "" << Endl;; 1471 }; 1472 ; 1473 delete trainingEventVector;; 1474 delete testingEventVector;; 1475 return ds;; 1476 ; 1477}; 1478 ; 1479/////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:66195,test,testingEventVector,66195,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,3,"['Log', 'test']","['Log', 'testingEventVector']"
Testability,".fDataErrorLow;; 294 // both error low and high should be empty or not; 295 assert( fDataErrorLow.empty() == fDataErrorHigh.empty()) ;; 296 if (!fDataErrorHigh.empty() && !fDataErrorLow.empty()) {; 297 assert(kAsymError == fErrorType);; 298 fDataErrorHighPtr = &fDataErrorHigh.front();; 299 fDataErrorLowPtr = &fDataErrorLow.front();; 300 }; 301 }; 302 ; 303 fpTmpCoordErrorVector= new double[ fDim ];; 304 ; 305 if ( HasBinEdges() ); 306 fpTmpBinEdgeVector = new double[ fDim ];; 307 ; 308 return *this;; 309 }; 310 ; 311 ; 312 /**; 313 preallocate a data set with given size , dimension and error type (to get the full point size); 314 If the data set already exists and it is having the compatible point size space for the new points; 315 is created in the data sets, while if not compatible the old data are erased and new space of; 316 new size is allocated.; 317 (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints); 318 */; 319 ; 320 void BinData::Append( unsigned int newPoints, unsigned int dim , ErrorType err ); 321 {; 322 assert( !fWrapped );; 323 assert( fMaxPoints == 0 || fWrapped == fData.empty() );; 324 ; 325 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 326 kAsymError == fErrorType || kNoError == fErrorType );; 327 assert( fMaxPoints == 0 || fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 328 assert( fMaxPoints == 0 || fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 329 assert( fMaxPoints == 0 || fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 330 assert( fMaxPoints == 0 || fDataErrorLow.empty() == fDataErrorHigh.empty() );; 331 assert( fMaxPoints == 0 || fData.empty() || &fData.front() == fDataPtr );; 332 ; 333 FitData::Append( newPoints, dim );; 334 ; 335 fErrorType = err;; 336 ; 337 InitDataVector( );; 338 InitializeErrors( );; 339 }; 340 ; 341 ; 342 /**; 343 apply a Log transformation of the data values; 344 can be used for example when fitting an expon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:9349,assert,assert,9349,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,['assert'],['assert']
Testability,".h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodGradFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodGradFunction interface. ; Same as method above, but now extra information can be taken from the function class . ◆ FitFCN() [4/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::IMultiGenFunction & ; fcn, . const double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23654,log,log-likelihood,23654,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['log'],['log-likelihood']
Testability,.h. ◆ GetEntries(). UInt_t TMVA::TreeInfo::GetEntries ; (; ); const. inline . Definition at line 63 of file DataInputHandler.h. ◆ GetTree(). TTree * TMVA::TreeInfo::GetTree ; (; ); const. inline . Definition at line 61 of file DataInputHandler.h. ◆ GetTreeType(). Types::ETreeType TMVA::TreeInfo::GetTreeType ; (; ); const. inline . Definition at line 64 of file DataInputHandler.h. ◆ GetWeight(). Double_t TMVA::TreeInfo::GetWeight ; (; ); const. inline . Definition at line 62 of file DataInputHandler.h. ◆ IsA(). virtual TClass * TMVA::TreeInfo::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 75 of file DataInputHandler.h. ◆ Streamer(). virtual void TMVA::TreeInfo::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::TreeInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file DataInputHandler.h. Member Data Documentation. ◆ fClassName. TString TMVA::TreeInfo::fClassName. private . name of the class the tree belongs to ; Definition at line 70 of file DataInputHandler.h. ◆ fOwner. Bool_t TMVA::TreeInfo::fOwner. private . true if created from file ; Definition at line 73 of file DataInputHandler.h. ◆ fTree. TTree* TMVA::TreeInfo::fTree. private . pointer to the tree ; Definition at line 69 of file DataInputHandler.h. ◆ fTreeType. Types::ETreeType TMVA::TreeInfo::fTreeType. private . tree is for training/testing/both ; Definition at line 72 of file DataInputHandler.h. ◆ fWeight. Double_t TMVA::TreeInfo::fWeight. private . weight for the tree ; Definition at line 71 of file DataInputHandler.h. Libraries for TMVA::TreeInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/DataInputHandler.h. TMVATreeInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html:13376,test,testing,13376,doc/master/classTMVA_1_1TreeInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html,1,['test'],['testing']
Testability,".h. ◆ NodeList. typedef std::set<const TGeoNode *> TGDMLWrite::NodeList. private . Definition at line 95 of file TGDMLWrite.h. ◆ SurfaceList. typedef std::set<const TGeoOpticalSurface *> TGDMLWrite::SurfaceList. private . Definition at line 93 of file TGDMLWrite.h. ◆ VolList. typedef std::set<const TGeoVolume *> TGDMLWrite::VolList. private . Definition at line 94 of file TGDMLWrite.h. Member Enumeration Documentation. ◆ ENamingType. enum TGDMLWrite::ENamingType. EnumeratorkelegantButSlow ; kwithoutSufixNotUniq ; kfastButUglySufix . Definition at line 80 of file TGDMLWrite.h. Constructor & Destructor Documentation. ◆ TGDMLWrite(). TGDMLWrite::TGDMLWrite ; (; ). Default constructor. ; Definition at line 205 of file TGDMLWrite.cxx. ◆ ~TGDMLWrite(). TGDMLWrite::~TGDMLWrite ; (; ). override . Destructor. ; Definition at line 235 of file TGDMLWrite.cxx. Member Function Documentation. ◆ CanProcess(). Bool_t TGDMLWrite::CanProcess ; (; TObject * ; pointer). private . Method which tests whether solids can be processed. ; Definition at line 2440 of file TGDMLWrite.cxx. ◆ ChooseObject(). XMLNodePointer_t TGDMLWrite::ChooseObject ; (; TGeoShape * ; geoShape). private . Chooses the object and method that should be used for processing object. ; Definition at line 2177 of file TGDMLWrite.cxx. ◆ CreateArb8N(). XMLNodePointer_t TGDMLWrite::CreateArb8N ; (; TGeoArb8 * ; geoShape). private . Creates ""arb8"" node for GDML. ; Definition at line 1088 of file TGDMLWrite.cxx. ◆ CreateAtomN(). XMLNodePointer_t TGDMLWrite::CreateAtomN ; (; Double_t ; atom, . const char * ; unit = ""g/mole"" . ). private . Creates ""atom"" node for GDML. ; Definition at line 771 of file TGDMLWrite.cxx. ◆ CreateBorderSurfaceN(). XMLNodePointer_t TGDMLWrite::CreateBorderSurfaceN ; (; TGeoBorderSurface * ; geoSurf). private . Creates ""bordersurface"" node for GDML. ; Definition at line 1973 of file TGDMLWrite.cxx. ◆ CreateBoxN(). XMLNodePointer_t TGDMLWrite::CreateBoxN ; (; TGeoBBox * ; geoShape). private . Creates """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:28472,test,tests,28472,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['test'],['tests']
Testability,".h. ◆ fEvPerBin. Int_t TMVA::PDEFoam::fEvPerBin. protected . Maximum number of effective (wt=1) events per bin. ; Definition at line 89 of file PDEFoam.h. ◆ fFillFoamWithOrigWeights. Bool_t TMVA::PDEFoam::fFillFoamWithOrigWeights. protected . BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ; Definition at line 112 of file PDEFoam.h. ◆ fFoamType. EFoamType TMVA::PDEFoam::fFoamType. protected . BACKWARDS COMPATIBILITY: type of foam. ; Definition at line 105 of file PDEFoam.h. ◆ fHistEdg. TObjArray* TMVA::PDEFoam::fHistEdg. protected . Histograms of wt, one for each cell edge. ; Definition at line 98 of file PDEFoam.h. ◆ fInhiDiv. Int_t* TMVA::PDEFoam::fInhiDiv. protected . ! [fDim] Flags for inhibiting cell division ; Definition at line 92 of file PDEFoam.h. ◆ fLastCe. Int_t TMVA::PDEFoam::fLastCe. protected . Index of the last cell. ; Definition at line 95 of file PDEFoam.h. ◆ fLogger. MsgLogger* TMVA::PDEFoam::fLogger. mutableprotected . ! message logger ; Definition at line 118 of file PDEFoam.h. ◆ fMaskDiv. Int_t* TMVA::PDEFoam::fMaskDiv. protected . ! [fDim] Dynamic Mask for cell division ; Definition at line 91 of file PDEFoam.h. ◆ fMaxDepth. UInt_t TMVA::PDEFoam::fMaxDepth. protected . maximum depth of cell tree ; Definition at line 110 of file PDEFoam.h. ◆ fName. TString TMVA::PDEFoam::fName. protected . Name of a given instance of the FOAM class. ; Definition at line 83 of file PDEFoam.h. ◆ fNBin. Int_t TMVA::PDEFoam::fNBin. protected . No. of bins in the edge histogram for cell MC exploration. ; Definition at line 87 of file PDEFoam.h. ◆ fNCells. Int_t TMVA::PDEFoam::fNCells. protected . Maximum number of cells. ; Definition at line 85 of file PDEFoam.h. ◆ fNElements. UInt_t TMVA::PDEFoam::fNElements. protected . BACKWARDS COMPATIBILITY: number of variables in every cell. ; Definition at line 108 of file PDEFoam.h. ◆ fNmin. UInt_t TMVA::PDEFoam::fNmin. protected . minimal number of events in cell to split cell ; Definition at line 109 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:42133,log,logger,42133,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['log'],['logger']
Testability,".h:235; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::fTitleTString fTitleDefinition TNamed.h:33; TNamed::fNameTString fNameDefinition TNamed.h:32; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::MakeZombievoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:78427,Test,TestBit,78427,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['Test'],['TestBit']
Testability,".h:293; ROOT::Fit::FitData::NDimunsigned int NDim() constreturn coordinate data dimensionDefinition FitData.h:301; ROOT::Math::GoFTest::GetSigmaNstatic Double_t GetSigmaN(const std::vector< size_t > &ns, size_t N)Computation of sigma_N as described in (1)Definition GoFTest.cxx:311; ROOT::Math::GoFTest::SetCDFvoid SetCDF()Definition GoFTest.cxx:244; ROOT::Math::GoFTest::operator()void operator()(ETestType test, Double_t &pvalue, Double_t &testStat) constThe class's unary functions performing the gif test according to the ETestType provided.Definition GoFTest.cxx:208; ROOT::Math::GoFTest::SetDistributionFunctionvoid SetDistributionFunction(const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax)Definition GoFTest.cxx:267; ROOT::Math::GoFTest::fCDFstd::unique_ptr< IGenFunction > fCDFPointer to CDF used in 1-sample test.Definition GoFTest.h:235; ROOT::Math::GoFTest::fTestSampleFromH0Bool_t fTestSampleFromH0Definition GoFTest.h:245; ROOT::Math::GoFTest::EDistributionEDistributionH0 distributions for using only with 1-sample tests.Definition GoFTest.h:70; ROOT::Math::GoFTest::kLogNormal@ kLogNormalGaussian distribution with default mean=0, sigma=1.Definition GoFTest.h:74; ROOT::Math::GoFTest::kExponential@ kExponentialLognormal distribution with default meanlog=0, sigmalog=1.Definition GoFTest.h:75; ROOT::Math::GoFTest::kGaussian@ kGaussianFor internal use only within the class's template constructor.Definition GoFTest.h:73; ROOT::Math::GoFTest::kUserDefined@ kUserDefinedDefault value for non templated 1-sample test. Set with SetDistribution.Definition GoFTest.h:72; ROOT::Math::GoFTest::kUndefined@ kUndefinedDefinition GoFTest.h:71; ROOT::Math::GoFTest::fDistEDistribution fDistType of distribution.Definition GoFTest.h:238; ROOT::Math::GoFTest::Instantiatevoid Instantiate(const Double_t *sample, size_t sampleSize)Definition GoFTest.cxx:279; ROOT::Math::GoFTest::fCombinedSamplesstd::vector< Double_t > fCombinedSamplesThe combined data.Definition GoFTest.h:241; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:39121,test,tests,39121,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['tests']
Testability,.h;  GSLMultiRootFinder.cxx;  GSLMultiRootFunctionAdapter.h;  GSLMultiRootFunctionWrapper.h;  GSLMultiRootSolver.h;  GSLNLSMinimizer.cxx;  GSLQRngWrapper.h;  GSLQuasiRandom.cxx;  GSLRndmEngines.cxx;  GSLRngWrapper.h;  GSLRootFdFSolver.h;  GSLRootFinder.cxx;  GSLRootFinderDeriv.cxx;  GSLRootFSolver.h;  GSLRootHelper.cxx;  GSLSimAnMinimizer.cxx;  GSLSimAnnealing.cxx;  Interpolator.cxx;  KelvinFunctions.cxx;  MCParameters.cxx;  MultiNumGradFunction.cxx;  PdfFuncMathMore.cxx;  Polynomial.cxx;  QuantFuncMathMore.cxx;  RootFinderAlgorithms.cxx;  SpecFuncMathMore.cxx;  Vavilov.cxx;  VavilovAccurate.cxx;  VavilovAccurateCdf.cxx;  VavilovAccuratePdf.cxx;  VavilovAccurateQuantile.cxx;  VavilovFast.cxx;  zsolve_cubic.cxx;  ► test;  piRandom.C;  pirndm.C;  simanTSP.cxx;  testChebyshev.cxx;  testDerivation.cxx;  testFunctor.cxx;  testGSLIntegration.cxx;  testGSLRootFinder.cxx;  testInterpolation.cxx;  testMCIntegration.cxx;  testMinimization1D.cxx;  testMultiRootFinder.cxx;  testPermute.cxx;  testQuasiRandom.cxx;  testRandom.cxx;  testRandomDist.cxx;  testSpecFunc.cxx;  testStatFunc.cxx;  testVavilov.cxx;  UnuRanDist.h;  VavilovTest.cxx;  VavilovTest.h;  ► matrix;  ► inc;  LinkDef.h;  TDecompBase.h;  TDecompBK.h;  TDecompChol.h;  TDecompLU.h;  TDecompQRH.h;  TDecompSparse.h;  TDecompSVD.h;  TMatrix.h;  TMatrixD.h;  TMatrixDBase.h;  TMatrixDBasefwd.h;  TMatrixDEigen.h;  TMatrixDfwd.h;  TMatrixDLazy.h;  TMatrixDSparse.h;  TMatrixDSparsefwd.h;  TMatrixDSym.h;  TMatrixDSymEigen.h;  TMatrixDSymfwd.h;  TMatrixDUtils.h;  TMatrixDUtilsfwd.h;  TMatrixF.h;  TMatrixFBase.h;  TMatrixFBasefwd.h;  TMatrixFfwd.h;  TMatrixFLazy.h;  TMatrixFSparse.h;  TMatrixFSparsefwd.h;  TMatrixFSym.h;  TMatrixFSymfwd.h;  TMatrixFUtils.h;  TMatrixFUtilsfwd.h;  TMatrixT.h;  TMatrixTBase.h;  TMatrixTCramerInv.h;  TMatrixTLazy.h;  TMatrixTSparse.h;  TMatrixTSym.h;  TMatrixTSymCramerInv.h;  TMatrixTUtils.h;  TVector.h;  TVectorD.h;  TVectorDfwd.h;  TVectorF.h;  TVectorFfwd.h;  TVectorfwd.h;  TVectorT.h;  ► src;  T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:49005,test,testQuasiRandom,49005,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['test'],['testQuasiRandom']
Testability,.h;  LorentzRotation.h;  LorentzVector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  VectorUtil.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  FcnAdapter.h;  FitConfig.h;  FitData.h;  FitExecutionPolicy.h;  FitResult.h;  Fitter.h;  FitUtil.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  LCGEngine.h;  Math.h;  MersenneTwisterEngine.h;  Minimizer.h;  MinimizerOptions.h;  MinimizerVariableTransformation.h;  MinimTransformFunction.h;  MinimTransformVariable.h;  MixMaxEngine.h;  MixMaxEngine.icc;  MultiDimParamFunctionAdapter.h;  OneDimFunctionAdapter.h;  ParamFunctor.h;  PdfFunc.h;  PdfFuncMathCore.h;  Pro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:42817,Log,LogLikelihoodFCN,42817,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['Log'],['LogLikelihoodFCN']
Testability,.h;  LorentzRotation.h;  LorentzVector.h;  Plane3D.h;  Point2D.h;  Point2Dfwd.h;  Point3D.h;  Point3Dfwd.h;  Polar2D.h;  Polar3D.h;  PositionVector2D.h;  PositionVector3D.h;  PtEtaPhiE4D.h;  PtEtaPhiM4D.h;  PxPyPzE4D.h;  PxPyPzM4D.h;  Quaternion.h;  Rotation3D.h;  RotationX.h;  RotationY.h;  RotationZ.h;  RotationZYX.h;  Transform3D.h;  Translation3D.h;  Vector2D.h;  Vector2Dfwd.h;  Vector3D.h;  Vector3Dfwd.h;  Vector4D.h;  Vector4Dfwd.h;  VectorUtil.h;  ► src;  3DConversions.cxx;  3DDistances.cxx;  AxisAngle.cxx;  AxisAngleXother.cxx;  BitReproducible.cxx;  Boost.cxx;  BoostX.cxx;  BoostY.cxx;  BoostZ.cxx;  EulerAngles.cxx;  GenVector_exception.cxx;  LorentzRotation.cxx;  Quaternion.cxx;  QuaternionXaxial.cxx;  Rotation3D.cxx;  Rotation3DxAxial.cxx;  RotationZYX.cxx;  VectorUtil.cxx;  ► test;  coordinates3D.cxx;  coordinates4D.cxx;  CoordinateTraits.h;  rotationApplication.cxx;  RotationTraits.h;  stress2D.cxx;  stress3D.cxx;  testBoost.cxx;  testGenVector.cxx;  testIterator.cxx;  testVectorIO.cxx;  Track.h;  TrackLinkDef.h;  vectorOperation.cxx;  ► mathcore;  ► inc;  ► Fit;  BasicFCN.h;  BinData.h;  Chi2FCN.h;  DataOptions.h;  DataRange.h;  DataVectorfwd.h;  FcnAdapter.h;  FitConfig.h;  FitData.h;  FitResult.h;  Fitter.h;  FitUtil.h;  FitUtilParallel.h;  LogLikelihoodFCN.h;  ParameterSettings.h;  PoissonLikelihoodFCN.h;  SparseData.h;  UnBinData.h;  ► Math;  AdaptiveIntegratorMultiDim.h;  AllIntegrationTypes.h;  BasicMinimizer.h;  BrentMethods.h;  BrentMinimizer1D.h;  BrentRootFinder.h;  ChebyshevPol.h;  Delaunay2D.h;  DistFunc.h;  DistFuncMathCore.h;  DistSampler.h;  DistSamplerOptions.h;  Error.h;  Factory.h;  FitMethodFunction.h;  Functor.h;  GaussIntegrator.h;  GaussLegendreIntegrator.h;  GenAlgoOptions.h;  GoFTest.h;  IFunction.h;  IFunctionfwd.h;  IMinimizer1D.h;  Integrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  LCGEngine.h;  Math.h;  MersenneTwister,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:41586,test,testVectorIO,41586,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testVectorIO']
Testability,".x hist/fillrandom.C"", ""Histograms with Random Numbers from a Function"");; bar->AddButton(""fit1"", "".x fit/fit1.C"", ""A Simple Fitting Example"");; bar->AddButton(""multifit"", "".x fit/multifit.C"", ""Fitting in Subranges of Histograms"");; bar->AddButton(""h1ReadAndDraw"", "".x hist/h1ReadAndDraw.C"", ""Drawing Options for 1D Histograms"");; bar->AddButton(""graph"", "".x graphs/graph.C"", ""Example of a Simple Graph"");; bar->AddButton(""gerrors"", "".x graphs/gerrors.C"", ""Example of a Graph with Error Bars"");; bar->AddButton(""tornado"", "".x graphics/tornado.C"", ""Examples of 3-D PolyMarkers"");; bar->AddButton(""geometry"", "".x geom/rootgeom.C"", ""Example of TGeoManager drawing"");; bar->AddButton(""file"", "".x io/file.C"", ""The ROOT File Format"");; bar->AddButton(""fildir"", "".x io/fildir.C"", ""The ROOT File, Directories and Keys"");; bar->AddButton(""tree"", "".x tree/tree.C"", ""The Tree Data Structure"");; bar->AddButton(""ntuple1"", "".x tree/ntuple1.C"", ""Ntuples and Selections"");; bar->AddButton(""benchmarks"", "".x legacy/benchmarks.C"", ""Runs several tests and produces an benchmark report"");; bar->AddButton(""rootmarks"", "".x legacy/rootmarks.C"", ""Prints an Estimated ROOTMARKS for Your Machine"");; bar->SetButtonWidth(90);; bar->Show();; gROOT->SaveContext();; }; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::SetButtonWidthvoid SetButtonWidth(UInt_t width)Sets the width in pixels for control bar button.Definition TControlBar.cxx:277; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demos_8C.html:2446,benchmark,benchmarks,2446,doc/master/demos_8C.html,https://root.cern,https://root.cern/doc/master/demos_8C.html,1,['benchmark'],['benchmarks']
Testability,"/ / \\::::/__/ /:/ / "" << Endl;; 1364 logger << "" /:/ / ~~~~ /:/ / "" << Endl;; 1365 logger << "" \\/__/ \\/__/ "" << Endl << Endl;; 1366 break;; 1367 ; 1368 case kBlockWelcomeMsg:; 1369 logger << Endl;; 1370 logger << ""_|_|_|_|_| _| _| _| _| _|_| "" << Endl;; 1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _| _| _| _| _| _|_|_|_| "" << Endl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""_______________________________________"" << Color(""reset"") << Endl;; 1413 logger << kINFO << """" << Color(""blue""); 1414 << Color(""red_bgd"") << Color(""bwhit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:49109,log,logger,49109,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"/ Ex:; 606/// ~~~ {.cpp}; 607/// myVol->CheckOverlaps(0.01, ""s10000000""); // shoot 10000000 points; 608/// myVol->CheckOverlaps(0.01, ""s""); // shoot the default value of 1e6 points; 609/// ~~~; 610 ; 611void TGeoVolume::CheckOverlaps(Double_t ovlp, Option_t *option) const; 612{; 613 if (!GetNdaughters() || fFinder); 614 return;; 615 Bool_t sampling = kFALSE;; 616 TString opt(option);; 617 opt.ToLower();; 618 if (opt.Contains(""s"")); 619 sampling = kTRUE;; 620 TVirtualGeoPainter *painter = fGeoManager->GetGeomPainter();; 621 if (!sampling); 622 fGeoManager->SetNsegments(80);; 623 if (!fGeoManager->IsCheckingOverlaps()) {; 624 fGeoManager->ClearOverlaps();; 625 // Info(""CheckOverlaps"", ""=== Checking overlaps for volume %s ===\n"", GetName());; 626 }; 627 painter->CheckOverlaps(this, ovlp, option);; 628 // if (sampling) return;; 629 if (!fGeoManager->IsCheckingOverlaps()) {; 630 fGeoManager->SortOverlaps();; 631 TObjArray *overlaps = fGeoManager->GetListOfOverlaps();; 632 Int_t novlps = overlaps->GetEntriesFast();; 633 TNamed *obj;; 634 TString name;; 635 for (Int_t i = 0; i < novlps; i++) {; 636 obj = (TNamed *)overlaps->At(i);; 637 if (novlps < 1000); 638 name = TString::Format(""ov%03d"", i);; 639 else; 640 name = TString::Format(""ov%06d"", i);; 641 obj->SetName(name);; 642 }; 643 if (novlps); 644 Info(""CheckOverlaps"", ""Number of illegal overlaps/extrusions for volume %s: %d\n"", GetName(), novlps);; 645 }; 646}; 647 ; 648////////////////////////////////////////////////////////////////////////////////; 649/// Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape(); 650 ; 651void TGeoVolume::CheckShape(Int_t testNo, Int_t nsamples, Option_t *option); 652{; 653 fShape->CheckShape(testNo, nsamples, option);; 654}; 655 ; 656////////////////////////////////////////////////////////////////////////////////; 657/// Clean data of the volume.; 658 ; 659void TGeoVolume::CleanAll(); 660{; 661 ClearNodes();; 662 ClearShape();; 663}; 664 ; 665///////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:28121,Test,Tests,28121,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['Test'],['Tests']
Testability,"/ Fill the matrix `xarr` and `yarr` for Contour Plot.; 6256 ; 6257Int_t THistPainter::PaintContourLine(Double_t elev1, Int_t icont1, Double_t x1, Double_t y1,; 6258 Double_t elev2, Int_t icont2, Double_t x2, Double_t y2,; 6259 Double_t *xarr, Double_t *yarr, Int_t *itarr, Double_t *levels); 6260{; 6261 ; 6262 Bool_t vert;; 6263 Double_t tlen, tdif, elev, diff, pdif, xlen;; 6264 Int_t n, i, icount;; 6265 ; 6266 if (x1 == x2) {; 6267 vert = kTRUE;; 6268 tlen = y2 - y1;; 6269 } else {; 6270 vert = kFALSE;; 6271 tlen = x2 - x1;; 6272 }; 6273 ; 6274 n = icont1 +1;; 6275 tdif = elev2 - elev1;; 6276 i = 0;; 6277 icount = 0;; 6278 while (n <= icont2 && i <= kMAXCONTOUR/2 -3) {; 6279 //elev = fH->GetContourLevel(n);; 6280 elev = levels[n];; 6281 diff = elev - elev1;; 6282 pdif = diff/tdif;; 6283 xlen = tlen*pdif;; 6284 if (vert) {; 6285 if (Hoption.Logx); 6286 xarr[i] = TMath::Log10(x1);; 6287 else; 6288 xarr[i] = x1;; 6289 if (Hoption.Logy); 6290 yarr[i] = TMath::Log10(y1 + xlen);; 6291 else; 6292 yarr[i] = y1 + xlen;; 6293 } else {; 6294 if (Hoption.Logx); 6295 xarr[i] = TMath::Log10(x1 + xlen);; 6296 else; 6297 xarr[i] = x1 + xlen;; 6298 if (Hoption.Logy); 6299 yarr[i] = TMath::Log10(y1);; 6300 else; 6301 yarr[i] = y1;; 6302 }; 6303 itarr[i] = n;; 6304 icount++;; 6305 i +=2;; 6306 n++;; 6307 }; 6308 return icount;; 6309}; 6310 ; 6311////////////////////////////////////////////////////////////////////////////////; 6312/// [Draw 1D histograms error bars.](\ref HP09); 6313 ; 6314void THistPainter::PaintErrors(Option_t *); 6315{; 6316 ; 6317 // On iOS, we do not highlight histogram, if it's not picked at the moment; 6318 // (but part of histogram (axis or pavestat) was picked, that's why this code; 6319 // is called at all. This conditional statement never executes on non-iOS platform.; 6320 if (gPad->PadInHighlightMode() && gPad->GetSelected() != fH) return;; 6321 ; 6322 const Int_t kBASEMARKER=8;; 6323 Double_t xp, yp, ex1, ex2, ey1, ey2;; 6324 Double_t delta;; 6325 Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:231326,Log,Logy,231326,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability,"/ Read leaves into i/o buffers for this branch.; 4533/// For split-class branch, base class branch, data member branch, or top-level branch.; 4534/// which do not have a branch count and are not a counter.; 4535 ; 4536void TBranchElement::ReadLeavesMember(TBuffer& b); 4537{; 4538 R__ASSERT(fBranchCount==nullptr);; 4539 R__ASSERT(fStreamerType != TVirtualStreamerInfo::kCounter);; 4540 ; 4541 ValidateAddress();; 4542 if (fObject == nullptr); 4543 {; 4544 // We have nowhere to copy the data (probably because the data member was; 4545 // 'dropped' from the current schema) so let's no copy it in a random place.; 4546 return;; 4547 }; 4548 ; 4549 R__PushCache onfileObject(((TBufferFile&)b),fOnfileObject,1);; 4550 // If not a TClonesArray or STL container master branch; 4551 // or sub-branch and branch inherits from tobject,; 4552 // then register with the buffer so that pointers are; 4553 // handled properly.; 4554 if (TestBit(kBranchObject)) {; 4555 b.MapObject((TObject*) fObject);; 4556 } else if (TestBit(kBranchAny)) {; 4557 b.MapObject(fObject, fBranchClass);; 4558 }; 4559 ; 4560 fNdata = 1;; 4561 TStreamerInfo *info = GetInfoImp();; 4562 if (!info) {; 4563 return;; 4564 }; 4565 // Since info is not null, fReadActionSequence is not null either.; 4566 b.ApplySequence(*fReadActionSequence, fObject);; 4567}; 4568 ; 4569////////////////////////////////////////////////////////////////////////////////; 4570/// Read leaves into i/o buffers for this branch.; 4571/// For split-class branch, base class branch, data member branch, or top-level branch.; 4572/// which do have a branch count and are not a counter.; 4573 ; 4574void TBranchElement::ReadLeavesMemberBranchCount(TBuffer& b); 4575{; 4576 R__ASSERT(fStreamerType != TVirtualStreamerInfo::kCounter);; 4577 ; 4578 ValidateAddress();; 4579 if (fObject == nullptr); 4580 {; 4581 // We have nowhere to copy the data (probably because the data member was; 4582 // 'dropped' from the current schema) so let's no copy it in a random pla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:168760,Test,TestBit,168760,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/ TObject copy ctor.; 271 ; 272inline TObject::TObject(const TObject &obj); 273{; 274 fBits = obj.fBits;; 275 ; 276 // This will be reported by valgrind as uninitialized memory reads for; 277 // object created on the stack, use $ROOTSYS/etc/valgrind-root.supp; 278 TStorage::UpdateIsOnHeap(fUniqueID, fBits);; 279 ; 280 fBits &= ~kIsReferenced;; 281 fBits &= ~kCanDelete;; 282 ; 283 // Set only after used in above call; 284 fUniqueID = obj.fUniqueID; // when really unique don't copy; 285 ; 286#ifdef R__WIN32; 287 if (R__unlikely(GetObjectStat())) TObject::AddToTObjectTable(this);; 288#else; 289 if (R__unlikely(fgObjectStat)) TObject::AddToTObjectTable(this);; 290#endif; 291}; 292 ; 293////////////////////////////////////////////////////////////////////////////////; 294/// TObject assignment operator.; 295 ; 296inline TObject &TObject::operator=(const TObject &rhs); 297{; 298 if (R__likely(this != &rhs)) {; 299 fUniqueID = rhs.fUniqueID; // when really unique don't copy; 300 if (IsOnHeap()) { // test uses fBits so don't move next line; 301 fBits = rhs.fBits;; 302 fBits |= kIsOnHeap;; 303 } else {; 304 fBits = rhs.fBits;; 305 fBits &= ~kIsOnHeap;; 306 }; 307 fBits &= ~kIsReferenced;; 308 fBits &= ~kCanDelete;; 309 }; 310 return *this;; 311}; 312 ; 313 ; 314////////////////////////////////////////////////////////////////////////////////; 315/// @brief Check and record whether this class has a consistent; 316/// Hash/RecursiveRemove setup (*) and then return the regular Hash value for; 317/// this object. The intent is for this routine to be called instead of directly; 318/// calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; 319///; 320/// (*) The setup is consistent when all classes in the class hierarchy that overload; 321/// TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 322/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 323 ; 324inline ULong_t TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:12567,test,test,12567,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['test'],['test']
Testability,/ \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; 5558/// \f]; 5559///; 5560/// \f[; 5561/// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; 5562/// \f]; 5563/// \f[; 5564/// fPixeltoX = \frac{xrange}{pxrange}; 5565/// \f]; 5566///; 5567/// ### Conversion from py to y; 5568///; 5569/// \f[; 5570/// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; 5571/// \f]; 5572///; 5573/// \f[; 5574/// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; 5575/// \f]; 5576/// \f[; 5577/// fPixeltoY = \frac{yrange}{pyrange}; 5578/// \f]; 5579///; 5580/// ### Computation of the coefficients in case of LOG scales; 5581///; 5582/// #### Conversion from pixel coordinates to world coordinates; 5583///; 5584/// \f[; 5585/// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; 5586/// \f]; 5587///; 5588/// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; 5589/// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; 5590/// Let:; 5591/// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; 5592///; 5593/// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; 5594/// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; 5595/// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; 5596/// \f[ fPixeltoX = alfa \f]; 5597///; 5598/// \f[; 5599/// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; 5600/// \f]; 5601/// Let:; 5602/// \f[ beta = Log(\frac{ymax}{ymin}) \f]; 5603/// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; 5604/// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; 5605/// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; 5606/// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; 5607///,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:180540,Log,Log,180540,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Log'],['Log']
Testability,"/ and displaying the list of commands in this macro; //; TPaveText * fitlabel = new TPaveText(0.6,0.4,0.9,0.75,""NDC"");; fitlabel->SetTextAlign(12);; fitlabel->SetFillColor(42);; fitlabel->ReadFile(Form(""%sfit1_C.txt"",dir.Data()));; fitlabel->Draw();; c1->Update();; gBenchmark->Show(""fit1"");; }; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TCanvas.h; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1.h; TFile.h; TFrame.h; TH1.h; TInterpreter.h; TPaveText.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TString.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TSystem.h; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TDirectory::GetObjectvoid GetObject(const char *namecycle, T *&ptr)Get an object with proper type checking.Definition TDirectory.h:212; TF11-Dim function classDefinition TF1.h:233; TF1::Printvoid Print(Option_t *option="""") const overrideThis method must be overridden when a class wants to print itself.Definition TF1.cxx:2897; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::lsvoid ls(Option_t *option="""") const overrideList file contents.Definition TFile.cxx:1457; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit1_8C.html:3721,Benchmark,Benchmark,3721,doc/master/fit1_8C.html,https://root.cern,https://root.cern/doc/master/fit1_8C.html,1,['Benchmark'],['Benchmark']
Testability,"/ may be overwritten by derived classes; 144 ; 145 // ---------- main training and testing methods ------------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs classifier testing; 169 virtual void TestClassification();; 170 virtual Double_t GetKSTrainingVsTest(Char_t SorB, TString opt=""X"");; 171 ; 172 // performs multiclass classifier testing; 173 virtual void TestMulticlass();; 174 ; 175 // performs regression testing; 176 virtual void TestRegression( Double_t& bias, Double_t& biasT,; 177 Double_t& dev, Double_t& devT,; 178 Double_t& rms, Double_t& rmsT,; 179 Double_t& mInf, Double_t& mInfT, // mutual information; 180 Double_t& corr,; 181 Types::ETreeType type );; 182 ; 183 // options treatment; 184 virtual void Init() = 0;; 185 virtual void DeclareOptions() = 0;; 186 virtual void ProcessOptions() = 0;; 187 virtual void DeclareCompatibilityOptions(); // declaration of past options; 188 ; 189 // reset the Method --> As if it was not yet trained, just instantiated; 190 // virtual void Reset() = 0;; 191 //for the moment, I provide a dummy (that would not work",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:5716,test,testTime,5716,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['test'],['testTime']
Testability,"// - the variable names MUST corresponds in name and type to those given in the weight file(s) used; Float_t var1, var2, var3, var4, eta;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );; ; reader->AddSpectator( ""eta"", &eta );; ; // Book the MVA methods; ; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; if (it->second) {; TString methodName = it->first + "" method"";; TString weightfile = ""dataset/weights/TMVAClassificationCategory_"" + TString(it->first) + "".weights.xml"";; reader->BookMVA( methodName, weightfile );; }; }; ; // Book output histograms; UInt_t nbin = 100;; std::map<std::string,TH1*> hist;; hist[""LikelihoodCat""] = new TH1F( ""MVA_LikelihoodCat"", ""MVA_LikelihoodCat"", nbin, -1, 0.9999 );; hist[""FisherCat""] = new TH1F( ""MVA_FisherCat"", ""MVA_FisherCat"", nbin, -4, 4 );; ; // Prepare input tree (this must be replaced by your data source); // in this example, there is a toy tree with signal and one with background events; // we'll later on use only the ""signal"" events for the test in this example.; //; TString fname = gSystem->GetDirName(__FILE__) + ""/data/"";; // if directory data not found try using tutorials dir; if (gSystem->AccessPathName( fname + ""toy_sigbkg_categ_offset.root"" )) {; fname = gROOT->GetTutorialDir() + ""/tmva/data/"";; }; if (UseOffsetMethod) fname += ""toy_sigbkg_categ_offset.root"";; else fname += ""toy_sigbkg_categ_varoff.root"";; std::cout << ""--- TMVAClassificationApp : Accessing "" << fname << ""!"" << std::endl;; TFile *input = TFile::Open(fname);; if (!input) {; std::cout << ""ERROR: could not open data file: "" << fname << std::endl;; exit(1);; }; ; // Event loop; ; // Prepare the tree; // - here the variable names have to corresponds to your tree; // - you can use the same variables as above which is slightly faster,; // but of course you can use different ones and copy the values inside the event loop;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html:4480,test,test,4480,doc/master/TMVAClassificationCategoryApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html,1,['test'],['test']
Testability,"// Parsing + Validation; 1114 // --------------------; 1115 if (fNumValidationString.EndsWith(""%"")) {; 1116 // Relative spec. format 20%; 1117 TString intValStr = TString(fNumValidationString.Strip(TString::kTrailing, '%'));; 1118 ; 1119 if (intValStr.IsFloat()) {; 1120 Double_t valSizeAsDouble = fNumValidationString.Atof() / 100.0;; 1121 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 1122 } else {; 1123 Log() << kFATAL << ""Cannot parse number \"""" << fNumValidationString; 1124 << ""\"". Expected string like \""20%\"" or \""20.0%\""."" << Endl;; 1125 }; 1126 } else if (fNumValidationString.IsFloat()) {; 1127 Double_t valSizeAsDouble = fNumValidationString.Atof();; 1128 ; 1129 if (valSizeAsDouble < 1.0) {; 1130 // Relative spec. format 0.2; 1131 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 1132 } else {; 1133 // Absolute spec format 100 or 100.0; 1134 nValidationSamples = valSizeAsDouble;; 1135 }; 1136 } else {; 1137 Log() << kFATAL << ""Cannot parse number \"""" << fNumValidationString << ""\"". Expected string like \""0.2\"" or \""100\"".""; 1138 << Endl;; 1139 }; 1140 ; 1141 // Value validation; 1142 // ----------------; 1143 if (nValidationSamples < 0) {; 1144 Log() << kFATAL << ""Validation size \"""" << fNumValidationString << ""\"" is negative."" << Endl;; 1145 }; 1146 ; 1147 if (nValidationSamples == 0) {; 1148 Log() << kFATAL << ""Validation size \"""" << fNumValidationString << ""\"" is zero."" << Endl;; 1149 }; 1150 ; 1151 if (nValidationSamples >= (Int_t)trainingSetSize) {; 1152 Log() << kFATAL << ""Validation size \"""" << fNumValidationString; 1153 << ""\"" is larger than or equal in size to training set (size=\"""" << trainingSetSize << ""\"")."" << Endl;; 1154 }; 1155 ; 1156 return nValidationSamples;; 1157}; 1158 ; 1159 ; 1160////////////////////////////////////////////////////////////////////////////////; 1161/// Implementation of architecture specific train method; 1162///; 1163template <typename Architecture_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:43504,Log,Log,43504,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Log'],['Log']
Testability,"// Set the application name (from command line, argv[0]) and copy it in; 637/// gProgName. Copy the application pathname in gProgPath.; 638/// If name is 0 let the system set the actual executable name and path; 639/// (works on MacOS X and Linux).; 640 ; 641void TUnixSystem::SetProgname(const char *name); 642{; 643 if (gProgName); 644 delete [] gProgName;; 645 if (gProgPath); 646 delete [] gProgPath;; 647 ; 648 if (!name || !*name) {; 649 name = GetExePath();; 650 gProgName = StrDup(BaseName(name));; 651 gProgPath = StrDup(DirName(name));; 652 } else {; 653 gProgName = StrDup(BaseName(name));; 654 char *w = Which(Getenv(""PATH""), gProgName);; 655 gProgPath = StrDup(DirName(w));; 656 delete [] w;; 657 }; 658}; 659 ; 660////////////////////////////////////////////////////////////////////////////////; 661/// Set DISPLAY environment variable based on utmp entry. Only for UNIX.; 662 ; 663void TUnixSystem::SetDisplay(); 664{; 665 if (!Getenv(""DISPLAY"")) {; 666 char *tty = ::ttyname(0); // device user is logged in on; 667 if (tty) {; 668 tty += 5; // remove ""/dev/""; 669 ; 670 TUtmpContent utmp;; 671 utmp.ReadUtmpFile();; 672 ; 673 STRUCT_UTMP *utmp_entry = utmp.SearchUtmpEntry(tty);; 674 if (utmp_entry) {; 675 if (utmp_entry->ut_host[0]) {; 676 TString disp;; 677 for (unsigned n = 0; (n < sizeof(utmp_entry->ut_host)) && utmp_entry->ut_host[n]; n++); 678 disp.Append(utmp_entry->ut_host[n]);; 679 if (disp.First(':') == kNPOS); 680 disp.Append("":0.0"");; 681 Setenv(""DISPLAY"", disp.Data());; 682 Warning(""SetDisplay"", ""DISPLAY not set, setting it to %s"", disp.Data());; 683 }; 684#ifndef UTMP_NO_ADDR; 685 else if (utmp_entry->ut_addr) {; 686 ; 687 struct sockaddr_in addr;; 688 addr.sin_family = AF_INET;; 689 addr.sin_port = 0;; 690 memcpy(&addr.sin_addr, &utmp_entry->ut_addr, sizeof(addr.sin_addr));; 691 memset(&addr.sin_zero[0], 0, sizeof(addr.sin_zero));; 692 struct sockaddr *sa = (struct sockaddr *) &addr; // input; 693 ; 694 char hbuf[NI_MAXHOST + 4];; 695 if (getnameinfo(sa,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:19825,log,logged,19825,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['log'],['logged']
Testability,"// The first library in the list is the one containing the class, the; 7090/// others are the libraries the first one depends on. Returns 0; 7091/// in case the library is not found.; 7092/// \param cls the name of the class; 7093/// \param skipCore if true (default), remove ""Core"" from the returned list; 7094 ; 7095const char* TCling::GetClassSharedLibs(const char* cls, bool skipCore); 7096{; 7097 if (fCxxModulesEnabled) {; 7098 // Lock the interpreter mutex before interacting with cling.; 7099 // TODO: Can we move this further deep? In principle the lock should be in; 7100 // GetClassSharedLibsForModule, but it might be needed also for; 7101 // getLookupHelper?; 7102 R__LOCKGUARD(gInterpreterMutex);; 7103 llvm::StringRef className = cls;; 7104 // If we get a class name containing lambda, we cannot parse it and we; 7105 // can exit early.; 7106 // FIXME: This works around a bug when we are instantiating a template; 7107 // make_unique and the substitution fails. Seen in most of the dataframe; 7108 // tests.; 7109 if (className.contains(""(lambda)"")); 7110 return nullptr;; 7111 // Limit the recursion which can be induced by GetClassSharedLibsForModule.; 7112 SuspendAutoLoadingRAII AutoLoadingDisabled(this);; 7113 cling::LookupHelper &LH = fInterpreter->getLookupHelper();; 7114 std::string libs = GetClassSharedLibsForModule(cls, LH, skipCore);; 7115 if (!libs.empty()) {; 7116 fAutoLoadLibStorage.push_back(libs);; 7117 return fAutoLoadLibStorage.back().c_str();; 7118 }; 7119 }; 7120 ; 7121 if (!cls || !*cls) {; 7122 return nullptr;; 7123 }; 7124 // lookup class to find list of libraries; 7125 if (fMapfile) {; 7126 TEnvRec* libs_record = nullptr;; 7127 libs_record = fMapfile->Lookup(cls);; 7128 if (libs_record) {; 7129 const char* libs = libs_record->GetValue();; 7130 return (*libs) ? libs : nullptr;; 7131 }; 7132 else {; 7133 // Try the old format...; 7134 TString c = TString(""Library."") + cls;; 7135 // convert ""::"" to ""@@"", we used ""@@"" because TEnv; 7136 // considers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:277962,test,tests,277962,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['test'],['tests']
Testability,"// Use THnIter instead.; 895 ; 896ROOT::Internal::THnBaseBinIter* THnSparse::CreateIter(Bool_t respectAxisRange) const; 897{; 898 return new THnSparseBinIter(respectAxisRange, this);; 899}; 900 ; 901////////////////////////////////////////////////////////////////////////////////; 902/// Set content of bin with index ""bin"" to ""v""; 903 ; 904void THnSparse::SetBinContent(Long64_t bin, Double_t v); 905{; 906 THnSparseArrayChunk* chunk = GetChunk(bin / fChunkSize);; 907 chunk->fContent->SetAt(v, bin % fChunkSize);; 908 ++fEntries;; 909}; 910 ; 911////////////////////////////////////////////////////////////////////////////////; 912/// Set error of bin with index ""bin"" to ""e"", enable errors if needed; 913 ; 914void THnSparse::SetBinError2(Long64_t bin, Double_t e2); 915{; 916 THnSparseArrayChunk* chunk = GetChunk(bin / fChunkSize);; 917 if (!chunk->fSumw2 ) {; 918 // if fSumw2 is zero GetCalculateErrors should return false; 919 if (GetCalculateErrors()) {; 920 Error(""SetBinError"", ""GetCalculateErrors() logic error!"");; 921 }; 922 Sumw2(); // enable error calculation; 923 }; 924 ; 925 chunk->fSumw2->SetAt(e2, bin % fChunkSize);; 926}; 927 ; 928////////////////////////////////////////////////////////////////////////////////; 929/// Add ""e"" to error of bin with index ""bin"", enable errors if needed; 930 ; 931void THnSparse::AddBinError2(Long64_t bin, Double_t e2); 932{; 933 THnSparseArrayChunk* chunk = GetChunk(bin / fChunkSize);; 934 if (!chunk->fSumw2 ) {; 935 // if fSumw2 is zero GetCalculateErrors should return false; 936 if (GetCalculateErrors()) {; 937 Error(""SetBinError"", ""GetCalculateErrors() logic error!"");; 938 }; 939 Sumw2(); // enable error calculation; 940 }; 941 ; 942 (*chunk->fSumw2)[bin % fChunkSize] += e2;; 943}; 944 ; 945////////////////////////////////////////////////////////////////////////////////; 946/// Enable calculation of errors; 947 ; 948void THnSparse::Sumw2(); 949{; 950 if (GetCalculateErrors()) return;; 951 ; 952 fTsumw2 = 0.;; 953 TIter iChunk(&fB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:34469,log,logic,34469,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,2,['log'],['logic']
Testability,"// When using SortBasketsByBranch all the baskets of each individual; 3115/// branches are stored contiguously. This tends to optimize reading; 3116/// speed when reading a small number (1->5) of branches, since all; 3117/// their baskets will be clustered together instead of being spread; 3118/// across the file. However it might decrease the performance when; 3119/// reading more branches (or the full entry).; 3120///; 3121/// When using SortBasketsByEntry the baskets with the lowest starting; 3122/// entry are written first. (i.e. the baskets are sorted by the; 3123/// index/number of the first entry they contain). This means that on; 3124/// the file the baskets will be in the order in which they will be; 3125/// needed when reading the whole tree sequentially.; 3126///; 3127/// For examples of CloneTree, see tutorials:; 3128///; 3129/// - copytree.C:; 3130/// A macro to copy a subset of a TTree to a new TTree.; 3131/// The input file has been generated by the program in; 3132/// $ROOTSYS/test/Event with: Event 1000 1 1 1; 3133///; 3134/// - copytree2.C:; 3135/// A macro to copy a subset of a TTree to a new TTree.; 3136/// One branch of the new Tree is written to a separate file.; 3137/// The input file has been generated by the program in; 3138/// $ROOTSYS/test/Event with: Event 1000 1 1 1; 3139 ; 3140TTree* TTree::CloneTree(Long64_t nentries /* = -1 */, Option_t* option /* = """" */); 3141{; 3142 // Options; 3143 bool fastClone = false;; 3144 ; 3145 TString opt = option;; 3146 opt.ToLower();; 3147 if (opt.Contains(""fast"")) {; 3148 fastClone = true;; 3149 }; 3150 ; 3151 // If we are a chain, switch to the first tree.; 3152 if ((fEntries > 0) && (LoadTree(0) < 0)) {; 3153 // FIXME: We need an error message here.; 3154 return nullptr;; 3155 }; 3156 ; 3157 // Note: For a tree we get the this pointer, for; 3158 // a chain we get the chain's current tree.; 3159 TTree* thistree = GetTree();; 3160 ; 3161 // We will use this to override the IO features on the cloned bran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:125577,test,test,125577,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['test'],['test']
Testability,// \f[; 5544/// fYtoPixel = \frac{pyrange}{yrange}; 5545/// \f]; 5546/// where:; 5547/// \f[; 5548/// pylow = fAbsYlowNDC \times fCh; 5549/// \f]; 5550/// \f[; 5551/// pyrange = fAbsHNDC \times fCh; 5552/// \f]; 5553///; 5554/// ### Conversion from px to x; 5555///; 5556/// \f[; 5557/// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; 5558/// \f]; 5559///; 5560/// \f[; 5561/// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; 5562/// \f]; 5563/// \f[; 5564/// fPixeltoX = \frac{xrange}{pxrange}; 5565/// \f]; 5566///; 5567/// ### Conversion from py to y; 5568///; 5569/// \f[; 5570/// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; 5571/// \f]; 5572///; 5573/// \f[; 5574/// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; 5575/// \f]; 5576/// \f[; 5577/// fPixeltoY = \frac{yrange}{pyrange}; 5578/// \f]; 5579///; 5580/// ### Computation of the coefficients in case of LOG scales; 5581///; 5582/// #### Conversion from pixel coordinates to world coordinates; 5583///; 5584/// \f[; 5585/// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; 5586/// \f]; 5587///; 5588/// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; 5589/// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; 5590/// Let:; 5591/// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; 5592///; 5593/// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; 5594/// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; 5595/// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; 5596/// \f[ fPixeltoX = alfa \f]; 5597///; 5598/// \f[; 5599/// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; 5600/// \f]; 5601/// Let:; 5602/// \f[ beta = Log(\frac{ymax}{ymin}) \f]; 5603/// \f[ Log(\frac{y}{ymin}) ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:180254,LOG,LOG,180254,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['LOG'],['LOG']
Testability,// \f]; 5550/// \f[; 5551/// pyrange = fAbsHNDC \times fCh; 5552/// \f]; 5553///; 5554/// ### Conversion from px to x; 5555///; 5556/// \f[; 5557/// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; 5558/// \f]; 5559///; 5560/// \f[; 5561/// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; 5562/// \f]; 5563/// \f[; 5564/// fPixeltoX = \frac{xrange}{pxrange}; 5565/// \f]; 5566///; 5567/// ### Conversion from py to y; 5568///; 5569/// \f[; 5570/// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; 5571/// \f]; 5572///; 5573/// \f[; 5574/// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; 5575/// \f]; 5576/// \f[; 5577/// fPixeltoY = \frac{yrange}{pyrange}; 5578/// \f]; 5579///; 5580/// ### Computation of the coefficients in case of LOG scales; 5581///; 5582/// #### Conversion from pixel coordinates to world coordinates; 5583///; 5584/// \f[; 5585/// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; 5586/// \f]; 5587///; 5588/// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; 5589/// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; 5590/// Let:; 5591/// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; 5592///; 5593/// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; 5594/// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; 5595/// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; 5596/// \f[ fPixeltoX = alfa \f]; 5597///; 5598/// \f[; 5599/// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; 5600/// \f]; 5601/// Let:; 5602/// \f[ beta = Log(\frac{ymax}{ymin}) \f]; 5603/// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; 5604/// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; 5605/// \f[ y = ymin \,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:180393,Log,Log,180393,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Log'],['Log']
Testability,"// \param[in] data The RooAbsData to retrieve the set of observables and; 783/// number of expected events.; 784/// \param[in] weightSquared If set to `true`, the extended term will be scaled by; 785/// the ratio of squared event weights over event weights:; 786/// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; 787/// Intended to be used by fits with the `SumW2Error()` option that; 788/// can be passed to RooAbsPdf::fitTo(); 789/// (see the documentation of said function to learn more about the; 790/// interpretation of fits with squared weights).; 791/// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.; 792 ; 793double RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset) const {; 794 double sumW = data.sumEntries();; 795 double sumW2 = 0.0;; 796 if (weightSquared) {; 797 sumW2 = data.sumEntriesW2();; 798 }; 799 return extendedTerm(sumW, data.get(), sumW2, doOffset);; 800}; 801 ; 802 ; 803/** @fn RooAbsPdf::createNLL(); 804 *; 805 * @brief Construct representation of -log(L) of PDF with given dataset.; 806 *; 807 * If dataset is unbinned, an unbinned likelihood is constructed.; 808 * If the dataset is binned, a binned likelihood is constructed.; 809 *; 810 * @param data Reference to a RooAbsData object representing the dataset.; 811 * @param cmdArgs Variadic template arguments representing optional command arguments.; 812 * You can pass either an arbitrary number of RooCmdArg instances; 813 * or a single RooLinkedList that points to the RooCmdArg objects.; 814 * @return An owning pointer to the created RooAbsReal NLL object.; 815 *; 816 * @tparam CmdArgs_t Template types for optional command arguments.; 817 * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; 818 *; 819 * \note This front-end function should not be re-implemented in derived PDF types.; 820 * If you mean to customize the NLL creation routine,; 821 * you need to override the virtual RooAbsPdf::createNLLImpl() metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:32164,log,log,32164,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['log']
Testability,"// by classifiers who may require special data; 962 // treatment (also print warning); 963 if (weight < 0) classEventCounts.nNegWeights++;; 964 ; 965 // now read the event-values (variables and regression targets); 966 ; 967 if (contains_NaN_or_inf) {; 968 Log() << kWARNING << Form(""Dataset[%s] : "",dsi.GetName())<< ""NaN or +-inf in Event "" << evtIdx << Endl;; 969 if (sizeOfArrays>1) Log() << kWARNING << Form(""Dataset[%s] : "",dsi.GetName())<< "" rejected"" << Endl;; 970 continue;; 971 }; 972 ; 973 // Count the events after rejection due to cut or NaN value; 974 // (weighted and unweighted); 975 classEventCounts.nEvAfterCut++;; 976 classEventCounts.nWeEvAfterCut += weight;; 977 ; 978 // event accepted, fill temporary ntuple; 979 event_v.push_back(new Event(vars, tgts , vis, cl , weight));; 980 }; 981 }; 982 currentInfo.GetTree()->ResetBranchAddresses();; 983 }; 984 }; 985 ; 986 if (!nanInfWarnings.empty()) {; 987 Log() << kWARNING << ""Found events with NaN and/or +-inf values"" << Endl;; 988 for (const auto &warning : nanInfWarnings) {; 989 auto &log = Log() << kWARNING << warning.first;; 990 if (warning.second > 1) log << "" ("" << warning.second << "" times)"";; 991 log << Endl;; 992 }; 993 Log() << kWARNING << ""These NaN and/or +-infs were all removed by the specified cut, continuing."" << Endl;; 994 Log() << Endl;; 995 }; 996 ; 997 if (!nanInfErrors.empty()) {; 998 Log() << kWARNING << ""Found events with NaN and/or +-inf values (not removed by cut)"" << Endl;; 999 for (const auto &error : nanInfErrors) {; 1000 auto &log = Log() << kWARNING << error.first;; 1001 if (error.second > 1) log << "" ("" << error.second << "" times)"";; 1002 log << Endl;; 1003 }; 1004 Log() << kFATAL << ""How am I supposed to train a NaN or +-inf?!"" << Endl;; 1005 }; 1006 ; 1007 // for output format, get the maximum class name length; 1008 Int_t maxL = dsi.GetClassNameMaxLength();; 1009 ; 1010 Log() << kHEADER << Form(""[%s] : "",dsi.GetName()) << ""Number of events in input trees"" << Endl;; 1011 Log() <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:41901,Log,Log,41901,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,3,"['Log', 'log']","['Log', 'log']"
Testability,"// performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs classifier testing; 169 virtual void TestClassification();; 170 virtual Double_t GetKSTrainingVsTest(Char_t SorB, TString opt=""X"");; 171 ; 172 // performs multiclass classifier testing; 173 virtual void TestMulticlass();; 174 ; 175 // performs regression testing; 176 virtual void TestRegression( Double_t& bias, Double_t& biasT,; 177 Double_t& dev, Double_t& devT,; 178 Double_t& rms, Double_t& rmsT,; 179 Double_t& mInf, Double_t& mInfT, // mutual information; 180 Double_t& corr,; 181 Types::ETreeType type );; 182 ; 183 // options treatment; 184 virtual void Init() = 0;; 185 virtual void DeclareOptions() = 0;; 186 virtual void ProcessOptions() = 0;; 187 virtual void DeclareCompatibilityOptions(); // declaration of past options; 188 ; 189 // reset the Method --> As if it was not yet trained, just instantiated; 190 // virtual void Reset() = 0;; 191 //for the moment, I provide a dummy (that would not work) default, just to make; 192 // compilation/running w/o parameter optimisation still possible; 193 virtual void Reset(){return;}; 194 ; 195 // classifier response:; 196 // some methods may return a per-event error estimate; 197 // error calculation is skipped if err==0; 198 virtual Double_t GetMva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:6011,Test,TestMulticlass,6011,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['Test'],['TestMulticlass']
Testability,"// ~~~; 1241///; 1242/// If no axis-subranges are specified (via TAxis::SetRange), the array stats; 1243/// is simply a copy of the statistics quantities computed at filling time.; 1244/// If sub-ranges are specified, the function recomputes these quantities; 1245/// from the bin contents in the current axis ranges.; 1246///; 1247/// Note that the mean value/StdDev is computed using the bins in the currently; 1248/// defined ranges (see TAxis::SetRange). By default the ranges include; 1249/// all bins from 1 to nbins included, excluding underflows and overflows.; 1250/// To force the underflows and overflows in the computation, one must; 1251/// call the static function TH1::StatOverflows(kTRUE) before filling; 1252/// the histogram.; 1253 ; 1254void TH2::GetStats(Double_t *stats) const; 1255{; 1256 if (fBuffer) ((TH2*)this)->BufferEmpty();; 1257 ; 1258 if ((fTsumw == 0 && fEntries > 0) || fXaxis.TestBit(TAxis::kAxisRange) || fYaxis.TestBit(TAxis::kAxisRange)) {; 1259 std::fill(stats, stats + 7, 0);; 1260 ; 1261 Int_t firstBinX = fXaxis.GetFirst();; 1262 Int_t lastBinX = fXaxis.GetLast();; 1263 Int_t firstBinY = fYaxis.GetFirst();; 1264 Int_t lastBinY = fYaxis.GetLast();; 1265 // include underflow/overflow if TH1::StatOverflows(kTRUE) in case no range is set on the axis; 1266 if (GetStatOverflowsBehaviour()) {; 1267 if ( !fXaxis.TestBit(TAxis::kAxisRange) ) {; 1268 if (firstBinX == 1) firstBinX = 0;; 1269 if (lastBinX == fXaxis.GetNbins() ) lastBinX += 1;; 1270 }; 1271 if ( !fYaxis.TestBit(TAxis::kAxisRange) ) {; 1272 if (firstBinY == 1) firstBinY = 0;; 1273 if (lastBinY == fYaxis.GetNbins() ) lastBinY += 1;; 1274 }; 1275 }; 1276 // check for labels axis. In that case corresponding statistics do not make sense and it is set to zero; 1277 Bool_t labelXaxis = ((const_cast<TAxis&>(fXaxis)).GetLabels() && fXaxis.CanExtend() );; 1278 Bool_t labelYaxis = ((const_cast<TAxis&>(fYaxis)).GetLabels() && fYaxis.CanExtend() );; 1279 ; 1280 for (Int_t biny = firstBinY; biny <= la",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:50833,Test,TestBit,50833,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/// IMPORTANT NOTE3: You should be careful about the statistics of the; 947/// returned histogram, whose statistics may be binned or unbinned,; 948/// depending on whether c1 is negative, whether TAxis::kAxisRange is true,; 949/// and whether TH1::ResetStats has been called on either this or h1.; 950/// See TH1::GetStats.; 951///; 952/// The function return kFALSE if the Add operation failed; 953 ; 954Bool_t TH1::Add(const TH1 *h1, Double_t c1); 955{; 956 if (!h1) {; 957 Error(""Add"",""Attempt to add a non-existing histogram"");; 958 return kFALSE;; 959 }; 960 ; 961 // delete buffer if it is there since it will become invalid; 962 if (fBuffer) BufferEmpty(1);; 963 ; 964 bool useMerge = false;; 965 const bool considerMerge = (c1 == 1. && !this->TestBit(kIsAverage) && !h1->TestBit(kIsAverage) );; 966 const auto inconsistency = LoggedInconsistency(""Add"", this, h1, considerMerge);; 967 // If there is a bad inconsistency and we can't even consider merging, just give up; 968 if(inconsistency >= kDifferentNumberOfBins && !considerMerge) {; 969 return false;; 970 }; 971 // If there is an inconsistency, we try to use merging; 972 if(inconsistency > kFullyConsistent) {; 973 useMerge = considerMerge;; 974 }; 975 ; 976 if (useMerge) {; 977 TList l;; 978 l.Add(const_cast<TH1*>(h1));; 979 auto iret = Merge(&l);; 980 return (iret >= 0);; 981 }; 982 ; 983 // Create Sumw2 if h1 has Sumw2 set; 984 if (fSumw2.fN == 0 && h1->GetSumw2N() != 0) Sumw2();; 985 ; 986 // - Add statistics; 987 Double_t entries = TMath::Abs( GetEntries() + c1 * h1->GetEntries() );; 988 ; 989 // statistics can be preserved only in case of positive coefficients; 990 // otherwise with negative c1 (histogram subtraction) one risks to get negative variances; 991 Bool_t resetStats = (c1 < 0);; 992 Double_t s1[kNstat] = {0};; 993 Double_t s2[kNstat] = {0};; 994 if (!resetStats) {; 995 // need to initialize to zero s1 and s2 since; 996 // GetStats fills only used elements depending on dimension and type; 997 GetStats(s1);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:38779,Test,TestBit,38779,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,3,"['Log', 'Test']","['LoggedInconsistency', 'TestBit']"
Testability,"/// and also expectation value of weight w1i equal to W1pi and expectation value; 1913/// of weight w2i equal to W2pi. Weights in both the histograms are random; 1914/// variables with distributions which can be approximated by a normal; 1915/// probability distribution \f$ N(W_{1}p_{i},\sigma_{1i}^{2}) \f$ for the first histogram; 1916/// and by a distribution \f$ N(W_{2}p_{i},\sigma_{2i}^{2}) \f$ for the second.; 1917/// Here \f$ \sigma_{1i}^{2} \f$ and \f$ \sigma_{2i}^{2} \f$ are the variances; 1918/// of w1i and w2i with estimators \f$ s_{1i}^{2} \f$ and \f$ s_{2i}^{2} \f$ respectively.; 1919/// If the hypothesis of identity is valid, then the maximum likelihood and; 1920/// Least Square Method estimator of pi,i=1,...,r, is; 1921///\f[; 1922/// \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; 1923///\f]; 1924/// We may then use the test statistic; 1925///\f[; 1926/// X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; 1927///\f]; 1928/// and it has approximately a \f$ \chi^{2}_{(r-1)} \f$ distribution [2].; 1929/// The normalized or studentised residuals [6]; 1930///\f[; 1931/// r_{i} = \frac{w_{1i}-W_{1}\hat{p}_{i}}{s_{1i}\sqrt{1 - \frac{1}{(1+W_{2}^{2}s_{1i}^{2}/W_{1}^{2}s_{2i}^{2})}}}; 1932///\f]; 1933/// have approximately a normal distribution with mean equal to 0 and standard; 1934/// deviation 1. A recommended minimal expected frequency is equal to 10 for; 1935/// the proposed test.; 1936///; 1937/// #### Numerical examples:; 1938///; 1939/// The method described herein is now illustrated with an example.; 1940/// We take a distribution; 1941///\f[; 1942/// \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); 1943///\f]; 1944/// defined on the interval [4,16]. Events distributed according to the formula; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:77414,test,test,77414,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"/// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; 703/// (the effective weight of the Poisson term),; 704/// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; 705/// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; 706/// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; 707/// Since here we compute the likelihood with the weight square, we need to multiply by the; 708/// square of the effective weight:; 709/// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; 710/// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; 711///; 712/// The extended term for the likelihood weighted by the square of the weight will be then:; 713///; 714/// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; 715///; 716/// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; 717///; 718/// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; 719///; 720/// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; 721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:28263,log,log,28263,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,4,['log'],['log']
Testability,"//////////////////////////////////////////////////////////////////////////////; 1813/// Figure out if left and right points to the same; 1814/// object in the file system.; 1815 ; 1816static bool R__MatchFilename(const char *left, const char *right); 1817{; 1818 if (left == right) return kTRUE;; 1819 ; 1820 if (left==nullptr || right==nullptr) return kFALSE;; 1821 ; 1822 if ( (strcmp(right,left)==0) ) {; 1823 return kTRUE;; 1824 }; 1825 ; 1826#ifdef G__WIN32; 1827 ; 1828 char leftname[_MAX_PATH];; 1829 char rightname[_MAX_PATH];; 1830 _fullpath( leftname, left, _MAX_PATH );; 1831 _fullpath( rightname, right, _MAX_PATH );; 1832 return ((stricmp(leftname, rightname)==0));; 1833#else; 1834 struct stat rightBuf;; 1835 struct stat leftBuf;; 1836 return ( ( 0 == stat( left, & leftBuf ) ); 1837 && ( 0 == stat( right, & rightBuf ) ); 1838 && ( leftBuf.st_dev == rightBuf.st_dev ) // Files on same device; 1839 && ( leftBuf.st_ino == rightBuf.st_ino ) // Files on same inode (but this is not unique on AFS so we need the next 2 test; 1840 && ( leftBuf.st_size == rightBuf.st_size ) // Files of same size; 1841 && ( leftBuf.st_mtime == rightBuf.st_mtime ) // Files modified at the same time; 1842 );; 1843#endif; 1844}; 1845 ; 1846 ; 1847////////////////////////////////////////////////////////////////////////////////; 1848/// Load a shared library. Returns 0 on successful loading, 1 in; 1849/// case lib was already loaded, -1 in case lib does not exist; 1850/// or in case of error and -2 in case of version mismatch.; 1851/// When entry is specified the loaded lib is; 1852/// searched for this entry point (return -1 when entry does not exist,; 1853/// 0 otherwise). When the system flag is kTRUE, the library is considered; 1854/// a permanent system library that should not be unloaded during the; 1855/// course of the session.; 1856 ; 1857int TSystem::Load(const char *module, const char *entry, Bool_t system); 1858{; 1859 // don't load libraries that have already been loaded; 1860 TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:59199,test,test,59199,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['test']
Testability,"//////////////////////////////////////////////////////////////////////////////; 2712/// Find zero of a continuous function.; 2713/// This function finds a real zero of the continuous real; 2714/// function Y(X) in a given interval (A,B). See accompanying; 2715/// notes for details of the argument list and calling sequence; 2716 ; 2717void TGraph::Zero(Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y; 2718 , Int_t maxiterations); 2719{; 2720 static Double_t a, b, ya, ytest, y1, x1, h;; 2721 static Int_t j1, it, j3, j2;; 2722 Double_t yb, x2;; 2723 yb = 0;; 2724 ; 2725 // Calculate Y(X) at X=AZ.; 2726 if (k <= 0) {; 2727 a = AZ;; 2728 b = BZ;; 2729 X = a;; 2730 j1 = 1;; 2731 it = 1;; 2732 k = j1;; 2733 return;; 2734 }; 2735 ; 2736 // Test whether Y(X) is sufficiently small.; 2737 ; 2738 if (TMath::Abs(Y) <= E2) {; 2739 k = 2;; 2740 return;; 2741 }; 2742 ; 2743 // Calculate Y(X) at X=BZ.; 2744 ; 2745 if (j1 == 1) {; 2746 ya = Y;; 2747 X = b;; 2748 j1 = 2;; 2749 return;; 2750 }; 2751 // Test whether the signs of Y(AZ) and Y(BZ) are different.; 2752 // if not, begin the binary subdivision.; 2753 ; 2754 if (j1 != 2) goto L100;; 2755 if (ya * Y < 0) goto L120;; 2756 x1 = a;; 2757 y1 = ya;; 2758 j1 = 3;; 2759 h = b - a;; 2760 j2 = 1;; 2761 x2 = a + 0.5 * h;; 2762 j3 = 1;; 2763 it++; //*-*- Check whether (maxiterations) function values have been calculated.; 2764 if (it >= maxiterations) k = j1;; 2765 else X = x2;; 2766 return;; 2767 ; 2768 // Test whether a bracket has been found .; 2769 // If not,continue the search; 2770 ; 2771L100:; 2772 if (j1 > 3) goto L170;; 2773 if (ya*Y >= 0) {; 2774 if (j3 >= j2) {; 2775 h = 0.5 * h;; 2776 j2 = 2 * j2;; 2777 a = x1;; 2778 ya = y1;; 2779 x2 = a + 0.5 * h;; 2780 j3 = 1;; 2781 } else {; 2782 a = X;; 2783 ya = Y;; 2784 x2 = X + h;; 2785 j3++;; 2786 }; 2787 it++;; 2788 if (it >= maxiterations) k = j1;; 2789 else X = x2;; 2790 return;; 2791 }; 2792 ; 2793 // The first bracket has been found.calculate the next X by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:97682,Test,Test,97682,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['Test'],['Test']
Testability,"//////////////////////////////////////////////////////////////////////////////; 4006/// Copy pixmap of this pad as background of the current pad.; 4007 ; 4008void TPad::CopyBackgroundPixmap(Int_t x, Int_t y); 4009{; 4010 int px, py;; 4011 XYtoAbsPixel(fX1, fY2, px, py);; 4012 if (GetPainter()) GetPainter()->CopyDrawable(GetPixmapID(), px-x, py-y);; 4013}; 4014 ; 4015////////////////////////////////////////////////////////////////////////////////; 4016 ; 4017void TPad::PaintFillArea(Int_t, Float_t *, Float_t *, Option_t *); 4018{; 4019 Warning(""TPad::PaintFillArea"", ""Float_t signature is obsolete. Use Double_t signature."");; 4020}; 4021 ; 4022////////////////////////////////////////////////////////////////////////////////; 4023/// Paint fill area in CurrentPad World coordinates.; 4024 ; 4025void TPad::PaintFillArea(Int_t nn, Double_t *xx, Double_t *yy, Option_t *); 4026{; 4027 if (nn <3) return;; 4028 Int_t n=0;; 4029 Double_t xmin,xmax,ymin,ymax;; 4030 if (TestBit(TGraph::kClipFrame)) {; 4031 xmin = fUxmin; ymin = fUymin; xmax = fUxmax; ymax = fUymax;; 4032 } else {; 4033 xmin = fX1; ymin = fY1; xmax = fX2; ymax = fY2;; 4034 }; 4035 ; 4036 Int_t nc = 2*nn+1;; 4037 std::vector<Double_t> x(nc, 0.);; 4038 std::vector<Double_t> y(nc, 0.);; 4039 ; 4040 n = ClipPolygon(nn, xx, yy, nc, &x.front(), &y.front(),xmin,ymin,xmax,ymax);; 4041 if (!n); 4042 return;; 4043 ; 4044 // Paint the fill area with hatches; 4045 Int_t fillstyle = GetPainter()?GetPainter()->GetFillStyle():1;; 4046 if (gPad->IsBatch() && GetPainter() && gVirtualPS) fillstyle = gVirtualPS->GetFillStyle();; 4047 if (fillstyle >= 3100 && fillstyle < 4000) {; 4048 PaintFillAreaHatches(nn, &x.front(), &y.front(), fillstyle);; 4049 return;; 4050 }; 4051 ; 4052 if (!gPad->IsBatch() && GetPainter()); 4053 // invoke the graphics subsystem; 4054 GetPainter()->DrawFillArea(n, &x.front(), &y.front());; 4055 ; 4056 if (gVirtualPS); 4057 gVirtualPS->DrawPS(-n, &x.front(), &y.front());; 4058 ; 4059 Modified();; 4060}; 4061 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:128441,Test,TestBit,128441,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//////////////////////////////////////////////////////////////////////////////; 5918/// Returns true if this class inherits from TObject and if the start of; 5919/// the TObject parts is at the very beginning of the objects.; 5920/// Concretely this means that the following code is proper for this class:; 5921/// ~~~ {.cpp}; 5922/// ThisClass *ptr;; 5923/// void *void_ptr = (void)ptr;; 5924/// TObject *obj = (TObject*)void_ptr;; 5925/// ~~~; 5926/// This code would be wrong if 'ThisClass' did not inherit 'first' from; 5927/// TObject.; 5928 ; 5929Bool_t TClass::IsStartingWithTObject() const; 5930{; 5931 if (fProperty==(-1)) Property();; 5932 return TestBit(kStartWithTObject);; 5933}; 5934 ; 5935////////////////////////////////////////////////////////////////////////////////; 5936/// Return kTRUE is the class inherits from TObject.; 5937 ; 5938Bool_t TClass::IsTObject() const; 5939{; 5940 if (fProperty==(-1)) Property();; 5941 return TestBit(kIsTObject);; 5942}; 5943 ; 5944////////////////////////////////////////////////////////////////////////////////; 5945/// Return kTRUE is the class is Foreign (the class does not have a Streamer method).; 5946 ; 5947Bool_t TClass::IsForeign() const; 5948{; 5949 if (fProperty==(-1)) Property();; 5950 // If the property are not set and the class is a pair, hard code that; 5951 // it is a unversioned/Foreign class.; 5952 return TestBit(kIsForeign);; 5953}; 5954 ; 5955////////////////////////////////////////////////////////////////////////////////; 5956/// Do the initialization that can only be done after the CINT dictionary has; 5957/// been fully populated and can not be delayed efficiently.; 5958 ; 5959void TClass::PostLoadCheck(); 5960{; 5961 // In the case of a Foreign class (loaded class without a Streamer function); 5962 // we reset fClassVersion to be -1 so that the current TVirtualStreamerInfo will not; 5963 // be confused with a previously loaded streamerInfo.; 5964 ; 5965 if (IsLoaded() && HasInterpreterInfo() && fClassVer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:227637,Test,TestBit,227637,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//////////////////////////////////////////////////////////////////////////////; 5985/// Returns true if this class inherits from TObject and if the start of; 5986/// the TObject parts is at the very beginning of the objects.; 5987/// Concretely this means that the following code is proper for this class:; 5988/// ~~~ {.cpp}; 5989/// ThisClass *ptr;; 5990/// void *void_ptr = (void)ptr;; 5991/// TObject *obj = (TObject*)void_ptr;; 5992/// ~~~; 5993/// This code would be wrong if 'ThisClass' did not inherit 'first' from; 5994/// TObject.; 5995 ; 5996Bool_t TClass::IsStartingWithTObject() const; 5997{; 5998 if (fProperty==(-1)) Property();; 5999 return TestBit(kStartWithTObject);; 6000}; 6001 ; 6002////////////////////////////////////////////////////////////////////////////////; 6003/// Return kTRUE is the class inherits from TObject.; 6004 ; 6005Bool_t TClass::IsTObject() const; 6006{; 6007 if (fProperty==(-1)) Property();; 6008 return TestBit(kIsTObject);; 6009}; 6010 ; 6011////////////////////////////////////////////////////////////////////////////////; 6012/// Return kTRUE is the class is Foreign (the class does not have a Streamer method).; 6013 ; 6014Bool_t TClass::IsForeign() const; 6015{; 6016 if (fProperty==(-1)) Property();; 6017 // If the property are not set and the class is a pair, hard code that; 6018 // it is a unversioned/Foreign class.; 6019 return TestBit(kIsForeign);; 6020}; 6021 ; 6022////////////////////////////////////////////////////////////////////////////////; 6023/// Do the initialization that can only be done after the CINT dictionary has; 6024/// been fully populated and can not be delayed efficiently.; 6025 ; 6026void TClass::PostLoadCheck(); 6027{; 6028 // In the case of a Foreign class (loaded class without a Streamer function); 6029 // we reset fClassVersion to be -1 so that the current TVirtualStreamerInfo will not; 6030 // be confused with a previously loaded streamerInfo.; 6031 ; 6032 if (IsLoaded() && HasInterpreterInfo() && fClassVer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:230388,Test,TestBit,230388,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//////////////////////////////////////////////////////////////////////////////; 604/// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; 605/// 100 etc.; 606/// - 20% and 0.2 selects 20% of the training set as validation data.; 607/// - 100 selects 100 events as the validation data.; 608///; 609/// @return number of samples in validation set; 610///; 611 ; 612UInt_t TMVA::MethodDNN::GetNumValidationSamples(); 613{; 614 Int_t nValidationSamples = 0;; 615 UInt_t trainingSetSize = GetEventCollection(Types::kTraining).size();; 616 ; 617 // Parsing + Validation; 618 // --------------------; 619 if (fValidationSize.EndsWith(""%"")) {; 620 // Relative spec. format 20%; 621 TString intValStr = TString(fValidationSize.Strip(TString::kTrailing, '%'));; 622 ; 623 if (intValStr.IsFloat()) {; 624 Double_t valSizeAsDouble = fValidationSize.Atof() / 100.0;; 625 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 626 } else {; 627 Log() << kFATAL << ""Cannot parse number \"""" << fValidationSize; 628 << ""\"". Expected string like \""20%\"" or \""20.0%\""."" << Endl;; 629 }; 630 } else if (fValidationSize.IsFloat()) {; 631 Double_t valSizeAsDouble = fValidationSize.Atof();; 632 ; 633 if (valSizeAsDouble < 1.0) {; 634 // Relative spec. format 0.2; 635 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 636 } else {; 637 // Absolute spec format 100 or 100.0; 638 nValidationSamples = valSizeAsDouble;; 639 }; 640 } else {; 641 Log() << kFATAL << ""Cannot parse number \"""" << fValidationSize << ""\"". Expected string like \""0.2\"" or \""100\"".""; 642 << Endl;; 643 }; 644 ; 645 // Value validation; 646 // ----------------; 647 if (nValidationSamples < 0) {; 648 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is negative."" << Endl;; 649 }; 650 ; 651 if (nValidationSamples == 0) {; 652 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is zero."" << Endl;; 653 }; 654 ; 655 if (nValidatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:21711,Log,Log,21711,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability,"//////////////////////////////////////////////////////////////////////////; 1724/// \f$ \chi^{2} \f$ test for comparing weighted and unweighted histograms.; 1725///; 1726/// Compares the histograms' adjusted (normalized) residuals.; 1727/// Function: Returns p-value. Other return values are specified by the 3rd parameter; 1728///; 1729/// \param[in] h2 the second histogram; 1730/// \param[in] option; 1731/// - ""UU"" = experiment experiment comparison (unweighted-unweighted); 1732/// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that; 1733/// the first histogram should be unweighted; 1734/// - ""WW"" = MC MC comparison (weighted-weighted); 1735/// - ""NORM"" = to be used when one or both of the histograms is scaled; 1736/// but the histogram originally was unweighted; 1737/// - by default underflows and overflows are not included:; 1738/// * ""OF"" = overflows included; 1739/// * ""UF"" = underflows included; 1740/// - ""P"" = print chi2, ndf, p_value, igood; 1741/// - ""CHI2"" = returns chi2 instead of p-value; 1742/// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; 1743/// \param[in] res not empty - computes normalized residuals and returns them in this array; 1744///; 1745/// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; 1746/// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; 1747/// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; 1748/// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; 1749///; 1750/// #### Introduction:; 1751///; 1752/// A frequently used technique in data analysis is the comparison of; 1753/// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; 1754/// homogeneity is used widely for comparing usual (unweighted) histograms.; 1755/// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; 1756/// for comparison of weighted and unweighted histograms and two weighted; 1757/// histogram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:67545,test,test,67545,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"//////////////////////////////////////////////////////////////////////////; 719/// Return kTRUE if point number ""left""'s distance to origin is bigger than; 720/// that of point number ""right"". Can be used by Sort.; 721 ; 722Bool_t TGraph::CompareRadius(const TGraph* gr, Int_t left, Int_t right); 723{; 724 return gr->fX[left] * gr->fX[left] + gr->fY[left] * gr->fY[left]; 725 > gr->fX[right] * gr->fX[right] + gr->fY[right] * gr->fY[right];; 726}; 727 ; 728////////////////////////////////////////////////////////////////////////////////; 729/// Compute the x/y range of the points in this graph; 730 ; 731void TGraph::ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const; 732{; 733 if (fNpoints <= 0) {; 734 xmin = xmax = ymin = ymax = 0;; 735 return;; 736 }; 737 xmin = xmax = fX[0];; 738 ymin = ymax = fY[0];; 739 ; 740 Double_t xminl = 0; // Positive minimum. Used in case of log scale along X axis.; 741 Double_t yminl = 0; // Positive minimum. Used in case of log scale along Y axis.; 742 ; 743 for (Int_t i = 1; i < fNpoints; i++) {; 744 if (fX[i] < xmin) xmin = fX[i];; 745 if (fX[i] > xmax) xmax = fX[i];; 746 if (fY[i] < ymin) ymin = fY[i];; 747 if (fY[i] > ymax) ymax = fY[i];; 748 if (ymin>0 && (yminl==0 || ymin<yminl)) yminl = ymin;; 749 if (xmin>0 && (xminl==0 || xmin<xminl)) xminl = xmin;; 750 }; 751 ; 752 if (gPad && gPad->GetLogy() && yminl>0) ymin = yminl;; 753 if (gPad && gPad->GetLogx() && xminl>0) xmin = xminl;; 754}; 755 ; 756////////////////////////////////////////////////////////////////////////////////; 757/// Copy points from fX and fY to arrays[0] and arrays[1]; 758/// or to fX and fY if arrays == 0 and ibegin != iend.; 759/// If newarrays is non null, replace fX, fY with pointers from newarrays[0,1].; 760/// Delete newarrays, old fX and fY; 761 ; 762void TGraph::CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend,; 763 Int_t obegin); 764{; 765 CopyPoints(newarrays, ibegin, iend, obegin);; 766 if (newarrays) {; 767 de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:24343,log,log,24343,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['log'],['log']
Testability,"/////////////////////////////////////////////////////////////////////////; 1513/// Statistical test of compatibility in shape between; 1514/// THIS histogram and h2, using Kolmogorov test.; 1515/// Default: Ignore under- and overflow bins in comparison; 1516///; 1517/// option is a character string to specify options; 1518/// ""U"" include Underflows in test; 1519/// ""O"" include Overflows; 1520/// ""N"" include comparison of normalizations; 1521/// ""D"" Put out a line of ""Debug"" printout; 1522/// ""M"" Return the Maximum Kolmogorov distance instead of prob; 1523///; 1524/// The returned function value is the probability of test; 1525/// (much less than one means NOT compatible); 1526///; 1527/// The KS test uses the distance between the pseudo-CDF's obtained; 1528/// from the histogram. Since in more than 1D the order for generating the pseudo-CDF is; 1529/// arbitrary, we use the pseudo-CDF's obtained from all the possible 6 combinations of the 3 axis.; 1530/// The average of all the maximum distances obtained is used in the tests.; 1531 ; 1532Double_t TH3::KolmogorovTest(const TH1 *h2, Option_t *option) const; 1533{; 1534 TString opt = option;; 1535 opt.ToUpper();; 1536 ; 1537 Double_t prb = 0;; 1538 TH1 *h1 = (TH1*)this;; 1539 if (h2 == nullptr) return 0;; 1540 const TAxis *xaxis1 = h1->GetXaxis();; 1541 const TAxis *xaxis2 = h2->GetXaxis();; 1542 const TAxis *yaxis1 = h1->GetYaxis();; 1543 const TAxis *yaxis2 = h2->GetYaxis();; 1544 const TAxis *zaxis1 = h1->GetZaxis();; 1545 const TAxis *zaxis2 = h2->GetZaxis();; 1546 Int_t ncx1 = xaxis1->GetNbins();; 1547 Int_t ncx2 = xaxis2->GetNbins();; 1548 Int_t ncy1 = yaxis1->GetNbins();; 1549 Int_t ncy2 = yaxis2->GetNbins();; 1550 Int_t ncz1 = zaxis1->GetNbins();; 1551 Int_t ncz2 = zaxis2->GetNbins();; 1552 ; 1553 // Check consistency of dimensions; 1554 if (h1->GetDimension() != 3 || h2->GetDimension() != 3) {; 1555 Error(""KolmogorovTest"",""Histograms must be 3-D\n"");; 1556 return 0;; 1557 }; 1558 ; 1559 // Check consistency in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:60582,test,tests,60582,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['test'],['tests']
Testability,"/////////////////////////////////////////////////////////////////////////; 731/// Returns `x` raised to the power `y`.; 732 ; 733inline LongDouble_t TMath::Power(Long64_t x, Long64_t y); 734 { return std::pow(x,y); }; 735 ; 736////////////////////////////////////////////////////////////////////////////////; 737/// Returns `x` raised to the power `y`.; 738 ; 739inline Double_t TMath::Power(Double_t x, Double_t y); 740 { return pow(x, y); }; 741 ; 742////////////////////////////////////////////////////////////////////////////////; 743/// Returns `x` raised to the power `y`.; 744 ; 745inline Double_t TMath::Power(Double_t x, Int_t y) {; 746#ifdef R__ANSISTREAM; 747 return std::pow(x, y);; 748#else; 749 return pow(x, (Double_t) y);; 750#endif; 751}; 752 ; 753////////////////////////////////////////////////////////////////////////////////; 754/// Returns the natural logarithm of `x`.; 755 ; 756inline Double_t TMath::Log(Double_t x); 757 { return log(x); }; 758 ; 759////////////////////////////////////////////////////////////////////////////////; 760/// Returns the common (base-10) logarithm of `x`.; 761 ; 762inline Double_t TMath::Log10(Double_t x); 763 { return log10(x); }; 764 ; 765////////////////////////////////////////////////////////////////////////////////; 766/// Check if it is finite with a mask in order to be consistent in presence of; 767/// fast math.; 768/// Inspired from the CMSSW FWCore/Utilities package; 769 ; 770inline Int_t TMath::Finite(Double_t x); 771#if defined(R__FAST_MATH); 772 ; 773{; 774 const unsigned long long mask = 0x7FF0000000000000LL;; 775 union { unsigned long long l; double d;} v;; 776 v.d =x;; 777 return (v.l&mask)!=mask;; 778}; 779#else; 780# if defined(R__HPUX11); 781 { return isfinite(x); }; 782# elif defined(R__MACOSX); 783# ifdef isfinite; 784 // from math.h; 785 { return isfinite(x); }; 786# else; 787 // from cmath; 788 { return std::isfinite(x); }; 789# endif; 790# else; 791 { return finite(x); }; 792# endif; 793#endif; 794 ; 795/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:28345,Log,Log,28345,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,3,"['Log', 'log']","['Log', 'log', 'logarithm']"
Testability,"////////////////////////////////////////////////////////////////////////; 1663/// Get environment variable.; 1664 ; 1665const char *TSystem::Getenv(const char *); 1666{; 1667 AbstractMethod(""Getenv"");; 1668 return nullptr;; 1669}; 1670 ; 1671//---- System Logging ----------------------------------------------------------; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// Open connection to system log daemon. For the use of the options and; 1675/// facility see the Unix openlog man page.; 1676 ; 1677void TSystem::Openlog(const char *, Int_t, ELogFacility); 1678{; 1679 AbstractMethod(""Openlog"");; 1680}; 1681 ; 1682////////////////////////////////////////////////////////////////////////////////; 1683/// Send mess to syslog daemon. Level is the logging level and mess the; 1684/// message that will be written on the log.; 1685 ; 1686void TSystem::Syslog(ELogLevel, const char *); 1687{; 1688 AbstractMethod(""Syslog"");; 1689}; 1690 ; 1691////////////////////////////////////////////////////////////////////////////////; 1692/// Close connection to system log daemon.; 1693 ; 1694void TSystem::Closelog(); 1695{; 1696 AbstractMethod(""Closelog"");; 1697}; 1698 ; 1699//---- Standard output redirection ---------------------------------------------; 1700 ; 1701////////////////////////////////////////////////////////////////////////////////; 1702/// Redirect standard output (stdout, stderr) to the specified file.; 1703/// If the file argument is 0 the output is set again to stderr, stdout.; 1704/// The second argument specifies whether the output should be added to the; 1705/// file (""a"", default) or the file be truncated before (""w"").; 1706/// The implementations of this function save internally the current state into; 1707/// a static structure.; 1708///; 1709/// The call can be made reentrant by specifying the opaque structure pointed; 1710/// by 'h', which is filled with the relevant information. The handle 'h'; 1711/// obtained on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:54131,log,log,54131,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['log'],['log']
Testability,"///////////////////////////////////////////////////////////////////////; 1688/// Read all leaves of entry and return total number of bytes read.; 1689///; 1690/// The input argument ""entry"" is the entry number in the current tree.; 1691/// In case of a TChain, the entry number in the current Tree must be found; 1692/// before calling this function. For example:; 1693///; 1694///~~~ {.cpp}; 1695/// TChain* chain = ...;; 1696/// Long64_t localEntry = chain->LoadTree(entry);; 1697/// branch->GetEntry(localEntry);; 1698///~~~; 1699///; 1700/// The function returns the number of bytes read from the input buffer.; 1701/// If entry does not exist, the function returns 0.; 1702/// If an I/O error occurs, the function returns -1.; 1703///; 1704/// See IMPORTANT REMARKS in TTree::GetEntry.; 1705 ; 1706Int_t TBranch::GetEntry(Long64_t entry, Int_t getall); 1707{; 1708 // Remember which entry we are reading.; 1709 fReadEntry = entry;; 1710 ; 1711 if (R__unlikely(TestBit(kDoNotProcess) && !getall)) { return 0; }; 1712 ; 1713 TBasket *basket; // will be initialized in the if/then clauses.; 1714 Long64_t first;; 1715 ; 1716 Int_t result = GetBasketAndFirst(basket, first, nullptr);; 1717 if (R__unlikely(result < 0)) { return result + 1; }; 1718 ; 1719 basket->PrepareBasket(entry);; 1720 TBuffer* buf = basket->GetBufferRef();; 1721 ; 1722 // This test necessary to read very old Root files (NvE).; 1723 if (R__unlikely(!buf)) {; 1724 TFile* file = GetFile(0);; 1725 if (!file) return -1;; 1726 basket->ReadBasketBuffers(fBasketSeek[fReadBasket], fBasketBytes[fReadBasket], file);; 1727 buf = basket->GetBufferRef();; 1728 }; 1729 ; 1730 // Set entry offset in buffer.; 1731 if (!TestBit(kDoNotUseBufferMap)) {; 1732 buf->ResetMap();; 1733 }; 1734 if (R__unlikely(!buf->IsReading())) {; 1735 basket->SetReadMode();; 1736 }; 1737 ; 1738 Int_t* entryOffset = basket->GetEntryOffset();; 1739 Int_t bufbegin = 0;; 1740 if (entryOffset) {; 1741 bufbegin = entryOffset[entry-first];; 1742 buf->SetBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:62474,Test,TestBit,62474,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////////////////////////////////////////////////////////////; 1805/// Returns the X value corresponding to the minimum value of the function; 1806/// on the (xmin, xmax) interval; 1807///; 1808/// Method:; 1809/// First, the grid search is used to bracket the maximum; 1810/// with the step size = (xmax-xmin)/fNpx. This way, the step size; 1811/// can be controlled via the SetNpx() function. If the function is; 1812/// unimodal or if its extrema are far apart, setting the fNpx to; 1813/// a small value speeds the algorithm up many times.; 1814/// Then, Brent's method is applied on the bracketed interval; 1815/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1816/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1817/// of iteration of the Brent algorithm; 1818/// If the flag logx is set the grid search is done in log step size; 1819/// This is done automatically if the log scale is set in the current Pad; 1820///; 1821/// NOTE: see also TF1::GetX; 1822 ; 1823Double_t TF1::GetMinimumX(Double_t xmin, Double_t xmax, Double_t epsilon, Int_t maxiter, Bool_t logx) const; 1824{; 1825 if (xmin >= xmax) {; 1826 xmin = fXmin;; 1827 xmax = fXmax;; 1828 }; 1829 ; 1830 ROOT::Math::BrentMinimizer1D bm;; 1831 ROOT::Math::WrappedFunction<const TF1 &> wf1(*this);; 1832 bm.SetFunction(wf1, xmin, xmax);; 1833 bm.SetNpx(fNpx);; 1834 bm.SetLogScan(logx);; 1835 bm.Minimize(maxiter, epsilon, epsilon);; 1836 Double_t x;; 1837 x = bm.XMinimum();; 1838 ; 1839 return x;; 1840}; 1841 ; 1842 ; 1843////////////////////////////////////////////////////////////////////////////////; 1844/// Returns the X value corresponding to the function value fy for (xmin<x<xmax).; 1845/// in other words it can find the roots of the function when fy=0 and successive calls; 1846/// by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; 1847///; 1848/// Method:; 1849/// First, the grid search is used to bracket the maxi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:66694,log,logx,66694,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,4,['log'],"['log', 'logx']"
Testability,"//////////////////////////////////////////////////////////////////////; 1480/// renormalisation of the TRAINING event weights; 1481/// - none (kind of obvious) .. use the weights as supplied by the; 1482/// user.. (we store however the relative weight for later use); 1483/// - numEvents; 1484/// - equalNumEvents reweight the training events such that the sum of all; 1485/// backgr. (class > 0) weights equal that of the signal (class 0); 1486 ; 1487void; 1488TMVA::DataSetFactory::RenormEvents( TMVA::DataSetInfo& dsi,; 1489 EventVectorOfClassesOfTreeType& tmpEventVector,; 1490 const EvtStatsPerClass& eventCounts,; 1491 const TString& normMode ); 1492{; 1493 ; 1494 ; 1495 // print rescaling info; 1496 // ---------------------------------; 1497 // compute sums of weights; 1498 ValuePerClass trainingSumWeightsPerClass( dsi.GetNClasses() );; 1499 ValuePerClass testingSumWeightsPerClass( dsi.GetNClasses() );; 1500 ; 1501 NumberPerClass trainingSizePerClass( dsi.GetNClasses() );; 1502 NumberPerClass testingSizePerClass( dsi.GetNClasses() );; 1503 ; 1504 Double_t trainingSumSignalWeights = 0;; 1505 Double_t trainingSumBackgrWeights = 0; // Backgr. includes all classes that are not signal; 1506 Double_t testingSumSignalWeights = 0;; 1507 Double_t testingSumBackgrWeights = 0; // Backgr. includes all classes that are not signal; 1508 ; 1509 ; 1510 ; 1511 for( UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls < clsEnd; ++cls ){; 1512 trainingSizePerClass.at(cls) = tmpEventVector[Types::kTraining].at(cls).size();; 1513 testingSizePerClass.at(cls) = tmpEventVector[Types::kTesting].at(cls).size();; 1514 ; 1515 // the functional solution; 1516 // sum up the weights in Double_t although the individual weights are Float_t to prevent rounding issues in addition of floating points; 1517 //; 1518 // accumulate --> does what the name says; 1519 // begin() and end() denote the range of the vector to be accumulated; 1520 // Double_t(0) tells accumulate the type and the starting value; 1521 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:68279,test,testingSizePerClass,68279,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSizePerClass']
Testability,"/////////////////////////////////////////////////////////////////////; 1321/// Return the size in bytes of the key header structure.; 1322///; 1323/// An explanation about the nbytes (Int_t nbytes) variable used in the; 1324/// function. The size of fSeekKey and fSeekPdir is 8 instead of 4 if version is; 1325/// greater than 1000.; 1326/// | Component | Sizeof |; 1327/// |-------------------|------------|; 1328/// | fNbytes | 4 |; 1329/// | sizeof(Version_t) | 2 |; 1330/// | fObjlen | 4 |; 1331/// | fDatime | 4 |; 1332/// | fKeylen | 2 |; 1333/// | fCycle | 2 |; 1334/// | fSeekKey | 4 or 8 |; 1335/// | fSeekPdir | 4 or 8 |; 1336/// | **FIXED TOTAL** | 26 or 34 |; 1337/// | fClassName | 1+ bytes |; 1338/// | fName | 1+ bytes |; 1339/// | fTitle | 1+ bytes |; 1340/// | **TOTAL** | 29+ or 37+ |; 1341 ; 1342Int_t TKey::Sizeof() const; 1343{; 1344 Int_t nbytes = 22; if (fVersion > 1000) nbytes += 8;; 1345 nbytes += fDatime.Sizeof();; 1346 if (TestBit(kIsDirectoryFile)) {; 1347 nbytes += 11; // strlen(""TDirectory"")+1; 1348 } else {; 1349 nbytes += fClassName.Sizeof();; 1350 }; 1351 nbytes += fName.Sizeof();; 1352 nbytes += fTitle.Sizeof();; 1353 return nbytes;; 1354}; 1355 ; 1356////////////////////////////////////////////////////////////////////////////////; 1357/// Stream a class object.; 1358 ; 1359void TKey::Streamer(TBuffer &b); 1360{; 1361 Version_t version;; 1362 if (b.IsReading()) {; 1363 b >> fNbytes;; 1364 b >> version; fVersion = (Int_t)version;; 1365 b >> fObjlen;; 1366 fDatime.Streamer(b);; 1367 b >> fKeylen;; 1368 b >> fCycle;; 1369 if (fVersion > 1000) {; 1370 b >> fSeekKey;; 1371 ; 1372 // We currently store in the 16 highest bit of fSeekPdir the value of; 1373 // fPidOffset. This offset is used when a key (or basket) is transfered from one; 1374 // file to the other. In this case the TRef and TObject might have stored a; 1375 // pid index (to retrieve TProcessIDs) which refered to their order on the original; 1376 // file, the fPidOffset is to be added to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:47579,Test,TestBit,47579,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////////////////////////////////////////////////////////; 361/// Execute method on this object with the given parameter string, e.g.; 362/// ""3.14,1,\""text\"""".; 363 ; 364void TObject::Execute(const char *method, const char *params, Int_t *error); 365{; 366 if (!IsA()) return;; 367 ; 368 Bool_t must_cleanup = TestBit(kMustCleanup);; 369 ; 370 gInterpreter->Execute(this, IsA(), method, params, error);; 371 ; 372 if (gPad && must_cleanup) gPad->Modified();; 373}; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376/// Execute method on this object with parameters stored in the TObjArray.; 377/// The TObjArray should contain an argv vector like:; 378/// ~~~ {.cpp}; 379/// argv[0] ... argv[n] = the list of TObjString parameters; 380/// ~~~; 381 ; 382void TObject::Execute(TMethod *method, TObjArray *params, Int_t *error); 383{; 384 if (!IsA()) return;; 385 ; 386 Bool_t must_cleanup = TestBit(kMustCleanup);; 387 ; 388 gInterpreter->Execute(this, IsA(), method, params, error);; 389 ; 390 if (gPad && must_cleanup) gPad->Modified();; 391}; 392 ; 393 ; 394////////////////////////////////////////////////////////////////////////////////; 395/// Execute action corresponding to an event at (px,py). This method; 396/// must be overridden if an object can react to graphics events.; 397 ; 398void TObject::ExecuteEvent(Int_t, Int_t, Int_t); 399{; 400 // AbstractMethod(""ExecuteEvent"");; 401}; 402 ; 403////////////////////////////////////////////////////////////////////////////////; 404/// Must be redefined in derived classes.; 405/// This function is typically used with TCollections, but can also be used; 406/// to find an object by name inside this object.; 407 ; 408TObject *TObject::FindObject(const char *) const; 409{; 410 return nullptr;; 411}; 412 ; 413////////////////////////////////////////////////////////////////////////////////; 414/// Must be redefined in derived classes.; 415/// This function is typically used with TColl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:13432,Test,TestBit,13432,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['Test'],['TestBit']
Testability,"////////////////////////////////////////////////////////////////////; 1594/// Sets pointer to data array provided by user.; 1595/// Necessary if SetFCN is not called.; 1596///; 1597/// - numpoints: number of experimental points; 1598/// - vecsize: size of data point vector + 2; 1599/// (for N-dimensional fit vecsize=N+2); 1600/// - exdata: data array with following format; 1601///; 1602/// - exdata[0] = ExpValue_0 - experimental data value number 0; 1603/// - exdata[1] = ExpSigma_0 - error of value number 0; 1604/// - exdata[2] = X_0[0]; 1605/// - exdata[3] = X_0[1]; 1606///; 1607/// - exdata[vecsize-1] = X_0[vecsize-3]; 1608/// - exdata[vecsize] = ExpValue_1; 1609/// - exdata[vecsize+1] = ExpSigma_1; 1610/// - exdata[vecsize+2] = X_1[0]; 1611///; 1612/// - exdata[vecsize*(numpoints-1)] = ExpValue_(numpoints-1); 1613///; 1614/// - exdata[vecsize*numpoints-1] = X_(numpoints-1)[vecsize-3]; 1615 ; 1616void TFumili::SetData(Double_t *exdata,Int_t numpoints,Int_t vecsize){; 1617 if(exdata){; 1618 fNED1 = numpoints;; 1619 fNED2 = vecsize;; 1620 fEXDA = exdata;; 1621 }; 1622}; 1623 ; 1624 ; 1625////////////////////////////////////////////////////////////////////////////////; 1626/// ret fit method (chisquare or log-likelihood); 1627 ; 1628void TFumili::SetFitMethod(const char *name); 1629{; 1630 if (!strcmp(name,""H1FitChisquare"")) SetFCN(H1FitChisquareFumili);; 1631 if (!strcmp(name,""H1FitLikelihood"")) SetFCN(H1FitLikelihoodFumili);; 1632 if (!strcmp(name,""GraphFitChisquare"")) SetFCN(GraphFitChisquareFumili);; 1633}; 1634 ; 1635////////////////////////////////////////////////////////////////////////////////; 1636/// Sets for parameter number ipar initial parameter value,; 1637/// name parname, initial error verr and limits vlow and vhigh; 1638/// - If vlow = vhigh but not equal to zero, parameter will be fixed.; 1639/// - If vlow = vhigh = 0, parameter is released and its limits are discarded; 1640 ; 1641Int_t TFumili::SetParameter(Int_t ipar,const char *parname,Double_t va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:46360,log,log-likelihood,46360,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['log'],['log-likelihood']
Testability,"////////////////////////////////////////////////////////////////////; 438TFormula::TFormula(); 439{; 440 fName = """";; 441 fTitle = """";; 442 fClingInput = """";; 443 fReadyToExecute = false;; 444 fClingInitialized = false;; 445 fAllParametersSetted = false;; 446 fNdim = 0;; 447 fNpar = 0;; 448 fNumber = 0;; 449 fClingName = """";; 450 fFormula = """";; 451 fLambdaPtr = nullptr;; 452}; 453 ; 454////////////////////////////////////////////////////////////////////////////////; 455static bool IsReservedName(const char* name); 456{; 457 if (strlen(name)!=1) return false;; 458 for (auto const & specialName : {""x"",""y"",""z"",""t""}){; 459 if (strcmp(name,specialName)==0) return true;; 460 }; 461 return false;; 462}; 463 ; 464////////////////////////////////////////////////////////////////////////////////; 465TFormula::~TFormula(); 466{; 467 ; 468 // N.B. a memory leak may happen if user set bit after constructing the object,; 469 // Setting of bit should be done only internally; 470 if (!TestBit(TFormula::kNotGlobal) && gROOT ) {; 471 R__LOCKGUARD(gROOTMutex);; 472 gROOT->GetListOfFunctions()->Remove(this);; 473 }; 474 ; 475 int nLinParts = fLinearParts.size();; 476 if (nLinParts > 0) {; 477 for (int i = 0; i < nLinParts; ++i) delete fLinearParts[i];; 478 }; 479}; 480 ; 481////////////////////////////////////////////////////////////////////////////////; 482TFormula::TFormula(const char *name, const char *formula, bool addToGlobList, bool vectorize) :; 483 TNamed(name,formula),; 484 fClingInput(formula),fFormula(formula); 485{; 486 fReadyToExecute = false;; 487 fClingInitialized = false;; 488 fNdim = 0;; 489 fNpar = 0;; 490 fNumber = 0;; 491 fLambdaPtr = nullptr;; 492 fVectorized = vectorize;; 493#ifndef R__HAS_VECCORE; 494 fVectorized = false;; 495#endif; 496 ; 497 FillDefaults();; 498 ; 499 ; 500 //fName = gNamePrefix + name; // is this needed; 501 ; 502 // do not process null formulas.; 503 if (!fFormula.IsNull() ) {; 504 PreProcessFormula(fFormula);; 505 ; 506 bool ok = PrepareForm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:18220,Test,TestBit,18220,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////////////////////////////////////////////////////////; 1060/// Select and distribute unassigned events to kTraining and kTesting; 1061 ; 1062TMVA::DataSet*; 1063TMVA::DataSetFactory::MixEvents( DataSetInfo& dsi,; 1064 EventVectorOfClassesOfTreeType& tmpEventVector,; 1065 EvtStatsPerClass& eventCounts,; 1066 const TString& splitMode,; 1067 const TString& mixMode,; 1068 const TString& normMode,; 1069 UInt_t splitSeed); 1070{; 1071 TMVA::RandomGenerator<TRandom3> rndm(splitSeed);; 1072 ; 1073 // ==== splitting of undefined events to kTraining and kTesting; 1074 ; 1075 // if splitMode contains ""RANDOM"", then shuffle the undefined events; 1076 if (splitMode.Contains( ""RANDOM"" ) /*&& !emptyUndefined*/ ) {; 1077 // random shuffle the undefined events of each class; 1078 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1079 EventVector& unspecifiedEvents = tmpEventVector[Types::kMaxTreeType].at(cls);; 1080 if( ! unspecifiedEvents.empty() ) {; 1081 Log() << kDEBUG << ""randomly shuffling ""; 1082 << unspecifiedEvents.size(); 1083 << "" events of class "" << cls; 1084 << "" which are not yet associated to testing or training"" << Endl;; 1085 std::shuffle(unspecifiedEvents.begin(), unspecifiedEvents.end(), rndm);; 1086 }; 1087 }; 1088 }; 1089 ; 1090 // check for each class the number of training and testing events, the requested number and the available number; 1091 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""SPLITTING ========"" << Endl;; 1092 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1093 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""---- class "" << cls << Endl;; 1094 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""check number of training/testing events, requested and available number of events and for class "" << cls << Endl;; 1095 ; 1096 // check if enough or too many events are already in the training/testing eventvectors of the class cls; 1097 EventVector& eventVectorTraining = tmpEventVector[ Types::kTra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:46303,Log,Log,46303,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"//////////////////////////////////////////////////////////////////; 1679/// Returns the minimum value of the function on the (xmin, xmax) interval; 1680///; 1681/// Method:; 1682/// First, the grid search is used to bracket the maximum; 1683/// with the step size = (xmax-xmin)/fNpx. This way, the step size; 1684/// can be controlled via the SetNpx() function. If the function is; 1685/// unimodal or if its extrema are far apart, setting the fNpx to; 1686/// a small value speeds the algorithm up many times.; 1687/// Then, Brent's method is applied on the bracketed interval; 1688/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1689/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1690/// of iteration of the Brent algorithm; 1691/// If the flag logx is set the grid search is done in log step size; 1692/// This is done automatically if the log scale is set in the current Pad; 1693///; 1694/// NOTE: see also TF1::GetMaximumX and TF1::GetX; 1695 ; 1696Double_t TF1::GetMinimum(Double_t xmin, Double_t xmax, Double_t epsilon, Int_t maxiter, Bool_t logx) const; 1697{; 1698 if (xmin >= xmax) {; 1699 xmin = fXmin;; 1700 xmax = fXmax;; 1701 }; 1702 ; 1703 if (!logx && gPad != nullptr) logx = gPad->GetLogx();; 1704 ; 1705 ROOT::Math::BrentMinimizer1D bm;; 1706 ROOT::Math::WrappedFunction<const TF1 &> wf1(*this);; 1707 bm.SetFunction(wf1, xmin, xmax);; 1708 bm.SetNpx(fNpx);; 1709 bm.SetLogScan(logx);; 1710 bm.Minimize(maxiter, epsilon, epsilon);; 1711 Double_t x;; 1712 x = bm.FValMinimum();; 1713 ; 1714 return x;; 1715}; 1716 ; 1717////////////////////////////////////////////////////////////////////////////////; 1718/// Find the minimum of a function of whatever dimension.; 1719/// While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions; 1720/// since it uses the minimizer interface; 1721/// vector x at beginning will contained the initial point, on exit will contain the result; 1722 ; 172",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:61819,log,logx,61819,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,6,['log'],"['log', 'logx']"
Testability,"//////////////////////////////////////////////////////////////////; 2917/// Set double buffer mode ON or OFF.; 2918 ; 2919void TPad::SetDoubleBuffer(Int_t mode); 2920{; 2921 if (fCanvas) fCanvas->SetDoubleBuffer(mode);; 2922}; 2923 ; 2924////////////////////////////////////////////////////////////////////////////////; 2925/// Set selected.; 2926 ; 2927void TPad::SetSelected(TObject *obj); 2928{; 2929 if (fCanvas) fCanvas->SetSelected(obj);; 2930}; 2931 ; 2932////////////////////////////////////////////////////////////////////////////////; 2933/// Update pad.; 2934 ; 2935void TPad::Update(); 2936{; 2937 if (fCanvas) fCanvas->Update();; 2938}; 2939 ; 2940////////////////////////////////////////////////////////////////////////////////; 2941/// Asynchronous pad update.; 2942/// In case of web-based canvas triggers update of the canvas on the client side,; 2943/// but does not wait that real update is completed. Avoids blocking of caller thread.; 2944/// Have to be used if called from other web-based widget to avoid logical dead-locks.; 2945/// In case of normal canvas just canvas->Update() is performed.; 2946 ; 2947void TPad::UpdateAsync(); 2948{; 2949 if (fCanvas) fCanvas->UpdateAsync();; 2950}; 2951 ; 2952////////////////////////////////////////////////////////////////////////////////; 2953/// Get frame.; 2954 ; 2955TFrame *TPad::GetFrame(); 2956{; 2957 if (!fPrimitives) fPrimitives = new TList;; 2958 TFrame *frame = (TFrame*)GetListOfPrimitives()->FindObject(fFrame);; 2959 if (!frame) frame = (TFrame*)GetListOfPrimitives()->FindObject(""TFrame"");; 2960 fFrame = frame;; 2961 if (!fFrame) {; 2962 if (!frame) fFrame = new TFrame(0,0,1,1);; 2963 Int_t framecolor = GetFrameFillColor();; 2964 if (!framecolor) framecolor = GetFillColor();; 2965 fFrame->SetFillColor(framecolor);; 2966 fFrame->SetFillStyle(GetFrameFillStyle());; 2967 fFrame->SetLineColor(GetFrameLineColor());; 2968 fFrame->SetLineStyle(GetFrameLineStyle());; 2969 fFrame->SetLineWidth(GetFrameLineWidth());; 297",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:93008,log,logical,93008,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['log'],['logical']
Testability,"////////////////////////////////////////////////////////////////; 622/// Computation of the probability for a certain Chi-squared (chi2); 623/// and number of degrees of freedom (ndf).; 624///; 625/// Calculations are based on the incomplete gamma function P(a,x),; 626/// where a=ndf/2 and x=chi2/2.; 627///; 628/// P(a,x) represents the probability that the observed Chi-squared; 629/// for a correct model should be less than the value chi2.; 630///; 631/// The returned probability corresponds to 1-P(a,x),; 632/// which denotes the probability that an observed Chi-squared exceeds; 633/// the value chi2 by chance, even for a correct model.; 634///; 635/// \author NvE 14-nov-1998 UU-SAP Utrecht; 636 ; 637Double_t TMath::Prob(Double_t chi2,Int_t ndf); 638{; 639 if (ndf <= 0) return 0; // Set CL to zero in case ndf<=0; 640 ; 641 if (chi2 <= 0) {; 642 if (chi2 < 0) return 0;; 643 else return 1;; 644 }; 645 ; 646 return ::ROOT::Math::chisquared_cdf_c(chi2,ndf);; 647}; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Calculates the Kolmogorov distribution function,; 651///; 652/// \f[; 653/// P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; 654/// \f]; 655///; 656/// which gives the probability that Kolmogorov's test statistic will exceed; 657/// the value z assuming the null hypothesis. This gives a very powerful; 658/// test for comparing two one-dimensional distributions.; 659/// see, for example, Eadie et al, ""statistical Methods in Experimental; 660/// Physics', pp 269-270).; 661///; 662/// This function returns the confidence level for the null hypothesis, where:; 663/// - \f$ z = dn \sqrt{n} \f$, and; 664/// - \f$ dn \f$ is the maximum deviation between a hypothetical distribution; 665/// function and an experimental distribution with; 666/// - \f$ n \f$ events; 667///; 668/// NOTE: To compare two experimental distributions with m and n events,; 669/// use \f$ z = \sqrt{m n/(m+n)) dn} \f$; 670///; 671/// Accuracy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:20810,test,test,20810,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['test'],['test']
Testability,"///////////////////////////////////////////////////////////////; 1638/// Returns the X value corresponding to the maximum value of the function; 1639///; 1640/// Method:; 1641/// First, the grid search is used to bracket the maximum; 1642/// with the step size = (xmax-xmin)/fNpx.; 1643/// This way, the step size can be controlled via the SetNpx() function.; 1644/// If the function is unimodal or if its extrema are far apart, setting; 1645/// the fNpx to a small value speeds the algorithm up many times.; 1646/// Then, Brent's method is applied on the bracketed interval; 1647/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1648/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1649/// of iteration of the Brent algorithm; 1650/// If the flag logx is set the grid search is done in log step size; 1651/// This is done automatically if the log scale is set in the current Pad; 1652///; 1653/// NOTE: see also TF1::GetX; 1654 ; 1655Double_t TF1::GetMaximumX(Double_t xmin, Double_t xmax, Double_t epsilon, Int_t maxiter, Bool_t logx) const; 1656{; 1657 if (xmin >= xmax) {; 1658 xmin = fXmin;; 1659 xmax = fXmax;; 1660 }; 1661 ; 1662 if (!logx && gPad != nullptr) logx = gPad->GetLogx();; 1663 ; 1664 ROOT::Math::BrentMinimizer1D bm;; 1665 GInverseFunc g(this);; 1666 ROOT::Math::WrappedFunction<GInverseFunc> wf1(g);; 1667 bm.SetFunction(wf1, xmin, xmax);; 1668 bm.SetNpx(fNpx);; 1669 bm.SetLogScan(logx);; 1670 bm.Minimize(maxiter, epsilon, epsilon);; 1671 Double_t x;; 1672 x = bm.XMinimum();; 1673 ; 1674 return x;; 1675}; 1676 ; 1677 ; 1678////////////////////////////////////////////////////////////////////////////////; 1679/// Returns the minimum value of the function on the (xmin, xmax) interval; 1680///; 1681/// Method:; 1682/// First, the grid search is used to bracket the maximum; 1683/// with the step size = (xmax-xmin)/fNpx. This way, the step size; 1684/// can be controlled via the SetNpx() function. If the func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:60189,log,logx,60189,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,6,['log'],"['log', 'logx']"
Testability,"//////////////////////////////////////////////////////////////; 4509/// Paint 3-D polyline in the CurrentPad.; 4510 ; 4511void TPad::PaintPolyLine3D(Int_t n, Double_t *p); 4512{; 4513 if (!fView) return;; 4514 ; 4515 // Loop on each individual line; 4516 for (Int_t i = 1; i < n; i++); 4517 PaintLine3D(&p[3*i-3], &p[3*i]);; 4518 ; 4519 Modified();; 4520}; 4521 ; 4522////////////////////////////////////////////////////////////////////////////////; 4523/// Paint polymarker in CurrentPad World coordinates.; 4524 ; 4525void TPad::PaintPolyMarker(Int_t nn, Float_t *x, Float_t *y, Option_t *); 4526{; 4527 Int_t n = TMath::Abs(nn);; 4528 Double_t xmin,xmax,ymin,ymax;; 4529 if (nn > 0 || TestBit(TGraph::kClipFrame)) {; 4530 xmin = fUxmin; ymin = fUymin; xmax = fUxmax; ymax = fUymax;; 4531 } else {; 4532 xmin = fX1; ymin = fY1; xmax = fX2; ymax = fY2;; 4533 }; 4534 Int_t i,i1=-1,np=0;; 4535 for (i=0; i<n; i++) {; 4536 if (x[i] >= xmin && x[i] <= xmax && y[i] >= ymin && y[i] <= ymax) {; 4537 np++;; 4538 if (i1 < 0) i1 = i;; 4539 if (i < n-1) continue;; 4540 }; 4541 if (np == 0) continue;; 4542 if (!gPad->IsBatch() && GetPainter()); 4543 GetPainter()->DrawPolyMarker(np, &x[i1], &y[i1]);; 4544 if (gVirtualPS) {; 4545 gVirtualPS->DrawPolyMarker(np, &x[i1], &y[i1]);; 4546 }; 4547 i1 = -1;; 4548 np = 0;; 4549 }; 4550 Modified();; 4551}; 4552 ; 4553////////////////////////////////////////////////////////////////////////////////; 4554/// Paint polymarker in CurrentPad World coordinates.; 4555 ; 4556void TPad::PaintPolyMarker(Int_t nn, Double_t *x, Double_t *y, Option_t *); 4557{; 4558 Int_t n = TMath::Abs(nn);; 4559 Double_t xmin,xmax,ymin,ymax;; 4560 if (nn > 0 || TestBit(TGraph::kClipFrame)) {; 4561 xmin = fUxmin; ymin = fUymin; xmax = fUxmax; ymax = fUymax;; 4562 } else {; 4563 xmin = fX1; ymin = fY1; xmax = fX2; ymax = fY2;; 4564 }; 4565 Int_t i,i1=-1,np=0;; 4566 for (i=0; i<n; i++) {; 4567 if (x[i] >= xmin && x[i] <= xmax && y[i] >= ymin && y[i] <= ymax) {; 4568 np++;; 4569 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:143646,Test,TestBit,143646,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 360",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153258,log,logged,153258,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logged']
Testability,"/////////////////////////////////////////////////////////////; 786/// Dump this text with its attributes.; 787 ; 788void TText::Print(Option_t *) const; 789{; 790 printf(""Text X=%f Y=%f Text=%s Font=%d Size=%f"",fX,fY,GetTitle(),GetTextFont(),GetTextSize());; 791 if (GetTextColor() != 1 ) printf("" Color=%d"",GetTextColor());; 792 if (GetTextAlign() != 10) printf("" Align=%d"",GetTextAlign());; 793 if (GetTextAngle() != 0 ) printf("" Angle=%f"",GetTextAngle());; 794 printf(""\n"");; 795}; 796 ; 797////////////////////////////////////////////////////////////////////////////////; 798/// Save primitive as a C++ statement(s) on output stream out; 799 ; 800void TText::SavePrimitive(std::ostream &out, Option_t * /*= """"*/); 801{; 802 char quote = '""';; 803 if (gROOT->ClassSaved(TText::Class())); 804 out<<"" "";; 805 else; 806 out<<"" TText *"";; 807 ; 808 TString s = GetTitle();; 809 s.ReplaceSpecialCppChars();; 810 ; 811 out<<""text = new TText(""<<fX<<"",""<<fY<<"",""<<quote<<s<<quote<<"");""<<std::endl;; 812 if (TestBit(kTextNDC)); 813 out<<"" text->SetNDC();""<<std::endl;; 814 ; 815 SaveTextAttributes(out, ""text"", 11, 0, 1, 62, 0.05);; 816 ; 817 out<<"" text->Draw();""<<std::endl;; 818}; 819 ; 820////////////////////////////////////////////////////////////////////////////////; 821/// Set NDC mode on if isNDC = kTRUE, off otherwise; 822 ; 823void TText::SetNDC(Bool_t isNDC); 824{; 825 ResetBit(kTextNDC);; 826 if (isNDC) SetBit(kTextNDC);; 827}; 828 ; 829////////////////////////////////////////////////////////////////////////////////; 830/// Change (i.e. set) the title of the TNamed.; 831 ; 832void TText::SetMbTitle(const wchar_t *title); 833{; 834 char *mb_title = new char[MB_CUR_MAX * wcslen(title) + 1]();; 835 char *p = mb_title;; 836 size_t length = wcslen(title);; 837 for (size_t i = 0; i < length; i++) {; 838 const int n = wctomb(p, title[i]);; 839 if (n >= 0) p += n;; 840 }; 841 fTitle = mb_title;; 842 delete [] mb_title;; 843 if (gPad && TestBit(kMustCleanup)) gPad->Modified();; 844}; 845",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TText_8cxx_source.html:26444,Test,TestBit,26444,doc/master/TText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TText_8cxx_source.html,1,['Test'],['TestBit']
Testability,"////////////////////////////////////////////////////////////; 9789/// [Control function to draw a TH2Poly as a color plot.](\ref HP20a); 9790 ; 9791void THistPainter::PaintTH2PolyColorLevels(Option_t *); 9792{; 9793 ; 9794 //Do not highlight the histogram, if its part was picked.; 9795 if (gPad->PadInHighlightMode() && gPad->GetSelected() != fH); 9796 return;; 9797 ; 9798 Int_t ncolors, color, theColor;; 9799 Double_t z, zc;; 9800 Double_t zmin = fH->GetMinimum();; 9801 Double_t zmax = fH->GetMaximum();; 9802 if (Hoption.Logz) {; 9803 if (zmax > 0) {; 9804 if (zmin <= 0) zmin = TMath::Min((Double_t)1, (Double_t)0.001*zmax);; 9805 zmin = TMath::Log10(zmin);; 9806 zmax = TMath::Log10(zmax);; 9807 } else {; 9808 return;; 9809 }; 9810 }; 9811 Double_t dz = zmax - zmin;; 9812 ; 9813 // Initialize the levels on the Z axis; 9814 ncolors = gStyle->GetNumberOfColors();; 9815 Int_t ndiv = fH->GetContour();; 9816 if (ndiv == 0 ) {; 9817 ndiv = gStyle->GetNumberContours();; 9818 fH->SetContour(ndiv);; 9819 }; 9820 Int_t ndivz = TMath::Abs(ndiv);; 9821 if (!fH->TestBit(TH1::kUserContour)) fH->SetContour(ndiv);; 9822 Double_t scale = ndivz/dz;; 9823 ; 9824 TIter next(((TH2Poly*)fH)->GetBins());; 9825 ; 9826 while (auto obj = next()) {; 9827 TH2PolyBin *b = (TH2PolyBin*)obj;; 9828 TObject *poly = b->GetPolygon();; 9829 ; 9830 z = b->GetContent();; 9831 if (z==0 && Hoption.Zero) continue;; 9832 if (Hoption.Logz) {; 9833 if (z > 0) z = TMath::Log10(z);; 9834 else z = zmin;; 9835 }; 9836 if (z < zmin) continue;; 9837 ; 9838 // Define the bin color.; 9839 if (fH->TestBit(TH1::kUserContour)) {; 9840 zc = fH->GetContourLevelPad(0);; 9841 if (z < zc) continue;; 9842 color = -1;; 9843 for (Int_t k=0; k<ndiv; k++) {; 9844 zc = fH->GetContourLevelPad(k);; 9845 if (z < zc) {; 9846 continue;; 9847 } else {; 9848 color++;; 9849 }; 9850 }; 9851 } else {; 9852 color = Int_t(0.01+(z-zmin)*scale);; 9853 }; 9854 theColor = Int_t((color+0.99)*Float_t(ncolors)/Float_t(ndivz));; 9855 if (theColor > nco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:354201,Test,TestBit,354201,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////////////////////////////////////////////////; 8457/// [Control function to draw a 2D histogram as a scatter plot.](\ref HP11); 8458 ; 8459void THistPainter::PaintScatterPlot(Option_t *option); 8460{; 8461 ; 8462 fH->TAttMarker::Modify();; 8463 ; 8464 Int_t k, marker;; 8465 Double_t dz, z, xk,xstep, yk, ystep;; 8466 Double_t scale = 1;; 8467 Bool_t ltest = kFALSE;; 8468 Double_t zmax = fH->GetMaximum();; 8469 Double_t zmin = fH->GetMinimum();; 8470 if (zmin == 0 && zmax == 0) return;; 8471 if (zmin == zmax) {; 8472 zmax += 0.1*TMath::Abs(zmax);; 8473 zmin -= 0.1*TMath::Abs(zmin);; 8474 }; 8475 Int_t ncells = (Hparam.ylast-Hparam.yfirst)*(Hparam.xlast-Hparam.xfirst);; 8476 if (Hoption.Logz) {; 8477 if (zmin > 0) zmin = TMath::Log10(zmin);; 8478 else zmin = 0;; 8479 if (zmax > 0) zmax = TMath::Log10(zmax);; 8480 else zmax = 0;; 8481 if (zmin == 0 && zmax == 0) return;; 8482 dz = zmax - zmin;; 8483 scale = 100/dz;; 8484 if (ncells > 10000) scale /= 5;; 8485 ltest = kTRUE;; 8486 } else {; 8487 dz = zmax - zmin;; 8488 if (dz >= kNMAX || zmax < 1) {; 8489 scale = (kNMAX-1)/dz;; 8490 if (ncells > 10000) scale /= 5;; 8491 ltest = kTRUE;; 8492 }; 8493 }; 8494 if (fH->GetMinimumStored() == -1111) {; 8495 Double_t yMARGIN = gStyle->GetHistTopMargin();; 8496 if (Hoption.MinimumZero) {; 8497 if (zmin >= 0) zmin = 0;; 8498 else zmin -= yMARGIN*(zmax-zmin);; 8499 } else {; 8500 Double_t dzmin = yMARGIN*(zmax-zmin);; 8501 if (zmin >= 0 && (zmin-dzmin <= 0)) zmin = 0;; 8502 else zmin -= dzmin;; 8503 }; 8504 }; 8505 ; 8506 TString opt = option;; 8507 opt.ToLower();; 8508 if (opt.Contains(""scat="")) {; 8509 char optscat[100];; 8510 strlcpy(optscat,opt.Data(),100);; 8511 char *oscat = strstr(optscat,""scat="");; 8512 char *blank = strstr(oscat,"" ""); if (blank) *blank = 0;; 8513 sscanf(oscat+5,""%lg"",&scale);; 8514 }; 8515 // use an independent instance of a random generator; 8516 // instead of gRandom to avoid conflicts and; 8517 // to get same random numbers when drawing the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:303679,Log,Logz,303679,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"//////////////////////////////////////////////////////////; 126/// Provide a pointer name containing uid.; 127 ; 128const char *TGeoMedium::GetPointerName() const; 129{; 130 static TString name;; 131 name.Form(""pMed%d"", GetUniqueID());; 132 return name.Data();; 133}; 134 ; 135////////////////////////////////////////////////////////////////////////////////; 136/// Save a primitive as a C++ statement(s) on output stream ""out"".; 137 ; 138void TGeoMedium::SavePrimitive(std::ostream &out, Option_t *option /*= """"*/); 139{; 140 if (TestBit(TGeoMedium::kMedSavePrimitive)); 141 return;; 142 fMaterial->SavePrimitive(out, option);; 143 out << ""// Medium: "" << GetName() << std::endl;; 144 out << "" numed = "" << fId << ""; // medium number"" << std::endl;; 145 out << "" par[0] = "" << fParams[0] << ""; // isvol"" << std::endl;; 146 out << "" par[1] = "" << fParams[1] << ""; // ifield"" << std::endl;; 147 out << "" par[2] = "" << fParams[2] << ""; // fieldm"" << std::endl;; 148 out << "" par[3] = "" << fParams[3] << ""; // tmaxfd"" << std::endl;; 149 out << "" par[4] = "" << fParams[4] << ""; // stemax"" << std::endl;; 150 out << "" par[5] = "" << fParams[5] << ""; // deemax"" << std::endl;; 151 out << "" par[6] = "" << fParams[6] << ""; // epsil"" << std::endl;; 152 out << "" par[7] = "" << fParams[7] << ""; // stmin"" << std::endl;; 153 ; 154 out << "" auto "" << GetPointerName() << "" = new TGeoMedium(\"""" << GetName() << ""\"", numed, ""; 155 << fMaterial->GetPointerName() << "", par);"" << std::endl;; 156 SetBit(TGeoMedium::kMedSavePrimitive);; 157}; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; namechar name[80]Definition TGX11.cxx:110; TGeoManager.h; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoMedium.h; TList.h; TGeoManager::GetListOfMediaTList * GetListOfMedia() constDefinition TGeoManager.h:472; TGeoManager::GetListOfMaterialsTList * GetListOfMater",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMedium_8cxx_source.html:4703,Test,TestBit,4703,doc/master/TGeoMedium_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMedium_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////////////////////////////////////////////; 594void TMVA::DataLoader::AddCut( const TCut& cut, const TString& className ); 595{; 596 DefaultDataSetInfo().AddCut( cut, className );; 597}; 598 ; 599////////////////////////////////////////////////////////////////////////////////; 600/// prepare the training and test trees; 601 ; 602void TMVA::DataLoader::PrepareTrainingAndTestTree( const TCut& cut,; 603 Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest,; 604 const TString& otherOpt ); 605{; 606 SetInputTreesFromEventAssignTrees();; 607 ; 608 AddCut( cut );; 609 ; 610 DefaultDataSetInfo().SetSplitOptions( TString::Format(""nTrain_Signal=%i:nTrain_Background=%i:nTest_Signal=%i:nTest_Background=%i:%s"",; 611 NsigTrain, NbkgTrain, NsigTest, NbkgTest, otherOpt.Data()).Data() );; 612}; 613 ; 614////////////////////////////////////////////////////////////////////////////////; 615/// prepare the training and test trees; 616/// kept for backward compatibility; 617 ; 618void TMVA::DataLoader::PrepareTrainingAndTestTree( const TCut& cut, Int_t Ntrain, Int_t Ntest ); 619{; 620 SetInputTreesFromEventAssignTrees();; 621 ; 622 AddCut( cut );; 623 ; 624 DefaultDataSetInfo().SetSplitOptions( TString::Format(""nTrain_Signal=%i:nTrain_Background=%i:nTest_Signal=%i:nTest_Background=%i:SplitMode=Random:EqualTrainSample:!V"",; 625 Ntrain, Ntrain, Ntest, Ntest).Data() );; 626}; 627 ; 628////////////////////////////////////////////////////////////////////////////////; 629/// prepare the training and test trees; 630/// -> same cuts for signal and background; 631 ; 632void TMVA::DataLoader::PrepareTrainingAndTestTree( const TCut& cut, const TString& opt ); 633{; 634 SetInputTreesFromEventAssignTrees();; 635 ; 636 DefaultDataSetInfo().PrintClasses();; 637 AddCut( cut );; 638 DefaultDataSetInfo().SetSplitOptions( opt );; 639}; 640 ; 641////////////////////////////////////////////////////////////////////////////////; 642/// prepare the training and test trees; 643 ; 644voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:24348,test,test,24348,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,1,['test'],['test']
Testability,"////////////////////////////////////////////////////////; 856/// See TTree::GetReadEntry().; 857 ; 858TBranch* TChain::FindBranch(const char* branchname); 859{; 860 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 861 // Make sure the element list is up to date; 862 if (!TestBit(kProofUptodate)); 863 SetProof(true, true);; 864 return fProofChain->FindBranch(branchname);; 865 }; 866 if (fTree) {; 867 return fTree->FindBranch(branchname);; 868 }; 869 LoadTree(0);; 870 if (fTree) {; 871 return fTree->FindBranch(branchname);; 872 }; 873 return nullptr;; 874}; 875 ; 876////////////////////////////////////////////////////////////////////////////////; 877/// See TTree::GetReadEntry().; 878 ; 879TLeaf* TChain::FindLeaf(const char* searchname); 880{; 881 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 882 // Make sure the element list is up to date; 883 if (!TestBit(kProofUptodate)); 884 SetProof(true, true);; 885 return fProofChain->FindLeaf(searchname);; 886 }; 887 if (fTree) {; 888 return fTree->FindLeaf(searchname);; 889 }; 890 LoadTree(0);; 891 if (fTree) {; 892 return fTree->FindLeaf(searchname);; 893 }; 894 return nullptr;; 895}; 896 ; 897////////////////////////////////////////////////////////////////////////////////; 898/// Returns the expanded value of the alias. Search in the friends if any.; 899 ; 900const char* TChain::GetAlias(const char* aliasName) const; 901{; 902 const char* alias = TTree::GetAlias(aliasName);; 903 if (alias) {; 904 return alias;; 905 }; 906 if (fTree) {; 907 return fTree->GetAlias(aliasName);; 908 }; 909 const_cast<TChain*>(this)->LoadTree(0);; 910 if (fTree) {; 911 return fTree->GetAlias(aliasName);; 912 }; 913 return nullptr;; 914}; 915 ; 916////////////////////////////////////////////////////////////////////////////////; 917/// Return pointer to the branch name in the current tree.; 918 ; 919TBranch* TChain::GetBranch(const char* name); 920{; 921 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 922 // Make s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:33658,Test,TestBit,33658,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['Test'],['TestBit']
Testability,"///////////////////////////////////////////////////////; 106/// Print the TFitResultPtr by printing its TFitResult.; 107 ; 108std::string cling::printValue(const TFitResultPtr* val) {; 109 if (TFitResult* fr = val->Get()); 110 return printValue(fr);; 111 return ""<nullptr TFitResult>"";; 112}; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TFitResultPtr.h; TFitResult.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TFitResultPtr::~TFitResultPtrvirtual ~TFitResultPtr()Destructor.Definition TFitResultPtr.cxx:55; TFitResultPtr::GetTFitResult * Get() constReturn contained pointer.Definition TFitResultPtr.cxx:86; TFitResultPtr::fPointerstd::shared_ptr< TFitResult > fPointer! Smart Pointer to TFitResult classDefinition TFitResultPtr.h:58; TFitResultPtr::fStatusint fStatusfit status codeDefinition TFitResultPtr.h:57; TFitResultPtr::operator*TFitResult & operator*() constImplement the de-reference operator to make the class acts as a pointer to a TFitResult assert in cas...Definition TFitResultPtr.cxx:63; TFitResultPtr::operator->TFitResult * operator->() constImplement the -> operator to make the class acts as a pointer to a TFitResult.Definition TFitResultPtr.cxx:75; TFitResultPtr::operator=TFitResultPtr & operator=(const TFitResultPtr &rhs)Assignment operator.Definition TFitResultPtr.cxx:94; TFitResultPtr::TFitResultPtrTFitResultPtr(int status=-1)Definition TFitResultPtr.h:35; TFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O.Definition TFitResult.h:34. histhistsrcTFitResultPtr.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html:5082,assert,assert,5082,doc/master/TFitResultPtr_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html,1,['assert'],['assert']
Testability,"///////////////////////////////////////////////////////; 1544/// Overloaded function to create background efficiency (rejection) versus; 1545/// signal efficiency plot (first call of this function).; 1546///; 1547/// The function returns the signal efficiency at background efficiency; 1548/// indicated in theString; 1549///; 1550/// ""theString"" must have two entries:; 1551/// - `[0]`: ""Efficiency""; 1552/// - `[1]`: the value of background efficiency at which the signal efficiency; 1553/// is to be returned; 1554 ; 1555Double_t TMVA::MethodCuts::GetEfficiency( const TString& theString, Types::ETreeType type, Double_t& effSerr ); 1556{; 1557 Data()->SetCurrentType(type);; 1558 ; 1559 Results* results = Data()->GetResults( GetMethodName(), Types::kTesting, GetAnalysisType() );; 1560 ; 1561 // parse input string for required background efficiency; 1562 TList* list = gTools().ParseFormatLine( theString, "":"" );; 1563 ; 1564 if (list->GetSize() > 2) {; 1565 delete list;; 1566 Log() << kFATAL << ""<GetEfficiency> wrong number of arguments""; 1567 << "" in string: "" << theString; 1568 << "" | required format, e.g., Efficiency:0.05, or empty string"" << Endl;; 1569 return -1;; 1570 }; 1571 ; 1572 // sanity check; 1573 Bool_t computeArea = (list->GetSize() < 2); // the area is computed; 1574 ; 1575 // that will be the value of the efficiency retured (does not affect; 1576 // the efficiency-vs-bkg plot which is done anyway.; 1577 Float_t effBref = (computeArea?1.:atof( ((TObjString*)list->At(1))->GetString() ));; 1578 ; 1579 delete list;; 1580 ; 1581 ; 1582 // first round ? --> create histograms; 1583 if (results->GetHist(""MVA_EFF_BvsS"")==0) {; 1584 ; 1585 if (fBinaryTreeS!=0) { delete fBinaryTreeS; fBinaryTreeS = 0; }; 1586 if (fBinaryTreeB!=0) { delete fBinaryTreeB; fBinaryTreeB = 0; }; 1587 ; 1588 // the variables may be transformed by a transformation method: to coherently; 1589 // treat signal and background one must decide which transformation type shall; 1590 // be used: our ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:60657,Log,Log,60657,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability,"///////////////////////////////////////////////////////; 5888/// If the branch address is not set, we set all addresses starting with; 5889/// the top level parent branch. This is required to be done in order for; 5890/// GetOffset to be correct and for GetEntry to run.; 5891 ; 5892void TBranchElement::SetupAddresses(); 5893{; 5894 // Check to see if the user changed the branch address on us.; 5895 ValidateAddress();; 5896 ; 5897 if (fAddress || TestBit(kDecomposedObj)) {; 5898 // -- Do nothing if already setup or if we are a MakeClass branch.; 5899 return;; 5900 }; 5901 SetupAddressesImpl();; 5902}; 5903 ; 5904////////////////////////////////////////////////////////////////////////////////; 5905/// If the branch address is not set, we set all addresses starting with; 5906/// the top level parent branch. This is required to be done in order for; 5907/// GetOffset to be correct and for GetEntry to run.; 5908 ; 5909void TBranchElement::SetupAddressesImpl(); 5910{; 5911 if (TestBit((long)kDoNotProcess|(long)kAddressSet)) {; 5912 // -- Do nothing if we have been told not to.; 5913 // Or the data member in this branch is not longer part of the; 5914 // parent's layout.; 5915 return;; 5916 }; 5917 ; 5918 //--------------------------------------------------------------------------; 5919 // Check if we are splited STL collection of pointers; 5920 /////////////////////////////////////////////////////////////////////////////; 5921 ; 5922 if( fType == 41 && fSplitLevel >= TTree::kSplitCollectionOfPointers ); 5923 {; 5924 TBranchElement *parent = (TBranchElement *)GetMother()->GetSubBranch( this );; 5925 ; 5926 // Make sure the StreamerInfo is loaded and initialized.; 5927 GetInfoImp();; 5928 ; 5929 if( !parent->GetAddress() ); 5930 parent->SetAddress( nullptr );; 5931 return;; 5932 }; 5933 ; 5934 //--------------------------------------------------------------------------; 5935 // Any other case; 5936 /////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:221541,Test,TestBit,221541,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////////////////////////////////////////////; 6262/// Load library containing the specified class. Returns 0 in case of error; 6263/// and 1 in case if success.; 6264 ; 6265Int_t TCling::AutoLoad(const char *cls, Bool_t knowDictNotLoaded /* = kFALSE */); 6266{; 6267 // Prevent update to IsClassAutoloading between our check and our actions.; 6268 R__READ_LOCKGUARD(ROOT::gCoreMutex);; 6269 ; 6270 // TClass::GetClass explicitly calls gInterpreter->AutoLoad. When called from; 6271 // rootcling (in *_rdict.pcm file generation) it is a no op.; 6272 // FIXME: We should avoid calling autoload when we know we are not supposed; 6273 // to and transform this check into an assert.; 6274 if (!IsClassAutoLoadingEnabled()) {; 6275 // Never load any library from rootcling/genreflex.; 6276 if (gDebug > 2) {; 6277 Info(""TCling::AutoLoad"", ""Explicitly disabled (the class name is %s)"", cls);; 6278 }; 6279 return 0;; 6280 }; 6281 ; 6282 assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");; 6283 ; 6284 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 6285 ; 6286 if (!knowDictNotLoaded && gClassTable->GetDictNorm(cls)) {; 6287 // The library is already loaded as the class's dictionary is known.; 6288 // Return success.; 6289 // Note: the name (cls) is expected to be normalized as it comes either; 6290 // from a callbacks (that can/should calculate the normalized name from the; 6291 // decl) or from TClass::GetClass (which does also calculate the normalized; 6292 // name).; 6293 return 1;; 6294 }; 6295 ; 6296 if (gDebug > 2) {; 6297 Info(""TCling::AutoLoad"",; 6298 ""Trying to autoload for %s"", cls);; 6299 }; 6300 ; 6301 if (!gROOT || !gInterpreter || gROOT->TestBit(TObject::kInvalidObject)) {; 6302 if (gDebug > 2) {; 6303 Info(""TCling::AutoLoad"",; 6304 ""Disabled due to gROOT or gInterpreter being invalid/not ready (the class name is %s)"", cls);; 6305 }; 6306 return 0;; 6307 }; 6308 // Prevent the recursion when the library dictionary are loaded.; 6309 SuspendAutoLoading",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:243879,assert,assert,243879,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"///////////////////////////////////////////////////////; 717/// Terminate the application. Reset the terminal to sane mode and call; 718/// the logoff macro defined via Rint.Logoff environment variable.; 719/// @note The function does not return, unless the class has; 720/// been told to return from Run(), by a call to SetReturnFromRun().; 721 ; 722void TRint::Terminate(Int_t status); 723{; 724 Getlinem(kCleanUp, nullptr);; 725 ; 726 if (ReturnFromRun()) {; 727 gSystem->ExitLoop();; 728 } else {; 729 delete gTabCom;; 730 gTabCom = nullptr;; 731 ; 732 //Execute logoff macro; 733 const char *logoff;; 734 logoff = gEnv->GetValue(""Rint.Logoff"", (char*)nullptr);; 735 if (logoff && !NoLogOpt()) {; 736 char *mac = gSystem->Which(TROOT::GetMacroPath(), logoff, kReadPermission);; 737 if (mac); 738 ProcessFile(logoff);; 739 delete [] mac;; 740 }; 741 ; 742 TApplication::Terminate(status);; 743 }; 744}; 745 ; 746////////////////////////////////////////////////////////////////////////////////; 747/// Set console mode:; 748///; 749/// mode = kTRUE - echo input symbols; 750/// mode = kFALSE - noecho input symbols; 751 ; 752void TRint::SetEchoMode(Bool_t mode); 753{; 754 Gl_config(""noecho"", mode ? 0 : 1);; 755}; 756 ; 757////////////////////////////////////////////////////////////////////////////////; 758/// Process the content of a line starting with "".R"" (already stripped-off); 759/// The format is; 760/// [user@]host[:dir] [-l user] [-d dbg] [script]; 761/// The variable 'dir' is the remote directory to be used as working dir.; 762/// The username can be specified in two ways, ""-l"" having the priority; 763/// (as in ssh).; 764/// A 'dbg' value > 0 gives increasing verbosity.; 765/// The last argument 'script' allows to specify an alternative script to; 766/// be executed remotely to startup the session.; 767 ; 768Longptr_t TRint::ProcessRemote(const char *line, Int_t *); 769{; 770 Longptr_t ret = TApplication::ProcessRemote(line);; 771 ; 772 if (ret == 1) {; 773 if (fAppRemote) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:25093,Log,Logoff,25093,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,4,"['Log', 'log']","['Logoff', 'logoff']"
Testability,"//////////////////////////////////////////////////////; 3161/// Recursively mark streamer infos for writing to a file.; 3162///; 3163/// Will force this TStreamerInfo to the file and also; 3164/// all the dependencies.; 3165/// If argument force > 0 the loop on class dependencies is forced.; 3166/// This function is called when streaming a class that contains; 3167/// a null pointer. In this case, the TStreamerInfo for the class; 3168/// with the null pointer must be written to the file and also all; 3169/// the TStreamerInfo of all the classes referenced by the class.; 3170/// We must be given a file to write to.; 3171 ; 3172void TStreamerInfo::ForceWriteInfo(TFile* file, Bool_t force); 3173{; 3174 if (!file || fNumber < 0) {; 3175 return;; 3176 }; 3177 // Get the given file's list of streamer infos marked for writing.; 3178 TArrayC* cindex = file->GetClassIndex();; 3179 //the test below testing fArray[fNumber]>1 is to avoid a recursivity; 3180 //problem in some cases like:; 3181 // class aProblemChild: public TNamed {; 3182 // aProblemChild *canBeNull;; 3183 // };; 3184 if ( // -- Done if already marked, and we are not forcing, or forcing is blocked.; 3185 (cindex->fArray[fNumber] && !force) || // Streamer info is already marked, and not forcing, or; 3186 (cindex->fArray[fNumber] > 1) // == 2 means ignore forcing to prevent infinite recursion.; 3187 ) {; 3188 return;; 3189 }; 3190 ; 3191 auto recurseIntoContent = [file, force](TClass *contentClass); 3192 {; 3193 TVirtualStreamerInfo* si = 0;; 3194 if (contentClass->Property() & kIsAbstract) {; 3195 // If the class of the element is abstract, register the; 3196 // TStreamerInfo only if it has already been built.; 3197 // Otherwise call cl->GetStreamerInfo() would generate an; 3198 // incorrect StreamerInfo.; 3199 si = contentClass->GetCurrentStreamerInfo();; 3200 } else {; 3201 si = contentClass->GetStreamerInfo();; 3202 }; 3203 if (si) {; 3204 si->ForceWriteInfo(file, force);; 3205 }; 3206 };; 3207 ; 3208 // We do ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:128140,test,test,128140,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,['test'],"['test', 'testing']"
Testability,"//////////////////////////////////////////////////////; 4532/// Read leaves into i/o buffers for this branch.; 4533/// For split-class branch, base class branch, data member branch, or top-level branch.; 4534/// which do not have a branch count and are not a counter.; 4535 ; 4536void TBranchElement::ReadLeavesMember(TBuffer& b); 4537{; 4538 R__ASSERT(fBranchCount==nullptr);; 4539 R__ASSERT(fStreamerType != TVirtualStreamerInfo::kCounter);; 4540 ; 4541 ValidateAddress();; 4542 if (fObject == nullptr); 4543 {; 4544 // We have nowhere to copy the data (probably because the data member was; 4545 // 'dropped' from the current schema) so let's no copy it in a random place.; 4546 return;; 4547 }; 4548 ; 4549 R__PushCache onfileObject(((TBufferFile&)b),fOnfileObject,1);; 4550 // If not a TClonesArray or STL container master branch; 4551 // or sub-branch and branch inherits from tobject,; 4552 // then register with the buffer so that pointers are; 4553 // handled properly.; 4554 if (TestBit(kBranchObject)) {; 4555 b.MapObject((TObject*) fObject);; 4556 } else if (TestBit(kBranchAny)) {; 4557 b.MapObject(fObject, fBranchClass);; 4558 }; 4559 ; 4560 fNdata = 1;; 4561 TStreamerInfo *info = GetInfoImp();; 4562 if (!info) {; 4563 return;; 4564 }; 4565 // Since info is not null, fReadActionSequence is not null either.; 4566 b.ApplySequence(*fReadActionSequence, fObject);; 4567}; 4568 ; 4569////////////////////////////////////////////////////////////////////////////////; 4570/// Read leaves into i/o buffers for this branch.; 4571/// For split-class branch, base class branch, data member branch, or top-level branch.; 4572/// which do have a branch count and are not a counter.; 4573 ; 4574void TBranchElement::ReadLeavesMemberBranchCount(TBuffer& b); 4575{; 4576 R__ASSERT(fStreamerType != TVirtualStreamerInfo::kCounter);; 4577 ; 4578 ValidateAddress();; 4579 if (fObject == nullptr); 4580 {; 4581 // We have nowhere to copy the data (probably because the data member was; 4582 // 'dropped",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:168678,Test,TestBit,168678,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"////////////////////////////////////////////////////; 1667/// Evaluates objective function ( chi-square ), gradients and; 1668/// Z-matrix using data provided by user via TFumili::SetData; 1669 ; 1670Int_t TFumili::SGZ(); 1671{; 1672 fS = 0.;; 1673 Int_t i,j,l,k2=1,k1,ki=0;; 1674 Double_t *x = new Double_t[fNED2];; 1675 Double_t *df = new Double_t[fNpar];; 1676 Int_t nx = fNED2-2;; 1677 for (l=0;l<fNED1;l++) { // cycle on all exp. points; 1678 k1 = k2;; 1679 if (fLogLike) {; 1680 fNumericDerivatives = kTRUE;; 1681 nx = fNED2;; 1682 k1 -= 2;; 1683 }; 1684 ; 1685 for (i=0;i<nx;i++){; 1686 ki += 1+i;; 1687 x[i] = fEXDA[ki];; 1688 }; 1689 // Double_t y = ARITHM(df,x);; 1690 Double_t y = EvalTFN(df,x);; 1691 if(fNumericDerivatives) Derivatives(df,x);; 1692 Double_t sig=1.;; 1693 if(fLogLike) { // Likelihood method; 1694 if(y>0.) {; 1695 fS = fS - log(y);; 1696 y = -y;; 1697 sig= y;; 1698 } else { //; 1699 delete [] x;; 1700 delete [] df;; 1701 fS = 1e10;; 1702 return -1; // indflg[0] = 1;; 1703 }; 1704 } else { // Chi2 method; 1705 sig = fEXDA[k2]; // sigma of experimental point; 1706 y = y - fEXDA[k1-1]; // f(x_i) - F_i; 1707 fS = fS + (y*y/(sig*sig))*.5; // simple chi2/2; 1708 }; 1709 Int_t n = 0;; 1710 for (i=0;i<fNpar;i++) {; 1711 if (fPL0[i]>0){; 1712 df[n] = df[i]/sig; // left only non-fixed param derivatives div by Sig; 1713 fGr[i] += df[n]*(y/sig);; 1714 n++;; 1715 }; 1716 }; 1717 l = 0;; 1718 for (i=0;i<n;i++); 1719 for (j=0;j<=i;j++); 1720 fZ[l++] += df[i]*df[j];; 1721 k2 += fNED2;; 1722 }; 1723 ; 1724 delete[] df;; 1725 delete[] x;; 1726 return 1;; 1727}; 1728 ; 1729 ; 1730////////////////////////////////////////////////////////////////////////////////; 1731/// Minimization function for H1s using a Chisquare method.; 1732/// Default method (function evaluated at center of bin); 1733/// for each point the cache contains the following info; 1734/// - 1D : bc,e,xc (bin content, error, x of center of bin); 1735/// - 2D : bc,e,xc,yc; 1736/// - 3D : bc,e,xc,yc,zc; 17",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:48607,log,log,48607,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['log'],['log']
Testability,"///////////////////////////////////////////////////; 1752/// Convert sub-string to upper-case.; 1753 ; 1754void TSubString::ToUpper(); 1755{; 1756 if (!IsNull()) { // Ignore null substrings; 1757 char *p = fStr.GetPointer() + fBegin;; 1758 Ssiz_t n = fExtent;; 1759 while (n--) { *p = toupper((unsigned char)*p); p++;}; 1760 }; 1761}; 1762 ; 1763////////////////////////////////////////////////////////////////////////////////; 1764/// Output error message.; 1765 ; 1766void TSubString::SubStringError(Ssiz_t sr, Ssiz_t start, Ssiz_t n) const; 1767{; 1768 Error(""TSubString::SubStringError"",; 1769 ""out of bounds: start = %d, n = %d, sr = %d"", start, n, sr);; 1770}; 1771 ; 1772////////////////////////////////////////////////////////////////////////////////; 1773/// Check to make sure a sub-string index is in range.; 1774 ; 1775void TSubString::AssertElement(Ssiz_t i) const; 1776{; 1777 if (i == kNPOS || i >= Length()); 1778 Error(""TSubString::AssertElement"",; 1779 ""out of bounds: i = %d, Length = %d"", i, Length());; 1780}; 1781 ; 1782////////////////////////////////////////////////////////////////////////////////; 1783/// Returns true if all characters in string are ascii.; 1784 ; 1785Bool_t TString::IsAscii() const; 1786{; 1787 const char *cp = Data();; 1788 for (Ssiz_t i = 0; i < Length(); ++i); 1789 if (cp[i] & ~0x7F); 1790 return kFALSE;; 1791 return kTRUE;; 1792}; 1793 ; 1794////////////////////////////////////////////////////////////////////////////////; 1795/// Returns true if all characters in string are alphabetic.; 1796/// Returns false in case string length is 0.; 1797 ; 1798Bool_t TString::IsAlpha() const; 1799{; 1800 const char *cp = Data();; 1801 Ssiz_t len = Length();; 1802 if (len == 0) return kFALSE;; 1803 for (Ssiz_t i = 0; i < len; ++i); 1804 if (!isalpha(cp[i])); 1805 return kFALSE;; 1806 return kTRUE;; 1807}; 1808 ; 1809////////////////////////////////////////////////////////////////////////////////; 1810/// Returns true if all characters in string are a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:54690,Assert,AssertElement,54690,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,2,['Assert'],['AssertElement']
Testability,"///////////////////////////////////////////////////; 917/// Return pointer to the branch name in the current tree.; 918 ; 919TBranch* TChain::GetBranch(const char* name); 920{; 921 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 922 // Make sure the element list is up to date; 923 if (!TestBit(kProofUptodate)); 924 SetProof(true, true);; 925 return fProofChain->GetBranch(name);; 926 }; 927 if (fTree) {; 928 return fTree->GetBranch(name);; 929 }; 930 LoadTree(0);; 931 if (fTree) {; 932 return fTree->GetBranch(name);; 933 }; 934 return nullptr;; 935}; 936 ; 937////////////////////////////////////////////////////////////////////////////////; 938/// See TTree::GetReadEntry().; 939 ; 940bool TChain::GetBranchStatus(const char* branchname) const; 941{; 942 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 943 // Make sure the element list is up to date; 944 if (!TestBit(kProofUptodate)); 945 Warning(""GetBranchStatus"", ""PROOF proxy not up-to-date:""; 946 "" run TChain::SetProof(true, true) first"");; 947 return fProofChain->GetBranchStatus(branchname);; 948 }; 949 return TTree::GetBranchStatus(branchname);; 950}; 951 ; 952////////////////////////////////////////////////////////////////////////////////; 953/// Return an iterator over the cluster of baskets starting at firstentry.; 954///; 955/// This iterator is not yet supported for TChain object.; 956 ; 957TTree::TClusterIterator TChain::GetClusterIterator(Long64_t /* firstentry */); 958{; 959 Fatal(""GetClusterIterator"",""TChain objects are not supported"");; 960 return TTree::GetClusterIterator(-1);; 961}; 962 ; 963////////////////////////////////////////////////////////////////////////////////; 964/// Return absolute entry number in the chain.; 965/// The input parameter entry is the entry number in; 966/// the current tree of this chain.; 967 ; 968Long64_t TChain::GetChainEntryNumber(Long64_t entry) const; 969{; 970 return entry + fTreeOffset[fTreeNumber];; 971}; 972 ; 973////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:35412,Test,TestBit,35412,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['Test'],['TestBit']
Testability,"//////////////////////////////////////////////////; 622/// Save primitive as a C++ statement(s) on output stream out; 623 ; 624void TEllipse::SavePrimitive(std::ostream &out, Option_t * /*= """"*/); 625{; 626 out<<"" ""<<std::endl;; 627 if (gROOT->ClassSaved(TEllipse::Class())) {; 628 out<<"" "";; 629 } else {; 630 out<<"" TEllipse *"";; 631 }; 632 out<<""ellipse = new TEllipse(""<<fX1<<"",""<<fY1<<"",""<<fR1<<"",""<<fR2; 633 <<"",""<<fPhimin<<"",""<<fPhimax<<"",""<<fTheta<<"");""<<std::endl;; 634 ; 635 SaveFillAttributes(out,""ellipse"",0,1001);; 636 SaveLineAttributes(out,""ellipse"",1,1,1);; 637 ; 638 if (GetNoEdges()) out<<"" ellipse->SetNoEdges();""<<std::endl;; 639 ; 640 out<<"" ellipse->Draw();""<<std::endl;; 641}; 642 ; 643////////////////////////////////////////////////////////////////////////////////; 644/// Return kTRUE if kNoEdges bit is set, kFALSE otherwise.; 645 ; 646Bool_t TEllipse::GetNoEdges() const; 647{; 648 return TestBit(kNoEdges) ? kTRUE : kFALSE;; 649}; 650 ; 651////////////////////////////////////////////////////////////////////////////////; 652/// if noEdges = kTRUE the lines connecting the center to the edges; 653/// will not be drawn.; 654/// default is to draw the edges.; 655 ; 656void TEllipse::SetNoEdges(Bool_t noEdges); 657{; 658 if (noEdges) SetBit(kNoEdges);; 659 else ResetBit(kNoEdges);; 660}; 661 ; 662////////////////////////////////////////////////////////////////////////////////; 663/// Stream an object of class TEllipse.; 664 ; 665void TEllipse::Streamer(TBuffer &R__b); 666{; 667 if (R__b.IsReading()) {; 668 UInt_t R__s, R__c;; 669 Version_t R__v = R__b.ReadVersion(&R__s, &R__c);; 670 if (R__v > 1) {; 671 R__b.ReadClassBuffer(TEllipse::Class(), this, R__v, R__s, R__c);; 672 return;; 673 }; 674 //====process old versions before automatic schema evolution; 675 TObject::Streamer(R__b);; 676 TAttLine::Streamer(R__b);; 677 TAttFill::Streamer(R__b);; 678 Float_t x1,y1,r1,r2,phimin,phimax,theta;; 679 R__b >> x1; fX1 = x1;; 680 R__b >> y1; fY1 = y1;; 681 R__b >> r1; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEllipse_8cxx_source.html:21384,Test,TestBit,21384,doc/master/TEllipse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEllipse_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////////////////////////////////////; 1411/// Return pointer to function with name.; 1412///; 1413/// Functions such as TGraph::Fit store the fitted function in the list of; 1414/// functions of this graph.; 1415 ; 1416TF1 *TGraph::GetFunction(const char *name) const; 1417{; 1418 if (!fFunctions) return nullptr;; 1419 return (TF1*)fFunctions->FindObject(name);; 1420}; 1421 ; 1422////////////////////////////////////////////////////////////////////////////////; 1423/// Returns a pointer to the histogram used to draw the axis; 1424/// Takes into account the two following cases.; 1425/// 1. option 'A' was specified in TGraph::Draw. Return fHistogram; 1426/// 2. user had called TPad::DrawFrame. return pointer to hframe histogram; 1427 ; 1428TH1F *TGraph::GetHistogram() const; 1429{; 1430 Double_t rwxmin, rwxmax, rwymin, rwymax, maximum, minimum, dx, dy;; 1431 Double_t uxmin, uxmax;; 1432 ; 1433 ComputeRange(rwxmin, rwymin, rwxmax, rwymax); //this is redefined in TGraphErrors; 1434 ; 1435 // (if fHistogram exist) && (if the log scale is on) &&; 1436 // (if the computed range minimum is > 0) && (if the fHistogram minimum is zero); 1437 // then it means fHistogram limits have been computed in linear scale; 1438 // therefore they might be too strict and cut some points. In that case the; 1439 // fHistogram limits should be recomputed ie: the existing fHistogram; 1440 // should not be returned.; 1441 TH1F *historg = nullptr;; 1442 if (fHistogram) {; 1443 if (!TestBit(kResetHisto)) {; 1444 if (gPad && gPad->GetLogx()) {; 1445 if (rwxmin <= 0 || fHistogram->GetXaxis()->GetXmin() != 0) return fHistogram;; 1446 } else if (gPad && gPad->GetLogy()) {; 1447 if (rwymin <= 0 || fHistogram->GetMinimum() != 0) return fHistogram;; 1448 } else {; 1449 return fHistogram;; 1450 }; 1451 } else {; 1452 const_cast <TGraph*>(this)->ResetBit(kResetHisto);; 1453 }; 1454 historg = fHistogram;; 1455 }; 1456 ; 1457 if (rwxmin == rwxmax) rwxmax += 1.;; 1458 if (rwymin == rwymax) rwymax += 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:51618,log,log,51618,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['log'],['log']
Testability,"/////////////////////////////////////////////; 1101/// Validation of the ValidationSize option. Allowed formats are 20%, 0.2 and; 1102/// 100 etc.; 1103/// - 20% and 0.2 selects 20% of the training set as validation data.; 1104/// - 100 selects 100 events as the validation data.; 1105///; 1106/// @return number of samples in validation set; 1107///; 1108UInt_t TMVA::MethodDL::GetNumValidationSamples(); 1109{; 1110 Int_t nValidationSamples = 0;; 1111 UInt_t trainingSetSize = GetEventCollection(Types::kTraining).size();; 1112 ; 1113 // Parsing + Validation; 1114 // --------------------; 1115 if (fNumValidationString.EndsWith(""%"")) {; 1116 // Relative spec. format 20%; 1117 TString intValStr = TString(fNumValidationString.Strip(TString::kTrailing, '%'));; 1118 ; 1119 if (intValStr.IsFloat()) {; 1120 Double_t valSizeAsDouble = fNumValidationString.Atof() / 100.0;; 1121 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 1122 } else {; 1123 Log() << kFATAL << ""Cannot parse number \"""" << fNumValidationString; 1124 << ""\"". Expected string like \""20%\"" or \""20.0%\""."" << Endl;; 1125 }; 1126 } else if (fNumValidationString.IsFloat()) {; 1127 Double_t valSizeAsDouble = fNumValidationString.Atof();; 1128 ; 1129 if (valSizeAsDouble < 1.0) {; 1130 // Relative spec. format 0.2; 1131 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 1132 } else {; 1133 // Absolute spec format 100 or 100.0; 1134 nValidationSamples = valSizeAsDouble;; 1135 }; 1136 } else {; 1137 Log() << kFATAL << ""Cannot parse number \"""" << fNumValidationString << ""\"". Expected string like \""0.2\"" or \""100\"".""; 1138 << Endl;; 1139 }; 1140 ; 1141 // Value validation; 1142 // ----------------; 1143 if (nValidationSamples < 0) {; 1144 Log() << kFATAL << ""Validation size \"""" << fNumValidationString << ""\"" is negative."" << Endl;; 1145 }; 1146 ; 1147 if (nValidationSamples == 0) {; 1148 Log() << kFATAL << ""Validation size \"""" << fNumValidationString << ""\",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:42950,Log,Log,42950,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Log'],['Log']
Testability,"/////////////////////////////////////////; 6589/// Autoload a library based on a missing symbol.; 6590 ; 6591void* TCling::LazyFunctionCreatorAutoload(const std::string& mangled_name) {; 6592 std::string dlsym_mangled_name = ROOT::TMetaUtils::DemangleNameForDlsym(mangled_name);; 6593 ; 6594 // We have already loaded the library.; 6595 if (void* Addr = llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(dlsym_mangled_name)); 6596 return Addr;; 6597 ; 6598 const cling::DynamicLibraryManager &DLM = *GetInterpreterImpl()->getDynamicLibraryManager();; 6599 R__LOCKGUARD(gInterpreterMutex);; 6600 ; 6601 auto LibLoader = [](const std::string& LibName) -> bool {; 6602 if (gSystem->Load(LibName.c_str(), """", false) < 0) {; 6603 ::Error(""TCling__LazyFunctionCreatorAutoloadForModule"",; 6604 ""Failed to load library %s"", LibName.c_str());; 6605 return false;; 6606 }; 6607 return true; //success.; 6608 };; 6609 ; 6610 std::string libName = DLM.searchLibrariesForSymbol(mangled_name,; 6611 /*searchSystem=*/ true);; 6612 ; 6613 assert(!llvm::StringRef(libName).startswith(""libNew"") &&; 6614 ""We must not resolve symbols from libNew!"");; 6615 ; 6616 if (libName.empty()); 6617 return nullptr;; 6618 ; 6619 if (!LibLoader(libName)); 6620 return nullptr;; 6621 ; 6622 return llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(dlsym_mangled_name);; 6623}; 6624 ; 6625////////////////////////////////////////////////////////////////////////////////; 6626 ; 6627Bool_t TCling::IsAutoLoadNamespaceCandidate(const clang::NamespaceDecl* nsDecl); 6628{; 6629 return fNSFromRootmaps.count(nsDecl) != 0;; 6630}; 6631 ; 6632////////////////////////////////////////////////////////////////////////////////; 6633/// Internal function. Actually do the update of the ClassInfo when seeing; 6634// new TagDecl or NamespaceDecl.; 6635void TCling::RefreshClassInfo(TClass *cl, const clang::NamedDecl *def, bool alias); 6636{; 6637 ; 6638 TClingClassInfo *cci = ((TClingClassInfo *)cl->fClassInfo);; 6639 if (cci) {; 6640 /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:257412,assert,assert,257412,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"////////////////////////////////////////; 121/// steering the creation of a new dataset; 122 ; 123TMVA::DataSet* TMVA::DataSetFactory::CreateDataSet( TMVA::DataSetInfo& dsi,; 124 TMVA::DataInputHandler& dataInput ); 125{; 126 // build the first dataset from the data input; 127 DataSet * ds = BuildInitialDataSet( dsi, dataInput );; 128 ; 129 if (ds->GetNEvents() > 1 && fComputeCorrelations ) {; 130 CalcMinMax(ds,dsi);; 131 ; 132 // from the final dataset build the correlation matrix; 133 for (UInt_t cl = 0; cl< dsi.GetNClasses(); cl++) {; 134 const TString className = dsi.GetClassInfo(cl)->GetName();; 135 dsi.SetCorrelationMatrix( className, CalcCorrelationMatrix( ds, cl ) );; 136 if (fCorrelations) {; 137 dsi.PrintCorrelationMatrix(className);; 138 }; 139 }; 140 //Log() << kHEADER << Endl;; 141 Log() << kHEADER << Form(""[%s] : "",dsi.GetName()) << "" "" << Endl << Endl;; 142 }; 143 ; 144 return ds;; 145}; 146 ; 147////////////////////////////////////////////////////////////////////////////////; 148 ; 149TMVA::DataSet* TMVA::DataSetFactory::BuildDynamicDataSet( TMVA::DataSetInfo& dsi ); 150{; 151 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""Build DataSet consisting of one Event with dynamically changing variables"" << Endl;; 152 DataSet* ds = new DataSet(dsi);; 153 ; 154 // create a DataSet with one Event which uses dynamic variables; 155 // (pointers to variables); 156 if(dsi.GetNClasses()==0){; 157 dsi.AddClass( ""data"" );; 158 dsi.GetClassInfo( ""data"" )->SetNumber(0);; 159 }; 160 ; 161 std::vector<Float_t*>* evdyn = new std::vector<Float_t*>(0);; 162 ; 163 std::vector<VariableInfo>& varinfos = dsi.GetVariableInfos();; 164 ; 165 if (varinfos.empty()); 166 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName()) << ""Dynamic data set cannot be built, since no variable informations are present. Apparently no variables have been set. This should not happen, please contact the TMVA authors."" << Endl;; 167 ; 168 std::vector<VariableInfo>::iterator it = varinfos.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:5221,Log,Log,5221,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"////////////////////////////////////////; 425/// parse option string for ANN methods; 426/// default settings (should be defined in theOption string); 427///; 428/// format and syntax of option string: ""3000:N:N+2:N-3:6""; 429///; 430/// where:; 431/// - 3000 - number of training cycles (epochs); 432/// - N - number of nodes in first hidden layer, where N is the number; 433/// of discriminating variables used (note that the first ANN; 434/// layer necessarily has N nodes, and hence is not given).; 435/// - N+2 - number of nodes in 2nd hidden layer (2 nodes more than; 436/// number of variables); 437/// - N-3 - number of nodes in 3rd hidden layer (3 nodes less than; 438/// number of variables); 439/// - 6 - 6 nodes in last (4th) hidden layer (note that the last ANN; 440/// layer in MVA has 2 nodes, each one for signal and background; 441/// classes); 442 ; 443vector<Int_t>* TMVA::Tools::ParseANNOptionString( TString theOptions, Int_t nvar,; 444 vector<Int_t>* nodes ); 445{; 446 TList* list = TMVA::Tools::ParseFormatLine( theOptions, "":"" );; 447 ; 448 ; 449 // sanity check; 450 if (list->GetSize() < 1) {; 451 Log() << kFATAL << ""<ParseANNOptionString> unrecognized option string: "" << theOptions << Endl;; 452 }; 453 ; 454 // add number of cycles; 455 nodes->push_back( atoi( ((TObjString*)list->At(0))->GetString() ) );; 456 ; 457 Int_t a;; 458 if (list->GetSize() > 1) {; 459 for (Int_t i=1; i<list->GetSize(); i++) {; 460 TString s = ((TObjString*)list->At(i))->GetString();; 461 s.ToUpper();; 462 if (s(0) == 'N') {; 463 if (s.Length() > 1) nodes->push_back( nvar + atoi(&s[1]) );; 464 else nodes->push_back( nvar );; 465 }; 466 else if ((a = atoi( s )) > 0) nodes->push_back( atoi(s ) );; 467 else {; 468 Log() << kFATAL << ""<ParseANNOptionString> unrecognized option string: "" << theOptions << Endl;; 469 }; 470 }; 471 }; 472 ; 473 return nodes;; 474}; 475 ; 476////////////////////////////////////////////////////////////////////////////////; 477/// check quality of splining by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:15644,Log,Log,15644,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"///////////////////////////////////////; 2655/// Adds all graphs from the collection to this graph.; 2656/// Returns the total number of points in the result or -1 in case of an error.; 2657 ; 2658Int_t TGraph::Merge(TCollection* li); 2659{; 2660 TIter next(li);; 2661 while (TObject* o = next()) {; 2662 TGraph *g = dynamic_cast<TGraph*>(o);; 2663 if (!g) {; 2664 Error(""Merge"",; 2665 ""Cannot merge - an object which doesn't inherit from TGraph found in the list"");; 2666 return -1;; 2667 }; 2668 DoMerge(g);; 2669 }; 2670 return GetN();; 2671}; 2672 ; 2673////////////////////////////////////////////////////////////////////////////////; 2674/// protected function to perform the merge operation of a graph; 2675 ; 2676Bool_t TGraph::DoMerge(const TGraph* g); 2677{; 2678 Double_t x = 0, y = 0;; 2679 for (Int_t i = 0 ; i < g->GetN(); i++) {; 2680 g->GetPoint(i, x, y);; 2681 SetPoint(GetN(), x, y);; 2682 }; 2683 return kTRUE;; 2684}; 2685 ; 2686////////////////////////////////////////////////////////////////////////////////; 2687/// Move all graph points on specified values dx,dy; 2688/// If log argument specified, calculation done in logarithmic scale like:; 2689/// new_value = exp( log(old_value) + delta );; 2690 ; 2691void TGraph::MovePoints(Double_t dx, Double_t dy, Bool_t logx, Bool_t logy); 2692{; 2693 Double_t x = 0, y = 0;; 2694 for (Int_t i = 0 ; i < GetN(); i++) {; 2695 GetPoint(i, x, y);; 2696 if (!logx) {; 2697 x += dx;; 2698 } else if (x > 0) {; 2699 x = TMath::Exp(TMath::Log(x) + dx);; 2700 }; 2701 if (!logy) {; 2702 y += dy;; 2703 } else if (y > 0) {; 2704 y = TMath::Exp(TMath::Log(y) + dy);; 2705 }; 2706 SetPoint(i, x, y);; 2707 }; 2708}; 2709 ; 2710 ; 2711////////////////////////////////////////////////////////////////////////////////; 2712/// Find zero of a continuous function.; 2713/// This function finds a real zero of the continuous real; 2714/// function Y(X) in a given interval (A,B). See accompanying; 2715/// notes for details of the argument list and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:96065,log,log,96065,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,9,"['Log', 'log']","['Log', 'log', 'logarithmic', 'logx', 'logy']"
Testability,"///////////////////////////////////////; 3927/// Fit histogram with the function pointer f1.; 3928///; 3929/// \param[in] f1 pointer to the function object; 3930/// \param[in] option string defining the fit options (see table below).; 3931/// \param[in] goption specify a list of graphics options. See TH1::Draw for a complete list of these options.; 3932/// \param[in] xxmin lower fitting range; 3933/// \param[in] xxmax upper fitting range; 3934/// \return A smart pointer to the TFitResult class; 3935///; 3936/// \anchor HFitOpt; 3937/// ### Histogram Fitting Options; 3938///; 3939/// Here is the full list of fit options that can be given in the parameter `option`.; 3940/// Several options can be used together by concatanating the strings without the need of any delimiters.; 3941///; 3942/// option | description; 3943/// -------|------------; 3944/// ""L"" | Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts.; 3945/// ""WL"" | Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits.; 3946/// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; 3947/// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; 3948/// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; 3949/// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; 3950/// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; 3951/// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; 3952/// ""U"" | U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:156382,log,log,156382,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['log'],['log']
Testability,"////////////////////////////////////; 1879 ; 1880TProfile *TH2::DoProfile(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) const; 1881{; 1882 TString opt = option;; 1883 // extract cut infor; 1884 TString cut;; 1885 Int_t i1 = opt.Index(""["");; 1886 if (i1>=0) {; 1887 Int_t i2 = opt.Index(""]"");; 1888 cut = opt(i1,i2-i1+1);; 1889 }; 1890 opt.ToLower();; 1891 bool originalRange = opt.Contains(""o"");; 1892 ; 1893 const TAxis& outAxis = ( onX ? fXaxis : fYaxis );; 1894 const TAxis& inAxis = ( onX ? fYaxis : fXaxis );; 1895 Int_t inN = inAxis.GetNbins();; 1896 const char *expectedName = ( onX ? ""_pfx"" : ""_pfy"" );; 1897 ; 1898 // outer axis cannot be outside original axis (this fixes ROOT-8781); 1899 // and firstOutBin and lastOutBin cannot be both equal to zero; 1900 Int_t firstOutBin = std::max(outAxis.GetFirst(),1);; 1901 Int_t lastOutBin = std::min(outAxis.GetLast(),outAxis.GetNbins() ) ;; 1902 ; 1903 if ( lastbin < firstbin && inAxis.TestBit(TAxis::kAxisRange) ) {; 1904 firstbin = inAxis.GetFirst();; 1905 lastbin = inAxis.GetLast();; 1906 // For special case of TAxis::SetRange, when first == 1 and last; 1907 // = N and the range bit has been set, the TAxis will return 0; 1908 // for both.; 1909 if (firstbin == 0 && lastbin == 0); 1910 {; 1911 firstbin = 1;; 1912 lastbin = inAxis.GetNbins();; 1913 }; 1914 }; 1915 if (firstbin < 0) firstbin = 1;; 1916 if (lastbin < 0) lastbin = inN;; 1917 if (lastbin > inN+1) lastbin = inN;; 1918 ; 1919 // Create the profile histogram; 1920 char *pname = (char*)name;; 1921 if (name && strcmp(name, expectedName) == 0) {; 1922 Int_t nch = strlen(GetName()) + 5;; 1923 pname = new char[nch];; 1924 snprintf(pname,nch,""%s%s"",GetName(),name);; 1925 }; 1926 TProfile *h1=nullptr;; 1927 //check if a profile with identical name exist; 1928 // if compatible reset and re-use previous histogram; 1929 TObject *h1obj = gROOT->FindObject(pname);; 1930 if (h1obj && h1obj->InheritsFrom(TH1::Class())) {; 1931 if (h1obj->IsA() != T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:76718,Test,TestBit,76718,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['Test'],['TestBit']
Testability,"////////////////////////////////////; 1994/// Get the multi-class output values for a single event; 1995//////////////////////////////////////////////////////////////////////////; 1996const std::vector<Float_t> &TMVA::MethodDL::GetMulticlassValues(); 1997{; 1998 ; 1999 FillInputTensor();; 2000 ; 2001 fNet->Prediction(*fYHat, fXInput, fOutputFunction);; 2002 ; 2003 size_t nClasses = DataInfo().GetNClasses();; 2004 R__ASSERT(nClasses == fYHat->GetNcols());; 2005 ; 2006 if (fMulticlassReturnVal == NULL) {; 2007 fMulticlassReturnVal = new std::vector<Float_t>(nClasses);; 2008 }; 2009 R__ASSERT(fMulticlassReturnVal->size() == nClasses);; 2010 ; 2011 for (size_t i = 0; i < nClasses; i++) {; 2012 (*fMulticlassReturnVal)[i] = (*fYHat)(0, i);; 2013 }; 2014 return *fMulticlassReturnVal;; 2015}; 2016 ; 2017////////////////////////////////////////////////////////////////////////////////; 2018/// Evaluate the DeepNet on a vector of input values stored in the TMVA Event class; 2019/// Here we will evaluate using a default batch size and the same architecture used for ; 2020/// Training; 2021////////////////////////////////////////////////////////////////////////////////; 2022std::vector<Double_t> MethodDL::GetMvaValues(Long64_t firstEvt, Long64_t lastEvt, Bool_t logProgress); 2023{; 2024 ; 2025 Long64_t nEvents = Data()->GetNEvents();; 2026 if (firstEvt > lastEvt || lastEvt > nEvents) lastEvt = nEvents;; 2027 if (firstEvt < 0) firstEvt = 0;; 2028 nEvents = lastEvt-firstEvt;; 2029 ; 2030 // use same batch size as for training (from first strategy); 2031 size_t defaultEvalBatchSize = (fXInput.GetSize() > 1000) ? 100 : 1000;; 2032 size_t batchSize = (fTrainingSettings.empty()) ? defaultEvalBatchSize : fTrainingSettings.front().batchSize;; 2033 if ( size_t(nEvents) < batchSize ) batchSize = nEvents;; 2034 ; 2035 // using for training same scalar type defined for the prediction; 2036 if (this->GetArchitectureString() == ""GPU"") {; 2037#ifdef R__HAS_TMVAGPU; 2038 Log() << kINFO << ""Eval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:80460,log,logProgress,80460,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['log'],['logProgress']
Testability,"//////////////////////////////////; 314/// Destructor.; 315 ; 316TRint::~TRint(); 317{; 318 delete gTabCom;; 319 gTabCom = nullptr;; 320 Gl_in_key = nullptr;; 321 Gl_beep_hook = nullptr;; 322 fInputHandler->Remove();; 323 delete fInputHandler;; 324 // We can't know where the signal handler was changed since we started ...; 325 // so for now let's not delete it.; 326// TSignalHandler *ih = GetSignalHandler();; 327// ih->Remove();; 328// SetSignalHandler(0);; 329// delete ih;; 330}; 331 ; 332////////////////////////////////////////////////////////////////////////////////; 333/// Execute logon macro's. There are three levels of logon macros that; 334/// will be executed: the system logon etc/system.rootlogon.C, the global; 335/// user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; 336/// compatibility also the logon macro as specified by the Rint.Logon; 337/// environment setting, by default ./rootlogon.C, will be executed.; 338/// No logon macros will be executed when the system is started with; 339/// the -n option.; 340 ; 341void TRint::ExecLogon(); 342{; 343 if (NoLogOpt()) return;; 344 ; 345 TString name = "".rootlogon.C"";; 346 TString sname = ""system"";; 347 sname += name;; 348 char *s = gSystem->ConcatFileName(TROOT::GetEtcDir(), sname);; 349 if (!gSystem->AccessPathName(s, kReadPermission)) {; 350 ProcessFile(s);; 351 }; 352 delete [] s;; 353 s = gSystem->ConcatFileName(gSystem->HomeDirectory(), name);; 354 if (!gSystem->AccessPathName(s, kReadPermission)) {; 355 ProcessFile(s);; 356 }; 357 delete [] s;; 358 // avoid executing ~/.rootlogon.C twice; 359 if (strcmp(gSystem->HomeDirectory(), gSystem->WorkingDirectory())) {; 360 if (!gSystem->AccessPathName(name, kReadPermission)); 361 ProcessFile(name);; 362 }; 363 ; 364 // execute also the logon macro specified by ""Rint.Logon""; 365 const char *logon = gEnv->GetValue(""Rint.Logon"", (char*)nullptr);; 366 if (logon) {; 367 char *mac = gSystem->Which(TROOT::GetMacroPath(), logon, kReadPermission);; 368",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:11764,log,logon,11764,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['log'],['logon']
Testability,"//////////////////////////////////; 883/// Write this object to the current directory. For more see the; 884/// const version of this method.; 885 ; 886Int_t TObject::Write(const char *name, Int_t option, Int_t bufsize); 887{; 888 return ((const TObject*)this)->Write(name, option, bufsize);; 889}; 890 ; 891////////////////////////////////////////////////////////////////////////////////; 892/// Stream an object of class TObject.; 893 ; 894void TObject::Streamer(TBuffer &R__b); 895{; 896 if (IsA()->CanIgnoreTObjectStreamer()) return;; 897 UShort_t pidf;; 898 if (R__b.IsReading()) {; 899 R__b.SkipVersion(); // Version_t R__v = R__b.ReadVersion(); if (R__v) { }; 900 R__b >> fUniqueID;; 901 const UInt_t isonheap = fBits & kIsOnHeap; // Record how this instance was actually allocated.; 902 R__b >> fBits;; 903 fBits |= isonheap | kNotDeleted; // by definition de-serialized object are not yet deleted.; 904 if (TestBit(kIsReferenced)) {; 905 //if the object is referenced, we must read its old address; 906 //and store it in the ProcessID map in gROOT; 907 R__b >> pidf;; 908 pidf += R__b.GetPidOffset();; 909 TProcessID *pid = R__b.ReadProcessID(pidf);; 910 if (pid) {; 911 UInt_t gpid = pid->GetUniqueID();; 912 if (gpid>=0xff) {; 913 fUniqueID = fUniqueID | 0xff000000;; 914 } else {; 915 fUniqueID = ( fUniqueID & 0xffffff) + (gpid<<24);; 916 }; 917 pid->PutObjectWithID(this);; 918 }; 919 }; 920 } else {; 921 R__b.WriteVersion(TObject::IsA());; 922 // Can not read TFile.h here and avoid going through the interpreter by; 923 // simply hard-coding this value.; 924 // This **must** be equal to TFile::k630forwardCompatibility; 925 constexpr int TFile__k630forwardCompatibility = BIT(2);; 926 const auto parent = R__b.GetParent();; 927 if (!TestBit(kIsReferenced)) {; 928 R__b << fUniqueID;; 929 if (R__unlikely(parent && parent->TestBit(TFile__k630forwardCompatibility))); 930 R__b << fBits;; 931 else; 932 R__b << (fBits & (~kIsOnHeap & ~kNotDeleted));; 933 } else {; 934 //if the object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:33422,Test,TestBit,33422,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////////////////////; 134/// Set the name of the TNamed.; 135///; 136/// WARNING: if the object is a member of a THashTable or THashList container; 137/// the container must be Rehash()'ed after SetName(). For example the list; 138/// of objects in the current directory is a THashList.; 139 ; 140void TNamed::SetName(const char *name); 141{; 142 fName = name;; 143 if (gPad && TestBit(kMustCleanup)) gPad->Modified();; 144}; 145 ; 146////////////////////////////////////////////////////////////////////////////////; 147/// Set all the TNamed parameters (name and title).; 148//; 149/// WARNING: if the name is changed and the object is a member of a; 150/// THashTable or THashList container the container must be Rehash()'ed; 151/// after SetName(). For example the list of objects in the current; 152/// directory is a THashList.; 153 ; 154void TNamed::SetNameTitle(const char *name, const char *title); 155{; 156 fName = name;; 157 fTitle = title;; 158 if (gPad && TestBit(kMustCleanup)) gPad->Modified();; 159}; 160 ; 161////////////////////////////////////////////////////////////////////////////////; 162/// Set the title of the TNamed.; 163 ; 164void TNamed::SetTitle(const char *title); 165{; 166 fTitle = title;; 167 if (gPad && TestBit(kMustCleanup)) gPad->Modified();; 168}; 169 ; 170////////////////////////////////////////////////////////////////////////////////; 171/// Return size of the TNamed part of the TObject.; 172 ; 173Int_t TNamed::Sizeof() const; 174{; 175 Int_t nbytes = fName.Sizeof() + fTitle.Sizeof();; 176 return nbytes;; 177}; Int_tint Int_tDefinition RtypesCore.h:45; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; Strlen.h; TClass.h; namechar name[80]Definition TGX11.cxx:110; TNamed.h; TROOT.h; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::FillBuffervirtual void FillBuffer(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8cxx_source.html:5350,Test,TestBit,5350,doc/master/TNamed_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////////////////////; 65/// Assignment operator; 66 ; 67TLine &TLine::operator=(const TLine &src); 68{; 69 src.TLine::Copy(*this);; 70 return *this;; 71}; 72 ; 73////////////////////////////////////////////////////////////////////////////////; 74/// Copy this line to line.; 75 ; 76void TLine::Copy(TObject &obj) const; 77{; 78 TObject::Copy(obj);; 79 TAttLine::Copy(((TLine&)obj));; 80 ((TLine&)obj).fX1 = fX1;; 81 ((TLine&)obj).fY1 = fY1;; 82 ((TLine&)obj).fX2 = fX2;; 83 ((TLine&)obj).fY2 = fY2;; 84}; 85 ; 86////////////////////////////////////////////////////////////////////////////////; 87/// Compute distance from point px,py to a line.; 88 ; 89Int_t TLine::DistancetoPrimitive(Int_t px, Int_t py); 90{; 91 if (!gPad) return 9999;; 92 if (!TestBit(kLineNDC)) return DistancetoLine(px,py,gPad->XtoPad(fX1),gPad->YtoPad(fY1),gPad->XtoPad(fX2),gPad->YtoPad(fY2));; 93 Double_t x1 = gPad->GetX1() + fX1*(gPad->GetX2()-gPad->GetX1());; 94 Double_t y1 = gPad->GetY1() + fY1*(gPad->GetY2()-gPad->GetY1());; 95 Double_t x2 = gPad->GetX1() + fX2*(gPad->GetX2()-gPad->GetX1());; 96 Double_t y2 = gPad->GetY1() + fY2*(gPad->GetY2()-gPad->GetY1());; 97 return DistancetoLine(px,py,x1,y1,x2,y2);; 98}; 99 ; 100////////////////////////////////////////////////////////////////////////////////; 101/// Draw this line with new coordinates.; 102 ; 103TLine *TLine::DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); 104{; 105 TLine *newline = new TLine(x1, y1, x2, y2);; 106 TAttLine::Copy(*newline);; 107 newline->SetBit(kCanDelete);; 108 newline->AppendPad();; 109 return newline;; 110}; 111 ; 112////////////////////////////////////////////////////////////////////////////////; 113/// Draw this line with new coordinates in NDC.; 114 ; 115TLine *TLine::DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2); 116{; 117 TLine *newline = DrawLine(x1, y1, x2, y2);; 118 newline->SetBit(kLineNDC);; 119 return newline;; 120}; 121 ; 122///////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLine_8cxx_source.html:2618,Test,TestBit,2618,doc/master/TLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLine_8cxx_source.html,1,['Test'],['TestBit']
Testability,"////////////////////////////////; 258/// Copy constructor; 259 ; 260RooAbsPdf::RooAbsPdf(const RooAbsPdf& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be compli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:10920,log,logEvalError,10920,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['logEvalError']
Testability,"////////////////////////////////; 319/// Add a float spectator or expression to the reader; 320 ; 321void TMVA::Reader::AddSpectator( const TString& expression, Float_t* datalink ); 322{; 323 DataInfo().AddSpectator( expression, """", """", 0, 0, 'F', kFALSE ,(void*)datalink );; 324}; 325 ; 326////////////////////////////////////////////////////////////////////////////////; 327/// Add an integer spectator or expression to the reader; 328 ; 329void TMVA::Reader::AddSpectator( const TString& expression, Int_t* datalink ); 330{; 331 DataInfo().AddSpectator(expression, """", """", 0, 0, 'I', kFALSE, (void*)datalink );; 332}; 333 ; 334////////////////////////////////////////////////////////////////////////////////; 335/// read the method type from the file; 336 ; 337TString TMVA::Reader::GetMethodTypeFromFile( const TString& filename ); 338{; 339 std::ifstream fin( filename );; 340 if (!fin.good()) { // file not found --> Error; 341 Log() << kFATAL << ""<BookMVA> fatal error: ""; 342 << ""unable to open input weight file: "" << filename << Endl;; 343 }; 344 ; 345 TString fullMethodName("""");; 346 if (filename.EndsWith("".xml"")) {; 347 fin.close();; 348 void* doc = gTools().xmlengine().ParseFile(filename,gTools().xmlenginebuffersize());// the default buffer size in TXMLEngine::ParseFile is 100k. Starting with ROOT 5.29 one can set the buffer size, see: http://savannah.cern.ch/bugs/?78864. This might be necessary for large XML files; 349 void* rootnode = gTools().xmlengine().DocGetRootElement(doc); // node ""MethodSetup""; 350 gTools().ReadAttr(rootnode, ""Method"", fullMethodName);; 351 gTools().xmlengine().FreeDoc(doc);; 352 }; 353 else {; 354 char buf[512];; 355 fin.getline(buf,512);; 356 while (!TString(buf).BeginsWith(""Method"")) fin.getline(buf,512);; 357 fullMethodName = TString(buf);; 358 fin.close();; 359 }; 360 TString methodType = fullMethodName(0,fullMethodName.Index(""::""));; 361 if (methodType.Contains("" "")) methodType = methodType(methodType.Last(' ')+1,methodType.Length());; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:12161,Log,Log,12161,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['Log'],['Log']
Testability,"////////////////////////////////; 407/// Draw this line with new coordinates in NDC.; 408 ; 409void TLine::PaintLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); 410{; 411 if (!gPad) return;; 412 TAttLine::Modify(); //Change line attributes only if necessary; 413 gPad->PaintLineNDC(u1,v1,u2,v2);; 414}; 415 ; 416////////////////////////////////////////////////////////////////////////////////; 417/// Dump this line with its attributes.; 418 ; 419void TLine::Print(Option_t *) const; 420{; 421 printf(""%s X1=%f Y1=%f X2=%f Y2=%f"",IsA()->GetName(),fX1,fY1,fX2,fY2);; 422 if (GetLineColor() != 1) printf("" Color=%d"",GetLineColor());; 423 if (GetLineStyle() != 1) printf("" Style=%d"",GetLineStyle());; 424 if (GetLineWidth() != 1) printf("" Width=%d"",GetLineWidth());; 425 printf(""\n"");; 426}; 427 ; 428////////////////////////////////////////////////////////////////////////////////; 429/// Save primitive as a C++ statement(s) on output stream out; 430 ; 431void TLine::SavePrimitive(std::ostream &out, Option_t * /*= """"*/); 432{; 433 if (gROOT->ClassSaved(TLine::Class())) {; 434 out<<"" "";; 435 } else {; 436 out<<"" TLine *"";; 437 }; 438 out<<""line = new TLine(""<<fX1<<"",""<<fY1<<"",""<<fX2<<"",""<<fY2<<"");""<<std::endl;; 439 ; 440 SaveLineAttributes(out,""line"",1,1,1);; 441 ; 442 if (TestBit(kLineNDC)); 443 out<<"" line->SetNDC();""<<std::endl;; 444 ; 445 out<<"" line->Draw();""<<std::endl;; 446}; 447 ; 448////////////////////////////////////////////////////////////////////////////////; 449/// Check whether this line is to be drawn horizontally.; 450 ; 451Bool_t TLine::IsHorizontal(); 452{; 453 return TestBit(kHorizontal);; 454}; 455 ; 456////////////////////////////////////////////////////////////////////////////////; 457/// Check whether this line is to be drawn vertically.; 458 ; 459Bool_t TLine::IsVertical(); 460{; 461 return TestBit(kVertical);; 462}; 463 ; 464////////////////////////////////////////////////////////////////////////////////; 465/// Set NDC mode on if isNDC = kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLine_8cxx_source.html:13345,Test,TestBit,13345,doc/master/TLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLine_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//////////////////////////////; 1469 ; 1470void TMVA::MethodDNN::MakeClassSpecific( std::ostream& /*fout*/,; 1471 const TString& /*className*/ ) const; 1472{; 1473}; 1474 ; 1475////////////////////////////////////////////////////////////////////////////////; 1476 ; 1477void TMVA::MethodDNN::GetHelpMessage() const; 1478{; 1479 // get help message text; 1480 //; 1481 // typical length of text line:; 1482 // ""|--------------------------------------------------------------|""; 1483 TString col = gConfig().WriteOptionsReference() ? TString() : gTools().Color(""bold"");; 1484 TString colres = gConfig().WriteOptionsReference() ? TString() : gTools().Color(""reset"");; 1485 ; 1486 Log() << Endl;; 1487 Log() << col << ""--- Short description:"" << colres << Endl;; 1488 Log() << Endl;; 1489 Log() << ""The DNN neural network is a feedforward"" << Endl;; 1490 Log() << ""multilayer perceptron implementation. The DNN has a user-"" << Endl;; 1491 Log() << ""defined hidden layer architecture, where the number of input (output)"" << Endl;; 1492 Log() << ""nodes is determined by the input variables (output classes, i.e., "" << Endl;; 1493 Log() << ""signal and one background, regression or multiclass). "" << Endl;; 1494 Log() << Endl;; 1495 Log() << col << ""--- Performance optimisation:"" << colres << Endl;; 1496 Log() << Endl;; 1497 ; 1498 const char* txt = ""The DNN supports various options to improve performance in terms of training speed and \n \; 1499reduction of overfitting: \n \; 1500\n \; 1501 - different training settings can be stacked. Such that the initial training \n\; 1502 is done with a large learning rate and a large drop out fraction whilst \n \; 1503 in a later stage learning rate and drop out can be reduced. \n \; 1504 - drop out \n \; 1505 [recommended: \n \; 1506 initial training stage: 0.0 for the first layer, 0.5 for later layers. \n \; 1507 later training stage: 0.1 or 0.0 for all layers \n \; 1508 final training stage: 0.0] \n \; 1509 Drop out is a technique where a at each trai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:54005,Log,Log,54005,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['Log'],['Log']
Testability,"/////////////////////////////; 128/// Returns the text as UNICODE.; 129 ; 130const void *TText::GetWcsTitle(void) const; 131{; 132 if (fWcsTitle) {; 133 return reinterpret_cast<std::wstring *>(fWcsTitle)->c_str();; 134 } else {; 135 return nullptr;; 136 }; 137}; 138 ; 139////////////////////////////////////////////////////////////////////////////////; 140/// Compute distance from point px,py to a string.; 141/// The rectangle surrounding this string is evaluated.; 142/// If the point (px,py) is in the rectangle, the distance is set to zero.; 143 ; 144Int_t TText::DistancetoPrimitive(Int_t px, Int_t py); 145{; 146 if (!gPad) return 9999;; 147 Int_t ptx, pty;; 148 ; 149 TAttText::Modify(); // change text attributes only if necessary; 150 ; 151 if (TestBit(kTextNDC)) {; 152 ptx = gPad->UtoPixel(fX);; 153 pty = gPad->VtoPixel(fY);; 154 } else {; 155 ptx = gPad->XtoAbsPixel(gPad->XtoPad(fX));; 156 pty = gPad->YtoAbsPixel(gPad->YtoPad(fY));; 157 }; 158 ; 159 // Get the text control box; 160 Int_t cBoxX[5], cBoxY[5];; 161 GetControlBox(ptx, pty, -fTextAngle, cBoxX, cBoxY);; 162 cBoxY[4] = cBoxY[0];; 163 cBoxX[4] = cBoxX[0];; 164 ; 165 // Check if the point (px,py) is inside the text control box; 166 if (TMath::IsInside(px, py, 5, cBoxX, cBoxY)){; 167 return 0;; 168 } else {; 169 return 9999;; 170 }; 171}; 172 ; 173////////////////////////////////////////////////////////////////////////////////; 174/// Draw this text with new coordinates.; 175 ; 176TText *TText::DrawText(Double_t x, Double_t y, const char *text); 177{; 178 TText *newtext = new TText(x, y, text);; 179 TAttText::Copy(*newtext);; 180 newtext->SetBit(kCanDelete);; 181 if (TestBit(kTextNDC)) newtext->SetNDC();; 182 newtext->AppendPad();; 183 return newtext;; 184}; 185 ; 186////////////////////////////////////////////////////////////////////////////////; 187/// Draw this text with new coordinates.; 188 ; 189TText *TText::DrawText(Double_t x, Double_t y, const wchar_t *text); 190{; 191 TText *newtext = new TText(x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TText_8cxx_source.html:4504,Test,TestBit,4504,doc/master/TText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TText_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////////////////; 6107/// Demangle the name (from the typeinfo) and then request the class; 6108/// via the usual name based interface (TClass::GetClass).; 6109 ; 6110TClass *TCling::GetClass(const std::type_info& typeinfo, Bool_t load) const; 6111{; 6112 int err = 0;; 6113 char* demangled_name = TClassEdit::DemangleTypeIdName(typeinfo, err);; 6114 if (err) return nullptr;; 6115 TClass* theClass = TClass::GetClass(demangled_name, load, kTRUE);; 6116 free(demangled_name);; 6117 return theClass;; 6118}; 6119 ; 6120////////////////////////////////////////////////////////////////////////////////; 6121/// Load library containing the specified class. Returns 0 in case of error; 6122/// and 1 in case if success.; 6123 ; 6124Int_t TCling::AutoLoad(const std::type_info& typeinfo, Bool_t knowDictNotLoaded /* = kFALSE */); 6125{; 6126 assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");; 6127 ; 6128 int err = 0;; 6129 char* demangled_name_c = TClassEdit::DemangleTypeIdName(typeinfo, err);; 6130 if (err) {; 6131 return 0;; 6132 }; 6133 ; 6134 std::string demangled_name(demangled_name_c);; 6135 free(demangled_name_c);; 6136 ; 6137 // AutoLoad expects (because TClass::GetClass already prepares it that way) a; 6138 // shortened name.; 6139 TClassEdit::TSplitType splitname( demangled_name.c_str(), (TClassEdit::EModType)(TClassEdit::kLong64 | TClassEdit::kDropStd) );; 6140 splitname.ShortType(demangled_name, TClassEdit::kDropStlDefault | TClassEdit::kDropStd);; 6141 ; 6142 // No need to worry about typedef, they aren't any ... but there are; 6143 // inlined namespaces ...; 6144 ; 6145 Int_t result = AutoLoad(demangled_name.c_str());; 6146 if (result == 0) {; 6147 demangled_name = TClassEdit::GetLong64_Name(demangled_name);; 6148 result = AutoLoad(demangled_name.c_str(), knowDictNotLoaded);; 6149 }; 6150 ; 6151 return result;; 6152}; 6153 ; 6154////////////////////////////////////////////////////////////////////////////////; 6155// Get the list of '",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:237381,assert,assert,237381,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"//////////////////////////; 260/// Return pointer to parent of this buffer.; 261 ; 262TObject *TBuffer::GetParent() const; 263{; 264 return fParent;; 265}; 266 ; 267////////////////////////////////////////////////////////////////////////////////; 268/// Set parent owning this buffer.; 269 ; 270void TBuffer::SetParent(TObject *parent); 271{; 272 fParent = parent;; 273}; 274////////////////////////////////////////////////////////////////////////////////; 275/// Return the reallocation method currently used.; 276 ; 277ReAllocCharFun_t TBuffer::GetReAllocFunc() const; 278{; 279 return fReAllocFunc;; 280}; 281 ; 282////////////////////////////////////////////////////////////////////////////////; 283/// Set which memory reallocation method to use. If reallocafunc is null,; 284/// reset it to the default value (TStorage::ReAlloc); 285 ; 286void TBuffer::SetReAllocFunc(ReAllocCharFun_t reallocfunc ); 287{; 288 if (reallocfunc) {; 289 fReAllocFunc = reallocfunc;; 290 } else {; 291 if (TestBit(kIsOwner)) {; 292 fReAllocFunc = TStorage::ReAllocChar;; 293 } else {; 294 fReAllocFunc = R__NoReAllocChar;; 295 }; 296 }; 297}; 298 ; 299////////////////////////////////////////////////////////////////////////////////; 300/// Set buffer in read mode.; 301 ; 302void TBuffer::SetReadMode(); 303{; 304 if ( (fMode&kWrite)!=0 ) {; 305 // We had reserved space for the free block count,; 306 // release it,; 307 fBufSize += kExtraSpace;; 308 }; 309 fMode = kRead;; 310}; 311 ; 312////////////////////////////////////////////////////////////////////////////////; 313/// Set buffer in write mode.; 314 ; 315void TBuffer::SetWriteMode(); 316{; 317 if ( (fMode&kWrite)==0 ) {; 318 // We had not yet reserved space for the free block count,; 319 // reserve it now.; 320 fBufSize -= kExtraSpace;; 321 }; 322 fMode = kWrite;; 323}; 324 ; 325////////////////////////////////////////////////////////////////////////////////; 326/// Forward to TROOT::GetClass().; 327 ; 328TClass *TBuffer::GetClass(const std::type_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:9952,Test,TestBit,9952,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//////////////////////////; 678/// evaluates the multiclass MVA; 679 ; 680Float_t TMVA::Reader::EvaluateMulticlass( UInt_t clsNumber, const TString& methodTag, Double_t aux ); 681{; 682 try {; 683 return EvaluateMulticlass(methodTag, aux).at(clsNumber);; 684 }; 685 catch (std::out_of_range &) {; 686 Log() << kWARNING << ""Multiclass could not be evaluated for class-number "" << clsNumber << Endl;; 687 return 0;; 688 }; 689}; 690 ; 691 ; 692////////////////////////////////////////////////////////////////////////////////; 693/// return pointer to method with tag ""methodTag""; 694 ; 695TMVA::IMethod* TMVA::Reader::FindMVA( const TString& methodTag ); 696{; 697 std::map<TString, IMethod*>::iterator it = fMethodMap.find( methodTag );; 698 if (it != fMethodMap.end()) return it->second;; 699 Log() << kERROR << ""Method "" << methodTag << "" not found!"" << Endl;; 700 return 0;; 701}; 702 ; 703////////////////////////////////////////////////////////////////////////////////; 704/// evaluates probability of MVA for given set of input variables; 705 ; 706Double_t TMVA::Reader::GetProba( const TString& methodTag, Double_t ap_sig, Double_t mvaVal ); 707{; 708 IMethod* method = 0;; 709 std::map<TString, IMethod*>::iterator it = fMethodMap.find( methodTag );; 710 if (it == fMethodMap.end()) {; 711 for (it = fMethodMap.begin(); it!=fMethodMap.end(); ++it) Log() << ""M"" << it->first << Endl;; 712 Log() << kFATAL << ""<EvaluateMVA> unknown classifier in map: "" << method << ""; ""; 713 << ""you looked for "" << methodTag<< "" while the available methods are : "" << Endl;; 714 }; 715 else method = it->second;; 716 ; 717 MethodBase* kl = dynamic_cast<MethodBase*>(method);; 718 if(kl==0) return -1;; 719 // check for NaN in event data: (note: in the factory, this check was done already at the creation of the datasets, hence; 720 // it is not again checked in each of these subsequent calls..; 721 const Event* ev = kl->GetEvent();; 722 for (UInt_t i=0; i<ev->GetNVariables(); i++){; 723 if (TMath::IsNaN(ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:27298,Log,Log,27298,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['Log'],['Log']
Testability,"/////////////////////////; 357// Trigonometrical Functions; 358 ; 359inline Double_t Sin(Double_t);; 360inline Double_t Cos(Double_t);; 361inline Double_t Tan(Double_t);; 362inline Double_t SinH(Double_t);; 363inline Double_t CosH(Double_t);; 364inline Double_t TanH(Double_t);; 365inline Double_t ASin(Double_t);; 366inline Double_t ACos(Double_t);; 367inline Double_t ATan(Double_t);; 368inline Double_t ATan2(Double_t y, Double_t x);; 369Double_t ASinH(Double_t);; 370Double_t ACosH(Double_t);; 371Double_t ATanH(Double_t);; 372Double_t Hypot(Double_t x, Double_t y);; 373 ; 374////////////////////////////////////////////////////////////////////////////////; 375// Elementary Functions; 376 ; 377inline Double_t Ceil(Double_t x);; 378inline Int_t CeilNint(Double_t x);; 379inline Double_t Floor(Double_t x);; 380inline Int_t FloorNint(Double_t x);; 381template <typename T>; 382inline Int_t Nint(T x);; 383 ; 384inline Double_t Sq(Double_t x);; 385inline Double_t Sqrt(Double_t x);; 386inline Double_t Exp(Double_t x);; 387inline Double_t Ldexp(Double_t x, Int_t exp);; 388Double_t Factorial(Int_t i);; 389inline LongDouble_t Power(LongDouble_t x, LongDouble_t y);; 390inline LongDouble_t Power(LongDouble_t x, Long64_t y);; 391inline LongDouble_t Power(Long64_t x, Long64_t y);; 392inline Double_t Power(Double_t x, Double_t y);; 393inline Double_t Power(Double_t x, Int_t y);; 394inline Double_t Log(Double_t x);; 395Double_t Log2(Double_t x);; 396inline Double_t Log10(Double_t x);; 397inline Int_t Finite(Double_t x);; 398inline Int_t Finite(Float_t x);; 399inline Bool_t IsNaN(Double_t x);; 400inline Bool_t IsNaN(Float_t x);; 401 ; 402inline Double_t QuietNaN();; 403inline Double_t SignalingNaN();; 404inline Double_t Infinity();; 405 ; 406template <typename T>; 407struct Limits {; 408 inline static T Min();; 409 inline static T Max();; 410 inline static T Epsilon();; 411 };; 412 ; 413 // Some integer math; 414 Long_t Hypot(Long_t x, Long_t y);; 415 ; 416 /// Comparing floating points.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:12765,Log,Log,12765,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,1,['Log'],['Log']
Testability,"/////////////////////////; 6775/// Calculate range and clear pad (canvas).; 6776 ; 6777void THistPainter::PaintFrame(); 6778{; 6779 ; 6780 if (Hoption.Same) return;; 6781 ; 6782 RecalculateRange();; 6783 ; 6784 if (Hoption.Lego || Hoption.Surf || Hoption.Tri ||; 6785 Hoption.Contour == 14 || Hoption.Error >= 100) {; 6786 TObject *frame = gPad->FindObject(""TFrame"");; 6787 if (frame) gPad->Remove(frame);; 6788 return;; 6789 }; 6790 ; 6791 //The next statement is always executed on non-iOS platform,; 6792 //on iOS depends on pad mode.; 6793 if (!gPad->PadInSelectionMode() && !gPad->PadInHighlightMode()); 6794 gPad->PaintPadFrame(Hparam.xmin,Hparam.ymin,Hparam.xmax,Hparam.ymax);; 6795}; 6796 ; 6797////////////////////////////////////////////////////////////////////////////////; 6798/// [Paint functions associated to an histogram.](\ref HP28""); 6799 ; 6800void THistPainter::PaintFunction(Option_t *); 6801{; 6802 auto lnk = fFunctions->FirstLink();; 6803 ; 6804 while (lnk) {; 6805 auto obj = lnk->GetObject();; 6806 TVirtualPad::TContext ctxt(true);; 6807 if (obj->InheritsFrom(TF2::Class())) {; 6808 if (!obj->TestBit(TF2::kNotDraw)) {; 6809 if (Hoption.Lego || Hoption.Surf || Hoption.Error >= 100) {; 6810 TF2 *f2 = (TF2*)obj;; 6811 f2->SetMinimum(fH->GetMinimum());; 6812 f2->SetMaximum(fH->GetMaximum());; 6813 f2->SetRange(fH->GetXaxis()->GetXmin(), fH->GetYaxis()->GetXmin(), fH->GetXaxis()->GetXmax(), fH->GetYaxis()->GetXmax() );; 6814 f2->Paint(""surf same"");; 6815 } else {; 6816 obj->Paint(""cont3 same"");; 6817 }; 6818 }; 6819 } else if (obj->InheritsFrom(TF1::Class())) {; 6820 if (!obj->TestBit(TF1::kNotDraw)) obj->Paint(""lsame"");; 6821 } else {; 6822 //Let's make this 'function' selectable on iOS device (for example, it can be TPaveStat).; 6823 gPad->PushSelectableObject(obj);; 6824 ; 6825 //The next statement is ALWAYS executed on non-iOS platform, on iOS it depends on pad's mode; 6826 //and picked object.; 6827 if (!gPad->PadInHighlightMode() || (gPad->PadInHighlightMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:248455,Test,TestBit,248455,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////////////; 3368/// Interface function to force use of a given normalization range; 3369/// to interpret function value. Needed for functions or p.d.f.s; 3370/// whose shape depends on the choice of normalization such as; 3371/// RooAddPdf; 3372 ; 3373void RooAbsReal::selectNormalizationRange(const char*, bool); 3374{; 3375}; 3376 ; 3377 ; 3378 ; 3379////////////////////////////////////////////////////////////////////////////////; 3380/// Advertise capability to determine maximum value of function for given set of; 3381/// observables. If no direct generator method is provided, this information; 3382/// will assist the accept/reject generator to operate more efficiently as; 3383/// it can skip the initial trial sampling phase to empirically find the function; 3384/// maximum; 3385 ; 3386Int_t RooAbsReal::getMaxVal(const RooArgSet& /*vars*/) const; 3387{; 3388 return 0 ;; 3389}; 3390 ; 3391 ; 3392 ; 3393////////////////////////////////////////////////////////////////////////////////; 3394/// Return maximum value for set of observables identified by code assigned; 3395/// in getMaxVal; 3396 ; 3397double RooAbsReal::maxVal(Int_t /*code*/) const; 3398{; 3399 assert(1) ;; 3400 return 0 ;; 3401}; 3402 ; 3403 ; 3404 ; 3405////////////////////////////////////////////////////////////////////////////////; 3406/// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.; 3407 ; 3408void RooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:146078,assert,assert,146078,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,3,"['assert', 'log']","['assert', 'logging']"
Testability,"//////////////////////; 2392/// Computes the density of LogNormal distribution at point x.; 2393/// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; 2394///; 2395/// \param[in] x is the evaluation point; 2396/// \param[in] sigma is the shape parameter; 2397/// \param[in] theta is the location parameter; 2398/// \param[in] m is the scale parameter; 2399///; 2400/// The formula was taken from ""Engineering Statistics Handbook"" on site; 2401/// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; 2402/// Implementation using ROOT::Math::lognormal_pdf; 2403///; 2404/// Begin_Macro; 2405/// {; 2406/// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; 2407///; 2408/// c1->SetLogy();; 2409/// c1->SetGridx();; 2410/// c1->SetGridy();; 2411///; 2412/// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; 2413/// logn->SetMinimum(1e-3);; 2414///; 2415/// logn->SetParameters(0.5, 0., 1.);; 2416/// logn->SetLineColor(2);; 2417/// TF1 *logn1 = logn->DrawCopy(""L"");; 2418/// logn->SetParameters(1.0, 0., 1.);; 2419/// logn->SetLineColor(3);; 2420/// TF1 *logn2 = logn->DrawCopy(""LSAME"");; 2421/// logn->SetParameters(2.0, 0., 1.);; 2422/// logn->SetLineColor(4);; 2423/// TF1 *logn3 = logn->DrawCopy(""LSAME"");; 2424/// logn->SetParameters(5.0, 0., 1.);; 2425/// logn->SetLineColor(6);; 2426/// TF1 *logn4 = logn->DrawCopy(""LSAME"");; 2427///; 2428/// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; 2429/// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; 2430/// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; 2431/// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; 2432/// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; 2433/// legend->Draw();; 2434/// }; 2435/// End_Macro; 2436 ; 2437Double_t TMath::LogNormal(Double_t x, Double_t sigma, Double_t theta, Double_t m); 2438{; 2439 if ((x<theta) || (sigma<=0) || (m<=0)) {; 2440 Error(""TMath::Lognormal"", ""illegal parameter v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:82344,log,logn,82344,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,3,['log'],['logn']
Testability,"/////////////////////; 2413/// Map current tree and expand its content (including friends) in the lists.; 2414 ; 2415void TTreeViewer::MapTree(TTree *tree, TGListTreeItem *parent, bool listIt); 2416{; 2417 if (!tree) return;; 2418 TObjArray *branches = tree->GetListOfBranches();; 2419 if (!branches) return; // A Chain with no underlying trees.; 2420 TBranch *branch;; 2421 // loop on branches; 2422 Int_t id;; 2423 for (id=0; id<branches->GetEntries(); id++) {; 2424 branch = (TBranch *)branches->At(id);; 2425 if (branch->TestBit(kDoNotProcess)) continue;; 2426 TString name = branch->GetName();; 2427 if (name.Contains(""fBits"") || name.Contains(""fUniqueID"")) continue;; 2428 // now map sub-branches; 2429 MapBranch(branch, """", parent, listIt);; 2430 fStopMapping = false;; 2431 }; 2432 //Map branches of friend Trees (if any); 2433 //Look at tree->GetTree() to insure we see both the friends of a chain; 2434 //and the friends of the chain members; 2435 TIter nextf( tree->GetTree()->GetListOfFriends() );; 2436 TFriendElement *fr;; 2437 while ((fr = (TFriendElement*)nextf())) {; 2438 TTree * t = fr->GetTree();; 2439 branches = t->GetListOfBranches();; 2440 for (id=0; id<branches->GetEntries(); id++) {; 2441 branch = (TBranch *)branches->At(id);; 2442 if (branch->TestBit(kDoNotProcess)) continue;; 2443 TString name = branch->GetName();; 2444 if (name.Contains(""fBits"") || name.Contains(""fUniqueID"")) continue;; 2445 // now map sub-branches; 2446 MapBranch(branch, fr->GetName(), parent, listIt);; 2447 fStopMapping = false;; 2448 }; 2449 }; 2450 ; 2451 // tell who was last mapped; 2452 if (listIt) {; 2453 fMappedTree = tree;; 2454 fMappedBranch = nullptr;; 2455 }; 2456}; 2457 ; 2458////////////////////////////////////////////////////////////////////////////////; 2459/// Map current branch and expand its content in the list view.; 2460 ; 2461void TTreeViewer::MapBranch(TBranch *branch, const char *prefix, TGListTreeItem *parent, bool listIt); 2462{; 2463 if (!branch) return;; 2464 TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:86110,Test,TestBit,86110,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////////; 7469/// Copy current attributes from/to current style; 7470 ; 7471void TH1::UseCurrentStyle(); 7472{; 7473 if (!gStyle) return;; 7474 if (gStyle->IsReading()) {; 7475 fXaxis.ResetAttAxis(""X"");; 7476 fYaxis.ResetAttAxis(""Y"");; 7477 fZaxis.ResetAttAxis(""Z"");; 7478 SetBarOffset(gStyle->GetBarOffset());; 7479 SetBarWidth(gStyle->GetBarWidth());; 7480 SetFillColor(gStyle->GetHistFillColor());; 7481 SetFillStyle(gStyle->GetHistFillStyle());; 7482 SetLineColor(gStyle->GetHistLineColor());; 7483 SetLineStyle(gStyle->GetHistLineStyle());; 7484 SetLineWidth(gStyle->GetHistLineWidth());; 7485 SetMarkerColor(gStyle->GetMarkerColor());; 7486 SetMarkerStyle(gStyle->GetMarkerStyle());; 7487 SetMarkerSize(gStyle->GetMarkerSize());; 7488 Int_t dostat = gStyle->GetOptStat();; 7489 if (gStyle->GetOptFit() && !dostat) dostat = 1000000001;; 7490 SetStats(dostat);; 7491 } else {; 7492 gStyle->SetBarOffset(fBarOffset);; 7493 gStyle->SetBarWidth(fBarWidth);; 7494 gStyle->SetHistFillColor(GetFillColor());; 7495 gStyle->SetHistFillStyle(GetFillStyle());; 7496 gStyle->SetHistLineColor(GetLineColor());; 7497 gStyle->SetHistLineStyle(GetLineStyle());; 7498 gStyle->SetHistLineWidth(GetLineWidth());; 7499 gStyle->SetMarkerColor(GetMarkerColor());; 7500 gStyle->SetMarkerStyle(GetMarkerStyle());; 7501 gStyle->SetMarkerSize(GetMarkerSize());; 7502 gStyle->SetOptStat(TestBit(kNoStats));; 7503 }; 7504 TIter next(GetListOfFunctions());; 7505 TObject *obj;; 7506 ; 7507 while ((obj = next())) {; 7508 obj->UseCurrentStyle();; 7509 }; 7510}; 7511 ; 7512////////////////////////////////////////////////////////////////////////////////; 7513/// For axis = 1,2 or 3 returns the mean value of the histogram along; 7514/// X,Y or Z axis.; 7515///; 7516/// For axis = 11, 12, 13 returns the standard error of the mean value; 7517/// of the histogram along X, Y or Z axis; 7518///; 7519/// Note that the mean value/StdDev is computed using the bins in the currently; 7520/// defined range (see TAxis:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:292235,Test,TestBit,292235,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['TestBit']
Testability,"////////////////////; 7080/// Compute histogram parameters used by the drawing routines.; 7081 ; 7082Int_t THistPainter::PaintInit(); 7083{; 7084 ; 7085 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) return 1;; 7086 ; 7087 Int_t i;; 7088 static const char *where = ""PaintInit"";; 7089 Double_t yMARGIN = gStyle->GetHistTopMargin();; 7090 Int_t maximum = 0;; 7091 Int_t minimum = 0;; 7092 if (fH->GetMaximumStored() != -1111) maximum = 1;; 7093 if (fH->GetMinimumStored() != -1111) minimum = 1;; 7094 ; 7095 // Compute X axis parameters; 7096 ; 7097 Int_t last = fXaxis->GetLast();; 7098 Int_t first = fXaxis->GetFirst();; 7099 Hparam.xlowedge = fXaxis->GetBinLowEdge(first);; 7100 Hparam.xbinsize = fXaxis->GetBinWidth(first);; 7101 Hparam.xlast = last;; 7102 Hparam.xfirst = first;; 7103 Hparam.xmin = Hparam.xlowedge;; 7104 Hparam.xmax = fXaxis->GetBinLowEdge(last)+fXaxis->GetBinWidth(last);; 7105 ; 7106 // if log scale in X, replace xmin,max by the log; 7107 if (Hoption.Logx) {; 7108 if (Hparam.xmax<=0) {; 7109 Error(where, ""cannot set X axis to log scale"");; 7110 return 0;; 7111 }; 7112 if (Hparam.xlowedge <=0 ) {; 7113 if (Hoption.Same) {; 7114 TH1* h1 = nullptr;; 7115 TObject *obj;; 7116 TIter next(gPad->GetListOfPrimitives());; 7117 while ((obj = (TObject *)next())) {; 7118 if (obj->InheritsFrom(TH1::Class())) { h1 = (TH1*)(obj) ; break; }; 7119 if (obj->InheritsFrom(THStack::Class())) { h1 = ((THStack*)(obj))->GetHistogram() ; break; }; 7120 if (obj->InheritsFrom(TGraph::Class())) { h1 = ((TGraph*)(obj))->GetHistogram() ; break; }; 7121 if (obj->InheritsFrom(TMultiGraph::Class())) { h1 = ((TMultiGraph*)(obj))->GetHistogram(); break; }; 7122 if (obj->InheritsFrom(TGraph2D::Class())) { h1 = ((TGraph2D*)(obj))->GetHistogram(); break; }; 7123 if (obj->InheritsFrom(TF1::Class())) { h1 = ((TF1*)(obj))->GetHistogram(); break; }; 7124 }; 7125 if (h1) {; 7126 Hparam.xlowedge = h1->GetXaxis()->GetBinLowEdge(h1->GetXaxis()->GetFirst());; 7127 } else {; 7128 Error(where,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:257845,Log,Logx,257845,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability,"///////////////////; 2776/// logical operation source1 < source2; 2777 ; 2778template <class Element>; 2779TMatrixT<Element> TMatrixTAutoloadOps::operator<(const TMatrixT<Element> &source1, const TMatrixT<Element> &source2); 2780{; 2781 TMatrixT<Element> target;; 2782 ; 2783 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2784 Error(""operator<(const TMatrixT&,const TMatrixT&)"", ""matrices not compatible"");; 2785 return target;; 2786 }; 2787 ; 2788 const Element *sp1 = source1.GetMatrixArray();; 2789 const Element *sp2 = source2.GetMatrixArray();; 2790 Element *tp = target.GetMatrixArray();; 2791 const Element *const tp_last = tp + target.GetNoElements();; 2792 while (tp < tp_last) {; 2793 *tp++ = (*sp1) < (*sp2);; 2794 sp1++;; 2795 sp2++;; 2796 }; 2797 ; 2798 return target;; 2799}; 2800 ; 2801////////////////////////////////////////////////////////////////////////////////; 2802/// logical operation source1 < source2; 2803 ; 2804template <class Element>; 2805TMatrixT<Element> TMatrixTAutoloadOps::operator<(const TMatrixT<Element> &source1, const TMatrixTSym<Element> &source2); 2806{; 2807 TMatrixT<Element> target;; 2808 ; 2809 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2810 Error(""operator<(const TMatrixT&,const TMatrixTSym&)"", ""matrices not compatible"");; 2811 return target;; 2812 }; 2813 ; 2814 target.ResizeTo(source1);; 2815 ; 2816 const Element *sp1 = source1.GetMatrixArray();; 2817 const Element *sp2 = source2.GetMatrixArray();; 2818 Element *tp = target.GetMatrixArray();; 2819 const Element *const tp_last = tp + target.GetNoElements();; 2820 while (tp < tp_last) {; 2821 *tp++ = (*sp1) < (*sp2);; 2822 sp1++;; 2823 sp2++;; 2824 }; 2825 ; 2826 return target;; 2827}; 2828 ; 2829////////////////////////////////////////////////////////////////////////////////; 2830/// logical operation source1 < source2; 2831 ; 2832template <class Element>; 2833TMatrixT<Element> TMatrixTAutoloadOps::operator<(const TMatrixTSym<Element> &source1, const TMatrixT<E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:98123,log,logical,98123,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['log'],['logical']
Testability,"///////////////////; 49/// Returns `sqrt(x*x + y*y)`; 50 ; 51Long_t TMath::Hypot(Long_t x, Long_t y); 52{; 53 return (Long_t) (hypot((Double_t)x, (Double_t)y) + 0.5);; 54}; 55 ; 56////////////////////////////////////////////////////////////////////////////////; 57/// Returns `sqrt(x*x + y*y)`; 58 ; 59Double_t TMath::Hypot(Double_t x, Double_t y); 60{; 61 return hypot(x, y);; 62}; 63 ; 64////////////////////////////////////////////////////////////////////////////////; 65/// Returns the area hyperbolic sine of `x`.; 66 ; 67Double_t TMath::ASinH(Double_t x); 68{; 69#if defined(WIN32); 70 if(x==0.0) return 0.0;; 71 Double_t ax = Abs(x);; 72 return log(x+ax*sqrt(1.+1./(ax*ax)));; 73#else; 74 return asinh(x);; 75#endif; 76}; 77 ; 78////////////////////////////////////////////////////////////////////////////////; 79/// Returns the nonnegative area hyperbolic cosine of `x`.; 80 ; 81Double_t TMath::ACosH(Double_t x); 82{; 83#if defined(WIN32); 84 if(x==0.0) return 0.0;; 85 Double_t ax = Abs(x);; 86 return log(x+ax*sqrt(1.-1./(ax*ax)));; 87#else; 88 return acosh(x);; 89#endif; 90}; 91 ; 92////////////////////////////////////////////////////////////////////////////////; 93/// Returns the area hyperbolic tangent of `x`.; 94 ; 95Double_t TMath::ATanH(Double_t x); 96{; 97#if defined(WIN32); 98 return log((1+x)/(1-x))/2;; 99#else; 100 return atanh(x);; 101#endif; 102}; 103 ; 104////////////////////////////////////////////////////////////////////////////////; 105/// Returns the binary (base-2) logarithm of `x`.; 106 ; 107Double_t TMath::Log2(Double_t x); 108{; 109 return log(x)/log(2.0);; 110}; 111 ; 112////////////////////////////////////////////////////////////////////////////////; 113/// The DiLogarithm function; 114/// Code translated by R.Brun from CERNLIB DILOG function C332; 115 ; 116Double_t TMath::DiLog(Double_t x); 117{; 118 const Double_t hf = 0.5;; 119 const Double_t pi = TMath::Pi();; 120 const Double_t pi2 = pi*pi;; 121 const Double_t pi3 = pi2/3;; 122 const Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:2802,log,log,2802,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['log'],['log']
Testability,"//////////////////; 1655/// Unset environment variable.; 1656 ; 1657void TSystem::Unsetenv(const char *name); 1658{; 1659 Setenv(name, """");; 1660}; 1661 ; 1662////////////////////////////////////////////////////////////////////////////////; 1663/// Get environment variable.; 1664 ; 1665const char *TSystem::Getenv(const char *); 1666{; 1667 AbstractMethod(""Getenv"");; 1668 return nullptr;; 1669}; 1670 ; 1671//---- System Logging ----------------------------------------------------------; 1672 ; 1673////////////////////////////////////////////////////////////////////////////////; 1674/// Open connection to system log daemon. For the use of the options and; 1675/// facility see the Unix openlog man page.; 1676 ; 1677void TSystem::Openlog(const char *, Int_t, ELogFacility); 1678{; 1679 AbstractMethod(""Openlog"");; 1680}; 1681 ; 1682////////////////////////////////////////////////////////////////////////////////; 1683/// Send mess to syslog daemon. Level is the logging level and mess the; 1684/// message that will be written on the log.; 1685 ; 1686void TSystem::Syslog(ELogLevel, const char *); 1687{; 1688 AbstractMethod(""Syslog"");; 1689}; 1690 ; 1691////////////////////////////////////////////////////////////////////////////////; 1692/// Close connection to system log daemon.; 1693 ; 1694void TSystem::Closelog(); 1695{; 1696 AbstractMethod(""Closelog"");; 1697}; 1698 ; 1699//---- Standard output redirection ---------------------------------------------; 1700 ; 1701////////////////////////////////////////////////////////////////////////////////; 1702/// Redirect standard output (stdout, stderr) to the specified file.; 1703/// If the file argument is 0 the output is set again to stderr, stdout.; 1704/// The second argument specifies whether the output should be added to the; 1705/// file (""a"", default) or the file be truncated before (""w"").; 1706/// The implementations of this function save internally the current state into; 1707/// a static structure.; 1708///; 1709/// The c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:53821,log,logging,53821,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,2,['log'],"['log', 'logging']"
Testability,"//////////////////; 1743/// Constructor from a translation specified by X,Y,Z and a pointer to a rotation. The rotation will not be owned by; 1744/// this.; 1745 ; 1746TGeoCombiTrans::TGeoCombiTrans(Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot) : TGeoMatrix(""""); 1747{; 1748 SetTranslation(dx, dy, dz);; 1749 fRotation = nullptr;; 1750 SetRotation(rot);; 1751}; 1752 ; 1753////////////////////////////////////////////////////////////////////////////////; 1754/// Named ctor; 1755 ; 1756TGeoCombiTrans::TGeoCombiTrans(const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot); 1757 : TGeoMatrix(name); 1758{; 1759 SetTranslation(dx, dy, dz);; 1760 fRotation = nullptr;; 1761 SetRotation(rot);; 1762}; 1763 ; 1764////////////////////////////////////////////////////////////////////////////////; 1765/// Assignment operator with generic matrix.; 1766 ; 1767TGeoCombiTrans &TGeoCombiTrans::operator=(const TGeoMatrix &matrix); 1768{; 1769 if (&matrix == this); 1770 return *this;; 1771 Bool_t registered = TestBit(kGeoRegistered);; 1772 Clear();; 1773 TNamed::operator=(matrix);; 1774 ; 1775 if (matrix.IsTranslation()) {; 1776 memcpy(fTranslation, matrix.GetTranslation(), kN3);; 1777 }; 1778 if (matrix.IsRotation()) {; 1779 if (!fRotation) {; 1780 fRotation = new TGeoRotation();; 1781 SetBit(kGeoMatrixOwned);; 1782 } else {; 1783 if (!TestBit(kGeoMatrixOwned)) {; 1784 fRotation = new TGeoRotation();; 1785 SetBit(kGeoMatrixOwned);; 1786 }; 1787 }; 1788 fRotation->SetMatrix(matrix.GetRotationMatrix());; 1789 fRotation->SetBit(kGeoReflection, matrix.TestBit(kGeoReflection));; 1790 fRotation->SetBit(kGeoRotation);; 1791 } else {; 1792 if (fRotation && TestBit(kGeoMatrixOwned)); 1793 delete fRotation;; 1794 ResetBit(kGeoMatrixOwned);; 1795 fRotation = nullptr;; 1796 }; 1797 SetBit(kGeoRegistered, registered);; 1798 ResetBit(kGeoScale);; 1799 return *this;; 1800}; 1801 ; 1802////////////////////////////////////////////////////////////////////////////////; 1803///",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:62378,Test,TestBit,62378,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////////////; 10534/// Initialize various options to draw 2D histograms.; 10535 ; 10536Int_t THistPainter::TableInit(); 10537{; 10538 ; 10539 static const char *where = ""TableInit"";; 10540 ; 10541 Int_t first, last;; 10542 Double_t yMARGIN= gStyle->GetHistTopMargin();; 10543 Double_t zmin, zmax;; 10544 Int_t maximum = 0;; 10545 Int_t minimum = 0;; 10546 if (fH->GetMaximumStored() != -1111) maximum = 1;; 10547 if (fH->GetMinimumStored() != -1111) minimum = 1;; 10548 ; 10549 // ----------------- Compute X axis parameters; 10550 first = fXaxis->GetFirst();; 10551 last = fXaxis->GetLast();; 10552 Hparam.xlast = last;; 10553 Hparam.xfirst = first;; 10554 Hparam.xlowedge = fXaxis->GetBinLowEdge(first);; 10555 Hparam.xbinsize = fXaxis->GetBinWidth(first);; 10556 Hparam.xmin = Hparam.xlowedge;; 10557 Hparam.xmax = fXaxis->GetBinLowEdge(last)+fXaxis->GetBinWidth(last);; 10558 ; 10559 // if log scale in X, replace xmin,max by the log; 10560 if (Hoption.Logx) {; 10561 // find the first edge of a bin that is > 0; 10562 if (Hparam.xlowedge <=0 ) {; 10563 Hparam.xlowedge = fXaxis->GetBinUpEdge(fXaxis->FindFixBin(0.01*Hparam.xbinsize));; 10564 Hparam.xmin = Hparam.xlowedge;; 10565 }; 10566 if (Hparam.xmin <=0 || Hparam.xmax <=0) {; 10567 Error(where, ""cannot set X axis to log scale"");; 10568 return 0;; 10569 }; 10570 Hparam.xfirst= fXaxis->FindFixBin(Hparam.xmin);; 10571 if (Hparam.xfirst < first) Hparam.xfirst = first;; 10572 Hparam.xlast = fXaxis->FindFixBin(Hparam.xmax);; 10573 if (Hparam.xlast > last) Hparam.xlast = last;; 10574 Hparam.xmin = TMath::Log10(Hparam.xmin);; 10575 Hparam.xmax = TMath::Log10(Hparam.xmax);; 10576 }; 10577 ; 10578 // ----------------- Compute Y axis parameters; 10579 first = fYaxis->GetFirst();; 10580 last = fYaxis->GetLast();; 10581 Hparam.ylast = last;; 10582 Hparam.yfirst = first;; 10583 Hparam.ylowedge = fYaxis->GetBinLowEdge(first);; 10584 Hparam.ybinsize = fYaxis->GetBinWidth(first);; 10585 if (!Hparam.ybinsize) Hparam.ybinsize = 1;; 10586 H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:379329,Log,Logx,379329,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability,"/////////////////; 176/// Sets a new buffer in an existing TBuffer object. If newsiz=0 then the; 177/// new buffer is expected to have the same size as the previous buffer.; 178/// The current buffer position is reset to the start of the buffer.; 179/// If the TBuffer owned the previous buffer, it will be deleted prior; 180/// to accepting the new buffer. By default the new buffer will be; 181/// adopted unless adopt is false.; 182///; 183/// If the new buffer is _not_ adopted and no memory allocation routine; 184/// is provided, a Fatal error will be issued if the Buffer attempts to; 185/// expand.; 186 ; 187void TBuffer::SetBuffer(void *buf, UInt_t newsiz, Bool_t adopt, ReAllocCharFun_t reallocfunc); 188{; 189 if (fBuffer && TestBit(kIsOwner)); 190 delete [] fBuffer;; 191 ; 192 if (adopt); 193 SetBit(kIsOwner);; 194 else; 195 ResetBit(kIsOwner);; 196 ; 197 fBuffer = (char *)buf;; 198 fBufCur = fBuffer;; 199 if (newsiz > 0) {; 200 if ( (fMode&kWrite)!=0 ) {; 201 fBufSize = newsiz - kExtraSpace;; 202 } else {; 203 fBufSize = newsiz;; 204 }; 205 }; 206 fBufMax = fBuffer + fBufSize;; 207 ; 208 SetReAllocFunc( reallocfunc );; 209 ; 210 if (buf && ( (fMode&kWrite)!=0 ) && fBufSize < 0) {; 211 Expand( kMinimalSize );; 212 }; 213}; 214 ; 215////////////////////////////////////////////////////////////////////////////////; 216/// Expand (or shrink) the I/O buffer to newsize bytes.; 217/// If copy is true (the default), the existing content of the; 218/// buffer is preserved, otherwise the buffer is returned zero-ed out.; 219///; 220/// In order to avoid losing data, if the current length is greater than; 221/// the requested size, we only shrink down to the current length.; 222 ; 223void TBuffer::Expand(Int_t newsize, Bool_t copy); 224{; 225 Int_t l = Length();; 226 if ( (l > newsize) && copy ) {; 227 newsize = l;; 228 }; 229 const Int_t extraspace = (fMode&kWrite)!=0 ? kExtraSpace : 0;; 230 ; 231 if ( ((Long64_t)newsize+extraspace) > kMaxBufferSize) {; 232 if (l < kMaxBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:6639,Test,TestBit,6639,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////; 1742/// Raise canvas window; 1743 ; 1744void TCanvas::RaiseWindow(); 1745{; 1746 if (fCanvasImp); 1747 fCanvasImp->RaiseWindow();; 1748}; 1749 ; 1750////////////////////////////////////////////////////////////////////////////////; 1751/// Set option to resize objects/pads in a canvas.; 1752///; 1753/// - set = 1 (default) graphics objects are resized in opaque mode; 1754/// - set = 0 only the outline of objects is drawn when resizing them; 1755///; 1756/// The option opaque produces the best effect. It requires however a; 1757/// a reasonably fast workstation or response time.; 1758 ; 1759void TCanvas::ResizeOpaque(Int_t set); 1760{; 1761 SetBit(kResizeOpaque,set);; 1762}; 1763 ; 1764////////////////////////////////////////////////////////////////////////////////; 1765/// Execute the list of TExecs in the current pad.; 1766 ; 1767void TCanvas::RunAutoExec(); 1768{; 1769 if (!TestBit(kAutoExec)); 1770 return;; 1771 if (gPad); 1772 ((TPad*)gPad)->AutoExec();; 1773}; 1774 ; 1775////////////////////////////////////////////////////////////////////////////////; 1776/// Save primitives in this canvas in C++ macro file with GUI.; 1777 ; 1778void TCanvas::SavePrimitive(std::ostream &out, Option_t *option /*= """"*/); 1779{; 1780 // Write canvas options (in $TROOT or $TStyle); 1781 if (gStyle->GetOptFit()) {; 1782 out<<"" gStyle->SetOptFit(1);""<<std::endl;; 1783 }; 1784 if (!gStyle->GetOptStat()) {; 1785 out<<"" gStyle->SetOptStat(0);""<<std::endl;; 1786 }; 1787 if (!gStyle->GetOptTitle()) {; 1788 out<<"" gStyle->SetOptTitle(0);""<<std::endl;; 1789 }; 1790 if (gROOT->GetEditHistograms()) {; 1791 out<<"" gROOT->SetEditHistograms();""<<std::endl;; 1792 }; 1793 if (GetShowEventStatus()) {; 1794 out<<"" ""<<GetName()<<""->ToggleEventStatus();""<<std::endl;; 1795 }; 1796 if (GetShowToolTips()) {; 1797 out<<"" ""<<GetName()<<""->ToggleToolTips();""<<std::endl;; 1798 }; 1799 if (GetShowToolBar()) {; 1800 out<<"" ""<<GetName()<<""->ToggleToolBar();""<<std::endl;; 1801 }; 1802 if (GetHighL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:55215,Test,TestBit,55215,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///////////////; 37 ; 38class TGeoMatrix : public TNamed {; 39public:; 40 enum EGeoTransfTypes {; 41 kGeoIdentity = 0,; 42 kGeoShared = BIT(14),; 43 kGeoTranslation = BIT(17),; 44 kGeoRotation = BIT(18),; 45 kGeoScale = BIT(19),; 46 kGeoReflection = BIT(20),; 47 kGeoRegistered = BIT(21),; 48 kGeoSavePrimitive = BIT(22),; 49 kGeoMatrixOwned = BIT(23),; 50 kGeoCombiTrans = kGeoTranslation | kGeoRotation,; 51 kGeoGenTrans = kGeoTranslation | kGeoRotation | kGeoScale,; 52 kGeoMatrixBits = kGeoShared | kGeoGenTrans | kGeoReflection | kGeoRegistered | kGeoSavePrimitive | kGeoMatrixOwned; 53 };; 54 ; 55protected:; 56 TGeoMatrix(const TGeoMatrix &other);; 57 ; 58public:; 59 TGeoMatrix();; 60 TGeoMatrix(const char *name);; 61 ~TGeoMatrix() override;; 62 ; 63 Bool_t IsIdentity() const { return !TestBit(kGeoGenTrans); }; 64 Bool_t IsTranslation() const { return TestBit(kGeoTranslation); }; 65 Bool_t IsRotation() const { return TestBit(kGeoRotation); }; 66 Bool_t IsReflection() const { return TestBit(kGeoReflection); }; 67 Bool_t IsScale() const { return TestBit(kGeoScale); }; 68 Bool_t IsShared() const { return TestBit(kGeoShared); }; 69 Bool_t IsOwned() const { return TestBit(kGeoMatrixOwned); }; 70 Bool_t IsCombi() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation)); }; 71 Bool_t IsGeneral() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation) && TestBit(kGeoScale)); }; 72 Bool_t IsRegistered() const { return TestBit(kGeoRegistered); }; 73 Bool_t IsRotAboutZ() const;; 74 void GetHomogenousMatrix(Double_t *hmat) const;; 75 const char *GetPointerName() const;; 76 ; 77 virtual Int_t GetByteCount() const;; 78 virtual const Double_t *GetTranslation() const = 0;; 79 virtual const Double_t *GetRotationMatrix() const = 0;; 80 virtual const Double_t *GetScale() const = 0;; 81 virtual TGeoHMatrix Inverse() const = 0;; 82 virtual void LocalToMaster(const Double_t *local, Double_t *master) const;; 83 virtual void LocalToMasterVect(const Double_t *local, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:2496,Test,TestBit,2496,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,1,['Test'],['TestBit']
Testability,///////////////; 57/// \f$ \frac{\pi}{4} \f$; 58constexpr Double_t PiOver4(); 59{; 60 return Pi() / 4.0;; 61}; 62 ; 63////////////////////////////////////////////////////////////////////////////////; 64/// \f$ \frac{1.}{\pi}\f$; 65constexpr Double_t InvPi(); 66{; 67 return 1.0 / Pi();; 68}; 69 ; 70////////////////////////////////////////////////////////////////////////////////; 71/// Conversion from radian to degree: \f$ \frac{180}{\pi} \f$; 72constexpr Double_t RadToDeg(); 73{; 74 return 180.0 / Pi();; 75}; 76 ; 77////////////////////////////////////////////////////////////////////////////////; 78/// Conversion from degree to radian: \f$ \frac{\pi}{180} \f$; 79constexpr Double_t DegToRad(); 80{; 81 return Pi() / 180.0;; 82}; 83 ; 84////////////////////////////////////////////////////////////////////////////////; 85/// \f$ \sqrt{2} \f$; 86constexpr Double_t Sqrt2(); 87{; 88 return 1.4142135623730950488016887242097;; 89}; 90 ; 91////////////////////////////////////////////////////////////////////////////////; 92/// Base of natural log: \f$ e \f$; 93constexpr Double_t E(); 94{; 95 return 2.71828182845904523536;; 96}; 97 ; 98////////////////////////////////////////////////////////////////////////////////; 99/// Natural log of 10 (to convert log to ln); 100constexpr Double_t Ln10(); 101{; 102 return 2.30258509299404568402;; 103}; 104 ; 105////////////////////////////////////////////////////////////////////////////////; 106/// Base-10 log of e (to convert ln to log); 107constexpr Double_t LogE(); 108{; 109 return 0.43429448190325182765;; 110}; 111 ; 112////////////////////////////////////////////////////////////////////////////////; 113/// Velocity of light in \f$ m s^{-1} \f$; 114constexpr Double_t C(); 115{; 116 return 2.99792458e8;; 117}; 118 ; 119////////////////////////////////////////////////////////////////////////////////; 120/// \f$ cm s^{-1} \f$; 121constexpr Double_t Ccgs(); 122{; 123 return 100.0 * C();; 124}; 125 ; 126/////////////////////////////////////////,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:2885,log,log,2885,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,1,['log'],['log']
Testability,"/////////////; 1253/// Method resetting the errno.; 1254 ; 1255void TFile::ResetErrno() const; 1256{; 1257 TSystem::ResetErrno();; 1258}; 1259 ; 1260////////////////////////////////////////////////////////////////////////////////; 1261/// Return a pointer to the current read cache.; 1262 ; 1263TFileCacheRead *TFile::GetCacheRead(const TObject* tree) const; 1264{; 1265 if (!tree) {; 1266 if (!fCacheRead && fCacheReadMap->GetSize() == 1) {; 1267 TIter next(fCacheReadMap);; 1268 return (TFileCacheRead *)fCacheReadMap->GetValue(next());; 1269 }; 1270 return fCacheRead;; 1271 }; 1272 TFileCacheRead *cache = (TFileCacheRead *)fCacheReadMap->GetValue(tree);; 1273 if (!cache) return fCacheRead;; 1274 return cache;; 1275}; 1276 ; 1277////////////////////////////////////////////////////////////////////////////////; 1278/// Return a pointer to the current write cache.; 1279 ; 1280TFileCacheWrite *TFile::GetCacheWrite() const; 1281{; 1282 return fCacheWrite;; 1283}; 1284 ; 1285////////////////////////////////////////////////////////////////////////////////; 1286/// Read the logical record header starting at a certain postion.; 1287///; 1288/// \param[in] buf pointer to buffer; 1289/// \param[in] first read offset; 1290/// \param[in] maxbytes Bytes which are read into buf.; 1291/// \param[out] nbytes Number of bytes in record if negative, this is a deleted; 1292/// record if 0, cannot read record, wrong value of argument first; 1293/// \param[out] objlen Uncompressed object size; 1294/// \param[out] keylen Length of logical record header; 1295///; 1296/// The function reads nread bytes; 1297/// where nread is the minimum of maxbytes and the number of bytes; 1298/// before the end of file. The function returns nread.; 1299/// Note that the arguments objlen and keylen are returned only; 1300/// if maxbytes >=16; 1301 ; 1302Int_t TFile::GetRecordHeader(char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen); 1303{; 1304 nbytes = 0;; 1305 objlen = 0;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:45525,log,logical,45525,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['log'],['logical']
Testability,"/////////////; 2946 ; 2947template Double_t TBranchElement::GetTypedValue(Int_t j, Int_t len, bool subarr) const;; 2948template Long64_t TBranchElement::GetTypedValue(Int_t j, Int_t len, bool subarr) const;; 2949template LongDouble_t TBranchElement::GetTypedValue(Int_t j, Int_t len, bool subarr) const;; 2950 ; 2951template <typename T>; 2952T TBranchElement::GetTypedValue(Int_t j, Int_t len, bool subarr) const; 2953{; 2954 // -- Returns the branch value.; 2955 //; 2956 // If the leaf is an array, j is the index in the array.; 2957 //; 2958 // If leaf is an array inside a TClonesArray, len should be the length; 2959 // of the array.; 2960 //; 2961 // If subarr is true, then len is actually the index within the sub-array.; 2962 //; 2963 ; 2964 ValidateAddress();; 2965 ; 2966 Int_t prID = fID;; 2967 char *object = fObject;; 2968 if (TestBit(kCache)) {; 2969 if (GetInfoImp()->GetElements()->At(fID)->TestBit(TStreamerElement::kRepeat)) {; 2970 prID = fID+1;; 2971 } else if (fOnfileObject) {; 2972 object = fOnfileObject->GetObjectAt(0);; 2973 }; 2974 }; 2975 ; 2976 if (!j && fBranchCount) {; 2977 Long64_t entry = fTree->GetReadEntry();; 2978 // Since reloading the index, will reset the ClonesArray, let's; 2979 // skip the load if we already read this entry.; 2980 if (entry != fBranchCount->GetReadEntry()) {; 2981 fBranchCount->TBranch::GetEntry(entry);; 2982 }; 2983 if (fBranchCount2 && entry != fBranchCount2->GetReadEntry()) {; 2984 fBranchCount2->TBranch::GetEntry(entry);; 2985 }; 2986 }; 2987 ; 2988 if (TestBit(kDecomposedObj)) {; 2989 if (!fAddress) {; 2990 return 0;; 2991 }; 2992 if ((fType == 3) || (fType == 4)) {; 2993 // Top-level branch of a TClonesArray.; 2994 return fNdata;; 2995 } else if ((fType == 31) || (fType == 41)) {; 2996 // sub branch of a TClonesArray; 2997 Int_t atype = fStreamerType;; 2998 if (atype < 20) {; 2999 atype += 20;; 3000 }; 3001 return GetInfoImp()->GetTypedValue<T>(fAddress, atype, j, 1);; 3002 } else if (fType <= 2) {; 3003 // branch in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:105338,Test,TestBit,105338,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,2,['Test'],['TestBit']
Testability,"////////////; 1358/// Iterates over all MVA input variables and evaluates them.; 1359 ; 1360void TMVA::Factory::EvaluateAllVariables(DataLoader *loader, TString options); 1361{; 1362 Log() << kINFO << ""Evaluating all variables..."" << Endl;; 1363 Event::SetIsTraining(kFALSE);; 1364 ; 1365 for (UInt_t i = 0; i < loader->GetDataSetInfo().GetNVariables(); i++) {; 1366 TString s = loader->GetDataSetInfo().GetVariableInfo(i).GetLabel();; 1367 if (options.Contains(""V"")); 1368 s += "":V"";; 1369 this->BookMethod(loader, ""Variable"", s);; 1370 }; 1371}; 1372 ; 1373////////////////////////////////////////////////////////////////////////////////; 1374/// Iterates over all MVAs that have been booked, and calls their evaluation methods.; 1375 ; 1376void TMVA::Factory::EvaluateAllMethods(void); 1377{; 1378 Log() << kHEADER << gTools().Color(""bold"") << ""Evaluate all methods"" << gTools().Color(""reset"") << Endl;; 1379 ; 1380 // don't do anything if no method booked; 1381 if (fMethodsMap.empty()) {; 1382 Log() << kINFO << ""...nothing found to evaluate"" << Endl;; 1383 return;; 1384 }; 1385 std::map<TString, MVector *>::iterator itrMap;; 1386 ; 1387 for (itrMap = fMethodsMap.begin(); itrMap != fMethodsMap.end(); ++itrMap) {; 1388 MVector *methods = itrMap->second;; 1389 ; 1390 // -----------------------------------------------------------------------; 1391 // First part of evaluation process; 1392 // --> compute efficiencies, and other separation estimators; 1393 // -----------------------------------------------------------------------; 1394 ; 1395 // although equal, we now want to separate the output for the variables; 1396 // and the real methods; 1397 Int_t isel; // will be 0 for a Method; 1 for a Variable; 1398 Int_t nmeth_used[2] = {0, 0}; // 0 Method; 1 Variable; 1399 ; 1400 std::vector<std::vector<TString>> mname(2);; 1401 std::vector<std::vector<Double_t>> sig(2), sep(2), roc(2);; 1402 std::vector<std::vector<Double_t>> eff01(2), eff10(2), eff30(2), effArea(2);; 1403 std::vector<s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:56363,Log,Log,56363,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"///////////; 2044/// Multiply by a reflection respect to YZ.; 2045 ; 2046void TGeoCombiTrans::ReflectX(Bool_t leftside, Bool_t rotonly); 2047{; 2048 if (leftside && !rotonly); 2049 fTranslation[0] = -fTranslation[0];; 2050 if (!fRotation || !TestBit(kGeoMatrixOwned)) {; 2051 if (fRotation); 2052 fRotation = new TGeoRotation(*fRotation);; 2053 else; 2054 fRotation = new TGeoRotation();; 2055 SetBit(kGeoMatrixOwned);; 2056 }; 2057 SetBit(kGeoRotation);; 2058 fRotation->ReflectX(leftside);; 2059 SetBit(kGeoReflection, !IsReflection());; 2060}; 2061 ; 2062////////////////////////////////////////////////////////////////////////////////; 2063/// Multiply by a reflection respect to ZX.; 2064 ; 2065void TGeoCombiTrans::ReflectY(Bool_t leftside, Bool_t rotonly); 2066{; 2067 if (leftside && !rotonly); 2068 fTranslation[1] = -fTranslation[1];; 2069 if (!fRotation || !TestBit(kGeoMatrixOwned)) {; 2070 if (fRotation); 2071 fRotation = new TGeoRotation(*fRotation);; 2072 else; 2073 fRotation = new TGeoRotation();; 2074 SetBit(kGeoMatrixOwned);; 2075 }; 2076 SetBit(kGeoRotation);; 2077 fRotation->ReflectY(leftside);; 2078 SetBit(kGeoReflection, !IsReflection());; 2079}; 2080 ; 2081////////////////////////////////////////////////////////////////////////////////; 2082/// Multiply by a reflection respect to XY.; 2083 ; 2084void TGeoCombiTrans::ReflectZ(Bool_t leftside, Bool_t rotonly); 2085{; 2086 if (leftside && !rotonly); 2087 fTranslation[2] = -fTranslation[2];; 2088 if (!fRotation || !TestBit(kGeoMatrixOwned)) {; 2089 if (fRotation); 2090 fRotation = new TGeoRotation(*fRotation);; 2091 else; 2092 fRotation = new TGeoRotation();; 2093 SetBit(kGeoMatrixOwned);; 2094 }; 2095 SetBit(kGeoRotation);; 2096 fRotation->ReflectZ(leftside);; 2097 SetBit(kGeoReflection, !IsReflection());; 2098}; 2099 ; 2100////////////////////////////////////////////////////////////////////////////////; 2101/// Save a primitive as a C++ statement(s) on output stream ""out"".; 2102 ; 2103void TGeoCombiTrans::Sav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:72035,Test,TestBit,72035,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/////////; 627/// Check for infinity or NaN.; 628/// \param[in] inputs Array to check; 629/// \return True if either infinity or NaN were found.; 630namespace {; 631template<class T>; 632bool checkInfNaNNeg(const T& inputs) {; 633 // check for a math error or negative value; 634 bool inf = false;; 635 bool nan = false;; 636 bool neg = false;; 637 ; 638 for (double val : inputs) { //CHECK_VECTORISE; 639 inf |= !std::isfinite(val);; 640 nan |= TMath::IsNaN(val); // Works also during fast math; 641 neg |= val < 0;; 642 }; 643 ; 644 return inf || nan || neg;; 645}; 646}; 647 ; 648 ; 649////////////////////////////////////////////////////////////////////////////////; 650/// Scan through outputs and fix+log all nans and negative values.; 651/// \param[in,out] outputs Array to be scanned & fixed.; 652/// \param[in] begin Begin of event range. Only needed to print the correct event number; 653/// where the error occurred.; 654void RooAbsPdf::logBatchComputationErrors(std::span<const double>& outputs, std::size_t begin) const {; 655 for (unsigned int i=0; i<outputs.size(); ++i) {; 656 const double value = outputs[i];; 657 if (TMath::IsNaN(outputs[i])) {; 658 logEvalError(Form(""p.d.f value of (%s) is Not-a-Number (%f) for entry %zu"",; 659 GetName(), value, begin+i));; 660 } else if (!std::isfinite(outputs[i])){; 661 logEvalError(Form(""p.d.f value of (%s) is (%f) for entry %zu"",; 662 GetName(), value, begin+i));; 663 } else if (outputs[i] < 0.) {; 664 logEvalError(Form(""p.d.f value of (%s) is less than zero (%f) for entry %zu"",; 665 GetName(), value, begin+i));; 666 }; 667 }; 668}; 669 ; 670 ; 671void RooAbsPdf::getLogProbabilities(std::span<const double> pdfValues, double * output) const {; 672 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 673 output[i] = getLog(pdfValues[i], this);; 674 }; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:24759,log,logBatchComputationErrors,24759,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['logBatchComputationErrors']
Testability,"///////; 1422/// AutoSave tree header every fAutoSave bytes.; 1423///; 1424/// When large Trees are produced, it is safe to activate the AutoSave; 1425/// procedure. Some branches may have buffers holding many entries.; 1426/// If fAutoSave is negative, AutoSave is automatically called by; 1427/// TTree::Fill when the number of bytes generated since the previous; 1428/// AutoSave is greater than -fAutoSave bytes.; 1429/// If fAutoSave is positive, AutoSave is automatically called by; 1430/// TTree::Fill every N entries.; 1431/// This function may also be invoked by the user.; 1432/// Each AutoSave generates a new key on the file.; 1433/// Once the key with the tree header has been written, the previous cycle; 1434/// (if any) is deleted.; 1435///; 1436/// Note that calling TTree::AutoSave too frequently (or similarly calling; 1437/// TTree::SetAutoSave with a small value) is an expensive operation.; 1438/// You should make tests for your own application to find a compromise; 1439/// between speed and the quantity of information you may loose in case of; 1440/// a job crash.; 1441///; 1442/// In case your program crashes before closing the file holding this tree,; 1443/// the file will be automatically recovered when you will connect the file; 1444/// in UPDATE mode.; 1445/// The Tree will be recovered at the status corresponding to the last AutoSave.; 1446///; 1447/// if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; 1448/// This allows another process to analyze the Tree while the Tree is being filled.; 1449///; 1450/// if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; 1451/// the current basket are closed-out and written to disk individually.; 1452///; 1453/// By default the previous header is deleted after having written the new header.; 1454/// if option contains ""Overwrite"", the previous Tree header is deleted; 1455/// before written the new header. This option is slightly faster, but; 1456/// the default option is safer i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:53077,test,tests,53077,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['test'],['tests']
Testability,"//////; 2613/// Open connection to system log daemon. For the use of the options and; 2614/// facility see the Unix openlog man page.; 2615 ; 2616void TUnixSystem::Openlog(const char *name, Int_t options, ELogFacility facility); 2617{; 2618 int fac = 0;; 2619 ; 2620 switch (facility) {; 2621 case kLogLocal0:; 2622 fac = LOG_LOCAL0;; 2623 break;; 2624 case kLogLocal1:; 2625 fac = LOG_LOCAL1;; 2626 break;; 2627 case kLogLocal2:; 2628 fac = LOG_LOCAL2;; 2629 break;; 2630 case kLogLocal3:; 2631 fac = LOG_LOCAL3;; 2632 break;; 2633 case kLogLocal4:; 2634 fac = LOG_LOCAL4;; 2635 break;; 2636 case kLogLocal5:; 2637 fac = LOG_LOCAL5;; 2638 break;; 2639 case kLogLocal6:; 2640 fac = LOG_LOCAL6;; 2641 break;; 2642 case kLogLocal7:; 2643 fac = LOG_LOCAL7;; 2644 break;; 2645 }; 2646 ; 2647 ::openlog(name, options, fac);; 2648}; 2649 ; 2650////////////////////////////////////////////////////////////////////////////////; 2651/// Send mess to syslog daemon. Level is the logging level and mess the; 2652/// message that will be written on the log.; 2653 ; 2654void TUnixSystem::Syslog(ELogLevel level, const char *mess); 2655{; 2656 // ELogLevel matches exactly the Unix values.; 2657 ::syslog(level, ""%s"", mess);; 2658}; 2659 ; 2660////////////////////////////////////////////////////////////////////////////////; 2661/// Close connection to system log daemon.; 2662 ; 2663void TUnixSystem::Closelog(); 2664{; 2665 ::closelog();; 2666}; 2667 ; 2668//---- Standard output redirection ---------------------------------------------; 2669 ; 2670////////////////////////////////////////////////////////////////////////////////; 2671/// Redirect standard output (stdout, stderr) to the specified file.; 2672/// If the file argument is 0 the output is set again to stderr, stdout.; 2673/// The second argument specifies whether the output should be added to the; 2674/// file (""a"", default) or the file be truncated before (""w"").; 2675/// This function saves internally the current state into a static struct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:82915,log,logging,82915,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,2,['log'],"['log', 'logging']"
Testability,"//////; 5764/// [Control function to draw a 2D histogram as a color plot.](\ref HP14); 5765 ; 5766void THistPainter::PaintColorLevels(Option_t*); 5767{; 5768 Double_t z, zc, xk, xstep, yk, ystep, xlow, xup, ylow, yup;; 5769 ; 5770 Double_t zmin = fH->GetMinimum();; 5771 Double_t zmax = fH->GetMaximum();; 5772 ; 5773 Double_t dz = zmax - zmin;; 5774 if (dz <= 0) { // Histogram filled with a constant value; 5775 zmax += 0.1*TMath::Abs(zmax);; 5776 zmin -= 0.1*TMath::Abs(zmin);; 5777 dz = zmax - zmin;; 5778 }; 5779 ; 5780 // In case of option SAME, zmin and zmax values are taken from the; 5781 // first plotted 2D histogram.; 5782 if (Hoption.Same > 0 && Hoption.Same < 10) {; 5783 TH2 *h2;; 5784 TIter next(gPad->GetListOfPrimitives());; 5785 while ((h2 = (TH2 *)next())) {; 5786 if (!h2->InheritsFrom(TH2::Class())) continue;; 5787 zmin = h2->GetMinimum();; 5788 zmax = h2->GetMaximum();; 5789 fH->SetMinimum(zmin);; 5790 fH->SetMaximum(zmax);; 5791 if (Hoption.Logz) {; 5792 if (zmin <= 0) {; 5793 zmin = TMath::Log10(zmax*0.001);; 5794 } else {; 5795 zmin = TMath::Log10(zmin);; 5796 }; 5797 zmax = TMath::Log10(zmax);; 5798 }; 5799 dz = zmax - zmin;; 5800 break;; 5801 }; 5802 } else {; 5803 if (Hoption.Logz) {; 5804 if (zmin > 0) {; 5805 zmin = TMath::Log10(zmin);; 5806 zmax = TMath::Log10(zmax);; 5807 dz = zmax - zmin;; 5808 } else {; 5809 return;; 5810 }; 5811 }; 5812 }; 5813 ; 5814 Style_t fillsav = fH->GetFillStyle();; 5815 Style_t colsav = fH->GetFillColor();; 5816 fH->SetFillStyle(1001);; 5817 fH->TAttFill::Modify();; 5818 ; 5819 // Initialize the levels on the Z axis; 5820 Int_t ncolors = gStyle->GetNumberOfColors();; 5821 Int_t ndiv = fH->GetContour();; 5822 if (ndiv == 0 ) {; 5823 ndiv = gStyle->GetNumberContours();; 5824 fH->SetContour(ndiv);; 5825 }; 5826 Int_t ndivz = TMath::Abs(ndiv);; 5827 if (!fH->TestBit(TH1::kUserContour)) fH->SetContour(ndiv);; 5828 Double_t scale = (dz ? ndivz / dz : 1.0);; 5829 ; 5830 Int_t color;; 5831 TProfile2D* prof2d = dynamic_cast<T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:215536,Log,Logz,215536,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"//////; 918/// This method is called from ShowMembers() via AutoBrowse().; 919 ; 920void TAutoInspector::Inspect(TClass *cl, const char *tit, const char *name,; 921 const void *addr, Bool_t /* isTransient */); 922{; 923 if(tit && strchr(tit,'.')) return ;; 924 if (fCount && !fBrowser) return;; 925 ; 926 TString ts;; 927 ; 928 if (!cl) return;; 929 //if (*(cl->GetName()) == 'T') return;; 930 if (*name == '*') name++;; 931 int ln = strcspn(name,""[ "");; 932 TString iname(name,ln);; 933 ; 934 ClassInfo_t *classInfo = cl->GetClassInfo();; 935 if (!classInfo) return;; 936 ; 937 // Browse data members; 938 DataMemberInfo_t *m = gCling->DataMemberInfo_Factory(classInfo, TDictionary::EMemberSelection::kNoUsingDecls);; 939 TString mname;; 940 ; 941 int found=0;; 942 while (gCling->DataMemberInfo_Next(m)) { // MemberLoop; 943 mname = gCling->DataMemberInfo_Name(m);; 944 mname.ReplaceAll(""*"","""");; 945 if ((found = (iname==mname))) break;; 946 }; 947 assert(found);; 948 ; 949 // we skip: non static members and non objects; 950 // - the member G__virtualinfo inserted by the CINT RTTI system; 951 ; 952 //Long_t prop = m.Property() | m.Type()->Property();; 953 Long_t prop = gCling->DataMemberInfo_Property(m) | gCling->DataMemberInfo_TypeProperty(m);; 954 if (prop & kIsStatic) return;; 955 if (prop & kIsFundamental) return;; 956 if (prop & kIsEnum) return;; 957 if (mname == ""G__virtualinfo"") return;; 958 ; 959 int size = sizeof(void*);; 960 ; 961 int nmax = 1;; 962 if (prop & kIsArray) {; 963 for (int dim = 0; dim < gCling->DataMemberInfo_ArrayDim(m); dim++) nmax *= gCling->DataMemberInfo_MaxIndex(m,dim);; 964 }; 965 ; 966 std::string clmName(TClassEdit::ShortType(gCling->DataMemberInfo_TypeName(m),; 967 TClassEdit::kDropTrailStar) );; 968 TClass * clm = TClass::GetClass(clmName.c_str());; 969 R__ASSERT(clm);; 970 if (!(prop & kIsPointer)) {; 971 size = clm->Size();; 972 if (size==0) size = gCling->DataMemberInfo_TypeSize(m);; 973 }; 974 ; 975 ; 976 gCling->DataMemberInfo_Delete(m);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:32887,assert,assert,32887,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['assert'],['assert']
Testability,"/////; 1659void MethodDL::Train(); 1660{; 1661 if (fInteractive) {; 1662 Log() << kFATAL << ""Not implemented yet"" << Endl;; 1663 return;; 1664 }; 1665 ; 1666 // using for training same scalar type defined for the prediction; 1667 if (this->GetArchitectureString() == ""GPU"") {; 1668#ifdef R__HAS_TMVAGPU; 1669 Log() << kINFO << ""Start of deep neural network training on GPU."" << Endl << Endl;; 1670#ifdef R__HAS_CUDNN; 1671 TrainDeepNet<DNN::TCudnn<ScalarImpl_t> >();; 1672#else; 1673 TrainDeepNet<DNN::TCuda<ScalarImpl_t>>();; 1674#endif; 1675#else; 1676 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 1677 ""you have CUDA installed and it was successfully ""; 1678 ""detected by CMAKE.""; 1679 << Endl;; 1680 return;; 1681#endif; 1682 } else if (this->GetArchitectureString() == ""CPU"") {; 1683#ifdef R__HAS_TMVACPU; 1684 // note that number of threads used for BLAS might be different; 1685 // e.g use openblas_set_num_threads(num_threads) for OPENBLAS backend; 1686 Log() << kINFO << ""Start of deep neural network training on CPU using MT, nthreads = ""; 1687 << gConfig().GetNCpu() << Endl << Endl;; 1688#else; 1689 Log() << kINFO << ""Start of deep neural network training on single thread CPU (without ROOT-MT support) "" << Endl; 1690 << Endl;; 1691#endif; 1692 TrainDeepNet<DNN::TCpu<ScalarImpl_t> >();; 1693 return;; 1694 }; 1695 else {; 1696 Log() << kFATAL << this->GetArchitectureString() <<; 1697 "" is not a supported architecture for TMVA::MethodDL""; 1698 << Endl;; 1699 }; 1700 ; 1701}; 1702 ; 1703////////////////////////////////////////////////////////////////////////////////; 1704void TMVA::MethodDL::FillInputTensor(); 1705{; 1706 // fill the input tensor fXInput from the current Event data; 1707 // with the correct shape depending on the model used; 1708 // The input tensor is used for network prediction after training ; 1709 // using a single event. The network batch size must be equal to 1. ; 1710 // The architecture specified at compile time in ArchitectureImp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:66753,Log,Log,66753,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Log'],['Log']
Testability,"/////; 172/// Compute Coulomb correction factor (Phys Rev. D50 3-1 (1994) page 1254); 173 ; 174void TGeoElement::ComputeCoulombFactor(); 175{; 176 static constexpr Double_t k1 = 0.0083, k2 = 0.20206, k3 = 0.0020, k4 = 0.0369;; 177 Double_t fsc = TGeoManager::kRootUnits == TGeoManager::GetDefaultUnits() ? TGeoUnit::fine_structure_const; 178 : TGeant4Unit::fine_structure_const;; 179 Double_t az2 = (fsc * fZ) * (fsc * fZ);; 180 Double_t az4 = az2 * az2;; 181 ; 182 fCoulomb = (k1 * az4 + k2 + 1. / (1. + az2)) * az2 - (k3 * az4 + k4) * az4;; 183}; 184////////////////////////////////////////////////////////////////////////////////; 185/// Compute Tsai's Expression for the Radiation Length (Phys Rev. D50 3-1 (1994) page 1254); 186 ; 187void TGeoElement::ComputeLradTsaiFactor(); 188{; 189 static constexpr Double_t Lrad_light[] = {5.31, 4.79, 4.74, 4.71};; 190 static constexpr Double_t Lprad_light[] = {6.144, 5.621, 5.805, 5.924};; 191 ; 192 fRadTsai = 0.0;; 193 if (fZ == 0); 194 return;; 195 const Double_t logZ3 = TMath::Log(fZ) / 3.;; 196 ; 197 Double_t Lrad, Lprad;; 198 Double_t alpha_rcl2 =; 199 TGeoManager::kRootUnits == TGeoManager::GetDefaultUnits() ? TGeoUnit::alpha_rcl2 : TGeant4Unit::alpha_rcl2;; 200 Int_t iz = static_cast<Int_t>(fZ + 0.5) - 1; // The static cast comes from G4lrint; 201 static const Double_t log184 = TMath::Log(184.15);; 202 static const Double_t log1194 = TMath::Log(1194.);; 203 if (iz <= 3) {; 204 Lrad = Lrad_light[iz];; 205 Lprad = Lprad_light[iz];; 206 } else {; 207 Lrad = log184 - logZ3;; 208 Lprad = log1194 - 2 * logZ3;; 209 }; 210 ; 211 fRadTsai = 4 * alpha_rcl2 * fZ * (fZ * (Lrad - fCoulomb) + Lprad);; 212}; 213////////////////////////////////////////////////////////////////////////////////; 214/// Print this isotope; 215 ; 216void TGeoElement::Print(Option_t *option) const; 217{; 218 printf(""Element: %s Z=%d N=%f A=%f [g/mole]\n"", GetName(), fZ, Neff(), fA);; 219 if (HasIsotopes()) {; 220 for (Int_t i = 0; i < fNisotopes; i++) {; 221 TGeoIs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:6957,Log,Log,6957,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['Log'],['Log']
Testability,"////; 904/// If center = kTRUE axis title will be centered. The default is right adjusted.; 905 ; 906void TGaxis::CenterTitle(Bool_t center); 907{; 908 ; 909 if (center) SetBit(TAxis::kCenterTitle);; 910 else ResetBit(TAxis::kCenterTitle);; 911}; 912 ; 913////////////////////////////////////////////////////////////////////////////////; 914/// Draw this axis with new attributes.; 915 ; 916TGaxis *TGaxis::DrawAxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; 917 Double_t wmin, Double_t wmax, Int_t ndiv, Option_t *chopt,; 918 Double_t gridlength); 919{; 920 ; 921 TGaxis *newaxis = new TGaxis(xmin,ymin,xmax,ymax,wmin,wmax,ndiv,chopt,gridlength);; 922 newaxis->SetLineColor(fLineColor);; 923 newaxis->SetLineWidth(fLineWidth);; 924 newaxis->SetLineStyle(fLineStyle);; 925 newaxis->SetTextAlign(fTextAlign);; 926 newaxis->SetTextAngle(fTextAngle);; 927 newaxis->SetTextColor(fTextColor);; 928 newaxis->SetTextFont(fTextFont);; 929 newaxis->SetTextSize(fTextSize);; 930 newaxis->SetTitleSize(fTitleSize);; 931 newaxis->SetTitleOffset(fTitleOffset);; 932 newaxis->SetLabelFont(fLabelFont);; 933 newaxis->SetLabelColor(fLabelColor);; 934 newaxis->SetLabelSize(fLabelSize);; 935 newaxis->SetLabelOffset(fLabelOffset);; 936 newaxis->SetTickSize(fTickSize);; 937 newaxis->SetBit(kCanDelete);; 938 newaxis->SetTitle(GetTitle());; 939 newaxis->SetBit(TAxis::kCenterTitle,TestBit(TAxis::kCenterTitle));; 940 newaxis->AppendPad();; 941 return newaxis;; 942}; 943 ; 944////////////////////////////////////////////////////////////////////////////////; 945/// Static function returning `gStyle->GetAxisMaxDigits()`.; 946 ; 947Int_t TGaxis::GetMaxDigits(); 948{; 949 return gStyle->GetAxisMaxDigits();; 950}; 951 ; 952////////////////////////////////////////////////////////////////////////////////; 953/// Internal method to import TAxis attributes to this TGaxis.; 954 ; 955void TGaxis::ImportAxisAttributes(TAxis *axis); 956{; 957 // cleanup previously configured custom labels; 958 CleanupMod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:32410,Test,TestBit,32410,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,"///; 851/// The function returns the number of bytes committed to the memory basket.; 852/// If a write error occurs, the number of bytes returned is -1.; 853/// If no data are written, because e.g. the branch is disabled,; 854/// the number of bytes returned is 0.; 855 ; 856Int_t TBranch::FillImpl(ROOT::Internal::TBranchIMTHelper *imtHelper); 857{; 858 if (TestBit(kDoNotProcess)) {; 859 return 0;; 860 }; 861 ; 862 TBasket* basket = (TBasket*)fBaskets.UncheckedAt(fWriteBasket);; 863 if (!basket) {; 864 basket = fTree->CreateBasket(this); // create a new basket; 865 if (!basket) return 0;; 866 ++fNBaskets;; 867 fBaskets.AddAtAndExpand(basket,fWriteBasket);; 868 }; 869 TBuffer* buf = basket->GetBufferRef();; 870 ; 871 // Fill basket buffer.; 872 ; 873 Int_t nsize = 0;; 874 ; 875 if (buf->IsReading()) {; 876 basket->SetWriteMode();; 877 }; 878 ; 879 if (!TestBit(kDoNotUseBufferMap)) {; 880 buf->ResetMap();; 881 }; 882 ; 883 Int_t lnew = 0;; 884 Int_t nbytes = 0;; 885 ; 886 if (fEntryBuffer) {; 887 nbytes = FillEntryBuffer(basket,buf,lnew);; 888 } else {; 889 Int_t lold = buf->Length();; 890 basket->Update(lold);; 891 ++fEntries;; 892 ++fEntryNumber;; 893 (this->*fFillLeaves)(*buf);; 894 if (buf->GetMapCount()) {; 895 // The map is used.; 896 ResetBit(TBranch::kDoNotUseBufferMap);; 897 }; 898 lnew = buf->Length();; 899 nbytes = lnew - lold;; 900 }; 901 ; 902 if (fEntryOffsetLen) {; 903 Int_t nevbuf = basket->GetNevBuf();; 904 // Total size in bytes of EntryOffset table.; 905 nsize = nevbuf * sizeof(Int_t);; 906 } else {; 907 if (!basket->GetNevBufSize()) {; 908 basket->SetNevBufSize(nbytes);; 909 }; 910 }; 911 ; 912 // Should we create a new basket?; 913 // fSkipZip force one entry per buffer (old stuff still maintained for CDF); 914 // Transfer full compressed buffer only; 915 ; 916 // If GetAutoFlush() is less than zero, then we are determining the end of the autocluster; 917 // based upon the number of bytes already flushed. This is incompatible with one-basket-per-cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:30611,Test,TestBit,30611,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//; 10215/// where `h` is the horizontal alignment and `v` is the; 10216/// vertical alignment.; 10217///; 10218/// - `h` can get the values 1 2 3 for left, center, and right; 10219/// - `v` can get the values 1 2 3 for bottom, middle and top; 10220///; 10221/// for instance the default alignment is: 13 (left top); 10222 ; 10223void THistPainter::PaintTitle(); 10224{; 10225 // probably best place for calls PaintHighlightBin; 10226 // calls after paint histo (1D or 2D) and before paint title and stats; 10227 if (!gPad->GetView()) PaintHighlightBin();; 10228 ; 10229 if (Hoption.Same) return;; 10230 if (fH->TestBit(TH1::kNoTitle)) return;; 10231 Int_t nt = strlen(fH->GetTitle());; 10232 TPaveText *title = nullptr;; 10233 TObject *obj;; 10234 TIter next(gPad->GetListOfPrimitives());; 10235 while ((obj = next())) {; 10236 if (!obj->InheritsFrom(TPaveText::Class())) continue;; 10237 title = (TPaveText*)obj;; 10238 if (strcmp(title->GetName(),""title"")) {title = nullptr; continue;}; 10239 break;; 10240 }; 10241 if (nt == 0 || gStyle->GetOptTitle() <= 0) {; 10242 if (title) delete title;; 10243 return;; 10244 }; 10245 Double_t ht = gStyle->GetTitleH();; 10246 Double_t wt = gStyle->GetTitleW();; 10247 ; 10248 if (ht <= 0) {; 10249 if (gStyle->GetTitleFont("""")%10 == 3) {; 10250 Double_t hw = TMath::Max((Double_t)gPad->XtoPixel(gPad->GetX2()),; 10251 (Double_t)gPad->YtoPixel(gPad->GetY1()));; 10252 ht = 1.1*(gStyle->GetTitleSize("""")/hw);; 10253 } else {; 10254 ht = 1.1*gStyle->GetTitleFontSize();; 10255 }; 10256 }; 10257 if (ht <= 0) ht = 0.05;; 10258 if (wt <= 0) {; 10259 TLatex l;; 10260 l.SetTextSize(ht);; 10261 l.SetTitle(fH->GetTitle());; 10262 // adjustment in case the title has several lines (#splitline); 10263 ht = TMath::Max(ht, 1.2*l.GetYsize()/(gPad->GetY2() - gPad->GetY1()));; 10264 Double_t wndc = l.GetXsize()/(gPad->GetX2() - gPad->GetX1());; 10265 wt = TMath::Min(0.7, 0.02+wndc);; 10266 }; 10267 if (title) {; 10268 TText *t0 = (TText*)title->GetLine(0);; 10269 if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:367044,Test,TestBit,367044,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//; 755/// Private method to generate a ROCCurve instance for a given method.; 756/// Handles the conversion from TMVA ResultSet to a format the ROCCurve class; 757/// understands.; 758///; 759/// \note You own the retured pointer.; 760///; 761 ; 762TMVA::ROCCurve *TMVA::Factory::GetROC(TString datasetname, TString theMethodName, UInt_t iClass, Types::ETreeType type); 763{; 764 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 765 Log() << kERROR << Form(""DataSet = %s not found in methods map."", datasetname.Data()) << Endl;; 766 return nullptr;; 767 }; 768 ; 769 if (!this->HasMethod(datasetname, theMethodName)) {; 770 Log() << kERROR << Form(""Method = %s not found with Dataset = %s "", theMethodName.Data(), datasetname.Data()); 771 << Endl;; 772 return nullptr;; 773 }; 774 ; 775 std::set<Types::EAnalysisType> allowedAnalysisTypes = {Types::kClassification, Types::kMulticlass};; 776 if (allowedAnalysisTypes.count(this->fAnalysisType) == 0) {; 777 Log() << kERROR << Form(""Can only generate ROC curves for analysis type kClassification and kMulticlass.""); 778 << Endl;; 779 return nullptr;; 780 }; 781 ; 782 TMVA::MethodBase *method = dynamic_cast<TMVA::MethodBase *>(this->GetMethod(datasetname, theMethodName));; 783 TMVA::DataSet *dataset = method->Data();; 784 dataset->SetCurrentType(type);; 785 TMVA::Results *results = dataset->GetResults(theMethodName, type, this->fAnalysisType);; 786 ; 787 UInt_t nClasses = method->DataInfo().GetNClasses();; 788 if (this->fAnalysisType == Types::kMulticlass && iClass >= nClasses) {; 789 Log() << kERROR; 790 << Form(""Given class number (iClass = %i) does not exist. There are %i classes in dataset."", iClass,; 791 nClasses); 792 << Endl;; 793 return nullptr;; 794 }; 795 ; 796 TMVA::ROCCurve *rocCurve = nullptr;; 797 if (this->fAnalysisType == Types::kClassification) {; 798 ; 799 std::vector<Float_t> *mvaRes = dynamic_cast<ResultsClassification *>(results)->GetValueVector();; 800 std::vector<Bool_t> *mvaResTypes = dynamic_cast<Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:31433,Log,Log,31433,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"//; 918/// Draw a clone of this canvas into the current pad; 919/// In an interactive session, select the destination/current pad; 920/// with the middle mouse button, then point to the canvas area to select; 921/// the canvas context menu item DrawClonePad.; 922/// Note that the original canvas may have subpads.; 923 ; 924TObject *TCanvas::DrawClonePad(); 925{; 926 auto padsav = gPad;; 927 auto selpad = gROOT->GetSelectedPad();; 928 auto pad = padsav;; 929 if (pad == this) pad = selpad;; 930 if (!padsav || !pad || pad == this) {; 931 TCanvas *newCanvas = (TCanvas*)DrawClone();; 932 newCanvas->SetWindowSize(GetWindowWidth(),GetWindowHeight());; 933 return newCanvas;; 934 }; 935 if (fCanvasID == -1) {; 936 auto factory = gROOT->IsWebDisplay() ? gBatchGuiFactory : gGuiFactory;; 937 fCanvasImp = factory->CreateCanvasImp(this, GetName(), fWindowTopX, fWindowTopY,; 938 fWindowWidth, fWindowHeight);; 939 if (!fCanvasImp) return nullptr;; 940 fCanvasImp->ShowMenuBar(TestBit(kMenuBar));; 941 fCanvasID = fCanvasImp->InitWindow();; 942 }; 943 this->cd();; 944 //copy pad attributes; 945 pad->Range(fX1,fY1,fX2,fY2);; 946 pad->SetTickx(GetTickx());; 947 pad->SetTicky(GetTicky());; 948 pad->SetGridx(GetGridx());; 949 pad->SetGridy(GetGridy());; 950 pad->SetLogx(GetLogx());; 951 pad->SetLogy(GetLogy());; 952 pad->SetLogz(GetLogz());; 953 pad->SetBorderSize(GetBorderSize());; 954 pad->SetBorderMode(GetBorderMode());; 955 TAttLine::Copy((TAttLine&)*pad);; 956 TAttFill::Copy((TAttFill&)*pad);; 957 TAttPad::Copy((TAttPad&)*pad);; 958 ; 959 //copy primitives; 960 TIter next(GetListOfPrimitives());; 961 while (auto obj = next()) {; 962 pad->cd();; 963 pad->Add(obj->Clone(), next.GetOption(), kFALSE); // do not issue modified for each object; 964 }; 965 pad->ResizePad();; 966 pad->Modified();; 967 pad->Update();; 968 if (padsav) padsav->cd();; 969 return nullptr;; 970}; 971 ; 972////////////////////////////////////////////////////////////////////////////////; 973/// Report name and title ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:30141,Test,TestBit,30141,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability,"//; void TMVAMinimalClassification(); {; TString outputFilename = ""out.root"";; TFile *outFile = new TFile(outputFilename, ""RECREATE"");; ; // Data generation; TTree *signalTree = genTree(1000, 0.0, 2.0, 100);; TTree *backgroundTree = genTree(1000, 1.0, 2.0, 101);; ; TString factoryOptions = ""AnalysisType=Classification"";; TMVA::Factory factory{"""", outFile, factoryOptions};; ; TMVA::DataLoader dataloader{""dataset""};; ; // Data specification; dataloader.AddVariable(""x"", 'D');; dataloader.AddVariable(""y"", 'D');; ; dataloader.AddSignalTree(signalTree, 1.0);; dataloader.AddBackgroundTree(backgroundTree, 1.0);; ; TCut signalCut = """";; TCut backgroundCut = """";; TString datasetOptions = ""SplitMode=Random"";; dataloader.PrepareTrainingAndTestTree(signalCut, backgroundCut, datasetOptions);; ; // Method specification; TString methodOptions = """";; factory.BookMethod(&dataloader, TMVA::Types::kBDT, ""BDT"", methodOptions);; ; // Training and Evaluation; factory.TrainAllMethods();; factory.TestAllMethods();; factory.EvaluateAllMethods();; ; // Clean up; outFile->Close();; ; delete outFile;; delete signalTree;; delete backgroundTree;; }; DataLoader.h; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Double_tdouble Double_tDefinition RtypesCore.h:59; TFile.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMinimalClassification_8C.html:8982,Test,TestAllMethods,8982,doc/master/TMVAMinimalClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMinimalClassification_8C.html,1,['Test'],['TestAllMethods']
Testability,"/6]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator- ; (; Element ; val, . const TMatrixT< Element > & ; source . ). operation this = val-source ; Definition at line 2396 of file TMatrixT.cxx. ◆ operator<() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator< ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 < source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [1/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [2/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixT< Element > & ; source1, . const TMatrixTSym< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator<=() [3/3]. template<class Element > . TMatrixT< Element > TMatrixTAutoloadOps::operator<= ; (; const TMatrixTSym< Element > & ; source1, . const TMatrixT< Element > & ; source2 . ). logical operation source1 <= source2 ; Definition at line 2705 of file TMatrixT.cxx. ◆ operator==() [1/2]. template<class Element > . Bool_t TMatrixTAutoloadOps::operator== ; (; const TMatrixTBase< Element > &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:34707,log,logical,34707,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['log'],['logical']
Testability,"/; 2191/// \author Anna Kreshuk; 2192 ; 2193Double_t TMath::ChisquareQuantile(Double_t p, Double_t ndf); 2194{; 2195 Double_t c[]={0, 0.01, 0.222222, 0.32, 0.4, 1.24, 2.2,; 2196 4.67, 6.66, 6.73, 13.32, 60.0, 70.0,; 2197 84.0, 105.0, 120.0, 127.0, 140.0, 175.0,; 2198 210.0, 252.0, 264.0, 294.0, 346.0, 420.0,; 2199 462.0, 606.0, 672.0, 707.0, 735.0, 889.0,; 2200 932.0, 966.0, 1141.0, 1182.0, 1278.0, 1740.0,; 2201 2520.0, 5040.0};; 2202 Double_t e = 5e-7;; 2203 Double_t aa = 0.6931471806;; 2204 Int_t maxit = 20;; 2205 Double_t ch, p1, p2, q, t, a, b, x;; 2206 Double_t s1, s2, s3, s4, s5, s6;; 2207 ; 2208 if (ndf <= 0) return 0;; 2209 ; 2210 Double_t g = TMath::LnGamma(0.5*ndf);; 2211 ; 2212 Double_t xx = 0.5 * ndf;; 2213 Double_t cp = xx - 1;; 2214 if (ndf >= TMath::Log(p)*(-c[5])){; 2215 //starting approximation for ndf less than or equal to 0.32; 2216 if (ndf > c[3]) {; 2217 x = TMath::NormQuantile(p);; 2218 //starting approximation using Wilson and Hilferty estimate; 2219 p1=c[2]/ndf;; 2220 ch = ndf*TMath::Power((x*TMath::Sqrt(p1) + 1 - p1), 3);; 2221 if (ch > c[6]*ndf + 6); 2222 ch = -2 * (TMath::Log(1-p) - cp * TMath::Log(0.5 * ch) + g);; 2223 } else {; 2224 ch = c[4];; 2225 a = TMath::Log(1-p);; 2226 do{; 2227 q = ch;; 2228 p1 = 1 + ch * (c[7]+ch);; 2229 p2 = ch * (c[9] + ch * (c[8] + ch));; 2230 t = -0.5 + (c[7] + 2 * ch) / p1 - (c[9] + ch * (c[10] + 3 * ch)) / p2;; 2231 ch = ch - (1 - TMath::Exp(a + g + 0.5 * ch + cp * aa) *p2 / p1) / t;; 2232 }while (TMath::Abs(q/ch - 1) > c[1]);; 2233 }; 2234 } else {; 2235 ch = TMath::Power((p * xx * TMath::Exp(g + xx * aa)),(1./xx));; 2236 if (ch < e) return ch;; 2237 }; 2238//call to algorithm AS 239 and calculation of seven term Taylor series; 2239 for (Int_t i=0; i<maxit; i++){; 2240 q = ch;; 2241 p1 = 0.5 * ch;; 2242 p2 = p - TMath::Gamma(xx, p1);; 2243 ; 2244 t = p2 * TMath::Exp(xx * aa + g + p1 - cp * TMath::Log(ch));; 2245 b = t / ch;; 2246 a = 0.5 * t - b * cp;; 2247 s1 = (c[19] + a * (c[17] + a * (c[14] + a * (c[1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:74130,Log,Log,74130,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,2,['Log'],['Log']
Testability,"/; 2415/// logn->SetParameters(0.5, 0., 1.);; 2416/// logn->SetLineColor(2);; 2417/// TF1 *logn1 = logn->DrawCopy(""L"");; 2418/// logn->SetParameters(1.0, 0., 1.);; 2419/// logn->SetLineColor(3);; 2420/// TF1 *logn2 = logn->DrawCopy(""LSAME"");; 2421/// logn->SetParameters(2.0, 0., 1.);; 2422/// logn->SetLineColor(4);; 2423/// TF1 *logn3 = logn->DrawCopy(""LSAME"");; 2424/// logn->SetParameters(5.0, 0., 1.);; 2425/// logn->SetLineColor(6);; 2426/// TF1 *logn4 = logn->DrawCopy(""LSAME"");; 2427///; 2428/// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; 2429/// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; 2430/// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; 2431/// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; 2432/// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; 2433/// legend->Draw();; 2434/// }; 2435/// End_Macro; 2436 ; 2437Double_t TMath::LogNormal(Double_t x, Double_t sigma, Double_t theta, Double_t m); 2438{; 2439 if ((x<theta) || (sigma<=0) || (m<=0)) {; 2440 Error(""TMath::Lognormal"", ""illegal parameter values"");; 2441 return 0;; 2442 }; 2443 // lognormal_pdf uses same definition of http://en.wikipedia.org/wiki/Log-normal_distribution; 2444 // where mu = log(m); 2445 ; 2446 return ::ROOT::Math::lognormal_pdf(x, TMath::Log(m), sigma, theta);; 2447 ; 2448}; 2449 ; 2450////////////////////////////////////////////////////////////////////////////////; 2451/// Computes quantiles for standard normal distribution N(0, 1); 2452/// at probability p; 2453///; 2454/// ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484.; 2455 ; 2456Double_t TMath::NormQuantile(Double_t p); 2457{; 2458 if ((p<=0)||(p>=1)) {; 2459 Error(""TMath::NormQuantile"", ""probability outside (0, 1)"");; 2460 return 0;; 2461 }; 2462 ; 2463 Double_t a0 = 3.3871328727963666080e0;; 2464 Double_t a1 = 1.3314166789178437745e+2;; 2465 Double_t a2 = 1.9715909503065514427e+3;; 2466 Double_t a3 = 1.3731693765509461125e+4;; 2467 Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:83215,Log,LogNormal,83215,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,2,['Log'],"['LogNormal', 'Lognormal']"
Testability,"/; 25 ; 26#include <iostream>; 27#include ""Strlen.h""; 28#include ""strlcpy.h""; 29#include ""TDirectoryFile.h""; 30#include ""TFile.h""; 31#include ""TBufferFile.h""; 32#include ""TBufferJSON.h""; 33#include ""TMapFile.h""; 34#include ""TClassTable.h""; 35#include ""TInterpreter.h""; 36#include ""THashList.h""; 37#include ""TBrowser.h""; 38#include ""TFree.h""; 39#include ""TKey.h""; 40#include ""TStreamerInfo.h""; 41#include ""TROOT.h""; 42#include ""TError.h""; 43#include ""Bytes.h""; 44#include ""TClass.h""; 45#include ""TRegexp.h""; 46#include ""TSystem.h""; 47#include ""TStreamerElement.h""; 48#include ""TProcessUUID.h""; 49#include ""TVirtualMutex.h""; 50#include ""TEmulatedCollectionProxy.h""; 51 ; 52const UInt_t kIsBigFile = BIT(16);; 53const Int_t kMaxLen = 2048;; 54 ; 55ClassImp(TDirectoryFile);; 56 ; 57 ; 58////////////////////////////////////////////////////////////////////////////////; 59/// Default TDirectoryFile constructor; 60 ; 61TDirectoryFile::TDirectoryFile(); 62{; 63 /// Intentionally placed here; 64 /// when TDirectoryFile() = default; used, mac1014/cxx17 fails on some tests; 65 /// Problem with TObject::IsOnHeap() failing; 66}; 67 ; 68 ; 69////////////////////////////////////////////////////////////////////////////////; 70/// Create a new TDirectoryFile; 71///; 72/// A new directory with a name and a title is created in the current directory.; 73/// The directory header information is immediately saved on the file; 74/// A new key is added in the parent directory.; 75/// When this constructor is called from a class directly derived; 76/// from TDirectoryFile, the third argument, classname, MUST be specified.; 77/// In this case, classname must be the name of the derived class.; 78///; 79/// Note that the directory name cannot contain slashes.; 80 ; 81TDirectoryFile::TDirectoryFile(const char *name, const char *title, Option_t *classname, TDirectory* initMotherDir); 82{; 83 // We must not publish this objects to the list of RecursiveRemove (indirectly done; 84 // by 'Appending' this object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:2155,test,tests,2155,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['test'],['tests']
Testability,"/; 36////////////////////////////////////////////////////////////////////////////; 37 ; 38class TGeoMatrix : public TNamed {; 39public:; 40 enum EGeoTransfTypes {; 41 kGeoIdentity = 0,; 42 kGeoShared = BIT(14),; 43 kGeoTranslation = BIT(17),; 44 kGeoRotation = BIT(18),; 45 kGeoScale = BIT(19),; 46 kGeoReflection = BIT(20),; 47 kGeoRegistered = BIT(21),; 48 kGeoSavePrimitive = BIT(22),; 49 kGeoMatrixOwned = BIT(23),; 50 kGeoCombiTrans = kGeoTranslation | kGeoRotation,; 51 kGeoGenTrans = kGeoTranslation | kGeoRotation | kGeoScale,; 52 kGeoMatrixBits = kGeoShared | kGeoGenTrans | kGeoReflection | kGeoRegistered | kGeoSavePrimitive | kGeoMatrixOwned; 53 };; 54 ; 55protected:; 56 TGeoMatrix(const TGeoMatrix &other);; 57 ; 58public:; 59 TGeoMatrix();; 60 TGeoMatrix(const char *name);; 61 ~TGeoMatrix() override;; 62 ; 63 Bool_t IsIdentity() const { return !TestBit(kGeoGenTrans); }; 64 Bool_t IsTranslation() const { return TestBit(kGeoTranslation); }; 65 Bool_t IsRotation() const { return TestBit(kGeoRotation); }; 66 Bool_t IsReflection() const { return TestBit(kGeoReflection); }; 67 Bool_t IsScale() const { return TestBit(kGeoScale); }; 68 Bool_t IsShared() const { return TestBit(kGeoShared); }; 69 Bool_t IsOwned() const { return TestBit(kGeoMatrixOwned); }; 70 Bool_t IsCombi() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation)); }; 71 Bool_t IsGeneral() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation) && TestBit(kGeoScale)); }; 72 Bool_t IsRegistered() const { return TestBit(kGeoRegistered); }; 73 Bool_t IsRotAboutZ() const;; 74 void GetHomogenousMatrix(Double_t *hmat) const;; 75 const char *GetPointerName() const;; 76 ; 77 virtual Int_t GetByteCount() const;; 78 virtual const Double_t *GetTranslation() const = 0;; 79 virtual const Double_t *GetRotationMatrix() const = 0;; 80 virtual const Double_t *GetScale() const = 0;; 81 virtual TGeoHMatrix Inverse() const = 0;; 82 virtual void LocalToMaster(const Double_t *local, Double_t *master) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:2430,Test,TestBit,2430,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,1,['Test'],['TestBit']
Testability,"/; 465/// Get number of decay channels of this element.; 466 ; 467Int_t TGeoElementRN::GetNdecays() const; 468{; 469 if (!fDecays); 470 return 0;; 471 return fDecays->GetEntriesFast();; 472}; 473 ; 474////////////////////////////////////////////////////////////////////////////////; 475/// Get the activity in Bq of a gram of material made from this element.; 476 ; 477Double_t TGeoElementRN::GetSpecificActivity() const; 478{; 479 static const Double_t ln2 = TMath::Log(2.);; 480 Double_t sa = (fHalfLife > 0 && fA > 0) ? (ln2 * TMath::Na() / fHalfLife / fA) : 0.;; 481 return sa;; 482}; 483 ; 484////////////////////////////////////////////////////////////////////////////////; 485/// Check if all decay chain of the element is OK.; 486 ; 487Bool_t TGeoElementRN::CheckDecays() const; 488{; 489 if (TObject::TestBit(kElementChecked)); 490 return kTRUE;; 491 TObject *oelem = (TObject *)this;; 492 TGeoDecayChannel *dc;; 493 TGeoElementRN *elem;; 494 TGeoElementTable *table = GetElementTable();; 495 TString decayName;; 496 if (!table) {; 497 Error(""CheckDecays"", ""Element table not present"");; 498 return kFALSE;; 499 }; 500 Bool_t resultOK = kTRUE;; 501 if (!fDecays) {; 502 oelem->SetBit(kElementChecked, kTRUE);; 503 return resultOK;; 504 }; 505 Double_t br = 0.;; 506 Int_t decayResult = 0;; 507 TIter next(fDecays);; 508 while ((dc = (TGeoDecayChannel *)next())) {; 509 br += dc->BranchingRatio();; 510 decayResult = DecayResult(dc);; 511 if (decayResult) {; 512 elem = table->GetElementRN(decayResult);; 513 if (!elem) {; 514 TGeoDecayChannel::DecayName(dc->Decay(), decayName);; 515 Error(""CheckDecays"", ""Element after decay %s of %s not found in DB"", decayName.Data(), fName.Data());; 516 return kFALSE;; 517 }; 518 dc->SetDaughter(elem);; 519 resultOK = elem->CheckDecays();; 520 }; 521 }; 522 if (TMath::Abs(br - 100) > 1.E-3) {; 523 Warning(""CheckDecays"", ""BR for decays of element %s sum-up = %f"", fName.Data(), br);; 524 resultOK = kFALSE;; 525 }; 526 oelem->SetBit(kElementChecked, kT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:16299,Test,TestBit,16299,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"/; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anony",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:2763,log,logs,2763,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['log'],['logs']
Testability,/TMVA_Higgs_Classification_Likelihood.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Fisher.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_BDT.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_PyKeras.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.012 sec ; Factory : Test method: Fisher for Classification performance; : ; Fisher : [dataset] : Evaluation of Fisher on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.00146 sec ; : Dataset[dataset] : Evaluation of Fisher on testing sample; Factory : Test method: BDT for Classification performance; : ; BDT : [dataset] : Evaluation of BDT on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0456 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.017919 1.0069 [ -3.3498 3.4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 0.98851 [ -2.9734 3.3513 ]; : m_wbb: -0.010633 0.99340 [ -3.2442 3.2244 ]; : m_wwbb: -0.012669 0.99259 [ -3.1871 5.7307 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.101 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:50138,test,testing,50138,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,3,"['Test', 'test']","['Test', 'testing']"
Testability,"/__\\:\\/:/ / "" << Endl;; 1362 logger << ""/:/ / /:/ / |:|__/:/ / \\::/ / "" << Endl;; 1363 logger << ""\\/__/ /:/ / \\::::/__/ /:/ / "" << Endl;; 1364 logger << "" /:/ / ~~~~ /:/ / "" << Endl;; 1365 logger << "" \\/__/ \\/__/ "" << Endl << Endl;; 1366 break;; 1367 ; 1368 case kBlockWelcomeMsg:; 1369 logger << Endl;; 1370 logger << ""_|_|_|_|_| _| _| _| _| _|_| "" << Endl;; 1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _| _| _| _| _| _|_|_|_| "" << Endl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""_______________________________________"" << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:48999,log,logger,48999,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"/info-stuff/bytecalc.html for example.; 30 ; 31///////////////////////////////////////////////////////////////////////////////; 32/// Return the size expressed in 'human readable' format.; 33/// \param bytes the size in bytes to be converted; 34/// \param si whether to use the SI units or not.; 35/// \param coeff return the size expressed in the new unit.; 36/// \param units return a pointer to the string representation of the new unit; 37template <typename value_type>; 38void ToHumanReadableSize(value_type bytes,; 39 Bool_t si,; 40 Double_t *coeff,; 41 const char **units); 42{; 43 // Static lookup table of byte-based SI units; 44 static const char *const suffix[][2] =; 45 { { ""B"", ""B"" },; 46 { ""KB"", ""KiB"" },; 47 { ""MB"", ""MiB"" },; 48 { ""GB"", ""GiB"" },; 49 { ""TB"", ""TiB"" },; 50 { ""EB"", ""EiB"" },; 51 { ""ZB"", ""ZiB"" },; 52 { ""YB"", ""YiB"" } };; 53 value_type unit = si ? 1000 : 1024;; 54 int exp = 0;; 55 if (bytes == unit) {; 56 // On some 32bit platforms, the result of; 57 // (int) (std::log(bytes) / std::log(unit); 58 // in the case of bytes==unit ends up surprisingly to be zero; 59 // rather than one, so 'hard code' the result; 60 exp = 1;; 61 } else if (bytes > 0) {; 62 exp = std::min( (int) (std::log(bytes) / std::log(unit)),; 63 (int) (sizeof(suffix) / sizeof(suffix[0]) - 1));; 64 }; 65 *coeff = bytes / std::pow(unit, exp);; 66 *units = suffix[exp][!si];; 67}; 68 ; 69enum class EFromHumanReadableSize {; 70 kSuccess,; 71 kParseFail,; 72 kOverflow; 73};; 74 ; 75///////////////////////////////////////////////////////////////////////////////; 76/// Convert strings like the following into byte counts; 77/// 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB; 78/// with some amount of forgiveness baked into the parsing.; 79/// For this routine we use the official SI unit where the [i] is reserved; 80/// for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes.; 81/// \param str the string to be parsed; 82/// \param value will be updated with the result if and onl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/StringConv_8hxx_source.html:2246,log,log,2246,doc/master/StringConv_8hxx_source.html,https://root.cern,https://root.cern/doc/master/StringConv_8hxx_source.html,8,['log'],['log']
Testability,"/section3/eda3663.htm; Implementation by Anna Kreshuk.; Example:; TF1* fc = new TF1(""fc"", ""TMath::CauchyDist(x, [0], [1])"", -5, 5);; fc->SetParameters(0, 1);; fc->Draw();. Double_t ChisquareQuantile(Double_t p, Double_t ndf); Evaluate the quantiles of the chi-squared probability distribution function.; Algorithm AS 91 Appl. Statist. (1975) Vol.24, P.35; implemented by Anna Kreshuk.; Incorporates the suggested changes in AS R85 (vol.40(1), pp.233-5, 1991); Parameters:; p - the probability value, at which the quantile is computed; ndf - number of degrees of freedom. Double_t FDist(Double_t F, Double_t N, Double_t M); Computes the density function of F-distribution; (probability function, integral of density, is computed in FDistI). Parameters N and M stand for degrees of freedom of chi-squares; mentioned above parameter F is the actual variable x of the; density function p(x) and the point at which the density function; is calculated. About F distribution:; F-distribution arises in testing whether two random samples; have the same variance. It is the ratio of two chi-square; distributions, with N and M degrees of freedom respectively,; where each chi-square is first divided by it's number of degrees; of freedom.; Implementation by Anna Kreshuk. Double_t FDistI(Double_t F, Double_t N, Double_t M); Calculates the cumulative distribution function of F-distribution,; this function occurs in the statistical test of whether two observed; samples have the same variance. For this test a certain statistic F,; the ratio of observed dispersion of the first sample to that of the; second sample, is calculated. N and M stand for numbers of degrees; of freedom in the samples 1-FDistI() is the significance level at; which the hypothesis ""1 has smaller variance than 2"" can be rejected.; A small numerical value of 1 - FDistI() implies a very significant; rejection, in turn implying high confidence in the hypothesis; ""1 has variance greater than 2"".; Implementation by Anna Kreshuk. Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:30520,test,testing,30520,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,6,['test'],['testing']
Testability,"/somefile.root"");. You can list the objects inside the file using .ls:; root [1] .ls; TFile** hsimple.root Demo ROOT file with histograms; TFile* hsimple.root Demo ROOT file with histograms; KEY: TH1F hpx;1 This is the px distribution; KEY: TH2F hpxpy;1 py vs px; KEY: TProfile hprof;1 Profile of pz versus px; KEY: TNtuple ntuple;1 Demo ntuple. You can access objects inside the files by their names, either by using this name as a variable on the prompt:; root [2] hpx->Draw();. In regular code you should use TFile::GetObject():; root [3] TH1* readThis = 0;; root [4] file->GetObject(""hpx"", readThis);. Now let's try this out: get the TTree called ""MyTree"" from a file located at http://root.cern.ch/root/files/tutorials/mockupx.root Note that you don't need to download it with your browser: you just specify the http:// location as an argument to TFile::Open(). Once you have the TTree object, call Print() on it to see its structure.; . ‹ 0. Setting up ROOT; up; 2. Running code in ROOT ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/1-extracting-object-tfile.html:3922,test,tests,3922,d/1-extracting-object-tfile.html,https://root.cern,https://root.cern/d/1-extracting-object-tfile.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,"/test; > stress // default 1000 events; > stress 30 // test with 30 events; Start ROOT with the batch mode option (-b) to suppress the graphic output.; > root -b; root[] .L stress.cxx; root[] stress(1000)// test with 1000 events; root[] stress(30)// test with 30 events; The output of stress includes a pass/fail conclusion for each test, the total number of bytes read and written, and the elapsed real and CPU time. It also calculates a performance index for your machine relative to a reference machine a DELL Inspiron 7500 (Pentium III 600 MHz) with 256 MB of memory and 18GB IDE disk in ROOTMARKS. Higher ROOTMARKS means better performance. The reference machine has 200 ROOTMARKS, so the sample run below with 53.7 ROOTMARKS is about four times slower than the reference machine.; Here is a sample run:; % root -b; root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 : Purge, Reuse of gaps in TFile......................... OK; Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ***************************************************************",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1084652,Test,Test,1084652,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Test']
Testability,"/testSmooth.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. testSmooth.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Histogram smoothing. . ; int ipad = 1;; TCanvas * c1 = 0;; ; void smooth_hist(const char * fname, double xmin, double xmax, int n1, int n2) {; ; std::cout << ""smoothing a "" << fname << "" histogram"" << std::endl;; ; TH1D * h1 = new TH1D(""h1"",""h1"",100,xmin,xmax);; TH1D * h2 = new TH1D(""h2"",""h2"",100,xmin,xmax);; h1->FillRandom(fname,n1);; ; TH1D * h1_s = new TH1D(*h1);; h1_s->SetName(""h1_s"");; h1_s->Smooth();; ; h2->FillRandom(fname,n2);; ; double p1 = h1->Chi2Test(h2,"""");; double p2 = h1_s->Chi2Test(h2,""UU"");; if (p2 < p1) Error(""testSmooth"",""TH1::Smooth is not working correctly - a worst chi2 is obtained"");; ; std::cout << "" chi2 test non-smoothed histo "" << p1 << std::endl;; std::cout << "" chi2 test smoothed histo "" << p2 << std::endl;; ; double a1 = h1->AndersonDarlingTest(h2);; double a2 = h1_s->AndersonDarlingTest(h2);; ; std::cout << "" AD test non-smoothed histo "" << a1 << std::endl;; std::cout << "" AD test smoothed histo "" << a2 << std::endl;; ; double k1 = h1->KolmogorovTest(h2);; double k2 = h1_s->KolmogorovTest(h2);; ; std::cout << "" KS test non-smoothed histo "" << k1 << std::endl;; std::cout << "" KS test smoothed histo "" << k2 << std::endl;; ; c1->cd(ipad++);; h1->Draw(""E"");; h1_s->SetLineColor(kRed);; h1_s->Draw(""same"");; h2->Scale(double(n1)/n2);; h2->SetLineColor(kGreen);; h2->Draw(""same"");; }; ; void testSmooth(int n1 = 1000, int n2 = 1000000) {; ; TH1::AddDirectory(false);; ; c1 = new TCanvas();; c1->Divide(1,3);; ; ; smooth_hist(""gaus"",-5,5,n1,n2);; smooth_hist(""landau"",-5,15,n1,n2);; smooth_hist(""expo"",-5,0,n1,n2);; ; }; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; xminfloat xminDefinition THbookFile.cxx:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testSmooth_8C.html:750,test,testSmooth,750,doc/master/testSmooth_8C.html,https://root.cern,https://root.cern/doc/master/testSmooth_8C.html,8,['test'],"['test', 'testSmooth']"
Testability,"/webviewer/inc/ROOT/RGeomData.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. RGeomData.hxx. Go to the documentation of this file. 1// Author: Sergey Linev, 14.12.2018; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2023, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT7_RGeomData; 12#define ROOT7_RGeomData; 13 ; 14#include <vector>; 15#include <string>; 16#include <functional>; 17#include <memory>; 18 ; 19#include <ROOT/Browsable/RItem.hxx>; 20 ; 21#include ""TVirtualMutex.h""; 22 ; 23class TGeoNode;; 24class TGeoManager;; 25class TGeoShape;; 26class TGeoMatrix;; 27class TGeoVolume;; 28 ; 29// do not use namespace to avoid too long JSON; 30 ; 31namespace ROOT {; 32 ; 33class RGeomBrowserIter;; 34 ; 35namespace Experimental {; 36class RLogChannel;; 37} // namespace Experimental; 38 ; 39/// Log channel for Geomviewer diagnostics.; 40Experimental::RLogChannel &RGeomLog();; 41 ; 42/** Base description of geometry node, required only to build hierarchy */; 43 ; 44class RGeomNodeBase {; 45public:; 46 int id{0}; ///< node id, index in array; 47 std::string name; ///< node name; 48 std::vector<int> chlds; ///< list of childs id; 49 int vis{0}; ///< visibility flag, 0 - off, 1 - only when level==0, 99 - always; 50 bool nochlds{false}; ///< how far in hierarchy depth should be scanned; 51 ; 52 std::string color; ///< rgb code in hex format; 53 std::string material; ///< name of the material; 54 int sortid{0}; ///<! place in sorted array, to check cuts, or id of original node when used search structures; 55 ; 56 RGeomNodeBase(int _id = 0) : id(_id) {}; 57 ; 58 bool IsVisible() const { return vis > 0; }; 59 ; 60 /** Returns argument for regexp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:1153,Log,Log,1153,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,1,['Log'],['Log']
Testability,"/weights/TMVACrossValidation_BDTG_fold1.class.C; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG_fold1 for Classification performance; : ; <HEADER> BDTG_fold1 : [datasetcv] : Evaluation of BDTG_fold1 on testing sample (998 events); : Elapsed time for evaluation of 998 events: 0.00324 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDTG_fold1; : ; <HEADER> BDTG_fold1 : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv BDTG_fold1 : 0.973; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : datasetcv BDTG_fold1 : 0.575 (0.725) 0.947 (0.933) 0.981 (0.980); : -------------------------------------------------------------------------------------------------------------------; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> Factory : Booking method: BDTG_fold2; : ; <HEADER> BDTG_fold2 : #events: (reweighted) sig: 499 bkg: 499; : #events: (unweighted) sig: 499 bkg: 499; : Training 100 Decision Trees ... patience please; : Elapsed time for training with 998 events: 0.0434 sec ; <HEADER> BDTG_fold2 : [datasetcv] : Evaluation of BDTG_fold2 on training",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:5122,Test,Testing,5122,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,2,"['Test', 'test']","['Testing', 'test']"
Testability,"/weights/TMVARegression_KNN.weights.xml␛[0m; : Creating kd-tree with 1000 events; : Computing scale factor for 1d distributions: (ifrac, bottom, top) = (80%, 10%, 90%); ModulekNN : Optimizing tree for 2 variables with 1000 values; : <Fill> Class 1 has 1000 events; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_LD.weights.xml␛[0m; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_BDTG.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: PDEFoam for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of PDEFoam on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.0705 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: KNN for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of KNN on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.0918 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: LD for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of LD on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.00483 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: DNN_CPU for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of DNN_CPU on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.231 sec ; : Create variable histograms; : C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:127524,Test,Test,127524,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,3,"['Test', 'test']","['Test', 'testing']"
Testability,"/~~/:/ / |:| |/:/ / \\/__\\:\\/:/ / "" << Endl;; 1362 logger << ""/:/ / /:/ / |:|__/:/ / \\::/ / "" << Endl;; 1363 logger << ""\\/__/ /:/ / \\::::/__/ /:/ / "" << Endl;; 1364 logger << "" /:/ / ~~~~ /:/ / "" << Endl;; 1365 logger << "" \\/__/ \\/__/ "" << Endl << Endl;; 1366 break;; 1367 ; 1368 case kBlockWelcomeMsg:; 1369 logger << Endl;; 1370 logger << ""_|_|_|_|_| _| _| _| _| _|_| "" << Endl;; 1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _| _| _| _| _| _|_|_|_| "" << Endl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""______________________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:48977,log,logger,48977,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::fmod (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::fmod (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::exp (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::exp2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::expm1 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log10 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log1p (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::sqrt (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::cbrt (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot (const T0 &x, const RVec<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__vecops.html:24896,log,log,24896,doc/master/group__vecops.html,https://root.cern,https://root.cern/doc/master/group__vecops.html,1,['log'],['log']
Testability,"0 // Int_t imaxOld2 = axis2->GetLast();; 1841 // Bool_t hadRange1 = axis1->TestBit(TAxis::kAxisRange);; 1842 // Bool_t hadRange2 = axis2->TestBit(TAxis::kAxisRange);; 1843 ; 1844 // need to cast-away constness to set range; 1845 TAxis out1(*axis1);; 1846 TAxis out2(*axis2);; 1847 // const_cast<TAxis *>(axis1)->SetRange(imin1, imax1);; 1848 // const_cast<TAxis*>(axis2)->SetRange(imin2,imax2);; 1849 out1.SetRange(imin1, imax1);; 1850 out2.SetRange(imin2, imax2);; 1851 ; 1852 Bool_t computeErrors = GetSumw2N();; 1853 if (opt.Contains(""e"") ) {; 1854 computeErrors = kTRUE;; 1855 opt.Remove(opt.First(""e""),1);; 1856 }; 1857 Bool_t originalRange = kFALSE;; 1858 if (opt.Contains('o') ) {; 1859 originalRange = kTRUE;; 1860 opt.Remove(opt.First(""o""),1);; 1861 }; 1862 ; 1863 TH1D * h1 = DoProject1D(name, title, projAxis, &out1, &out2, computeErrors, originalRange,true,true);; 1864 ; 1865 // // restore original range; 1866 // if (axis1->TestBit(TAxis::kAxisRange)) {; 1867 // if (hadRange1) const_cast<TAxis*>(axis1)->SetRange(iminOld1,imaxOld1);; 1868 // if (axis2->TestBit(TAxis::kAxisRange)) const_cast<TAxis*>(axis2)->SetRange(iminOld2,imaxOld2);; 1869 // // we need also to restore the original bits; 1870 ; 1871 // draw in current pad; 1872 if (h1 && opt.Contains(""d"")) {; 1873 opt.Remove(opt.First(""d""),1);; 1874 TVirtualPad::TContext ctxt(gROOT->GetSelectedPad(), true, true);; 1875 if (!gPad || !gPad->FindObject(h1)) {; 1876 h1->Draw(opt);; 1877 } else {; 1878 h1->Paint(opt);; 1879 }; 1880 }; 1881 ; 1882 return h1;; 1883}; 1884 ; 1885////////////////////////////////////////////////////////////////////////////////; 1886/// internal methdod performing the projection to 1D histogram; 1887/// called from other TH3::DoProject1D; 1888 ; 1889TH1D *TH3::DoProject1D(const char* name, const char * title, const TAxis* projX,; 1890 const TAxis * out1, const TAxis * out2,; 1891 bool computeErrors, bool originalRange,; 1892 bool useUF, bool useOF) const; 1893{; 1894 // Create the projection h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:74403,Test,TestBit,74403,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,2,['Test'],['TestBit']
Testability,"0 30.000 30.000 35.000 35.000 35.000 45.000 55.000 45.000; Landau............ 15.000 100.000 15.000 20.000; Exponential....... 15.000 100.000 15.000 20.000; Binomial(5,0.5)... 20.000 450.000 30.000 35.000; Binomial(15,0.5).. 60.000 1300.000 80.000 80.000; Poisson(3)........ 45.000 400.000 50.000 50.000; Poisson(10)....... 75.000 950.000 85.000 85.000; Poisson(70)....... 250.000 550.000 255.000 260.000; Poisson(100)...... 250.000 550.000 255.000 260.000; GausTF1........... 50.000 130.000 65.000 55.000; LandauTF1......... 50.000 135.000 55.000 55.000; GausUNURAN........ 20.000 110.000 25.000 20.000; PoissonUNURAN(10). 50.000 200.000 55.000 55.000; PoissonUNURAN(100) 45.000 205.000 50.000 50.000; ; #include <TRandom1.h>; #include <TRandom2.h>; #include <TRandom3.h>; #include <TRandomGen.h>; #include <TStopwatch.h>; #include <TF1.h>; #if __has_include(""TUnuran.h"") // handy check; #include <TUnuran.h>; #include <TUnuranContDist.h>; #endif; #include <TFile.h>; ; ; void testAll() {; int i, N = 2000000;; float cpn = 1000000000./N;; int N1 = N/10; float cpn1 = cpn*10; // for TRandom1; double x,y;; TRandom *rsave = gRandom;; TRandom *r0 = new TRandom();; TRandom *r1 = new TRandom1();; TRandom *r2 = new TRandom2();; TRandom *r3 = new TRandom3();; TRandom *r4 = new TRandomMixMax();; TRandom *r5 = new TRandomMixMax17();; TRandom *r6 = new TRandomGen<ROOT::Math::MixMaxEngine<256,0>>();; TRandom *r7 = new TRandomMixMax256();; TRandom *r8 = new TRandomGen<ROOT::Math::MixMaxEngine<256,4>>();; TRandom *r9 = new TRandomMT64();; TRandom *r10 = new TRandomRanlux48();; ; ; TStopwatch sw;; printf(""Distribution nanoseconds/call\n"");; printf("" TRandom TRandom1 TRandom2 TRandom3 MixMax240 MixMax17 Mixmax256_0 MixMax256_2 MixMax256_4 MT_64 Ranlux48\n"");; ; sw.Start();; for (i=0;i<N;i++) {; x = r0->Rndm(i);; }; printf(""Rndm.............. %8.3f"",sw.CpuTime()*cpn);; sw.Start();; for (i=0;i<N1;i++) {; x = r1->Rndm(i);; }; printf("" %8.3f"",sw.CpuTime()*cpn1);; sw.Start();; for (i=0;i<N;i++) {; x = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testrandom_8C.html:3395,test,testAll,3395,doc/master/testrandom_8C.html,https://root.cern,https://root.cern/doc/master/testrandom_8C.html,1,['test'],['testAll']
Testability,"0 aInnerSum = aInnerSum + (double) lvec[j] * tmp * tmp /; 621 (baj * (nsum - baj) - nsum * (double) lvec[j] / 4.0);; 622 }; 623 ; 624 adk[0] = adk[0] + innerSum / ns[i]; /* AkN2*/; 625 adk[1] = adk[1] + aInnerSum / ns[i]; /* AakN2 */; 626 }; 627 ; 628 /* k-sample Anderson-Darling test statistics in both original and; 629 alternative versions, AkN2 and AakN2, are stored in the given; 630 double array adk */; 631 adk[0] = adk[0] / (double) nsum; /* AkN2*/; 632 adk[1] = (nsum - 1) * adk[1] / ((double) nsum * (double) nsum); /* AakN2 */; 633 ; 634 // /* free pointers */; 635 // for (i = 0; i < k; i++) {; 636 // free(samples[i]);; 637 // }; 638 // free(samples);; 639 ; 640}; 641 ; 642 ; 643/*; 644 Taken from (1) -- Named for 2 samples but implemented for K. Restricted to K = 2 by the class's constructors; 645*/; 646void GoFTest::AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const {; 647 pvalue = -1;; 648 testStat = -1;; 649 if (fTestSampleFromH0) {; 650 MATH_ERROR_MSG(""AndersonDarling2SamplesTest"", ""Only 1-sample tests can be issued with a 1-sample constructed GoFTest object!"");; 651 return;; 652 }; 653 std::vector<Double_t> z(fCombinedSamples);; 654 // unique removes all consecutives duplicates elements. This is exactly what we wants ; 655 // for example unique of v={1,2,2,3,1,2,3,3} results in {1,2,3,1,2,3} which is exactly what we wants ; 656 std::vector<Double_t>::iterator endUnique = std::unique(z.begin(), z.end()); //z_j's in (1); 657 z.erase(endUnique, z.end() ); ; 658 std::vector<size_t> h; // h_j's in (1); 659 std::vector<Double_t> H; // H_j's in (1); 660 size_t N = fCombinedSamples.size();; 661 Double_t A2 = 0.0; // Anderson-Darling A^2 Test Statistic; 662 ; 663#ifdef USE_OLDIMPL ; 664 ; 665 TStopwatch w; w.Start();; 666 ; 667 unsigned int nSamples = fSamples.size();; 668 ; 669 // old implementation ; 670 for (std::vector<Double_t>::iterator data = z.begin(); data != endUnique; ++data) {; 671 size_t n = std::count(fCombinedSamples.begin(), fC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:23160,test,testStat,23160,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,3,['test'],"['testStat', 'tests']"
Testability,"0 bins, the values of PROB,; instead of being exactly uniformly distributed between zero and one, have; a mean value of about 0.56. We can apply a useful; rule: As long as the bin width is small compared with any significant; physical effect (for example the experimental resolution) then the binning; cannot have an important effect. Therefore, we believe that for all; practical purposes, the probability value PROB is calculated correctly; provided the user is aware that:. 1. The value of PROB should not be expected to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less.""; Note also that for GoF test of unbinned data ROOT provides also the class ROOT::Math::GoFTest. The class has also method for doing one sample tests (i.e. comparing the data with a given distribution). ; Reimplemented in TH2, and TH3.; Definition at line 8178 of file TH1.cxx. ◆ LabelsDeflate(). void TH1::LabelsDeflate ; (; Option_t * ; ax = ""X""). virtual . Reduce the number of bins for the axis passed in the option to the number of bins having a label. ; The method will remove only the extra bins existing after the last ""labeled"" bin. Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5245 of file TH1.cxx. ◆ LabelsInflate(). void TH1::LabelsInflate ; (; Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOpti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:186632,test,test,186632,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability,"0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = 2, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = 2); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, both the preparation and building phases are run.; If opt == 1, only the preparation phase (asserting and, eventually, downloading; of the package) is done; '*path' contains the full path to the; package to be passed in the next call; If opt == 2, only the building phase is run using *path .; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kBuildPackage; case). Keep in sync in case of changes. Int_t LoadPackage(const char* package, Bool_t notOnClient = kFALSE, TList* loadopts = 0, TList* workers = 0); Load specified package. Executes the PROOF-INF/SETUP.C script; on all active nodes. If notOnClient = true, don't load package; on the client. The default is to load the package also on the client.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t LoadPackageOnClient(const char* package, TList* loadopts = 0); Load specified package in the client. Executes the PROOF-INF/SETUP.C; script on the clie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:71887,assert,asserting,71887,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['assert'],['asserting']
Testability,"0 of file RGeoPainter.hxx. ◆ SetTopVisible(). void RGeoPainter::SetTopVisible ; (; Bool_t ; on = kTRUE). overridevirtual . Implements TVirtualGeoPainter.; Definition at line 27 of file RGeoPainter.cxx. ◆ SetTopVolume(). void ROOT::RGeoPainter::SetTopVolume ; (; TGeoVolume * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 102 of file RGeoPainter.hxx. ◆ SetVisLevel(). void ROOT::RGeoPainter::SetVisLevel ; (; Int_t ; = 3). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 103 of file RGeoPainter.hxx. ◆ SetVisOption(). void ROOT::RGeoPainter::SetVisOption ; (; Int_t ; = 0). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 104 of file RGeoPainter.hxx. ◆ ShapeDistancetoPrimitive(). Int_t ROOT::RGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; , . Int_t ; , . Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 105 of file RGeoPainter.hxx. ◆ Test(). void ROOT::RGeoPainter::Test ; (; Int_t ; , . Option_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 106 of file RGeoPainter.hxx. ◆ TestOverlaps(). void ROOT::RGeoPainter::TestOverlaps ; (; const char * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 107 of file RGeoPainter.hxx. ◆ TestVoxels(). Bool_t ROOT::RGeoPainter::TestVoxels ; (; TGeoVolume * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 108 of file RGeoPainter.hxx. ◆ UnbombTranslation(). void ROOT::RGeoPainter::UnbombTranslation ; (; const Double_t * ; , . Double_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 109 of file RGeoPainter.hxx. ◆ Weight(). Double_t ROOT::RGeoPainter::Weight ; (; Double_t ; , . Option_t * ; = ""v"" . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 110 of file RGeoPainter.hxx. Member Data Documentation. ◆ fGeoManager. TGeoManage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:31174,Test,Test,31174,doc/v632/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html,1,['Test'],['Test']
Testability,"0 of file RGeoPainter.hxx. ◆ SetTopVisible(). void RGeoPainter::SetTopVisible ; (; Bool_t ; on = kTRUE). overridevirtual . Implements TVirtualGeoPainter.; Definition at line 63 of file RGeoPainter.cxx. ◆ SetTopVolume(). void ROOT::RGeoPainter::SetTopVolume ; (; TGeoVolume * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 102 of file RGeoPainter.hxx. ◆ SetVisLevel(). void ROOT::RGeoPainter::SetVisLevel ; (; Int_t ; = 3). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 103 of file RGeoPainter.hxx. ◆ SetVisOption(). void ROOT::RGeoPainter::SetVisOption ; (; Int_t ; = 0). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 104 of file RGeoPainter.hxx. ◆ ShapeDistancetoPrimitive(). Int_t ROOT::RGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; , . Int_t ; , . Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 105 of file RGeoPainter.hxx. ◆ Test(). void ROOT::RGeoPainter::Test ; (; Int_t ; , . Option_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 106 of file RGeoPainter.hxx. ◆ TestOverlaps(). void ROOT::RGeoPainter::TestOverlaps ; (; const char * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 107 of file RGeoPainter.hxx. ◆ TestVoxels(). Bool_t ROOT::RGeoPainter::TestVoxels ; (; TGeoVolume * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 108 of file RGeoPainter.hxx. ◆ UnbombTranslation(). void ROOT::RGeoPainter::UnbombTranslation ; (; const Double_t * ; , . Double_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 109 of file RGeoPainter.hxx. ◆ Weight(). Double_t ROOT::RGeoPainter::Weight ; (; Double_t ; , . Option_t * ; = ""v"" . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 110 of file RGeoPainter.hxx. Member Data Documentation. ◆ fGeoManager. TGeoManage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:31182,Test,Test,31182,doc/master/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html,1,['Test'],['Test']
Testability,"0 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control. Note that the tree must be already defined. ; Definition at line 666 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [2/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; TEventList * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control ; Definition at line 633 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [1/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; const char * ; train). Sets the Training dataset. ; Those events will be used for the minimization. Note that the tree must be already defined. ; Definition at line 645 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [2/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; TEventList * ; train). Sets the Training dataset. ; Those events will be used for the minimization ; Definition at line 622 of file TMultiLayerPerceptron.cxx. ◆ Shuffle(). void TMultiLayerPerceptron::Shuffle ; (; Int_t * ; index, . Int_t ; n . ); const. private . Shuffle the Int_t index[n] in input. ; Input:; index: the array to shuffle; n: the size of the array. Output:; index: the shuffled indexes. This method is used for stochastic training ; Definition at line 2139 of file TMultiLay",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:47555,Test,Test,47555,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['Test'],['Test']
Testability,"0 }; 4191 // We can not check at this point whether after the unload there will; 4192 // still be interpreter information about this class (as v5 was doing),; 4193 // instead this function must only be called if the definition is (about); 4194 // to be unloaded.; 4195 ; 4196 ResetCaches();; 4197 ; 4198 // We got here because the definition Decl is about to be unloaded.; 4199 if (fState != TClass::kHasTClassInit) {; 4200 if (fStreamerInfo->GetEntries() != 0) {; 4201 fState = TClass::kEmulated;; 4202 } else {; 4203 fState = TClass::kForwardDeclared;; 4204 }; 4205 } else {; 4206 // if the ClassInfo was loaded for a class with a TClass Init and it; 4207 // gets unloaded, should we guess it can be reloaded?; 4208 fCanLoadClassInfo = kTRUE;; 4209 }; 4210}; 4211 ; 4212////////////////////////////////////////////////////////////////////////////////; 4213/// To clean out all caches.; 4214 ; 4215void TClass::ResetCaches(); 4216{; 4217 R__ASSERT(!TestBit(kLoading) && ""Resetting the caches does not make sense during loading!"" );; 4218 ; 4219 // Not owning lists, don't call Delete(), but unload; 4220 if (fData.load()); 4221 (*fData).Unload();; 4222 if (fUsingData.load()); 4223 (*fUsingData).Unload();; 4224 if (fEnums.load()); 4225 (*fEnums).Unload();; 4226 if (fMethod.load()); 4227 (*fMethod).Unload();; 4228 ; 4229 delete fAllPubData; fAllPubData = nullptr;; 4230 ; 4231 if (fBase.load()); 4232 (*fBase).Delete();; 4233 delete fBase.load(); fBase = nullptr;; 4234 ; 4235 if (fRealData); 4236 fRealData->Delete();; 4237 delete fRealData; fRealData=nullptr;; 4238}; 4239 ; 4240////////////////////////////////////////////////////////////////////////////////; 4241/// Resets the menu list to it's standard value.; 4242 ; 4243void TClass::ResetMenuList(); 4244{; 4245 if (fClassMenuList); 4246 fClassMenuList->Delete();; 4247 else; 4248 fClassMenuList = new TList();; 4249 fClassMenuList->Add(new TClassMenuItem(TClassMenuItem::kPopupStandardList, this));; 4250}; 4251 ; 4252/////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:159524,Test,TestBit,159524,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,"0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*mean(RooRealVar& obs); RooMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Double_t value) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*plotOn(R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:16445,test,testArg,16445,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,2,['test'],['testArg']
Testability,"0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*mean(RooRealVar& obs); RooMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Double_t value) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsReal.html:16824,test,testArg,16824,root/html530/RooAbsReal.html,https://root.cern,https://root.cern/root/html530/RooAbsReal.html,1,['test'],['testArg']
Testability,"0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::Exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategory.html:3511,test,testArg,3511,root/html534/RooAbsCategory.html,https://root.cern,https://root.cern/root/html534/RooAbsCategory.html,3,['test'],['testArg']
Testability,"0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidRooPrintable::printArgs(ostream& os) const; virtual voidRooPrintable::printClassName(ostream& os) const; Bool_tprintEvalCounter() const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose, TString indent = """") const; virtual voidRooPrintable::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooPrintable::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetEpsAbs(Double_t newEpsAbs); voidsetEpsRel(Double_t newEpsRel); static voidTObject::SetObjectStat(Bool_t stat); voidsetPrintEvalCounter(Bool_t newVal); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumIntConfig.html:6371,Test,TestBit,6371,root/html530/RooNumIntConfig.html,https://root.cern,https://root.cern/root/html530/RooNumIntConfig.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"0) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetMaximumX and TF1::GetX. Double_t GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; Return the X value corresponding to the maximum value of the function; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx.; This way, the step size can be controlled via the SetNpx() function.; If the function is unimodal or if its extrema are far apart, setting; the fNpx to a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetX. Double_t GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the minimum value of the function on the (xmin, xmax) interval; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:40733,log,logx,40733,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,12,['log'],"['log', 'logx']"
Testability,"0), "" input weights"");; 1579 // Architecture_t::PrintTensor(deepNet.GetLayerAt(0)->GetWeightsAt(1), "" state weights"");; 1580 // }; 1581 }; 1582 // Architecture_t::PrintTensor(deepNet.GetLayerAt(1)->GetWeightsAt(0), "" cudnn weights"");; 1583 // ArchitectureImpl_t::PrintTensor(fNet->GetLayerAt(1)->GetWeightsAt(0), "" cpu weights"");; 1584 ; 1585 minValError = valError;; 1586 }; 1587 else if ( minValError <= 0. ); 1588 minValError = valError;; 1589 ; 1590 if (!computeLossInTraining) {; 1591 trainingError = 0.0;; 1592 // Compute training error.; 1593 for (auto batch : trainingData) {; 1594 auto inputTensor = batch.GetInput();; 1595 auto outputMatrix = batch.GetOutput();; 1596 auto weights = batch.GetWeights();; 1597 trainingError += deepNet.Loss(inputTensor, outputMatrix, weights, false, false);; 1598 }; 1599 }; 1600 // normalize loss to number of batches and add regularization term; 1601 trainingError /= (Double_t)(nTrainingSamples / settings.batchSize);; 1602 trainingError += regTerm;; 1603 ; 1604 //Log the loss value; 1605 fTrainHistory.AddValue(""trainingError"",nTrainEpochs,trainingError);; 1606 ; 1607 // stop measuring; 1608 tend = std::chrono::system_clock::now();; 1609 ; 1610 // Compute numerical throughput.; 1611 std::chrono::duration<double> elapsed_seconds = tend - tstart;; 1612 std::chrono::duration<double> elapsed1 = t1-tstart;; 1613 // std::chrono::duration<double> elapsed2 = t2-tstart;; 1614 // time to compute training and test errors; 1615 std::chrono::duration<double> elapsed_testing = tend-t1;; 1616 ; 1617 double seconds = elapsed_seconds.count();; 1618 // double nGFlops = (double)(settings.testInterval * batchesInEpoch * settings.batchSize)*1.E-9;; 1619 // nGFlops *= deepnet.GetNFlops() * 1e-9;; 1620 double eventTime = elapsed1.count()/( batchesInEpoch * settings.testInterval * settings.batchSize);; 1621 ; 1622 converged =; 1623 convergenceCount > settings.convergenceSteps || nTrainEpochs >= settings.maxEpochs;; 1624 ; 1625 ; 1626 Log() << std::setw(10) <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:63724,Log,Log,63724,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Log'],['Log']
Testability,"0); 2160 return dist;; 2161 dist = Int_t(TMath::Sqrt(Double_t(dist)));; 2162 if (dist < maxdist && fIsPaintingShape); 2163 gPad->SetSelected((TObject *)shape);; 2164 return dist;; 2165}; 2166 ; 2167////////////////////////////////////////////////////////////////////////////////; 2168/// Check time of finding ""Where am I"" for n points.; 2169 ; 2170void TGeoPainter::Test(Int_t npoints, Option_t *option); 2171{; 2172 fChecker->Test(npoints, option);; 2173}; 2174 ; 2175////////////////////////////////////////////////////////////////////////////////; 2176/// Geometry overlap checker based on sampling.; 2177 ; 2178void TGeoPainter::TestOverlaps(const char *path); 2179{; 2180 fChecker->TestOverlaps(path);; 2181}; 2182 ; 2183////////////////////////////////////////////////////////////////////////////////; 2184/// Check voxels efficiency per volume.; 2185 ; 2186Bool_t TGeoPainter::TestVoxels(TGeoVolume *vol); 2187{; 2188 return fChecker->TestVoxels(vol);; 2189}; 2190 ; 2191////////////////////////////////////////////////////////////////////////////////; 2192/// Get the new 'unbombed' translation vector according current exploded view mode.; 2193 ; 2194void TGeoPainter::UnbombTranslation(const Double_t *tr, Double_t *bombtr); 2195{; 2196 memcpy(bombtr, tr, 3 * sizeof(Double_t));; 2197 switch (fExplodedView) {; 2198 case kGeoNoBomb: return;; 2199 case kGeoBombXYZ:; 2200 bombtr[0] /= fBombX;; 2201 bombtr[1] /= fBombY;; 2202 bombtr[2] /= fBombZ;; 2203 return;; 2204 case kGeoBombCyl:; 2205 bombtr[0] /= fBombR;; 2206 bombtr[1] /= fBombR;; 2207 bombtr[2] /= fBombZ;; 2208 return;; 2209 case kGeoBombSph:; 2210 bombtr[0] /= fBombR;; 2211 bombtr[1] /= fBombR;; 2212 bombtr[2] /= fBombR;; 2213 return;; 2214 default: return;; 2215 }; 2216}; 2217 ; 2218////////////////////////////////////////////////////////////////////////////////; 2219/// Compute weight [kg] of the current volume.; 2220 ; 2221Double_t TGeoPainter::Weight(Double_t precision, Option_t *option); 2222{; 2223 return fChecker-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:71280,Test,TestVoxels,71280,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Test'],['TestVoxels']
Testability,"0); rebuild the sampling distributions by; generating some toys and find for each of theam a new upper limit; Return the upper limit distribution and optionally also the pValue distributions for Cls, Clsb and Clbxs; as a TList for each scanned point. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverter.h 40096 2011-07-01 10:08:17Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:11312,test,test,11312,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,2,['test'],['test']
Testability,"0); rebuild the sampling distributions by; generating some toys and find for each of theam a new upper limit; Return the upper limit distribution and optionally also the pValue distributions for Cls, Clsb and Clbxs; as a TList for each scanned point. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverter.h 41455 2011-10-18 13:23:21Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverter.html:11829,test,test,11829,root/html532/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverter.html,2,['test'],['test']
Testability,"0); these might not necessarily be the same thing. int CreateNImpDensitiesForOnePOI(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, int n, double poiValueForBackground = 0.0); n is the number of importance densities. ToyMCImportanceSampler(); Proof constructor. Do not use. ToyMCImportanceSampler(RooStats::TestStatistic& ts, Int_t ntoys). void SetDensityToGenerateFromByIndex(unsigned int i, bool fromNull = false); specifies the pdf to sample from. void AddImportanceDensity(RooAbsPdf* p, const RooArgSet* s); For importance sampling with multiple desnities/snapshots:; This is used to check the current Likelihood against Likelihoods from; other importance densities apart from the one given as importance snapshot.; The pdf can be NULL in which case the density from SetImportanceDensity(); is used. The snapshot is also optional. void AddNullDensity(RooAbsPdf* p, const RooArgSet* s = NULL); The pdf can be NULL in which case the density from SetPdf(); is used. The snapshot and TestStatistic is also optional. void SetPdf(RooAbsPdf& pdf); overwrite from ToyMCSampler. void SetParametersForTestStat(const RooArgSet& nullpoi); overwrite from ToyMCSampler. void SetApplyVeto(bool b = true); When set to true, this sets the weight of all toys to zero that; do not have the largest likelihood under the density it was generated; compared to the other densities. { fApplyVeto = b; }. void SetReuseNLL(bool r = true); { fReuseNLL = r; }. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL; Since the class use a NLL we need to set the ocnditional onservables if they exist in the model. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void SetEqualNumToysPerDensity( void ); { fToysStrategy = EQUALTOYSPERDENSITY; }. void SetExpIncreasingNumToysPerDensity( void ); { fToysStrategy = EXPONENTIALTOYDISTRIBUTION; }. »",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html:10351,Test,TestStatistic,10351,root/html534/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html,1,['Test'],['TestStatistic']
Testability,"0); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); static voidSetReplyHostName(const char* host_name); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; static Bool_tStage(const char* path, UInt_t secs, const char* location = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTFile::UseCache(Int_t maxCacheSize = 10, Int_t pageSize = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; virtual Bool_tWriteBuffer(const char* buf, Int_t len); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTFile::WriteFree(); virtual voidTFile::WriteHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual UShort_tTFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheFile.html:13877,Test,TestBits,13877,root/html528/TDCacheFile.html,https://root.cern,https://root.cern/root/html528/TDCacheFile.html,3,['Test'],['TestBits']
Testability,"0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); Int_tminDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tmustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:24766,test,testArg,24766,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['test'],['testArg']
Testability,"0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3570,test,testStat,3570,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,2,"['Test', 'test']","['Test', 'testStat']"
Testability,"0);; 7400 xmax = TMath::Max(xmax,fval);; 7401 if (Hoption.Logy) {; 7402 if (fval > 0.3*c1) xmin = TMath::Min(xmin,fval);; 7403 }; 7404 }; 7405 }; 7406 next.Reset();; 7407 }; 7408 allchan += c1;; 7409 }; 7410 ; 7411 // Take into account maximum , minimum; 7412 ; 7413 if (Hoption.Logx && xmin <= 0) {; 7414 if (xmax >= 1) xmin = TMath::Max(.5,xmax*1e-10);; 7415 else xmin = 0.001*xmax;; 7416 }; 7417 Double_t xm = xmin;; 7418 if (maximum) xmax = fH->GetMaximumStored();; 7419 if (minimum) xm = fH->GetMinimumStored();; 7420 if (Hoption.Logx && xm <= 0) {; 7421 Error(where, ""log scale requested with zero or negative argument (%f)"", xm);; 7422 return 0;; 7423 }; 7424 else xmin = xm;; 7425 if (xmin >= xmax) {; 7426 if (Hoption.Logx) {; 7427 if (xmax > 0) xmin = 0.001*xmax;; 7428 else {; 7429 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", xmax);; 7430 return 0;; 7431 }; 7432 }; 7433 else {; 7434 if (xmin > 0) {; 7435 xmin = 0;; 7436 xmax *= 2;; 7437 } else if (xmin < 0) {; 7438 xmax = 0;; 7439 xmin *= 2;; 7440 } else {; 7441 xmin = 0;; 7442 xmax = 1;; 7443 }; 7444 }; 7445 }; 7446 ; 7447 // take into account normalization factor; 7448 Hparam.allchan = allchan;; 7449 Double_t factor = allchan;; 7450 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 7451 if (allchan) factor /= allchan;; 7452 if (factor == 0) factor = 1;; 7453 Hparam.factor = factor;; 7454 xmax = factor*xmax;; 7455 xmin = factor*xmin;; 7456 ; 7457 // For log scales, histogram coordinates are LOG10(ymin) and; 7458 // LOG10(ymax). Final adjustment (if not option ""Same""; 7459 // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; 7460 // Maximum and Minimum are not defined.; 7461 if (Hoption.Logx) {; 7462 if (xmin <=0 || xmax <=0) {; 7463 Error(where, ""Cannot set Y axis to log scale"");; 7464 return 0;; 7465 }; 7466 xmin = TMath::Log10(xmin);; 7467 if (!minimum) xmin += TMath::Log10(0.5);; 7468 xmax = TMath::Log10(xmax);; 7469 if (!maximum) xmax += TMath",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:268000,log,log,268000,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability,"0)MENU ; static voidTTree::SetMaxTreeSize(Long64_t maxsize = 1900000000); virtual voidTTree::SetMaxVirtualSize(Long64_t size = 0)MENU ; virtual voidTTree::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTree::SetNotify(TObject* obj); virtual voidTTree::SetObject(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTTree::SetParallelUnzip(Bool_t opt = kTRUE, Float_t RelSize = -1); virtual voidTTree::SetPerfStats(TVirtualPerfStats* perf); virtual voidTTree::SetScanField(Int_t n = 50)MENU ; virtual voidTTree::SetTimerInterval(Int_t msec = 333); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTTree::SetTreeIndex(TVirtualIndex* index); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTTree::SetUpdate(Int_t freq = 0); virtual voidTTree::SetWeight(Double_t w = 1, Option_t* option = """"); virtual voidTTree::Show(Long64_t entry = -1, Int_t lenmax = 20); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTTree::StartViewer()MENU ; virtual voidTTree::StopCacheLearningPhase(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TNtuple(); TNtuple(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); virtual Int_tTTree::UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual voidTTree::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNtuple.html:19269,Test,TestBit,19269,root/html602/TNtuple.html,https://root.cern,https://root.cern/root/html602/TNtuple.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"0)TGraph2D; SetObjectStat(Bool_t stat)TObjectstatic; SetPoint(Int_t point, Double_t x, Double_t y, Double_t z)TGraph2Dvirtual; SetTitle(const char *title="""") overrideTGraph2Dvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTGraph2Dvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGraph2Dinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGraph2D()TGraph2D; TGraph2D(Int_t n)TGraph2D; TGraph2D(Int_t n, Int_t *x, Int_t *y, Int_t *z)TGraph2D; TGraph2D(Int_t n, Float_t *x, Float_t *y, Float_t *z)TGraph2D; TGraph2D(Int_t n, Double_t *x, Double_t *y, Double_t *z)TGraph2D; TGraph2D(TH2 *h2)TGraph2D; TGraph2D(const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z)TGraph2D; TGraph2D(const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""")TGraph2D; TGraph2D(const TGraph2D &)TGraph2D; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TGraph2D() overrideTGraph2D; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D-members.html:10913,Test,TestBit,10913,doc/master/classTGraph2D-members.html,https://root.cern,https://root.cern/doc/master/classTGraph2D-members.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"0+ax*x+ay*y) ;  ; Double_t fBxCalc;  calculated value of b parameter for 1D ridges in x direction ;  ; Double_t fBxErr;  error value of b parameter for 1D ridges in x direction ;  ; Double_t fBxInit;  initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ;  ; Double_t fByCalc;  calculated value of b parameter for 1D ridges in y direction ;  ; Double_t fByErr;  error value of b parameter for 1D ridges in y direction ;  ; Double_t fByInit;  initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixAmp;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpX1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:25978,log,logical,25978,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability,"0, . Int_t ; last = -1 . ); const. virtual . Integrate the TGraph data within a given (index) range. ; Note that this function computes the area of the polygon enclosed by the points of the TGraph. The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon, since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point with the first one. It is clear that the order of the point is essential in defining the polygon. Also note that the segments should not intersect.; NB:; if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data you have to deal with. The most evident solution would be to divide the polygon in triangles and calculate the surface of them. But this can quickly become complicated as you will have to test every segments of every triangles and check if they are intersecting with a current polygon's segment or if it goes outside the polygon. Many calculations that would lead to many problems... The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's segments don't intersect. It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area. Sources. http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon . Definition at line 1808 of file TGraph.cxx. ◆ IsA(). TClass * TGraph::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGraphPolar, TGraphQQ, TGraph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:61867,test,test,61867,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['test'],['test']
Testability,"0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidCreateParameterPoints() const; voidCreateTestStatSampler() const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData*fDatadata set ; Bool_tfDoProfileConstructioninstead of full construction over nuisance parametrs, do profile; Bool_tfFluctuateDatatell ToyMCSampler to fluctuate number of entries in dataset; Int_tfNbinsnumber of samples per variable; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdfcommon PDF; RooAbsData*fPointsToTestpoints to perform the construction; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::ToyMCSampler*fTestStatSamplerthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(); default constructor; fWS = new RooWorkspace(""FeldmanCousinsWS"");; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__FeldmanCousins.html:8355,test,test,8355,root/html526/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html526/RooStats__FeldmanCousins.html,1,['test'],['test']
Testability,"0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidDeclareOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*fLoggermessage logger; Int_tfNparsnumber of parameters; const vector<TMVA::Interval*>fRangesallowed intervals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t Run(); estimator function interface for fitting. Double_t EstimatorFunction(vector<Double_t>& parameters); estimator function interface for fitting. virtual ~FitterBase(); {}. Double_t Run(). IFitterTarget& GetFitterTarget() const; { return fFitterTarget; }. Int_t GetNpars() const; accessor. { return fNpars; }. const char* GetName() const; remove namespace in name. { return fClassName; }. void DeclareOptions(); need to implement option declaration. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__FitterBase.html:6840,log,logger,6840,root/html534/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html534/TMVA__FitterBase.html,1,['log'],['logger']
Testability,"0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Int_tSendInterrupt(Int_t type); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); voidSendUrgent(Int_t type, Int_t int1, Int_t int2); voidSetAWait(Bool_t w = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClientID(Int_t); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterrupt(Bool_t i = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions, Int_t); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidSetSendOpt(ESendRecvOptions o); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); voidSetSessionID(Int_t id); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:8310,Test,TestBit,8310,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"0, Total sum= 3.30469e+06; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_PDEFoam.weights.xml␛[0m; : Read foams from file: ␛[0;36mdatasetreg/weights/TMVARegression_PDEFoam.weights_foams.root␛[0m; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_KNN.weights.xml␛[0m; : Creating kd-tree with 1000 events; : Computing scale factor for 1d distributions: (ifrac, bottom, top) = (80%, 10%, 90%); ModulekNN : Optimizing tree for 2 variables with 1000 values; : <Fill> Class 1 has 1000 events; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_LD.weights.xml␛[0m; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdatasetreg/weights/TMVARegression_BDTG.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: PDEFoam for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of PDEFoam on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.0705 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: KNN for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of KNN on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.0918 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: LD for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of LD on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.00483 sec ; : Create variable histograms; : Create regression target histograms; : Create regre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:127136,Test,Test,127136,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,3,"['Test', 'test']","['Test', 'testing']"
Testability,"0, V >Struct to solve a linear system using its Cholesky decomposition (N=0) ;  C_solver< F, 1, V >Struct to solve a linear system using its Cholesky decomposition (N=1) ;  C_solver< F, 2, V >Struct to solve a linear system using its Cholesky decomposition (N=2) ;  C_solver< F, 3, V >Struct to solve a linear system using its Cholesky decomposition (N=3) ;  C_solver< F, 4, V >Struct to solve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  NGenAlgoOptUtil;  NGenVector;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NImpl;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:37375,test,test,37375,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['test'],['test']
Testability,"0,0.92,32);; TPad *pad2 = new TPad(""pad2"",""pad2"",0.51,0.62,0.98,0.92,33);; TPad *pad3 = new TPad(""pad3"",""pad3"",0.03,0.02,0.97,0.535,38);; pad1->Draw(); pad2->Draw(); pad3->Draw();; ; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98, ""Various options on LOG scales plots"");; title->SetFillColor(16);; title->SetTextFont(42);; title->Draw();; ; TPaveText *pave = new TPaveText(0.1,0.55,0.9,0.61);; pave->SetFillColor(42);; pave->SetTextAlign(12);; pave->SetTextFont(42);; pave->AddText(""When more Log labels are requested, the overlapping labels are removed"");; pave->Draw();; ; pad1->cd();; pad1->SetLogy();; pad1->SetGridy();; TF1 *f1 = new TF1(""f1"",""x*sin(x)*exp(-0.1*x)+15"",-10.,10.);; TF1 *f2 = new TF1(""f2"",""(sin(x)+cos(x))**5+15"",-10.,10.);; TF1 *f3 = new TF1(""f3"",""(sin(x)/(x)-x*cos(x))+15"",-10.,10.);; f1->SetLineWidth(1); f1->SetLineColor(2);; f2->SetLineWidth(1); f2->SetLineColor(3);; f3->SetLineWidth(1); f3->SetLineColor(4);; f1->Draw();; f2->Draw(""same"");; f3->Draw(""same"");; f1->GetYaxis()->SetMoreLogLabels();; TPaveText *pave1 = new TPaveText(-6,2,6,6);; pave1->SetFillColor(42);; pave1->SetTextAlign(12);; pave1->SetTextFont(42);; pave1->AddText(""Log scale along Y axis."");; pave1->AddText(""More Log labels requested."");; pave1->Draw();; ; pad2->cd();; double x[10] = { 200, 300, 400, 500, 600, 650, 700, 710, 900,1000 };; double y[10] = { 200, 1000, 900, 400, 500, 250, 800, 150, 201, 220 };; TGraph *g_2 = new TGraph(10,x,y);; g_2->Draw(""AL*"");; g_2->SetMarkerColor(2);; g_2->GetYaxis()->SetMoreLogLabels();; g_2->GetYaxis()->SetNoExponent();; pad2->SetLogy();; g_2->GetXaxis()->SetMoreLogLabels();; pad2->SetLogx();; pad2->SetGridx();; TPaveText *pave2 = new TPaveText(150,80,500,180);; pave2->SetFillColor(42);; pave2->SetTextFont(42);; pave2->SetTextAlign(12);; pave2->AddText(""Log scale along X and Y axis."");; pave2->AddText(""More Log labels on both."");; pave2->AddText(""No exponent along Y axis."");; pave2->Draw();; ; pad3->cd();; pad3->SetGridx();; pad3->SetGridy();; pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/logscales_8C.html:1608,Log,Log,1608,doc/master/logscales_8C.html,https://root.cern,https://root.cern/doc/master/logscales_8C.html,1,['Log'],['Log']
Testability,"0.00000000001244332, 0.00000000000182256,; 129 -0.00000000000027007, 0.00000000000004042,-0.00000000000000610,; 130 0.00000000000000093,-0.00000000000000014, 0.00000000000000002};; 131 ; 132 Double_t t,h,y,s,a,alfa,b1,b2,b0;; 133 t=h=y=s=a=alfa=b1=b2=b0=0.;; 134 ; 135 if (x == 1) {; 136 h = pi6;; 137 } else if (x == -1) {; 138 h = -pi12;; 139 } else {; 140 t = -x;; 141 if (t <= -2) {; 142 y = -1/(1+t);; 143 s = 1;; 144 b1= TMath::Log(-t);; 145 b2= TMath::Log(1+1/t);; 146 a = -pi3+hf*(b1*b1-b2*b2);; 147 } else if (t < -1) {; 148 y = -1-t;; 149 s = -1;; 150 a = TMath::Log(-t);; 151 a = -pi6+a*(a+TMath::Log(1+1/t));; 152 } else if (t <= -0.5) {; 153 y = -(1+t)/t;; 154 s = 1;; 155 a = TMath::Log(-t);; 156 a = -pi6+a*(-hf*a+TMath::Log(1+t));; 157 } else if (t < 0) {; 158 y = -t/(1+t);; 159 s = -1;; 160 b1= TMath::Log(1+t);; 161 a = hf*b1*b1;; 162 } else if (t <= 1) {; 163 y = t;; 164 s = 1;; 165 a = 0;; 166 } else {; 167 y = 1/t;; 168 s = -1;; 169 b1= TMath::Log(t);; 170 a = pi6+hf*b1*b1;; 171 }; 172 h = y+y-1;; 173 alfa = h+h;; 174 b1 = 0;; 175 b2 = 0;; 176 for (Int_t i=19;i>=0;i--){; 177 b0 = c[i] + alfa*b1-b2;; 178 b2 = b1;; 179 b1 = b0;; 180 }; 181 h = -(s*(b0-h*b2)+a);; 182 }; 183 return h;; 184}; 185 ; 186////////////////////////////////////////////////////////////////////////////////; 187/// Computation of the error function erf(x).; 188/// Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x; 189 ; 190Double_t TMath::Erf(Double_t x); 191{; 192 return ::ROOT::Math::erf(x);; 193}; 194 ; 195////////////////////////////////////////////////////////////////////////////////; 196/// Computes the complementary error function erfc(x).; 197/// Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity; 198 ; 199Double_t TMath::Erfc(Double_t x); 200{; 201 return ::ROOT::Math::erfc(x);; 202}; 203 ; 204////////////////////////////////////////////////////////////////////////////////; 205/// Returns the inverse error function.; 206/// x must be <-1<x<1; 207 ; 208D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:4838,Log,Log,4838,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,4,['Log'],['Log']
Testability,0.00175028 43608.4 4; : 944 | 3.87035 5.70718 0.0200345 0.0017513 43756.1 5; : 945 | 4.07017 5.95519 0.020321 0.00177709 43140.8 6; : 946 Minimum Test error found - save the configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test error found - save the configuration ; : 953 | 3.78482 5.22353 0.0202416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test error found - save the configuration ; : 959 | 3.68258 5.15386 0.0202548 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.97436 0.0200851 0.00180832 43771.4 0; : 961 | 3.60053 5.18492 0.0200347 0.00175376 43761.4 1; : 962 | 4.06747 4.98756 0.0202606 0.00194113 43669.3 2; : 963 | 3.72111 5.2317 0.020058 0.00176556 43733.9 3; : 964 | 3.60317 5.20936 0.020113 0.00175786 43584.5 4; : 965 | 3.63413 5.37485 0.0201057 0.00175921 43605 5; : 966 | 3.74764 5.16986 0.0200985 0.00180899 43741 6; : 967 | 3.64317 5.0911 0.0200896 0.00175556 43634.6 7; : 968 Minimum Test error found - save the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:110238,Test,Test,110238,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0.00175322 43748.2 3; : 843 Minimum Test error found - save the configuration ; : 843 | 7.01613 10.4197 0.0201334 0.00182993 43707.5 0; : 844 | 6.83302 10.8151 0.020039 0.00176037 43767.1 1; : 845 | 6.97518 10.5462 0.0200409 0.00175987 43761.2 2; : 846 | 6.93317 10.5904 0.0200239 0.00176026 43802.8 3; : 847 | 6.86223 10.6492 0.0200268 0.00176058 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 0.0200333 0.00176264 43785.9 6; : 850 | 6.72856 10.6877 0.0200521 0.00176189 43739.2 7; : 851 | 6.84236 10.8522 0.0200238 0.00176009 43802.7 8; : 852 Minimum Test error found - save the configuration ; : 852 | 6.78011 10.0733 0.0201111 0.00182524 43749.6 0; : 853 Minimum Test error found - save the configuration ; : 853 | 6.53284 9.90736 0.0201187 0.00181829 43714.8 0; : 854 | 6.67108 10.0768 0.0205443 0.0017732 42618.8 1; : 855 | 6.58878 10.7427 0.0200637 0.00176264 43713.2 2; : 856 | 6.54513 10.3387 0.0200413 0.00176141 43764 3; : 857 Minimum Test error found - save the configuration ; : 857 | 6.43616 9.72218 0.020097 0.00182688 43787.4 0; : 858 | 6.34936 10.0458 0.0200349 0.00176193 43780.5 1; : 859 Minimum Test error found - save the configuration ; : 859 | 6.20554 9.48603 0.0201607 0.00183833 43662.6 0; : 860 | 6.16695 10.0812 0.0200598 0.00175295 43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:102662,Test,Test,102662,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test error found - save the configuration ; : 953 | 3.78482 5.22353 0.0202416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test error found - save the configuration ; : 959 | 3.68258 5.15386 0.0202548 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.97436 0.0200851 0.00180832 43771.4 0; : 961 | 3.60053 5.18492 0.0200347 0.00175376 43761.4 1; : 962 | 4.06747 4.98756 0.0202606 0.00194113 43669.3 2; : 963 | 3.72111 5.2317 0.020058 0.00176556 43733.9 3; : 964 | 3.60317 5.20936 0.020113 0.00175786 43584.5 4; : 965 | 3.63413 5.37485 0.0201057 0.00175921 43605 5; : 966 | 3.74764 5.16986 0.0200985 0.00180899 43741 6; : 967 | 3.64317 5.0911 0.0200896 0.00175556 43634.6 7; : 968 Minimum Test error found - save the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200555 0.00176513 43738.9 6; : 975 Minimum Test error found - save the configuration ; : 975 | 3.52504 4.659,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:110518,Test,Test,110518,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"0.01:GDNSteps=10000:GDErrScale=1.02"" );; ; // For an example of the category classifier usage, see: TMVAClassificationCategory; //; // --------------------------------------------------------------------------------------------------; // Now you can optimize the setting (configuration) of the MVAs using the set of training events; // STILL EXPERIMENTAL and only implemented for BDT's !; //; // factory->OptimizeAllMethods(""SigEffAtBkg0.01"",""Scan"");; // factory->OptimizeAllMethods(""ROCIntegral"",""FitGA"");; //; // --------------------------------------------------------------------------------------------------; ; // Now you can tell the factory to train, test, and evaluate the MVAs; //; // Train MVAs using the set of training events; factory->TrainAllMethods();; ; // Evaluate all MVAs using the set of test events; factory->TestAllMethods();; ; // Evaluate and compare performance of all configured MVAs; factory->EvaluateAllMethods();; ; // --------------------------------------------------------------; ; // Save the output; outputFile->Write();; ; std::cout << ""==> Wrote root file: "" << outputFile->GetName() << std::endl;; std::cout << ""==> TMVAClassification is done!"" << std::endl;; ; // Launch the GUI for the root macros; if (!gROOT->IsBatch()) TMVA::TMVAGui( outfileName );; ; return 0;; }; ; int main( int argc, char** argv ); {; // Select methods (don't look at this code - not of interest); TString methodList;; for (int i=1; i<argc; i++) {; TString regMethod(argv[i]);; if(regMethod==""-b"" || regMethod==""--batch"") continue;; if (!methodList.IsNull()) methodList += TString("","");; methodList += regMethod;; }; return TMVAClassification(methodList);; }; DataLoader.h; mainint main()Definition Prototype.cxx:12; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Double_tdouble Double_tDefinition RtypesCore.h:59; TChain.h; TFile.h; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:103773,test,test,103773,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,3,"['Test', 'test']","['TestAllMethods', 'test']"
Testability,"0.2);; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) {; total->Draw(""e1p"");; main->Draw(""same"");; s1->Draw(""same"");; s2->Draw(""same"");; c1->Update();; slider = new TSlider(""slider"",; ""test"",4.2,0,4.6,total->GetMaximum(),38);; slider->SetFillColor(46);; }; if (slider) slider->SetRange(0., 1.*i/10000.);; c1->Modified();; c1->Update();; }; }; slider->SetRange(0., 1.);; c1->Modified();; gBenchmark->Show(""hsum"");; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::Landauvirtual Double_t Landau(Double_t mean=0, Double_t sigma=1)Generate a random number following a Landau distribution with location parameter mu and scale paramet...Definition TRandom.cxx:381; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; TSlider::SetRangevirtual void SetRange(Double_t xmin=0, Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsum_8C.html:2370,Benchmark,Benchmark,2370,doc/master/hsum_8C.html,https://root.cern,https://root.cern/doc/master/hsum_8C.html,1,['Benchmark'],['Benchmark']
Testability,0.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 55.5039 42.6809 0.0201245 0.00180935 43679.7 0; : 662 Minimum Test error found - save the configuration ; : 662 | 54.3572 42.2723 0.0202587 0.00183315 43417.9 0; : 663 Minimum Test error found - save the configuration ; : 663 | 53.566 41.7624 0.0203991 0.00186617 43166.5 0; : 664 Minimum Test error found - save the configuration ; : 664 | 52.9086 41.2393 0.0201899 0.00182999 43573.1 0; : 665 Minimum Test error found - save the configuration ; : 665 | 52.1886 40.6761 0.020181 0.00182542 43583.6 0; : 666 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:84906,Test,Test,84906,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"0.56. We can apply a useful; 8161/// rule: As long as the bin width is small compared with any significant; 8162/// physical effect (for example the experimental resolution) then the binning; 8163/// cannot have an important effect. Therefore, we believe that for all; 8164/// practical purposes, the probability value PROB is calculated correctly; 8165/// provided the user is aware that:; 8166///; 8167/// 1. The value of PROB should not be expected to have exactly the correct; 8168/// distribution for binned data.; 8169/// 2. The user is responsible for seeing to it that the bin widths are; 8170/// small compared with any physical phenomena of interest.; 8171/// 3. The effect of binning (if any) is always to make the value of PROB; 8172/// slightly too big. That is, setting an acceptance criterion of (PROB>0.05; 8173/// will assure that at most 5% of truly compatible histograms are rejected,; 8174/// and usually somewhat less.""; 8175///; 8176/// Note also that for GoF test of unbinned data ROOT provides also the class; 8177/// ROOT::Math::GoFTest. The class has also method for doing one sample tests; 8178/// (i.e. comparing the data with a given distribution).; 8179 ; 8180Double_t TH1::KolmogorovTest(const TH1 *h2, Option_t *option) const; 8181{; 8182 TString opt = option;; 8183 opt.ToUpper();; 8184 ; 8185 Double_t prob = 0;; 8186 TH1 *h1 = (TH1*)this;; 8187 if (h2 == nullptr) return 0;; 8188 const TAxis *axis1 = h1->GetXaxis();; 8189 const TAxis *axis2 = h2->GetXaxis();; 8190 Int_t ncx1 = axis1->GetNbins();; 8191 Int_t ncx2 = axis2->GetNbins();; 8192 ; 8193 // Check consistency of dimensions; 8194 if (h1->GetDimension() != 1 || h2->GetDimension() != 1) {; 8195 Error(""KolmogorovTest"",""Histograms must be 1-D\n"");; 8196 return 0;; 8197 }; 8198 ; 8199 // Check consistency in number of channels; 8200 if (ncx1 != ncx2) {; 8201 Error(""KolmogorovTest"",""Histograms have different number of bins, %d and %d\n"",ncx1,ncx2);; 8202 return 0;; 8203 }; 8204 ; 8205 // empty the buffer.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:321725,test,test,321725,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"0.588; [6, 12] train loss: 0.585; [6] val loss: 0.700; [7, 4] train loss: 0.553; [7, 8] train loss: 0.564; [7, 12] train loss: 0.542; [7] val loss: 0.637; [8, 4] train loss: 0.474; [8, 8] train loss: 0.446; [8, 12] train loss: 0.436; [8] val loss: 0.758; [9, 4] train loss: 0.381; [9, 8] train loss: 0.435; [9, 12] train loss: 0.456; [9] val loss: 1.218; [10, 4] train loss: 0.438; [10, 8] train loss: 0.436; [10, 12] train loss: 0.444; [10] val loss: 0.632; Finished Training on 10 Epochs!; running Torch code defining the model....; The PyTorch CNN model is created and saved as PyTorchModelCNN.pt; : Loaded pytorch train function: ; : Loaded pytorch optimizer: ; : Loaded pytorch loss function: ; : Loaded pytorch predict function: ; : Loaded model from file: PyTorchTrainedModelCNN.pt; PyTorch : [dataset] : Evaluation of PyTorch on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.12 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN_CPU; : ; TMVA_DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_CNN_CPU; : ; TMVA_CNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: PyKeras; : ; PyKeras : [dataset] : Loop over test events and fill histograms with classifie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:41589,test,test,41589,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['test'],['test']
Testability,0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.22 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16846,Test,Test,16846,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.70799; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.625222 0.0421632 4287.73 0; : 2 | 0.694153 0.694394 0.638111 0.0419725 4193.66 1; : 3 | 0.689625 0.697522 0.634816 0.0412563 4211.88 2; : 4 | 0.681203 0.694822 0.628686 0.0407413 4252.1 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.619972 0.0411822 4319.36 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.614022 0.0406714 4360.33 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.602694 0.0404119 4446.16 0; : 8 | 0.616397 0.638352 0.610274 0.0409979 4391.54 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.618875 0.0405848 4323.09 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.603058 0.0404042 4443.23 0; : ; : Elapsed time for training with 3200 events: 6.25 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.214 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Ou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:16513,Test,Test,16513,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,"0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.70799; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.629389 0.0419042 4255.43 0; : 2 | 0.694153 0.694394 0.642643 0.0421501 4163.24 1; : 3 | 0.689625 0.697522 0.642119 0.0416746 4163.58 2; : 4 | 0.681203 0.694822 0.637781 0.0412238 4190.71 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16178,Test,Test,16178,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,0/// \f[; 5551/// pyrange = fAbsHNDC \times fCh; 5552/// \f]; 5553///; 5554/// ### Conversion from px to x; 5555///; 5556/// \f[; 5557/// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; 5558/// \f]; 5559///; 5560/// \f[; 5561/// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; 5562/// \f]; 5563/// \f[; 5564/// fPixeltoX = \frac{xrange}{pxrange}; 5565/// \f]; 5566///; 5567/// ### Conversion from py to y; 5568///; 5569/// \f[; 5570/// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; 5571/// \f]; 5572///; 5573/// \f[; 5574/// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; 5575/// \f]; 5576/// \f[; 5577/// fPixeltoY = \frac{yrange}{pyrange}; 5578/// \f]; 5579///; 5580/// ### Computation of the coefficients in case of LOG scales; 5581///; 5582/// #### Conversion from pixel coordinates to world coordinates; 5583///; 5584/// \f[; 5585/// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; 5586/// \f]; 5587///; 5588/// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; 5589/// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; 5590/// Let:; 5591/// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; 5592///; 5593/// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; 5594/// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; 5595/// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; 5596/// \f[ fPixeltoX = alfa \f]; 5597///; 5598/// \f[; 5599/// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; 5600/// \f]; 5601/// Let:; 5602/// \f[ beta = Log(\frac{ymax}{ymin}) \f]; 5603/// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; 5604/// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; 5605/// \f[ y = ymin \times e^{(b,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:180404,Log,Log,180404,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Log'],['Log']
Testability,"00 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 7 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 119.005; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.881238 0.852851 0.181896 0.0160504 7235.64 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.658204 0.827727 0.182292 0.0161751 7223.84 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.58547 0.792475 0.182478 0.0158424 7201.32 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.508772 0.760461 0.18258 0.0158465 7197.11 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.445197 0.705323 0.183204 0.015935 7174.07 0; : 6 | 0.409018 0.708257 0.18274 0.0151517 7160.42 1; : 7 | 0.369062 0.747523 0.18295 0.0151377 7150.84 2; : 8 | 0.31294 0.740134 0.183339 0.015769 7161.2 3; : 9 | 0.256184 0.756239 0.181088 0.0154708 7245.63 4; : 10 | 0.224257 0.809455 0.18089 0.0153446 7248.78 5; : ; : Elapsed time for training with 1600 events: 1.86 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_DNN_CPU : [dataset] : Evaluation of TMVA_DNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.0796 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:11899,Test,Test,11899,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability,00 events); : Elapsed time for evaluation of 10000 events: 0.00226 sec ; Factory : Test method: CutsD for Classification performance; : ; CutsD : [dataset] : Evaluation of CutsD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00756 sec ; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0108 sec ; Factory : Test method: LikelihoodPCA for Classification performance; : ; LikelihoodPCA : [dataset] : Evaluation of LikelihoodPCA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0197 sec ; Factory : Test method: PDERS for Classification performance; : ; PDERS : [dataset] : Evaluation of PDERS on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.937 sec ; Factory : Test method: PDEFoam for Classification performance; : ; PDEFoam : [dataset] : Evaluation of PDEFoam on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.072 sec ; Factory : Test method: KNN for Classification performance; : ; KNN : [dataset] : Evaluation of KNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.2 sec ; Factory : Test method: LD for Classification performance; : ; LD : [dataset] : Evaluation of LD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00474 sec ; : Dataset[dataset] : Evaluation of LD on testing sample; Factory : Test method: FDA_GA for Classification performance; : ; FDA_GA : [dataset] : Evaluation of FDA_GA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00327 sec ; Factory : Test method: MLPBNN for Classification performance; : ; MLPBNN : [dataset] : Evaluation of MLPBNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0193 sec ; Factory : Test method: DNN_CPU for Classifica,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:66311,Test,Test,66311,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Test', 'test']","['Test', 'testing']"
Testability,00 events); : Elapsed time for evaluation of 10000 events: 0.00327 sec ; Factory : Test method: MLPBNN for Classification performance; : ; MLPBNN : [dataset] : Evaluation of MLPBNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0193 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.333 sec ; Factory : Test method: SVM for Classification performance; : ; SVM : [dataset] : Evaluation of SVM on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.287 sec ; Factory : Test method: BDT for Classification performance; : ; BDT : [dataset] : Evaluation of BDT on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.571 sec ; Factory : Test method: RuleFit for Classification performance; : ; RuleFit : [dataset] : Evaluation of RuleFit on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0137 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: Cuts; : ; <WARNING> : You have asked for histogram MVA_EFF_BvsS which does not seem to exist in *Results* .. better don't use it ; <WARNING> : You have asked for histogram EFF_BVSS_TR which does not seem to exist in *Results* .. better don't use it ; TFHandler_Cuts : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:67997,Test,Test,67997,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Test', 'test']","['Test', 'testing']"
Testability,"00 }; 2001 R__ASSERT (refX != nullptr && refY != nullptr && refZ != nullptr);; 2002 ; 2003 // Fill the projected histogram excluding underflow/overflows if considered in the option; 2004 // if specified in the option (by default they considered); 2005 Double_t totcont = 0;; 2006 ; 2007 Int_t out1min = out1->GetFirst();; 2008 Int_t out1max = out1->GetLast();; 2009 // GetFirst(), GetLast() can return (0,0) when the range bit is set artificially (see TAxis::SetRange); 2010 //if (out1min == 0 && out1max == 0) { out1min = 1; out1max = out1->GetNbins(); }; 2011 // correct for underflow/overflows; 2012 if (useUF && !out1->TestBit(TAxis::kAxisRange) ) out1min -= 1;; 2013 if (useOF && !out1->TestBit(TAxis::kAxisRange) ) out1max += 1;; 2014 Int_t out2min = out2->GetFirst();; 2015 Int_t out2max = out2->GetLast();; 2016// if (out2min == 0 && out2max == 0) { out2min = 1; out2max = out2->GetNbins(); }; 2017 if (useUF && !out2->TestBit(TAxis::kAxisRange) ) out2min -= 1;; 2018 if (useOF && !out2->TestBit(TAxis::kAxisRange) ) out2max += 1;; 2019 ; 2020 // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins; 2021 Bool_t extendable = projX->CanExtend();; 2022 if ( labels && extendable ) h1->GetXaxis()->SetCanExtend(kFALSE);; 2023 for (ixbin=0;ixbin<=1+projX->GetNbins();ixbin++) {; 2024 if ( projX->TestBit(TAxis::kAxisRange) && ( ixbin < ixmin || ixbin > ixmax )) continue;; 2025 ; 2026 Double_t cont = 0;; 2027 Double_t err2 = 0;; 2028 ; 2029 // loop on the bins to be integrated (outbin should be called inbin); 2030 for (out1bin = out1min; out1bin <= out1max; out1bin++) {; 2031 for (out2bin = out2min; out2bin <= out2max; out2bin++) {; 2032 ; 2033 Int_t bin = GetBin(*refX, *refY, *refZ);; 2034 ; 2035 // sum the bin contents and errors if needed; 2036 cont += RetrieveBinContent(bin);; 2037 if (computeErrors) {; 2038 Double_t exyz = GetBinError(bin);; 2039 err2 += exyz*exyz;; 2040 }; 2041 }; 2042 }; 2043 Int_t ix = h1->FindBin( projX->G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:79830,Test,TestBit,79830,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,00.3 1; : 1008 | 3.23752 4.46797 0.0204556 0.0017847 42847.4 2; : 1009 | 3.5099 4.04664 0.0203963 0.00177013 42950.3 3; : 1010 | 3.39993 4.32216 0.0201011 0.00176915 43639.8 4; : 1011 | 3.28002 4.35065 0.020045 0.00175269 43734.2 5; : 1012 | 3.24301 4.1309 0.0202482 0.00178612 43332 6; : 1013 | 3.47685 4.13785 0.0205714 0.00178247 42578.3 7; : 1014 | 3.38367 4.59532 0.0203076 0.00178189 43183.2 8; : 1015 Minimum Test error found - save the configuration ; : 1015 | 3.15343 3.81668 0.0204522 0.00185272 43011.9 0; : 1016 | 2.99441 4.01707 0.0202697 0.00183758 43402.5 1; : 1017 | 3.3956 4.54944 0.0201133 0.00176644 43604.1 2; : 1018 | 3.2792 3.85661 0.0202747 0.00181943 43348.2 3; : 1019 | 3.37748 4.22044 0.0208054 0.00183497 42170.8 4; : 1020 | 3.48034 4.07947 0.020447 0.00177824 42852.4 5; : 1021 | 3.50059 4.11275 0.020219 0.00176964 43361.9 6; : 1022 | 3.15174 3.86168 0.0203283 0.00176093 43086.3 7; : 1023 | 3.4694 4.52782 0.0204007 0.00179059 42987.4 8; : 1024 Minimum Test error found - save the configuration ; : 1024 | 3.57333 3.68346 0.0207199 0.00186469 42428.5 0; : 1025 | 3.1448 3.86932 0.020257 0.0018083 43363.6 1; : 1026 | 3.14966 3.71614 0.0204412 0.00177219 42851.8 2; : 1027 Minimum Test error found - save the configuration ; : 1027 | 3.06278 3.47888 0.0204485 0.00186251 43043.1 0; : 1028 | 3.22518 4.06346 0.0201016 0.00179042 43689.3 1; : 1029 | 3.47015 5.10048 0.0212551 0.0017691 41055.1 2; : 1030 | 3.28552 3.92634 0.0200717 0.0017618 43692.2 3; : 1031 | 3.09879 3.64842 0.0200603 0.0017557 43704.9 4; : 1032 | 3.23242 4.45782 0.0201318 0.0017893 43614.6 5; : 1033 Minimum Test error found - save the configuration ; : 1033 | 3.57665 3.43738 0.0206178 0.00193324 42816.1 0; : 1034 | 3.26951 3.4755 0.0201231 0.00175901 43563.3 1; : 1035 | 3.0748 4.32816 0.0202002 0.00180771 43496 2; : 1036 | 3.05868 3.88772 0.0202082 0.00176323 43372.3 3; : 1037 | 3.11243 3.8552 0.0200473 0.00176925 43768.4 4; : 1038 | 2.97479 4.01382 0.020048 0.00176307 43752 5; : 1039 | 3.15714,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:114728,Test,Test,114728,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"000 events; Factory : Booking method: ␛[1mTMVA_LSTM␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234:InputLayout=10|30:Layout=LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=10Optimizer=ADAM,DropConfig=0.0+0.+0.+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234:InputLayout=10|30:Layout=LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=10Optimizer=ADAM,DropConfig=0.0+0.+0.+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""10|30"" [The Layout of the input]; : Layout: ""LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : RandomSeed: ""1234"" [Ran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:1630,Test,TestRepetitions,1630,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['TestRepetitions']
Testability,"000, . const Double_t * ; vertex = nullptr . ). overridevirtual . Geometry checking method (see: TGeoManager::CheckGeometry()) ; Implements TVirtualGeoPainter.; Definition at line 218 of file TGeoPainter.cxx. ◆ CheckOverlaps(). void TGeoPainter::CheckOverlaps ; (; const TGeoVolume * ; vol, . Double_t ; ovlp = 0.1, . Option_t * ; option = """" . ); const. overridevirtual . Check overlaps for the top volume of the geometry, within a limit OVLP. ; Implements TVirtualGeoPainter.; Definition at line 234 of file TGeoPainter.cxx. ◆ CheckPoint(). void TGeoPainter::CheckPoint ; (; Double_t ; x = 0, . Double_t ; y = 0, . Double_t ; z = 0, . Option_t * ; option = """", . Double_t ; safety = 0. . ). overridevirtual . Check current point in the geometry. ; Implements TVirtualGeoPainter.; Definition at line 242 of file TGeoPainter.cxx. ◆ CheckShape(). void TGeoPainter::CheckShape ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). overridevirtual . Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Implements TVirtualGeoPainter.; Definition at line 254 of file TGeoPainter.cxx. ◆ ClearVisibleVolumes(). void TGeoPainter::ClearVisibleVolumes ; (; ). protected . Clear the list of visible volumes reset the kVisOnScreen bit for volumes previously in the list. ; Definition at line 263 of file TGeoPainter.cxx. ◆ CountNodes(). Int_t TGeoPainter::CountNodes ; (; TGeoVolume * ; vol, . Int_t ; level . ); const. Count number of visible nodes down to a given level. ; Definition at line 582 of file TGeoPainter.cxx. ◆ CountVisibleNodes(). Int_t TGeoPainter::CountVisibleNodes ; (; ). overridevirtual . Count total number of visible nodes. ; Implements TVirtualGeoPainter.; Definition at line 636 of file TGeoPainter.cxx. ◆ Defau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:25153,Test,Test,25153,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['Test'],['Test']
Testability,0000 events); : Elapsed time for evaluation of 10000 events: 0.00756 sec ; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0108 sec ; Factory : Test method: LikelihoodPCA for Classification performance; : ; LikelihoodPCA : [dataset] : Evaluation of LikelihoodPCA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0197 sec ; Factory : Test method: PDERS for Classification performance; : ; PDERS : [dataset] : Evaluation of PDERS on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.937 sec ; Factory : Test method: PDEFoam for Classification performance; : ; PDEFoam : [dataset] : Evaluation of PDEFoam on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.072 sec ; Factory : Test method: KNN for Classification performance; : ; KNN : [dataset] : Evaluation of KNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.2 sec ; Factory : Test method: LD for Classification performance; : ; LD : [dataset] : Evaluation of LD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00474 sec ; : Dataset[dataset] : Evaluation of LD on testing sample; Factory : Test method: FDA_GA for Classification performance; : ; FDA_GA : [dataset] : Evaluation of FDA_GA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00327 sec ; Factory : Test method: MLPBNN for Classification performance; : ; MLPBNN : [dataset] : Evaluation of MLPBNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0193 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -------------------------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:66515,Test,Test,66515,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Test', 'test']","['Test', 'testing']"
Testability,"000000003); Constructor from a model for B model and a model for S+B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); assignment operator; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. ~HypoTestInverter(); destructor (delete the HypoTestInverterResult). TestStatistic * GetTestStatistic() const; return the test statistic which is or will be used by the class. bool SetTestStatistic(RooStats::TestStatistic& stat); set the test statistic to use. void Clear(); delete contained result and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGeneric& hc, bool adaptive, double clsTarget) const; Run the Hypothesis test at a previous configured point; (internal function called by RunOnePoint). bool RunFixedScan(int nBins, double xMin, double xMax, bool scanLog = false) const; Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX, bool adaptive = false, double clTarget = -1) const; run only one point at the given POI value. bool RunLimit(double& limit, double& limitErr, double absTol = 0, double relTol = 0, const double* hint = 0) const; run an automatic scan until the desired a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverter.html:9192,Test,TestStatistic,9192,root/html602/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverter.html,4,"['Test', 'test']","['TestStatistic', 'test']"
Testability,"00001); voidInit(); virtual TClass*IsA() const; virtual Double_tNewFitness(Double_t oldValue, Double_t newValue); TMVA::GeneticAlgorithm&operator=(const TMVA::GeneticAlgorithm&); voidSetMakeCopies(Bool_t s); voidSetSpread(Double_t s); virtual voidShowMembers(TMemberInspector& insp) const; virtual Double_tSpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TMVA::MsgLogger&Log() const. Data Members; public:. Int_tfConvCounterconverging? ... keeps track of the number of improvements. protected:. Double_tfBestFitness; Double_tfConvValuekeeps track of the quantity of improvement; Bool_tfFirstTimeif true its the first time, so no evolution yet; TMVA::IFitterTarget&fFitterTargetthe fitter target; Double_tfLastResultremembers the last obtained result (for internal use); TMVA::MsgLogger*fLoggermessage logger; Bool_tfMakeCopiesif true, the population will make copies of the first individuals; Bool_tfMirrornew values for mutation are mirror-mapped if outside of constraints; TMVA::GeneticPopulationfPopulationcontains and controls the ""individual""; Int_tfPopulationSizethe size of the population; const vector<TMVA::Interval*>&fRangesparameter ranges; Double_tfSpreadregulates the spread of the value change at mutation (sigma); deque<Int_t>fSuccessListto adjust the stepSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticAlgorithm(TMVA::IFitterTarget& target, Int_t populationSize, const vector<TMVA::Interval*>& ranges, UInt_t seed = 0); Constructor; Parameters:; int populationSize : defines the number of ""Individuals"" which are created and tested; within one Generation (Iteration of the Evolution); std::vector<TMVA::Interval*> ranges : Interval holds the information of an interval, where the GetMin; gets the low and GetMax gets the high constraint of the variable; the size of ""ranges"" is the number of coefficients which a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__GeneticAlgorithm.html:1799,log,logger,1799,root/html602/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html602/TMVA__GeneticAlgorithm.html,2,['log'],['logger']
Testability,"000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGDMLWrite ();  Default constructor. ;  ;  ~TGDMLWrite () override;  Destructor. ;  ; void SetG4Compatibility (Bool_t G4Compatible);  ; void SetIgnoreDummyMaterial (bool value);  Ignore dummy material instance, which causes trouble reading GDML in Geant4. ;  ; void SetNamingSpeed (ENamingType naming);  Set convention of naming solids and volumes. ;  ; void WriteGDMLfile (TGeoManager *geomanager, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoNode *top_node, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoVolume *top_vol, const char *filename=""test.gdml"", TString option="""");  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:8326,test,test,8326,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['test'],['test']
Testability,000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.017919 1.0069 [ -3.3498 3.4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 0.98851 [ -2.9734 3.3513 ]; : m_wbb: -0.010633 0.99340 [ -3.2442 3.2244 ]; : m_wwbb: -0.012669 0.99259 [ -3.1871 5.7307 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0995 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_higgs.h5; PyKeras : [dataset] : Evaluation of PyKeras on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.156 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: Likelihood; : ; Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: Fisher; : ; Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Also filling probability and rarity histograms (on request)...; TFHandler_Fisher : Variable Mean RMS [ Min Max,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:51013,test,testing,51013,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['test'],['testing']
Testability,"000e+00; : 296 : vars_time9 : 0.000e+00; : 297 : vars_time9 : 0.000e+00; : 298 : vars_time9 : 0.000e+00; : 299 : vars_time9 : 0.000e+00; : 300 : vars_time9 : 0.000e+00; : --------------------------------------------; TH1.Print Name = TrainingHistory_TMVA_LSTM_trainingError, Entries= 0, Total sum= 6.54098; TH1.Print Name = TrainingHistory_TMVA_LSTM_valError, Entries= 0, Total sum= 6.61254; TH1.Print Name = TrainingHistory_TMVA_DNN_trainingError, Entries= 0, Total sum= 13.752; TH1.Print Name = TrainingHistory_TMVA_DNN_valError, Entries= 0, Total sum= 13.5872; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'accuracy', Entries= 0, Total sum= 6.34883; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'loss', Entries= 0, Total sum= 6.27501; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'val_accuracy', Entries= 0, Total sum= 6.33125; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'val_loss', Entries= 0, Total sum= 6.20691; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PyKeras_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_BDTG.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: TMVA_LSTM for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0494 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0212 sec ; Factory : Test method: PyKeras_LST",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:44593,test,testing,44593,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['test'],['testing']
Testability,00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error found - save the configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.35846 6.60136 0.0200632 0.00176343 43716.3 1; : 920 | 4.30933 6.53557 0.0200239 0.00175965 43801.4 2; : 921 Minimum Test error found - save the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.31,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:106874,Test,Test,106874,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195 0.0202769 0.00175908 43201.6 2; : 930 | 4.39879 6.60248 0.0204218 0.00176177 42872.3 3; : 931 | 4.17549 6.55946 0.0200581 0.00175886 43717.6 4; : 932 | 4.18849 6.67063 0.0200652 0.00175543 43692.5 5; : 933 Minimum Test error found - save the configuration ; : 933 | 4.07608 6.08713 0.0202588 0.00184594 43447.8 0; : 934 | 4.3998 6.10426 0.0204691 0.00178412 42815.1 1; : 935 | 4.23034 6.39854 0.0202977 0.00176426 43165.2 2; : 936 Minimum Test error found - save the configuration ; : 936 | 4.45077 5.93539 0.020128 0.0018336 43729.3 0; : 937 | 4.31583 6.35935 0.0203501 0.00176302 43040.6 1; : 938 Minimum Test error found - save the configuration ; : 938 | 4.1293 5.8271 0.0205749 0.0018749 42780.8 0; : 939 Minimum Test error found - save the configuration ; : 939 | 4.02273 5.7049 0.0206164 0.00186577 42665.2 0; : 940 | 3.91188 6.29174 0.0201055 0.00180854 43723.1 1; : 941 | 3.89757 5.80965 0.0203179 0.00179759 43195.8 2; : 942 | 3.94904 5.73464 0.0200877 0.00175468 43637.1 3; : 943 | 3.90362 5.73888 0.0200954 0.00175028 43608.4 4; : 944 | 3.87035 5.70718 0.0200345 0.0017513 43756.1 5; : 945 | 4.07017 5.95519 0.020321 0.00177709 43140.8 6; : 946 Minimum Test error found - save the configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:108837,Test,Test,108837,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 8.79318 0.0200883 0.00182097 43794.1 0; : 872 | 5.76603 9.46642 0.0200354 0.00176138 43778.1 1; : 873 Minimum Test error found - save the configuration ; : 873 | 5.70638 8.71803 0.0200731 0.00181478 43815.7 0; : 874 Minimum Test error found - save the configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.3,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:104744,Test,Test,104744,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.014,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:90783,Test,Test,90783,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.677,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:90896,Test,Test,90896,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"00e+00; : 296 : vars_time9 : 0.000e+00; : 297 : vars_time9 : 0.000e+00; : 298 : vars_time9 : 0.000e+00; : 299 : vars_time9 : 0.000e+00; : 300 : vars_time9 : 0.000e+00; : --------------------------------------------; TH1.Print Name = TrainingHistory_TMVA_LSTM_trainingError, Entries= 0, Total sum= 11.8838; TH1.Print Name = TrainingHistory_TMVA_LSTM_valError, Entries= 0, Total sum= 12.3797; TH1.Print Name = TrainingHistory_TMVA_DNN_trainingError, Entries= 0, Total sum= 13.6351; TH1.Print Name = TrainingHistory_TMVA_DNN_valError, Entries= 0, Total sum= 13.7968; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'accuracy', Entries= 0, Total sum= 14.2691; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'loss', Entries= 0, Total sum= 10.8696; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'val_accuracy', Entries= 0, Total sum= 14.125; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'val_loss', Entries= 0, Total sum= 11.0066; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PyKeras_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_BDTG.weights.xml␛[0m; nthreads = 4; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: TMVA_LSTM for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0529 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0218 sec ; Factory : Test metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:52186,test,testing,52186,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['test'],['testing']
Testability,017578 43434.8 2; : 987 | 3.50466 4.60061 0.0201538 0.00175522 43481.6 3; : 988 | 3.61316 4.68965 0.0201071 0.00176 43603.6 4; : 989 | 3.88349 5.24185 0.0200475 0.00175499 43733.8 5; : 990 | 4.0647 4.52576 0.020036 0.00175545 43762.3 6; : 991 | 3.77396 5.32769 0.0200783 0.00175786 43667.1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0.0203306 0.00176616 43093.1 13; : 998 | 3.41797 4.46788 0.0203618 0.00175568 42996.7 14; : 999 Minimum Test error found - save the configuration ; : 999 | 3.31412 4.14973 0.0202938 0.00187677 43438 0; : 1000 | 3.20867 4.17264 0.0201802 0.00179416 43511.4 1; : 1001 | 3.31742 4.17699 0.020287 0.00175118 43159.8 2; : 1002 | 3.35839 4.8143 0.0207434 0.00177731 42180.6 3; : 1003 Minimum Test error found - save the configuration ; : 1003 | 3.42381 4.04915 0.0202591 0.00184351 43441.4 0; : 1004 Minimum Test error found - save the configuration ; : 1004 | 3.27488 4.0384 0.0205262 0.00189376 42935.9 0; : 1005 | 3.09776 4.19224 0.0200956 0.00176781 43649.6 1; : 1006 Minimum Test error found - save the configuration ; : 1006 | 3.1757 3.91876 0.0201134 0.00183093 43757.7 0; : 1007 | 3.17471 4.33126 0.0203423 0.00178093 43100.3 1; : 1008 | 3.23752 4.46797 0.0204556 0.0017847 42847.4 2; : 1009 | 3.5099 4.04664 0.0203963 0.00177013 42950.3 3; : 1010 | 3.39993 4.32216 0.0201011 0.00176915 43639.8 4; : 1011 | 3.28002 4.35065 0.020045 0.00175269 43734.2 5; : 1012 | 3.24301 4.1309 0.0202482 0.00178612 43332 6; : 1013 | 3.47685 4.13785 0.0205714 0.00178247 42578.3 7; : 1014 | 3.38367 4.59532 0.0203076 0.00178189 43183.2 8; : 1015 Minimum Test error found - save the configuration ; : 1015 | 3.15343 3.81668 0.0204522 0.00185272 43011.9 0; : 1016 | 2.99441 4.01707 0.0202697 0.00183758 43402.5 1; : 1017 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:113308,Test,Test,113308,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0176264 43713.2 2; : 856 | 6.54513 10.3387 0.0200413 0.00176141 43764 3; : 857 Minimum Test error found - save the configuration ; : 857 | 6.43616 9.72218 0.020097 0.00182688 43787.4 0; : 858 | 6.34936 10.0458 0.0200349 0.00176193 43780.5 1; : 859 Minimum Test error found - save the configuration ; : 859 | 6.20554 9.48603 0.0201607 0.00183833 43662.6 0; : 860 | 6.16695 10.0812 0.0200598 0.00175295 43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.98345 9.15873 0.0200325 0.00175472 43768.9 1; : 870 | 5.90893 9.16507 0.0202516 0.00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 8.79318 0.0200883 0.00182097 43794.1 0; : 872 | 5.76603 9.46642 0.0200354 0.00176138 43778.1 1; : 873 Minimum Test error found - save the configuration ; : 873 | 5.70638 8.71803 0.0200731 0.00181478 43815.7 0; : 874 Minimum Test error found - save the configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:103564,Test,Test,103564,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"01998 0.192893 0.0153949 14422.7 2; : 6 | 0.6867 0.696275 0.191869 0.0152227 14492.2 3; : 7 Minimum Test error found - save the configuration ; : 7 | 0.692231 0.691692 0.197632 0.0164904 14132.6 0; : 8 | 0.683383 0.694963 0.194299 0.0156318 14328.3 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.682898 0.684979 0.192122 0.0157399 14513.9 0; : 10 | 0.670592 0.688549 0.192796 0.0152906 14422.1 1; : 11 Minimum Test error found - save the configuration ; : 11 | 0.670202 0.684295 0.191832 0.0154715 14515.7 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.675447 0.682107 0.194058 0.0158608 14366.1 0; : 13 | 0.678105 0.691356 0.193716 0.0152633 14345.5 1; : 14 | 0.684972 0.687408 0.191852 0.0154194 14509.8 2; : 15 | 0.676423 0.689156 0.193176 0.0153404 14395.3 3; : 16 | 0.683185 0.689966 0.191807 0.0149908 14478.3 4; : 17 | 0.672717 0.689982 0.192316 0.0149466 14433.2 5; : 18 | 0.670449 0.68412 0.190877 0.0151753 14570.1 6; : 19 Minimum Test error found - save the configuration ; : 19 | 0.661329 0.670317 0.192098 0.0154074 14488.6 0; : 20 Minimum Test error found - save the configuration ; : 20 | 0.658253 0.661402 0.192014 0.0155677 14508.7 0; : ; : Elapsed time for training with 3200 events: 3.87 sec ; : Evaluate deep neural network on CPU using batches with size = 256; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.102 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras_LSTM for Classification; : ; : Split TMVA training data in 2560 training events and 640 validation events; : Training Model Summary; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; ========================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:20414,Test,Test,20414,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"01Cmp = TString::Format(""%5.3f (%5.3f)"", effB01Test, effB01Train);; 1988 const TString effB10Cmp = TString::Format(""%5.3f (%5.3f)"", effB10Test, effB10Train);; 1989 const TString effB30Cmp = TString::Format(""%5.3f (%5.3f)"", effB30Test, effB30Train);; 1990 row = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", """", className.Data(), rocaucCmp.Data(), effB01Cmp.Data(),; 1991 effB10Cmp.Data(), effB30Cmp.Data());; 1992 Log() << kINFO << row << Endl;; 1993 ; 1994 delete rocCurveTrain;; 1995 delete rocCurveTest;; 1996 }; 1997 }; 1998 }; 1999 Log() << kINFO << Endl;; 2000 Log() << kINFO << hLine << Endl;; 2001 Log() << kINFO << Endl;; 2002 ; 2003 // --- Confusion matrices; 2004 // --------------------------------------------------------------------; 2005 auto printMatrix = [](TMatrixD const &matTraining, TMatrixD const &matTesting, std::vector<TString> classnames,; 2006 UInt_t numClasses, MsgLogger &stream) {; 2007 // assert (classLabledWidth >= valueLabelWidth + 2); 2008 // if (...) {Log() << kWARN << ""..."" << Endl; }; 2009 ; 2010 // TODO: Ensure matrices are same size.; 2011 ; 2012 TString header = TString::Format("" %-14s"", "" "");; 2013 TString headerInfo = TString::Format("" %-14s"", "" "");; 2014 ; 2015 for (UInt_t iCol = 0; iCol < numClasses; ++iCol) {; 2016 header += TString::Format("" %-14s"", classnames[iCol].Data());; 2017 headerInfo += TString::Format("" %-14s"", "" test (train)"");; 2018 }; 2019 stream << kINFO << header << Endl;; 2020 stream << kINFO << headerInfo << Endl;; 2021 ; 2022 for (UInt_t iRow = 0; iRow < numClasses; ++iRow) {; 2023 stream << kINFO << TString::Format("" %-14s"", classnames[iRow].Data());; 2024 ; 2025 for (UInt_t iCol = 0; iCol < numClasses; ++iCol) {; 2026 if (iCol == iRow) {; 2027 stream << kINFO << TString::Format("" %-14s"", ""-"");; 2028 } else {; 2029 Double_t trainValue = matTraining[iRow][iCol];; 2030 Double_t testValue = matTesting[iRow][iCol];; 2031 TString entry = TString::Format(""%-5.3f (%-5.3f)"", testValue, trainValue);; 2032 stream << kINFO ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:84514,Log,Log,84514,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,02416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test error found - save the configuration ; : 959 | 3.68258 5.15386 0.0202548 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.97436 0.0200851 0.00180832 43771.4 0; : 961 | 3.60053 5.18492 0.0200347 0.00175376 43761.4 1; : 962 | 4.06747 4.98756 0.0202606 0.00194113 43669.3 2; : 963 | 3.72111 5.2317 0.020058 0.00176556 43733.9 3; : 964 | 3.60317 5.20936 0.020113 0.00175786 43584.5 4; : 965 | 3.63413 5.37485 0.0201057 0.00175921 43605 5; : 966 | 3.74764 5.16986 0.0200985 0.00180899 43741 6; : 967 | 3.64317 5.0911 0.0200896 0.00175556 43634.6 7; : 968 Minimum Test error found - save the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200555 0.00176513 43738.9 6; : 975 Minimum Test error found - save the configuration ; : 975 | 3.52504 4.65912 0.0202218 0.00185299 43552 0; : 976 | 3.7346 5.23443 0.0200603 0.00176255 43721.2 1; : 977 | 3.73856 4.9727 0.0200443 0.00176151 43757 2; : 978 | 3.60727 4.99113 0.0200479 0.00175633 43736 3; : 979 | 3.40672 4.84357 0.0200357 0.00175685 43766.5 4; : 980 | 3.44899 4.83288 0.0200548 0.0017499 43704.2 5; : 981 | 3.46445 4.72048 0.0203135 0.00176046 43119.7 6; : 982 Minimum Test error found - save the configuration ; : 982 | 3.46604 4.64127 0.0202116 0.00183381 43530.8 0; : 983 Minimum Test error foun,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:111016,Test,Test,111016,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"048 ; 2049 ; 2050//______________________________________________________________________________; 2051//; 2052// STATIC functions; 2053//______________________________________________________________________________; 2054 ; 2055////////////////////////////////////////////////////////////////////////////////; 2056/// Minimization function for H1s using a Chisquare method.; 2057 ; 2058void H1FitChisquareFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag); 2059{; 2060 TFumili *hFitter = (TFumili*)TVirtualFitter::GetFitter();; 2061 hFitter->FitChisquare(npar, gin, f, u, flag);; 2062}; 2063 ; 2064////////////////////////////////////////////////////////////////////////////////; 2065/// Minimization function for H1s using a Likelihood method.; 2066/// Basically, it forms the likelihood by determining the Poisson; 2067/// probability that given a number of entries in a particular bin,; 2068/// the fit would predict it's value. This is then done for each bin,; 2069/// and the sum of the logs is taken as the likelihood.; 2070/// PDF: P=exp(-f(x_i))/[F_i]!*(f(x_i))^[F_i]; 2071/// where F_i - experimental value, f(x_i) - expected theoretical value; 2072/// [F_i] - integer part of F_i.; 2073/// drawback is that if F_i>Int_t - GetSumLog will fail; 2074/// for big F_i is faster to use Euler's Gamma-function; 2075 ; 2076void H1FitLikelihoodFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag); 2077{; 2078 ; 2079 TFumili *hFitter = (TFumili*)TVirtualFitter::GetFitter();; 2080 hFitter->FitLikelihood(npar, gin, f, u, flag);; 2081}; 2082 ; 2083////////////////////////////////////////////////////////////////////////////////; 2084/// Minimization function for Graphs using a Chisquare method.; 2085/// In case of a TGraphErrors object, ex, the error along x, is projected; 2086/// along the y-direction by calculating the function at the points x-exlow and; 2087/// x+exhigh.; 2088///; 2089/// The chisquare is computed as the sum of the quantity below a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:60501,log,logs,60501,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['log'],['logs']
Testability,05 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 55.5039 42.6809 0.0201245 0.00180935 43679.7 0; : 662 Minimum Test error found - save the configuration ; : 662 | 54.3572 42.2723 0.0202587 0.00183315 43417.9 0; : 663 Minimum Test error found - save the configuration ; : 663 | 53.566 41.7624 0.0203991 0.00186617 43166.5 0; : 664 Minimum Test error found - save the configuration ; : 664 | 52.9086 41.2393 0.0201899 0.00182999 43573.1 0; : 665 Minimum Test error found - save the configuration ; : 665 | 52.1886 40.6761 0.020181 0.00182542 43583.6 0; : 666 Minimum Test error found - save the configuration ; : 666 | 51.2956 40.6256 0.0201396 0.00182896 43690.5 0; : 667 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:85019,Test,Test,85019,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"05 fTsumwyz += v * y * z;; 606 }; 607 return bin;; 608}; 609 ; 610 ; 611////////////////////////////////////////////////////////////////////////////////; 612/// Increment cell defined by x,namey,namez by a weight w; 613///; 614/// If the weight is not equal to 1, the storage of the sum of squares of; 615/// weights is automatically triggered and the sum of the squares of weights is incremented; 616/// by w^2 in the corresponding cell.; 617/// The function returns the corresponding global bin number which has its content; 618/// incremented by w; 619 ; 620Int_t TH3::Fill(Double_t x, const char *namey, const char *namez, Double_t w); 621{; 622 Int_t binx, biny, binz, bin;; 623 fEntries++;; 624 binx = fXaxis.FindBin(x);; 625 biny = fYaxis.FindBin(namey);; 626 binz = fZaxis.FindBin(namez);; 627 if (binx <0 || biny <0 || binz<0) return -1;; 628 bin = binx + (fXaxis.GetNbins()+2)*(biny + (fYaxis.GetNbins()+2)*binz);; 629 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 630 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 631 AddBinContent(bin,w);; 632 if (binx == 0 || binx > fXaxis.GetNbins()) {; 633 if (!GetStatOverflowsBehaviour()) return -1;; 634 }; 635 if (biny == 0 || biny > fYaxis.GetNbins()) return -1;; 636 if (binz == 0 || binz > fZaxis.GetNbins()) return -1;; 637 ; 638 Double_t v = w;; 639 fTsumw += v;; 640 fTsumw2 += v * v;; 641 fTsumwx += v * x;; 642 fTsumwx2 += v * x * x;; 643 // skip computation of the statistics along axis that have labels (can be extended and are aphanumeric); 644 UInt_t labelBitMask = GetAxisLabelStatus();; 645 if (labelBitMask != (TH1::kYaxis | TH1::kZaxis)) {; 646 Double_t y = (labelBitMask & TH1::kYaxis) ? 0 : fYaxis.GetBinCenter(biny);; 647 Double_t z = (labelBitMask & TH1::kZaxis) ? 0 : fZaxis.GetBinCenter(binz);; 648 fTsumwy += v * y;; 649 fTsumwy2 += v * y * y;; 650 fTsumwxy += v * x * y;; 651 fTsumwz += v * z;; 652 fTsumwz2 += v * z * z;; 653 fTsumwxz += v * x * z;; 654 fTsumwyz += v *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:24332,Test,TestBit,24332,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,"05; 3 ; 4#ifndef ROOT_Math_SVector_icc; 5#define ROOT_Math_SVector_icc; 6// ********************************************************************; 7//; 8// source:; 9//; 10// type: source code; 11//; 12// created: 21. Mar 2001; 13//; 14// author: Thorsten Glebe; 15// HERA-B Collaboration; 16// Max-Planck-Institut fuer Kernphysik; 17// Saupfercheckweg 1; 18// 69117 Heidelberg; 19// Germany; 20// E-mail: T.Glebe@mpi-hd.mpg.de; 21//; 22// Description: A fixed size Vector class; 23//; 24// changes:; 25// 21 Mar 2001 (TG) creation; 26// 26 Mar 2001 (TG) added place_at(); 27// 06 Apr 2001 (TG) CTORS added; 28// 07 Apr 2001 (TG) CTORS added; 29// 22 Aug 2001 (TG) CTOR(T*,len) added; 30// 14 Jan 2002 (TG) added operator==(), operator!=(), operator>(), operator<(); 31//; 32// ********************************************************************; 33 ; 34#ifndef ROOT_Math_SVector; 35#error ""Do not use SVector.icc directly. #include \""Math/SVector.h\"" instead.""; 36#endif // ROOT_Math_SVector; 37 ; 38#include <iostream>; 39#include <assert.h>; 40#include <algorithm>; 41 ; 42#include ""Math/StaticCheck.h""; 43 ; 44namespace ROOT {; 45 ; 46namespace Math {; 47 ; 48 ; 49//==============================================================================; 50// Constructors; 51//==============================================================================; 52template <class T, unsigned int D>; 53SVector<T,D>::SVector() {; 54 for(unsigned int i=0; i<D; ++i); 55 fArray[i] = 0;; 56}; 57 ; 58template <class T, unsigned int D>; 59template <class A>; 60SVector<T,D>::SVector(const VecExpr<A,T,D>& rhs) {; 61 operator=(rhs);; 62}; 63 ; 64template <class T, unsigned int D>; 65SVector<T,D>::SVector(const SVector<T,D>& rhs) {; 66 for(unsigned int i=0; i<D; ++i); 67 fArray[i] = rhs.fArray[i];; 68}; 69 ; 70 ; 71 ; 72//==============================================================================; 73// New Constructors from STL interfaces; 74//===============================================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SVector_8icc_source.html:1283,assert,assert,1283,doc/master/SVector_8icc_source.html,https://root.cern,https://root.cern/doc/master/SVector_8icc_source.html,1,['assert'],['assert']
Testability,"061 << Endl;; 2062 Log() << kINFO << ""(Signal Efficiency for Background Efficiency 0.01%)"" << Endl;; 2063 Log() << kINFO << ""---------------------------------------------------"" << Endl;; 2064 printMatrix(multiclass_testConfusionEffB01[iMethod], multiclass_trainConfusionEffB01[iMethod], classnames,; 2065 numClasses, Log());; 2066 Log() << kINFO << Endl;; 2067 ; 2068 Log() << kINFO << ""(Signal Efficiency for Background Efficiency 0.10%)"" << Endl;; 2069 Log() << kINFO << ""---------------------------------------------------"" << Endl;; 2070 printMatrix(multiclass_testConfusionEffB10[iMethod], multiclass_trainConfusionEffB10[iMethod], classnames,; 2071 numClasses, Log());; 2072 Log() << kINFO << Endl;; 2073 ; 2074 Log() << kINFO << ""(Signal Efficiency for Background Efficiency 0.30%)"" << Endl;; 2075 Log() << kINFO << ""---------------------------------------------------"" << Endl;; 2076 printMatrix(multiclass_testConfusionEffB30[iMethod], multiclass_trainConfusionEffB30[iMethod], classnames,; 2077 numClasses, Log());; 2078 Log() << kINFO << Endl;; 2079 }; 2080 Log() << kINFO << hLine << Endl;; 2081 Log() << kINFO << Endl;; 2082 ; 2083 } else {; 2084 // Binary classification; 2085 if (fROC) {; 2086 Log().EnableOutput();; 2087 gConfig().SetSilent(kFALSE);; 2088 Log() << Endl;; 2089 TString hLine = ""------------------------------------------------------------------------------------------""; 2090 ""-------------------------"";; 2091 Log() << kINFO << ""Evaluation results ranked by best signal efficiency and purity (area)"" << Endl;; 2092 Log() << kINFO << hLine << Endl;; 2093 Log() << kINFO << ""DataSet MVA "" << Endl;; 2094 Log() << kINFO << ""Name: Method: ROC-integ"" << Endl;; 2095 ; 2096 // Log() << kDEBUG << ""DataSet MVA Signal efficiency at bkg eff.(error):; 2097 // | Sepa- Signifi- "" << Endl; Log() << kDEBUG << ""Name: Method: @B=0.01; 2098 // @B=0.10 @B=0.30 ROC-integ ROCCurve| ration: cance: "" << Endl;; 2099 Log() << kDEBUG << hLine << Endl;; 2100 for (Int_t k = 0; k < 2; k++) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:87606,Log,Log,87606,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,6,['Log'],['Log']
Testability,"07 ; 308 return *this;; 309 }; 310 ; 311 ; 312 /**; 313 preallocate a data set with given size , dimension and error type (to get the full point size); 314 If the data set already exists and it is having the compatible point size space for the new points; 315 is created in the data sets, while if not compatible the old data are erased and new space of; 316 new size is allocated.; 317 (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints); 318 */; 319 ; 320 void BinData::Append( unsigned int newPoints, unsigned int dim , ErrorType err ); 321 {; 322 assert( !fWrapped );; 323 assert( fMaxPoints == 0 || fWrapped == fData.empty() );; 324 ; 325 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 326 kAsymError == fErrorType || kNoError == fErrorType );; 327 assert( fMaxPoints == 0 || fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 328 assert( fMaxPoints == 0 || fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 329 assert( fMaxPoints == 0 || fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 330 assert( fMaxPoints == 0 || fDataErrorLow.empty() == fDataErrorHigh.empty() );; 331 assert( fMaxPoints == 0 || fData.empty() || &fData.front() == fDataPtr );; 332 ; 333 FitData::Append( newPoints, dim );; 334 ; 335 fErrorType = err;; 336 ; 337 InitDataVector( );; 338 InitializeErrors( );; 339 }; 340 ; 341 ; 342 /**; 343 apply a Log transformation of the data values; 344 can be used for example when fitting an exponential or gaussian; 345 Transform the data in place need to copy if want to preserve original data; 346 The data sets must not contain negative values. IN case it does,; 347 an empty data set is returned; 348 */; 349 BinData & BinData::LogTransform(); 350 { // apply log transform on the bin data values; 351 ; 352 if ( fWrapped ); 353 {; 354 UnWrap();; 355 }; 356 ; 357 if ( kNoError == fErrorType ); 358 {; 359 fDataError.resize(fNPoints + FitData::VectorPadding(fNPoints));; 360 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:9772,assert,assert,9772,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"07 of file TProofServ.cxx. ◆ DisableTimeout(). virtual void TProofServ::DisableTimeout ; (; ). inlinevirtual . Definition at line 316 of file TProofServ.h. ◆ EnableTimeout(). virtual void TProofServ::EnableTimeout ; (; ). inlinevirtual . Definition at line 317 of file TProofServ.h. ◆ ErrorHandler(). void TProofServ::ErrorHandler ; (; Int_t ; level, . Bool_t ; abort, . const char * ; location, . const char * ; msg . ). static . The PROOF error handler function. ; It prints the message on fgErrorHandlerFile and if abort is set it aborts the application. ; Definition at line 5755 of file TProofServ.cxx. ◆ FilterLocalroot(). void TProofServ::FilterLocalroot ; (; TString & ; path, . const char * ; dsrv = ""root://dum/"" . ). static . If 'path' is local and 'dsrv' is Xrootd, apply 'path.Localroot' settings, if any. ; The final path via the server is dsrv+path. ; Definition at line 6966 of file TProofServ.cxx. ◆ FlushLogFile(). void TProofServ::FlushLogFile ; (; ). Reposition the read pointer in the log file to the very end. ; This allows to ""hide"" useful debug messages during normal operations while preserving the possibility to have them in case of problems. ; Definition at line 6013 of file TProofServ.cxx. ◆ Fork(). Int_t TProofServ::Fork ; (; ). protectedvirtual . Fork a child. ; If successful, return 0 in the child process and the child pid in the parent process. The child pid is registered for reaping. Return <0 in the parent process in case of failure. ; Definition at line 6665 of file TProofServ.cxx. ◆ Get(). TObject * TProofServ::Get ; (; const char * ; namecycle). Get object with name ""name;cycle"" (e.g. ; ""aap;2"") from master or client. This method is called by TDirectory::Get() in case the object can not be found locally. ; Definition at line 1091 of file TProofServ.cxx. ◆ GetActSessions(). Int_t TProofServ::GetActSessions ; (; ); const. inline . Definition at line 263 of file TProofServ.h. ◆ GetCacheDir(). const char * TProofServ::GetCacheDir ; (; ); const. inline",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:36064,log,log,36064,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['log'],['log']
Testability,07.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.8,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:82530,Test,Test,82530,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"073e-2, 0.19950380e-2, 0.12222675e-2};; 2977 ; 2978 Double_t W8[] = {0, 0.66184645e+1, -0.73866379e+0, 0.44693973e-1,; 2979 0. , -0.14540925e+1, -0.39529833e+0,; 2980 -0.44293243e-1, 0.88741049e-1};; 2981 ; 2982 itype = 0;; 2983 if (rkappa <0.01 || rkappa >12) {; 2984 Error(""Vavilov distribution"", ""illegal value of kappa"");; 2985 return;; 2986 }; 2987 ; 2988 Double_t DRK[6];; 2989 Double_t DSIGM[6];; 2990 Double_t ALFA[8];; 2991 Int_t j;; 2992 Double_t x, y, xx, yy, x2, x3, y2, y3, xy, p2, p3, q2, q3, pq;; 2993 if (rkappa >= 0.29) {; 2994 itype = 1;; 2995 npt = 100;; 2996 Double_t wk = 1./TMath::Sqrt(rkappa);; 2997 ; 2998 AC[0] = (-0.032227*beta2-0.074275)*rkappa + (0.24533*beta2+0.070152)*wk + (-0.55610*beta2-3.1579);; 2999 AC[8] = (-0.013483*beta2-0.048801)*rkappa + (-1.6921*beta2+8.3656)*wk + (-0.73275*beta2-3.5226);; 3000 DRK[1] = wk*wk;; 3001 DSIGM[1] = TMath::Sqrt(rkappa/(1-0.5*beta2));; 3002 for (j=1; j<=4; j++) {; 3003 DRK[j+1] = DRK[1]*DRK[j];; 3004 DSIGM[j+1] = DSIGM[1]*DSIGM[j];; 3005 ALFA[j+1] = (FNINV[j]-beta2*FNINV[j+1])*DRK[j];; 3006 }; 3007 HC[0]=TMath::Log(rkappa)+beta2+0.42278434;; 3008 HC[1]=DSIGM[1];; 3009 HC[2]=ALFA[3]*DSIGM[3];; 3010 HC[3]=(3*ALFA[2]*ALFA[2] + ALFA[4])*DSIGM[4]-3;; 3011 HC[4]=(10*ALFA[2]*ALFA[3]+ALFA[5])*DSIGM[5]-10*HC[2];; 3012 HC[5]=HC[2]*HC[2];; 3013 HC[6]=HC[2]*HC[3];; 3014 HC[7]=HC[2]*HC[5];; 3015 for (j=2; j<=7; j++); 3016 HC[j]*=EDGEC[j];; 3017 HC[8]=0.39894228*HC[1];; 3018 }; 3019 else if (rkappa >=0.22) {; 3020 itype = 2;; 3021 npt = 150;; 3022 x = 1+(rkappa-BKMXX3)*FBKX3;; 3023 y = 1+(TMath::Sqrt(beta2)-BKMXY3)*FBKY3;; 3024 xx = 2*x;; 3025 yy = 2*y;; 3026 x2 = xx*x-1;; 3027 x3 = xx*x2-x;; 3028 y2 = yy*y-1;; 3029 y3 = yy*y2-y;; 3030 xy = x*y;; 3031 p2 = x2*y;; 3032 p3 = x3*y;; 3033 q2 = y2*x;; 3034 q3 = y3*x;; 3035 pq = x2*y2;; 3036 AC[1] = W1[1] + W1[2]*x + W1[4]*x3 + W1[5]*y + W1[6]*y2 + W1[7]*y3 +; 3037 W1[8]*xy + W1[9]*p2 + W1[10]*p3 + W1[11]*q2 + W1[12]*q3 + W1[13]*pq;; 3038 AC[2] = W2[1] + W2[2]*x + W2[3]*x2 + W2[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:105549,Log,Log,105549,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['Log'],['Log']
Testability,"076 ; 7077}; 7078 ; 7079////////////////////////////////////////////////////////////////////////////////; 7080/// Compute histogram parameters used by the drawing routines.; 7081 ; 7082Int_t THistPainter::PaintInit(); 7083{; 7084 ; 7085 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) return 1;; 7086 ; 7087 Int_t i;; 7088 static const char *where = ""PaintInit"";; 7089 Double_t yMARGIN = gStyle->GetHistTopMargin();; 7090 Int_t maximum = 0;; 7091 Int_t minimum = 0;; 7092 if (fH->GetMaximumStored() != -1111) maximum = 1;; 7093 if (fH->GetMinimumStored() != -1111) minimum = 1;; 7094 ; 7095 // Compute X axis parameters; 7096 ; 7097 Int_t last = fXaxis->GetLast();; 7098 Int_t first = fXaxis->GetFirst();; 7099 Hparam.xlowedge = fXaxis->GetBinLowEdge(first);; 7100 Hparam.xbinsize = fXaxis->GetBinWidth(first);; 7101 Hparam.xlast = last;; 7102 Hparam.xfirst = first;; 7103 Hparam.xmin = Hparam.xlowedge;; 7104 Hparam.xmax = fXaxis->GetBinLowEdge(last)+fXaxis->GetBinWidth(last);; 7105 ; 7106 // if log scale in X, replace xmin,max by the log; 7107 if (Hoption.Logx) {; 7108 if (Hparam.xmax<=0) {; 7109 Error(where, ""cannot set X axis to log scale"");; 7110 return 0;; 7111 }; 7112 if (Hparam.xlowedge <=0 ) {; 7113 if (Hoption.Same) {; 7114 TH1* h1 = nullptr;; 7115 TObject *obj;; 7116 TIter next(gPad->GetListOfPrimitives());; 7117 while ((obj = (TObject *)next())) {; 7118 if (obj->InheritsFrom(TH1::Class())) { h1 = (TH1*)(obj) ; break; }; 7119 if (obj->InheritsFrom(THStack::Class())) { h1 = ((THStack*)(obj))->GetHistogram() ; break; }; 7120 if (obj->InheritsFrom(TGraph::Class())) { h1 = ((TGraph*)(obj))->GetHistogram() ; break; }; 7121 if (obj->InheritsFrom(TMultiGraph::Class())) { h1 = ((TMultiGraph*)(obj))->GetHistogram(); break; }; 7122 if (obj->InheritsFrom(TGraph2D::Class())) { h1 = ((TGraph2D*)(obj))->GetHistogram(); break; }; 7123 if (obj->InheritsFrom(TF1::Class())) { h1 = ((TF1*)(obj))->GetHistogram(); break; }; 7124 }; 7125 if (h1) {; 7126 Hparam.xlowedge = h1->GetX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:257783,log,log,257783,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,['log'],['log']
Testability,"077 ; 1078TLeaf* TChain::GetLeaf(const char* branchname, const char *leafname); 1079{; 1080 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 1081 // Make sure the element list is up to date; 1082 if (!TestBit(kProofUptodate)); 1083 SetProof(true, true);; 1084 return fProofChain->GetLeaf(branchname, leafname);; 1085 }; 1086 if (fTree) {; 1087 return fTree->GetLeaf(branchname, leafname);; 1088 }; 1089 LoadTree(0);; 1090 if (fTree) {; 1091 return fTree->GetLeaf(branchname, leafname);; 1092 }; 1093 return nullptr;; 1094}; 1095 ; 1096////////////////////////////////////////////////////////////////////////////////; 1097/// Return a pointer to the leaf name in the current tree.; 1098 ; 1099TLeaf* TChain::GetLeaf(const char* name); 1100{; 1101 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 1102 // Make sure the element list is up to date; 1103 if (!TestBit(kProofUptodate)); 1104 SetProof(true, true);; 1105 return fProofChain->GetLeaf(name);; 1106 }; 1107 if (fTree) {; 1108 return fTree->GetLeaf(name);; 1109 }; 1110 LoadTree(0);; 1111 if (fTree) {; 1112 return fTree->GetLeaf(name);; 1113 }; 1114 return nullptr;; 1115}; 1116 ; 1117////////////////////////////////////////////////////////////////////////////////; 1118/// Return a pointer to the list of branches of the current tree.; 1119///; 1120/// Warning: If there is no current TTree yet, this routine will open the; 1121/// first in the chain.; 1122///; 1123/// Returns 0 on failure.; 1124 ; 1125TObjArray* TChain::GetListOfBranches(); 1126{; 1127 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 1128 // Make sure the element list is up to date; 1129 if (!TestBit(kProofUptodate)); 1130 SetProof(true, true);; 1131 return fProofChain->GetListOfBranches();; 1132 }; 1133 if (fTree) {; 1134 return fTree->GetListOfBranches();; 1135 }; 1136 LoadTree(0);; 1137 if (fTree) {; 1138 return fTree->GetListOfBranches();; 1139 }; 1140 return nullptr;; 1141}; 1142 ; 1143////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:41106,Test,TestBit,41106,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['Test'],['TestBit']
Testability,"0791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.22 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:17123,Test,Test,17123,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"08 ; 709 double adk[2] = {0,0};; 710 ; 711 //debug; 712 // std::cout << ""combined samples\n"";; 713 // for (int i = 0; i < fCombinedSamples.size(); ++i); 714 // std::cout << fCombinedSamples[i] << "" ,"";; 715 // std::cout << std::endl;; 716 // std::cout << ns[0] << "" "" << ns[1] << std::endl;; 717 // std::cout << ""Z\n"";; 718 // for (int i = 0; i < z.size(); ++i); 719 // std::cout << z[i] << "" ,"";; 720 // std::cout << std::endl;; 721 ; 722 // use function from kSamples code; 723 adkTestStat(adk, fSamples, z );; 724 // w.Print();; 725 // std::cout << ""A2 - new kSamples code "" << adk[0] << "" "" << adk[1] << std::endl;; 726 ; 727 A2 = adk[0]; ; 728 ; 729 // compute the normalized test statistic ; 730 ; 731 std::vector<size_t> ns(fSamples.size());; 732 for (unsigned int k = 0; k < ns.size(); ++k) ns[k] = fSamples[k].size();; 733 Double_t sigmaN = GetSigmaN(ns, N);; 734 A2 -= fSamples.size() - 1;; 735 A2 /= sigmaN; // standardized test statistic; 736 ; 737 pvalue = PValueADKSamples(2,A2); ; 738 testStat = A2;; 739 return;; 740 }; 741 ; 742 ; 743/*; 744 Compute Anderson Darling test for two binned data set. ; 745 A binned data set can be seen as many identical observation happening at the center of the bin; 746 In this way it is trivial to apply the formula (6) in the paper of W. Scholz, M. Stephens, ""K-Sample Anderson-Darling Tests""; 747 to the case of histograms. See also http://arxiv.org/pdf/0804.0380v1.pdf paragraph 3.3.5; 748 It is important that empty bins are not present ; 749*/; 750 void GoFTest::AndersonDarling2SamplesTest(const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData & data2, Double_t& pvalue, Double_t& testStat) {; 751 pvalue = -1;; 752 testStat = -1;; 753 // ; 754 // compute cumulative sum of bin counts ; 755 // std::vector<double> sum1(data1.Size() ); ; 756 // std::vector<double> sum2(data2.Size() ); ; 757 // std::vector<double> sumAll(data1.Size() + data2.Size() ); ; 758 ; 759 if (data1.NDim() != 1 && data2.NDim() != 1) {; 760 MATH_ERROR_MSG(""AndersonD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:26705,test,test,26705,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,3,['test'],"['test', 'testStat']"
Testability,"08 AddCut( cut );; 609 ; 610 DefaultDataSetInfo().SetSplitOptions( TString::Format(""nTrain_Signal=%i:nTrain_Background=%i:nTest_Signal=%i:nTest_Background=%i:%s"",; 611 NsigTrain, NbkgTrain, NsigTest, NbkgTest, otherOpt.Data()).Data() );; 612}; 613 ; 614////////////////////////////////////////////////////////////////////////////////; 615/// prepare the training and test trees; 616/// kept for backward compatibility; 617 ; 618void TMVA::DataLoader::PrepareTrainingAndTestTree( const TCut& cut, Int_t Ntrain, Int_t Ntest ); 619{; 620 SetInputTreesFromEventAssignTrees();; 621 ; 622 AddCut( cut );; 623 ; 624 DefaultDataSetInfo().SetSplitOptions( TString::Format(""nTrain_Signal=%i:nTrain_Background=%i:nTest_Signal=%i:nTest_Background=%i:SplitMode=Random:EqualTrainSample:!V"",; 625 Ntrain, Ntrain, Ntest, Ntest).Data() );; 626}; 627 ; 628////////////////////////////////////////////////////////////////////////////////; 629/// prepare the training and test trees; 630/// -> same cuts for signal and background; 631 ; 632void TMVA::DataLoader::PrepareTrainingAndTestTree( const TCut& cut, const TString& opt ); 633{; 634 SetInputTreesFromEventAssignTrees();; 635 ; 636 DefaultDataSetInfo().PrintClasses();; 637 AddCut( cut );; 638 DefaultDataSetInfo().SetSplitOptions( opt );; 639}; 640 ; 641////////////////////////////////////////////////////////////////////////////////; 642/// prepare the training and test trees; 643 ; 644void TMVA::DataLoader::PrepareTrainingAndTestTree( TCut sigcut, TCut bkgcut, const TString& splitOpt ); 645{; 646 // if event-wise data assignment, add local trees to dataset first; 647 SetInputTreesFromEventAssignTrees();; 648 ; 649 //Log() << kINFO <<""Preparing trees for training and testing...""<< Endl;; 650 AddCut( sigcut, ""Signal"" );; 651 AddCut( bkgcut, ""Background"" );; 652 ; 653 DefaultDataSetInfo().SetSplitOptions( splitOpt );; 654}; 655 ; 656////////////////////////////////////////////////////////////////////////////////; 657/// Function required to split the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:24933,test,test,24933,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,1,['test'],['test']
Testability,"0804.0380v1.pdf); 8050///; 8051/// Binned data are considered as un-binned data; 8052/// with identical observation happening in the bin center.; 8053///; 8054/// \param[in] h2 Pointer to 1D histogram; 8055/// \param[in] option is a character string to specify options; 8056/// - ""D"" Put out a line of ""Debug"" printout; 8057/// - ""T"" Return the normalized A-D test statistic; 8058///; 8059/// - Note1: Underflow and overflow are not considered in the test; 8060/// - Note2: The test works only for un-weighted histogram (i.e. representing counts); 8061/// - Note3: The histograms are not required to have the same X axis; 8062/// - Note4: The test works only for 1-dimensional histograms; 8063 ; 8064Double_t TH1::AndersonDarlingTest(const TH1 *h2, Option_t *option) const; 8065{; 8066 Double_t advalue = 0;; 8067 Double_t pvalue = AndersonDarlingTest(h2, advalue);; 8068 ; 8069 TString opt = option;; 8070 opt.ToUpper();; 8071 if (opt.Contains(""D"") ) {; 8072 printf("" AndersonDarlingTest Prob = %g, AD TestStatistic = %g\n"",pvalue,advalue);; 8073 }; 8074 if (opt.Contains(""T"") ) return advalue;; 8075 ; 8076 return pvalue;; 8077}; 8078 ; 8079////////////////////////////////////////////////////////////////////////////////; 8080/// Same function as above but returning also the test statistic value; 8081 ; 8082Double_t TH1::AndersonDarlingTest(const TH1 *h2, Double_t & advalue) const; 8083{; 8084 if (GetDimension() != 1 || h2->GetDimension() != 1) {; 8085 Error(""AndersonDarlingTest"",""Histograms must be 1-D"");; 8086 return -1;; 8087 }; 8088 ; 8089 // empty the buffer. Probably we could add as an unbinned test; 8090 if (fBuffer) ((TH1*)this)->BufferEmpty();; 8091 ; 8092 // use the BinData class; 8093 ROOT::Fit::BinData data1;; 8094 ROOT::Fit::BinData data2;; 8095 ; 8096 ROOT::Fit::FillData(data1, this, nullptr);; 8097 ROOT::Fit::FillData(data2, h2, nullptr);; 8098 ; 8099 double pvalue;; 8100 ROOT::Math::GoFTest::AndersonDarling2SamplesTest(data1,data2, pvalue,advalue);; 8101 ; 8102 retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:316484,Test,TestStatistic,316484,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['TestStatistic']
Testability,"081 /*! \brief d'tor; 1082 *; 1083 *; 1084 */; 1085 Net (const Net& other); 1086 : m_eErrorFunction (other.m_eErrorFunction); 1087 , m_sizeInput (other.m_sizeInput); 1088 , m_layers (other.m_layers); 1089 {; 1090 }; 1091 ; 1092 void setInputSize (size_t sizeInput) { m_sizeInput = sizeInput; } ///< set the input size of the DNN; 1093 void setOutputSize (size_t sizeOutput) { m_sizeOutput = sizeOutput; } ///< set the output size of the DNN; 1094 void addLayer (Layer& layer) { m_layers.push_back (layer); } ///< add a layer (layout); 1095 void addLayer (Layer&& layer) { m_layers.push_back (layer); }; 1096 void setErrorFunction (ModeErrorFunction eErrorFunction) { m_eErrorFunction = eErrorFunction; } ///< which error function is to be used; 1097 ; 1098 size_t inputSize () const { return m_sizeInput; } ///< input size of the DNN; 1099 size_t outputSize () const { return m_sizeOutput; } ///< output size of the DNN; 1100 ; 1101 /*! \brief set the drop out configuration; 1102 *; 1103 *; 1104 */; 1105 template <typename WeightsType, typename DropProbabilities>; 1106 void dropOutWeightFactor (WeightsType& weights,; 1107 const DropProbabilities& drops,; 1108 bool inverse = false);; 1109 ; 1110 /*! \brief start the training; 1111 *; 1112 * \param weights weight vector; 1113 * \param trainPattern training pattern; 1114 * \param testPattern test pattern; 1115 * \param minimizer use this minimizer for training (e.g. SGD); 1116 * \param settings settings used for this training run; 1117 */; 1118 template <typename Minimizer>; 1119 double train (std::vector<double>& weights,; 1120 std::vector<Pattern>& trainPattern,; 1121 const std::vector<Pattern>& testPattern,; 1122 Minimizer& minimizer,; 1123 Settings& settings);; 1124 ; 1125 /*! \brief pre-training for future use; 1126 *; 1127 *; 1128 */; 1129 template <typename Minimizer>; 1130 void preTrain (std::vector<double>& weights,; 1131 std::vector<Pattern>& trainPattern,; 1132 const std::vector<Pattern>& testPattern,; 1133 Minimizer& mini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:40070,test,testPattern,40070,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,2,['test'],"['test', 'testPattern']"
Testability,"082 for (size_t l = 0; l < net.GetDepth(); l++) {; 1083 fNet.GetLayer(l).GetWeights() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetWeights();; 1084 fNet.GetLayer(l).GetBiases() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetBiases();; 1085 }; 1086 }; 1087 ; 1088#else // DNNCUDA flag not set.; 1089 ; 1090 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 1091 ""you have CUDA installed and it was successfully ""; 1092 ""detected by CMAKE."" << Endl;; 1093#endif // DNNCUDA; 1094}; 1095 ; 1096////////////////////////////////////////////////////////////////////////////////; 1097 ; 1098void TMVA::MethodDNN::TrainCpu(); 1099{; 1100 ; 1101#ifdef DNNCPU // Included only if DNNCPU flag is set.; 1102 Log() << kINFO << ""Start of neural network training on CPU."" << Endl << Endl;; 1103 ; 1104 size_t nValidationSamples = GetNumValidationSamples();; 1105 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 1106 size_t nTestSamples = nValidationSamples;; 1107 ; 1108 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 1109 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 1110 ; 1111 fNet.Initialize(fWeightInitialization);; 1112 ; 1113 size_t trainingPhase = 1;; 1114 for (TTrainingSettings & settings : fTrainingSettings) {; 1115 ; 1116 if (fInteractive){; 1117 fInteractive->ClearGraphs();; 1118 }; 1119 ; 1120 Log() << ""Training phase "" << trainingPhase << "" of ""; 1121 << fTrainingSettings.size() << "":"" << Endl;; 1122 trainingPhase++;; 1123 ; 1124 TNet<TCpu<>> net(settings.batchSize, fNet);; 1125 net.SetWeightDecay(settings.weightDecay);; 1126 net.SetRegularization(settings.regularization);; 1127 // Need to convert dropoutprobabilities to conventions used; 1128 // by backend implementation.; 1129 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 1130 for (auto & p : dropoutVector) {; 1131 p = 1.0 - p;; 1132 }; 1133 net.SetDropoutProbabilities(dropoutVector);; 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:39721,Log,Log,39721,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability,089214 0.20183 [ -1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: SVM; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; SVM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_SVM : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: RuleFit; : ; RuleFit : [dataset] : Loop ov,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:76718,test,test,76718,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,08_bphysics.py ;  rf801_mcstudy.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #801 ;  rf801_mcstudy.py ;  rf802_mcstudy_addons.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #802 ;  rf803_mcstudy_addons2.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #803 ;  rf804_mcstudy_constr.C 'VALIDATION AND MC STUDIES' RooFit tutorial macro #804 ;  rf901_numintconfig.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #901 ;  rf901_numintconfig.py;  rf902_numgenconfig.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #902 ;  rf902_numgenconfig.py;  rf903_numintcache.C 'NUMERIC ALGORITHM TUNING' RooFit tutorial macro #903 ;  rf903_numintcache.py;  ► roostats;  CreateExampleFile.C;  FourBinInstructional.C This example is a generalization of the on/off problem ;  HybridInstructional.C Example demonstrating usage of HybridCalcultor ;  HybridOriginalDemo.C Example on how to use the HybridCalculatorOriginal class ;  HybridStandardForm.C A hypothesis testing example based on number counting with background uncertainty ;  IntervalExamples.C Example showing confidence intervals with four techniques ;  JeffreysPriorDemo.C tutorial demonstrating and validates the RooJeffreysPrior class ;  ModelInspector.CRooStats Model Inspector ;  MultivariateGaussianTest.C Comparison of MCMC and PLC in a multi-variate gaussian problem ;  NuMuToNuE_Oscillation.cxx;  NuMuToNuE_Oscillation.h;  OneSidedFrequentistUpperLimitWithBands.C OneSidedFrequentistUpperLimitWithBands ;  rs101_limitexample.C 'Limit Example' RooStats tutorial macro #101 This tutorial shows an example of creating a simple model for a number counting experiment with uncertainty on both the background rate and signal efficiency ;  rs102_hypotestwithshapes.C rs102_hypotestwithshapes for RooStats project ;  rs301_splot.C SPlot tutorial ;  rs401c_FeldmanCousins.C Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique ;  rs401d_FeldmanCousins.C 'Neutrin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:158861,test,testing,158861,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['test'],['testing']
Testability,"09 fTsumwyz += v * y * z;; 510 }; 511 return bin;; 512}; 513 ; 514 ; 515////////////////////////////////////////////////////////////////////////////////; 516/// Increment cell defined by namex,y,namez by a weight w; 517///; 518/// If the weight is not equal to 1, the storage of the sum of squares of; 519/// weights is automatically triggered and the sum of the squares of weights is incremented; 520/// by w^2 in the corresponding cell.; 521/// The function returns the corresponding global bin number which has its content; 522/// incremented by w; 523 ; 524Int_t TH3::Fill(const char *namex, Double_t y, const char *namez, Double_t w); 525{; 526 Int_t binx, biny, binz, bin;; 527 fEntries++;; 528 binx = fXaxis.FindBin(namex);; 529 biny = fYaxis.FindBin(y);; 530 binz = fZaxis.FindBin(namez);; 531 if (binx <0 || biny <0 || binz<0) return -1;; 532 bin = binx + (fXaxis.GetNbins()+2)*(biny + (fYaxis.GetNbins()+2)*binz);; 533 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 534 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 535 AddBinContent(bin,w);; 536 if (binx == 0 || binx > fXaxis.GetNbins()) return -1;; 537 if (biny == 0 || biny > fYaxis.GetNbins()) {; 538 if (!GetStatOverflowsBehaviour()) return -1;; 539 }; 540 if (binz == 0 || binz > fZaxis.GetNbins()) return -1;; 541 Double_t v = w;; 542 fTsumw += v;; 543 fTsumw2 += v*v;; 544 fTsumwy += v*y;; 545 fTsumwy2 += v*y*y;; 546 // skip computation of the statistics along axis that have labels (can be extended and are aphanumeric); 547 UInt_t labelBitMask = GetAxisLabelStatus();; 548 if (labelBitMask != (TH1::kXaxis | TH1::kZaxis) ) {; 549 Double_t x = (labelBitMask & TH1::kXaxis) ? 0 : fXaxis.GetBinCenter(binx);; 550 Double_t z = (labelBitMask & TH1::kZaxis) ? 0 : fZaxis.GetBinCenter(binz);; 551 fTsumwx += v * x;; 552 fTsumwx2 += v * x * x;; 553 fTsumwxy += v * x * y;; 554 fTsumwz += v * z;; 555 fTsumwz2 += v * z * z;; 556 fTsumwxz += v * x * z;; 557 fTsumwyz += v * y * z;; 558 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:20393,Test,TestBit,20393,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,"09 of file GSLRndmEngines.cxx. ◆ Initialize(). void ROOT::Math::GSLRandomEngine::Initialize ; (; ). initialize the generator If no rng is present the default one based on Mersenne and Twister is created ; Definition at line 124 of file GSLRndmEngines.cxx. ◆ IntRndm(). unsigned long ROOT::Math::GSLRandomEngine::IntRndm ; (; ); const. inline . Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 133 of file GSLRndmEngines.h. ◆ Landau(). double ROOT::Math::GSLRandomEngine::Landau ; (; ); const. Landau distribution. ; Definition at line 287 of file GSLRndmEngines.cxx. ◆ Logistic(). double ROOT::Math::GSLRandomEngine::Logistic ; (; double ; a); const. Logistic distribution. ; Definition at line 336 of file GSLRndmEngines.cxx. ◆ LogNormal(). double ROOT::Math::GSLRandomEngine::LogNormal ; (; double ; zeta, . double ; sigma . ); const. Log Normal distribution. ; Definition at line 305 of file GSLRndmEngines.cxx. ◆ MaxInt(). unsigned long ROOT::Math::GSLRandomEngine::MaxInt ; (; ); const. return the maximum integer +1 a generator can handle ; Definition at line 157 of file GSLRndmEngines.cxx. ◆ MinInt(). unsigned long ROOT::Math::GSLRandomEngine::MinInt ; (; ); const. return the minimum integer a generator can handle typically this value is 0 ; Definition at line 152 of file GSLRndmEngines.cxx. ◆ Multinomial(). std::vector< unsigned int > ROOT::Math::GSLRandomEngine::Multinomial ; (; unsigned int ; ntot, . const std::vector< double > & ; p . ); const. Multinomial distribution. ; Definition at line 379 of file GSLRndmEngines.cxx. ◆ Name(). std::string ROOT::Math::GSLRandomEngine::Name ; (; ); const. return name of generator ; Definition at line 191 of file GSLRndmEngines.cxx. ◆ NegativeBinomial(). unsigned int ROOT::Math::GSLRandomEngine::NegativeBinomial ; (; double ; p, . double ; n . ); const. Negative Binomial distribution. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:10441,Log,Log,10441,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,1,['Log'],['Log']
Testability,"09 q = -x;; 210 w = lgam(q);; 211 p = std::floor(q);; 212 if( p==q )//_unur_FP_same(p,q); 213 return (std::numeric_limits<double>::infinity());; 214 i = (int) p;; 215 if( (i & 1) == 0 ); 216 sgngam = -1;; 217 else; 218 sgngam = 1;; 219 z = q - p;; 220 if( z > 0.5 ); 221 {; 222 p += 1.0;; 223 z = p - q;; 224 }; 225 z = q * std::sin( ROOT::Math::Pi() * z );; 226 if( z == 0 ); 227 return (std::numeric_limits<double>::infinity());; 228/* z = log(ROOT::Math::Pi()) - log( z ) - w;*/; 229 z = std::log(ROOT::Math::Pi()) - std::log( z ) - w;; 230 return( z );; 231 }; 232 ; 233 if( x < 13.0 ); 234 {; 235 z = 1.0;; 236 p = 0.0;; 237 u = x;; 238 while( u >= 3.0 ); 239 {; 240 p -= 1.0;; 241 u = x + p;; 242 z *= u;; 243 }; 244 while( u < 2.0 ); 245 {; 246 if( u == 0 ); 247 return (std::numeric_limits<double>::infinity());; 248 z /= u;; 249 p += 1.0;; 250 u = x + p;; 251 }; 252 if( z < 0.0 ); 253 {; 254 sgngam = -1;; 255 z = -z;; 256 }; 257 else; 258 sgngam = 1;; 259 if( u == 2.0 ); 260 return( std::log(z) );; 261 p -= 2.0;; 262 x = x + p;; 263 p = x * Polynomialeval(x, B, 5 ) / Polynomial1eval( x, C, 6);; 264 return( std::log(z) + p );; 265 }; 266 ; 267 if( x > kMAXLGM ); 268 return( sgngam * std::numeric_limits<double>::infinity() );; 269 ; 270 q = ( x - 0.5 ) * std::log(x) - x + LS2PI;; 271 if( x > 1.0e8 ); 272 return( q );; 273 ; 274 p = 1.0/(x*x);; 275 if( x >= 1000.0 ); 276 q += (( 7.9365079365079365079365e-4 * p; 277 - 2.7777777777777777777778e-3) *p; 278 + 0.0833333333333333333333) / x;; 279 else; 280 q += Polynomialeval( p, A, 4 ) / x;; 281 return( q );; 282}; 283 ; 284/*---------------------------------------------------------------------------*/; 285static double P[] = {; 286 1.60119522476751861407E-4,; 287 1.19135147006586384913E-3,; 288 1.04213797561761569935E-2,; 289 4.76367800457137231464E-2,; 290 2.07448227648435975150E-1,; 291 4.94214826801497100753E-1,; 292 9.99999999999999996796E-1; 293};; 294static double Q[] = {; 295 -2.31581873324120129819E-5,; 296 5.39605580",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:5485,log,log,5485,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['log'],['log']
Testability,0985 0.00180899 43741 6; : 967 | 3.64317 5.0911 0.0200896 0.00175556 43634.6 7; : 968 Minimum Test error found - save the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200555 0.00176513 43738.9 6; : 975 Minimum Test error found - save the configuration ; : 975 | 3.52504 4.65912 0.0202218 0.00185299 43552 0; : 976 | 3.7346 5.23443 0.0200603 0.00176255 43721.2 1; : 977 | 3.73856 4.9727 0.0200443 0.00176151 43757 2; : 978 | 3.60727 4.99113 0.0200479 0.00175633 43736 3; : 979 | 3.40672 4.84357 0.0200357 0.00175685 43766.5 4; : 980 | 3.44899 4.83288 0.0200548 0.0017499 43704.2 5; : 981 | 3.46445 4.72048 0.0203135 0.00176046 43119.7 6; : 982 Minimum Test error found - save the configuration ; : 982 | 3.46604 4.64127 0.0202116 0.00183381 43530.8 0; : 983 Minimum Test error found - save the configuration ; : 983 | 3.37896 4.59559 0.0201715 0.00182642 43608.5 0; : 984 Minimum Test error found - save the configuration ; : 984 | 3.36213 4.34126 0.0202597 0.00185498 43467.1 0; : 985 | 3.39032 4.51659 0.0201503 0.00185184 43719.5 1; : 986 | 3.5234 4.95577 0.0201762 0.0017578 43434.8 2; : 987 | 3.50466 4.60061 0.0201538 0.00175522 43481.6 3; : 988 | 3.61316 4.68965 0.0201071 0.00176 43603.6 4; : 989 | 3.88349 5.24185 0.0200475 0.00175499 43733.8 5; : 990 | 4.0647 4.52576 0.020036 0.00175545 43762.3 6; : 991 | 3.77396 5.32769 0.0200783 0.00175786 43667.1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:111905,Test,Test,111905,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164.293 100.588 0.0203765 0.00182671 43127.2 0; : 576 Minimum Test error found - save the configuration ; : 576 | 162.136 99.7953 0.0201485 0.00182291 43654.8 0; : 577 Minimum Test error found - save the configuration ; : 577 | 160.429 98.8873 0.0202404 0.00182125 43433.1 0; : 578 Minimum Test error found - save the configuration ; : 578 | 158.663 98.2522 0.020118 0.00181189 43701.3 0; : 579 Minimum Test error found - save the configuration ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minimum Test error found - save the configuration ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:76194,Test,Test,76194,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164.293 100.588 0.0203765 0.00182671 43127.2 0; : 576 Minimum Test error found - save the configuration ; : 576 | 162.136 99.7953 0.0201485 0.00182291 43654.8 0; : 577 Minimum Test error found - save the configuration ; : 577 | 160.429 98.8873 0.0202404 0.00182125 43433.1 0; : 578 Minimum Test error found - save the configuration ; : 578 | 158.663 98.2522 0.020118 0.00181189 43701.3 0; : 579 Minimum Test error found - save the configuration ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minimum Test error found - save the configuration ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:76308,Test,Test,76308,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164.293 100.588 0.0203765 0.00182671 43127.2 0; : 576 Minimum Test error found - save the configuration ; : 576 | 162.136 99.7953 0.0201485 0.00182291 43654.8 0; : 577 Minimum Test error found - save the configuration ; : 577 | 160.429 98.8873 0.0202404 0.00182125 43433.1 0; : 578 Minimum Test error found - save the configuration ; : 578 | 158.663 98.2522 0.020118 0.00181189 43701.3 0; : 579 Minimum Test error found - save the configuration ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minimum Test error found - save the configuration ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:76421,Test,Test,76421,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 55.5039 42.6809 0.0201245 0.00180935 43679.7 0; : 662 Minimum Test error found - save the configuration ; : 662 | 54.3572 42.2723 0.0202587 0.00183315 43417.9 0; : 663 Minimum Test error found - save the configuration ; : 663 | 53.566 41.7624 0.0203991 0.00186617 43166.5 0; : 664 Minimum Test error found - save the configuration ; : 664 | 52.9086 41.2393 0.0201899 0.00182999 43573.1 0; : 665 Minimum Test error found - save the configuration ; : 665 | 52.1886 40.6761 0.020181 0.00182542 43583.6 0; : 666 Minimum Test error found - save the configuration ; : 666 | 51.2956 40.6256 0.0201396 0.00182896 43690.5 0; : 667 Minimum Test error found - save the configuration ; : 667 | 50.7315 40.0752 0.0201193 0.00182284 43724.4 0; : 668 | 49.9429 40.0919 0.0200598 0.00176937 43738.7 1; : 669 Minimum Test error found - save the configuration ; : 669 | 49.7924 39.9525 0.02013 0.00182828 43711.6 0; : 670 Minimum Test error found - save the configuration ; : 670 | 48,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:85361,Test,Test,85361,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum Test error found - save the configuration ; : 752 | 17.2045 20.1301 0.0200899 0.00181385 43773 0; : 753 Minimum Test error found - save the configuration ; : 753 | 17.2492 20.0483 0.0200805 0.00181433 43796.8 0; : 754 Minimum Test error found - save the configuration ; : 754 | 16.8738 20.0271 0.0201173 0.00182078 43724.2 0; : 755 | 16.6744 20.3793 0.0200328 0.00175569 43770.5 1; : 756 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:93551,Test,Test,93551,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,0; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 160; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 150; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-750.903) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.726225 a1=-0.429497 mean=5.03871 nbkg=129.53 nsig=136.644 sig1frac=0.687558; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 140; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-740.756) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.899536 a1=-0.345881 mean=5.03897 nbkg=135.176 nsig=129.13 sig1frac=0.899393; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-677.604) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.766597 a1=-0.547838 mean=5.03836 nbkg=119.039 nsig=121.817 sig1frac=0.213703; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 130; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.527582 a1=-0.893856 mean=5.24753 nbkg=162.951 nsig=65.9357 sig1frac=0.970262; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.516095 a1=-0.955515 mean=5.14443 nbkg=157.502 nsig=97.2821 sig1frac=0.174928; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum F,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:25030,log,log,25030,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"0;; 10634 } else if (Hoption.Logz && zmin>=0 && zmax==0) { // empty histogram in log scale; 10635 zmin = 0.01;; 10636 zmax = 10.;; 10637 }; 10638 if (zmin >= zmax) {; 10639 if (Hoption.Logz) {; 10640 if (zmax > 0) zmin = 0.001*zmax;; 10641 else {; 10642 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10643 return 0;; 10644 }; 10645 }; 10646 }; 10647 ; 10648 // take into account normalization factor; 10649 Hparam.allchan = allchan;; 10650 Double_t factor = allchan;; 10651 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 10652 if (allchan) factor /= allchan;; 10653 if (factor == 0) factor = 1;; 10654 Hparam.factor = factor;; 10655 zmax = factor*zmax;; 10656 zmin = factor*zmin;; 10657 c1 = zmax;; 10658 if (TMath::Abs(zmin) > TMath::Abs(c1)) c1 = zmin;; 10659 ; 10660 // For log scales, histogram coordinates are log10(ymin) and; 10661 // log10(ymax). Final adjustment (if not option ""Same""); 10662 // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; 10663 // Maximum and Minimum are not defined.; 10664 if (Hoption.Logz) {; 10665 if (zmin <= 0) {; 10666 zmin = TMath::Min((Double_t)1, (Double_t)0.001*zmax);; 10667 fH->SetMinimum(zmin);; 10668 }; 10669 zmin = TMath::Log10(zmin);; 10670 if (!minimum) zmin += TMath::Log10(0.5);; 10671 zmax = TMath::Log10(zmax);; 10672 if (!maximum) zmax += TMath::Log10(2*(0.9/0.95));; 10673 goto LZMIN;; 10674 }; 10675 ; 10676 // final adjustment of YMAXI for linear scale (if not option ""Same""):; 10677 // decrease histogram height to MAX% of allowed height if HMAXIM; 10678 // has not been called.; 10679 // MAX% is the value in percent which has been set in HPLSET; 10680 // (default is 90%).; 10681 if (!maximum) {; 10682 zmax += yMARGIN*(zmax-zmin);; 10683 }; 10684 ; 10685 // final adjustment of ymin for linear scale.; 10686 // if minimum is not set , then ymin is set to zero if >0; 10687 // or to ymin - yMARGIN if <0.; 10688 if (!minimum) {; 10689 if (Hoption.MinimumZero)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:383107,log,logarithmic,383107,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['logarithmic']
Testability,0] PROGRESS:Generation -- RooMCStudy::run: sample 360; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 350; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 340; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 330; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 320; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 310; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-831.776) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.823781 a1=-0.287947 mean=4.96347 nbkg=133.185 nsig=155.535 sig1frac=0.887106; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 300; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 290; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 280; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-867.974) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.806741 a1=-0.376486 mean=4.95962 nbkg=143.191 nsig=160.421 sig1frac=0.787531; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 270; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-810.184) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.701119 a1=-0.376392 mean=4.96099 nbkg=126.85 nsig=153.527 sig1frac=0.880449; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-845.198) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.74363 a1=-0.435344 mean=5.01952 nbkg=162.467 nsig=143.571 sig1frac=0.630815; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 260; [#0] PROGRESS:Generati,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:21865,log,log,21865,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,0] PROGRESS:Generation -- RooMCStudy::run: sample 500; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 490; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 480; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 470; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 460; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 450; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 440; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 430; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-926.481) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.653979 a1=-0.469539 mean=5.00078 nbkg=160.963 nsig=166.526 sig1frac=0.628924; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 420; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-768.847) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.749295 a1=-0.303934 mean=4.98272 nbkg=121.461 nsig=145.338 sig1frac=0.822833; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-798.509) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.791035 a1=-0.287544 mean=4.98693 nbkg=127.577 nsig=149.203 sig1frac=0.914567; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 410; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 400; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 390; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-977.775) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.565967 a1=-0.529635 mean=5.0065 nbkg=153.38 nsig=185.083 sig1frac=0.751239; RooAddPdf::model[ nbkg * bkg_over_bkg_Int,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:19374,log,log,19374,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,0] PROGRESS:Generation -- RooMCStudy::run: sample 660; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 650; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 640; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 630; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 620; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 610; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-809.027) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.719517 a1=-0.347533 mean=5.00927 nbkg=127.977 nsig=152.559 sig1frac=0.917291; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 600; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 590; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 580; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-869.586) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.621299 a1=-0.442393 mean=5.13262 nbkg=131.7 nsig=167.982 sig1frac=0.776177; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 570; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 560; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 550; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 540; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 530; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-820.086) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.699182 a1=-0.532303 mean=4.90748 nbkg=130.722 nsig=155.109 sig1frac=0.843514; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 520; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 510; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:17110,log,log,17110,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,0] PROGRESS:Generation -- RooMCStudy::run: sample 840; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 830; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-970.563) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.867793 a1=-0.296045 mean=5.10353 nbkg=164.822 nsig=173.566 sig1frac=0.899431; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 820; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 810; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 800; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 790; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 780; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 770; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 760; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-915.472) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.807508 a1=-0.34963 mean=5.09438 nbkg=142.436 nsig=172.312 sig1frac=0.886183; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 750; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-885.867) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.7962 a1=-0.414289 mean=5.07605 nbkg=135.514 nsig=167.164 sig1frac=0.927781; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-848.597) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.577138 a1=-0.518554 mean=5.09299 nbkg=144.203 nsig=156.938 sig1frac=0.54541; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 740; [#0] PROGRESS:Generation,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:13715,log,log,13715,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"0err[k][i]),; 2150 // eff30[k][i], Int_t(1000*eff30err[k][i]),; 2151 // effArea[k][i],rocIntegral,; 2152 // sep[k][i], sig[k][i]) << Endl;; 2153 }; 2154 }; 2155 }; 2156 Log() << kINFO << hLine << Endl;; 2157 Log() << kINFO << Endl;; 2158 Log() << kINFO << ""Testing efficiency compared to training efficiency (overtraining check)"" << Endl;; 2159 Log() << kINFO << hLine << Endl;; 2160 Log() << kINFO; 2161 << ""DataSet MVA Signal efficiency: from test sample (from training sample) ""; 2162 << Endl;; 2163 Log() << kINFO << ""Name: Method: @B=0.01 @B=0.10 @B=0.30 ""; 2164 << Endl;; 2165 Log() << kINFO << hLine << Endl;; 2166 for (Int_t k = 0; k < 2; k++) {; 2167 if (k == 1 && nmeth_used[k] > 0) {; 2168 Log() << kINFO << hLine << Endl;; 2169 Log() << kINFO << ""Input Variables: "" << Endl << hLine << Endl;; 2170 }; 2171 for (Int_t i = 0; i < nmeth_used[k]; i++) {; 2172 if (k == 1); 2173 mname[k][i].ReplaceAll(""Variable_"", """");; 2174 MethodBase *theMethod = dynamic_cast<MethodBase *>((*methods)[i]);; 2175 if (theMethod == 0); 2176 continue;; 2177 ; 2178 Log() << kINFO; 2179 << Form(""%-20s %-15s: %#1.3f (%#1.3f) %#1.3f (%#1.3f) %#1.3f (%#1.3f)"",; 2180 theMethod->fDataSetInfo.GetName(), (const char *)mname[k][i], eff01[k][i],; 2181 trainEff01[k][i], eff10[k][i], trainEff10[k][i], eff30[k][i], trainEff30[k][i]); 2182 << Endl;; 2183 }; 2184 }; 2185 Log() << kINFO << hLine << Endl;; 2186 Log() << kINFO << Endl;; 2187 ; 2188 if (gTools().CheckForSilentOption(GetOptions())); 2189 Log().InhibitOutput();; 2190 } // end fROC; 2191 }; 2192 if (!IsSilentFile()) {; 2193 std::list<TString> datasets;; 2194 for (Int_t k = 0; k < 2; k++) {; 2195 for (Int_t i = 0; i < nmeth_used[k]; i++) {; 2196 MethodBase *theMethod = dynamic_cast<MethodBase *>((*methods)[i]);; 2197 if (theMethod == 0); 2198 continue;; 2199 // write test/training trees; 2200 RootBaseDir()->cd(theMethod->fDataSetInfo.GetName());; 2201 if (std::find(datasets.begin(), datasets.end(), theMethod->fDataSetInfo.GetName()) == datasets.end",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:91838,Log,Log,91838,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodPyKeras (const TString &jobName, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  MethodPyKeras (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyKeras ();  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; void GetHelpMessage () const;  ; EBackendType GetKerasBackend ();  Get the Keras backend (can be: TensorFlow, Theano or CNTK) ;  ; TString GetKerasBackendName ();  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower, Double_t *errUpper);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt, Long64_t lastEvt, Bool_t logProgress);  get all the MVA values for the events of the current Data type ;  ; std::vector< Float_t > & GetRegressionValues ();  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  ; void Init ();  Initialization function called from MethodBase::SetupMethod() Note that option string are not yet filled with their values. ;  ; void ProcessOptions ();  Function processing the options This is called only when creating the method before training not when reading from XML file. ;  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ; Bool_t UseTFKeras () const;  ;  Public Member Fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html:1956,log,logProgress,1956,doc/master/classTMVA_1_1MethodPyKeras.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html,1,['log'],['logProgress']
Testability,"1 & ; rhs). Operator =. ; Definition at line 942 of file TF1.cxx. ◆ Paint(). void TF1::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this function with its current attributes. ; The function is going to be converted in an histogram and the corresponding histogram is painted. The painted histogram can be retrieved calling afterwards the method TF1::GetHistogram() ; Reimplemented from TObject.; Reimplemented in TF2, and TF3.; Definition at line 2953 of file TF1.cxx. ◆ Print(). void TF1::Print ; (; Option_t * ; option = """"); const. overridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 2897 of file TF1.cxx. ◆ RejectedPoint(). Bool_t TF1::RejectedPoint ; (; ). static . See TF1::RejectPoint above. ; Definition at line 3692 of file TF1.cxx. ◆ RejectPoint(). void TF1::RejectPoint ; (; Bool_t ; reject = kTRUE). static . Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ; This flag can be set by a user in a fitting function. The fgRejectPoint flag is reset by the TH1 and TGraph fitting functions. ; Definition at line 3683 of file TF1.cxx. ◆ ReleaseParameter(). void TF1::ReleaseParameter ; (; Int_t ; ipar). virtual . Release parameter number ipar during a fit operation. ; After releasing it, the parameter can vary freely in the fit. The parameter limits are reset to 0,0. ; Definition at line 3151 of file TF1.cxx. ◆ Save(). void TF1::Save ; (; Double_t ; xmin, . Double_t ; xmax, . Double_t ; ymin, . Double_t ; ymax, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Save values of function in array fSave. ; Reimplemented in TF2, and TF3.; Definition at line 3161 of file TF1.cxx. ◆ SavePrimitive(). void TF1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:107640,test,tested,107640,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['test'],['tested']
Testability,1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:82869,Test,Test,82869,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 55.5039 42.6809 0.0201245 0.00180935 43679.7 0; : 662 Minimum Test error found - save the configuration ; : 662 | 54.3572 42.2723 0.0202587 0.00183315 43417.9 0; : 663 Minimum Test error found - save the configuration ; : 663 | 53.566 41.7624 0.0203991 0.00186617 43166.5 0; : 664 Minimum Test error found - save the configuration ; : 664 | 52.9086 41.2393 0.0201899 0.00182999 43573.1 0; : 665 Minimum Test error found - save the configuration ; : 665 | 52.1886 40.6761 0.020181 0.00182542 43583.6 0; : 666 Minimum Test error found - save the configuration ; : 666 | 51.2956 40.6256 0.0201396 0.00182896 43690.5 0; : 667 Minimum Test error found - save the configuration ; : 667 | 50.7315 40.0752 0.0201193 0.00182284 43724.4 0; : 668 | 49.9429 40.0919 0.0200598 0.00176937 43738.7 1; : 669 Minimum Test error found - save the configuration ; : 669 | ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:85247,Test,Test,85247,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,1 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.6148 0.0201377 0.00175591 43521.3 1; : 834 Minimum Test error found - save the configuration ; : 834 | 7.55905 11.3034 0.0200924 0.00180566 43747.5 0; : 835 | 7.51796 11.4086 0.0200653 0.00174972 43678.7 1; : 836 | 7.6539 11.6743 0.0201454 0.00175856 43509.3 2; : 837 | 7.98319 11.3225 0.0201169 0.00175643 43571.8 3; : 838 | 7.66699 11.6657 0.0201662 0.00181142 43585.5 4; : 839 Minimum Test error found - save the configuration ; : 839 | 7.52525 10.9666 0.0202646 0.00182844 43392.9 0; : 840 | 7.48548 11.313 0.020051 0.00174873 43710.5 1; : 841 | 7.28024 11.1847 0.0200374 0.0017493 43744.4 2; : 842 | 7.18939 11.0082 0.0200397 0.00175322 43748.2 3; : 843 Minimum Test error found - save the configuration ; : 843 | 7.01613 10.4197 0.0201334 0.00182993 43707.5 0; : 844 | 6.83302 10.8151 0.020039 0.00176037 43767.1 1; : 845 | 6.97518 10.5462 0.0200409 0.00175987 43761.2 2; : 846 | 6.93317 10.5904 0.0200239 0.00176026 43802.8 3; : 847 | 6.86223 10.6492 0.0200268 0.00176058 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:101093,Test,Test,101093,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0.0203306 0.00176616 43093.1 13; : 998 | 3.41797 4.46788 0.0203618 0.00175568 42996.7 14; : 999 Minimum Test error found - save the configuration ; : 999 | 3.31412 4.14973 0.0202938 0.00187677 43438 0; : 1000 | 3.20867 4.17264 0.0201802 0.00179416 43511.4 1; : 1001 | 3.31742 4.17699 0.020287 0.00175118 43159.8 2; : 1002 | 3.35839 4.8143 0.0207434 0.00177731 42180.6 3; : 1003 Minimum Test error found - save the configuration ; : 1003 | 3.42381 4.04915 0.0202591 0.00184351 43441.4 0; : 1004 Minimum Test error found - save the configuration ; : 1004 | 3.27488 4.0384 0.0205262 0.00189376 42935.9 0; : 1005 | 3.09776 4.19224 0.0200956 0.00176781 43649.6 1; : 1006 Minimum Test error found - save the configuration ; : 1006 | 3.1757 3.91876 0.0201134 0.00183093 43757.7 0; : 1007 | 3.17471 4.33126 0.0203423 0.00178093 43100.3 1; : 1008 | 3.23752 4.46797 0.0204556 0.0017847 42847.4 2; : 1009 | 3.5099 4.04664 0.0203963 0.00177013 42950.3 3; : 1010 | 3.39993 4.32216 0.0201011 0.00176915 43639.8 4; : 1011 | 3.28002 4.35065 0.020045 0.00175269 43734.2 5; : 1012 | 3.24301 4.1309 0.0202482 0.00178612 43332 6; : 1013 | 3.47685 4.13785 0.0205714 0.00178247 42578.3 7; : 1014 | 3.38367 4.59532 0.0203076 0.00178189 43183.2 8; : 1015 Minimum Test error found - save the configuration ; : 1015 | 3.15343 3.81668 0.0204522 0.00185272 43011.9 0; : 1016 | 2.99441 4.01707 0.0202697 0.00183758 43402.5 1; : 1017 | 3.3956 4.54944 0.0201133 0.00176644 43604.1 2; : 1018 | 3.2792 3.85661 0.0202747 0.00181943 43348.2 3; : 1019 | 3.37748 4.22044 0.0208054 0.00183497 42170.8 4; : 1020 | 3.48034 4.07947 0.020447 0.00177824 42852.4 5; : 1021 | 3.50059 4.11275 0.020219 0.00176964 43361.9 6; : 1022 | 3.151,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:113596,Test,Test,113596,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"1 ; 542When a TGraph is drawn, the X-axis is drawn with increasing values from left to; 543right and the Y-axis from bottom to top. The two options `RX` and `RY` allow to; 544change this order. The option `RX` allows to draw the X-axis with increasing values; 545from right to left and the `RY` option allows to draw the Y-axis with increasing; 546values from top to bottom. The following example illustrate how to use these options.; 547 ; 548Begin_Macro(source); 549{; 550 auto c = new TCanvas();; 551 c->Divide(2,1);; 552 auto g = new TGraphErrors();; 553 g->SetTitle(""Simple Graph"");; 554 ; 555 g->SetPoint(0,-4,-3);; 556 g->SetPoint(1,1,1);; 557 g->SetPoint(2,2,1);; 558 g->SetPoint(3,3,4);; 559 g->SetPoint(4,5,5);; 560 ; 561 g->SetPointError(0,1.,2.);; 562 g->SetPointError(1,2,1);; 563 g->SetPointError(2,2,3);; 564 g->SetPointError(3,3,2);; 565 g->SetPointError(4,4,5);; 566 ; 567 g->GetXaxis()->SetNdivisions(520);; 568 ; 569 g->SetMarkerStyle(21);; 570 c->cd(1); gPad->SetGrid(1,1);; 571 g->Draw(""APL"");; 572 ; 573 c->cd(2); gPad->SetGrid(1,1);; 574 g->Draw(""A RX RY PL"");; 575}; 576End_Macro; 577 ; 578\anchor GrP7; 579### Graphs in logarithmic scale; 580 ; 581Like histograms, graphs can be drawn in logarithmic scale along X and Y. When; 582a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy(); 583the points building the graph are converted into logarithmic scale. But **only** the; 584points not the lines connecting them which stay linear. This can be clearly seen; 585on the following example:; 586 ; 587Begin_Macro(source); 588{; 589 // A graph with 3 points; 590 Double_t xmin = 750.;; 591 Double_t xmax = 1000;; 592 auto g = new TGraph(3);; 593 g->SetPoint(0,xmin,0.1);; 594 g->SetPoint(1,845,0.06504);; 595 g->SetPoint(2,xmax,0.008);; 596 ; 597 // The same graph with n points; 598 Int_t n = 10000;; 599 Double_t dx = (xmax-xmin)/n;; 600 Double_t x = xmin;; 601 auto g2 = new TGraph();; 602 for (Int_t i=0; i<n; i++) {; 603 g2->SetPoint(i, x, g->Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:22489,log,logarithmic,22489,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['log'],['logarithmic']
Testability,"1 > 0) ymin = TMath::Min(ymin,c1);; 7175 } else {; 7176 ymin = TMath::Min(ymin,c1);; 7177 }; 7178 if (Hoption.Error) {; 7179 if (fH->GetBinErrorOption() == TH1::kNormal); 7180 e1 = fH->GetBinError(i);; 7181 else; 7182 e1 = fH->GetBinErrorUp(i);; 7183 if (e1 > 0) nonNullErrors++;; 7184 ymax = TMath::Max(ymax,c1+e1);; 7185 if (fH->GetBinErrorOption() != TH1::kNormal); 7186 e1 = fH->GetBinErrorLow(i);; 7187 ; 7188 if (Hoption.Logy) {; 7189 if (c1-e1>0.01*TMath::Abs(c1)) ymin = TMath::Min(ymin,c1-e1);; 7190 } else {; 7191 ymin = TMath::Min(ymin,c1-e1);; 7192 }; 7193 }; 7194 if (Hoption.Func) {; 7195 xv[0] = fXaxis->GetBinCenter(i);; 7196 while ((f = (TObject*) next())) {; 7197 if (f->IsA() == TF1::Class()) {; 7198 f1 = (TF1*)f;; 7199 if (xv[0] < f1->GetXmin() || xv[0] > f1->GetXmax()) continue;; 7200 fval = f1->Eval(xv[0],0,0);; 7201 if (f1->GetMaximumStored() != -1111) fval = TMath::Min(f1->GetMaximumStored(), fval);; 7202 ymax = TMath::Max(ymax,fval);; 7203 if (Hoption.Logy) {; 7204 if (c1 > 0 && fval > 0.3*c1) ymin = TMath::Min(ymin,fval);; 7205 }; 7206 }; 7207 }; 7208 next.Reset();; 7209 }; 7210 allchan += c1;; 7211 }; 7212 if (!nonNullErrors) {; 7213 if (Hoption.Error) {; 7214 if (!Hoption.Mark && !Hoption.Line && !Hoption.Star && !Hoption.Curve) Hoption.Hist = 2;; 7215 Hoption.Error=0;; 7216 }; 7217 }; 7218 ; 7219 ; 7220 // Take into account maximum , minimum; 7221 ; 7222 if (Hoption.Logy && ymin <= 0) {; 7223 if (ymax >= 1) ymin = TMath::Max(.005,ymax*1e-10);; 7224 else ymin = 0.001*ymax;; 7225 }; 7226 ; 7227 Double_t xm = ymin;; 7228 if (maximum) ymax = fH->GetMaximumStored();; 7229 if (minimum) xm = fH->GetMinimumStored();; 7230 if (Hoption.Logy && xm < 0) {; 7231 Error(where, ""log scale requested with a negative argument (%f)"", xm);; 7232 return 0;; 7233 } else if (Hoption.Logy && xm>=0 && ymax==0) { // empty histogram in log scale; 7234 ymin = 0.01;; 7235 ymax = 10.;; 7236 } else {; 7237 ymin = xm;; 7238 }; 7239 ; 7240 if (ymin >= ymax) {; 7241 if (Hoption.Log",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:261185,Log,Logy,261185,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability,"1 Double_t s = S->GetBinContent( bin+1 )/Double_t(nS);; 152 Double_t b = B->GetBinContent( bin+1 )/Double_t(nB);; 153 // separation; 154 if (s + b > 0) separation += (s - b)*(s - b)/(s + b);; 155 }; 156 separation *= (0.5*intBin);; 157 }; 158 else {; 159 Log() << kWARNING << ""<GetSeparation> histograms with zero entries: ""; 160 << nS << "" : "" << nB << "" cannot compute separation""; 161 << Endl;; 162 separation = 0;; 163 }; 164 ; 165 return separation;; 166}; 167 ; 168////////////////////////////////////////////////////////////////////////////////; 169/// compute ""separation"" defined as; 170/// \f[; 171/// <s2> = \frac{1}{2} \int_{-\infty}^{+\infty} \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; 172/// \f]; 173 ; 174Double_t TMVA::Tools::GetSeparation( const PDF& pdfS, const PDF& pdfB ) const; 175{; 176 Double_t xmin = pdfS.GetXmin();; 177 Double_t xmax = pdfS.GetXmax();; 178 // sanity check; 179 if (xmin != pdfB.GetXmin() || xmax != pdfB.GetXmax()) {; 180 Log() << kFATAL << ""<GetSeparation> Mismatch in PDF limits: ""; 181 << xmin << "" "" << pdfB.GetXmin() << xmax << "" "" << pdfB.GetXmax() << Endl;; 182 }; 183 ; 184 Double_t separation = 0;; 185 Int_t nstep = 100;; 186 Double_t intBin = (xmax - xmin)/Double_t(nstep);; 187 for (Int_t bin=0; bin<nstep; bin++) {; 188 Double_t x = (bin + 0.5)*intBin + xmin;; 189 Double_t s = pdfS.GetVal( x );; 190 Double_t b = pdfB.GetVal( x );; 191 // separation; 192 if (s + b > 0) separation += (s - b)*(s - b)/(s + b);; 193 }; 194 separation *= (0.5*intBin);; 195 ; 196 return separation;; 197}; 198 ; 199////////////////////////////////////////////////////////////////////////////////; 200/// sanity check; 201 ; 202void TMVA::Tools::ComputeStat( const std::vector<TMVA::Event*>& events, std::vector<Float_t>* valVec,; 203 Double_t& meanS, Double_t& meanB,; 204 Double_t& rmsS, Double_t& rmsB,; 205 Double_t& xmin, Double_t& xmax,; 206 Int_t signalClass, Bool_t norm ); 207{; 208 if (0 == valVec); 209 Log() << kFATAL << ""<Tools::ComputeStat> value vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:6161,Log,Log,6161,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"1 Log() << kDEBUG << ""(after possible flattening of arrays):"" << Endl;; 1012 ; 1013 ; 1014 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 1015 Log() << kDEBUG //<< Form(""[%s] : "",dsi.GetName()); 1016 << "" ""; 1017 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1018 << "" -- number of events : ""; 1019 << std::setw(5) << eventCounts[cl].nEvBeforeCut; 1020 << "" / sum of weights: "" << std::setw(5) << eventCounts[cl].nWeEvBeforeCut << Endl;; 1021 }; 1022 ; 1023 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 1024 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1025 << "" "" << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1026 <<"" tree -- total number of entries: ""; 1027 << std::setw(5) << dataInput.GetEntries(dsi.GetClassInfo(cl)->GetName()) << Endl;; 1028 }; 1029 ; 1030 if (fScaleWithPreselEff); 1031 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1032 << ""\tPreselection: (will affect number of requested training and testing events)"" << Endl;; 1033 else; 1034 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1035 << ""\tPreselection: (will NOT affect number of requested training and testing events)"" << Endl;; 1036 ; 1037 if (dsi.HasCuts()) {; 1038 for (UInt_t cl = 0; cl< dsi.GetNClasses(); cl++) {; 1039 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" "" << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1040 << "" requirement: \"""" << dsi.GetClassInfo(cl)->GetCut() << ""\"""" << Endl;; 1041 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 1042 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 1043 << "" -- number of events passed: ""; 1044 << std::setw(5) << eventCounts[cl].nEvAfterCut; 1045 << "" / sum of weights: "" << std::setw(5) << eventCounts[cl].nWeEvAfterCut << Endl;; 1046 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 1047 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:43965,test,testing,43965,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,"['Log', 'test']","['Log', 'testing']"
Testability,"1 Log() << kINFO << Endl;; 2082 ; 2083 } else {; 2084 // Binary classification; 2085 if (fROC) {; 2086 Log().EnableOutput();; 2087 gConfig().SetSilent(kFALSE);; 2088 Log() << Endl;; 2089 TString hLine = ""------------------------------------------------------------------------------------------""; 2090 ""-------------------------"";; 2091 Log() << kINFO << ""Evaluation results ranked by best signal efficiency and purity (area)"" << Endl;; 2092 Log() << kINFO << hLine << Endl;; 2093 Log() << kINFO << ""DataSet MVA "" << Endl;; 2094 Log() << kINFO << ""Name: Method: ROC-integ"" << Endl;; 2095 ; 2096 // Log() << kDEBUG << ""DataSet MVA Signal efficiency at bkg eff.(error):; 2097 // | Sepa- Signifi- "" << Endl; Log() << kDEBUG << ""Name: Method: @B=0.01; 2098 // @B=0.10 @B=0.30 ROC-integ ROCCurve| ration: cance: "" << Endl;; 2099 Log() << kDEBUG << hLine << Endl;; 2100 for (Int_t k = 0; k < 2; k++) {; 2101 if (k == 1 && nmeth_used[k] > 0) {; 2102 Log() << kINFO << hLine << Endl;; 2103 Log() << kINFO << ""Input Variables: "" << Endl << hLine << Endl;; 2104 }; 2105 for (Int_t i = 0; i < nmeth_used[k]; i++) {; 2106 TString datasetName = itrMap->first;; 2107 TString methodName = mname[k][i];; 2108 ; 2109 if (k == 1) {; 2110 methodName.ReplaceAll(""Variable_"", """");; 2111 }; 2112 ; 2113 MethodBase *theMethod = dynamic_cast<MethodBase *>(GetMethod(datasetName, methodName));; 2114 if (theMethod == 0) {; 2115 continue;; 2116 }; 2117 ; 2118 TMVA::DataSet *dataset = theMethod->Data();; 2119 TMVA::Results *results = dataset->GetResults(methodName, Types::kTesting, this->fAnalysisType);; 2120 std::vector<Bool_t> *mvaResType =; 2121 dynamic_cast<ResultsClassification *>(results)->GetValueVectorTypes();; 2122 ; 2123 Double_t rocIntegral = 0.0;; 2124 if (mvaResType->size() != 0) {; 2125 rocIntegral = GetROCIntegral(datasetName, methodName);; 2126 }; 2127 ; 2128 if (sep[k][i] < 0 || sig[k][i] < 0) {; 2129 // cannot compute separation/significance -> no MVA (usually for Cuts); 2130 Log() << kINFO << Form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:88731,Log,Log,88731,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,3,['Log'],['Log']
Testability,"1 assert( kAsymError == fErrorType );; 482 assert( !fData.empty() && fDataPtr );; 483 assert( !fDataErrorHigh.empty() && fDataErrorHighPtr );; 484 assert( !fDataErrorLow.empty() && fDataErrorLowPtr );; 485 assert( fDataError.empty() && !fDataErrorPtr );; 486 assert( !fCoordErrors.empty() && fCoordErrors.size() == 1 );; 487 assert( !fCoordErrorsPtr.empty() && fCoordErrorsPtr.size() == 1 && fCoordErrorsPtr[0] );; 488 assert( &fCoordErrors[0].front() == fCoordErrorsPtr[0] );; 489 ; 490 fData[ fNPoints ] = y;; 491 fCoordErrors[0][ fNPoints ] = ex;; 492 fDataErrorHigh[ fNPoints ] = eyh;; 493 fDataErrorLow[ fNPoints ] = eyl;; 494 ; 495 FitData::Add( x );; 496 fSumContent += y;; 497 if (y != 0 || eyl != 1.0 || eyh != 1.0) fSumError2 += (eyl+eyh)*(eyl+eyh)/4;; 498 ; 499 }; 500 ; 501 /**; 502 add multi-dim coordinate data with only value; 503 */; 504 void BinData::Add( const double* x, double val ); 505 {; 506 assert( kNoError == fErrorType );; 507 ; 508 assert( !fData.empty() && fDataPtr );; 509 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 510 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 511 assert( fDataError.empty() && !fDataErrorPtr );; 512 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 513 ; 514 fData[ fNPoints ] = val;; 515 ; 516 FitData::Add( x );; 517 fSumContent += val;; 518 }; 519 ; 520 /**; 521 add multi-dim coordinate data with only error in value; 522 The class stores internally the inverse of the error in this case; 523 */; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 532 ; 533 fData[ fNPoints ] = val;; 534 fDataError[ fNPoints ] = (eval != 0.0) ? 1.0/eval : 0.0;; 535 ; 536 FitData::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:15442,assert,assert,15442,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"1 for (auto i = 0; i < 3; i++); 1812 if (TMath::Abs(tr[i] - otr[i]) > 1.E-10); 1813 return kFALSE;; 1814 const Double_t *rot = GetRotationMatrix();; 1815 const Double_t *orot = other.GetRotationMatrix();; 1816 for (auto i = 0; i < 9; i++); 1817 if (TMath::Abs(rot[i] - orot[i]) > 1.E-10); 1818 return kFALSE;; 1819 return kTRUE;; 1820}; 1821 ; 1822////////////////////////////////////////////////////////////////////////////////; 1823/// Composition; 1824 ; 1825TGeoCombiTrans &TGeoCombiTrans::operator*=(const TGeoMatrix &right); 1826{; 1827 Multiply(&right);; 1828 return *this;; 1829}; 1830 ; 1831TGeoCombiTrans TGeoCombiTrans::operator*(const TGeoMatrix &right) const; 1832{; 1833 TGeoHMatrix h = *this;; 1834 h *= right;; 1835 return h;; 1836}; 1837 ; 1838////////////////////////////////////////////////////////////////////////////////; 1839/// destructor; 1840 ; 1841TGeoCombiTrans::~TGeoCombiTrans(); 1842{; 1843 if (fRotation) {; 1844 if (TestBit(TGeoMatrix::kGeoMatrixOwned) && !fRotation->IsRegistered()); 1845 delete fRotation;; 1846 }; 1847}; 1848 ; 1849////////////////////////////////////////////////////////////////////////////////; 1850/// Reset translation/rotation to identity; 1851 ; 1852void TGeoCombiTrans::Clear(Option_t *); 1853{; 1854 if (IsTranslation()) {; 1855 ResetBit(kGeoTranslation);; 1856 memset(fTranslation, 0, kN3);; 1857 }; 1858 if (fRotation) {; 1859 if (TestBit(kGeoMatrixOwned)); 1860 delete fRotation;; 1861 fRotation = nullptr;; 1862 }; 1863 ResetBit(kGeoRotation);; 1864 ResetBit(kGeoTranslation);; 1865 ResetBit(kGeoMatrixOwned);; 1866}; 1867 ; 1868////////////////////////////////////////////////////////////////////////////////; 1869/// Return a temporary inverse of this.; 1870 ; 1871TGeoHMatrix TGeoCombiTrans::Inverse() const; 1872{; 1873 TGeoHMatrix h;; 1874 h = *this;; 1875 h.ResetBit(kGeoRegistered);; 1876 Bool_t is_tr = IsTranslation();; 1877 Bool_t is_rot = IsRotation();; 1878 Double_t tr[3];; 1879 Double_t newrot[9];; 1880 const Double_t *ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:64544,Test,TestBit,64544,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,2,['Test'],['TestBit']
Testability,"1 of file GSLMultiRootFinder.cxx. ◆ GetGSLType(). const gsl_multiroot_fsolver_type * ROOT::Math::GetGSLType ; (; GSLMultiRootFinder::EType ; type). Definition at line 183 of file GSLMultiRootFinder.cxx. ◆ getSum(). int ROOT::Math::getSum ; (; const int * ; x, . int ; n . ). Definition at line 534 of file GoFTest.cxx. ◆ human_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::human_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 197 of file GenVectorIO.h. ◆ Lmag(). template<class A , class T > . T ROOT::Math::Lmag ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 308 of file Functions.h. ◆ Lmag2(). template<class A , class T > . T ROOT::Math::Lmag2 ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 284 of file Functions.h. ◆ log1p(). double ROOT::Math::log1p ; (; double ; x). inline . declarations for functions which are not implemented by some compilers ; log(1+x) with error cancelation when x is small ; Definition at line 98 of file Math.h. ◆ machine_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::machine_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 208 of file GenVectorIO.h. ◆ Mag(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 261 of file Functions.h. ◆ Mag2(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag2 ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 238 of file Functions.h. ◆ minfunction(). double ROOT::Math::minfunction ; (; const std::vector< double > & ; x). function to return the function values at point x ; Definition at line 19 of file RMinimizer.cxx. ◆ mingradfunction(). TVectorD ROOT::Math::mingradfunction ; (; TVectorD ; y). function to return the gradient values at point y ; Definition at line 25 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Math.html:153660,log,log,153660,doc/v632/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Math.html,1,['log'],['log']
Testability,"1 virtual Double_t GetProb() const;; 572 virtual Int_t GetQuantiles(Int_t n, Double_t *xp, const Double_t *p);; 573 virtual Double_t GetRandom(TRandom * rng = nullptr, Option_t * opt = nullptr);; 574 virtual Double_t GetRandom(Double_t xmin, Double_t xmax, TRandom * rng = nullptr, Option_t * opt = nullptr);; 575 virtual void GetRange(Double_t &xmin, Double_t &xmax) const;; 576 virtual void GetRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const;; 577 virtual void GetRange(Double_t &xmin, Double_t &ymin, Double_t &zmin, Double_t &xmax, Double_t &ymax, Double_t &zmax) const;; 578 virtual Double_t GetSave(const Double_t *x);; 579 virtual Double_t GetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const;; 580 virtual Double_t GetXmin() const; 581 {; 582 return fXmin;; 583 }; 584 virtual Double_t GetXmax() const; 585 {; 586 return fXmax;; 587 }; 588 TAxis *GetXaxis() const ;; 589 TAxis *GetYaxis() const ;; 590 TAxis *GetZaxis() const ;; 591 virtual Double_t GetVariable(const TString &name); 592 {; 593 return (fFormula) ? fFormula->GetVariable(name) : 0;; 594 }; 595 virtual Double_t GradientPar(Int_t ipar, const Double_t *x, Double_t eps = 0.01);; 596 template <class T>; 597 T GradientPar(Int_t ipar, const T *x, Double_t eps = 0.01);; 598 template <class T>; 599 T GradientParTempl(Int_t ipar, const T *x, Double_t eps = 0.01);; 600 ; 601 virtual void GradientPar(const Double_t *x, Double_t *grad, Double_t eps = 0.01);; 602 template <class T>; 603 void GradientPar(const T *x, T *grad, Double_t eps = 0.01);; 604 template <class T>; 605 void GradientParTempl(const T *x, T *grad, Double_t eps = 0.01);; 606 ; 607 virtual void InitArgs(const Double_t *x, const Double_t *params);; 608 static void InitStandardFunctions();; 609 virtual Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 1.e-12);; 610 virtual Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:24499,log,logx,24499,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['log'],['logx']
Testability,"1) const; static voidTSeqCollection::QSort(TObject** a, Int_t first, Int_t last); static voidTSeqCollection::QSort(TObject** a, TObject** b, Int_t first, Int_t last); Int_tRank(const TObject* obj) const; virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBtree.html:14267,Test,TestBit,14267,root/html526/TBtree.html,https://root.cern,https://root.cern/root/html526/TBtree.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(dm_d);; h2->Fill(dm_d,rpd0_t/0.029979*1.8646/ptd0_d);; ; return kTRUE;; }; ; ; ; void h1analysisProxy_SlaveTerminate(); {; // nothing to be done; printf(""Terminate (slave) h1analysis\n"");; }; ; ; void h1analysisProxy_Terminate(); {; printf(""Terminate (final) h1analysis\n"");; ; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == 0 || h2 == 0) {; Error(""Terminate"", ""hdmd = %p , h2 = %p"", hdmd, h2);; return;; }; ; //create the canvas for the h1analysis fit; gStyle->SetOptFit();; TCanvas *c1 = new TCanvas(""c1"",""h1analysis analysis"",10,10,800,600);; c1->SetBottomMargin(0.15);; hdmd->GetXaxis()->SetTitle(""m_{K#pi#pi} - m_{K#pi}[GeV/c^{2}]"");; hdmd->GetXaxis()->SetTitleOffset(1.4);; ; //fit histogram hdmd with function f5 using the log-likelihood option; TF1 *f5 = new TF1(""f5"",fdm5,0.139,0.17,5);; f5->SetParameters(1000000, .25, 2000, .1454, .001);; hdmd->Fit(""f5"",""lr"");; ; //create the canvas for tau d0; gStyle->SetOptFit(0);; gStyle->SetOptStat(1100);; TCanvas *c2 = new TCanvas(""c2"",""tauD0"",100,100,800,600);; c2->SetGrid();; c2->SetBottomMargin(0.15);; ; // Project slices of 2-d histogram h2 along X , then fit each slice; // with function f2 and make a histogram for each fit parameter; // Note that the generated histograms are added to the list of objects; // in the current directory.; TF1 *f2 = new TF1(""f2"",fdm2,0.139,0.17,2);; f2->SetParameters(10000, 10);; h2->FitSlicesX(f2,0,-1,1,""qln"");; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; h2_1->GetXaxis()->SetTitle(""#tau[ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; TLine *line = new TLine(0,0,0,c2->GetUymax());; line->Draw();; ; // Have the number of entries on the first histogram (to cross check when running; // with entry lists); TPaveStat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisProxy_8C.html:9575,log,log-likelihood,9575,doc/master/h1analysisProxy_8C.html,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html,1,['log'],['log-likelihood']
Testability,"1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); static voidSetUpSSL(const char* cafile, const char* capath, const char* ucert, const char* ukey); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSSLSocket.html:7618,Test,TestBit,7618,root/html534/TSSLSocket.html,https://root.cern,https://root.cern/root/html534/TSSLSocket.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual Int_tTObject::Read(const char* name); virtual voidTObjArray::RecursiveRemove(TObject* obj); virtual TObject*TObjArray::Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TObjArray::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); virtual voidTObjArray::RemoveRange(Int_t idx1, Int_t idx2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); TGeoNavigator*SetCurrentNavigator(Int_t inav); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTObjArray::SetLast(Int_t last); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTObjArray::Sort(Int_t upto = kMaxInt); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TObject*TObjArray::UncheckedAt(Int_t i) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoNavigatorArray.html:8598,Test,TestBit,8598,root/html532/TGeoNavigatorArray.html,https://root.cern,https://root.cern/root/html532/TGeoNavigatorArray.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTSpline::SetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TSpline1TSpline1(const TMVA::TSpline1&); TMVA::TSpline1TSpline1(const TString& title, TGraph* theGraph); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__TSpline1.html:6595,Test,TestBit,6595,root/html530/TMVA__TSpline1.html,https://root.cern,https://root.cern/root/html530/TMVA__TSpline1.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTSpline::SetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TSpline2TSpline2(const TMVA::TSpline2&); TMVA::TSpline2TSpline2(const TString& title, TGraph* theGraph); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__TSpline2.html:6567,Test,TestBit,6567,root/html530/TMVA__TSpline2.html,https://root.cern,https://root.cern/root/html530/TMVA__TSpline2.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveArrowEditor(const TGWindow* p = 0, Int_t width = 170, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveArrowEditor.html:14650,Test,TestBit,14650,root/html602/TEveArrowEditor.html,https://root.cern,https://root.cern/root/html602/TEveArrowEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveShapeEditor(const TGWindow* p = 0, Int_t width = 170, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveShapeEditor.html:14683,Test,TestBit,14683,root/html602/TEveShapeEditor.html,https://root.cern,https://root.cern/root/html602/TEveShapeEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveTrackEditor(const TGWindow* p = 0, Int_t width = 170, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrackEditor.html:14632,Test,TestBit,14632,root/html602/TEveTrackEditor.html,https://root.cern,https://root.cern/root/html602/TEveTrackEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveTransEditor(const TGWindow* p = 0, Int_t width = 170, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTransEditor.html:14608,Test,TestBit,14608,root/html602/TEveTransEditor.html,https://root.cern,https://root.cern/root/html602/TEveTransEditor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidSpawnEditorClone(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveGedNameFrame(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame | kHorizontalFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGedNameFrame.html:14757,Test,TestBit,14757,root/html602/TEveGedNameFrame.html,https://root.cern,https://root.cern/root/html602/TEveGedNameFrame.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTBRIK::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPARA(); TPARA(const TPARA&); TPARA(const char* name, const char* title, const char* material, Float_t dx, Float_t dy, Float_t dz, Float_t alpha, Float_t theta, Float_t phi); voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPARA.html:6694,Test,TestBit,6694,root/html602/TPARA.html,https://root.cern,https://root.cern/root/html602/TPARA.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1);; 207 // When the interactive ROOT starts, it can automatically load some frequently; 208 // used includes. However, this introduces several overheads; 209 // -The initialisation takes more time; 210 // -Memory overhead when including <vector>; 211 // In $ROOTSYS/etc/system.rootrc, you can set the variable Rint.Includes to 0; 212 // to disable the loading of these includes at startup.; 213 // You can set the variable to 1 (default) to load only <iostream>, <string> and <DllImport.h>; 214 // You can set it to 2 to load in addition <vector> and <utility>; 215 // We strongly recommend setting the variable to 2 if your scripts include <vector>; 216 // and you execute your scripts multiple times.; 217 if (includes > 0) {; 218 TString code;; 219 code = ""#include <iostream>\n""; 220 ""#include <string>\n"" // for std::string std::iostream.; 221 ""#include <DllImport.h>\n"";// Defined R__EXTERN; 222 if (includes > 1) {; 223 code += ""#include <vector>\n""; 224 ""#include <utility>"";; 225 }; 226 ProcessLine(code, kTRUE);; 227 }; 228 }; 229 ; 230 // Load user functions; 231 const char *logon;; 232 logon = gEnv->GetValue(""Rint.Load"", (char*)nullptr);; 233 if (logon) {; 234 char *mac = gSystem->Which(TROOT::GetMacroPath(), logon, kReadPermission);; 235 if (mac); 236 ProcessLine(Form("".L %s"",logon), kTRUE);; 237 delete [] mac;; 238 }; 239 ; 240 // Execute logon macro; 241 ExecLogon();; 242 ; 243 // Save current interpreter context; 244 gCling->SaveContext();; 245 gCling->SaveGlobalsContext();; 246 ; 247 // Install interrupt and terminal input handlers; 248 TInterruptHandler *ih = new TInterruptHandler();; 249 ih->Add();; 250 SetSignalHandler(ih);; 251 ; 252 // Handle stdin events; 253 fInputHandler = new TTermInputHandler(0);; 254 fInputHandler->Add();; 255 ; 256 // Goto into raw terminal input mode; 257 char defhist[kMAXPATHLEN];; 258 snprintf(defhist, sizeof(defhist), ""%s/.root_hist"", gSystem->HomeDirectory());; 259 logon = gEnv->GetValue(""Rint.History"", defhist);; 260 // In the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:7710,log,logon,7710,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,2,['log'],['logon']
Testability,"1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TComplex.html:4231,Log,Log,4231,root/html602/TComplex.html,https://root.cern,https://root.cern/root/html602/TComplex.html,2,['Log'],['Log']
Testability,"1, . Double_t ; startx = 0, . Double_t ; starty = 0, . Double_t ; startz = 0 . ); const. Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ; Track each ray until exiting geometry, then shoot backwards from exiting point and compare boundary crossing points. ; Definition at line 588 of file TGeoVolume.cxx. ◆ CheckOverlaps(). void TGeoVolume::CheckOverlaps ; (; Double_t ; ovlp = 0.1, . Option_t * ; option = """" . ); const. Overlap checking tool. ; Check for illegal overlaps within a limit OVLP. Use option=""s[number]"" to force overlap checking by sampling volume with [number] points.; Ex: myVol->CheckOverlaps(0.01, ""s10000000""); // shoot 10000000 points; myVol->CheckOverlaps(0.01, ""s""); // shoot the default value of 1e6 points. Definition at line 611 of file TGeoVolume.cxx. ◆ CheckShape(). void TGeoVolume::CheckShape ; (; Int_t ; testNo, . Int_t ; nsamples = 10000, . Option_t * ; option = """" . ). Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ; Definition at line 651 of file TGeoVolume.cxx. ◆ CheckShapes(). void TGeoVolume::CheckShapes ; (; ). check for negative parameters in shapes. ; Definition at line 676 of file TGeoVolume.cxx. ◆ Class(). static TClass * TGeoVolume::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoVolume::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoVolume::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 256 of file TGeoVolume.h. ◆ CleanAll(). void TGeoVolume::CleanAll ; (; ). Clean data of the volume. ; Definition at line 659 of file TGeoVolume.cxx. ◆ ClearNodes(). void TGeoVolume::ClearNodes ; (; ). inline . Definition at line 95 of file TGeoVolume.h. ◆ ClearShape(). void TGeoVolume::ClearShape ; (; ). Clear the shape of this volume from the list held by the current manager. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:43485,Test,Tests,43485,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['Test'],['Tests']
Testability,"1, Option_t *option="""") constTGeoVolume; CheckShape(Int_t testNo, Int_t nsamples=10000, Option_t *option="""")TGeoVolume; CheckShapes()TGeoVolume; Class()TGeoVolumestatic; Class_Name()TGeoVolumestatic; Class_Version()TGeoVolumeinlinestatic; ClassName() constTObjectvirtual; CleanAll()TGeoVolume; Clear(Option_t *option="""") overrideTNamedvirtual; ClearNodes()TGeoVolumeinline; ClearShape()TGeoVolume; ClearThreadData() constTGeoVolumevirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneNodesAndConnect(TGeoVolume *newmother) constTGeoVolume; CloneVolume() constTGeoVolumevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Contains(const Double_t *point) constTGeoVolumeinline; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; CountNodes(Int_t nlevels=1000, Int_t option=0)TGeoVolume; CreateDummyMedium()TGeoVolumestatic; CreateThreadData(Int_t nthreads)TGeoVolumevirtual; DeclFileName()TGeoVolumeinlinestatic; Delete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume-members.html:1003,test,testNo,1003,doc/master/classTGeoVolume-members.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume-members.html,1,['test'],['testNo']
Testability,"1, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCountNodes(TGeoVolume* vol, Int_t level)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPainter.html:1628,test,testNo,1628,root/html530/TGeoPainter.html,https://root.cern,https://root.cern/root/html530/TGeoPainter.html,3,['test'],['testNo']
Testability,"1, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual Int_tCountVisibleNodes(); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualGeoPainter.html:1630,test,testNo,1630,root/html530/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html530/TVirtualGeoPainter.html,3,['test'],['testNo']
Testability,"1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); voidTString::Resize(Ssiz_t n); static Ssiz_tTString::ResizeIncrement(Ssiz_t ri = 16); virtual voidShowMembers(TMemberInspector&); virtual Int_tTString::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static TStringTString::UItoa(UInt_t value, Int_t base); static TStringTString::ULLtoa(ULong64_t value, Int_t base); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. const TStringfFullStr; Int_tfPos; Bool_tfReturnVoid; TPRegexpfSplitRe. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE); Constructor. Bool_t NextToken(); Get the next token, it is stored in this TString.; Returns true if new token is available, false otherwise. TStringToken(const TString& fullStr, const TString& splitRe, Bool_t retVoid = kFALSE). virtual ~TStringToken(); {}. Bool_t AtEnd() const; { return fPos >= fFullStr.Length(); }. » Author: Eddy Offermann 24/06/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStringToken.html:8241,Assert,AssertElement,8241,root/html534/TStringToken.html,https://root.cern,https://root.cern/root/html534/TStringToken.html,1,['Assert'],['AssertElement']
Testability,"1->Add(list2);; root[] list1->Print(""all""); tree1 file1; 0; 2; tree2 file2; 0; 3; The result is a TEntryList for a TChain of tree1 and tree2. If the second list was for the same TTree in the same file as the first list, the result would be as follows:; root[] TEntryList *list2_2 = new TEntryList(""list2_2"", ""list2_2"");; root[] list2_2->SetTree(""tree2"", ""file2"");; root[] list2_2->Enter(1);; root[] list2_2->Enter(2);; root[] list2->Add(list2_2);; root[] list2->Print(""all""); tree2 file2; 0; 1; 2; 3; 12.20.10.4 TEntryListFromFile; This is a special kind of TEntryList, used only when processing TChain objects (see the method TChain::SetEntryListFile()). It is used in the case, when the entry lists, corresponding to the trees of this chain, are stored in separate files. It allows to load the entry lists in memory one by one, keeping only the list for the currently processed tree loaded.; For more details on entry lists, see TEntryList, TEntryListBlock and TEntryListFromFile class descriptions, functions TChain::SetEntryList(), TChain::SetEntryListFile(), and the macro $ROOTSYS/test/stressEntryList.C.; 12.20.11 Filling a Histogram; The TTree::Draw method can also be used to fill a specific histogram. The syntax is:; root[] TFile *f = new TFile(""Event.root""); root[] T->Draw(""fNtrack >> myHisto""); root[] myHisto->Print(); TH1.Print Name= myHisto, Entries= 100, Total sum= 100; As we can see, this created a TH1, called myHisto. If you want to append more entries to the histogram, you can use this syntax:; root[] T->Draw(""fNtrack >>+ myHisto""); If you do not create a histogram ahead of time, ROOT will create one at the time of the Draw command (as is the case above). If you would like to draw the variable into a specific histogram where you, for example, set the range and bin number, you can define the histogram ahead of time and use it in the Draw command. The histogram has to be in the same directory as the tree.; root[] TH1 *h1 = new TH1(""h1"",""h1"",50,0.,150.);; root[] T->Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:628060,test,test,628060,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability,"1->GetMaximumStored() != -1111) fval = TMath::Min(f1->GetMaximumStored(), fval);; 7202 ymax = TMath::Max(ymax,fval);; 7203 if (Hoption.Logy) {; 7204 if (c1 > 0 && fval > 0.3*c1) ymin = TMath::Min(ymin,fval);; 7205 }; 7206 }; 7207 }; 7208 next.Reset();; 7209 }; 7210 allchan += c1;; 7211 }; 7212 if (!nonNullErrors) {; 7213 if (Hoption.Error) {; 7214 if (!Hoption.Mark && !Hoption.Line && !Hoption.Star && !Hoption.Curve) Hoption.Hist = 2;; 7215 Hoption.Error=0;; 7216 }; 7217 }; 7218 ; 7219 ; 7220 // Take into account maximum , minimum; 7221 ; 7222 if (Hoption.Logy && ymin <= 0) {; 7223 if (ymax >= 1) ymin = TMath::Max(.005,ymax*1e-10);; 7224 else ymin = 0.001*ymax;; 7225 }; 7226 ; 7227 Double_t xm = ymin;; 7228 if (maximum) ymax = fH->GetMaximumStored();; 7229 if (minimum) xm = fH->GetMinimumStored();; 7230 if (Hoption.Logy && xm < 0) {; 7231 Error(where, ""log scale requested with a negative argument (%f)"", xm);; 7232 return 0;; 7233 } else if (Hoption.Logy && xm>=0 && ymax==0) { // empty histogram in log scale; 7234 ymin = 0.01;; 7235 ymax = 10.;; 7236 } else {; 7237 ymin = xm;; 7238 }; 7239 ; 7240 if (ymin >= ymax) {; 7241 if (Hoption.Logy) {; 7242 if (ymax > 0) ymin = 0.001*ymax;; 7243 else {; 7244 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", ymax);; 7245 return 0;; 7246 }; 7247 }; 7248 else {; 7249 if (ymin > 0) {; 7250 ymin = 0;; 7251 ymax *= 2;; 7252 } else if (ymin < 0) {; 7253 ymax = 0;; 7254 ymin *= 2;; 7255 } else {; 7256 ymin = 0;; 7257 ymax = 1;; 7258 }; 7259 }; 7260 }; 7261 ; 7262 // In some cases, mainly because of precision issues, ymin and ymax could almost equal.; 7263 if (TMath::AreEqualRel(ymin,ymax,1E-15)) {; 7264 ymin = ymin*(1-1E-14);; 7265 ymax = ymax*(1+1E-14);; 7266 }; 7267 ; 7268 // take into account normalization factor; 7269 Hparam.allchan = allchan;; 7270 Double_t factor = allchan;; 7271 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 7272 if (allchan) factor /= allchan;; 7273 if (f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:262013,Log,Logy,262013,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,"['Log', 'log']","['Logy', 'log']"
Testability,"1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,1.0};; 2440 Int_t theNpoints = theGraph->GetN();; 2441 Double_t *theX = theGraph->GetX();; 2442 Double_t *theY = theGraph->GetY();; 2443 Double_t *theEXlow = theGraph->GetEXlow(); if (!theEXlow) return;; 2444 Double_t *theEYlow = theGraph->GetEYlow(); if (!theEYlow) return;; 2445 Double_t *theEXhigh = theGraph->GetEXhigh(); if (!theEXhigh) return;; 2446 Double_t *theEYhigh = theGraph->GetEYhigh(); if (!theEYhigh) return;; 2447 ; 2448 if (strchr(option,'X') || strchr(option,'x')) {PaintGraphSimple(theGraph, option); return;}; 2449 Bool_t brackets = kFALSE;; 2450 Bool_t braticks = kFALSE;; 2451 if (strstr(option,""||"") || strstr(option,""[]"")) {; 2452 brackets = kTRUE;; 2453 if (strstr(option,""[]"")) braticks = kTRUE;; 2454 }; 2455 Bool_t endLines = kTRUE;; 2456 if (strchr(option,'z')) endLines = kFALSE;; 2457 if (strchr(option,'Z')) endLines = kFALSE;; 2458 const char *arrowOpt = nullptr;; 2459 if (strchr(option,'>')) arrowOpt = "">"";; 2460 if (strstr(option,""|>"")) arrowOpt = ""|>"";; 2461 ; 2462 Bool_t axis = kFALSE;; 2463 if (strchr(option,'a')) axis = kTRUE;; 2464 if (strchr(option,'A')) axis = kTRUE;; 2465 if (axis) PaintGraphSimple(theGraph, option);; 2466 ; 2467 Bool_t option0 = kFALSE;; 2468 Bool_t option2 = kFALSE;; 2469 Bool_t option3 = kFALSE;; 2470 Bool_t option4 = kFALSE;; 2471 Bool_t option5 = kFALSE;; 2472 if (strchr(option,'0')) option0 = kTRUE;; 2473 if (strchr(option,'2')) option2 = kTRUE;; 2474 if (strchr(option,'3')) option3 = kTRUE;; 2475 if (strchr(option,'4')) {option3 = kTRUE; option4 = kTRUE;}; 2476 if (strchr(option,'5')) {option2 = kTRUE; option5 = kTRUE;}; 2477 ; 2478 // special flags in case of ""reverse plot"" and ""log scale""; 2479 Bool_t xrevlog = kFALSE;; 2480 Bool_t yrevlog = kFALSE;; 2481 if (strstr(option,""-N"")) xrevlog = kTRUE; // along X; 2482 if (strstr(option,""-M"")) yrevlog = kTRUE; // along Y; 2483 ; 2484 if (option3) {; 2485 xline.resize(2*theNpoints);; 2486 yline.resize(2*theNpoints)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:88763,log,log,88763,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['log'],['log']
Testability,1.7 nsig=167.982 sig1frac=0.776177; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 570; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 560; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 550; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 540; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 530; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-820.086) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.699182 a1=-0.532303 mean=4.90748 nbkg=130.722 nsig=155.109 sig1frac=0.843514; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 520; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 510; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-814.421) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.729962 a1=-0.49802 mean=4.92039 nbkg=146.276 nsig=144.44 sig1frac=0.620699; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 500; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 490; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 480; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 470; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 460; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 450; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 440; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 430; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-926.481) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.653979 a1=-0.469539 mean=5.00078 nbkg=160.963 nsig=166.526 sig1frac=0.628924; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Gener,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:18185,log,log,18185,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"1.UnitMatrix();; TMatrixD Ht(TMatrixDBase::kTransposed,H);; Bool_t ok = kTRUE;; ok &= VerifyMatrixIdentity(Ht * H,E1,kTRUE,1.0e-13);; ok &= VerifyMatrixIdentity(H * Ht,E1,kTRUE,1.0e-13);; TMatrixD E2(nRow,nRow); E2.UnitMatrix();; TMatrixD Qt(u);; TMatrixD Q(TMatrixDBase::kTransposed,Qt);; ok &= VerifyMatrixIdentity(Q * Qt,E2,kTRUE,1.0e-13);; TMatrixD C(nRow,nCol);; TMatrixDDiag(C) = sDiag;; for (Int_t i = 0; i < nCol-1; i++); C(i,i+1) = oDiag(i+1);; TMatrixD A = Q*C*Ht;; ok &= VerifyMatrixIdentity(A,a,kTRUE,1.0e-13);. Bool_t Diagonalize(TMatrixD& v, TMatrixD& u, TVectorD& sDiag, TVectorD& oDiag); Diagonalizes in an iterative fashion the bidiagonal matrix C as described through; sDiag and oDiag, so that S' = U'^T . C . V' is diagonal. U' and V' are orthogonal; matrices . Output:; v - (n x n) - matrix H . V' in the (n x n) part of v; u - (m x m) - matrix U'^T . Q^T; sDiag - diagonal of the (m x n) S'. return convergence flag: 0 -> no convergence; 1 -> convergence. Test code for the output:; const Int_t nRow = v.GetNrows();; const Int_t nCol = v.GetNcols();; TMatrixD tmp = v; tmp.ResizeTo(nCol,nCol);; TMatrixD Vprime = Ht*tmp;; TMatrixD Vprimet(TMatrixDBase::kTransposed,Vprime);; TMatrixD Uprimet = u*Q;; TMatrixD Uprime(TMatrixDBase::kTransposed,Uprimet);; TMatrixD Sprime(nRow,nCol);; TMatrixDDiag(Sprime) = sDiag;; ok &= VerifyMatrixIdentity(Uprimet * C * Vprime,Sprime,kTRUE,1.0e-13);; ok &= VerifyMatrixIdentity(Q*Uprime * Sprime * Vprimet * Ht,a,kTRUE,1.0e-13);. void Diag_1(TMatrixD& v, TVectorD& sDiag, TVectorD& oDiag, Int_t k); Step 1 in the matrix diagonalization. void Diag_2(TVectorD& sDiag, TVectorD& oDiag, Int_t k, Int_t l); Step 2 in the matrix diagonalization. void Diag_3(TMatrixD& v, TMatrixD& u, TVectorD& sDiag, TVectorD& oDiag, Int_t k, Int_t l); Step 3 in the matrix diagonalization. void SortSingular(TMatrixD& v, TMatrixD& u, TVectorD& sDiag); Perform a permutation transformation on the diagonal matrix S', so that; matrix S'' = U''^T . S' . V'' has diagonal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompSVD.html:10639,Test,Test,10639,root/html528/TDecompSVD.html,https://root.cern,https://root.cern/root/html528/TDecompSVD.html,6,['Test'],['Test']
Testability,"1.cxx:8440; TH1::SetXTitlevirtual void SetXTitle(const char *title)Definition TH1.h:419; TH1::DrawNormalizedvirtual TH1 * DrawNormalized(Option_t *option="""", Double_t norm=1) constDraw a normalized copy of this histogram.Definition TH1.cxx:3144; TH1::EStatOverflowsEStatOverflowsEnumeration specifying the way to treat statoverflow.Definition TH1.h:80; TH1::kNeutral@ kNeutralAdapt to the global flag.Definition TH1.h:83; TH1::kIgnore@ kIgnoreOverride global flag ignoring the overflows.Definition TH1.h:81; TH1::kConsider@ kConsiderOverride global flag considering the overflows.Definition TH1.h:82; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::AddDirectorystatic void AddDirectory(Bool_t add=kTRUE)Sets the flag controlling the automatic add of histograms in memory.Definition TH1.cxx:1294; TH1::GetBinContentvirtual Double_t GetBinContent(Int_t bin, Int_t) constDefinition TH1.h:266; TH1::EStatusBitsEStatusBitsTH1 status bits.Definition TH1.h:164; TH1::kLogX@ kLogXX-axis in log scale.Definition TH1.h:168; TH1::kIsAverage@ kIsAverageBin contents are average (used by Add)Definition TH1.h:171; TH1::kNoTitle@ kNoTitleDon't draw the histogram title.Definition TH1.h:170; TH1::kUserContour@ kUserContourUser specified contour levels.Definition TH1.h:166; TH1::kNoStats@ kNoStatsDon't draw stats box.Definition TH1.h:165; TH1::kIsZoomed@ kIsZoomedBit set when zooming on Y axis.Definition TH1.h:169; TH1::kAutoBinPTwo@ kAutoBinPTwodifferent than 1.Definition TH1.h:174; TH1::kIsNotW@ kIsNotWHistogram is forced to be not weighted even when the histogram is filled with weighted.Definition TH1.h:172; TH1::kIsHighlight@ kIsHighlightbit set if histo is highlightDefinition TH1.h:175; TH1::SetContourLevelvirtual void SetContourLevel(Int_t level, Double_t value)Set value for one contour level.Definition TH1.cxx:8522; TH1::CanExtendAllAxesvirtual Bool_t CanExtendAllAxes() constReturns true if all axes are extendable.Definition TH1.cxx:6636; TH1::fDirectoryTDirectory",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:60127,log,log,60127,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['log'],['log']
Testability,"10):FitMethod=GA:PopSize=300:Cycles=3:Steps=20:Trim=True:SaveBestGen=1"" );; if (Use[""PDEFoam""]) // PDE-Foam approach; factory->BookMethod( dataloader, TMVA::Types::kPDEFoam, ""PDEFoam"", ""!H:!V:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:Nmin=100:Kernel=None:Compress=T"" );; ; ; if (Use[""DL_CPU""]) {; TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_CPU"", nnOptions);; }; if (Use[""DL_GPU""]) {; TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_GPU"", nnOptions);; }; ; ; // Train MVAs using the set of training events; factory->TrainAllMethods();; ; // Evaluate all MVAs using the set of test events; factory->TestAllMethods();; ; // Evaluate and compare performance of all configured MVAs; factory->EvaluateAllMethods();; ; // --------------------------------------------------------------; ; // Save the output; outputFile->Close();; ; std::cout << ""==> Wrote root file: "" << outputFile->GetName() << std::endl;; std::cout << ""==> TMVAMulticlass is done!"" << std::endl;; ; delete factory;; delete dataloader;; ; // Launch the GUI fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:36563,Test,TestRepetitions,36563,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Test'],['TestRepetitions']
Testability,"10000 events); : Elapsed time for evaluation of 10000 events: 0.00971 sec ; : Creating xml weight file: dataset/weights/TMVAClassificationCategory_LikelihoodCat.weights.xml; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> Fisher : Ranking result (top variable is best ranked); : -------------------------------; : Rank : Variable : Discr. power; : -------------------------------; : 1 : var4 : 1.446e-01; : 2 : var3 : 7.153e-02; : 3 : var2 : 2.447e-02; : 4 : var1 : 1.243e-02; : -------------------------------; <HEADER> Likelihood : Ranking result (top variable is best ranked); : -----------------------------------; : Rank : Variable : Delta Separation; : -----------------------------------; : 1 : var4 : 1.148e-01; : 2 : var3 : 5.071e-02; : 3 : var2 : 2.758e-02; : 4 : var1 : 1.990e-02; : -----------------------------------; : No variable ranking supplied by classifier: FisherCat; : No variable ranking supplied by classifier: LikelihoodCat; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: dataset/weights/TMVAClassificationCategory_Fisher.weights.xml; : Reading weight file: dataset/weights/TMVAClassificationCategory_Likelihood.weights.xml; : Reading weight file: dataset/weights/TMVAClassificationCategory_FisherCat.weights.xml; : Recreating sub-classifiers from XML-file ; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_1_dsi] : Added class ""Background""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Fisher_2_dsi] : Added class ""Background""; : Reading weight file: dataset/weights/TMVAClassificationCategory_LikelihoodCat.weights.xml; : Recreating sub-classifiers from XML-file ; <HEADER> DataSetInfo : [Category_Likelihood_1_dsi] : Added class ""Signal""; <HEADER> DataSetInfo : [Category_Likelihood_1_dsi] : Added class ""Background""; <HEADER> Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:21500,test,testing,21500,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability,"10000000000000001, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Int_tCountNodes(TGeoVolume* vol, Int_t level) const; virtual Int_tCountVisibleNodes(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPainter.html:1578,test,testNo,1578,root/html602/TGeoPainter.html,https://root.cern,https://root.cern/root/html602/TGeoPainter.html,2,['test'],['testNo']
Testability,"10000000000000001, Option_t* option = """") const; virtual voidCheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); virtual voidCheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualGeoPainter.html:1672,test,testNo,1672,root/html602/TVirtualGeoPainter.html,https://root.cern,https://root.cern/root/html602/TVirtualGeoPainter.html,2,['test'],['testNo']
Testability,"1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDirection(Float_t theta, Float_t phi); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* buff) const; virtual voidSetPosition(Float_t x, Float_t y, Float_t z); virtual voidSetRefObject(TObject* obj = 0); virtual voidSetSize(Float_t dx, Float_t dy, Float_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMarker3DBox(); TMarker3DBox(Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dy, Float_t dz, Float_t theta, Float_t phi); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMarker3DBox.html:6507,Test,TestBit,6507,root/html602/TMarker3DBox.html,https://root.cern,https://root.cern/root/html602/TMarker3DBox.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetNDC(Bool_t isNDC = kTRUE); virtual Int_tSetNextPoint(Double_t x, Double_t y)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual voidSetPoint(Int_t point, Double_t x, Double_t y)MENU ; virtual voidSetPolyLine(Int_t n); virtual voidSetPolyLine(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); virtual voidSetPolyLine(Int_t n, Double_t* x, Double_t* y3, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPolyLine.html:6871,Test,TestBit,6871,root/html534/TPolyLine.html,https://root.cern,https://root.cern/root/html534/TPolyLine.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"104 ; 105 TString variables = """";; 106 if (tdef.Contains(""("")) { // contains selection of variables; 107 Ssiz_t parStart = tdef.Index( ""("" );; 108 Ssiz_t parLen = tdef.Index( "")"", parStart )-parStart+1;; 109 ; 110 variables = tdef(parStart,parLen);; 111 tdef.Remove(parStart,parLen);; 112 variables.Remove(parLen-1,1);; 113 variables.Remove(0,1);; 114 }; 115 ; 116 TList* trClsList = gTools().ParseFormatLine( tdef, ""_"" ); // split entry to get trf-name and class-name; 117 TListIter trClsIt(trClsList);; 118 if (trClsList->GetSize() < 1); 119 log << kFATAL <<Form(""Dataset[%s] : "",dataInfo.GetName())<< ""Incorrect transformation string provided."" << Endl;; 120 const TString& trName = ((TObjString*)trClsList->At(0))->GetString();; 121 ; 122 if (trClsList->GetEntries() > 1) {; 123 TString trCls = ""AllClasses"";; 124 ClassInfo *ci = NULL;; 125 trCls = ((TObjString*)trClsList->At(1))->GetString();; 126 if (trCls != ""AllClasses"") {; 127 ci = dataInfo.GetClassInfo( trCls );; 128 if (ci == NULL); 129 log << kFATAL <<Form(""Dataset[%s] : "",dataInfo.GetName())<< ""Class "" << trCls << "" not known for variable transformation ""; 130 << trName << "", please check."" << Endl;; 131 else; 132 idxCls = ci->GetNumber();; 133 }; 134 }; 135 ; 136 VariableTransformBase* transformation = NULL;; 137 if (trName == ""I"" || trName == ""Ident"" || trName == ""Identity"") {; 138 if (variables.Length() == 0) variables = ""_V_"";; 139 transformation = new VariableIdentityTransform(dataInfo);; 140 }; 141 else if (trName == ""D"" || trName == ""Deco"" || trName == ""Decorrelate"") {; 142 if (variables.Length() == 0) variables = ""_V_"";; 143 transformation = new VariableDecorrTransform(dataInfo);; 144 }; 145 else if (trName == ""P"" || trName == ""PCA"") {; 146 if (variables.Length() == 0) variables = ""_V_"";; 147 transformation = new VariablePCATransform(dataInfo);; 148 }; 149 else if (trName == ""U"" || trName == ""Uniform"") {; 150 if (variables.Length() == 0) variables = ""_V_,_T_"";; 151 transformation = new VariableGaussTransfor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/VariableTransform_8cxx_source.html:5268,log,log,5268,doc/master/VariableTransform_8cxx_source.html,https://root.cern,https://root.cern/doc/master/VariableTransform_8cxx_source.html,1,['log'],['log']
Testability,"10638 if (zmin >= zmax) {; 10639 if (Hoption.Logz) {; 10640 if (zmax > 0) zmin = 0.001*zmax;; 10641 else {; 10642 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10643 return 0;; 10644 }; 10645 }; 10646 }; 10647 ; 10648 // take into account normalization factor; 10649 Hparam.allchan = allchan;; 10650 Double_t factor = allchan;; 10651 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 10652 if (allchan) factor /= allchan;; 10653 if (factor == 0) factor = 1;; 10654 Hparam.factor = factor;; 10655 zmax = factor*zmax;; 10656 zmin = factor*zmin;; 10657 c1 = zmax;; 10658 if (TMath::Abs(zmin) > TMath::Abs(c1)) c1 = zmin;; 10659 ; 10660 // For log scales, histogram coordinates are log10(ymin) and; 10661 // log10(ymax). Final adjustment (if not option ""Same""); 10662 // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; 10663 // Maximum and Minimum are not defined.; 10664 if (Hoption.Logz) {; 10665 if (zmin <= 0) {; 10666 zmin = TMath::Min((Double_t)1, (Double_t)0.001*zmax);; 10667 fH->SetMinimum(zmin);; 10668 }; 10669 zmin = TMath::Log10(zmin);; 10670 if (!minimum) zmin += TMath::Log10(0.5);; 10671 zmax = TMath::Log10(zmax);; 10672 if (!maximum) zmax += TMath::Log10(2*(0.9/0.95));; 10673 goto LZMIN;; 10674 }; 10675 ; 10676 // final adjustment of YMAXI for linear scale (if not option ""Same""):; 10677 // decrease histogram height to MAX% of allowed height if HMAXIM; 10678 // has not been called.; 10679 // MAX% is the value in percent which has been set in HPLSET; 10680 // (default is 90%).; 10681 if (!maximum) {; 10682 zmax += yMARGIN*(zmax-zmin);; 10683 }; 10684 ; 10685 // final adjustment of ymin for linear scale.; 10686 // if minimum is not set , then ymin is set to zero if >0; 10687 // or to ymin - yMARGIN if <0.; 10688 if (!minimum) {; 10689 if (Hoption.MinimumZero) {; 10690 if (zmin >= 0) zmin = 0;; 10691 else zmin -= yMARGIN*(zmax-zmin);; 10692 } else {; 10693 Double_t dzmin = yMARGIN*(zmax-zmin);; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:383195,Log,Logz,383195,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"1082 of file TRolke.cxx. ◆ EvalLikeMod3(). Double_t TRolke::EvalLikeMod3 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; bm, . Double_t ; em, . Double_t ; sde, . Double_t ; sdb, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 3: Gauss background/ Gauss Efficiency. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1149 of file TRolke.cxx. ◆ EvalLikeMod4(). Double_t TRolke::EvalLikeMod4 ; (; Double_t ; mu, . Int_t ; x, . Int_t ; y, . Double_t ; tau, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 4: Poiss background/Efficiency known. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1217 of file TRolke.cxx. ◆ EvalLikeMod5(). Double_t TRolke::EvalLikeMod5 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; bm, . Double_t ; sdb, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 5: Gauss background/Efficiency known. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1263 of file TRolke.cxx. ◆ EvalLikeMod6(). Double_t TRolke::EvalLikeMod6 ; (; Double_t ; mu, . Int_t ; x, . Int_t ; z, . Double_t ; b, . Int_t ; m, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 6: Background known/Efficiency binomial. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:27639,Test,Test,27639,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['Test'],['Test']
Testability,"109e-01; : ----------------------------------------; : Elapsed time for training with 9999 events: 5.01e-06 sec ; : Dataset[datasetcvreg] : Create results for training; : Dataset[datasetcvreg] : Evaluation of BDTG on training sample; : Dataset[datasetcvreg] : Elapsed time for evaluation of 9999 events: 0.369 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; : Creating xml weight file: datasetcvreg/weights/TMVACrossValidationRegression_BDTG.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG for Regression performance; : ; : Dataset[datasetcvreg] : Create results for testing; : Dataset[datasetcvreg] : Evaluation of BDTG on testing sample; : Dataset[datasetcvreg] : Elapsed time for evaluation of 9999 events: 0.37 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; <HEADER> Factory : Evaluate all methods; : Evaluate regression method: BDTG; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9999 events: 0.37 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 9999 events: 0.369 sec ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 2.4948 1.4515 [ 0.00020069 5.0000 ]; : var2: 2.4837 1.4409 [ 0.00071490 5.0000 ]; : fvalue: 134.53 84.778 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on test sample:; : (""Bias"" quotes the mean deviation of the regression from true target.; : ""MutInf"" is the ""Mutual Information"" between regression and target.; : Indicated by ""_T"" are the corresponding ""truncated"" quantities ob-; : tained when removing events deviating more than 2sigma from average.); : -------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:12684,Test,TestRegression,12684,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,2,"['Test', 'test']","['TestRegression', 'testing']"
Testability,10; : 1102 Minimum Test error found - save the configuration ; : 1102 | 2.66188 2.52638 0.020367 0.00185502 43215.3 0; : 1103 | 3.01155 3.18843 0.0202364 0.00176536 43311 1; : 1104 | 2.71885 3.00051 0.0201103 0.00176305 43603.3 2; : 1105 Minimum Test error found - save the configuration ; : 1105 | 2.73591 2.50832 0.0201341 0.0018587 43774.7 0; : 1106 | 2.7002 2.7081 0.0203577 0.00176876 43036.3 1; : 1107 | 2.85017 3.38001 0.0201747 0.00176074 43445.3 2; : 1108 | 2.78494 2.55451 0.0203389 0.00176376 43068.3 3; : 1109 | 2.71632 3.12003 0.0200899 0.00175276 43627.4 4; : 1110 | 3.16531 2.9918 0.020346 0.00180026 43136.7 5; : 1111 Minimum Test error found - save the configuration ; : 1111 | 2.97087 2.45167 0.0201922 0.00182484 43555.6 0; : 1112 | 2.60355 2.50464 0.0200664 0.00176061 43702 1; : 1113 | 2.54376 2.96916 0.0200737 0.00178101 43733.3 2; : 1114 | 2.77186 2.89815 0.0200657 0.00175793 43697.4 3; : 1115 | 2.58652 2.73506 0.020068 0.00175912 43694.6 4; : 1116 Minimum Test error found - save the configuration ; : 1116 | 2.82496 2.31503 0.0201083 0.00181922 43742 0; : 1117 | 2.74168 2.90157 0.0200454 0.00175765 43745.2 1; : 1118 | 2.51176 4.00704 0.0201409 0.00176812 43542.7 2; : 1119 | 3.03618 2.55498 0.0202517 0.00178949 43331.7 3; : 1120 | 2.66116 2.61177 0.0204165 0.00176394 42889.5 4; : 1121 | 3.00965 2.56116 0.0204562 0.00180217 42886.2 5; : 1122 | 3.0625 3.75816 0.0204635 0.00176149 42776.2 6; : 1123 | 2.88666 2.6576 0.0204265 0.00178135 42906.6 7; : 1124 | 2.54231 2.73598 0.020225 0.00176346 43333.4 8; : 1125 | 2.44231 2.73459 0.0201498 0.00175906 43500.1 9; : 1126 | 2.45201 2.82465 0.0200726 0.00175651 43677.5 10; : 1127 | 2.54248 2.42056 0.0201867 0.00176633 43430.3 11; : 1128 | 2.47016 2.53962 0.0206089 0.00182988 42600.8 12; : 1129 | 2.38268 2.44496 0.0204067 0.00176828 42922.1 13; : 1130 | 2.59925 2.55821 0.0200531 0.00176378 43741.4 14; : 1131 | 2.55367 2.59723 0.0200573 0.00177202 43751.1 15; : 1132 | 2.73554 2.74944 0.020135 0.00176885 43558.3 16; : 11,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:120739,Test,Test,120739,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,11 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 55.5039 42.6809 0.0201245 0.00180935 43679.7 0; : 662 Minimum Test error found - save the configuration ; : 662 | 54.3572 42.2723 0.0202587 0.00183315 43417.9 0; : 663 Minimum Test error found - save the configuration ; : 663 | 53.566 41.7624 0.0203991 0.00186617 43166.5 0; : 664 Minimum Test error found - save the configuration ; : 664 | 52.9086 41.2393 0.0201899 0.00182999 43573.1 0; : 665 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:84793,Test,Test,84793,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"11 for (std::vector<TString>::iterator it = classList->begin(); it< classList->end(); ++it) {; 212 dsi.AddClass( (*it) );; 213 }; 214 delete classList;; 215 ; 216 EvtStatsPerClass eventCounts(dsi.GetNClasses());; 217 TString normMode;; 218 TString splitMode;; 219 TString mixMode;; 220 UInt_t splitSeed;; 221 ; 222 InitOptions( dsi, eventCounts, normMode, splitSeed, splitMode , mixMode );; 223 // ======= build event-vector from input, apply preselection ===============; 224 EventVectorOfClassesOfTreeType tmpEventVector;; 225 BuildEventVector( dsi, dataInput, tmpEventVector, eventCounts );; 226 ; 227 DataSet* ds = MixEvents( dsi, tmpEventVector, eventCounts,; 228 splitMode, mixMode, normMode, splitSeed );; 229 ; 230 const Bool_t showCollectedOutput = kFALSE;; 231 if (showCollectedOutput) {; 232 Int_t maxL = dsi.GetClassNameMaxLength();; 233 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Collected:"" << Endl;; 234 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 235 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 236 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 237 << "" training entries: "" << ds->GetNClassEvents( 0, cl ) << Endl;; 238 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 239 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 240 << "" testing entries: "" << ds->GetNClassEvents( 1, cl ) << Endl;; 241 }; 242 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" "" << Endl;; 243 }; 244 ; 245 return ds;; 246}; 247 ; 248////////////////////////////////////////////////////////////////////////////////; 249/// checks a TTreeFormula for problems; 250 ; 251Bool_t TMVA::DataSetFactory::CheckTTreeFormula( TTreeFormula* ttf,; 252 const TString& expression,; 253 Bool_t& hasDollar ); 254{; 255 Bool_t worked = kTRUE;; 256 ; 257 if( ttf->GetNdim() <= 0 ); 258 Log() << kFATAL << ""Expression "" << expression.Data(); 259 << "" could not be resolved to a valid formula. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:9029,Log,Log,9029,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"11); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); voidSetNdivisions(Int_t n = 510, Option_t* axis = ""X""); static voidTObject::SetObjectStat(Bool_t stat); voidSetOption(Option_t* option = "" ""); voidsetPadFactor(Double_t factor); voidSetStats(Bool_t stats = kTRUE); voidSetTickLength(Float_t length = 0.02, Option_t* axis = ""X""); virtual voidSetTitle(const char* name); voidSetTitleFont(Style_t font = 62, Option_t* axis = ""X""); voidSetTitleOffset(Float_t offset = 1, Option_t* axis = ""X""); voidSetTitleSize(Float_t size = 0.02, Option_t* axis = ""X""); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXTitle(const char* title); voidSetYTitle(const char* title); voidSetZTitle(const char* title); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidupdateNormVars(const RooArgSet& vars); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. RooPlot(const RooPlot& other); TStringcaller(const char* method) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TStringhistName() const; voidinitialize(); voidTObject::MakeZombie(); voidupdateFitRangeNorm(const TH1* hist); voidupdateFitRangeNorm(const RooPlotable* rp, Bool_t refeshNorm = kFALSE); voidupdateYAxis(Double_t ymin, Double_t ymax, const char* label = """"). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPlot.html:10453,Test,TestBit,10453,root/html526/RooPlot.html,https://root.cern,https://root.cern/root/html526/RooPlot.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"11,1);; lrh->DrawPave(14.5,8.5,15.3,11,1);; TLine *ldot = new TLine(1,8.5,0.5,6.5);; ldot->SetLineStyle(2);; ldot->Draw();; ldot->DrawLine(2.5, 8.5, 9.4, 6.5);; ldot->DrawLine(10.5, 8.5, 10, 6.5);; ldot->DrawLine(11.3, 8.5, 19.5, 6.5);; TLine *line = new TLine(2.6,11,2.6,11.5);; line->Draw();; line->DrawLine(2.6,11.5,7,11.5);; TArrow *arrow = new TArrow(7,11.5,7,11.1,0.01,""|>"");; arrow->SetFillStyle(1001);; arrow->Draw();; line->DrawLine( 7, 8.5, 7, 8.0);; line->DrawLine( 7, 8.0, 10.6, 8);; arrow->DrawArrow( 10.6,8, 10.6, 8.4,0.01,""|>"");; line->DrawLine( 10.6, 11, 10.6, 11.5);; line->DrawLine( 10.6, 11.5, 14.6, 11.5);; arrow->DrawArrow( 14.6,11.5, 14.6,11.1,0.01,""|>"");; line->DrawLine( 14.6, 8.5, 14.6, 8.0);; line->DrawLine( 14.6, 8.0, 16, 8);; ldot->DrawLine(16, 8, 19, 8);; TText *vert = new TText(1.5,9.75,""File"");; vert->SetTextAlign(21);; vert->SetTextAngle(90);; vert->SetTextSize(0.025);; vert->Draw();; vert->DrawText(2.0, 9.75,""Header"");; vert->DrawText(2.9, 9.75,""Logical Record"");; vert->DrawText(3.2, 9.75,""Header"");; vert->DrawText(7.3, 9.75,""Logical Record"");; vert->DrawText(7.6, 9.75,""Header"");; vert->DrawText(10.9,9.75,""Logical Record"");; vert->DrawText(11.2,9.75,""Header"");; vert->DrawText(14.9,9.75,""Logical Record"");; vert->DrawText(15.2,9.75,""Header"");; TText *hori = new TText(4.75,10,""Object"");; hori->SetTextAlign(22);; hori->SetTextSize(0.035);; hori->Draw();; hori->DrawText(4.75, 9.5,""Data"");; hori->DrawText(9.2, 10,""Deleted"");; hori->DrawText(9.2, 9.5,""Object"");; line->DrawLine( 6.9, 8.5, 10.5, 11);; line->DrawLine( 6.9, 11, 10.5, 8.5);; TText *tbig = new TText(17,9.75,""............"");; tbig->SetTextAlign(22);; tbig->SetTextSize(0.03);; tbig->Draw();; tbig->DrawText(2.6, 7, ""fBEGIN"");; tbig->DrawText(20., 7, ""fEND"");; arrow->DrawArrow( 2.6,7, 2.6,8.4,0.01,""|>"");; arrow->DrawArrow( 20,7, 20,8.4,0.01,""|>"");; ; //file header; TPaveText *header = new TPaveText(0.5,.2,9.4,6.5);; header->SetFillColor(44);; header->Draw();; TText *fh=header->AddText(""File H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/file_8C.html:1795,Log,Logical,1795,doc/master/file_8C.html,https://root.cern,https://root.cern/doc/master/file_8C.html,1,['Log'],['Logical']
Testability,110 of file SimulatedAnnealing.h. ◆ fEps. Double_t TMVA::SimulatedAnnealing::fEps. private . epsilon ; Definition at line 108 of file SimulatedAnnealing.h. ◆ fExitFromTraining. bool* TMVA::SimulatedAnnealing::fExitFromTraining = nullptr. private . Definition at line 125 of file SimulatedAnnealing.h. ◆ fFitterTarget. IFitterTarget& TMVA::SimulatedAnnealing::fFitterTarget. private . the fitter target ; Definition at line 100 of file SimulatedAnnealing.h. ◆ fInitialTemperature. Double_t TMVA::SimulatedAnnealing::fInitialTemperature. private . initial temperature ; Definition at line 106 of file SimulatedAnnealing.h. ◆ fIPyCurrentIter. UInt_t* TMVA::SimulatedAnnealing::fIPyCurrentIter = nullptr. private . Definition at line 124 of file SimulatedAnnealing.h. ◆ fKernelTemperature. enum TMVA::SimulatedAnnealing::EKernelTemperature TMVA::SimulatedAnnealing::fKernelTemperature. private . ◆ fLogger. MsgLogger* TMVA::SimulatedAnnealing::fLogger. mutableprivate . ! message logger ; Definition at line 118 of file SimulatedAnnealing.h. ◆ fMaxCalls. Int_t TMVA::SimulatedAnnealing::fMaxCalls. private . maximum number of minimisation calls ; Definition at line 105 of file SimulatedAnnealing.h. ◆ fMinTemperature. Double_t TMVA::SimulatedAnnealing::fMinTemperature. private . minimum temperature ; Definition at line 107 of file SimulatedAnnealing.h. ◆ fProgress. Double_t TMVA::SimulatedAnnealing::fProgress. private . Definition at line 121 of file SimulatedAnnealing.h. ◆ fRandom. TRandom* TMVA::SimulatedAnnealing::fRandom. private . random generator ; Definition at line 101 of file SimulatedAnnealing.h. ◆ fRanges. const std::vector<TMVA::Interval*>& TMVA::SimulatedAnnealing::fRanges. private . parameter ranges ; Definition at line 102 of file SimulatedAnnealing.h. ◆ fTemperatureAdaptiveStep. Double_t TMVA::SimulatedAnnealing::fTemperatureAdaptiveStep. private . used to calculate InitialTemperature if fUseDefaultTemperature ; Definition at line 113 of file SimulatedAnnealing.h. ◆ fTempe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealing.html:10736,log,logger,10736,doc/master/classTMVA_1_1SimulatedAnnealing.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealing.html,1,['log'],['logger']
Testability,"1100 } else {; 1101 p2 = new TProfile2D(name,title,ny,&ybins->fArray[iymin-1],nx,&xbins->fArray[ixmin-1]);; 1102 }; 1103 }; 1104 ; 1105 // weights; 1106 bool useWeights = (fBinSumw2.fN != 0);; 1107 if (useWeights) p2->Sumw2();; 1108 ; 1109 // make projection in a 3D first; 1110 TH3D * h3dW = ProjectionXYZ(""h3temp-W"",""W"");; 1111 TH3D * h3dN = ProjectionXYZ(""h3temp-N"",""B"");; 1112 ; 1113 h3dW->SetDirectory(nullptr); h3dN->SetDirectory(nullptr);; 1114 ; 1115 // Since no axis range is considered when doing the projection TProfile3D->TH3D; 1116 // the resulting histogram will have the same axis as the parent one; 1117 // we need afterwards to set the range in the 3D histogram to considered it later; 1118 // when doing the projection in a Profile2D; 1119 if (fXaxis.TestBit(TAxis::kAxisRange) ) {; 1120 h3dW->GetXaxis()->SetRange(fXaxis.GetFirst(),fXaxis.GetLast());; 1121 h3dN->GetXaxis()->SetRange(fXaxis.GetFirst(),fXaxis.GetLast());; 1122 }; 1123 if (fYaxis.TestBit(TAxis::kAxisRange) ) {; 1124 h3dW->GetYaxis()->SetRange(fYaxis.GetFirst(),fYaxis.GetLast());; 1125 h3dN->GetYaxis()->SetRange(fYaxis.GetFirst(),fYaxis.GetLast());; 1126 }; 1127 if (fZaxis.TestBit(TAxis::kAxisRange) ) {; 1128 h3dW->GetZaxis()->SetRange(fZaxis.GetFirst(),fZaxis.GetLast());; 1129 h3dN->GetZaxis()->SetRange(fZaxis.GetFirst(),fZaxis.GetLast());; 1130 }; 1131 ; 1132 // note that h3dW is always a weighted histogram - so we need to compute error in the projection; 1133 TAxis * projX_hW = h3dW->GetXaxis();; 1134 TAxis * projX_hN = h3dN->GetXaxis();; 1135 if (projX == GetYaxis() ) { projX_hW = h3dW->GetYaxis(); projX_hN = h3dN->GetYaxis(); }; 1136 if (projX == GetZaxis() ) { projX_hW = h3dW->GetZaxis(); projX_hN = h3dN->GetZaxis(); }; 1137 TAxis * projY_hW = h3dW->GetYaxis();; 1138 TAxis * projY_hN = h3dN->GetYaxis();; 1139 if (projY == GetXaxis() ) { projY_hW = h3dW->GetXaxis(); projY_hN = h3dN->GetXaxis(); }; 1140 if (projY == GetZaxis() ) { projY_hW = h3dW->GetZaxis(); projY_hN = h3dN->GetZaxis(); }; 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:42064,Test,TestBit,42064,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['Test'],['TestBit']
Testability,"111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointError(Double_t ex, Double_t ey); virtual voidSetPointError(Int_t i, Double_t ex, Double_t ey); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t(*)(const TGraph*,Int_t,Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphErrors(); TGraphErrors(Int_t n); TGraphErrors(const TGraphErrors& gr); TGraphErrors(const TH1* h); TGraphErrors(const char* filename, const char* format = ""%lg %lg %lg %lg"", Option_t* option = """"); TGraphErrors(const TVectorF& vx, const TVectorF& vy, const TVectorF& vex, const TVectorF& vey); TGraphErrors(const TVectorD& vx, const TVectorD& vy, const TVectorD& vex, const TVectorD& vey); TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0, const Double_t* ey = 0); virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:11725,Test,TestBits,11725,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,2,['Test'],['TestBits']
Testability,"1123/// Returns 0 on failure.; 1124 ; 1125TObjArray* TChain::GetListOfBranches(); 1126{; 1127 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 1128 // Make sure the element list is up to date; 1129 if (!TestBit(kProofUptodate)); 1130 SetProof(true, true);; 1131 return fProofChain->GetListOfBranches();; 1132 }; 1133 if (fTree) {; 1134 return fTree->GetListOfBranches();; 1135 }; 1136 LoadTree(0);; 1137 if (fTree) {; 1138 return fTree->GetListOfBranches();; 1139 }; 1140 return nullptr;; 1141}; 1142 ; 1143////////////////////////////////////////////////////////////////////////////////; 1144/// Return a pointer to the list of leaves of the current tree.; 1145///; 1146/// Warning: May set the current tree!; 1147 ; 1148TObjArray* TChain::GetListOfLeaves(); 1149{; 1150 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 1151 // Make sure the element list is up to date; 1152 if (!TestBit(kProofUptodate)); 1153 SetProof(true, true);; 1154 return fProofChain->GetListOfLeaves();; 1155 }; 1156 if (fTree) {; 1157 return fTree->GetListOfLeaves();; 1158 }; 1159 LoadTree(0);; 1160 if (fTree) {; 1161 return fTree->GetListOfLeaves();; 1162 }; 1163 return nullptr;; 1164}; 1165 ; 1166////////////////////////////////////////////////////////////////////////////////; 1167/// Return maximum of column with name columname.; 1168 ; 1169Double_t TChain::GetMaximum(const char* columname); 1170{; 1171 Double_t theMax = -DBL_MAX;; 1172 for (Int_t file = 0; file < fNtrees; file++) {; 1173 Long64_t first = fTreeOffset[file];; 1174 LoadTree(first);; 1175 Double_t curmax = fTree->GetMaximum(columname);; 1176 if (curmax > theMax) {; 1177 theMax = curmax;; 1178 }; 1179 }; 1180 return theMax;; 1181}; 1182 ; 1183////////////////////////////////////////////////////////////////////////////////; 1184/// Return minimum of column with name columname.; 1185 ; 1186Double_t TChain::GetMinimum(const char* columname); 1187{; 1188 Double_t theMin = DBL_MAX;; 1189 for (Int_t file = 0; file < fNtrees;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:42572,Test,TestBit,42572,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['Test'],['TestBit']
Testability,1142 43585.5 4; : 839 Minimum Test error found - save the configuration ; : 839 | 7.52525 10.9666 0.0202646 0.00182844 43392.9 0; : 840 | 7.48548 11.313 0.020051 0.00174873 43710.5 1; : 841 | 7.28024 11.1847 0.0200374 0.0017493 43744.4 2; : 842 | 7.18939 11.0082 0.0200397 0.00175322 43748.2 3; : 843 Minimum Test error found - save the configuration ; : 843 | 7.01613 10.4197 0.0201334 0.00182993 43707.5 0; : 844 | 6.83302 10.8151 0.020039 0.00176037 43767.1 1; : 845 | 6.97518 10.5462 0.0200409 0.00175987 43761.2 2; : 846 | 6.93317 10.5904 0.0200239 0.00176026 43802.8 3; : 847 | 6.86223 10.6492 0.0200268 0.00176058 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 0.0200333 0.00176264 43785.9 6; : 850 | 6.72856 10.6877 0.0200521 0.00176189 43739.2 7; : 851 | 6.84236 10.8522 0.0200238 0.00176009 43802.7 8; : 852 Minimum Test error found - save the configuration ; : 852 | 6.78011 10.0733 0.0201111 0.00182524 43749.6 0; : 853 Minimum Test error found - save the configuration ; : 853 | 6.53284 9.90736 0.0201187 0.00181829 43714.8 0; : 854 | 6.67108 10.0768 0.0205443 0.0017732 42618.8 1; : 855 | 6.58878 10.7427 0.0200637 0.00176264 43713.2 2; : 856 | 6.54513 10.3387 0.0200413 0.00176141 43764 3; : 857 Minimum Test error found - save the configuration ; : 857 | 6.43616 9.72218 0.020097 0.00182688 43787.4 0; : 858 | 6.34936 10.0458 0.0200349 0.00176193 43780.5 1; : 859 Minimum Test error found - save the configuration ; : 859 | 6.20554 9.48603 0.0201607 0.00183833 43662.6 0; : 860 | 6.16695 10.0812 0.0200598 0.00175295 43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:102383,Test,Test,102383,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"1150 // paint highlight point as marker (recursive calls PaintHighlightPoint); 1151 gPad->Modified(kTRUE);; 1152 gPad->Update();; 1153 ; 1154 // emit Highlighted() signal; 1155 if (gPad->GetCanvas()) gPad->GetCanvas()->Highlighted(gPad, theGraph, gHighlightPoint, -1);; 1156 }; 1157 }; 1158 if (gHighlightGraph == theGraph) distanceOld = distance;; 1159}; 1160 ; 1161 ; 1162////////////////////////////////////////////////////////////////////////////////; 1163/// Paint highlight point as TMarker object (open circle); 1164 ; 1165void TGraphPainter::PaintHighlightPoint(TGraph *theGraph, Option_t * /*option*/); 1166{; 1167 // call from PaintGraphSimple; 1168 ; 1169 if ((!theGraph->IsHighlight()) || (gHighlightGraph != theGraph)) return;; 1170 ; 1171 Double_t hx, hy;; 1172 if (theGraph->GetPoint(gHighlightPoint, hx, hy) == -1) {; 1173 // special case, e.g. after interactive remove last point; 1174 if (gHighlightMarker) gHighlightMarker.reset(nullptr);; 1175 return;; 1176 }; 1177 // testing specific possibility (after zoom, draw with ""same"", log, etc.); 1178 Double_t uxmin = gPad->GetUxmin();; 1179 Double_t uxmax = gPad->GetUxmax();; 1180 Double_t uymin = gPad->GetUymin();; 1181 Double_t uymax = gPad->GetUymax();; 1182 if (gPad->GetLogx()) {; 1183 uxmin = TMath::Power(10.0, uxmin);; 1184 uxmax = TMath::Power(10.0, uxmax);; 1185 }; 1186 if (gPad->GetLogy()) {; 1187 uymin = TMath::Power(10.0, uymin);; 1188 uymax = TMath::Power(10.0, uymax);; 1189 }; 1190 if ((hx < uxmin) || (hx > uxmax)) return;; 1191 if ((hy < uymin) || (hy > uymax)) return;; 1192 ; 1193 if (!gHighlightMarker) {; 1194 gHighlightMarker = std::make_unique<TMarker>(hx, hy, 24);; 1195 gHighlightMarker->SetBit(kCannotPick);; 1196 }; 1197 gHighlightMarker->SetX(hx);; 1198 gHighlightMarker->SetY(hy);; 1199 gHighlightMarker->SetMarkerSize(theGraph->GetMarkerSize()*2.0);; 1200 if (gHighlightMarker->GetMarkerSize() < 1.0) gHighlightMarker->SetMarkerSize(1.0); // always visible; 1201 gHighlightMarker->SetMarkerColor(the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:43242,test,testing,43242,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,"['log', 'test']","['log', 'testing']"
Testability,"119 of file DataLoader.cxx. ◆ AddEvent(). void TMVA::DataLoader::AddEvent ; (; const TString & ; className, . Types::ETreeType ; tt, . const std::vector< Double_t > & ; event, . Double_t ; weight . ). add event vector event : the order of values is: variables + targets + spectators ; Definition at line 277 of file DataLoader.cxx. ◆ AddRegressionTarget(). void TMVA::DataLoader::AddRegressionTarget ; (; const TString & ; expression, . const TString & ; title = """", . const TString & ; unit = """", . Double_t ; min = 0, . Double_t ; max = 0 . ). inline . Definition at line 132 of file DataLoader.h. ◆ AddRegressionTree(). void TMVA::DataLoader::AddRegressionTree ; (; TTree * ; tree, . Double_t ; weight = 1.0, . Types::ETreeType ; treetype = Types::kMaxTreeType . ). inline . Definition at line 103 of file DataLoader.h. ◆ AddSignalTestEvent(). void TMVA::DataLoader::AddSignalTestEvent ; (; const std::vector< Double_t > & ; event, . Double_t ; weight = 1.0 . ). add signal testing event ; Definition at line 236 of file DataLoader.cxx. ◆ AddSignalTrainingEvent(). void TMVA::DataLoader::AddSignalTrainingEvent ; (; const std::vector< Double_t > & ; event, . Double_t ; weight = 1.0 . ). add signal training event ; Definition at line 228 of file DataLoader.cxx. ◆ AddSignalTree() [1/3]. void TMVA::DataLoader::AddSignalTree ; (; TString ; datFileS, . Double_t ; weight = 1.0, . Types::ETreeType ; treetype = Types::kMaxTreeType . ). add signal tree from text file ; Definition at line 379 of file DataLoader.cxx. ◆ AddSignalTree() [2/3]. void TMVA::DataLoader::AddSignalTree ; (; TTree * ; signal, . Double_t ; weight, . const TString & ; treetype . ). Definition at line 394 of file DataLoader.cxx. ◆ AddSignalTree() [3/3]. void TMVA::DataLoader::AddSignalTree ; (; TTree * ; signal, . Double_t ; weight = 1.0, . Types::ETreeType ; treetype = Types::kMaxTreeType . ). number of signal events (used to compute significance) ; Definition at line 371 of file DataLoader.cxx. ◆ AddSpectator(). void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:24704,test,testing,24704,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['test'],['testing']
Testability,"119/// - ""D"" Put out a line of ""Debug"" printout; 8120/// - ""M"" Return the Maximum Kolmogorov distance instead of prob; 8121/// - ""X"" Run the pseudo experiments post-processor with the following procedure:; 8122/// make pseudoexperiments based on random values from the parent distribution,; 8123/// compare the KS distance of the pseudoexperiment to the parent; 8124/// distribution, and count all the KS values above the value; 8125/// obtained from the original data to Monte Carlo distribution.; 8126/// The number of pseudo-experiments nEXPT is by default 1000, and; 8127/// it can be changed by specifying the option as ""X=number"",; 8128/// for example ""X=10000"" for 10000 toys.; 8129/// The function returns the probability.; 8130/// (thanks to Ben Kilminster to submit this procedure). Note that; 8131/// this option ""X"" is much slower.; 8132///; 8133/// The returned function value is the probability of test; 8134/// (much less than one means NOT compatible); 8135///; 8136/// Code adapted by Rene Brun from original HBOOK routine HDIFF; 8137///; 8138/// NOTE1; 8139/// A good description of the Kolmogorov test can be seen at:; 8140/// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; 8141///; 8142/// NOTE2; 8143/// see also alternative function TH1::Chi2Test; 8144/// The Kolmogorov test is assumed to give better results than Chi2Test; 8145/// in case of histograms with low statistics.; 8146///; 8147/// NOTE3 (Jan Conrad, Fred James); 8148/// ""The returned value PROB is calculated such that it will be; 8149/// uniformly distributed between zero and one for compatible histograms,; 8150/// provided the data are not binned (or the number of bins is very large; 8151/// compared with the number of events). Users who have access to unbinned; 8152/// data and wish exact confidence levels should therefore not put their data; 8153/// into histograms, but should call directly TMath::KolmogorovTest. On; 8154/// the other hand, since TH1 is a convenient way of collecting",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:319215,test,test,319215,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['test'],['test']
Testability,"12 ; 1713////////////////////////////////////////////////////////////////////////////////; 1714/// get help message text; 1715///; 1716/// typical length of text line:; 1717/// ""|--------------------------------------------------------------|""; 1718 ; 1719void TMVA::MethodCuts::GetHelpMessage() const; 1720{; 1721 TString bold = gConfig().WriteOptionsReference() ? ""<b>"" : """";; 1722 TString resbold = gConfig().WriteOptionsReference() ? ""</b>"" : """";; 1723 TString brk = gConfig().WriteOptionsReference() ? ""<br>"" : """";; 1724 ; 1725 Log() << Endl;; 1726 Log() << gTools().Color(""bold"") << ""--- Short description:"" << gTools().Color(""reset"") << Endl;; 1727 Log() << Endl;; 1728 Log() << ""The optimisation of rectangular cuts performed by TMVA maximises "" << Endl;; 1729 Log() << ""the background rejection at given signal efficiency, and scans "" << Endl;; 1730 Log() << ""over the full range of the latter quantity. Three optimisation"" << Endl;; 1731 Log() << ""methods are optional: Monte Carlo sampling (MC), a Genetics"" << Endl;; 1732 Log() << ""Algorithm (GA), and Simulated Annealing (SA). GA and SA are"" << Endl;; 1733 Log() << ""expected to perform best."" << Endl;; 1734 Log() << Endl;; 1735 Log() << ""The difficulty to find the optimal cuts strongly increases with"" << Endl;; 1736 Log() << ""the dimensionality (number of input variables) of the problem."" << Endl;; 1737 Log() << ""This behavior is due to the non-uniqueness of the solution space.""<< Endl;; 1738 Log() << Endl;; 1739 Log() << gTools().Color(""bold"") << ""--- Performance optimisation:"" << gTools().Color(""reset"") << Endl;; 1740 Log() << Endl;; 1741 Log() << ""If the dimensionality exceeds, say, 4 input variables, it is "" << Endl;; 1742 Log() << ""advisable to scrutinize the separation power of the variables,"" << Endl;; 1743 Log() << ""and to remove the weakest ones. If some among the input variables"" << Endl;; 1744 Log() << ""can be described by a single cut (e.g., because signal tends to be"" << Endl;; 1745 Log() << ""larger than bac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:67455,Log,Log,67455,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,2,['Log'],['Log']
Testability,"120 if (obj->InheritsFrom(TGraph::Class())) { h1 = ((TGraph*)(obj))->GetHistogram() ; break; }; 7121 if (obj->InheritsFrom(TMultiGraph::Class())) { h1 = ((TMultiGraph*)(obj))->GetHistogram(); break; }; 7122 if (obj->InheritsFrom(TGraph2D::Class())) { h1 = ((TGraph2D*)(obj))->GetHistogram(); break; }; 7123 if (obj->InheritsFrom(TF1::Class())) { h1 = ((TF1*)(obj))->GetHistogram(); break; }; 7124 }; 7125 if (h1) {; 7126 Hparam.xlowedge = h1->GetXaxis()->GetBinLowEdge(h1->GetXaxis()->GetFirst());; 7127 } else {; 7128 Error(where, ""undefined user's coordinates. Cannot use option SAME"");; 7129 return 0;; 7130 }; 7131 } else {; 7132 for (i=first; i<=last; i++) {; 7133 Double_t binLow = fXaxis->GetBinLowEdge(i);; 7134 if (binLow>0) {; 7135 Hparam.xlowedge = binLow;; 7136 break;; 7137 }; 7138 if (binLow == 0 && fH->GetBinContent(i) !=0) {; 7139 Hparam.xlowedge = fXaxis->GetBinUpEdge(i)*0.001;; 7140 break;; 7141 }; 7142 }; 7143 if (Hparam.xlowedge<=0) {; 7144 Error(where, ""cannot set X axis to log scale"");; 7145 return 0;; 7146 }; 7147 }; 7148 Hparam.xmin = Hparam.xlowedge;; 7149 }; 7150 Hparam.xfirst= fXaxis->FindFixBin(Hparam.xmin);; 7151 Hparam.xlast = fXaxis->FindFixBin(Hparam.xmax);; 7152 Hparam.xmin = TMath::Log10(Hparam.xmin);; 7153 Hparam.xmax = TMath::Log10(Hparam.xmax);; 7154 if (Hparam.xlast > last) Hparam.xlast = last;; 7155 if (Hparam.xfirst < first) Hparam.xfirst = first;; 7156 }; 7157 ; 7158 // Compute Y axis parameters; 7159 Double_t bigp = TMath::Power(10,32);; 7160 Double_t ymax = -bigp;; 7161 Double_t ymin = bigp;; 7162 Double_t c1, e1;; 7163 Double_t xv[1];; 7164 Double_t fval;; 7165 TObject *f;; 7166 TF1 *f1;; 7167 Double_t allchan = 0;; 7168 Int_t nonNullErrors = 0;; 7169 TIter next(fFunctions);; 7170 for (i=first; i<=last;i++) {; 7171 c1 = fH->GetBinContent(i);; 7172 ymax = TMath::Max(ymax,c1);; 7173 if (Hoption.Logy) {; 7174 if (c1 > 0) ymin = TMath::Min(ymin,c1);; 7175 } else {; 7176 ymin = TMath::Min(ymin,c1);; 7177 }; 7178 if (Hoption.Error) {; 7179",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:259326,log,log,259326,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability,"1244 // We currently store in the 16 highest bit of fSeekPdir the value of; 1245 // fPidOffset. This offset is used when a key (or basket) is transfered from one; 1246 // file to the other. In this case the TRef and TObject might have stored a; 1247 // pid index (to retrieve TProcessIDs) which refered to their order on the original; 1248 // file, the fPidOffset is to be added to those values to correctly find the; 1249 // TProcessID. This fPidOffset needs to be increment if the key/basket is copied; 1250 // and need to be zero for new key/basket.; 1251 Long64_t pdir;; 1252 frombuf(buffer, &pdir);; 1253 fPidOffset = pdir >> kPidOffsetShift;; 1254 fSeekPdir = pdir & kPidOffsetMask;; 1255 } else {; 1256 UInt_t seekkey,seekdir;; 1257 frombuf(buffer, &seekkey); fSeekKey = (Long64_t)seekkey;; 1258 frombuf(buffer, &seekdir); fSeekPdir= (Long64_t)seekdir;; 1259 }; 1260 fClassName.ReadBuffer(buffer);; 1261 //the following test required for forward and backward compatibility; 1262 if (fClassName == ""TDirectory"") {; 1263 fClassName = ""TDirectoryFile"";; 1264 SetBit(kIsDirectoryFile);; 1265 }; 1266 ; 1267 fName.ReadBuffer(buffer);; 1268 fTitle.ReadBuffer(buffer);; 1269}; 1270 ; 1271////////////////////////////////////////////////////////////////////////////////; 1272/// Read the key structure from the file; 1273 ; 1274Bool_t TKey::ReadFile(); 1275{; 1276 TFile* f = GetFile();; 1277 if (f==0) return kFALSE;; 1278 ; 1279 Int_t nsize = fNbytes;; 1280 f->Seek(fSeekKey);; 1281 if( f->ReadBuffer(fBuffer,nsize) ); 1282 {; 1283 Error(""ReadFile"", ""Failed to read data."");; 1284 return kFALSE;; 1285 }; 1286 if (gDebug) {; 1287 std::cout << ""TKey Reading ""<<nsize<< "" bytes at address ""<<fSeekKey<<std::endl;; 1288 }; 1289 return kTRUE;; 1290}; 1291 ; 1292////////////////////////////////////////////////////////////////////////////////; 1293/// Set parent in key buffer.; 1294 ; 1295void TKey::SetParent(const TObject *parent); 1296{; 1297 if (fBufferRef) fBufferRef->SetParent((TObject*)parent);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:45020,test,test,45020,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['test'],['test']
Testability,"128 if (TagDecl *TD = llvm::dyn_cast<TagDecl>(ND)) {; 1129 if (TD->isCompleteDefinition()); 1130 Register(TD);; 1131 } else if (NamespaceDecl *NSD = llvm::dyn_cast<NamespaceDecl>(ND)) {; 1132 Register(NSD, /*AddSingleEntry=*/ false);; 1133 }; 1134 else if (TypedefNameDecl *TND = dyn_cast<TypedefNameDecl>(ND)); 1135 Register(TND);; 1136 // FIXME: Add the rest...; 1137 return true; // continue decending; 1138 }; 1139 private:; 1140 clang::GlobalModuleIndex::UserDefinedInterestingIDs &DefinitionIDs;; 1141 void Register(const NamedDecl* ND, bool AddSingleEntry = true) {; 1142 assert(ND->isFromASTFile());; 1143 // FIXME: All decls should have an owning module once rootcling; 1144 // updates its generated decls from within the LookupHelper & co.; 1145 if (!ND->hasOwningModule()) {; 1146#ifndef NDEBUG; 1147 SourceManager &SM = ND->getASTContext().getSourceManager();; 1148 SourceLocation Loc = ND->getLocation();; 1149 const FileEntry *FE = SM.getFileEntryForID(SM.getFileID(Loc));; 1150 (void)FE;; 1151 assert(FE->getName().contains(""input_line_""));; 1152#endif; 1153 return;; 1154 }; 1155 ; 1156 Module *OwningModule = ND->getOwningModule()->getTopLevelModule();; 1157 assert(OwningModule);; 1158 assert(!ND->getName().empty() && ""Empty name"");; 1159 if (AddSingleEntry && DefinitionIDs.count(ND->getName())); 1160 return;; 1161 // FIXME: The FileEntry in not stable to serialize.; 1162 // FIXME: We might end up with many times with the same module.; 1163 // FIXME: We might end up two modules containing a definition.; 1164 // FIXME: What do we do if no definition is found.; 1165 DefinitionIDs[ND->getName()].push_back(OwningModule->getASTFile());; 1166 }; 1167 };; 1168 DefinitionFinder defFinder(IDs, CI.getASTContext().getTranslationUnitDecl());; 1169 ; 1170 llvm::cantFail(GlobalModuleIndex::writeIndex(CI.getFileManager(),; 1171 CI.getPCHContainerReader(),; 1172 ModuleIndexPath,; 1173 &IDs));; 1174 ModuleManager->resetForReload();; 1175 ModuleManager->loadGlobalIndex();; 1176 Global",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:41715,assert,assert,41715,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"1286 ; 1287 // `ERROR` and `PI` are from loading R related modules, which conflict with; 1288 // user's code.; 1289 clingInterp.declare(R""CODE(; 1290#ifdef PI; 1291# undef PI; 1292#endif; 1293#ifdef ERROR; 1294# undef ERROR; 1295#endif; 1296 )CODE"");; 1297}; 1298 ; 1299static void RegisterPreIncludedHeaders(cling::Interpreter &clingInterp); 1300{; 1301 std::string PreIncludes;; 1302 bool hasCxxModules = clingInterp.getCI()->getLangOpts().Modules;; 1303 ; 1304 // For the list to also include string, we have to include it now.; 1305 // rootcling does parts already if needed, e.g. genreflex does not want using; 1306 // namespace std.; 1307 if (IsFromRootCling()) {; 1308 PreIncludes += ""#include \""RtypesCore.h\""\n"";; 1309 } else {; 1310 if (!hasCxxModules); 1311 PreIncludes += ""#include \""Rtypes.h\""\n"";; 1312 ; 1313 PreIncludes += gClassDefInterpMacro + ""\n""; 1314 + gInterpreterClassDef + ""\n""; 1315 ""#undef ClassImp\n""; 1316 ""#define ClassImp(X);\n"";; 1317 }; 1318 if (!hasCxxModules); 1319 PreIncludes += ""#include <string>\n"";; 1320 ; 1321 // We must include it even when we have modules because it is marked as; 1322 // textual in the modulemap due to the nature of the assert header.; 1323#ifndef R__WIN32; 1324 PreIncludes += ""#include <cassert>\n"";; 1325#endif; 1326 PreIncludes += ""using namespace std;\n"";; 1327 clingInterp.declare(PreIncludes);; 1328}; 1329 ; 1330////////////////////////////////////////////////////////////////////////////////; 1331/// Initialize the cling interpreter interface.; 1332/// \param name name for TInterpreter; 1333/// \param title title for TInterpreter; 1334/// \param argv - array of arguments passed to the cling::Interpreter constructor; 1335/// e.g. `-DFOO=bar`. The last element of the array must be `nullptr`.; 1336 ; 1337TCling::TCling(const char *name, const char *title, const char* const argv[], void *interpLibHandle); 1338: TInterpreter(name, title), fGlobalsListSerial(-1), fMapfile(nullptr),; 1339 fRootmapFiles(nullptr), fLockProcess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:47728,assert,assert,47728,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"129 ? ""Regression""; 1130 : (fAnalysisType == Types::kMulticlass ? ""Multiclass"" : ""Classification"")); 1131 << "" ..."" << Endl;; 1132 ; 1133 std::map<TString, MVector *>::iterator itrMap;; 1134 ; 1135 for (itrMap = fMethodsMap.begin(); itrMap != fMethodsMap.end(); ++itrMap) {; 1136 MVector *methods = itrMap->second;; 1137 MVector::iterator itrMethod;; 1138 ; 1139 // iterate over methods and train; 1140 for (itrMethod = methods->begin(); itrMethod != methods->end(); ++itrMethod) {; 1141 Event::SetIsTraining(kTRUE);; 1142 MethodBase *mva = dynamic_cast<MethodBase *>(*itrMethod);; 1143 ; 1144 if (mva == 0); 1145 continue;; 1146 ; 1147 if (mva->DataInfo().GetDataSetManager()->DataInput().GetEntries() <=; 1148 1) { // 0 entries --> 0 events, 1 entry --> dynamical dataset (or one entry); 1149 Log() << kFATAL << ""No input data for the training provided!"" << Endl;; 1150 }; 1151 ; 1152 if (fAnalysisType == Types::kRegression && mva->DataInfo().GetNTargets() < 1); 1153 Log() << kFATAL << ""You want to do regression training without specifying a target."" << Endl;; 1154 else if ((fAnalysisType == Types::kMulticlass || fAnalysisType == Types::kClassification) &&; 1155 mva->DataInfo().GetNClasses() < 2); 1156 Log() << kFATAL << ""You want to do classification training, but specified less than two classes."" << Endl;; 1157 ; 1158 // first print some information about the default dataset; 1159 if (!IsSilentFile()); 1160 WriteDataInformation(mva->fDataSetInfo);; 1161 ; 1162 if (mva->Data()->GetNTrainingEvents() < MinNoTrainingEvents) {; 1163 Log() << kWARNING << ""Method "" << mva->GetMethodName() << "" not trained (training tree has less entries [""; 1164 << mva->Data()->GetNTrainingEvents() << ""] than required ["" << MinNoTrainingEvents << ""]"" << Endl;; 1165 continue;; 1166 }; 1167 ; 1168 Log() << kHEADER << ""Train method: "" << mva->GetMethodName() << "" for ""; 1169 << (fAnalysisType == Types::kRegression; 1170 ? ""Regression""; 1171 : (fAnalysisType == Types::kMulticlass ? ""Multiclass classifi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:47223,Log,Log,47223,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"13 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:15504,Test,Test,15504,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Test'],['Test']
Testability,"13/// Histogram default constructor.; 614 ; 615TH1::TH1(); 616{; 617 fDirectory = nullptr;; 618 fFunctions = new TList;; 619 fNcells = 0;; 620 fIntegral = nullptr;; 621 fPainter = nullptr;; 622 fEntries = 0;; 623 fNormFactor = 0;; 624 fTsumw = fTsumw2=fTsumwx=fTsumwx2=0;; 625 fMaximum = -1111;; 626 fMinimum = -1111;; 627 fBufferSize = 0;; 628 fBuffer = nullptr;; 629 fBinStatErrOpt = kNormal;; 630 fStatOverflows = EStatOverflows::kNeutral;; 631 fXaxis.SetName(""xaxis"");; 632 fYaxis.SetName(""yaxis"");; 633 fZaxis.SetName(""zaxis"");; 634 fXaxis.SetParent(this);; 635 fYaxis.SetParent(this);; 636 fZaxis.SetParent(this);; 637 UseCurrentStyle();; 638}; 639 ; 640////////////////////////////////////////////////////////////////////////////////; 641/// Histogram default destructor.; 642 ; 643TH1::~TH1(); 644{; 645 if (ROOT::Detail::HasBeenDeleted(this)) {; 646 return;; 647 }; 648 delete[] fIntegral;; 649 fIntegral = nullptr;; 650 delete[] fBuffer;; 651 fBuffer = nullptr;; 652 if (fFunctions) {; 653 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 654 ; 655 fFunctions->SetBit(kInvalidObject);; 656 TObject* obj = nullptr;; 657 //special logic to support the case where the same object is; 658 //added multiple times in fFunctions.; 659 //This case happens when the same object is added with different; 660 //drawing modes; 661 //In the loop below we must be careful with objects (eg TCutG) that may; 662 // have been added to the list of functions of several histograms; 663 //and may have been already deleted.; 664 while ((obj = fFunctions->First())) {; 665 while(fFunctions->Remove(obj)) { }; 666 if (ROOT::Detail::HasBeenDeleted(obj)) {; 667 break;; 668 }; 669 delete obj;; 670 obj = nullptr;; 671 }; 672 delete fFunctions;; 673 fFunctions = nullptr;; 674 }; 675 if (fDirectory) {; 676 fDirectory->Remove(this);; 677 fDirectory = nullptr;; 678 }; 679 delete fPainter;; 680 fPainter = nullptr;; 681}; 682 ; 683////////////////////////////////////////////////////////////////////////////////; 684/// Constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:27427,log,logic,27427,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['log'],['logic']
Testability,"133 virtual TObject *FindObject(const char *name) const;; 134 virtual TObject *FindObject(const TObject *obj) const;; 135 virtual Option_t *GetDrawOption() const;; 136 virtual UInt_t GetUniqueID() const;; 137 virtual const char *GetName() const;; 138 virtual const char *GetIconName() const;; 139 virtual Option_t *GetOption() const { return """"; }; 140 virtual char *GetObjectInfo(Int_t px, Int_t py) const;; 141 virtual const char *GetTitle() const;; 142 virtual Bool_t HandleTimer(TTimer *timer);; 143 Bool_t HasInconsistentHash() const;; 144 virtual ULong_t Hash() const;; 145 virtual Bool_t InheritsFrom(const char *classname) const;; 146 virtual Bool_t InheritsFrom(const TClass *cl) const;; 147 virtual void Inspect() const; // *MENU*; 148 virtual Bool_t IsFolder() const;; 149 virtual Bool_t IsEqual(const TObject *obj) const;; 150 virtual Bool_t IsSortable() const { return kFALSE; }; 151 ; 152 R__ALWAYS_INLINE Bool_t IsOnHeap() const { return TestBit(kIsOnHeap); }; 153 R__ALWAYS_INLINE Bool_t IsZombie() const { return TestBit(kZombie); }; 154 ; 155 virtual Bool_t Notify();; 156 virtual void ls(Option_t *option="""") const;; 157 virtual void Paint(Option_t *option="""");; 158 virtual void Pop();; 159 virtual void Print(Option_t *option="""") const;; 160 virtual Int_t Read(const char *name);; 161 virtual void RecursiveRemove(TObject *obj);; 162 virtual void SaveAs(const char *filename="""",Option_t *option="""") const; // *MENU*; 163 virtual void SavePrimitive(std::ostream &out, Option_t *option = """");; 164 virtual void SetDrawOption(Option_t *option=""""); // *MENU*; 165 virtual void SetUniqueID(UInt_t uid);; 166 virtual void UseCurrentStyle();; 167 virtual Int_t Write(const char *name = nullptr, Int_t option = 0, Int_t bufsize = 0);; 168 virtual Int_t Write(const char *name = nullptr, Int_t option = 0, Int_t bufsize = 0) const;; 169 ; 170 /// IsDestructed; 171 ///; 172 /// \note This function must be non-virtual as it can be used on destructed (but; 173 /// not yet modified) memory.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:6495,Test,TestBit,6495,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['Test'],['TestBit']
Testability,135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error found - save the configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:105700,Test,Test,105700,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,135.176 nsig=129.13 sig1frac=0.899393; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-677.604) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.766597 a1=-0.547838 mean=5.03836 nbkg=119.039 nsig=121.817 sig1frac=0.213703; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 130; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.527582 a1=-0.893856 mean=5.24753 nbkg=162.951 nsig=65.9357 sig1frac=0.970262; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.516095 a1=-0.955515 mean=5.14443 nbkg=157.502 nsig=97.2821 sig1frac=0.174928; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.510348 a1=-0.776595 mean=5.09286 nbkg=154.805 nsig=114.979 sig1frac=0.0496841; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 120; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 110; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-796.54) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.702991 a1=-0.414346 mean=5.11911 nbkg=145.466 nsig=141.134 sig1frac=0.532895; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Genera,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:25765,log,log,25765,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _| _| _| _| _| _|_|_|_| "" << Endl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""_______________________________________"" << Color(""reset"") << Endl;; 1413 logger << kINFO << """" << Color(""blue""); 1414 << Color(""red_bgd"") << Color(""bwhite"") << "" // "" << Color(""reset""); 1415 << Color(""white"") << Color(""blue_bgd""); 1416 << ""|\\ /|| \\ // /\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\ "" << Color(""reset"") << Endl;; 1417 logger << kINFO << """"<< Color(""blue""); 1418 << Color(""red_bgd"") << Color(""white"") << """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:49366,log,logger,49366,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""_______________________________________"" << Color(""reset"") << Endl;; 1413 logger << kINFO << """" << Color(""blue""); 1414 << Color(""red_bgd"") << Color(""bwhite"") << "" // "" << Color(""reset""); 1415 << Color(""white"") << Color(""blue_bgd""); 1416 << ""|\\ /|| \\ // /\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\ "" << Color(""reset"") << Endl;; 1417 logger << kINFO << """"<< Color(""blue""); 1418 << Color(""red_bgd"") << Color(""white"") << ""// "" << Color(""reset""); 1419 << Color(""white"") << Color(""blue_bgd""); 1420 << ""| \\/ || \\// /--\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\"" << Color(""reset"") << Endl;; 1421 break;; 1422 ; 1423 case kOriginalWelcomeMsgBW:; 1424 logger << kINFO << """"; 1425 << ""______________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:49629,log,logger,49629,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"14 ; 4015 for (Int_t i=0;i<fNcuts;i++) {; 4016 if (fCutsOpt[i] > 0) {; 4017 if (!fCuts[i]->IsInside(x,y)) return kFALSE;; 4018 } else {; 4019 if (fCuts[i]->IsInside(x,y)) return kFALSE;; 4020 }; 4021 }; 4022 return kTRUE;; 4023}; 4024 ; 4025////////////////////////////////////////////////////////////////////////////////; 4026/// Decode string `choptin` and fill Hoption structure.; 4027 ; 4028Int_t THistPainter::MakeChopt(Option_t *choptin); 4029{; 4030 ; 4031 char *l;; 4032 char chopt[128];; 4033 Int_t nch = strlen(choptin);; 4034 strlcpy(chopt,choptin,128);; 4035 Int_t hdim = fH->GetDimension();; 4036 Bool_t explicitColor = kFALSE;; 4037 ; 4038 Hoption.Axis = Hoption.Bar = Hoption.Curve = Hoption.Error = 0;; 4039 Hoption.Hist = Hoption.Line = Hoption.Mark = Hoption.Fill = 0;; 4040 Hoption.Same = Hoption.Func = Hoption.Scat = Hoption.Star = 0;; 4041 Hoption.Arrow = Hoption.Box = Hoption.Text = Hoption.Color = 0;; 4042 Hoption.Contour = Hoption.Logx = Hoption.Logy = Hoption.Logz = 0;; 4043 Hoption.Lego = Hoption.Surf = Hoption.Off = Hoption.Tri = 0;; 4044 Hoption.Proj = Hoption.AxisPos = Hoption.Spec = Hoption.Pie = 0;; 4045 Hoption.Candle = 0;; 4046 ; 4047 // special 2D options; 4048 Hoption.List = 0;; 4049 Hoption.Zscale = 0;; 4050 Hoption.FrontBox = 1;; 4051 Hoption.BackBox = 1;; 4052 Hoption.System = kCARTESIAN;; 4053 ; 4054 Hoption.Zero = 0;; 4055 ; 4056 Hoption.MinimumZero = gStyle->GetHistMinimumZero() ? 1 : 0;; 4057 ; 4058 //check for graphical cuts; 4059 MakeCuts(chopt);; 4060 ; 4061 for (Int_t i=0;i<nch;i++) chopt[i] = toupper(chopt[i]);; 4062 if (hdim > 1) Hoption.Color = 1; // Default drawing option for 2D and 3D histograms; 4063 if (!nch) Hoption.Hist = 1;; 4064 if (fFunctions->First()) Hoption.Func = 1;; 4065 if (fH->GetSumw2N() && hdim == 1) Hoption.Error = 2;; 4066 ; 4067 char *l1 = strstr(chopt,""PFC""); // Automatic Fill Color; 4068 char *l2 = strstr(chopt,""PLC""); // Automatic Line Color; 4069 char *l3 = strstr(chopt,""PMC""); // Automatic Marker Color;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:156241,Log,Logz,156241,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"14 return TMath::Abs(x1 - x0);; 515}; 516 ; 517////////////////////////////////////////////////////////////////////////////////; 518/// Get Y size.; 519 ; 520Double_t TMathText::GetYsize(void); 521{; 522 const TString newText = GetTitle();; 523 const Int_t length = newText.Length();; 524 const Char_t *text = newText.Data();; 525 const Double_t size = GetTextSize();; 526 const Double_t angle = GetTextAngle();; 527 ; 528 Double_t x0;; 529 Double_t y0;; 530 Double_t x1;; 531 Double_t y1;; 532 ; 533 GetSize(x0, y0, x1, y1, size, angle, text, length);; 534 ; 535 return TMath::Abs(y0 - y1);; 536}; 537 ; 538////////////////////////////////////////////////////////////////////////////////; 539/// Make a copy of this object with the new parameters; 540/// and copy object attributes.; 541 ; 542TMathText *TMathText::DrawMathText(Double_t x, Double_t y, const char *text); 543{; 544 TMathText *newtext = new TMathText(x, y, text);; 545 TAttText::Copy(*newtext);; 546 ; 547 newtext->SetBit(kCanDelete);; 548 if (TestBit(kTextNDC)) newtext->SetNDC();; 549 newtext->AppendPad();; 550 ; 551 return newtext;; 552}; 553 ; 554////////////////////////////////////////////////////////////////////////////////; 555/// Paint text.; 556 ; 557void TMathText::Paint(Option_t *); 558{; 559 if (!gPad) return;; 560 Double_t xsave = fX;; 561 Double_t ysave = fY;; 562 ; 563 if (TestBit(kTextNDC)) {; 564 fX = gPad->GetX1() + xsave * (gPad->GetX2() - gPad->GetX1());; 565 fY = gPad->GetY1() + ysave * (gPad->GetY2() - gPad->GetY1());; 566 PaintMathText(fX, fY, GetTextAngle(), GetTextSize(), GetTitle());; 567 } else {; 568 PaintMathText(gPad->XtoPad(fX), gPad->YtoPad(fY),; 569 GetTextAngle(), GetTextSize(), GetTitle());; 570 }; 571 fX = xsave;; 572 fY = ysave;; 573}; 574 ; 575////////////////////////////////////////////////////////////////////////////////; 576/// Paint text (used by Paint()).; 577 ; 578void TMathText::PaintMathText(Double_t x, Double_t y, Double_t angle,; 579 Double_t size, const Char_t *text1);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMathText_8cxx_source.html:17373,Test,TestBit,17373,doc/master/TMathText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMathText_8cxx_source.html,1,['Test'],['TestBit']
Testability,"14/// delete f2;; 4915/// f2 = 0;; 4916/// delete f1;; 4917/// f1 = 0;; 4918/// ~~~; 4919/// An example of a branch with an object allocated by us,; 4920/// but owned by the caller:; 4921/// ~~~ {.cpp}; 4922/// TFile* f = new TFile(""myfile.root"", ""recreate"");; 4923/// TTree* t = new TTree(""t"", ""A test tree.""); 4924/// Event* event = 0;; 4925/// TBranchElement* br = t->Branch(""event."", &event);; 4926/// for (Int_t i = 0; i < 10; ++i) {; 4927/// ... Fill event with meaningful data in some way.; 4928/// t->Fill();; 4929/// }; 4930/// t->Write();; 4931/// delete event;; 4932/// event = 0;; 4933/// delete f;; 4934/// f = 0;; 4935/// ~~~; 4936/// Notice that the only difference between this example; 4937/// and the following example is that the event pointer; 4938/// is zero when the branch is created.; 4939///; 4940/// An example of a branch with an object allocated and; 4941/// owned by the caller:; 4942/// ~~~ {.cpp}; 4943/// TFile* f = new TFile(""myfile.root"", ""recreate"");; 4944/// TTree* t = new TTree(""t"", ""A test tree.""); 4945/// Event* event = new Event();; 4946/// TBranchElement* br = t->Branch(""event."", &event);; 4947/// for (Int_t i = 0; i < 10; ++i) {; 4948/// ... Fill event with meaningful data in some way.; 4949/// t->Fill();; 4950/// }; 4951/// t->Write();; 4952/// delete event;; 4953/// event = 0;; 4954/// delete f;; 4955/// f = 0;; 4956/// ~~~; 4957/// If AutoDelete is on (see TBranch::SetAutoDelete),; 4958/// the top level objet will be deleted and recreate; 4959/// each time an entry is read, whether or not the; 4960/// TTree owns the object.; 4961 ; 4962void TBranchElement::SetAddress(void* addr); 4963{; 4964 SetAddressImpl(addr, (addr == nullptr));; 4965}; 4966 ; 4967/// See TBranchElement::SetAddress.; 4968/// If implied is true, we do not over-ride existing address for; 4969/// sub-branches.; 4970void TBranchElement::SetAddressImpl(void* addr, bool implied); 4971{; 4972 //; 4973 // Don't bother if we are disabled.; 4974 //; 4975 ; 4976 if (TestBit(kD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:182707,test,test,182707,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['test'],['test']
Testability,"142 gPad->PaintLine(xr2, y - ty, xr2, y + ty);; 3143 }; 3144 }; 3145 }; 3146 }; 3147 }; 3148 ; 3149 if (DrawMarker && !DrawAxis); 3150 PaintGraphSimple(tg, options[0].Data());; 3151 gPad->ResetBit(TGraph::kClipFrame);; 3152 ; 3153 TGraph tgDummy;; 3154 tg->TAttFill::Copy(tgDummy);; 3155 tg->TAttLine::Copy(tgDummy);; 3156 tg->TAttMarker::Copy(tgDummy);; 3157 ; 3158 for (Int_t j = 0; j < NYErrors; j++); 3159 if (Option3[j] && DrawErrors[j]) {; 3160 if (IndividualStyles) {; 3161 tg->GetAttFill(j)->Copy(tgDummy);; 3162 tg->GetAttLine(j)->Copy(tgDummy);; 3163 }; 3164 ; 3165 Int_t logx = gPad->GetLogx();; 3166 Int_t logy = gPad->GetLogy();; 3167 gPad->SetLogx(0);; 3168 gPad->SetLogy(0);; 3169 if (Option4[j]); 3170 PaintGraph(&tgDummy, 2 * NPointsInside, xline.data(), yline[j].data(), ""FC"");; 3171 else; 3172 PaintGraph(&tgDummy, 2 * NPointsInside, xline.data(), yline[j].data(), ""F"");; 3173 gPad->SetLogx(logx);; 3174 gPad->SetLogy(logy);; 3175 }; 3176 ; 3177}; 3178 ; 3179////////////////////////////////////////////////////////////////////////////////; 3180/// [Paint this TGraphBentErrors with its current attributes.](\ref GrP3); 3181 ; 3182void TGraphPainter::PaintGraphBentErrors(TGraph *theGraph, Option_t *option); 3183{; 3184 ; 3185 std::vector<Double_t> xline, yline;; 3186 Int_t if1 = 0;; 3187 Int_t if2 = 0;; 3188 Double_t xb[4], yb[4];; 3189 ; 3190 const Int_t kBASEMARKER=8;; 3191 static Float_t cxx[30] = {1.0,1.0,0.5,0.5,1.0,1.0,0.5,0.6,1.0,0.5,0.5,1.0,0.5,0.6,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,1.0};; 3192 static Float_t cyy[30] = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,1.0};; 3193 Int_t theNpoints = theGraph->GetN();; 3194 Double_t *theX = theGraph->GetX();; 3195 Double_t *theY = theGraph->GetY();; 3196 Double_t *theEXlow = theGraph->GetEXlow(); if (!theEXlow) return;; 3197 Double_t *theEYlow = theGraph->GetEYlow(); if (!theEYlow) return;; 3198 Double_t *theEXhigh = th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:111541,log,logx,111541,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['log'],"['logx', 'logy']"
Testability,"143 ComputeSums();; 144 }; 145 ; 146 /**; 147 constructor from external data for 3D with errors on coordinate and value; 148 */; 149 BinData::BinData(unsigned int n, const double * dataX, const double * dataY,; 150 const double * dataZ, const double * val, const double * ex ,; 151 const double * ey , const double * ez , const double * eval ) :; 152 FitData( n, dataX, dataY, dataZ ),; 153 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 154 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 155 {; 156 assert( val );; 157 fDataPtr = val;; 158 ; 159 if ( nullptr != eval ); 160 {; 161 fDataErrorPtr = eval;; 162 ; 163 fErrorType = kValueError;; 164 ; 165 if ( nullptr != ex || nullptr != ey || nullptr != ez ); 166 {; 167 fCoordErrorsPtr.resize( 3 );; 168 ; 169 fCoordErrorsPtr[0] = ex;; 170 fCoordErrorsPtr[1] = ey;; 171 fCoordErrorsPtr[2] = ez;; 172 ; 173 fErrorType = kCoordError;; 174 }; 175 }; 176 else; 177 {; 178 fErrorType = kNoError;; 179 }; 180 ; 181 fpTmpCoordErrorVector = new double [ fDim ];; 182 ComputeSums();; 183 }; 184 ; 185 /**; 186 destructor; 187 */; 188 BinData::~BinData(); 189 {; 190 assert( fMaxPoints == 0 || fWrapped == fData.empty() );; 191 ; 192 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 193 kAsymError == fErrorType || kNoError == fErrorType );; 194 assert( fMaxPoints == 0 || fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 195 assert( fMaxPoints == 0 || fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 196 assert( fMaxPoints == 0 || fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 197 assert( fMaxPoints == 0 || fDataErrorLow.empty() == fDataErrorHigh.empty() );; 198 assert( fMaxPoints == 0 || fData.empty() || &fData.front() == fDataPtr );; 199 ; 200 for ( unsigned int i=0; i < fDim; i++ ); 201 {; 202 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 203 }; 204 ; 205 if ( fpTmpBinEdge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:5096,assert,assert,5096,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"146 of file TGLViewer.h. ◆ fCameraOverlay. TGLCameraOverlay* TGLViewer::fCameraOverlay. protected . reference marker on? ; Definition at line 151 of file TGLViewer.h. ◆ fClipSet. TGLClipSet* TGLViewer::fClipSet. protected . Definition at line 109 of file TGLViewer.h. ◆ fContextMenu. TContextMenu* TGLViewer::fContextMenu. protected . external pad - remove replace with signal ; Definition at line 81 of file TGLViewer.h. ◆ fCurrentCamera. TGLCamera* TGLViewer::fCurrentCamera. protected . Definition at line 96 of file TGLViewer.h. ◆ fCurrentOvlElm. TGLOverlayElement* TGLViewer::fCurrentOvlElm. protected . Definition at line 116 of file TGLViewer.h. ◆ fCurrentSelRec. TGLSelectRecord TGLViewer::fCurrentSelRec. protected . Definition at line 111 of file TGLViewer.h. ◆ fDarkColorSet. TGLColorSet TGLViewer::fDarkColorSet. protected . viewport - drawn area ; Definition at line 140 of file TGLViewer.h. ◆ fDebugMode. Bool_t TGLViewer::fDebugMode. protected . cache logicals during scene rebuilds ; Definition at line 156 of file TGLViewer.h. ◆ fDragAction. EDragAction TGLViewer::fDragAction. protected . Definition at line 132 of file TGLViewer.h. ◆ fDrawCameraCenter. Bool_t TGLViewer::fDrawCameraCenter. protected . reference position ; Definition at line 150 of file TGLViewer.h. ◆ fEventHandler. TGEventHandler* TGLViewer::fEventHandler. protected . select record from last overlay select ; Definition at line 119 of file TGLViewer.h. ◆ fFader. Float_t TGLViewer::fFader. protected . default file-name for SavePicture() ; Definition at line 159 of file TGLViewer.h. ◆ fgAxisLabelScale. Float_t TGLViewer::fgAxisLabelScale = 1. staticprotected . name says it all ; Definition at line 163 of file TGLViewer.h. ◆ fgDefaultColorSet. TGLColorSet TGLViewer::fgDefaultColorSet. staticprotected . fade the view (0 - no fade/default, 1 - full fade/no rendering done) ; Definition at line 161 of file TGLViewer.h. ◆ fGedEditor. TGedEditor* TGLViewer::fGedEditor. protected . event handler ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:73404,log,logicals,73404,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['log'],['logicals']
Testability,"15 continue;; 2116 }; 2117 ; 2118 TMVA::DataSet *dataset = theMethod->Data();; 2119 TMVA::Results *results = dataset->GetResults(methodName, Types::kTesting, this->fAnalysisType);; 2120 std::vector<Bool_t> *mvaResType =; 2121 dynamic_cast<ResultsClassification *>(results)->GetValueVectorTypes();; 2122 ; 2123 Double_t rocIntegral = 0.0;; 2124 if (mvaResType->size() != 0) {; 2125 rocIntegral = GetROCIntegral(datasetName, methodName);; 2126 }; 2127 ; 2128 if (sep[k][i] < 0 || sig[k][i] < 0) {; 2129 // cannot compute separation/significance -> no MVA (usually for Cuts); 2130 Log() << kINFO << Form(""%-13s %-15s: %#1.3f"", datasetName.Data(), methodName.Data(), effArea[k][i]); 2131 << Endl;; 2132 ; 2133 // Log() << kDEBUG << Form(""%-20s %-15s: %#1.3f(%02i) %#1.3f(%02i) %#1.3f(%02i); 2134 // %#1.3f %#1.3f | -- --"",; 2135 // datasetName.Data(),; 2136 // methodName.Data(),; 2137 // eff01[k][i], Int_t(1000*eff01err[k][i]),; 2138 // eff10[k][i], Int_t(1000*eff10err[k][i]),; 2139 // eff30[k][i], Int_t(1000*eff30err[k][i]),; 2140 // effArea[k][i],rocIntegral) << Endl;; 2141 } else {; 2142 Log() << kINFO << Form(""%-13s %-15s: %#1.3f"", datasetName.Data(), methodName.Data(), rocIntegral); 2143 << Endl;; 2144 // Log() << kDEBUG << Form(""%-20s %-15s: %#1.3f(%02i) %#1.3f(%02i) %#1.3f(%02i); 2145 // %#1.3f %#1.3f | %#1.3f %#1.3f"",; 2146 // datasetName.Data(),; 2147 // methodName.Data(),; 2148 // eff01[k][i], Int_t(1000*eff01err[k][i]),; 2149 // eff10[k][i], Int_t(1000*eff10err[k][i]),; 2150 // eff30[k][i], Int_t(1000*eff30err[k][i]),; 2151 // effArea[k][i],rocIntegral,; 2152 // sep[k][i], sig[k][i]) << Endl;; 2153 }; 2154 }; 2155 }; 2156 Log() << kINFO << hLine << Endl;; 2157 Log() << kINFO << Endl;; 2158 Log() << kINFO << ""Testing efficiency compared to training efficiency (overtraining check)"" << Endl;; 2159 Log() << kINFO << hLine << Endl;; 2160 Log() << kINFO; 2161 << ""DataSet MVA Signal efficiency: from test sample (from training sample) ""; 2162 << Endl;; 2163 Log() << kINFO << ""Nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:90399,Log,Log,90399,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,152 of file MethodPyTorch.cxx. ◆ ReadModelFromFile(). void MethodPyTorch::ReadModelFromFile ; (; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 648 of file MethodPyTorch.cxx. ◆ ReadWeightsFromStream() [1/2]. virtual void TMVA::MethodPyTorch::ReadWeightsFromStream ; (; std::istream & ; ). inlinevirtual . Implements TMVA::PyMethodBase.; Definition at line 67 of file MethodPyTorch.h. ◆ ReadWeightsFromStream() [2/2]. virtual void TMVA::MethodPyTorch::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::PyMethodBase.; Definition at line 68 of file MethodPyTorch.h. ◆ ReadWeightsFromXML(). virtual void TMVA::MethodPyTorch::ReadWeightsFromXML ; (; void * ; ). inlinevirtual . Implements TMVA::PyMethodBase.; Definition at line 66 of file MethodPyTorch.h. ◆ SetupPyTorchModel(). void MethodPyTorch::SetupPyTorchModel ; (; Bool_t ; loadTrainedModel). private . Definition at line 190 of file MethodPyTorch.cxx. ◆ TestClassification(). void MethodPyTorch::TestClassification ; (; ). virtual . initialization ; Reimplemented from TMVA::MethodBase.; Definition at line 507 of file MethodPyTorch.cxx. ◆ Train(). void MethodPyTorch::Train ; (; void ; ). virtual . Implements TMVA::PyMethodBase.; Definition at line 301 of file MethodPyTorch.cxx. Member Data Documentation. ◆ fBatchSize. UInt_t TMVA::MethodPyTorch::fBatchSize {0}. private . Definition at line 77 of file MethodPyTorch.h. ◆ fContinueTraining. Bool_t TMVA::MethodPyTorch::fContinueTraining. private . Definition at line 81 of file MethodPyTorch.h. ◆ fFilenameModel. TString TMVA::MethodPyTorch::fFilenameModel. private . Definition at line 76 of file MethodPyTorch.h. ◆ fFilenameTrainedModel. TString TMVA::MethodPyTorch::fFilenameTrainedModel. private . Definition at line 94 of file MethodPyTorch.h. ◆ fLearningRateSchedule. TString TMVA::MethodPyTorch::fLearningRateSchedule. private . Definition at line 83 of file MethodPyTorch.h. ◆ fModelIsSetup. bool TMVA::MethodPyTorch::fModelIsSetup = fal,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html:34010,Test,TestClassification,34010,doc/master/classTMVA_1_1MethodPyTorch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html,1,['Test'],['TestClassification']
Testability,"1556736; // months (average # days); 1231 rangeOffset = (Double_t) ((Long_t)(timeoffset)%rangeBase);; 1232 if (range>31536000) {; 1233 tp0 = gmtime(&timetp);; 1234 tp0->tm_mon = 0;; 1235 tp0->tm_mday = 1;; 1236 tp0->tm_hour = 0;; 1237 tp0->tm_min = 0;; 1238 tp0->tm_sec = 0;; 1239 tp0->tm_isdst = 1; // daylight saving time is on.; 1240 rangeBase = (timetp-mktime(tp0)); // years; 1241 rangeOffset = (Double_t) (rangeBase);; 1242 }; 1243 wmax += rangeOffset;; 1244 wmin += rangeOffset;; 1245 }; 1246 ; 1247// Determine number of divisions 1, 2 and 3 and the maximum digits for this axis; 1248 n1a = (ndiv%100);; 1249 n2a = (ndiv%10000 - n1a)/100;; 1250 n3a = (ndiv%1000000 - n2a -n1a)/10000;; 1251 nn3 = TMath::Max(n3a,1);; 1252 nn2 = TMath::Max(n2a,1)*nn3;; 1253 nn1 = TMath::Max(n1a,1)*nn2+1;; 1254 nticks = nn1;; 1255 maxDigits = (ndiv/1000000);; 1256 if (maxDigits==0) maxDigits = gStyle->GetAxisMaxDigits();; 1257 ; 1258// Axis bining optimisation is ignored if:; 1259// - the first and the last label are equal; 1260// - the number of divisions is 0; 1261// - less than 1 primary division is requested; 1262// - logarithmic scale is requested; 1263 ; 1264 if (wmin == wmax || ndiv == 0 || n1a <= 1 || optionLog) {; 1265 optionNoopt = 1;; 1266 optionInt = 0;; 1267 }; 1268 ; 1269// Axis bining optimisation; 1270 if ( (wmax-wmin) < 1 && optionInt) {; 1271 Error(where, ""option I not available"");; 1272 optionInt = 0;; 1273 }; 1274 if (!optionNoopt || optionInt ) {; 1275 ; 1276// Primary divisions optimisation; 1277// When integer labelling is required, Optimize is invoked first; 1278// and only if the result is not an integer labelling, AdjustBinSize is invoked.; 1279 ; 1280 THLimitsFinder::Optimize(wmin,wmax,n1a,binLow,binHigh,nbins,binWidth,fChopt.Data());; 1281 if (optionInt) {; 1282 if (binLow != Double_t(int(binLow)) || binWidth != Double_t(int(binWidth))) {; 1283 AdjustBinSize(wmin,wmax,n1a,binLow,binHigh,nbins,binWidth);; 1284 }; 1285 }; 1286 if ((wmin-binLow) > epsilon) { binLo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:44499,log,logarithmic,44499,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['log'],['logarithmic']
Testability,"158 of file DataSet.h. ◆ fCurrentEventIdx. Long64_t TMVA::DataSet::fCurrentEventIdx. mutableprivate . Definition at line 146 of file DataSet.h. ◆ fCurrentTreeIdx. UInt_t TMVA::DataSet::fCurrentTreeIdx. mutableprivate . Definition at line 145 of file DataSet.h. ◆ fdsi. const DataSetInfo* TMVA::DataSet::fdsi. private . -> datasetinfo that created this dataset ; Definition at line 139 of file DataSet.h. ◆ fEventCollection. std::vector< std::vector<Event*> > TMVA::DataSet::fEventCollection. private . list of events for training/testing/... ; Definition at line 141 of file DataSet.h. ◆ fHasNegativeEventWeights. Bool_t TMVA::DataSet::fHasNegativeEventWeights. private . true if at least one signal or bkg event has negative weight ; Definition at line 161 of file DataSet.h. ◆ fLogger. MsgLogger* TMVA::DataSet::fLogger. mutableprivate . ! message logger ; Definition at line 163 of file DataSet.h. ◆ fResults. std::vector< std::map< TString, Results* > > TMVA::DataSet::fResults. private . ! [train/test/...][method-identifier] ; Definition at line 143 of file DataSet.h. ◆ fSampling. std::vector<Char_t> TMVA::DataSet::fSampling. private . random or importance sampling (not all events are taken) !! Bool_t are stored ( no std::vector<bool> taken for speed (performance) issues ) ; Definition at line 149 of file DataSet.h. ◆ fSamplingEventList. std::vector< std::vector< std::pair< Float_t, Long64_t > > > TMVA::DataSet::fSamplingEventList. mutableprivate . weights and indices for sampling ; Definition at line 152 of file DataSet.h. ◆ fSamplingNEvents. std::vector<Int_t> TMVA::DataSet::fSamplingNEvents. private . number of events which should be sampled ; Definition at line 150 of file DataSet.h. ◆ fSamplingRandom. TRandom3* TMVA::DataSet::fSamplingRandom. private . -> random generator for sampling ; Definition at line 154 of file DataSet.h. ◆ fSamplingSelected. std::vector< std::vector< std::pair< Float_t, Long64_t > > > TMVA::DataSet::fSamplingSelected. mutableprivate . selected eve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:26590,test,test,26590,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['test'],['test']
Testability,"16 }; 1017}; 1018 ; 1019////////////////////////////////////////////////////////////////////////////////; 1020/// compute signal and background efficiencies from PDFs; 1021/// for given cut sample; 1022 ; 1023void TMVA::MethodCuts::GetEffsfromPDFs( Double_t* cutMin, Double_t* cutMax,; 1024 Double_t& effS, Double_t& effB ); 1025{; 1026 effS = 1.0;; 1027 effB = 1.0;; 1028 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 1029 effS *= (*fVarPdfS)[ivar]->GetIntegral( cutMin[ivar], cutMax[ivar] );; 1030 effB *= (*fVarPdfB)[ivar]->GetIntegral( cutMin[ivar], cutMax[ivar] );; 1031 }; 1032 ; 1033 // quick fix to prevent from efficiencies < 0; 1034 if( effS < 0.0 ) {; 1035 effS = 0.0;; 1036 if( !fNegEffWarning ) Log() << kWARNING << ""Negative signal efficiency found and set to 0. This is probably due to many events with negative weights in a certain cut-region."" << Endl;; 1037 fNegEffWarning = kTRUE;; 1038 }; 1039 if( effB < 0.0 ) {; 1040 effB = 0.0;; 1041 if( !fNegEffWarning ) Log() << kWARNING << ""Negative background efficiency found and set to 0. This is probably due to many events with negative weights in a certain cut-region."" << Endl;; 1042 fNegEffWarning = kTRUE;; 1043 }; 1044}; 1045 ; 1046////////////////////////////////////////////////////////////////////////////////; 1047/// compute signal and background efficiencies from event counting; 1048/// for given cut sample; 1049 ; 1050void TMVA::MethodCuts::GetEffsfromSelection( Double_t* cutMin, Double_t* cutMax,; 1051 Double_t& effS, Double_t& effB); 1052{; 1053 Float_t nTotS = 0, nTotB = 0;; 1054 Float_t nSelS = 0, nSelB = 0;; 1055 ; 1056 Volume* volume = new Volume( cutMin, cutMax, GetNvar() );; 1057 ; 1058 // search for all events lying in the volume, and add up their weights; 1059 nSelS = fBinaryTreeS->SearchVolume( volume );; 1060 nSelB = fBinaryTreeB->SearchVolume( volume );; 1061 ; 1062 delete volume;; 1063 ; 1064 // total number of ""events"" (sum of weights) as reference to compute efficiency; 1065 nTotS = fBinaryTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:38915,Log,Log,38915,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability,"161 of file RooMsgService.h. ◆ getStreamStatus(). bool RooMsgService::getStreamStatus ; (; Int_t ; id); const. Get activation status of stream with given unique ID. ; Definition at line 331 of file RooMsgService.cxx. ◆ globalKillBelow(). RooFit::MsgLevel RooMsgService::globalKillBelow ; (; ); const. inline . Definition at line 170 of file RooMsgService.h. ◆ instance(). RooMsgService & RooMsgService::instance ; (; ). static . Return reference to singleton instance. ; Definition at line 345 of file RooMsgService.cxx. ◆ IsA(). TClass * RooMsgService::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 246 of file RooMsgService.h. ◆ isActive(). template<class T > . bool RooMsgService::isActive ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inline . Check if logging is active for given object/topic/RooFit::MsgLevel combination. ; Definition at line 186 of file RooMsgService.h. ◆ log() [1/3]. ostream & RooMsgService::log ; (; const RooAbsArg * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with RooAbsArg object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 419 of file RooMsgService.cxx. ◆ log() [2/3]. ostream & RooMsgService::log ; (; const TObject * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with TObject object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 456 of file RooMsgService.cxx. ◆ log() [3/3]. std::ostream & RooMsgService::log ; (; std::nullptr_t ; , . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; facility, . bool ; forceSkipPrefix = false . ). inline . Definition at line 180 of file RooMsgService.h. ◆ numStreams(). Int_t RooMsgService::numStre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:19898,log,log,19898,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['log'],['log']
Testability,"1715///; 1716/// typical length of text line:; 1717/// ""|--------------------------------------------------------------|""; 1718 ; 1719void TMVA::MethodCuts::GetHelpMessage() const; 1720{; 1721 TString bold = gConfig().WriteOptionsReference() ? ""<b>"" : """";; 1722 TString resbold = gConfig().WriteOptionsReference() ? ""</b>"" : """";; 1723 TString brk = gConfig().WriteOptionsReference() ? ""<br>"" : """";; 1724 ; 1725 Log() << Endl;; 1726 Log() << gTools().Color(""bold"") << ""--- Short description:"" << gTools().Color(""reset"") << Endl;; 1727 Log() << Endl;; 1728 Log() << ""The optimisation of rectangular cuts performed by TMVA maximises "" << Endl;; 1729 Log() << ""the background rejection at given signal efficiency, and scans "" << Endl;; 1730 Log() << ""over the full range of the latter quantity. Three optimisation"" << Endl;; 1731 Log() << ""methods are optional: Monte Carlo sampling (MC), a Genetics"" << Endl;; 1732 Log() << ""Algorithm (GA), and Simulated Annealing (SA). GA and SA are"" << Endl;; 1733 Log() << ""expected to perform best."" << Endl;; 1734 Log() << Endl;; 1735 Log() << ""The difficulty to find the optimal cuts strongly increases with"" << Endl;; 1736 Log() << ""the dimensionality (number of input variables) of the problem."" << Endl;; 1737 Log() << ""This behavior is due to the non-uniqueness of the solution space.""<< Endl;; 1738 Log() << Endl;; 1739 Log() << gTools().Color(""bold"") << ""--- Performance optimisation:"" << gTools().Color(""reset"") << Endl;; 1740 Log() << Endl;; 1741 Log() << ""If the dimensionality exceeds, say, 4 input variables, it is "" << Endl;; 1742 Log() << ""advisable to scrutinize the separation power of the variables,"" << Endl;; 1743 Log() << ""and to remove the weakest ones. If some among the input variables"" << Endl;; 1744 Log() << ""can be described by a single cut (e.g., because signal tends to be"" << Endl;; 1745 Log() << ""larger than background), this can be indicated to MethodCuts via"" << Endl;; 1746 Log() << ""the \""Fsmart\"" options (see option string). C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:67627,Log,Log,67627,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability,"172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integrandMin, . double ; integrandMax, . unsigned int ; protectNegative . ). inline . Definition at line 580 of file MathFuncs.h. ◆ polynomial(). template<bool pdfMode = false> . double RooFit::Detail::MathFuncs::polynomial ; (; double const * ; coeffs, . int ; nCoeffs, . int ; lowestOrder, . double ; x . ). inline . In pdfMode, a coefficient for the constant term of 1.0 is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:9276,log,logNormalStandard,9276,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['log'],['logNormalStandard']
Testability,175543 43692.5 5; : 933 Minimum Test error found - save the configuration ; : 933 | 4.07608 6.08713 0.0202588 0.00184594 43447.8 0; : 934 | 4.3998 6.10426 0.0204691 0.00178412 42815.1 1; : 935 | 4.23034 6.39854 0.0202977 0.00176426 43165.2 2; : 936 Minimum Test error found - save the configuration ; : 936 | 4.45077 5.93539 0.020128 0.0018336 43729.3 0; : 937 | 4.31583 6.35935 0.0203501 0.00176302 43040.6 1; : 938 Minimum Test error found - save the configuration ; : 938 | 4.1293 5.8271 0.0205749 0.0018749 42780.8 0; : 939 Minimum Test error found - save the configuration ; : 939 | 4.02273 5.7049 0.0206164 0.00186577 42665.2 0; : 940 | 3.91188 6.29174 0.0201055 0.00180854 43723.1 1; : 941 | 3.89757 5.80965 0.0203179 0.00179759 43195.8 2; : 942 | 3.94904 5.73464 0.0200877 0.00175468 43637.1 3; : 943 | 3.90362 5.73888 0.0200954 0.00175028 43608.4 4; : 944 | 3.87035 5.70718 0.0200345 0.0017513 43756.1 5; : 945 | 4.07017 5.95519 0.020321 0.00177709 43140.8 6; : 946 Minimum Test error found - save the configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test error found - save the configuration ; : 953 | 3.78482 5.22353 0.0202416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test er,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:109395,Test,Test,109395,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error found - save the configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.7864,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:105475,Test,Test,105475,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.35846 6.60136 0.0200632 0.00176343 43716.3 1; : 920 | 4.30933 6.53557 0.0200239 0.00175965 43801.4 2; : 921 Minimum Test error found - save the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195 0.0202769 0.00175908 43201.6 2; : 930 | 4.39879 6.60248 0.0204218 0.00176177 42872.3 3; : 931 | 4.17549 6.55946 0.0200581 0.00175886 43717.6 4; : 932 | 4.18849 6.67063 0.0200652 0.00175543 43692.5 5; : 933 Minimum Test error found - save the configuration ; : 933 | 4.07608 6.08713 0.0202588 0.00184594 43447.8 0; : 934 | 4.3998 6.10426 0.0204691 0.00178412 42815.1 1; : 935 | 4.23034 6.39854 0.0202977 0.00176426 43165.2 2; : 936 Minimum Test error found - save the configuration ; : 936 | 4.45077 5.93539 0.020128 0.0018336 43729.3 0; : 937 | 4.31583 6.35935 0.0203501 0.00176302 43040.6 1; : 938 Minimum Test error found - save the configuration ; : 938 | 4.1293 5.8271 0.0205749 0.0018749 42780.8 0; : 939 Minimum Test error found - save the configuration ; : 939 | 4.02273 5.7049 0.0206164 0.00186577 42665.2 0; : 940 | 3.91188 6.2917,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:108051,Test,Test,108051,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test error found - save the configuration ; : 800 | 10.3317 14.1583 0.0201165 0.00182126 43727.2 0; : 801 | 10.3503 14.2866 0.0200523 0.00175781 43729 1; : 802 | 10.3453 15.2815 0.0200406 0.00175563 43751.8 2; : 803 | 10.2123 14.6873 0.0200478 0.00175638 43736.3 3; : 804 | 10.1133 14.2109 0.0201368 0.00176313 43540.5 4; : 805 Minimum Test error found - save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:99127,Test,Test,99127,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,175856 43509.3 2; : 837 | 7.98319 11.3225 0.0201169 0.00175643 43571.8 3; : 838 | 7.66699 11.6657 0.0201662 0.00181142 43585.5 4; : 839 Minimum Test error found - save the configuration ; : 839 | 7.52525 10.9666 0.0202646 0.00182844 43392.9 0; : 840 | 7.48548 11.313 0.020051 0.00174873 43710.5 1; : 841 | 7.28024 11.1847 0.0200374 0.0017493 43744.4 2; : 842 | 7.18939 11.0082 0.0200397 0.00175322 43748.2 3; : 843 Minimum Test error found - save the configuration ; : 843 | 7.01613 10.4197 0.0201334 0.00182993 43707.5 0; : 844 | 6.83302 10.8151 0.020039 0.00176037 43767.1 1; : 845 | 6.97518 10.5462 0.0200409 0.00175987 43761.2 2; : 846 | 6.93317 10.5904 0.0200239 0.00176026 43802.8 3; : 847 | 6.86223 10.6492 0.0200268 0.00176058 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 0.0200333 0.00176264 43785.9 6; : 850 | 6.72856 10.6877 0.0200521 0.00176189 43739.2 7; : 851 | 6.84236 10.8522 0.0200238 0.00176009 43802.7 8; : 852 Minimum Test error found - save the configuration ; : 852 | 6.78011 10.0733 0.0201111 0.00182524 43749.6 0; : 853 Minimum Test error found - save the configuration ; : 853 | 6.53284 9.90736 0.0201187 0.00181829 43714.8 0; : 854 | 6.67108 10.0768 0.0205443 0.0017732 42618.8 1; : 855 | 6.58878 10.7427 0.0200637 0.00176264 43713.2 2; : 856 | 6.54513 10.3387 0.0200413 0.00176141 43764 3; : 857 Minimum Test error found - save the configuration ; : 857 | 6.43616 9.72218 0.020097 0.00182688 43787.4 0; : 858 | 6.34936 10.0458 0.0200349 0.00176193 43780.5 1; : 859 Minimum Test error found - save the configuration ; : 859 | 6.20554 9.48603 0.0201607 0.00183833 43662.6 0; : 860 | 6.16695 10.0812 0.0200598 0.00175295 43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:102269,Test,Test,102269,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,17637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91010,Test,Test,91010,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error found - save the configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:106203,Test,Test,106203,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"18 ; 319void TMVA::DataLoader::SetInputTreesFromEventAssignTrees(); 320{; 321 UInt_t size = fTrainAssignTree.size();; 322 for(UInt_t i=0; i<size; i++) {; 323 if(!UserAssignEvents(i)) continue;; 324 const TString& className = DefaultDataSetInfo().GetClassInfo(i)->GetName();; 325 SetWeightExpression( ""weight"", className );; 326 AddTree(fTrainAssignTree[i], className, 1.0, TCut(""""), Types::kTraining );; 327 AddTree(fTestAssignTree[i], className, 1.0, TCut(""""), Types::kTesting );; 328 }; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// number of signal events (used to compute significance); 333 ; 334void TMVA::DataLoader::AddTree( TTree* tree, const TString& className, Double_t weight,; 335 const TCut& cut, const TString& treetype ); 336{; 337 Types::ETreeType tt = Types::kMaxTreeType;; 338 TString tmpTreeType = treetype; tmpTreeType.ToLower();; 339 if (tmpTreeType.Contains( ""train"" ) && tmpTreeType.Contains( ""test"" )) tt = Types::kMaxTreeType;; 340 else if (tmpTreeType.Contains( ""train"" )) tt = Types::kTraining;; 341 else if (tmpTreeType.Contains( ""test"" )) tt = Types::kTesting;; 342 else {; 343 Log() << kFATAL << ""<AddTree> cannot interpret tree type: \"""" << treetype; 344 << ""\"" should be \""Training\"" or \""Test\"" or \""Training and Testing\"""" << Endl;; 345 }; 346 AddTree( tree, className, weight, cut, tt );; 347}; 348 ; 349////////////////////////////////////////////////////////////////////////////////; 350 ; 351void TMVA::DataLoader::AddTree( TTree* tree, const TString& className, Double_t weight,; 352 const TCut& cut, Types::ETreeType tt ); 353{; 354 if(!tree); 355 Log() << kFATAL << ""Tree does not exist (empty pointer)."" << Endl;; 356 ; 357 DefaultDataSetInfo().AddClass( className );; 358 ; 359 // set analysistype to ""kMulticlass"" if more than two classes and analysistype == kNoAnalysisType; 360 if( fAnalysisType == Types::kNoAnalysisType && DefaultDataSetInfo().GetNClasses() > 2 ); 361 fAnalysisType = Types::kM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:13045,test,test,13045,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,1,['test'],['test']
Testability,181141 43797.6 0; : 769 Minimum Test error found - save the configuration ; : 769 | 14.3366 17.8635 0.0200909 0.00180773 43756.2 0; : 770 Minimum Test error found - save the configuration ; : 770 | 14.5733 17.5465 0.0200968 0.00180191 43728 0; : 771 | 13.9827 17.8429 0.0200367 0.0017469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:96649,Test,Test,96649,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:90671,Test,Test,90671,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,19.039 nsig=121.817 sig1frac=0.213703; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 130; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.527582 a1=-0.893856 mean=5.24753 nbkg=162.951 nsig=65.9357 sig1frac=0.970262; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.516095 a1=-0.955515 mean=5.14443 nbkg=157.502 nsig=97.2821 sig1frac=0.174928; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.510348 a1=-0.776595 mean=5.09286 nbkg=154.805 nsig=114.979 sig1frac=0.0496841; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 120; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 110; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-796.54) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.702991 a1=-0.414346 mean=5.11911 nbkg=145.466 nsig=141.134 sig1frac=0.532895; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 100; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-920.777) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.726241 a1=-0.424659 mean=5.05565 nbkg=151.228 nsig=170.816 sig1frac=0.771802; RooAddPdf::model[ nbkg * bkg_over_bkg_I,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:26104,log,log,26104,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"190 Log() << std::setw(10) << ""Epoch"" << "" | ""; 1191 << std::setw(12) << ""Train Err.""; 1192 << std::setw(12) << ""Test Err.""; 1193 << std::setw(12) << ""GFLOP/s""; 1194 << std::setw(12) << ""Conv. Steps"" << Endl;; 1195 std::string separator(62, '-');; 1196 Log() << separator << Endl;; 1197 }; 1198 ; 1199 while (!converged); 1200 {; 1201 stepCount++;; 1202 // Perform minimization steps for a full epoch.; 1203 trainingData.Shuffle();; 1204 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1205 batches.clear();; 1206 for (size_t j = 0; j < nThreads; j++) {; 1207 batches.reserve(nThreads);; 1208 batches.push_back(trainingData.GetBatch());; 1209 }; 1210 if (settings.momentum > 0.0) {; 1211 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1212 } else {; 1213 minimizer.Step(net, nets, batches);; 1214 }; 1215 }; 1216 ; 1217 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1218 ; 1219 // Compute test error.; 1220 Double_t testError = 0.0;; 1221 for (auto batch : testData) {; 1222 auto inputMatrix = batch.GetInput();; 1223 auto outputMatrix = batch.GetOutput();; 1224 auto weightMatrix = batch.GetWeights();; 1225 testError += testNet.Loss(inputMatrix, outputMatrix, weightMatrix);; 1226 }; 1227 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1228 ; 1229 //Log the loss value; 1230 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1231 ; 1232 end = std::chrono::system_clock::now();; 1233 ; 1234 // Compute training error.; 1235 Double_t trainingError = 0.0;; 1236 for (auto batch : trainingData) {; 1237 auto inputMatrix = batch.GetInput();; 1238 auto outputMatrix = batch.GetOutput();; 1239 auto weightMatrix = batch.GetWeights();; 1240 trainingError += net.Loss(inputMatrix, outputMatrix, weightMatrix);; 1241 }; 1242 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1243 ; 1244 //Log the loss value; 1245 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1246 ; 1247 if (fInteractive){; 1248 fInteractive-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:43936,test,testData,43936,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testData']
Testability,"191 ; 192 void SetParameters(const double * p) override {; 193 unsigned int npar = NPar();; 194 std::copy(p, p+ npar, fParams.begin() );; 195 SetParValues(npar, p);; 196 }; 197 ; 198 unsigned int NPar() const override { return fParams.size(); }; 199 ; 200 unsigned int NDim() const override { return fDim; }; 201 ; 202// // re-implement this since is more efficient; 203// double operator() (const double * x, const double * p) {; 204// unsigned int n = fX.size();; 205// unsigned int npar = fParams.size();; 206// unsigned j = 0;; 207// return (*fFunc)( fX);; 208// }; 209 ; 210private:; 211 ; 212 /// evaluate the function (re-implement for being more efficient); 213 double DoEval(const double * x) const override {; 214 ; 215// std::cout << this << fDim << "" x : "";; 216// std::ostream_iterator<double> oix(std::cout,"" , "");; 217// std::copy(x, x+fDim, oix);; 218// std::cout << std::endl;; 219// std::cout << ""npar "" << npar << std::endl;; 220// std::cout << fVarIndices.size() << std::endl;; 221// assert ( fVarIndices.size() == fDim); // otherwise something is wrong; 222 ; 223 for (unsigned int i = 0; i < fDim; ++i) {; 224 unsigned int j = fVarIndices[i];; 225 assert ( j < NPar() + fDim);; 226 fX[ j ] = x[i];; 227 }; 228// std::cout << ""X : ("";; 229// std::ostream_iterator<double> oi(std::cout,"" , "");; 230// std::copy(fX.begin(), fX.end(), oi);; 231// std::cout << std::endl;; 232 ; 233 return (*fFunc)( fX.empty() ? nullptr : &fX.front() );; 234 }; 235 ; 236 ; 237 /**; 238 implement the required IParamFunction interface; 239 */; 240 double DoEvalPar(const double * x, const double * p ) const override {; 241 SetParValues(NPar(), p);; 242 return DoEval(x);; 243 }; 244 ; 245 ; 246 void DoInit() {; 247 // calculate variable indices and set in X the parameter values; 248 fVarIndices.reserve(fDim);; 249 unsigned int npar = NPar();; 250 for (unsigned int i = 0; i < npar + fDim; ++i) {; 251 bool isVar = true;; 252 for (unsigned int j = 0; j < npar; ++j) {; 253 if (fParIndices[j] == i)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedParamFunction_8h_source.html:7792,assert,assert,7792,doc/master/WrappedParamFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedParamFunction_8h_source.html,1,['assert'],['assert']
Testability,"193 virtual void Reset(){return;}; 194 ; 195 // classifier response:; 196 // some methods may return a per-event error estimate; 197 // error calculation is skipped if err==0; 198 virtual Double_t GetMvaValue( Double_t* errLower = nullptr, Double_t* errUpper = nullptr) = 0;; 199 ; 200 // signal/background classification response; 201 Double_t GetMvaValue( const TMVA::Event* const ev, Double_t* err = nullptr, Double_t* errUpper = nullptr );; 202 ; 203 protected:; 204 // helper function to set errors to -1; 205 void NoErrorCalc(Double_t* const err, Double_t* const errUpper);; 206 ; 207 // signal/background classification response for all current set of data; 208 virtual std::vector<Double_t> GetMvaValues(Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 209 // same as above but using a provided data set (used by MethodCategory); 210 virtual std::vector<Double_t> GetDataMvaValues(DataSet *data = nullptr, Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 211 ; 212 public:; 213 // regression response; 214 const std::vector<Float_t>& GetRegressionValues(const TMVA::Event* const ev){; 215 fTmpEvent = ev;; 216 const std::vector<Float_t>* ptr = &GetRegressionValues();; 217 fTmpEvent = nullptr;; 218 return (*ptr);; 219 }; 220 ; 221 virtual const std::vector<Float_t>& GetRegressionValues() {; 222 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 223 return (*ptr);; 224 }; 225 ; 226 // multiclass classification response; 227 virtual const std::vector<Float_t>& GetMulticlassValues() {; 228 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 229 return (*ptr);; 230 }; 231 ; 232 // Training history; 233 virtual const std::vector<Float_t>& GetTrainingHistory(const char* /*name*/ ) {; 234 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 235 return (*ptr);; 236 }; 237 ; 238 // probability of classifier response (mvaval) to be signal (requires ""CreateMvaPdf"" option set); 239 virtual Double_t GetProba( const Eve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:7810,log,logProgress,7810,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['log'],['logProgress']
Testability,"197; TStyle::SetCanvasDefWvoid SetCanvasDefW(Int_t w=700)Definition TStyle.h:347; TStyle::fStatFontStyle_t fStatFontFont style of Stats PaveLabel.Definition TStyle.h:109; TStyle::fLineStyleTString fLineStyle[30]String describing line style i (for postScript)Definition TStyle.h:130; TStyle::SetDateYvoid SetDateY(Float_t y=0.01)Definition TStyle.h:338; TStyle::fGridWidthWidth_t fGridWidthGrid line width.Definition TStyle.h:62; TStyle::fCandleBoxRangeDouble_t fCandleBoxRangeCandle plot, The fraction which is covered by the box (0 < x < 1), default 0.5.Definition TStyle.h:142; TStyle::GetTitleOffsetFloat_t GetTitleOffset(Option_t *axis=""X"") constReturn title offset.Definition TStyle.cxx:1228; TStyle::GetHistFillColorColor_t GetHistFillColor() constDefinition TStyle.h:232; TStyle::SetFrameBorderModevoid SetFrameBorderMode(Int_t mode=1)Definition TStyle.h:378; TStyle::GetTitleFontStyle_t GetTitleFont(Option_t *axis=""X"") constReturn title font.Definition TStyle.cxx:1216; TStyle::fOptLogxInt_t fOptLogxTrue if log scale in X.Definition TStyle.h:39; TStyle::fStripDecimalsBool_t fStripDecimalsStrip decimals in axis labels.Definition TStyle.h:117; TStyle::fHistMinimumZeroBool_t fHistMinimumZeroTrue if default minimum is 0, false if minimum is automatic.Definition TStyle.h:82; TStyle::GetImageScalingFloat_t GetImageScaling() constDefinition TStyle.h:239; TStyle::fLegendFontStyle_t fLegendFontLegend font style.Definition TStyle.h:66; TStyle::SetFuncColorvoid SetFuncColor(Color_t color=1)Definition TStyle.h:367; TStyle::GetHistMinimumZeroBool_t GetHistMinimumZero() constDefinition TStyle.h:237; TStyle::fXaxisTAttAxis fXaxisX axis attributes.Definition TStyle.h:32; TStyle::SetHeaderPSvoid SetHeaderPS(const char *header)Define a string to be inserted in the Postscript header.Definition TStyle.cxx:1362; TStyle::GetStatYFloat_t GetStatY() constDefinition TStyle.h:265; TStyle::fTitleColorColor_t fTitleColorTitle fill area color.Definition TStyle.h:119; TStyle::fJoinLinePSInt_t fJoinLine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h_source.html:42610,log,log,42610,doc/master/TStyle_8h_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8h_source.html,1,['log'],['log']
Testability,"198 unsigned int NPar() const override { return fParams.size(); }; 199 ; 200 unsigned int NDim() const override { return fDim; }; 201 ; 202// // re-implement this since is more efficient; 203// double operator() (const double * x, const double * p) {; 204// unsigned int n = fX.size();; 205// unsigned int npar = fParams.size();; 206// unsigned j = 0;; 207// return (*fFunc)( fX);; 208// }; 209 ; 210private:; 211 ; 212 /// evaluate the function (re-implement for being more efficient); 213 double DoEval(const double * x) const override {; 214 ; 215// std::cout << this << fDim << "" x : "";; 216// std::ostream_iterator<double> oix(std::cout,"" , "");; 217// std::copy(x, x+fDim, oix);; 218// std::cout << std::endl;; 219// std::cout << ""npar "" << npar << std::endl;; 220// std::cout << fVarIndices.size() << std::endl;; 221// assert ( fVarIndices.size() == fDim); // otherwise something is wrong; 222 ; 223 for (unsigned int i = 0; i < fDim; ++i) {; 224 unsigned int j = fVarIndices[i];; 225 assert ( j < NPar() + fDim);; 226 fX[ j ] = x[i];; 227 }; 228// std::cout << ""X : ("";; 229// std::ostream_iterator<double> oi(std::cout,"" , "");; 230// std::copy(fX.begin(), fX.end(), oi);; 231// std::cout << std::endl;; 232 ; 233 return (*fFunc)( fX.empty() ? nullptr : &fX.front() );; 234 }; 235 ; 236 ; 237 /**; 238 implement the required IParamFunction interface; 239 */; 240 double DoEvalPar(const double * x, const double * p ) const override {; 241 SetParValues(NPar(), p);; 242 return DoEval(x);; 243 }; 244 ; 245 ; 246 void DoInit() {; 247 // calculate variable indices and set in X the parameter values; 248 fVarIndices.reserve(fDim);; 249 unsigned int npar = NPar();; 250 for (unsigned int i = 0; i < npar + fDim; ++i) {; 251 bool isVar = true;; 252 for (unsigned int j = 0; j < npar; ++j) {; 253 if (fParIndices[j] == i) {; 254 isVar = false;; 255 break;; 256 }; 257 }; 258 if (isVar) fVarIndices.push_back(i);; 259 }; 260 assert ( fVarIndices.size() == fDim); // otherwise something is wrong; 261 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedParamFunction_8h_source.html:7958,assert,assert,7958,doc/master/WrappedParamFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedParamFunction_8h_source.html,1,['assert'],['assert']
Testability,"1997 refX = &out1bin;; 1998 refY = &out2bin;; 1999 refZ = &ixbin;; 2000 }; 2001 R__ASSERT (refX != nullptr && refY != nullptr && refZ != nullptr);; 2002 ; 2003 // Fill the projected histogram excluding underflow/overflows if considered in the option; 2004 // if specified in the option (by default they considered); 2005 Double_t totcont = 0;; 2006 ; 2007 Int_t out1min = out1->GetFirst();; 2008 Int_t out1max = out1->GetLast();; 2009 // GetFirst(), GetLast() can return (0,0) when the range bit is set artificially (see TAxis::SetRange); 2010 //if (out1min == 0 && out1max == 0) { out1min = 1; out1max = out1->GetNbins(); }; 2011 // correct for underflow/overflows; 2012 if (useUF && !out1->TestBit(TAxis::kAxisRange) ) out1min -= 1;; 2013 if (useOF && !out1->TestBit(TAxis::kAxisRange) ) out1max += 1;; 2014 Int_t out2min = out2->GetFirst();; 2015 Int_t out2max = out2->GetLast();; 2016// if (out2min == 0 && out2max == 0) { out2min = 1; out2max = out2->GetNbins(); }; 2017 if (useUF && !out2->TestBit(TAxis::kAxisRange) ) out2min -= 1;; 2018 if (useOF && !out2->TestBit(TAxis::kAxisRange) ) out2max += 1;; 2019 ; 2020 // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins; 2021 Bool_t extendable = projX->CanExtend();; 2022 if ( labels && extendable ) h1->GetXaxis()->SetCanExtend(kFALSE);; 2023 for (ixbin=0;ixbin<=1+projX->GetNbins();ixbin++) {; 2024 if ( projX->TestBit(TAxis::kAxisRange) && ( ixbin < ixmin || ixbin > ixmax )) continue;; 2025 ; 2026 Double_t cont = 0;; 2027 Double_t err2 = 0;; 2028 ; 2029 // loop on the bins to be integrated (outbin should be called inbin); 2030 for (out1bin = out1min; out1bin <= out1max; out1bin++) {; 2031 for (out2bin = out2min; out2bin <= out2max; out2bin++) {; 2032 ; 2033 Int_t bin = GetBin(*refX, *refY, *refZ);; 2034 ; 2035 // sum the bin contents and errors if needed; 2036 cont += RetrieveBinContent(bin);; 2037 if (computeErrors) {; 2038 Double_t exyz = GetBinError(bin);; 2039 err2 += exyz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:79761,Test,TestBit,79761,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,"1::SetTitleOffset(Float_t offset = 1, Option_t* axis = ""X""); virtual voidTH1::SetTitleSize(Float_t size = 0.02, Option_t* axis = ""X""); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTH1::SetXTitle(const char* title); virtual voidTH1::SetYTitle(const char* title); virtual voidTH1::SetZTitle(const char* title); virtual TH1*ShowBackground(Int_t niter = 20, Option_t* option = ""same""); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tShowPeaks(Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.050000000000000003)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidSmooth(Int_t ntimes = 1, Option_t* option = """")MENU ; static voidTH1::SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); static voidTH1::StatOverflows(Bool_t flag = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTH1::Sumw2(Bool_t flag = kTRUE); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TH1*TH1::TransformHisto(TVirtualFFT* fft, TH1* h_output, Option_t* option); virtual voidTH1::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Int_tBufferFill(Double_t, Double_t); virtual Int_tBufferFill(Double_t x, Double_t y, Double_t w); static boolTH1::CheckAxisLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLabels(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckConsistency(const TH1* h1, const TH1* h2); static boolTH1::CheckConsistentSubAxes(const TAxis* a1, Int_t firstBin1, Int_t lastBin1, const TAxis* a2, Int_t firstBin2 = 0, Int_t lastBin2 = 0); static bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2.html:20765,Test,TestBit,20765,root/html602/TH2.html,https://root.cern,https://root.cern/root/html602/TH2.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"1::kIsNotW)) Sumw2(); // must be called before accumulating the entries; 725 if (fBinSumw2.fN) fBinSumw2.fArray[bin] += u*u;; 726 fBinEntries.fArray[bin] += u;; 727 if (bin == 0 || bin > fXaxis.GetNbins()) {; 728 if (!GetStatOverflowsBehaviour()) return -1;; 729 }; 730 fTsumw += u;; 731 fTsumw2 += u*u;; 732 fTsumwx += u*x;; 733 fTsumwx2 += u*x*x;; 734 fTsumwy += u*y;; 735 fTsumwy2 += u*y*y;; 736 return bin;; 737}; 738 ; 739////////////////////////////////////////////////////////////////////////////////; 740/// Fill a Profile histogram with weights.; 741 ; 742Int_t TProfile::Fill(const char *namex, Double_t y, Double_t w); 743{; 744 Int_t bin;; 745 ; 746 if (fYmin != fYmax) {; 747 if (y <fYmin || y> fYmax || TMath::IsNaN(y) ) return -1;; 748 }; 749 ; 750 Double_t u= w; // (w > 0 ? w : -w);; 751 fEntries++;; 752 bin =fXaxis.FindBin(namex);; 753 AddBinContent(bin, u*y);; 754 fSumw2.fArray[bin] += u*y*y;; 755 if (!fBinSumw2.fN && u != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before accumulating the entries; 756 if (fBinSumw2.fN) fBinSumw2.fArray[bin] += u*u;; 757 fBinEntries.fArray[bin] += u;; 758 if (bin == 0 || bin > fXaxis.GetNbins()) {; 759 if (!GetStatOverflowsBehaviour()) return -1;; 760 }; 761 fTsumw += u;; 762 fTsumw2 += u*u;; 763 if (!fXaxis.CanExtend() || !fXaxis.IsAlphanumeric()) {; 764 Double_t x = fXaxis.GetBinCenter(bin);; 765 fTsumwx += u*x;; 766 fTsumwx2 += u*x*x;; 767 }; 768 fTsumwy += u*y;; 769 fTsumwy2 += u*y*y;; 770 return bin;; 771}; 772 ; 773////////////////////////////////////////////////////////////////////////////////; 774/// Fill a Profile histogram with weights.; 775 ; 776void TProfile::FillN(Int_t ntimes, const Double_t *x, const Double_t *y, const Double_t *w, Int_t stride); 777{; 778 Int_t bin,i;; 779 ntimes *= stride;; 780 Int_t ifirst = 0;; 781 //If a buffer is activated, fill buffer; 782 // (note that this function must not be called from TH2::BufferEmpty); 783 if (fBuffer) {; 784 for (i=0;i<ntimes;i+=stride) {; 785 if (!",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:27297,Test,TestBit,27297,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['Test'],['TestBit']
Testability,1; : 1001 | 3.31742 4.17699 0.020287 0.00175118 43159.8 2; : 1002 | 3.35839 4.8143 0.0207434 0.00177731 42180.6 3; : 1003 Minimum Test error found - save the configuration ; : 1003 | 3.42381 4.04915 0.0202591 0.00184351 43441.4 0; : 1004 Minimum Test error found - save the configuration ; : 1004 | 3.27488 4.0384 0.0205262 0.00189376 42935.9 0; : 1005 | 3.09776 4.19224 0.0200956 0.00176781 43649.6 1; : 1006 Minimum Test error found - save the configuration ; : 1006 | 3.1757 3.91876 0.0201134 0.00183093 43757.7 0; : 1007 | 3.17471 4.33126 0.0203423 0.00178093 43100.3 1; : 1008 | 3.23752 4.46797 0.0204556 0.0017847 42847.4 2; : 1009 | 3.5099 4.04664 0.0203963 0.00177013 42950.3 3; : 1010 | 3.39993 4.32216 0.0201011 0.00176915 43639.8 4; : 1011 | 3.28002 4.35065 0.020045 0.00175269 43734.2 5; : 1012 | 3.24301 4.1309 0.0202482 0.00178612 43332 6; : 1013 | 3.47685 4.13785 0.0205714 0.00178247 42578.3 7; : 1014 | 3.38367 4.59532 0.0203076 0.00178189 43183.2 8; : 1015 Minimum Test error found - save the configuration ; : 1015 | 3.15343 3.81668 0.0204522 0.00185272 43011.9 0; : 1016 | 2.99441 4.01707 0.0202697 0.00183758 43402.5 1; : 1017 | 3.3956 4.54944 0.0201133 0.00176644 43604.1 2; : 1018 | 3.2792 3.85661 0.0202747 0.00181943 43348.2 3; : 1019 | 3.37748 4.22044 0.0208054 0.00183497 42170.8 4; : 1020 | 3.48034 4.07947 0.020447 0.00177824 42852.4 5; : 1021 | 3.50059 4.11275 0.020219 0.00176964 43361.9 6; : 1022 | 3.15174 3.86168 0.0203283 0.00176093 43086.3 7; : 1023 | 3.4694 4.52782 0.0204007 0.00179059 42987.4 8; : 1024 Minimum Test error found - save the configuration ; : 1024 | 3.57333 3.68346 0.0207199 0.00186469 42428.5 0; : 1025 | 3.1448 3.86932 0.020257 0.0018083 43363.6 1; : 1026 | 3.14966 3.71614 0.0204412 0.00177219 42851.8 2; : 1027 Minimum Test error found - save the configuration ; : 1027 | 3.06278 3.47888 0.0204485 0.00186251 43043.1 0; : 1028 | 3.22518 4.06346 0.0201016 0.00179042 43689.3 1; : 1029 | 3.47015 5.10048 0.0212551 0.0017691 41055.1 2; : 1030 | 3,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:114161,Test,Test,114161,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test error found - save the configuration ; : 800 | 10.3317 14.1583 0.0201165 0.00182126 43727.2 0; : 801 | 10.3503 14.2866 0.0200523 0.00175781 43729 1; : 802 | 10.3453 15.2815 0,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:97559,Test,Test,97559,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"1; : Training finished; : Rebuilding Dataset Category_Likelihood_2_dsi; : Building event vectors for type 2 Signal; : Dataset[Category_Likelihood_2_dsi] : create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[Category_Likelihood_2_dsi] : create input formulas for tree TreeB; <HEADER> DataSetFactory : [Category_Likelihood_2_dsi] : Number of events in input trees; : Dataset[Category_Likelihood_2_dsi] : Signal requirement: ""abs(eta)>1.3""; : Dataset[Category_Likelihood_2_dsi] : Signal -- number of events passed: 4877 / sum of weights: 4877 ; : Dataset[Category_Likelihood_2_dsi] : Signal -- efficiency : 0.4877; : Dataset[Category_Likelihood_2_dsi] : Background requirement: ""abs(eta)>1.3""; : Dataset[Category_Likelihood_2_dsi] : Background -- number of events passed: 4866 / sum of weights: 4866 ; : Dataset[Category_Likelihood_2_dsi] : Background -- efficiency : 0.4866; : Dataset[Category_Likelihood_2_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.4877 preselection efficiency); : Dataset[Category_Likelihood_2_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.4866 preselection efficiency); : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 2438; : Signal -- testing events : 2438; : Signal -- training and testing events: 4876; : Dataset[Category_Likelihood_2_dsi] : Signal -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.4877; : Background -- training events : 2433; : Background -- testing events : 2433; : Background -- training and testing events: 4866; : Dataset[Category_Likelihood_2_dsi] : Background -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.4866; : ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:17176,test,testing,17176,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability,"1; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel, const RLogLocation &loc)Definition RLogger.hxx:186; ROOT::Experimental::RLogEntry::IsFatalbool IsFatal() constDefinition RLogger.hxx:195; ROOT::Experimental::RLogEntry::IsErrorbool IsError() constDefinition RLogger.hxx:194; ROOT::Experimental::RLogEntry::RLogEntryRLogEntry(ELogLevel level, RLogChannel &channel)Definition RLogger.hxx:185; ROOT::Experimental::RLogEntry::IsInfobool IsInfo() constDefinition RLogger.hxx:192; ROOT::Experimental::RLogEntry::IsWarningbool IsWarning() constDefinition RLogger.hxx:193; ROOT::Experimental::RLogEntry::fLocationRLogLocation fLocationDefinition RLogger.hxx:180; ROOT::Experimental::RLogEntry::fLevelELogLevel fLevelDefinition RLogger.hxx:183; ROOT::Experimental::RLogEntry::fChannelRLogChannel * fChannelDefinition RLogger.hxx:182; ROOT::Experimental::RLogHandlerAbstract RLogHandler base class.Definition RLogger.hxx:85; ROOT::Experimental::RLogHandler::Emitvirtual bool Emit(const RLogEntry &entry)=0Emit a log entry.; ROOT::Experimental::RLogHandler::~RLogHandlervirtual ~RLogHandler()Definition RLogger.cxx:28; ROOT::Experimental::RLogManagerA RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the su...Definition RLogger.hxx:136; ROOT::Experimental::RLogManager::fHandlersstd::list< std::unique_ptr< RLogHandler > > fHandlersDefinition RLogger.hxx:138; ROOT::Experimental::RLogManager::fMutexstd::mutex fMutexDefinition RLogger.hxx:137; ROOT::Experimental::RLogManager::Removestd::unique_ptr< RLogHandler > Remove(RLogHandler *handler)Remove and return the given log handler. Returns nullptr if not found.Definition RLogger.cxx:68; ROOT::Experimental::RLogManager::Getstatic RLogManager & Get()Definition RLogger.cxx:62; ROOT::Experimental::RLogManager::RLogManagerRLogManager(std::unique_ptr< RLogHandler > lh)Initialize taking a RLogHandler.Definition RLogger.hxx:142; ROOT::Experimental::RLogManager::Emitbool Emit(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:19933,log,log,19933,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['log'],['log']
Testability,"1; TRint::SetPromptvirtual const char * SetPrompt(const char *newPrompt)Set a new default prompt.Definition TRint.cxx:595; TRint::Terminatevirtual void Terminate(int status) overrideTerminate the application.Definition TRint.cxx:722; TRint::fPromptchar fPrompt[64]Definition TRint.h:37; TRint::TabCompletionHookInt_t TabCompletionHook(char *buf, int *pLoc, std::ostream &out) overrideForward tab completion request to our TTabCom::Hook().Definition TRint.cxx:827; TRint::GetPromptvirtual char * GetPrompt()Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"".Definition TRint.cxx:575; TRint::HandleExceptionvoid HandleException(Int_t sig) overrideHandle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException)...Definition TRint.cxx:704; TRint::~TRintvirtual ~TRint()Destructor.Definition TRint.cxx:316; TRint::PrintLogovirtual void PrintLogo(Bool_t lite=kFALSE)Print the ROOT logo on standard output.Definition TRint.cxx:512; TRint::ExecLogonvoid ExecLogon()Execute logon macro's.Definition TRint.cxx:341; TRint::ProcessRemoteLongptr_t ProcessRemote(const char *line, Int_t *error=nullptr) overrideProcess the content of a line starting with "".R"" (already stripped-off) The format is [user@]host[:di...Definition TRint.cxx:768; TRint::fBackslashContinueBool_t fBackslashContinueDefinition TRint.h:41; TRint::fDefaultPromptTString fDefaultPromptDefinition TRint.h:35; TRint::fNonContinuePromptTString fNonContinuePromptDefinition TRint.h:36; TRint::fCaughtSignalInt_t fCaughtSignalDefinition TRint.h:39; TRint::fNcmdInt_t fNcmdDefinition TRint.h:34; TRint::TRintTRint(const TRint &)=delete; TRint::fInputHandlerTFileHandler * fInputHandlerDefinition TRint.h:40; TSignalHandlerDefinition TSysEvtHandler.h:127; TSignalHandler::Addvoid Add() overrideAdd signal handler to system signal handler list.Definition TSysEvtHandler.cxx:168; TSignalHandler::GetSignalESignals GetSignal() constDefinition TSysEvtHandler.h:141; TSignalHandler::fDelayInt_t fDelayD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:39314,log,logon,39314,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['log'],['logon']
Testability,"1; TRint::SetPromptvirtual const char * SetPrompt(const char *newPrompt)Set a new default prompt.Definition TRint.cxx:595; TRint::Terminatevirtual void Terminate(int status) overrideTerminate the application.Definition TRint.cxx:722; TRint::fPromptchar fPrompt[64]Definition TRint.h:37; TRint::TabCompletionHookInt_t TabCompletionHook(char *buf, int *pLoc, std::ostream &out) overrideForward tab completion request to our TTabCom::Hook().Definition TRint.cxx:827; TRint::GetPromptvirtual char * GetPrompt()Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"".Definition TRint.cxx:575; TRint::HandleExceptionvoid HandleException(Int_t sig) overrideHandle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException)...Definition TRint.cxx:704; TRint::~TRintvirtual ~TRint()Destructor.Definition TRint.cxx:316; TRint::PrintLogovirtual void PrintLogo(Bool_t lite=kFALSE)Print the ROOT logo on standard output.Definition TRint.cxx:512; TRint::ExecLogonvoid ExecLogon()Execute logon macro's.Definition TRint.cxx:341; TRint::ProcessRemoteLongptr_t ProcessRemote(const char *line, Int_t *error=nullptr) overrideProcess the content of a line starting with "".R"" (already stripped-off) The format is [user@]host[:di...Definition TRint.cxx:768; TRint::fBackslashContinueBool_t fBackslashContinueDefinition TRint.h:41; TRint::fDefaultPromptTString fDefaultPromptDefinition TRint.h:35; TRint::operator=TRint & operator=(const TRint &)=delete; TRint::fNonContinuePromptTString fNonContinuePromptDefinition TRint.h:36; TRint::fCaughtSignalInt_t fCaughtSignalDefinition TRint.h:39; TRint::fNcmdInt_t fNcmdDefinition TRint.h:34; TRint::TRintTRint(const TRint &)=delete; TRint::GetInputHandlerTFileHandler * GetInputHandler()Definition TRint.h:65; TRint::fInputHandlerTFileHandler * fInputHandlerDefinition TRint.h:40; TStringBasic string class.Definition TString.h:139; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235. corerintincTRint.h. ROOT master - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8h_source.html:5044,log,logon,5044,doc/master/TRint_8h_source.html,https://root.cern,https://root.cern/doc/master/TRint_8h_source.html,1,['log'],['logon']
Testability,"1; j<ndivMinor; j++) {; 521 Double_t thetamin = theta+j*2*TMath::Pi()/(ndivMajor*ndivMinor);; 522 gPad->PaintLine(0.,0.,TMath::Cos(thetamin),TMath::Sin(thetamin));; 523 }; 524 TAttLine::SetLineStyle(oldLineStyle);; 525 TAttLine::Modify();; 526 }; 527 } else {; 528 Int_t big = (Int_t)fRwtmax;; 529 Int_t test= 1;; 530 while (big >= 10) {; 531 big = big/10;; 532 test++;; 533 }; 534 for (i=1; i<=test; i++) {; 535 Double_t txtval = pow((double)10,(double)(i-1));; 536 Double_t theta = (i-1)*2*TMath::Pi()/(double)(test);; 537 Double_t costheta = TMath::Cos(theta);; 538 Double_t sintheta = TMath::Sin(theta);; 539 Double_t tantheta = TMath::Tan(theta);; 540 Double_t costhetas = (1+fPolarOffset)*costheta;; 541 Double_t sinthetas = (1+fPolarOffset)*sintheta;; 542 Double_t corr = 0.01;; 543 ; 544 TLatex textangular;; 545 textangular.SetTextColor(GetPolarColorLabel());; 546 textangular.SetTextFont(GetPolarLabelFont());; 547 ; 548 TString form = "" "";; 549 TGaxis axis;; 550 ; 551 if (TestBit(TGraphPolargram::kLabelOrtho)) {; 552 if(!fPolarLabels && optionLabels){; 553 // Polar numbers are aligned with their axis.; 554 form.Form(""%5.3g"",txtval);; 555 axis.LabelsLimits(form.Data(),first,last);; 556 TString s = form;; 557 if (first != 0) s.Remove(0, first);; 558 textangular.SetTextAlign(FindAlign(theta));; 559 textangular.PaintLatex(costhetas,; 560 sinthetas, FindTextAngle(theta), GetPolarLabelSize(), s);; 561 }; 562 else if (fPolarLabels){; 563 // print the specified polar labels; 564 textangular.SetTextAlign(FindAlign(theta));; 565 textangular.PaintText(costhetas,sinthetas,fPolarLabels[i]);; 566 }; 567 ; 568 } else {; 569 if(!fPolarLabels && optionLabels){; 570 // Polar numbers are shown horizontally.; 571 form.Form(""%5.3g"",txtval);; 572 axis.LabelsLimits(form.Data(),first,last);; 573 TString s = form;; 574 if (first != 0) s.Remove(0, first);; 575 if(theta >= 3*TMath::Pi()/12.0 && theta < 2*TMath::Pi()/3.0) corr=0.04;; 576 textangular.SetTextAlign(FindAlign(theta));; 577 textangular",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html:18345,Test,TestBit,18345,doc/master/TGraphPolargram_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html,1,['Test'],['TestBit']
Testability,"1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 probability); double prob = res.Prob();; if (prob < 1.E-2); Error(""exampleFit3D"",""Bad data fit - fit p-value is %f"",prob);; else; std::cout << ""Good fit : p-value = "" << prob << std::endl;; ; }; else; Error(""exampleFit3D"",""3D fit failed"");; }; BinData.h; Fitter.h; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF3.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRandom2.h; WrappedMultiTF1.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/exampleFit3D_8C.html:1974,test,test,1974,doc/master/exampleFit3D_8C.html,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html,1,['test'],['test']
Testability,"1=1, Int_t axis2=2) constReturn covariance between axis1 and axis2.Definition TH3.cxx:1209; TH3::GetStatsvoid GetStats(Double_t *stats) const overrideFill the array stats from the contents of this histogram The array stats must be correctly dimensione...Definition TH3.cxx:1307; TH3::Copyvoid Copy(TObject &hnew) const overrideCopy.Definition TH3.cxx:208; TH3::DoProject2Dvirtual TH2D * DoProject2D(const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) constinternal method performing the projection to a 2D histogram called from TH3::Project3DDefinition TH3.cxx:2103; TH3::fTsumwxzDouble_t fTsumwxzTotal Sum of weight*X*Z.Definition TH3.h:39; TH3::FillRandomvoid FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr) overrideFill histogram following distribution in function fname.Definition TH3.cxx:833; TH3::KolmogorovTestDouble_t KolmogorovTest(const TH1 *h2, Option_t *option="""") const overrideStatistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test.Definition TH3.cxx:1532; TH3::ProjectionYvirtual TH1D * ProjectionY(const char *name=""_py"", Int_t ixmin=0, Int_t ixmax=-1, Int_t izmin=0, Int_t izmax=-1, Option_t *option="""") constProject a 3-D histogram into a 1-D histogram along Y.Definition TH3.cxx:1780; TH3::InterpolateDouble_t Interpolate(Double_t x, Double_t y) const overrideNot yet implemented.Definition TH3.cxx:1441; TH3::GetRandom3virtual void GetRandom3(Double_t &x, Double_t &y, Double_t &, TRandom *rng=nullptr)Return 3 random numbers along axis x , y and z distributed according to the cell-contents of this 3-d...Definition TH3.cxx:1259; TH3::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH3.cxx:3449; TH3::AddBinContentvoid AddBinContent(Int_t bin) overrideIncrement bin content by 1.Definition TH3.cxx:224; TH3::~TH3~TH3() overrideDestructor.Definition TH3.cxx:200; TH3::FillIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:206308,test,test,206308,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,2,['test'],['test']
Testability,"1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; c1.Modified(); c1.Update(); ; gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; AuthorWim Lavrijsen ; Definition in file hsum.py. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsum_8py.html:1834,test,test,1834,doc/master/hsum_8py.html,https://root.cern,https://root.cern/doc/master/hsum_8py.html,1,['test'],['test']
Testability,"1F* EvaluateImportanceRandom( DataLoader *loader,UInt_t nseeds, Types::EMVA theMethod, TString methodTitle, const char *theOption = """" );; 186 ; 187 TH1F* GetImportance(const int nbits,std::vector<Double_t> importances,std::vector<TString> varNames);; 188 ; 189 // Helpers for public facing ROC methods; 190 ROCCurve *GetROC(DataLoader *loader, TString theMethodName, UInt_t iClass = 0,; 191 Types::ETreeType type = Types::kTesting);; 192 ROCCurve *GetROC(TString datasetname, TString theMethodName, UInt_t iClass = 0,; 193 Types::ETreeType type = Types::kTesting);; 194 ; 195 void WriteDataInformation(DataSetInfo& fDataSetInfo);; 196 ; 197 void SetInputTreesFromEventAssignTrees();; 198 ; 199 MethodBase* BookMethodWeightfile(DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile);; 200 ; 201 private:; 202 ; 203 // data members; 204 ; 205 TFile* fgTargetFile; ///<! ROOT output file; 206 ; 207 ; 208 std::vector<TMVA::VariableTransformBase*> fDefaultTrfs; ///<! list of transformations on default DataSet; 209 ; 210 // cd to local directory; 211 TString fOptions; ///<! option string given by construction (presently only ""V""); 212 TString fTransformations; ///<! list of transformations to test; 213 Bool_t fVerbose; ///<! verbose mode; 214 TString fVerboseLevel; ///<! verbosity level, controls granularity of logging; 215 Bool_t fCorrelations; ///<! enable to calculate correlations; 216 Bool_t fROC; ///<! enable to calculate ROC values; 217 Bool_t fSilentFile; ///<! used in constructor without file; 218 ; 219 TString fJobName; ///<! jobname, used as extension in weight file names; 220 ; 221 Types::EAnalysisType fAnalysisType; ///<! the training type; 222 Bool_t fModelPersistence;///<! option to save the trained model in xml file or using serialization; 223 ; 224 ; 225 protected:; 226 ; 227 ClassDef(Factory,0); // The factory creates all MVA methods, and performs their training and testing; 228 };; 229 ; 230} // namespace TMVA; 231 ; 232#endif; Configurable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:9496,test,test,9496,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,3,"['log', 'test']","['logging', 'test', 'testing']"
Testability,"1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TBenchmark.h>. Inheritance diagram for TBenchmark:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBenchmark() [1/2]. TBenchmark::TBenchmark ; (; const TBenchmark & ; bm). protected . Copy constructor. ; Definition at line 39 of file TBenchmark.cxx. ◆ TBenchmark() [2/2]. TBenchmark::TBenchmark ; (; ). Benchmark default constructor. ; Definition at line 26 of file TBenchmark.cxx. ◆ ~TBenchmark(). TBenchmark::~TBenchmark ; (; ). virtual . Benchmark destructor. ; Definition at line 94 of file TBenchmark.cxx. Member Function Documentation. ◆ Class(). static TClass * TBenchmark::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBenchmark::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBenchmark::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 56 of file TBenchmark.h. ◆ DeclFileName(). static const char * TBenchmark::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 56 of file TBenchmark.h. ◆ GetBench(). Int_t TBenchmark::GetBench ; (; const char * ; name); const. Returns index of Benchmark name. ; Definition at line 106 of file TBenchmark.cxx. ◆ GetCpuTime(). Float_t TBenchmark::GetCpuTime ; (; const char * ; name). Returns Cpu time used by Benchmark name. ; Definition at line 117 of file TBenchmark.cxx. ◆ GetRealTime().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:12825,Benchmark,Benchmark,12825,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['Benchmark'],['Benchmark']
Testability,"1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Private Member Functions inherited from TMVA::MethodCFMlpANN_Utils; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Private Attributes inherited from TMVA::MethodCFMlpANN_Utils; static const Int_t fg_max_nNodes_ = max_nNodes_;  ; static const Int_t fg_max_nVar_ = max_nVar_;  ; static const char *const fg_MethodName = ""--- CFMlpANN "";  . #include <TMVA/MethodCFMlpANN.h>. Inheritance diagram for TMVA::MethodCFMlpANN:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:33519,test,testing,33519,doc/master/classTMVA_1_1MethodCFMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html,2,"['log', 'test']","['logger', 'testing']"
Testability,"1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k}\tag{5}; \]. Then the equations for parameter increments are ; \[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; \qquad i=1\ldots m\tag{6}; \]. Remarkable feature of algorithm is the technique for step restriction. For an initial value of parameter \({\vec\theta}^0\) a parallelepiped \(P_0\) is built with the center at \({\vec\theta}^0\) and axes parallel to coordinate axes \(\theta_i\). The lengths of parallelepiped sides along i-th axis is \(2b_i\), where \(b_i\) is such a value that the functions \(f_j(\vec\theta)\) are quasi-linear all over the parallelepiped.; FUMILI takes into account simple linear inequalities in the form: ; \[; \theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; \]. They form parallelepiped \(P\) ( \(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument. ; Definition at line 11 of file TFumili.h. Public Member Functions;  TFumili (Int_t maxpar=25);  ;  ~TFumili () override;  TFumili destructor. ;  ; void BuildArrays ();  Allocates memory for internal arrays. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  return a chisquare equivalent ;  ; void Clear (Option_t *opt="""") override;  Resets all parameter names, values and errors to zero. ;  ; void DeleteArrays ();  Deallocates memory. Called from destructor TFumili::~TFumili. ;  ; void Derivatives (Double_t *, Double_t *);  Calculates partial derivatives of theoretical function. ;  ; Int_t Eval (Int_t &npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag);  Evaluate the minimisation function. ;  ; Double_t EvalTFN (Double_t *, Double_t *);  Evaluate theoretical function. ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs) override;  Execute MINUIT command",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:3461,log,logarithm,3461,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['log'],['logarithm']
Testability,"1`; only outliers are drawn; 1256 - `p = 2`; all datapoints are drawn; 1257 - `p = 3`: all datapoints are drawn scattered; 1258 ; 1259 - `h = 0`; no histogram is drawn; 1260 - `h = 1`; histogram at the left or bottom side is drawn; 1261 - `h = 2`; histogram at the right or top side is drawn; 1262 - `h = 3`; histogram at left and right or top and bottom (violin-style) is drawn; 1263 ; 1264 - `z = 0`; no zero indicator line is drawn; 1265 - `z = 1`; zero indicator line is drawn.; 1266 ; 1267As one can see all individual options for both candle and violin plots can be accessed by this; 1268mechanism. In deed the keywords CANDLE(<option-string>) and VIOLIN(<option-string>) have the same; 1269meaning. So you can parametrise an option-string for a candle plot and use the keywords VIOLIN and; 1270vice versa, if you wish.; 1271 ; 1272Using a logarithmic x- or y-axis is possible for candle and violin charts.; 1273 ; 1274\since **ROOT version 6.11/01**; 1275 ; 1276a logarithmic z-axis is possible, too but will only affect violin charts of course.; 1277 ; 1278\anchor HP140a; 1279#### The CANDLE option; 1280 ; 1281<a href=""http://en.wikipedia.org/wiki/Box_plot"">A Candle plot</a> (also known as; 1282a ""box plot"" or ""whisker plot"") was invented in 1977 by John Tukey. It is a convenient; 1283way to describe graphically a data distribution (D) with only five numbers:; 1284 ; 1285 1. The minimum value of the distribution D (bottom or left whisker).; 1286 2. The lower quartile (Q1): 25% of the data points in D are less than Q1 (bottom of the box).; 1287 3. The median (M): 50% of the data points in D are less than M.; 1288 4. The upper quartile (Q3): 75% of the data points in D are less than Q3 (top of the box).; 1289 5. The maximum value of the distribution D (top or right whisker).; 1290 ; 1291In this implementation a TH2 is considered as a collection of TH1 along; 1292X (option `CANDLE` or `CANDLEX`) or Y (option `CANDLEY`).; 1293Each TH1 is represented as one candle.; 1294 ; 1295Be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:51943,log,logarithmic,51943,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['logarithmic']
Testability,"1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFractions=0.0,DropRepetitions=5\"" \n \; 1562 . LearningRate : \n \; 1563 - recommended for classification: 0.1 initially, 1e-4 later \n \; 1564 - recommended for regression: 1e-4 and less \n \; 1565 . Momentum : \n \; 1566 preserve a fraction of the momentum for the next training batch [fraction = 0.0 - 1.0] \n \; 1567 . Repetitions : \n \; 1568 train \""Repetitions\"" repetitions with the same minibatch before switching to the next one \n \; 1569 . ConvergenceSteps : \n \; 1570 Assume that convergence is reached after \""ConvergenceSteps\"" cycles where no improvement \n \; 1571 of the error on the test samples has been found. (Mind that only at each \""TestRepetitions\"" \n \; 1572 cycle the test samples are evaluated and thus the convergence is checked) \n \; 1573 . BatchSize \n \; 1574 Size of the mini-batches. \n \; 1575 . TestRepetitions \n \; 1576 Perform testing the neural net on the test samples each \""TestRepetitions\"" cycle \n \; 1577 . WeightDecay \n \; 1578 If \""Renormalize\"" is set to L1 or L2, \""WeightDecay\"" provides the renormalization factor \n \; 1579 . Renormalize \n \; 1580 NONE, L1 (|w|) or L2 (w^2) \n \; 1581 . DropConfig \n \; 1582 Drop a fraction of arbitrary nodes of each of the layers according to the values given \n \; 1583 in the DropConfig. \n \; 1584 [example: DropConfig=0.0+0.5+0.3 \n \; 1585 meaning: drop no nodes in layer 0 (input layer), half of the nodes in layer 1 and 30% of the nodes \n \; 1586 in layer 2 \n \; 1587 recommended: leave all the nodes turned on for the input layer (layer 0) \n \; 1588 turn off half of the nodes in later layers for the initial training; leave all nodes \n \; 1589 turned on (0.0) in later training stages] \n \; 1590 . DropRepetitions \n \; 1591 Each \""DropRepetitions\"" cycle the configuration of which nodes are dropped is changed \n \; 1592 [recommended : 1] \n \; 1593 . Multithreading \n \; 1594 turn ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:59269,Test,TestRepetitions,59269,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,4,"['Test', 'test']","['TestRepetitions', 'test', 'testing']"
Testability,"2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const Double32_t& rhs) const; element wise comparison. bool operator<(const Double32_t& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const Double32_t& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const Double32_t& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const Double32_t& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const Double32_t& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of sym",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:7386,assert,assert,7386,root/html528/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,32,['assert'],['assert']
Testability,"2 * yc;; 89 qk = qkm1 * z - qkm2 * yc;; 90 if(qk); 91 {; 92 r = pk/qk;; 93 t = std::abs( (ans - r)/r );; 94 ans = r;; 95 }; 96 else; 97 t = 1.0;; 98 pkm2 = pkm1;; 99 pkm1 = pk;; 100 qkm2 = qkm1;; 101 qkm1 = qk;; 102 if( std::abs(pk) > kBig ); 103 {; 104 pkm2 *= kBiginv;; 105 pkm1 *= kBiginv;; 106 qkm2 *= kBiginv;; 107 qkm1 *= kBiginv;; 108 }; 109 }; 110 while( t > kMACHEP );; 111 ; 112 return( ans * ax );; 113}; 114 ; 115 ; 116 ; 117/* left tail of incomplete gamma function:; 118 *; 119 * inf. k; 120 * a -x - x; 121 * x e > ----------; 122 * - -; 123 * k=0 | (a+k+1); 124 *; 125 */; 126 ; 127double igam( double a, double x ); 128{; 129 double ans, ax, c, r;; 130 ; 131 // LM: for negative values returns 1.0 instead of zero; 132 // This is correct if a is a negative integer since Gamma(-n) = +/- inf; 133 if (a <= 0) return 1.0;; 134 ; 135 if (x <= 0) return 0.0;; 136 ; 137 if( (x > 1.0) && (x > a ) ); 138 return( 1.0 - igamc(a,x) );; 139 ; 140/* Compute x**a * exp(-x) / gamma(a) */; 141 ax = a * std::log(x) - x - lgam(a);; 142 if( ax < -kMAXLOG ); 143 return( 0.0 );; 144 ; 145 ax = std::exp(ax);; 146 ; 147/* power series */; 148 r = a;; 149 c = 1.0;; 150 ans = 1.0;; 151 ; 152 do; 153 {; 154 r += 1.0;; 155 c *= x/r;; 156 ans += c;; 157 }; 158 while( c/ans > kMACHEP );; 159 ; 160 return( ans * ax/a );; 161}; 162 ; 163/*---------------------------------------------------------------------------*/; 164 ; 165/* Logarithm of gamma function */; 166/* A[]: Stirling's formula expansion of log gamma; 167 * B[], C[]: log gamma function between 2 and 3; 168 */; 169 ; 170static double A[] = {; 171 8.11614167470508450300E-4,; 172 -5.95061904284301438324E-4,; 173 7.93650340457716943945E-4,; 174 -2.77777777730099687205E-3,; 175 8.33333333333331927722E-2; 176};; 177 ; 178static double B[] = {; 179 -1.37825152569120859100E3,; 180 -3.88016315134637840924E4,; 181 -3.31612992738871184744E5,; 182 -1.16237097492762307383E6,; 183 -1.72173700820839662146E6,; 184 -8.53555664245765465627E5; 185};",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:2973,log,log,2973,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['log'],['log']
Testability,2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0925 30.8793 0.0200419 0.00175584 43749.1 2; : 703 Minimum Test error found - save the configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:89834,Test,Test,89834,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,2 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0925 30.8793 0.0200419 0.00175584 43749.1 2; : 703 Minimum Test error found - save the configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:90224,Test,Test,90224,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"2 Double_t fAbsHNDC; ///< Absolute Height of pad along Y in NDC; 73 ; 74 Double_t fUxmin; ///< Minimum value on the X axis; 75 Double_t fUymin; ///< Minimum value on the Y axis; 76 Double_t fUxmax; ///< Maximum value on the X axis; 77 Double_t fUymax; ///< Maximum value on the Y axis; 78 ; 79 Double_t fTheta; ///< theta angle to view as lego/surface; 80 Double_t fPhi; ///< phi angle to view as lego/surface; 81 ; 82 Double_t fAspectRatio; ///< ratio of w/h in case of fixed ratio; 83 ; 84 Int_t fPixmapID; ///<! Off-screen pixmap identifier; 85 Int_t fGLDevice; ///<! OpenGL off-screen pixmap identifier; 86 Bool_t fCopyGLDevice; ///<!; 87 Bool_t fEmbeddedGL; ///<!; 88 Int_t fNumber; ///< pad number identifier; 89 Int_t fTickx; ///< Set to 1 if tick marks along X; 90 Int_t fTicky; ///< Set to 1 if tick marks along Y; 91 Int_t fLogx; ///< (=0 if X linear scale, =1 if log scale); 92 Int_t fLogy; ///< (=0 if Y linear scale, =1 if log scale); 93 Int_t fLogz; ///< (=0 if Z linear scale, =1 if log scale); 94 Int_t fPadPaint; ///< Set to 1 while painting the pad; 95 Int_t fCrosshair; ///< Crosshair type (0 if no crosshair requested); 96 Int_t fCrosshairPos; ///< Position of crosshair; 97 Short_t fBorderSize; ///< pad bordersize in pixels; 98 Short_t fBorderMode; ///< Bordermode (-1=down, 0 = no border, 1=up); 99 Bool_t fModified; ///< Set to true when pad is modified; 100 Bool_t fGridx; ///< Set to true if grid along X; 101 Bool_t fGridy; ///< Set to true if grid along Y; 102 Bool_t fAbsCoord; ///< Use absolute coordinates; 103 Bool_t fEditable; ///< True if canvas is editable; 104 Bool_t fFixedAspectRatio; ///< True if fixed aspect ratio; 105 TPad *fMother{nullptr}; ///<! pointer to mother of the list; 106 TCanvas *fCanvas{nullptr}; ///<! Pointer to mother canvas; 107 TList *fPrimitives{nullptr};///<->List of primitives (subpads); 108 TList *fExecs{nullptr}; ///< List of commands to be executed when a pad event occurs; 109 TString fName; ///< Pad name; 110 TString fTitle; ///<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:4220,log,log,4220,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['log'],['log']
Testability,"2 fDataError.resize(fNPoints + vectorPadding);; 773 std::copy(fDataErrorPtr, fDataErrorPtr + fNPoints + vectorPadding, fDataError.begin());; 774 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 775 }; 776 ; 777 if ( kValueError == fErrorType ); 778 {; 779 for ( unsigned int i=0; i < fNPoints; i++ ); 780 {; 781 fDataError[i] = 1.0 / fDataError[i];; 782 }; 783 }; 784 ; 785 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 786 {; 787 fCoordErrors.resize( fDim );; 788 for( unsigned int i=0; i < fDim; i++ ); 789 {; 790 assert( fCoordErrorsPtr[i] );; 791 fCoordErrors[i].resize(fNPoints + vectorPadding);; 792 std::copy(fCoordErrorsPtr[i], fCoordErrorsPtr[i] + fNPoints + vectorPadding, fCoordErrors[i].begin());; 793 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 794 }; 795 ; 796 if( kAsymError == fErrorType ); 797 {; 798 assert( fDataErrorHigh.empty() );; 799 assert( fDataErrorLow.empty() );; 800 assert( fDataErrorHighPtr && fDataErrorLowPtr );; 801 ; 802 fDataErrorHigh.resize(fNPoints + vectorPadding);; 803 fDataErrorLow.resize(fNPoints + vectorPadding);; 804 std::copy(fDataErrorHighPtr, fDataErrorHighPtr + fNPoints + vectorPadding, fDataErrorHigh.begin());; 805 std::copy(fDataErrorLowPtr, fDataErrorLowPtr + fNPoints + vectorPadding, fDataErrorLow.begin());; 806 fDataErrorHighPtr = fDataErrorHigh.empty() ? nullptr : &fDataErrorHigh.front();; 807 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 808 }; 809 }; 810 ; 811 FitData::UnWrap();; 812 }; 813 ; 814 void BinData::ComputeSums() {; 815 unsigned int n = Size();; 816 fSumContent = 0;; 817 fSumError2 = 0;; 818 if (fErrorType != kAsymError) {; 819 for (unsigned int i = 0; i < n; ++i) {; 820 double y = Value(i);; 821 double err = Error(i);; 822 fSumContent += y;; 823 if (fErrorType != kNoError) {; 824 if (y != 0 || err != 1.0 ) fSumError2 += err*err;; 825 }; 826 }; 827 }; 828 else {; 829 for (unsigned int i = 0; i < n; ++i) {; 830",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:24579,assert,assert,24579,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"2 if (Hoption.Box == 11) {; 5233 light = TColor::GetColorBright(color);; 5234 dark = TColor::GetColorDark(color);; 5235 }; 5236 ; 5237 // Loop over all the bins and draw the boxes; 5238 for (Int_t j=Hparam.yfirst; j<=Hparam.ylast;j++) {; 5239 yk = fYaxis->GetBinLowEdge(j);; 5240 ystep = fYaxis->GetBinWidth(j);; 5241 ycent = 0.5*ystep;; 5242 for (Int_t i=Hparam.xfirst; i<=Hparam.xlast;i++) {; 5243 Int_t bin = j*(fXaxis->GetNbins()+2) + i;; 5244 xk = fXaxis->GetBinLowEdge(i);; 5245 xstep = fXaxis->GetBinWidth(i);; 5246 if (!IsInside(xk+0.5*xstep,yk+0.5*ystep)) continue;; 5247 xcent = 0.5*xstep;; 5248 z = Hparam.factor*fH->GetBinContent(bin);; 5249 kZNeg = kFALSE;; 5250 ; 5251 if (TMath::Abs(z) < zminlin) continue; // Can be the case with ...; 5252 if (TMath::Abs(z) > zmaxlin) z = zmaxlin; // ... option Same; 5253 if (kZminNeg && z==0) continue; // Do not draw empty bins if case of histo with negative bins.; 5254 ; 5255 if (z < 0) {; 5256 if (Hoption.Logz) continue;; 5257 z = -z;; 5258 kZNeg = kTRUE;; 5259 }; 5260 if (Hoption.Logz) {; 5261 if (z != 0) z = TMath::Log10(z);; 5262 else z = zmin;; 5263 }; 5264 ; 5265 if (dz == 0) continue;; 5266 zratio = TMath::Sqrt((z-zmin)/dz);; 5267 if (zratio == 0) continue;; 5268 ; 5269 xup = xcent*zratio + xk + xcent;; 5270 xlow = 2*(xk + xcent) - xup;; 5271 if (xup-xlow < dxmin) xup = xlow+dxmin;; 5272 if (Hoption.Logx) {; 5273 if (xup > 0) xup = TMath::Log10(xup);; 5274 else continue;; 5275 if (xlow > 0) xlow = TMath::Log10(xlow);; 5276 else continue;; 5277 }; 5278 ; 5279 yup = ycent*zratio + yk + ycent;; 5280 ylow = 2*(yk + ycent) - yup;; 5281 if (yup-ylow < dymin) yup = ylow+dymin;; 5282 if (Hoption.Logy) {; 5283 if (yup > 0) yup = TMath::Log10(yup);; 5284 else continue;; 5285 if (ylow > 0) ylow = TMath::Log10(ylow);; 5286 else continue;; 5287 }; 5288 ; 5289 xlow = TMath::Max(xlow, gPad->GetUxmin());; 5290 ylow = TMath::Max(ylow, gPad->GetUymin());; 5291 xup = TMath::Min(xup , gPad->GetUxmax());; 5292 yup = TMath::Min(yup , gPad->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:196527,Log,Logz,196527,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"2 namespace Math {; 53 ; 54 template <class T, unsigned int D>; 55 class SVector;; 56 ; 57#ifdef XXX; 58//==============================================================================; 59// SMatrix * SVector; 60//==============================================================================; 61template <class T, unsigned int D1, unsigned int D2, class R>; 62SVector<T,D1> operator*(const SMatrix<T,D1,D2,R>& rhs, const SVector<T,D2>& lhs); 63{; 64 SVector<T,D1> tmp;; 65 for(unsigned int i=0; i<D1; ++i) {; 66 const unsigned int rpos = i*D2;; 67 for(unsigned int j=0; j<D2; ++j) {; 68 tmp[i] += rhs.apply(rpos+j) * lhs.apply(j);; 69 }; 70 }; 71 return tmp;; 72}; 73#endif; 74 ; 75 ; 76// matrix-vector product:; 77// use apply(i) function for matrices. Tested (11/05/06) with using (i,j) but; 78// performances are slightly worse (not clear why); 79 ; 80//==============================================================================; 81// meta_row_dot; 82//==============================================================================; 83template <unsigned int I>; 84struct meta_row_dot {; 85 template <class A, class B>; 86 static inline typename A::value_type f(const A& lhs, const B& rhs,; 87 const unsigned int offset) {; 88 return lhs.apply(offset+I) * rhs.apply(I) + meta_row_dot<I-1>::f(lhs,rhs,offset);; 89 }; 90};; 91 ; 92 ; 93//==============================================================================; 94// meta_row_dot<0>; 95//==============================================================================; 96template <>; 97struct meta_row_dot<0> {; 98 template <class A, class B>; 99 static inline typename A::value_type f(const A& lhs, const B& rhs,; 100 const unsigned int offset) {; 101 return lhs.apply(offset) * rhs.apply(0);; 102 }; 103};; 104 ; 105//==============================================================================; 106// VectorMatrixRowOp; 107//==============================================================================; 108template <class Matrix, cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MatrixFunctions_8h_source.html:2454,Test,Tested,2454,doc/master/MatrixFunctions_8h_source.html,https://root.cern,https://root.cern/doc/master/MatrixFunctions_8h_source.html,1,['Test'],['Tested']
Testability,"2 of file MethodBase.h. ◆ DoMulticlass(). Bool_t TMVA::MethodBase::DoMulticlass ; (; ); const. inline . Definition at line 439 of file MethodBase.h. ◆ DoRegression(). Bool_t TMVA::MethodBase::DoRegression ; (; ); const. inline . Definition at line 438 of file MethodBase.h. ◆ ExitFromTraining(). void TMVA::MethodBase::ExitFromTraining ; (; ). inline . Definition at line 464 of file MethodBase.h. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::MethodBase::GetAnalysisType ; (; ); const. inline . Definition at line 437 of file MethodBase.h. ◆ GetCurrentIter(). UInt_t TMVA::MethodBase::GetCurrentIter ; (; ). inline . Definition at line 481 of file MethodBase.h. ◆ GetCutOrientation(). ECutOrientation TMVA::MethodBase::GetCutOrientation ; (; ); const. inlineprivate . Definition at line 552 of file MethodBase.h. ◆ GetDataMvaValues(). std::vector< Double_t > TMVA::MethodBase::GetDataMvaValues ; (; DataSet * ; data = nullptr, . Long64_t ; firstEvt = 0, . Long64_t ; lastEvt = -1, . Bool_t ; logProgress = false . ). protectedvirtual . get all the MVA values for the events of the given Data type ; Definition at line 940 of file MethodBase.cxx. ◆ GetEfficiency(). Double_t TMVA::MethodBase::GetEfficiency ; (; const TString & ; theString, . Types::ETreeType ; type, . Double_t & ; effSerr . ). virtual . fill background efficiency (resp. ; rejection) versus signal efficiency plots returns signal efficiency at background efficiency indicated in theString ; Reimplemented in TMVA::MethodCuts.; Definition at line 2302 of file MethodBase.cxx. ◆ GetEvent() [1/4]. const TMVA::Event * TMVA::MethodBase::GetEvent ; (; ); const. inline . Definition at line 751 of file MethodBase.h. ◆ GetEvent() [2/4]. const TMVA::Event * TMVA::MethodBase::GetEvent ; (; const TMVA::Event * ; ev); const. inline . Definition at line 746 of file MethodBase.h. ◆ GetEvent() [3/4]. const TMVA::Event * TMVA::MethodBase::GetEvent ; (; Long64_t ; ievt); const. inline . Definition at line 759 of file MethodBase.h. ◆ GetEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:43555,log,logProgress,43555,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['log'],['logProgress']
Testability,"2 }; 2053 UInt_t numClasses = theMethod->fDataSetInfo.GetNClasses();; 2054 ; 2055 std::vector<TString> classnames;; 2056 for (UInt_t iCls = 0; iCls < numClasses; ++iCls) {; 2057 classnames.push_back(theMethod->fDataSetInfo.GetClassInfo(iCls)->GetName());; 2058 }; 2059 Log() << kINFO; 2060 << ""=== Showing confusion matrix for method : "" << Form(""%-15s"", (const char *)mname[0][iMethod]); 2061 << Endl;; 2062 Log() << kINFO << ""(Signal Efficiency for Background Efficiency 0.01%)"" << Endl;; 2063 Log() << kINFO << ""---------------------------------------------------"" << Endl;; 2064 printMatrix(multiclass_testConfusionEffB01[iMethod], multiclass_trainConfusionEffB01[iMethod], classnames,; 2065 numClasses, Log());; 2066 Log() << kINFO << Endl;; 2067 ; 2068 Log() << kINFO << ""(Signal Efficiency for Background Efficiency 0.10%)"" << Endl;; 2069 Log() << kINFO << ""---------------------------------------------------"" << Endl;; 2070 printMatrix(multiclass_testConfusionEffB10[iMethod], multiclass_trainConfusionEffB10[iMethod], classnames,; 2071 numClasses, Log());; 2072 Log() << kINFO << Endl;; 2073 ; 2074 Log() << kINFO << ""(Signal Efficiency for Background Efficiency 0.30%)"" << Endl;; 2075 Log() << kINFO << ""---------------------------------------------------"" << Endl;; 2076 printMatrix(multiclass_testConfusionEffB30[iMethod], multiclass_trainConfusionEffB30[iMethod], classnames,; 2077 numClasses, Log());; 2078 Log() << kINFO << Endl;; 2079 }; 2080 Log() << kINFO << hLine << Endl;; 2081 Log() << kINFO << Endl;; 2082 ; 2083 } else {; 2084 // Binary classification; 2085 if (fROC) {; 2086 Log().EnableOutput();; 2087 gConfig().SetSilent(kFALSE);; 2088 Log() << Endl;; 2089 TString hLine = ""------------------------------------------------------------------------------------------""; 2090 ""-------------------------"";; 2091 Log() << kINFO << ""Evaluation results ranked by best signal efficiency and purity (area)"" << Endl;; 2092 Log() << kINFO << hLine << Endl;; 2093 Log() << kINFO << ""Dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:87256,Log,Log,87256,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,4,['Log'],['Log']
Testability,"2"" : the Delaunay triangles are painted with color levels.; 749/// - ""P"" : Draw a marker at each vertex; 750/// - ""P0"" : Draw a circle at each vertex. Each circle background is white.; 751/// - ""PCOL"" : Draw a marker at each vertex. The color of each marker is; 752/// defined according to its Z position.; 753/// - ""CONT"" : Draw contours; 754/// - ""LINE"" : Draw a 3D polyline; 755///; 756/// A TGraph2D can be also drawn with ANY options valid to draw a 2D histogram.; 757///; 758/// When a TGraph2D is drawn with one of the 2D histogram drawing option,; 759/// a intermediate 2D histogram is filled using the Delaunay triangles; 760/// technique to interpolate the data set.; 761 ; 762void TGraph2D::Draw(Option_t *option); 763{; 764 TString opt = option;; 765 opt.ToLower();; 766 if (gPad) {; 767 if (!gPad->IsEditable()) gROOT->MakeDefCanvas();; 768 if (!opt.Contains(""same"")) {; 769 //the following statement is necessary in case one attempts to draw; 770 //a temporary histogram already in the current pad; 771 if (TestBit(kCanDelete)) gPad->GetListOfPrimitives()->Remove(this);; 772 gPad->Clear();; 773 }; 774 }; 775 AppendPad(opt.Data());; 776}; 777 ; 778 ; 779////////////////////////////////////////////////////////////////////////////////; 780/// Executes action corresponding to one event; 781 ; 782void TGraph2D::ExecuteEvent(Int_t event, Int_t px, Int_t py); 783{; 784 if (fHistogram) fHistogram->ExecuteEvent(event, px, py);; 785}; 786 ; 787 ; 788////////////////////////////////////////////////////////////////////////////////; 789/// search object named name in the list of functions; 790 ; 791TObject *TGraph2D::FindObject(const char *name) const; 792{; 793 if (fFunctions) return fFunctions->FindObject(name);; 794 return nullptr;; 795}; 796 ; 797 ; 798////////////////////////////////////////////////////////////////////////////////; 799/// search object obj in the list of functions; 800 ; 801TObject *TGraph2D::FindObject(const TObject *obj) const; 802{; 803 if (fFunctions) retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:25226,Test,TestBit,25226,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['Test'],['TestBit']
Testability,"2"", 0); sigma_g1 = ROOT.RooRealVar(""sigma_g1"", ""width of g1"", 3); g1 = ROOT.RooGaussian(""g1"", ""g1"", x, mean, sigma_g1); ; sigma_g2 = ROOT.RooRealVar(""sigma_g2"", ""width of g2"", 4, 3.0, 6.0); g2 = ROOT.RooGaussian(""g2"", ""g2"", x, mean, sigma_g2); ; frac = ROOT.RooRealVar(""frac"", ""frac"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [g1, g2], [frac]); ; # Generate 1000 events; data = model.generate({x}, 1000); ; # Construct unbinned likelihood of model w.r.t. data; nll = model.createNLL(data); ; # Interactive minimization, error analysis; # -------------------------------------------------------------------------------; ; # Create MINUIT interface object; m = ROOT.RooMinimizer(nll); ; # Activate verbose logging of MINUIT parameter space stepping; m.setVerbose(True); ; # Call MIGRAD to minimize the likelihood; m.migrad(); ; # Print values of all parameters, reflect values (and error estimates); # that are back propagated from MINUIT; model.getParameters({x}).Print(""s""); ; # Disable verbose logging; m.setVerbose(False); ; # Run HESSE to calculate errors from d2L/dp2; m.hesse(); ; # Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT; sigma_g2.Print(); ; # Run MINOS on sigma_g2 parameter only; m.minos({sigma_g2}); ; # Print value (and error) of sigma_g2 parameter, reflects; # value and error back propagated from MINUIT; sigma_g2.Print(); ; # Saving results, contour plots; # ---------------------------------------------------------; ; # Save a snapshot of the fit result. ROOT.This object contains the initial; # fit parameters, final fit parameters, complete correlation; # matrix, EDM, minimized FCN , last MINUIT status code and; # the number of times the ROOT.RooFit function object has indicated evaluation; # problems (e.g. zero probabilities during likelihood evaluation); r = m.save(); ; # Make contour plot of mx vs sx at 1,2, sigma; frame = m.contour(frac, sigma_g2, 1, 2, 3); frame.SetTitle(""Contour plot""); ; # ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf601__intminuit_8py.html:1596,log,logging,1596,doc/master/rf601__intminuit_8py.html,https://root.cern,https://root.cern/doc/master/rf601__intminuit_8py.html,1,['log'],['logging']
Testability,"2#include ""TSystem.h""; 23#include ""TROOT.h""; 24 ; 25 ; 26#include ""TMVA/Tools.h""; 27#include ""TMVA/Factory.h""; 28#include ""TMVA/DataLoader.h""; 29#include ""TMVA/TMVAMultiClassGui.h""; 30 ; 31 ; 32using namespace TMVA;; 33 ; 34void TMVAMulticlass( TString myMethodList = """" ); 35{; 36 ; 37 // This loads the library; 38 TMVA::Tools::Instance();; 39 ; 40 // to get access to the GUI and all tmva macros; 41 //; 42 // TString tmva_dir(TString(gRootDir) + ""/tmva"");; 43 // if(gSystem->Getenv(""TMVASYS"")); 44 // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; 45 // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; 46 // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; 47 ; 48 ; 49 //---------------------------------------------------------------; 50 // Default MVA methods to be trained + tested; 51 std::map<std::string,int> Use;; 52 Use[""MLP""] = 1;; 53 Use[""BDTG""] = 1;; 54#ifdef R__HAS_TMVAGPU; 55 Use[""DL_CPU""] = 1;; 56 Use[""DL_GPU""] = 1;; 57#else; 58 Use[""DL_CPU""] = 1;; 59 Use[""DL_GPU""] = 0;; 60#endif; 61 Use[""FDA_GA""] = 0;; 62 Use[""PDEFoam""] = 1;; 63 ; 64 //---------------------------------------------------------------; 65 ; 66 std::cout << std::endl;; 67 std::cout << ""==> Start TMVAMulticlass"" << std::endl;; 68 ; 69 if (myMethodList != """") {; 70 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; 71 ; 72 std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; 73 for (UInt_t i=0; i<mlist.size(); i++) {; 74 std::string regMethod(mlist[i]);; 75 ; 76 if (Use.find(regMethod) == Use.end()) {; 77 std::cout << ""Method \"""" << regMethod << ""\"" not known in TMVA under this name. Choose among the following:"" << std::endl;; 78 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) std::cout << it->first << "" "";; 79 std::cout << std::endl;; 80 return;; 81 }; 82 Use[regMethod] = 1;; 83 }; 84 }; 85 ; 86 // Create a new root output file.; 87 TString outfileName = ""TMVAMulticlass.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C_source.html:1555,test,tested,1555,doc/master/TMVAMulticlass_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C_source.html,1,['test'],['tested']
Testability,"2(). Double_t TRolke::EvalLikeMod2 ; (; Double_t ; mu, . Int_t ; x, . Int_t ; y, . Double_t ; em, . Double_t ; sde, . Double_t ; tau, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 2: Poisson background/ Gauss Efficiency. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1082 of file TRolke.cxx. ◆ EvalLikeMod3(). Double_t TRolke::EvalLikeMod3 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; bm, . Double_t ; em, . Double_t ; sde, . Double_t ; sdb, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 3: Gauss background/ Gauss Efficiency. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1149 of file TRolke.cxx. ◆ EvalLikeMod4(). Double_t TRolke::EvalLikeMod4 ; (; Double_t ; mu, . Int_t ; x, . Int_t ; y, . Double_t ; tau, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 4: Poiss background/Efficiency known. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1217 of file TRolke.cxx. ◆ EvalLikeMod5(). Double_t TRolke::EvalLikeMod5 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; bm, . Double_t ; sdb, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 5: Gauss background/Efficiency known. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Prof",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:27117,Test,Test,27117,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['Test'],['Test']
Testability,"2(const Int_t x); virtual voidSetBBoxY1(const Int_t y); virtual voidSetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetNoEdges(Bool_t noEdges = kTRUE)TOGGLE GETTER ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPhimax(Double_t phi = 360)MENU ; virtual voidSetPhimin(Double_t phi = 0)MENU ; virtual voidSetR1(Double_t r1)MENU ; virtual voidSetR2(Double_t r2)MENU ; virtual voidSetTheta(Double_t theta = 0)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetX1(Double_t x1)MENU ; virtual voidSetY1(Double_t y1)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TEllipse(); TEllipse(const TEllipse& ellipse); TEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2 = 0, Double_t phimin = 0, Double_t phimax = 360, Double_t theta = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEllipse.html:8255,Test,TestBit,8255,root/html602/TEllipse.html,https://root.cern,https://root.cern/root/html602/TEllipse.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"2) << ""GFLOP/s""; 1194 << std::setw(12) << ""Conv. Steps"" << Endl;; 1195 std::string separator(62, '-');; 1196 Log() << separator << Endl;; 1197 }; 1198 ; 1199 while (!converged); 1200 {; 1201 stepCount++;; 1202 // Perform minimization steps for a full epoch.; 1203 trainingData.Shuffle();; 1204 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1205 batches.clear();; 1206 for (size_t j = 0; j < nThreads; j++) {; 1207 batches.reserve(nThreads);; 1208 batches.push_back(trainingData.GetBatch());; 1209 }; 1210 if (settings.momentum > 0.0) {; 1211 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1212 } else {; 1213 minimizer.Step(net, nets, batches);; 1214 }; 1215 }; 1216 ; 1217 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1218 ; 1219 // Compute test error.; 1220 Double_t testError = 0.0;; 1221 for (auto batch : testData) {; 1222 auto inputMatrix = batch.GetInput();; 1223 auto outputMatrix = batch.GetOutput();; 1224 auto weightMatrix = batch.GetWeights();; 1225 testError += testNet.Loss(inputMatrix, outputMatrix, weightMatrix);; 1226 }; 1227 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1228 ; 1229 //Log the loss value; 1230 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1231 ; 1232 end = std::chrono::system_clock::now();; 1233 ; 1234 // Compute training error.; 1235 Double_t trainingError = 0.0;; 1236 for (auto batch : trainingData) {; 1237 auto inputMatrix = batch.GetInput();; 1238 auto outputMatrix = batch.GetOutput();; 1239 auto weightMatrix = batch.GetWeights();; 1240 trainingError += net.Loss(inputMatrix, outputMatrix, weightMatrix);; 1241 }; 1242 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1243 ; 1244 //Log the loss value; 1245 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1246 ; 1247 if (fInteractive){; 1248 fInteractive->AddPoint(stepCount, trainingError, testError);; 1249 fIPyCurrentIter = 100*(double)minimizer.GetConvergenceCount() /(double)settings.convergence",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:44088,test,testError,44088,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['test'],"['testError', 'testNet']"
Testability,"2) << ""Test Err.""; 1004 << std::setw(12) << ""GFLOP/s""; 1005 << std::setw(12) << ""Conv. Steps"" << Endl;; 1006 std::string separator(62, '-');; 1007 Log() << separator << Endl;; 1008 }; 1009 ; 1010 while (!converged); 1011 {; 1012 stepCount++;; 1013 ; 1014 // Perform minimization steps for a full epoch.; 1015 trainingData.Shuffle();; 1016 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1017 batches.clear();; 1018 for (size_t j = 0; j < nThreads; j++) {; 1019 batches.reserve(nThreads);; 1020 batches.push_back(trainingData.GetBatch());; 1021 }; 1022 if (settings.momentum > 0.0) {; 1023 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1024 } else {; 1025 minimizer.Step(net, nets, batches);; 1026 }; 1027 }; 1028 ; 1029 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1030 ; 1031 // Compute test error.; 1032 Double_t testError = 0.0;; 1033 for (auto batch : testData) {; 1034 auto inputMatrix = batch.GetInput();; 1035 auto outputMatrix = batch.GetOutput();; 1036 testError += testNet.Loss(inputMatrix, outputMatrix);; 1037 }; 1038 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1039 ; 1040 //Log the loss value; 1041 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1042 ; 1043 end = std::chrono::system_clock::now();; 1044 ; 1045 // Compute training error.; 1046 Double_t trainingError = 0.0;; 1047 for (auto batch : trainingData) {; 1048 auto inputMatrix = batch.GetInput();; 1049 auto outputMatrix = batch.GetOutput();; 1050 trainingError += net.Loss(inputMatrix, outputMatrix);; 1051 }; 1052 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1053 //Log the loss value; 1054 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1055 ; 1056 // Compute numerical throughput.; 1057 std::chrono::duration<double> elapsed_seconds = end - start;; 1058 double seconds = elapsed_seconds.count();; 1059 double nFlops = (double) (settings.testInterval * batchesInEpoch);; 1060 nFlops *= net.GetNFlops() * 1e-9;; 10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:37035,test,testError,37035,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['test'],"['testError', 'testNet']"
Testability,"2),...) ] Clone-and-customize multiple models (modelPdf1,modelPdf2) according to ParamSplit and ParamSplitConstrained() specifications and return a RooSimultaneous pdf of all built clones, using the specified master index to map prototype pdfs to master states . Interface to RooCustomizer . EDIT::name( orig, substNode=origNode), ... ] Create a clone of input object orig, with the specified replacements operations executed . EDIT::name( orig, origNode=$REMOVE(), ... ] Create clone of input removing term origNode from all PROD() terms that contained it . EDIT::name( orig, origNode=$REMOVE(prodname,...), ... ] As above, but restrict removal of origNode to PROD term(s) prodname,... Interface to RooClassFactory . CEXPR::name(<expr>,var,...] Create a custom compiled pdf that evaluates the given expression . cexpr::name(<expr>,var,...] Create a custom compiled function that evaluates the given expression. $MetaType(...) Meta argument that does not result in construction of an object but is used logically organize input arguments in certain operator pdf constructions. The defined meta arguments are context dependent. The only meta argument that is defined globally is $Alias(typeName,aliasName) to define aliases for type names. For the definition of meta arguments in operator pdfs see the definitions below. . Definition at line 2084 of file RooWorkspace.cxx. ◆ function(). RooAbsReal * RooWorkspace::function ; (; RooStringView ; name); const. Retrieve function (RooAbsReal) with given name. Note that all RooAbsPdfs are also RooAbsReals. A null pointer is returned if not found. ; Definition at line 1223 of file RooWorkspace.cxx. ◆ fundArg(). RooAbsArg * RooWorkspace::fundArg ; (; RooStringView ; name); const. Return fundamental (i.e. ; non-derived) RooAbsArg with given name. Fundamental types are e.g. RooRealVar, RooCategory. A null pointer is returned if none is found. ; Definition at line 1295 of file RooWorkspace.cxx. ◆ genobj(). TObject * RooWorkspace::genobj ; (; RooStringV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:35798,log,logically,35798,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['log'],['logically']
Testability,"2),...) ] Clone-and-customize multiple models (modelPdf1,modelPdf2) according to ParamSplit and ParamSplitConstrained() specifications and return a RooSimultaneous pdf of all built clones, using the specified master index to map prototype pdfs to master states . Interface to RooCustomizer . EDIT::name( orig, substNode=origNode), ... ] Create a clone of input object orig, with the specified replacements operations executed . EDIT::name( orig, origNode=$REMOVE(), ... ] Create clone of input removing term origNode from all PROD() terms that contained it . EDIT::name( orig, origNode=$REMOVE(prodname,...), ... ] As above, but restrict removal of origNode to PROD term(s) prodname,... Interface to RooClassFactory . CEXPR::name(<expr>,var,...] Create a custom compiled pdf that evaluates the given expression . cexpr::name(<expr>,var,...] Create a custom compiled function that evaluates the given expression. $MetaType(...) Meta argument that does not result in construction of an object but is used logically organize input arguments in certain operator pdf constructions. The defined meta arguments are context dependent. The only meta argument that is defined globally is $Alias(typeName,aliasName) to define aliases for type names. For the definition of meta arguments in operator pdfs see the definitions below. . Definition at line 821 of file RooFactoryWSTool.cxx. ◆ processAliasExpression(). string RooFactoryWSTool::processAliasExpression ; (; const char * ; arg). protected . Parse token. ; Definition at line 1185 of file RooFactoryWSTool.cxx. ◆ processCompositeExpression(). std::string RooFactoryWSTool::processCompositeExpression ; (; const char * ; token). protected . Process a single composite expression. . e.g. A=RooGaussian::g[x,m,s] --> A=g; e.g. f[0,1]*RooGaussiang[x,m,s] --> f*g; e.g. RooGaussian::g(x,y,s)|x --> g|x; e.g. $MetaArg(RooGaussian::g[x,m,s],blah) --> $MetaArg(g,blah) . Definition at line 909 of file RooFactoryWSTool.cxx. ◆ processCreateArg(). string RooFactor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:37486,log,logically,37486,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,1,['log'],['logically']
Testability,"2); 2678{; 2679 TMatrixT<Element> target;; 2680 ; 2681 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2682 Error(""operator>=(const TMatrixT&,const TMatrixTSym&)"", ""matrices not compatible"");; 2683 return target;; 2684 }; 2685 ; 2686 target.ResizeTo(source1);; 2687 ; 2688 const Element *sp1 = source1.GetMatrixArray();; 2689 const Element *sp2 = source2.GetMatrixArray();; 2690 Element *tp = target.GetMatrixArray();; 2691 const Element *const tp_last = tp + target.GetNoElements();; 2692 while (tp < tp_last) {; 2693 *tp++ = (*sp1) >= (*sp2);; 2694 sp1++;; 2695 sp2++;; 2696 }; 2697 ; 2698 return target;; 2699}; 2700 ; 2701////////////////////////////////////////////////////////////////////////////////; 2702/// logical operation source1 >= source2; 2703 ; 2704template <class Element>; 2705TMatrixT<Element> TMatrixTAutoloadOps::operator>=(const TMatrixTSym<Element> &source1, const TMatrixT<Element> &source2); 2706{; 2707 return operator<(source2, source1);; 2708}; 2709 ; 2710////////////////////////////////////////////////////////////////////////////////; 2711/// logical operation source1 <= source2; 2712 ; 2713template <class Element>; 2714TMatrixT<Element> TMatrixTAutoloadOps::operator<=(const TMatrixT<Element> &source1, const TMatrixT<Element> &source2); 2715{; 2716 TMatrixT<Element> target;; 2717 ; 2718 if (gMatrixCheck && !AreCompatible(source1, source2)) {; 2719 Error(""operator<=(const TMatrixT&,const TMatrixT&)"", ""matrices not compatible"");; 2720 return target;; 2721 }; 2722 ; 2723 target.ResizeTo(source1);; 2724 ; 2725 const Element *sp1 = source1.GetMatrixArray();; 2726 const Element *sp2 = source2.GetMatrixArray();; 2727 Element *tp = target.GetMatrixArray();; 2728 const Element *const tp_last = tp + target.GetNoElements();; 2729 while (tp < tp_last) {; 2730 *tp++ = (*sp1) <= (*sp2);; 2731 sp1++;; 2732 sp2++;; 2733 }; 2734 ; 2735 return target;; 2736}; 2737 ; 2738////////////////////////////////////////////////////////////////////////////////; 2739/// l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:94696,log,logical,94696,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,2,['log'],['logical']
Testability,"2); TString&TString::ReplaceAll(const char* s1, const char* s2); TString&TString::ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); voidTString::Resize(Ssiz_t n); static Ssiz_tTString::ResizeIncrement(Ssiz_t ri = 16); virtual voidSetString(const char* s); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTString::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t nc); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::Cow(); voidTString::Cow(Ssiz_t nc); voidTString::InitChar(char c); TStringRef*TString::Pref() const. Data Members; public:. enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. char*TString::fDataref. counted data (TStringRef is in front). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGString(const TGString* s); cconstructor. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw string. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a string in a column with width w. If string is longer than; w wrap it to next line. Int_t GetLines(FontStruct_t font, UInt_t w); Get number of lines of width w the string would take using a certain font. TGString(); { }. TGString(const char* s); { }. TGString(Int_t number); { *this += number; }. TGString(const TGString* s). virtual ~TGString(); { }. Int_t Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGString.html:7396,Assert,AssertElement,7396,root/html528/TGString.html,https://root.cern,https://root.cern/root/html528/TGString.html,1,['Assert'],['AssertElement']
Testability,"2);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(0.); // Axis title automatically placed; A3->Draw();; }; gPad#define gPadDefinition TVirtualPad.h:308; TF11-Dim function classDefinition TF1.h:233; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTitleOffsetvoid SetTitleOffset(Float_t titleoffset=1)Definition TGaxis.h:128; TGaxis::SetTitleSizevoid SetTitleSize(Float_t titlesize)Definition TGaxis.h:129; TGaxis::SetTitlevirtual void SetTitle(const char *title="""")Change the title of the axis.Definition TGaxis.cxx:2942; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; f1TF1 * f1Definition legend1.C:11; c2return c2Definition legend2.C:14. Note that this functionality has some limitations and does not follow all the TGaxis setting. In particular the number of divisions or the maximum number digits do not apply. Logarithmic axis; By default axis are linear. To define a TGaxis as logarithmic, it is enough to create it with the option ""G"".; When plotting an histogram or a graph the logarithmic scale can be set using:. gPad->SetLogx(1); set the logarithmic scale on the X axis; gPad->SetLogy(1); set the logarithmic scale on the Y axis. When the SetMoreLogLabels() method is called more labels are drawn when in logarithmic scale and there is a small number of decades (less than 3). Blank axis; To draw only the axis tick marks without the axis body, it is enough to specify the option ""B"". It useful to superpose axis. Arrow on axis; SinceROOT version 6.27/01:; To draw an arrow at the end of the axis use the option "">"". To draw it at the beginning of the axis use the option ""<"". To draw it on both ends use ""<>"".; {; auto c = new TCanvas(""c"",""c"",0,0,500,500);; c->Range(-11,-11,11,11);; ; auto f2 = new TF1(""x2"",""x*x"",-10,10);; f2->SetLineColor(kRed);; f2->Draw(""same"");; ; auto f3 = new TF1(""x3"",""x*x*x"",-10,10);; f3->SetLineCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:6892,Log,Logarithmic,6892,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['Log'],['Logarithmic']
Testability,"2, ... , B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path:/TOP_1/.../A_3/B_7 will represent a unique object. Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call logical graph the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical graph, the physical tree can become a huge structure with several millions of nodes in case of complex geometries; therefore, it is not always a good idea to keep it transient in memory. Since the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current physical node is not an object that can be asked for at a given moment, but rather represented by the combination: current node/current global matrix. However, physical nodes have unique ID's that can be retrieved for a given modeller state. These can be fed back to the modeller in order to force a physical node to become current. The advantage of this comes from the fact that all navigation queries check first the current node; therefore the location of a point in the geometry can be saved as a starting state for later use.; Nodes can be declared as overlapping in case they do overlap with other nodes inside the same container or extrude this container (see also ‘Checking the Geometry'). Non-overlapping nodes can be created with:; TGeoVolume::AddNode(TGeoVolume *daughter,Int_t copy_No,; TGeoMatrix *matr);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoMatrixGeometrical transfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:22245,log,logical,22245,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['log'],['logical']
Testability,"2, const RooCmdArg& arg3, const RooCmdArg& arg4, 			 const RooCmdArg& arg5, const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); Plot the distribution of the fitted value of the given parameter on a newly created frame. This function accepts the following optional arguments; FrameRange(double lo, double hi) -- Set range of frame to given specification; FrameBins(int bins) -- Set default number of bins of frame to given number; Frame(...) -- Pass supplied named arguments to RooAbsRealLValue::frame() function. See frame() function; for list of allowed arguments. If no frame specifications are given, the AutoRange() feature will be used to set the range; Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* plotNLL(const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Plot the distribution of the -log(L) values on a newly created frame. This function accepts the following optional arguments; FrameRange(double lo, double hi) -- Set range of frame to given specification; FrameBins(int bins) -- Set default number of bins of frame to given number; Frame(...) -- Pass supplied named arguments to RooAbsRealLValue::frame() function. See frame() function; for list of allowed arguments. If no frame specifications are given, the AutoRange() feature will be used to set the range; Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* plotError(const RooRealVar& param, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:22503,log,log,22503,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,1,['log'],['log']
Testability,"2, iz1, iz2);; 8274 for (i = 1; i <= 8; ++i) {; 8275 r[i*3 - 3] = av[i*3 - 3] + av[i*3 - 2]*cosa;; 8276 r[i*3 - 2] = av[i*3 - 2]*sina;; 8277 r[i*3 - 1] = av[i*3 - 1];; 8278 }; 8279 ; 8280 view->WCtoNDC(&r[ix1*3 - 3], x1);; 8281 view->WCtoNDC(&r[ix2*3 - 3], x2);; 8282 view->WCtoNDC(&r[iy1*3 - 3], y1);; 8283 view->WCtoNDC(&r[iy2*3 - 3], y2);; 8284 view->WCtoNDC(&r[iz1*3 - 3], z1);; 8285 view->WCtoNDC(&r[iz2*3 - 3], z2);; 8286 ; 8287 view->SetAxisNDC(x1, x2, y1, y2, z1, z2);; 8288 ; 8289 Double_t *rmin = view->GetRmin();; 8290 Double_t *rmax = view->GetRmax();; 8291 if (!rmin || !rmax) return;; 8292 ; 8293 // Initialize the axis options; 8294 if (x1[0] > x2[0]) strlcpy(chopax, ""SDH=+"",8);; 8295 else strlcpy(chopax, ""SDH=-"",8);; 8296 if (y1[0] > y2[0]) strlcpy(chopay, ""SDH=+"",8);; 8297 else strlcpy(chopay, ""SDH=-"",8);; 8298 if (z2[1] > z1[1]) strlcpy(chopaz, ""SDH=+"",8);; 8299 else strlcpy(chopaz, ""SDH=-"",8);; 8300 ; 8301 // Option LOG is required ?; 8302 if (Hoption.Logx) strlcat(chopax,""G"",8);; 8303 if (Hoption.Logy) strlcat(chopay,""G"",8);; 8304 if (Hoption.Logz) strlcat(chopaz,""G"",8);; 8305 ; 8306 // Initialize the number of divisions. If the; 8307 // number of divisions is negative, option 'N' is required.; 8308 ndivx = fXaxis->GetNdivisions();; 8309 ndivy = fYaxis->GetNdivisions();; 8310 ndivz = fZaxis->GetNdivisions();; 8311 if (ndivx < 0) {; 8312 ndivx = TMath::Abs(ndivx);; 8313 strlcat(chopax, ""N"",8);; 8314 }; 8315 if (ndivy < 0) {; 8316 ndivy = TMath::Abs(ndivy);; 8317 strlcat(chopay, ""N"",8);; 8318 }; 8319 if (ndivz < 0) {; 8320 ndivz = TMath::Abs(ndivz);; 8321 strlcat(chopaz, ""N"",8);; 8322 }; 8323 ; 8324 // Set Axis attributes.; 8325 // The variable SCALE rescales the VSIZ; 8326 // in order to have the same label size for all angles.; 8327 ; 8328 axis->SetLineWidth(1);; 8329 ; 8330 // X axis drawing; 8331 if (TMath::Abs(x1[0] - x2[0]) >= epsil || TMath::Abs(x1[1] - x2[1]) > epsil) {; 8332 axis->ImportAxisAttributes(fXaxis);; 8333 axis->SetLabelOffset(fXaxis->Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:297606,Log,Logx,297606,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability,"2, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>.; Two typedefs have been defined for backward compatibility:; RooRealProxy = RooTemplateProxy<RooAbsReal>. Any generic object that converts to a real value.; RooCategoryProxy = RooTemplateProxy<RooAbsCategory>. Any category object. To modernise a class, one can change the template argument of the proxy to the most appropriate type, and increment the class version of the owner. RooFit before ROOT 6.22 RooFit starting with ROOT 6.22 . // In .h: Declare member; RooRealProxy pdfProxy;; ; ClassDefOverride(MyPdf, 1); };; ; // In .cxx: Initialise proxy in constructor; // The proxy will accept any RooAbsArg, so the type of; // ""thePdf"" has to be checked manually.; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {; [ Extra checking here ... ]; }; ; ; // In .cxx: Accessing the proxy; RooAbsArg* absArg = pdfProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // Manual type checking ...; pdf->fitTo(...);; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsPdfAbstract interface for all probability density functions.Definition RooAbsPdf.h:40; RooAbsPdf::fitToRooFit::OwningPtr< RooFitResult > fitTo(RooAbsData &data, CmdArgs_t const &... cmdArgs)Fit PDF to given dataset.Definition RooAbsPdf.h:157; RooArgProxy::nameconst char * name() const overrideReturn name of proxy.Definition RooArgProxy.h:51; RooArgProxy::absArgRooAbsArg * absArg() constReturn pointer to contained argument.Definition RooArgProxy.h:46; // In .h: Declare member; RooTemplateProxy<RooAbsPdf> pdfProxy;; ; ClassDefOverride(MyPdf, 2); };; ; // In .cxx: Initialise proxy in constructor; // The program will not compile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:2666,assert,assert,2666,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['assert'],['assert']
Testability,"2- gridlength: grid length on main tick marks.; 133 ; 134It should be noted that `func` is not defined in the user's coordinate space,; 135but in the new TGaxis space. If `x` is the original axis, `w` the new axis,; 136and `w = f(x)` (for example, `f` is a calibration function converting ADC; 137channels `x` to energy `w`), then `func` must be supplied as `f^{-1}(w)`.; 138 ; 139Examples:; 140 ; 141Begin_Macro(source); 142{; 143 TCanvas *c2 = new TCanvas(""c2"",""c2"",10,10,700,500);; 144 ; 145 gPad->DrawFrame(0.,-2.,10.,2);; 146 ; 147 TF1 *f1=new TF1(""f1"",""-x"",-10,10);; 148 TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; 149 A1->SetTitle(""axis with decreasing values"");; 150 A1->Draw();; 151 ; 152 TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; 153 TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; 154 A2->SetTitle(""exponential axis"");; 155 A2->SetLabelSize(0.03);; 156 A2->SetTitleSize(0.03);; 157 A2->SetTitleOffset(1.2);; 158 A2->Draw();; 159 ; 160 TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; 161 TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,"""");; 162 A3->SetTitle(""logarithmic axis"");; 163 A3->SetLabelSize(0.02);; 164 A3->SetTitleSize(0.03);; 165 A3->SetTitleOffset(0.); // Axis title automatically placed; 166 A3->Draw();; 167}; 168End_Macro; 169 ; 170Note that this functionality has some limitations and does not follow all the TGaxis setting.; 171In particular the number of divisions or the maximum number digits do not apply.; 172 ; 173\anchor GA02; 174## Logarithmic axis; 175 ; 176By default axis are linear. To define a `TGaxis` as logarithmic, it is; 177enough to create it with the option `""G""`.; 178 ; 179When plotting an histogram or a graph the logarithmic scale can be set using:; 180 ; 181 - `gPad->SetLogx(1);` set the logarithmic scale on the X axis; 182 - `gPad->SetLogy(1);` set the logarithmic scale on the Y axis; 183 ; 184When the `SetMoreLogLabels()` method is called more labels are drawn; 185when in logarithmic scale and there is a small number of decades (less than 3).; 186 ; 187\ancho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:5814,log,logarithmic,5814,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['log'],['logarithmic']
Testability,"2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Double_tTPad::fThetathe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePad.html:24857,log,log,24857,root/html528/TEvePad.html,https://root.cern,https://root.cern/root/html528/TEvePad.html,6,['log'],['log']
Testability,"2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Double_tfMaximumSlider maximum value in [0,1]; TStringfMethodcommand to be executed when slider is changed; Double_tfMinimumSlider minimum value in [0,1]; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TObject*fObject!Pointer to associated object; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlider.html:27312,log,log,27312,root/html528/TSlider.html,https://root.cern,https://root.cern/root/html528/TSlider.html,6,['log'],['log']
Testability,"2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); TStringTButton::fMethodMethod to be executed by this button; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGroupButton.html:26224,log,log,26224,root/html528/TGroupButton.html,https://root.cern,https://root.cern/root/html528/TGroupButton.html,6,['log'],['log']
Testability,"2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); TStringfMethodMethod to be executed by this button; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing the pad; Float_tTAttPad::fRightMarginRightMargin; Bool_tTQObject::fSignalsBlocked! flag used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TButton.html:27873,log,log,27873,root/html526/TButton.html,https://root.cern,https://root.cern/root/html526/TButton.html,7,['log'],['log']
Testability,2.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Minimum Test error found - save the configuration ; : 764 | 15.3977 18.5678 0.0201039 0.0018081 43725.8 0; : 765 | 15.238 19.0685 0.0200523 0.00175459 43721.4 1; : 766 Minimum Test error found - save the configuration ; : 766 | 14.9634 18.5633 0.0200937 0.00181207 43759.7 0; : 767 Minimum Test error found - save the configuration ; : 767 | 14.6611 18.2211 0.0200896 0.00180918 43762.7 0; : 768 Minimum Test error found - save the configuration ; : 768 | 14.4892 18.1817 0.0200772 0.00181141 43797.6 0; : 769 Minimum Test error found - save the configuration ; : 769 | 14.3366 17.8635 0.0200909 0.00180773 43756.2 0; : 770 Minimum Test error found - save the configuration ; : 770 | 14.5733 17.5465 0.0200968 0.00180191 43728 0; : 771 | 13.9827 17.8429 0.0200367 0.0017469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.08,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:95980,Test,Test,95980,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,2.9 4; : 1090 | 2.7802 2.77409 0.0201095 0.00176132 43601.1 5; : 1091 Minimum Test error found - save the configuration ; : 1091 | 2.70558 2.65986 0.0201114 0.00182448 43747.2 0; : 1092 | 2.6448 3.0589 0.0201057 0.00177852 43651.1 1; : 1093 | 2.72808 2.74342 0.0203461 0.00179008 43112.8 2; : 1094 | 2.90448 3.26391 0.0206789 0.00182352 42428.3 3; : 1095 | 2.99675 3.1053 0.0203677 0.00177969 43038.5 4; : 1096 | 2.82435 2.85928 0.0200663 0.00175842 43696.9 5; : 1097 | 2.94319 2.67707 0.0201699 0.00175551 43444.3 6; : 1098 | 3.07322 3.0122 0.0200534 0.00175203 43712.7 7; : 1099 | 2.83008 3.95183 0.0205372 0.0017939 42681.9 8; : 1100 | 2.67822 3.34195 0.020666 0.00184085 42496.4 9; : 1101 | 2.97088 2.72336 0.0206136 0.0017901 42500 10; : 1102 Minimum Test error found - save the configuration ; : 1102 | 2.66188 2.52638 0.020367 0.00185502 43215.3 0; : 1103 | 3.01155 3.18843 0.0202364 0.00176536 43311 1; : 1104 | 2.71885 3.00051 0.0201103 0.00176305 43603.3 2; : 1105 Minimum Test error found - save the configuration ; : 1105 | 2.73591 2.50832 0.0201341 0.0018587 43774.7 0; : 1106 | 2.7002 2.7081 0.0203577 0.00176876 43036.3 1; : 1107 | 2.85017 3.38001 0.0201747 0.00176074 43445.3 2; : 1108 | 2.78494 2.55451 0.0203389 0.00176376 43068.3 3; : 1109 | 2.71632 3.12003 0.0200899 0.00175276 43627.4 4; : 1110 | 3.16531 2.9918 0.020346 0.00180026 43136.7 5; : 1111 Minimum Test error found - save the configuration ; : 1111 | 2.97087 2.45167 0.0201922 0.00182484 43555.6 0; : 1112 | 2.60355 2.50464 0.0200664 0.00176061 43702 1; : 1113 | 2.54376 2.96916 0.0200737 0.00178101 43733.3 2; : 1114 | 2.77186 2.89815 0.0200657 0.00175793 43697.4 3; : 1115 | 2.58652 2.73506 0.020068 0.00175912 43694.6 4; : 1116 Minimum Test error found - save the configuration ; : 1116 | 2.82496 2.31503 0.0201083 0.00181922 43742 0; : 1117 | 2.74168 2.90157 0.0200454 0.00175765 43745.2 1; : 1118 | 2.51176 4.00704 0.0201409 0.00176812 43542.7 2; : 1119 | 3.03618 2.55498 0.0202517 0.00178949 43331.7 3; : 1120 | 2.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:120002,Test,Test,120002,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"2.resize(nx * ny);; 5741 // copy old bin contents and then set to new ordered bins; 5742 // N.B. bin in histograms starts from 1, but in y we consider under/overflows; 5743 for (i = 0; i < nx; i++) {; 5744 for (j = 0; j < ny; j++) { // ny is nbins+2; 5745 Int_t bin = GetBin(i, j);; 5746 cont[i + nx * j] = RetrieveBinContent(bin);; 5747 if (!errors2.empty()); 5748 errors2[i + nx * j] = GetBinErrorSqUnchecked(bin);; 5749 }; 5750 }; 5751 if (axis == GetXaxis()) {; 5752 for (i = 0; i < n; i++) {; 5753 for (j = 0; j < ny; j++) {; 5754 Int_t bin = GetBin(i + 1 , j);; 5755 UpdateBinContent(bin, cont[b[a[i]] + nx * j]);; 5756 if (!errors2.empty()); 5757 fSumw2.fArray[bin] = errors2[b[a[i]] + nx * j];; 5758 }; 5759 }; 5760 } else {; 5761 for (i = 0; i < nx; i++) {; 5762 for (j = 0; j < n; j++) {; 5763 Int_t bin = GetBin(i, j + 1);; 5764 UpdateBinContent(bin, cont[i + nx * b[a[j]]]);; 5765 if (!errors2.empty()); 5766 fSumw2.fArray[bin] = errors2[i + nx * b[a[j]]];; 5767 }; 5768 }; 5769 }; 5770 } else {; 5771 // case of 3D (needs to be tested); 5772 Int_t nx = fXaxis.GetNbins() + 2;; 5773 Int_t ny = fYaxis.GetNbins() + 2;; 5774 Int_t nz = fZaxis.GetNbins() + 2;; 5775 cont.resize(nx * ny * nz);; 5776 if (fSumw2.fN); 5777 errors2.resize(nx * ny * nz);; 5778 for (i = 0; i < nx; i++) {; 5779 for (j = 0; j < ny; j++) {; 5780 for (k = 0; k < nz; k++) {; 5781 Int_t bin = GetBin(i, j, k);; 5782 cont[i + nx * (j + ny * k)] = RetrieveBinContent(bin);; 5783 if (!errors2.empty()); 5784 errors2[i + nx * (j + ny * k)] = GetBinErrorSqUnchecked(bin);; 5785 }; 5786 }; 5787 }; 5788 if (axis == GetXaxis()) {; 5789 // labels on x axis; 5790 for (i = 0; i < n; i++) { // for x we loop only on bins with the labels; 5791 for (j = 0; j < ny; j++) {; 5792 for (k = 0; k < nz; k++) {; 5793 Int_t bin = GetBin(i + 1, j, k);; 5794 UpdateBinContent(bin, cont[b[a[i]] + nx * (j + ny * k)]);; 5795 if (!errors2.empty()); 5796 fSumw2.fArray[bin] = errors2[b[a[i]] + nx * (j + ny * k)];; 5797 }; 5798 }; 5799 }; 5800",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:229351,test,tested,229351,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['tested']
Testability,"2/2]. TMVA::CrossEntropy::CrossEntropy ; (; const CrossEntropy & ; g). inline . Definition at line 51 of file CrossEntropy.h. ◆ ~CrossEntropy(). virtual TMVA::CrossEntropy::~CrossEntropy ; (; ). inlinevirtual . Definition at line 54 of file CrossEntropy.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::CrossEntropy::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::CrossEntropy::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::CrossEntropy::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file CrossEntropy.h. ◆ DeclFileName(). static const char * TMVA::CrossEntropy::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file CrossEntropy.h. ◆ GetSeparationIndex(). Double_t TMVA::CrossEntropy::GetSeparationIndex ; (; const Double_t ; s, . const Double_t ; b . ). virtual . Cross Entropy defined as: ; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) . Implements TMVA::SeparationBase.; Definition at line 47 of file CrossEntropy.cxx. ◆ IsA(). virtual TClass * TMVA::CrossEntropy::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::SeparationBase.; Definition at line 61 of file CrossEntropy.h. ◆ Streamer(). virtual void TMVA::CrossEntropy::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::SeparationBase. ◆ StreamerNVirtual(). void TMVA::CrossEntropy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file CrossEntropy.h. Libraries for TMVA::CrossEntropy:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CrossEntropy.h; tmva/tmva/src/CrossEntropy.cxx. TMVACrossEntropy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html:3276,log,log,3276,doc/master/classTMVA_1_1CrossEntropy.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html,2,['log'],['log']
Testability,20 | 2.66116 2.61177 0.0204165 0.00176394 42889.5 4; : 1121 | 3.00965 2.56116 0.0204562 0.00180217 42886.2 5; : 1122 | 3.0625 3.75816 0.0204635 0.00176149 42776.2 6; : 1123 | 2.88666 2.6576 0.0204265 0.00178135 42906.6 7; : 1124 | 2.54231 2.73598 0.020225 0.00176346 43333.4 8; : 1125 | 2.44231 2.73459 0.0201498 0.00175906 43500.1 9; : 1126 | 2.45201 2.82465 0.0200726 0.00175651 43677.5 10; : 1127 | 2.54248 2.42056 0.0201867 0.00176633 43430.3 11; : 1128 | 2.47016 2.53962 0.0206089 0.00182988 42600.8 12; : 1129 | 2.38268 2.44496 0.0204067 0.00176828 42922.1 13; : 1130 | 2.59925 2.55821 0.0200531 0.00176378 43741.4 14; : 1131 | 2.55367 2.59723 0.0200573 0.00177202 43751.1 15; : 1132 | 2.73554 2.74944 0.020135 0.00176885 43558.3 16; : 1133 | 2.68556 2.54814 0.0200421 0.00176557 43772.1 17; : 1134 | 2.52258 2.47147 0.0200724 0.0017645 43696.9 18; : 1135 | 2.54757 2.67188 0.0200351 0.00176104 43778 19; : 1136 | 2.63764 2.78828 0.0200363 0.0017639 43781.8 20; : 1137 Minimum Test error found - save the configuration ; : 1137 | 2.5743 2.19951 0.0201074 0.00183887 43791.1 0; : 1138 | 2.48438 2.23196 0.0200456 0.00175699 43743.1 1; : 1139 | 2.50812 2.26597 0.0200665 0.00175755 43694.4 2; : 1140 | 2.3988 2.24899 0.0200386 0.00175805 43762.4 3; : 1141 | 2.7672 3.06409 0.0200539 0.00176427 43740.6 4; : 1142 | 2.49905 2.42566 0.0200843 0.00176461 43669 5; : 1143 | 2.42701 2.41776 0.0200668 0.00178464 43758.5 6; : 1144 | 2.26582 2.24235 0.0200333 0.00176428 43790 7; : 1145 | 2.32819 2.25052 0.0200451 0.00176354 43759.9 8; : 1146 | 2.38829 2.61112 0.0201128 0.00176481 43601.4 9; : 1147 Minimum Test error found - save the configuration ; : 1147 | 2.71251 2.10665 0.0201008 0.00183197 43790.4 0; : 1148 | 2.56397 2.40861 0.020487 0.00176022 42719.5 1; : 1149 | 2.55242 2.99103 0.0200648 0.00175967 43703.6 2; : 1150 | 2.53052 2.44638 0.0200564 0.00175887 43721.8 3; : 1151 | 2.36129 2.75405 0.0200417 0.00175605 43750.1 4; : 1152 | 2.30106 2.27284 0.0200533 0.00175628 43722.9 5; : 1153 | 2,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:121996,Test,Test,121996,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"20//-----------------------------------------------------------------------------; 221bool CPyCppyy::Instance_IsLively(PyObject* pyobject); 222{; 223// Test whether the given instance can safely return to C++; 224 if (!CPPInstance_Check(pyobject)); 225 return true; // simply don't know; 226 ; 227// the instance fails the lively test if it owns the C++ object while having a; 228// reference count of 1 (meaning: it could delete the C++ instance any moment); 229 if (pyobject->ob_refcnt <= 1 && (((CPPInstance*)pyobject)->fFlags & CPPInstance::kIsOwner)); 230 return false;; 231 ; 232 return true;; 233}; 234 ; 235//-----------------------------------------------------------------------------; 236bool CPyCppyy::Overload_Check(PyObject* pyobject); 237{; 238// Test if the given pyobject is of CPPOverload derived type.; 239 if (!Initialize()); 240 return false;; 241 ; 242// detailed walk through inheritance hierarchy; 243 return CPPOverload_Check(pyobject);; 244}; 245 ; 246//-----------------------------------------------------------------------------; 247bool CPyCppyy::Overload_CheckExact(PyObject* pyobject); 248{; 249// Test if the given pyobject is of CPPOverload type.; 250 if (!Initialize()); 251 return false;; 252 ; 253// direct pointer comparison of type member; 254 return CPPOverload_CheckExact(pyobject);; 255}; 256 ; 257 ; 258//- access to the python interpreter ----------------------------------------; 259bool CPyCppyy::Import(const std::string& mod_name); 260{; 261// Import the named python module and create Cling equivalents for its classes.; 262 if (!Initialize()); 263 return false;; 264 ; 265 PyObject* mod = PyImport_ImportModule(mod_name.c_str());; 266 if (!mod) {; 267 PyErr_Print();; 268 return false;; 269 }; 270 ; 271// allow finding to prevent creation of a python proxy for the C++ proxy; 272 Py_INCREF(mod);; 273 PyModule_AddObject(gThisModule, mod_name.c_str(), mod);; 274 ; 275// force creation of the module as a namespace; 276// TODO: the following is broke",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:8650,Test,Test,8650,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['Test'],['Test']
Testability,"2023{; 2024 ; 2025 Long64_t nEvents = Data()->GetNEvents();; 2026 if (firstEvt > lastEvt || lastEvt > nEvents) lastEvt = nEvents;; 2027 if (firstEvt < 0) firstEvt = 0;; 2028 nEvents = lastEvt-firstEvt;; 2029 ; 2030 // use same batch size as for training (from first strategy); 2031 size_t defaultEvalBatchSize = (fXInput.GetSize() > 1000) ? 100 : 1000;; 2032 size_t batchSize = (fTrainingSettings.empty()) ? defaultEvalBatchSize : fTrainingSettings.front().batchSize;; 2033 if ( size_t(nEvents) < batchSize ) batchSize = nEvents;; 2034 ; 2035 // using for training same scalar type defined for the prediction; 2036 if (this->GetArchitectureString() == ""GPU"") {; 2037#ifdef R__HAS_TMVAGPU; 2038 Log() << kINFO << ""Evaluate deep neural network on GPU using batches with size = "" << batchSize << Endl << Endl;; 2039#ifdef R__HAS_CUDNN; 2040 return PredictDeepNet<DNN::TCudnn<ScalarImpl_t>>(firstEvt, lastEvt, batchSize, logProgress);; 2041#else; 2042 return PredictDeepNet<DNN::TCuda<ScalarImpl_t>>(firstEvt, lastEvt, batchSize, logProgress);; 2043#endif; 2044 ; 2045#endif; 2046 }; 2047 Log() << kINFO << ""Evaluate deep neural network on CPU using batches with size = "" << batchSize << Endl << Endl;; 2048 return PredictDeepNet<DNN::TCpu<ScalarImpl_t> >(firstEvt, lastEvt, batchSize, logProgress);; 2049}; 2050////////////////////////////////////////////////////////////////////////////////; 2051void MethodDL::AddWeightsXMLTo(void * parent) const; 2052{; 2053 // Create the parent XML node with name ""Weights""; 2054 auto & xmlEngine = gTools().xmlengine();; 2055 void* nn = xmlEngine.NewChild(parent, 0, ""Weights"");; 2056 ; 2057 /*! Get all necessary information, in order to be able to reconstruct the net; 2058 * if we read the same XML file. */; 2059 ; 2060 // Deep Net specific info; 2061 Int_t depth = fNet->GetDepth();; 2062 ; 2063 Int_t inputDepth = fNet->GetInputDepth();; 2064 Int_t inputHeight = fNet->GetInputHeight();; 2065 Int_t inputWidth = fNet->GetInputWidth();; 2066 ; 2067 Int_t batc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:81168,Log,Log,81168,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,5,"['Log', 'log']","['Log', 'logProgress']"
Testability,207 43759.7 0; : 767 Minimum Test error found - save the configuration ; : 767 | 14.6611 18.2211 0.0200896 0.00180918 43762.7 0; : 768 Minimum Test error found - save the configuration ; : 768 | 14.4892 18.1817 0.0200772 0.00181141 43797.6 0; : 769 Minimum Test error found - save the configuration ; : 769 | 14.3366 17.8635 0.0200909 0.00180773 43756.2 0; : 770 Minimum Test error found - save the configuration ; : 770 | 14.5733 17.5465 0.0200968 0.00180191 43728 0; : 771 | 13.9827 17.8429 0.0200367 0.0017469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 1,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:96424,Test,Test,96424,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"21 // Run them before shutting down.; 1622 if (!IsFromRootCling()); 1623 GetInterpreterImpl()->runAtExitFuncs();; 1624 fIsShuttingDown = true;; 1625 delete fMapfile;; 1626 delete fRootmapFiles;; 1627 delete fTemporaries;; 1628 delete fNormalizedCtxt;; 1629 delete fLookupHelper;; 1630 gCling = nullptr;; 1631}; 1632 ; 1633////////////////////////////////////////////////////////////////////////////////; 1634/// Initialize the interpreter, once TROOT::fInterpreter is set.; 1635 ; 1636void TCling::Initialize(); 1637{; 1638 fClingCallbacks->Initialize();; 1639 ; 1640 // We are set up. Enable ROOT's AutoLoading.; 1641 if (IsFromRootCling()); 1642 return;; 1643 ; 1644 // Read the rules before enabling the auto loading to not inadvertently; 1645 // load the libraries for the classes concerned even-though the user is; 1646 // *not* using them.; 1647 // Note this call must happen before the first call to LoadLibraryMap.; 1648 assert(GetRootMapFiles() == nullptr && ""Must be called before LoadLibraryMap!"");; 1649 TClass::ReadRules(); // Read the default customization rules ...; 1650 ; 1651 LoadLibraryMap();; 1652 SetClassAutoLoading(true);; 1653}; 1654 ; 1655void TCling::ShutDown(); 1656{; 1657 fIsShuttingDown = true;; 1658 ResetGlobals();; 1659}; 1660 ; 1661////////////////////////////////////////////////////////////////////////////////; 1662/// Helper to initialize TVirtualStreamerInfo's factor early.; 1663/// Use static initialization to insure only one TStreamerInfo is created.; 1664static bool R__InitStreamerInfoFactory(); 1665{; 1666 // Use lambda since SetFactory return void.; 1667 auto setFactory = []() {; 1668 TVirtualStreamerInfo::SetFactory(new TStreamerInfo());; 1669 return kTRUE;; 1670 };; 1671 static bool doneFactory = setFactory();; 1672 return doneFactory; // avoid unused variable warning.; 1673}; 1674 ; 1675////////////////////////////////////////////////////////////////////////////////; 1676/// Register Rdict data for future loading by LoadPCM;; 1677 ; 1678void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:61759,assert,assert,61759,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"21 public:; 22 ; 23 class TSources : public TNamed {; 24 private:; 25 TString fDimensions;; 26 public:; 27 TSources(const char *name = nullptr, const char *title = nullptr, const char *dims = nullptr) : TNamed(name,title), fDimensions(dims) {}; 28 const char *GetDimensions() { return fDimensions; }; 29 ; 30 ClassDefOverride(TSources,2);; 31 };; 32 ; 33 typedef enum; 34 {; 35 kReadRule = 0,; 36 kReadRawRule = 1,; 37 kNone = 99999; 38 } RuleType_t;; 39 ; 40 typedef void (*ReadFuncPtr_t)( char*, TVirtualObject* );; 41 typedef void (*ReadRawFuncPtr_t)( char*, TBuffer&);; 42 ; 43 TSchemaRule();; 44 virtual ~TSchemaRule();; 45 ; 46 TSchemaRule( const TSchemaRule& rhs );; 47 TSchemaRule& operator = ( const TSchemaRule& rhs );; 48 Bool_t operator == ( const TSchemaRule& rhs ) const;; 49 ; 50 ; 51 void Clear(Option_t * /*option*/ ="""") override;; 52 Bool_t SetFromRule( const char *rule );; 53 ; 54 const char *GetVersion( ) const;; 55 Bool_t SetVersion( const TString& version );; 56 Bool_t TestVersion( Int_t version ) const;; 57 Bool_t SetChecksum( const TString& checksum );; 58 Bool_t TestChecksum( UInt_t checksum ) const;; 59 void SetSourceClass( const TString& classname );; 60 const char *GetSourceClass() const;; 61 void SetTargetClass( const TString& classname );; 62 const char *GetTargetClass() const;; 63 void SetTarget( const TString& target );; 64 const TObjArray* GetTarget() const;; 65 const char *GetTargetString() const;; 66 void SetSource( const TString& source );; 67 const TObjArray* GetSource() const;; 68 void SetEmbed( Bool_t embed );; 69 Bool_t GetEmbed() const;; 70 Bool_t IsAliasRule() const;; 71 Bool_t IsRenameRule() const;; 72 Bool_t IsValid() const;; 73 void SetCode( const TString& code );; 74 const char *GetCode() const;; 75 void SetAttributes( const TString& attributes );; 76 const char *GetAttributes() const;; 77 Bool_t HasTarget( const TString& target ) const;; 78 ; 79 Bool_t HasSource( const TString& source ) const;; 80 void SetReadFunctionPointer( ReadF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8h_source.html:1543,Test,TestVersion,1543,doc/master/TSchemaRule_8h_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8h_source.html,1,['Test'],['TestVersion']
Testability,"22 if (!fX || !fY || !fZ) return -1;; 1223 x = fX[i];; 1224 y = fY[i];; 1225 z = fZ[i];; 1226 return i;; 1227}; 1228 ; 1229////////////////////////////////////////////////////////////////////////////////; 1230/// Finds the z value at the position (x,y) thanks to; 1231/// the Delaunay interpolation.; 1232 ; 1233Double_t TGraph2D::Interpolate(Double_t x, Double_t y); 1234{; 1235 if (fNpoints <= 0) {; 1236 Error(""Interpolate"", ""Empty TGraph2D"");; 1237 return 0;; 1238 }; 1239 ; 1240 if (!fHistogram) GetHistogram(""empty"");; 1241 if (!fDelaunay) {; 1242 TList *hl = fHistogram->GetListOfFunctions();; 1243 if (!TestBit(kOldInterpolation) ) {; 1244 fDelaunay = hl->FindObject(""TGraphDelaunay2D"");; 1245 if (!fDelaunay) fDelaunay = hl->FindObject(""TGraphDelaunay"");; 1246 }; 1247 else {; 1248 // if using old implementation; 1249 fDelaunay = hl->FindObject(""TGraphDelaunay"");; 1250 if (!fDelaunay) fDelaunay = hl->FindObject(""TGraphDelaunay2D"");; 1251 }; 1252 }; 1253 ; 1254 if (!fDelaunay) return TMath::QuietNaN();; 1255 ; 1256 if (fDelaunay->IsA() == TGraphDelaunay2D::Class() ); 1257 return ((TGraphDelaunay2D*)fDelaunay)->ComputeZ(x, y);; 1258 else if (fDelaunay->IsA() == TGraphDelaunay::Class() ); 1259 return ((TGraphDelaunay*)fDelaunay)->ComputeZ(x, y);; 1260 ; 1261 // cannot be here; 1262 assert(false);; 1263 return TMath::QuietNaN();; 1264}; 1265 ; 1266 ; 1267////////////////////////////////////////////////////////////////////////////////; 1268/// Paints this 2D graph with its current attributes; 1269 ; 1270void TGraph2D::Paint(Option_t *option); 1271{; 1272 if (fNpoints <= 0) {; 1273 Error(""Paint"", ""Empty TGraph2D"");; 1274 return;; 1275 }; 1276 ; 1277 TString opt = option;; 1278 opt.ToLower();; 1279 if (opt.Contains(""p"") && !opt.Contains(""tri"")) {; 1280 if (!opt.Contains(""pol"") &&; 1281 !opt.Contains(""sph"") &&; 1282 !opt.Contains(""psr"")) opt.Append(""tri0"");; 1283 }; 1284 ; 1285 if (opt.Contains(""line"") && !opt.Contains(""tri"")) opt.Append(""tri0"");; 1286 ; 1287 if (opt.Contains(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:40030,Test,TestBit,40030,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,2,"['Test', 'assert']","['TestBit', 'assert']"
Testability,"222 tls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);; 19223#endif; 19224 tls.is_master = 1;; 19225 pthread_setspecific(sTlsKey, &tls);; 19226 ; 19227 if (ctx->callbacks.init_thread) {; 19228 /* Callback for the master thread (type 0) */; 19229 tls.user_ptr = ctx->callbacks.init_thread(ctx, 0);; 19230 } else {; 19231 tls.user_ptr = NULL;; 19232 }; 19233 ; 19234 /* Lua background script ""start"" event */; 19235#if defined(USE_LUA); 19236 if (ctx->lua_background_state) {; 19237 lua_State *lstate = (lua_State *)ctx->lua_background_state;; 19238 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19239 ; 19240 /* call ""start()"" in Lua */; 19241 lua_getglobal(lstate, ""start"");; 19242 if (lua_type(lstate, -1) == LUA_TFUNCTION) {; 19243 int ret = lua_pcall(lstate, /* args */ 0, /* results */ 0, 0);; 19244 if (ret != 0) {; 19245 struct mg_connection fc;; 19246 lua_cry(fake_connection(&fc, ctx),; 19247 ret,; 19248 lstate,; 19249 ""lua_background_script"",; 19250 ""start"");; 19251 }; 19252 } else {; 19253 lua_pop(lstate, 1);; 19254 }; 19255 ; 19256 /* determine if there is a ""log()"" function in Lua background script */; 19257 lua_getglobal(lstate, ""log"");; 19258 if (lua_type(lstate, -1) == LUA_TFUNCTION) {; 19259 ctx->lua_bg_log_available = 1;; 19260 }; 19261 lua_pop(lstate, 1);; 19262 ; 19263 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19264 }; 19265#endif; 19266 ; 19267 /* Server starts *now* */; 19268 ctx->start_time = time(NULL);; 19269 ; 19270 /* Server accept loop */; 19271 pfd = ctx->listening_socket_fds;; 19272 while (STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 19273 for (i = 0; i < ctx->num_listening_sockets; i++) {; 19274 pfd[i].fd = ctx->listening_sockets[i].sock;; 19275 pfd[i].events = POLLIN;; 19276 }; 19277 ; 19278 if (mg_poll(pfd,; 19279 ctx->num_listening_sockets,; 19280 SOCKET_TIMEOUT_QUANTUM,; 19281 &(ctx->stop_flag)); 19282 > 0) {; 19283 for (i = 0; i < ctx->num_listening_sockets; i++) {; 19284 /* NOTE(lsm): on QNX, poll() returns POLLRDNORM after the; 19285",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:574202,log,log,574202,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['log'],['log']
Testability,"223 tls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);; 19224#endif; 19225 tls.is_master = 1;; 19226 pthread_setspecific(sTlsKey, &tls);; 19227 ; 19228 if (ctx->callbacks.init_thread) {; 19229 /* Callback for the master thread (type 0) */; 19230 tls.user_ptr = ctx->callbacks.init_thread(ctx, 0);; 19231 } else {; 19232 tls.user_ptr = NULL;; 19233 }; 19234 ; 19235 /* Lua background script ""start"" event */; 19236#if defined(USE_LUA); 19237 if (ctx->lua_background_state) {; 19238 lua_State *lstate = (lua_State *)ctx->lua_background_state;; 19239 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19240 ; 19241 /* call ""start()"" in Lua */; 19242 lua_getglobal(lstate, ""start"");; 19243 if (lua_type(lstate, -1) == LUA_TFUNCTION) {; 19244 int ret = lua_pcall(lstate, /* args */ 0, /* results */ 0, 0);; 19245 if (ret != 0) {; 19246 struct mg_connection fc;; 19247 lua_cry(fake_connection(&fc, ctx),; 19248 ret,; 19249 lstate,; 19250 ""lua_background_script"",; 19251 ""start"");; 19252 }; 19253 } else {; 19254 lua_pop(lstate, 1);; 19255 }; 19256 ; 19257 /* determine if there is a ""log()"" function in Lua background script */; 19258 lua_getglobal(lstate, ""log"");; 19259 if (lua_type(lstate, -1) == LUA_TFUNCTION) {; 19260 ctx->lua_bg_log_available = 1;; 19261 }; 19262 lua_pop(lstate, 1);; 19263 ; 19264 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19265 }; 19266#endif; 19267 ; 19268 /* Server starts *now* */; 19269 ctx->start_time = time(NULL);; 19270 ; 19271 /* Server accept loop */; 19272 pfd = ctx->listening_socket_fds;; 19273 while (STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 19274 for (i = 0; i < ctx->num_listening_sockets; i++) {; 19275 pfd[i].fd = ctx->listening_sockets[i].sock;; 19276 pfd[i].events = POLLIN;; 19277 }; 19278 ; 19279 if (mg_poll(pfd,; 19280 ctx->num_listening_sockets,; 19281 SOCKET_TIMEOUT_QUANTUM,; 19282 &(ctx->stop_flag)); 19283 > 0) {; 19284 for (i = 0; i < ctx->num_listening_sockets; i++) {; 19285 /* NOTE(lsm): on QNX, poll() returns POLLRDNORM after the; 19286",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:574235,log,log,574235,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['log'],['log']
Testability,"22; TLatex::CheckLatexSyntaxInt_t CheckLatexSyntax(TString &text)Check if the Latex syntax is correct.Definition TLatex.cxx:2322; TLatex::Savefsvoid Savefs(TLatexFormSize *fs)Save fs values in array fTabSize.Definition TLatex.cxx:2703; TMathTextTo draw TeX Mathematical Formula.Definition TMathText.h:19; TMathText::GetYsizeDouble_t GetYsize()Get Y size.Definition TMathText.cxx:519; TMathText::GetBoundingBoxvoid GetBoundingBox(UInt_t &w, UInt_t &h, Bool_t angle=kFALSE) overrideGet the text width and height.Definition TMathText.cxx:477; TMathText::GetXsizeDouble_t GetXsize()Get X size.Definition TMathText.cxx:498; TMathText::PaintMathTextvirtual void PaintMathText(Double_t x, Double_t y, Double_t angle, Double_t size, const char *text)Paint text (used by Paint()).Definition TMathText.cxx:577; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ReplaceSpecialCppCharsTString & ReplaceSpecialCppChars()Find special characters which are typically used in printf() calls and replace them by appropriate es...Definition TString.cxx:1114; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:111888,Test,TestBit,111888,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['Test'],['TestBit']
Testability,"2344 }; 2345 }; 2346 subbranch->fOnfileObject = fOnfileObject;; 2347 lastbranch = subbranch;; 2348 }; 2349 }; 2350 if (toplevel) {; 2351 SetBit(kOwnOnfileObj);; 2352 if (lastbranch != this); 2353 lastbranch->ResetBit(kOwnOnfileObj);; 2354 } else {; 2355 lastbranch->SetBit(kOwnOnfileObj);; 2356 }; 2357 };; 2358 if (GetID() > -1) {; 2359 // We are *not* a top-level branch.; 2360 std::string s(GetName());; 2361 size_t pos = s.rfind('.');; 2362 if (pos != std::string::npos) {; 2363 s = s.substr(pos+1);; 2364 }; 2365 while ((pos = s.rfind('[')) != std::string::npos) {; 2366 s = s.substr(0, pos);; 2367 }; 2368 int offset = 0;; 2369 TStreamerElement* elt = fInfo->GetStreamerElement(s.c_str(), offset);; 2370 if (elt && offset!=TStreamerInfo::kMissing) {; 2371 size_t ndata = fInfo->GetNelement();; 2372 fNewIDs.clear();; 2373 for (size_t i = 0; i < ndata; ++i) {; 2374 if (fInfo->GetElement(i) == elt) {; 2375 if (elt->TestBit (TStreamerElement::kCache); 2376 && (i+1) < ndata; 2377 && s == fInfo->GetElement(i)->GetName()); 2378 {; 2379 // If the TStreamerElement we found is storing the information in the; 2380 // cache and is a repeater, we need to use the real one (the next one).; 2381 // (At least until the cache/repeat mechanism is properly handle by; 2382 // ReadLeaves).; 2383 // fID = i+1;; 2384 fID = i;; 2385 if (fType != 2) {; 2386 if (elt->TestBit(TStreamerElement::kRepeat)) {; 2387 fNewIDs.push_back(fID+1);; 2388 fNewIDs.back().fElement = fInfo->GetElement(i+1);; 2389 fNewIDs.back().fInfo = fInfo;; 2390 } else if (fInfo->GetElement(i+1)->TestBit(TStreamerElement::kWrite)) {; 2391 fNewIDs.push_back(fID+1);; 2392 fNewIDs.back().fElement = fInfo->GetElement(i+1);; 2393 fNewIDs.back().fInfo = fInfo;; 2394 }; 2395 }; 2396 } else {; 2397 fID = i;; 2398 }; 2399 if (elt->TestBit (TStreamerElement::kCache)) {; 2400 SetBit(TBranchElement::kCache);; 2401 }; 2402 break;; 2403 }; 2404 }; 2405 for (size_t i = fID+1+(fNewIDs.size()); i < ndata; ++i) {; 2406 TStreamerElement *nextel =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:84948,Test,TestBit,84948,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,24.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:84170,Test,Test,84170,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"24.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(UInt_t N) const. Double_t InterpolatePValues(Double_t dA2, Int_t bin) const. Double_t PValueAD2Samples(Double_t& A2, UInt_t N) const. Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id: GoFTest.h 36911 2010-11-24 17:08:43Z moneta $ » Last generated: 2010-11-25 07:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GoFTest.html:7033,test,test,7033,root/html528/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GoFTest.html,5,"['Log', 'test']","['LogNormalCDF', 'LogSample', 'test', 'testStat']"
Testability,"24.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(UInt_t N) const. Double_t InterpolatePValues(Double_t dA2, Int_t bin) const. Double_t PValueAD2Samples(Double_t& A2, UInt_t N) const. Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id: GoFTest.h 36911 2010-11-24 17:08:43Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GoFTest.html:7035,test,test,7035,root/html530/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GoFTest.html,5,"['Log', 'test']","['LogNormalCDF', 'LogSample', 'test', 'testStat']"
Testability,"24.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(UInt_t N) const. Double_t InterpolatePValues(Double_t dA2, Int_t bin) const. Double_t PValueAD2Samples(Double_t& A2, UInt_t N) const. Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id: GoFTest.h 36911 2010-11-24 17:08:43Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GoFTest.html:7035,test,test,7035,root/html532/ROOT__Math__GoFTest.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GoFTest.html,5,"['Log', 'test']","['LogNormalCDF', 'LogSample', 'test', 'testStat']"
Testability,254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.13,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:97047,Test,Test,97047,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"256; : Building event vectors for type 2 Background; : Dataset[dataset] : create input formulas for tree bkg_tree; : Using variable vars[0] from array expression vars of size 256; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 800; : Signal -- testing events : 200; : Signal -- training and testing events: 1000; : Background -- training events : 800; : Background -- testing events : 200; : Background -- training and testing events: 1000; : ; Factory : Booking method: ␛[1mTMVA_DNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussian",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:1899,Test,TestRepetitions,1899,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['TestRepetitions']
Testability,"256};; 257 ; 258inline void TBranchElement::SetParentClass(TClass* clparent); 259{; 260 fParentClass = clparent;; 261 fParentName = clparent ? clparent->GetName() : """";; 262}; 263 ; 264inline void TBranchElement::ValidateAddress() const; 265{; 266 // Check to see if the user changed the object pointer without telling us.; 267 ; 268 if (fID < 0) {; 269 // We are a top-level branch.; 270 if (!fTree->GetMakeClass() && fAddress && (*((char**) fAddress) != fObject)) {; 271 // The semantics of fAddress and fObject are violated.; 272 // Assume the user changed the pointer on us.; 273 // Note: The cast is here because we want to be able to; 274 // be called from the constant get functions.; 275 ; 276 // FIXME: Disable the check/warning TTree until we add a missing interface.; 277 if (TestBit(kDeleteObject)) {; 278 // This should never happen!; 279 Error(""ValidateAddress"", ""We owned an object whose address changed! our ptr: %p new ptr: %p"",; 280 (void*)fObject, (void*)*((char**) fAddress));; 281 const_cast<TBranchElement*>(this)->ResetBit(kDeleteObject);; 282 }; 283 const_cast<TBranchElement*>(this)->SetAddress(fAddress);; 284 }; 285 }; 286}; 287 ; 288#endif // ROOT_TBranchElement; b#define b(i)Definition RSha256.hxx:100; Int_tint Int_tDefinition RtypesCore.h:45; Version_tshort Version_tDefinition RtypesCore.h:65; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Option_tconst char Option_tDefinition RtypesCore.h:66; BIT#define BIT(n)Definition Rtypes.h:90; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TBranch.h; TClassRef.h; EDataTypeEDataTypeDefinition TDataType.h:28; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8h_source.html:14306,Test,TestBit,14306,doc/master/TBranchElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8h_source.html,1,['Test'],['TestBit']
Testability,"261; TPad::PaintDatevoid PaintDate()Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the curre...Definition TPad.cxx:3750; TPad::SetMaxPickDistancestatic void SetMaxPickDistance(Int_t maxPick=5)static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pi...Definition TPad.cxx:6680; TPad::SetBBoxX2void SetBBoxX2(const Int_t x) overrideSet right hand side of BoundingBox to a value (resize in x direction on right)Definition TPad.cxx:7339; TPad::SetBBoxX1void SetBBoxX1(const Int_t x) overrideSet lefthandside of BoundingBox to a value (resize in x direction on left)Definition TPad.cxx:7328; TPad::ClippingCodevirtual Int_t ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2)Compute the endpoint codes for TPad::Clip.Definition TPad.cxx:901; TPad::GetUyminDouble_t GetUymin() const overrideReturns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decad...Definition TPad.h:230; TPad::fX1Double_t fX1X of lower X coordinate.Definition TPad.h:36; TPad::GetListOfPrimitivesTList * GetListOfPrimitives() const overrideDefinition TPad.h:245; TPad::GetPadPointerTObject * GetPadPointer() const overrideDefinition TPad.h:250; TPad::DrawFrameTH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char *title="""") overrideDraw an empty pad frame with X and Y axis.Definition TPad.cxx:1678; TPad::fVtoPixelDouble_t fVtoPixelypixel = fVtoPixelk + fVtoPixel*vndcDefinition TPad.h:53; TPad::GetCanvasImpTCanvasImp * GetCanvasImp() const overrideGet canvas implementation pointer if any.Definition TPad.cxx:2746; TPad::GetEventInt_t GetEvent() const overrideGet Event.Definition TPad.cxx:2754; TPad::GetView3DTObject * GetView3D() const overrideDefinition TPad.h:255; TPad::PadtoXDouble_t PadtoX(Double_t x) const overrideConvert x from pad to X.Definition TPad.cxx:3542; TPad::PixeltoXYvirtual void PixeltoXY(Int_t x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:39821,log,log,39821,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['log'],['log']
Testability,"261; TPad::PaintDatevoid PaintDate()Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the curre...Definition TPad.cxx:3750; TPad::SetMaxPickDistancestatic void SetMaxPickDistance(Int_t maxPick=5)static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pi...Definition TPad.cxx:6680; TPad::SetBBoxX2void SetBBoxX2(const Int_t x) overrideSet right hand side of BoundingBox to a value (resize in x direction on right)Definition TPad.cxx:7339; TPad::SetBBoxX1void SetBBoxX1(const Int_t x) overrideSet lefthandside of BoundingBox to a value (resize in x direction on left)Definition TPad.cxx:7328; TPad::ClippingCodevirtual Int_t ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2)Compute the endpoint codes for TPad::Clip.Definition TPad.cxx:901; TPad::GetUyminDouble_t GetUymin() const overrideReturns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decad...Definition TPad.h:230; TPad::fX1Double_t fX1X of lower X coordinate.Definition TPad.h:36; TPad::GetListOfPrimitivesTList * GetListOfPrimitives() const overrideDefinition TPad.h:245; TPad::SetFillStylevoid SetFillStyle(Style_t fstyle) overrideOverride TAttFill::FillStyle for TPad because we want to handle style=0 as style 4000.Definition TPad.cxx:6074; TPad::DrawFrameTH1F * DrawFrame(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char *title="""") overrideDraw an empty pad frame with X and Y axis.Definition TPad.cxx:1678; TPad::fVtoPixelDouble_t fVtoPixelypixel = fVtoPixelk + fVtoPixel*vndcDefinition TPad.h:53; TPad::GetCanvasImpTCanvasImp * GetCanvasImp() const overrideGet canvas implementation pointer if any.Definition TPad.cxx:2746; TPad::GetEventInt_t GetEvent() const overrideGet Event.Definition TPad.cxx:2754; TPad::PadtoXDouble_t PadtoX(Double_t x) const overrideConvert x from pad to X.Definition TPad.cxx:3542; TPad::PixeltoXYvirtual void P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:296968,log,log,296968,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['log'],['log']
Testability,"2646 +/- 3.57577 ; p2 = 5.17213 +/- 2.03607 ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 1.21412; NDf = 6; Edm = 1.16053e-08; NCalls = 141; p0 = 0.632519 +/- 0.106789 (limited); p1 = 17.4834 +/- 1.66297 ; p2 = 1.44082 +/- 1.10945 ; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 16.0874; Chi2 = 32.1748; NDf = 25; Edm = 1.23857e-08; NCalls = 73; p0 = 0.683032 +/- 0.0852759 (limited); p1 = 20.5028 +/- 2.71991 ; p2 = 2.79578 +/- 1.30889 ; ; #include <TBinomialEfficiencyFitter.h>; #include <TVirtualFitter.h>; #include <TH1.h>; #include <TRandom3.h>; #include <TF1.h>; #include <TFitResult.h>; #include <TStyle.h>; #include <TCanvas.h>; #include <TLegend.h>; #include <TPaveStats.h>; #include <TGraphErrors.h>; #include <TObjArray.h>; #include <HFitInterface.h>; #include <Fit/BinData.h>; #include <Math/IntegratorOptions.h>; ; #include <cassert>; #include <iostream>; ; void TestBinomial(int nloop = 100, int nevts = 100, bool plot = false, bool debug = false, int seed = 111); {; gStyle->SetMarkerStyle(20);; gStyle->SetLineWidth(2.0);; gStyle->SetOptStat(11);; ; TObjArray hbiasNorm;; hbiasNorm.Add(new TH1D(""h0Norm"", ""Bias Histogram fit"",100,-5,5));; hbiasNorm.Add(new TH1D(""h1Norm"",""Bias Binomial fit"",100,-5,5));; TObjArray hbiasThreshold;; hbiasThreshold.Add(new TH1D(""h0Threshold"", ""Bias Histogram fit"",100,-5,5));; hbiasThreshold.Add(new TH1D(""h1Threshold"",""Bias Binomial fit"",100,-5,5));; TObjArray hbiasWidth;; hbiasWidth.Add(new TH1D(""h0Width"", ""Bias Histogram fit"",100,-5,5));; hbiasWidth.Add(new TH1D(""h1Width"",""Bias Binomial fit"",100,-5,5));; TH1D* hChisquared = new TH1D(""hChisquared"",; ""#chi^{2} probability (Baker-Cousins)"", 200, 0.0, 1.0);; ; TVirtualFitter::SetDefaultFitter(""Minuit2"");; ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(""Gauss"");; ; // Note: in order to be able to use TH1::FillRandom() to generate; // pseudo-experiments, we use a trick: generate ""selected""; // and ""non-selected"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TestBinomial_8C.html:47580,Test,TestBinomial,47580,doc/master/TestBinomial_8C.html,https://root.cern,https://root.cern/doc/master/TestBinomial_8C.html,1,['Test'],['TestBinomial']
Testability,"268 private:; 269 friend class MethodCategory;; 270 friend class MethodCompositeBase;; 271 void WriteStateToXML ( void* parent ) const;; 272 void ReadStateFromXML ( void* parent );; 273 void WriteStateToStream ( std::ostream& tf ) const; // needed for MakeClass; 274 void WriteVarsToStream ( std::ostream& tf, const TString& prefix = """" ) const; // needed for MakeClass; 275 ; 276 ; 277 public: // these two need to be public, they are used to read in-memory weight-files; 278 void ReadStateFromStream ( std::istream& tf ); // backward compatibility; 279 void ReadStateFromStream ( TFile& rf ); // backward compatibility; 280 void ReadStateFromXMLString( const char* xmlstr ); // for reading from memory; 281 ; 282 private:; 283 // the variable information; 284 void AddVarsXMLTo ( void* parent ) const;; 285 void AddSpectatorsXMLTo ( void* parent ) const;; 286 void AddTargetsXMLTo ( void* parent ) const;; 287 void AddClassesXMLTo ( void* parent ) const;; 288 void ReadVariablesFromXML ( void* varnode );; 289 void ReadSpectatorsFromXML( void* specnode);; 290 void ReadTargetsFromXML ( void* tarnode );; 291 void ReadClassesFromXML ( void* clsnode );; 292 void ReadVarsFromStream ( std::istream& istr ); // backward compatibility; 293 ; 294 public:; 295 // ---------------------------------------------------------------------------; 296 ; 297 // write evaluation histograms into target file; 298 virtual void WriteEvaluationHistosToFile(Types::ETreeType treetype);; 299 ; 300 // write classifier-specific monitoring information to target file; 301 virtual void WriteMonitoringHistosToFile() const;; 302 ; 303 // ---------- public evaluation methods --------------------------------------; 304 ; 305 // individual initialization for testing of each method; 306 // overload this one for individual initialisation of the testing,; 307 // it is then called automatically within the global ""TestInit""; 308 ; 309 // variables (and private member functions) for the Evaluation:; 310 // get the efficiency.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:11825,test,testing,11825,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,3,"['Test', 'test']","['TestInit', 'testing']"
Testability,28 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:81002,Test,Test,81002,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"29 ""Nov"",""Dec"" };; 1330 Int_t idatqq = gROOT->GetVersionDate();; 1331 Int_t iday = idatqq%100;; 1332 Int_t imonth = (idatqq/100)%100;; 1333 Int_t iyear = (idatqq/10000);; 1334 TString versionDate = TString::Format(""%s %d, %4d"",months[imonth-1],iday,iyear);; 1335 ; 1336 logger << kHEADER ;; 1337 logger << ""You are running ROOT Version: "" << gROOT->GetVersion() << "", "" << versionDate << Endl;; 1338}; 1339 ; 1340////////////////////////////////////////////////////////////////////////////////; 1341/// various kinds of welcome messages; 1342/// ASCII text generated by this site: http://www.network-science.de/ascii/; 1343 ; 1344void TMVA::Tools::TMVAWelcomeMessage( MsgLogger& logger, EWelcomeMessage msgType ); 1345{; 1346 switch (msgType) {; 1347 ; 1348 case kStandardWelcomeMsg:; 1349 logger << Color(""white"") << ""TMVA -- Toolkit for Multivariate Analysis"" << Color(""reset"") << Endl;; 1350 logger << ""Copyright (C) 2005-2006 CERN, LAPP & MPI-K Heidelberg and Victoria U."" << Endl;; 1351 logger << ""Home page https://root.cern/manual/tmva/"" << Endl;; 1352 break;; 1353 ; 1354 case kIsometricWelcomeMsg:; 1355 logger << "" ___ ___ ___ ___ "" << Endl;; 1356 logger << "" /\\ \\ /\\__\\ /\\__\\ /\\ \\ "" << Endl;; 1357 logger << "" \\:\\ \\ /::| | /:/ / /::\\ \\ "" << Endl;; 1358 logger << "" \\:\\ \\ /:|:| | /:/ / /:/\\:\\ \\ "" << Endl;; 1359 logger << "" /::\\ \\ /:/|:|__|__ /:/__/ ___ /::\\~\\:\\ \\ "" << Endl;; 1360 logger << "" /:/\\:\\__\\ /:/ |::::\\__\\ |:| | /\\__\\ /:/\\:\\ \\:\\__\\ "" << Endl;; 1361 logger << "" /:/ \\/__/ \\/__/~~/:/ / |:| |/:/ / \\/__\\:\\/:/ / "" << Endl;; 1362 logger << ""/:/ / /:/ / |:|__/:/ / \\::/ / "" << Endl;; 1363 logger << ""\\/__/ /:/ / \\::::/__/ /:/ / "" << Endl;; 1364 logger << "" /:/ / ~~~~ /:/ / "" << Endl;; 1365 logger << "" \\/__/ \\/__/ "" << Endl << Endl;; 1366 break;; 1367 ; 1368 case kBlockWelcomeMsg:; 1369 logger << Endl;; 1370 logger << ""_|_|_|_|_| _| _| _| _| _|_| "" << Endl;; 1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _|",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:47436,log,logger,47436,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"29 ; 230 const Bool_t showCollectedOutput = kFALSE;; 231 if (showCollectedOutput) {; 232 Int_t maxL = dsi.GetClassNameMaxLength();; 233 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Collected:"" << Endl;; 234 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 235 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 236 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 237 << "" training entries: "" << ds->GetNClassEvents( 0, cl ) << Endl;; 238 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 239 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 240 << "" testing entries: "" << ds->GetNClassEvents( 1, cl ) << Endl;; 241 }; 242 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" "" << Endl;; 243 }; 244 ; 245 return ds;; 246}; 247 ; 248////////////////////////////////////////////////////////////////////////////////; 249/// checks a TTreeFormula for problems; 250 ; 251Bool_t TMVA::DataSetFactory::CheckTTreeFormula( TTreeFormula* ttf,; 252 const TString& expression,; 253 Bool_t& hasDollar ); 254{; 255 Bool_t worked = kTRUE;; 256 ; 257 if( ttf->GetNdim() <= 0 ); 258 Log() << kFATAL << ""Expression "" << expression.Data(); 259 << "" could not be resolved to a valid formula. "" << Endl;; 260 if( ttf->GetNdata() == 0 ){; 261 Log() << kWARNING << ""Expression: "" << expression.Data(); 262 << "" does not provide data for this event. ""; 263 << ""This event is not taken into account. --> please check if you use as a variable ""; 264 << ""an entry of an array which is not filled for some events ""; 265 << ""(e.g. arr[4] when arr has only 3 elements)."" << Endl;; 266 Log() << kWARNING << ""If you want to take the event into account you can do something like: ""; 267 << ""\""Alt$(arr[4],0)\"" where in cases where arr doesn't have a 4th element, ""; 268 << "" 0 is taken as an alternative."" << Endl;; 269 worked = kFALSE;; 270 }; 271 if( expression.Contains(""$"") ); 272 hasDollar = kTRUE;; 273 else; 274 {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:9931,Log,Log,9931,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,29 sec ; : Creating xml weight file: dataset/weights/_BDT.weights.xml; : Creating standalone class: dataset/weights/_BDT.class.C; : out.root:/dataset/Method_BDT/BDT; <HEADER> Factory : Training finished; : ; : Ranking input variables (method specific)...; <HEADER> BDT : Ranking result (top variable is best ranked); : -----------------------------------; : Rank : Variable : Variable Importance; : -----------------------------------; : 1 : y : 5.011e-01; : 2 : x : 4.989e-01; : -----------------------------------; <HEADER> Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: dataset/weights/_BDT.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDT for Classification performance; : ; <HEADER> BDT : [dataset] : Evaluation of BDT on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 0.0581 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDT; : ; <HEADER> BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : x: 1.0136 0.57754 [ 0.0011208 1.9999 ]; : y: 1.4938 0.75135 [ 0.0054384 2.9981 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset BDT : 0.870; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMinimalClassification_8C.html:5124,test,test,5124,doc/master/TMVAMinimalClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMinimalClassification_8C.html,1,['test'],['test']
Testability,"29; TMVA::MethodDL::GetRegressionValuesvirtual const std::vector< Float_t > & GetRegressionValues(); TMVA::MethodDL::fTrainingStrategyStringTString fTrainingStrategyStringThe string defining the training strategy.Definition MethodDL.h:196; TMVA::MethodDL::CreateRankingconst Ranking * CreateRanking()Definition MethodDL.cxx:2335; TMVA::MethodDL::HostBufferImpl_ttypename ArchitectureImpl_t::HostBuffer_t HostBufferImpl_tDefinition MethodDL.h:110; TMVA::MethodDL::SetBatchDepthvoid SetBatchDepth(size_t batchDepth)Definition MethodDL.h:292; TMVA::MethodDL::ParseKeyValueStringKeyValueVector_t ParseKeyValueString(TString parseString, TString blockDelim, TString tokenDelim)Function for parsing the training settings, provided as a string in a key-value form.Definition MethodDL.cxx:1052; TMVA::MethodDL::SetBatchWidthvoid SetBatchWidth(size_t batchWidth)Definition MethodDL.h:294; TMVA::MethodDL::PredictDeepNetstd::vector< Double_t > PredictDeepNet(Long64_t firstEvt, Long64_t lastEvt, size_t batchSize, Bool_t logProgress)perform prediction of the deep neural network using batches (called by GetMvaValues)Definition MethodDL.cxx:1828; TMVA::MethodDL::GetWeightInitializationDNN::EInitialization GetWeightInitialization() constDefinition MethodDL.h:268; TMVA::MethodDL::SetBatchSizevoid SetBatchSize(size_t batchSize)Definition MethodDL.h:291; TMVA::MethodDL::GetLayoutStringTString GetLayoutString() constDefinition MethodDL.h:274; TMVA::MethodDL::fBatchDepthsize_t fBatchDepthThe depth of the batch used to train the deep net.Definition MethodDL.h:182; TMVA::MethodDL::DeepNetImpl_tTMVA::DNN::TDeepNet< ArchitectureImpl_t > DeepNetImpl_tDefinition MethodDL.h:106; TMVA::MethodDL::GetBatchWidthsize_t GetBatchWidth() constDefinition MethodDL.h:264; TMVA::MethodDL::AddWeightsXMLTovoid AddWeightsXMLTo(void *parent) constDefinition MethodDL.cxx:2051; TMVA::MethodDL::MatrixImpl_ttypename ArchitectureImpl_t::Matrix_t MatrixImpl_tDefinition MethodDL.h:107; TMVA::MethodDL::~MethodDLvirtual ~MethodDL(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:111195,log,logProgress,111195,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['log'],['logProgress']
Testability,"2D&); TProofDrawProfile2D&operator=(TProofDrawProfile2D&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tTProofDraw::Process(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawProfile2D(); TProofDrawProfile2D(TProofDrawProfile2D&&); TProofDrawProfile2D(const TProofDrawProfile2D&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawProfile2D.html:5400,Test,TestBit,5400,root/html602/TProofDrawProfile2D.html,https://root.cern,https://root.cern/root/html602/TProofDrawProfile2D.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"2] = sumwx; 904/// - stats[3] = sumwx2; 905/// - stats[4] = sumwy; 906/// - stats[5] = sumwy2; 907/// - stats[6] = sumwxy; 908/// - stats[7] = sumwz; 909/// - stats[8] = sumwz2; 910///; 911/// If no axis-subrange is specified (via TAxis::SetRange), the array stats; 912/// is simply a copy of the statistics quantities computed at filling time.; 913/// If a sub-range is specified, the function recomputes these quantities; 914/// from the bin contents in the current axis range.; 915 ; 916void TProfile2D::GetStats(Double_t *stats) const; 917{; 918 if (fBuffer) ((TProfile2D*)this)->BufferEmpty();; 919 ; 920 // check for labels axis . In that case corresponding statistics do not make sense and it is set to zero; 921 Bool_t labelXaxis = ((const_cast<TAxis&>(fXaxis)).GetLabels() && fXaxis.CanExtend() );; 922 Bool_t labelYaxis = ((const_cast<TAxis&>(fYaxis)).GetLabels() && fYaxis.CanExtend() );; 923 ; 924 // Loop on bins; 925 if ( (fTsumw == 0 /* && fEntries > 0 */) || fXaxis.TestBit(TAxis::kAxisRange) || fYaxis.TestBit(TAxis::kAxisRange)) {; 926 Int_t bin, binx, biny;; 927 Double_t w, w2;; 928 Double_t x,y;; 929 for (bin=0;bin<9;bin++) stats[bin] = 0;; 930 if (!fBinEntries.fArray) return;; 931 Int_t firstBinX = fXaxis.GetFirst();; 932 Int_t lastBinX = fXaxis.GetLast();; 933 Int_t firstBinY = fYaxis.GetFirst();; 934 Int_t lastBinY = fYaxis.GetLast();; 935 // include underflow/overflow if TH1::StatOverflows(kTRUE) in case no range is set on the axis; 936 if (GetStatOverflowsBehaviour()) {; 937 if ( !fXaxis.TestBit(TAxis::kAxisRange) ) {; 938 if (firstBinX == 1) firstBinX = 0;; 939 if (lastBinX == fXaxis.GetNbins() ) lastBinX += 1;; 940 }; 941 if ( !fYaxis.TestBit(TAxis::kAxisRange) ) {; 942 if (firstBinY == 1) firstBinY = 0;; 943 if (lastBinY == fYaxis.GetNbins() ) lastBinY += 1;; 944 }; 945 }; 946 for (biny = firstBinY; biny <= lastBinY; biny++) {; 947 y = (!labelYaxis) ? fYaxis.GetBinCenter(biny) : 0;; 948 for (binx = firstBinX; binx <= lastBinX; binx++) {; 949 bin = GetBin(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:32764,Test,TestBit,32764,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['Test'],['TestBit']
Testability,"2sigma from average.); : --------------------------------------------------------------------------------------------------; : --------------------------------------------------------------------------------------------------; : datasetcvreg BDTG : 0.0449 0.0259 2.28 1.70 | 3.108 3.190; : --------------------------------------------------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on training sample:; : (overtraining check); : --------------------------------------------------------------------------------------------------; : DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf MutInf_T; : --------------------------------------------------------------------------------------------------; : datasetcvreg BDTG : 0.0449 0.0259 2.28 1.70 | 3.108 3.190; : --------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetcvreg : Created tree 'TestTree' with 9999 events; : ; <HEADER> Dataset:datasetcvreg : Created tree 'TrainTree' with 9999 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; : Evaluation done.; ==> Wrote root file: TMVARegCv.root; ==> TMVACrossValidationRegression is done!; (int) 0; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TChain.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TObjString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/Tools.h""; #include ""TMVA/TMVAGui.h""; #include ""TMVA/CrossValidation.h""; ; TFile * getDataFile(TString fname) {; TFile *input(0);; ; if (!gSystem->AccessPathName(fname)) {; input = TFile::Open(fname); // check if file in local directory exists; } else {; // if not: download from ROOT server; TFile::SetCacheFileDir(""."");; input = TFile::Open(""http://root.cern/files/tmva_reg_examp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:14550,Test,TestTree,14550,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,1,['Test'],['TestTree']
Testability,"3 (Double_t mu, Double_t b, Double_t e, Int_t x, Double_t bm, Double_t em, Double_t u, Double_t v);  Profile Likelihood function for MODEL 3: Gauss background/Gauss Efficiency. ;  ; Double_t LikeMod4 (Double_t mu, Double_t b, Int_t x, Int_t y, Double_t tau);  Profile Likelihood function for MODEL 4: Poiss background/Efficiency known. ;  ; Double_t LikeMod5 (Double_t mu, Double_t b, Int_t x, Double_t bm, Double_t u);  Profile Likelihood function for MODEL 5: Gauss background/Efficiency known. ;  ; Double_t LikeMod6 (Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m);  Profile Likelihood function for MODEL 6: background known/ Efficiency binomial. ;  ; Double_t LikeMod7 (Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v);  Profile Likelihood function for MODEL 6: background known/ Efficiency gaussian. ;  ; Double_t LogFactorial (Int_t n);  LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n! ;  ; void ProfLikeMod1 (Double_t mu, Double_t &b, Double_t &e, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m);  Helper for calculation of estimates of efficiency and background for model 1. ;  ; void SetModelParameters ();  ; void SetModelParameters (Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m);  . Static Private Member Functions; static Double_t EvalMonomial (Double_t x, const Int_t coef[], Int_t N);  Evaluate mononomial. ;  ; static Double_t EvalPolynomial (Double_t x, const Int_t coef[], Int_t N);  Evaluate polynomial. ;  . Private Attributes; Double_t f_b;  ; Double_t f_bm;  ; Double_t f_e;  ; Double_t f_em;  ; Int_t f_m;  ; Int_t f_mid;  ; Double_t f_sdb;  ; Double_t f_sde;  ; Double_t f_tau;  ; Int_t f_x;  ; Int_t f_y;  ; Int_t f_z;  ; bool fBounding;  ; Double_t fCL;  ; Double_t fLowerLimit;  ; Int_t fNumWarningsDeprecated1;  ; Int_t fNumWarningsDeprecated2;  ; Double_t fUpperLimit;  . Additional Inherited Members;  P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:20489,Log,LogFactorial,20489,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,3,"['Log', 'log']","['LogFactorial', 'logGamma']"
Testability,"3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMoment.html:51908,test,testArg,51908,doc/master/classRooAbsMoment.html,https://root.cern,https://root.cern/doc/master/classRooAbsMoment.html,4,['test'],['testArg']
Testability,"3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:50370,test,testArg,50370,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,16,['test'],['testArg']
Testability,"3 // we can later inform it of changes to branch addresses.; 3184 thistree->AddClone(newtree);; 3185 if (thistree != this) {; 3186 // In case this object is a TChain, add the clone; 3187 // also to the TChain's list of clones.; 3188 AddClone(newtree);; 3189 }; 3190 ; 3191 newtree->Reset();; 3192 ; 3193 TDirectory* ndir = newtree->GetDirectory();; 3194 TFile* nfile = nullptr;; 3195 if (ndir) {; 3196 nfile = ndir->GetFile();; 3197 }; 3198 Int_t newcomp = -1;; 3199 if (nfile) {; 3200 newcomp = nfile->GetCompressionSettings();; 3201 }; 3202 ; 3203 //; 3204 // Delete non-active branches from the clone.; 3205 //; 3206 // Note: If we are a chain, this does nothing; 3207 // since chains have no leaves.; 3208 TObjArray* leaves = newtree->GetListOfLeaves();; 3209 Int_t nleaves = leaves->GetEntriesFast();; 3210 for (Int_t lndx = 0; lndx < nleaves; ++lndx) {; 3211 TLeaf* leaf = (TLeaf*) leaves->UncheckedAt(lndx);; 3212 if (!leaf) {; 3213 continue;; 3214 }; 3215 TBranch* branch = leaf->GetBranch();; 3216 if (branch && (newcomp > -1)) {; 3217 branch->SetCompressionSettings(newcomp);; 3218 }; 3219 if (branch) branch->SetIOFeatures(features);; 3220 if (!branch || !branch->TestBit(kDoNotProcess)) {; 3221 continue;; 3222 }; 3223 // size might change at each iteration of the loop over the leaves.; 3224 nb = branches->GetEntriesFast();; 3225 for (Long64_t i = 0; i < nb; ++i) {; 3226 TBranch* br = (TBranch*) branches->UncheckedAt(i);; 3227 if (br == branch) {; 3228 branches->RemoveAt(i);; 3229 delete br;; 3230 br = nullptr;; 3231 branches->Compress();; 3232 break;; 3233 }; 3234 TObjArray* lb = br->GetListOfBranches();; 3235 Int_t nb1 = lb->GetEntriesFast();; 3236 for (Int_t j = 0; j < nb1; ++j) {; 3237 TBranch* b1 = (TBranch*) lb->UncheckedAt(j);; 3238 if (!b1) {; 3239 continue;; 3240 }; 3241 if (b1 == branch) {; 3242 lb->RemoveAt(j);; 3243 delete b1;; 3244 b1 = nullptr;; 3245 lb->Compress();; 3246 break;; 3247 }; 3248 TObjArray* lb1 = b1->GetListOfBranches();; 3249 Int_t nb2 = lb1->GetE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:128496,Test,TestBit,128496,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Test'],['TestBit']
Testability,"3 ; 374 /**; 375 retrieve at the same time a pointer to the coordinate data and the fit value; 376 More efficient than calling Coords(i) and Value(i); 377 */; 378 // not threadsafe, to be replaced with never constructs!; 379 // for example: just return std::array or std::vector, there's; 380 // is going to be only minor overhead in c++11.; 381 const double * GetPoint( unsigned int ipoint, double & value ) const; 382 {; 383 assert( ipoint < fMaxPoints );; 384 value = Value( ipoint );; 385 ; 386 return Coords( ipoint );; 387 }; 388 ; 389 /**; 390 returns a single coordinate error component of a point.; 391 This function is threadsafe in contrast to Coords(...); 392 and can easily get vectorized by the compiler in loops; 393 running over the ipoint-index.; 394 */; 395 double GetCoordErrorComponent( unsigned int ipoint, unsigned int icoord ) const; 396 {; 397 assert( ipoint < fMaxPoints );; 398 assert( icoord < fDim );; 399 assert( fCoordErrorsPtr.size() == fDim );; 400 assert( fCoordErrorsPtr[icoord] );; 401 assert( fCoordErrors.empty() || &fCoordErrors[icoord].front() == fCoordErrorsPtr[icoord] );; 402 ; 403 return fCoordErrorsPtr[icoord][ipoint];; 404 }; 405 ; 406 /**; 407 Return a pointer to the errors in the coordinates for the given fit point; 408 */; 409 // not threadsafe, to be replaced with never constructs!; 410 // for example: just return std::array or std::vector, there's; 411 // is going to be only minor overhead in c++11.; 412 const double* CoordErrors( unsigned int ipoint ) const; 413 {; 414 assert( ipoint < fMaxPoints );; 415 assert( fpTmpCoordErrorVector );; 416 assert( fErrorType == kCoordError || fErrorType == kAsymError );; 417 ; 418 for ( unsigned int i=0; i < fDim; i++ ); 419 {; 420 assert( fCoordErrorsPtr[i] );; 421 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 422 ; 423 fpTmpCoordErrorVector[i] = fCoordErrorsPtr[i][ipoint];; 424 }; 425 ; 426 return fpTmpCoordErrorVector;; 427 }; 428 ; 429 ; 430 /**; 431 retrie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:14044,assert,assert,14044,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,2,['assert'],['assert']
Testability,"3 ; 724////////////////////////////////////////////////////////////////////////////////; 725/// Returns `x` raised to the power `y`.; 726 ; 727inline LongDouble_t TMath::Power(LongDouble_t x, Long64_t y); 728 { return std::pow(x,(LongDouble_t)y); }; 729 ; 730////////////////////////////////////////////////////////////////////////////////; 731/// Returns `x` raised to the power `y`.; 732 ; 733inline LongDouble_t TMath::Power(Long64_t x, Long64_t y); 734 { return std::pow(x,y); }; 735 ; 736////////////////////////////////////////////////////////////////////////////////; 737/// Returns `x` raised to the power `y`.; 738 ; 739inline Double_t TMath::Power(Double_t x, Double_t y); 740 { return pow(x, y); }; 741 ; 742////////////////////////////////////////////////////////////////////////////////; 743/// Returns `x` raised to the power `y`.; 744 ; 745inline Double_t TMath::Power(Double_t x, Int_t y) {; 746#ifdef R__ANSISTREAM; 747 return std::pow(x, y);; 748#else; 749 return pow(x, (Double_t) y);; 750#endif; 751}; 752 ; 753////////////////////////////////////////////////////////////////////////////////; 754/// Returns the natural logarithm of `x`.; 755 ; 756inline Double_t TMath::Log(Double_t x); 757 { return log(x); }; 758 ; 759////////////////////////////////////////////////////////////////////////////////; 760/// Returns the common (base-10) logarithm of `x`.; 761 ; 762inline Double_t TMath::Log10(Double_t x); 763 { return log10(x); }; 764 ; 765////////////////////////////////////////////////////////////////////////////////; 766/// Check if it is finite with a mask in order to be consistent in presence of; 767/// fast math.; 768/// Inspired from the CMSSW FWCore/Utilities package; 769 ; 770inline Int_t TMath::Finite(Double_t x); 771#if defined(R__FAST_MATH); 772 ; 773{; 774 const unsigned long long mask = 0x7FF0000000000000LL;; 775 union { unsigned long long l; double d;} v;; 776 v.d =x;; 777 return (v.l&mask)!=mask;; 778}; 779#else; 780# if defined(R__HPUX11); 781 { retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:28294,log,logarithm,28294,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,1,['log'],['logarithm']
Testability,"3 code += ""#include <vector>\n""; 224 ""#include <utility>"";; 225 }; 226 ProcessLine(code, kTRUE);; 227 }; 228 }; 229 ; 230 // Load user functions; 231 const char *logon;; 232 logon = gEnv->GetValue(""Rint.Load"", (char*)nullptr);; 233 if (logon) {; 234 char *mac = gSystem->Which(TROOT::GetMacroPath(), logon, kReadPermission);; 235 if (mac); 236 ProcessLine(Form("".L %s"",logon), kTRUE);; 237 delete [] mac;; 238 }; 239 ; 240 // Execute logon macro; 241 ExecLogon();; 242 ; 243 // Save current interpreter context; 244 gCling->SaveContext();; 245 gCling->SaveGlobalsContext();; 246 ; 247 // Install interrupt and terminal input handlers; 248 TInterruptHandler *ih = new TInterruptHandler();; 249 ih->Add();; 250 SetSignalHandler(ih);; 251 ; 252 // Handle stdin events; 253 fInputHandler = new TTermInputHandler(0);; 254 fInputHandler->Add();; 255 ; 256 // Goto into raw terminal input mode; 257 char defhist[kMAXPATHLEN];; 258 snprintf(defhist, sizeof(defhist), ""%s/.root_hist"", gSystem->HomeDirectory());; 259 logon = gEnv->GetValue(""Rint.History"", defhist);; 260 // In the code we had HistorySize and HistorySave, in the rootrc and doc; 261 // we have HistSize and HistSave. Keep the doc as it is and check; 262 // now also for HistSize and HistSave in case the user did not use; 263 // the History versions; 264 int hist_size = gEnv->GetValue(""Rint.HistorySize"", 500);; 265 if (hist_size == 500); 266 hist_size = gEnv->GetValue(""Rint.HistSize"", 500);; 267 int hist_save = gEnv->GetValue(""Rint.HistorySave"", 400);; 268 if (hist_save == 400); 269 hist_save = gEnv->GetValue(""Rint.HistSave"", 400);; 270 const char *envHist = gSystem->Getenv(""ROOT_HIST"");; 271 if (envHist) {; 272 hist_size = atoi(envHist);; 273 envHist = strchr(envHist, ':');; 274 if (envHist); 275 hist_save = atoi(envHist+1);; 276 }; 277 Gl_histsize(hist_size, hist_save);; 278 Gl_histinit((char *)logon);; 279 ; 280 // black on white or white on black?; 281 static const char* defaultColorsBW[] = {; 282 ""bold blue"", ""magenta"", ""bold",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:8556,log,logon,8556,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['log'],['logon']
Testability,"3 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4284 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4285 return createChi2(data,l) ;; 4286}; 4287 ; 4288 ; 4289////////////////////////////////////////////////////////////////////////////////; 4290/// See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&); 4291 ; 4292RooFit::OwningPtr<RooAbsReal> RooAbsReal::createChi2(RooDataSet &data, const RooLinkedList &cmdList); 4293{; 4294 return RooFit::makeOwningPtr(RooFit::FitHelpers::createChi2(*this, data, cmdList));; 4295}; 4296 ; 4297 ; 4298 ; 4299////////////////////////////////////////////////////////////////////////////////; 4300/// Return current evaluation error logging mode.; 4301 ; 4302RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode(); 4303{; 4304 return evalErrorData().mode ;; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Set evaluation error logging mode. Options are; 4309///; 4310/// PrintErrors - Print each error through RooMsgService() as it occurs; 4311/// CollectErrors - Accumulate errors, but do not print them. A subsequent call; 4312/// to printEvalErrors() will print a summary; 4313/// CountErrors - Accumulate error count, but do not print them.; 4314///; 4315 ; 4316void RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); 4317{; 4318 evalErrorData().mode = m;; 4319}; 4320 ; 4321 ; 4322////////////////////////////////////////////////////////////////////////////////; 4323 ; 4324void RooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); 4325{; 4326 std::string plist ;; 4327 for (auto const* arg : paramVars) {; 4328 if (!dependsOnValue(*arg)) {; 4329 coutW(InputArguments) << ""RooAbsReal::setParameterizeIntegral("" << GetName(); 4330 << "") function does not depend on listed parameter "" << arg->GetName() << "", ignoring"" << std::endl ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:190367,log,logging,190367,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logging']
Testability,"3 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for them; 1409/// Returns number of match elements; 1410 ; 1411int RGeomDescription::SearchVisibles(const std::string &find, std::string &hjson, std::string &json); 1412{; 1413 TLockGuard lock(fMutex);; 1414 ; 1415 hjson.clear();; 1416 json.clear();; 1417 ; 1418 if (find.empty()) {; 1419 hjson = ""FOUND:RESET"";; 1420 return 0;; 1421 }; 1422 ; 1423 std::vector<int> nodescnt(fDesc.size(), 0), viscnt(fDesc.size(), 0);; 1424 ; 1425 int nmatches = 0;; 1426 std::string test = find;; 1427 int kind = 0;; 1428 if (test.compare(0, 2, ""c:"") == 0) {; 1429 test.erase(0, 2);; 1430 kind = 1;; 1431 } else if (test.compare(0, 2, ""m:"") == 0) {; 1432 test.erase(0, 2);; 1433 kind = 2;; 1434 }; 1435 ; 1436 TRegexp regexp(test.c_str());; 1437 ; 1438 auto match_func = [&regexp, kind](RGeomNode &node) {; 1439 return (node.vol > 0) && (TString(node.GetArg(kind)).Index(regexp) >= 0);; 1440 };; 1441 ; 1442 // first count how many times each individual node appears; 1443 ScanNodes(false, 0,; 1444 [&nodescnt, &viscnt, &match_func, &nmatches](RGeomNode &node, std::vector<int> &, bool is_vis, int) {; 1445 if (match_func(node)) {; 1446 nmatches++;; 1447 nodescnt[node.id]++;; 1448 if (is_vis); 1449 viscnt[node.id]++;; 1450 };; 1451 return true;; 1452 });; 1453 ; 1454 // do not send too much data, limit could be made configurable later; 1455 if (nmatches == 0) {; 1456 hjson = ""FOUND:NO"";; 1457 return nmatches;; 1458 }; 1459 ; 1460 if ((GetMaxVisNodes() > 0) && (nmatches > 10 * GetMaxVisNodes())) {; 1461 hjson = ""FOUND:Too many "" + std::to_string(nmatches);; 1462 return nmatches;; 1463 }; 1464 ; 1465 // now build all necessary shapes and check number of faces - not too many; 1466 ; 1467",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:43503,test,test,43503,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['test'],['test']
Testability,"3 }; 484 ; 485 /**; 486 Negative of a LorentzVector (q = - v ); 487 \return a new LorentzVector with opposite direction and time; 488 */; 489 LorentzVector operator - () const {; 490 //LorentzVector<CoordinateType> v(*this);; 491 //v.Negate();; 492 return operator*( Scalar(-1) );; 493 }; 494 LorentzVector operator + () const {; 495 return *this;; 496 }; 497 ; 498 // ---- Relativistic Properties ----; 499 ; 500 /**; 501 Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]; 502 */; 503 Scalar Rapidity() const {; 504 // TODO - It would be good to check that E > Pz and use the Throw(); 505 // mechanism or at least load a NAN if not.; 506 // We should then move the code to a .cpp file.; 507 const Scalar ee = E();; 508 const Scalar ppz = Pz();; 509 using std::log;; 510 return Scalar(0.5) * log((ee + ppz) / (ee - ppz));; 511 }; 512 ; 513 /**; 514 Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]; 515 */; 516 Scalar ColinearRapidity() const {; 517 // TODO - It would be good to check that E > P and use the Throw(); 518 // mechanism or at least load a NAN if not.; 519 const Scalar ee = E();; 520 const Scalar pp = P();; 521 using std::log;; 522 return Scalar(0.5) * log((ee + pp) / (ee - pp));; 523 }; 524 ; 525 /**; 526 Determine if momentum-energy can represent a physical massive particle; 527 */; 528 bool isTimelike( ) const {; 529 Scalar ee = E(); Scalar pp = P(); return ee*ee > pp*pp;; 530 }; 531 ; 532 /**; 533 Determine if momentum-energy can represent a massless particle; 534 */; 535 bool isLightlike( Scalar tolerance; 536 = 100*std::numeric_limits<Scalar>::epsilon() ) const {; 537 Scalar ee = E(); Scalar pp = P(); Scalar delta = ee-pp;; 538 if ( ee==0 ) return pp==0;; 539 return delta*delta < tolerance * ee*ee;; 540 }; 541 ; 542 /**; 543 Determine if momentum-energy is spacelike, and represents a tachyon; 544 */; 545 bool isSpacelike( ) const {; 546 Scalar ee = E(); Scalar pp = P(); return ee*ee < pp*pp;; 547 }; 548 ; 549 typedef DisplacementVecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:16585,log,log,16585,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['log'],['log']
Testability,"3 }; 8034 }; 8035 ; 8036 if (doError) error = TMath::Sqrt(igerr2);; 8037 return integral;; 8038}; 8039 ; 8040////////////////////////////////////////////////////////////////////////////////; 8041/// Statistical test of compatibility in shape between; 8042/// this histogram and h2, using the Anderson-Darling 2 sample test.; 8043///; 8044/// The AD 2 sample test formula are derived from the paper; 8045/// F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; 8046///; 8047/// The test is implemented in root in the ROOT::Math::GoFTest class; 8048/// It is the same formula ( (6) in the paper), and also shown in; 8049/// [this preprint](http://arxiv.org/pdf/0804.0380v1.pdf); 8050///; 8051/// Binned data are considered as un-binned data; 8052/// with identical observation happening in the bin center.; 8053///; 8054/// \param[in] h2 Pointer to 1D histogram; 8055/// \param[in] option is a character string to specify options; 8056/// - ""D"" Put out a line of ""Debug"" printout; 8057/// - ""T"" Return the normalized A-D test statistic; 8058///; 8059/// - Note1: Underflow and overflow are not considered in the test; 8060/// - Note2: The test works only for un-weighted histogram (i.e. representing counts); 8061/// - Note3: The histograms are not required to have the same X axis; 8062/// - Note4: The test works only for 1-dimensional histograms; 8063 ; 8064Double_t TH1::AndersonDarlingTest(const TH1 *h2, Option_t *option) const; 8065{; 8066 Double_t advalue = 0;; 8067 Double_t pvalue = AndersonDarlingTest(h2, advalue);; 8068 ; 8069 TString opt = option;; 8070 opt.ToUpper();; 8071 if (opt.Contains(""D"") ) {; 8072 printf("" AndersonDarlingTest Prob = %g, AD TestStatistic = %g\n"",pvalue,advalue);; 8073 }; 8074 if (opt.Contains(""T"") ) return advalue;; 8075 ; 8076 return pvalue;; 8077}; 8078 ; 8079////////////////////////////////////////////////////////////////////////////////; 8080/// Same function as above but returning also the test statistic value; 8081 ; 8082Double_t TH1::Anderson",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:315841,test,test,315841,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,3,['test'],['test']
Testability,"3"". Here ALIC is the top most; or master volume which has only 1 instance of. Of all of the daughter; volumes of ALICE, DDIP volume copy #1 is indicated. Similarly for; the daughter volume of DDIP is S05I copy #2 and so on.; Inputs:; TString& volumePath The volume path to the specific volume; for which you want the matrix. Volume name; hierarchy is separated by ""/"" while the; copy number is appended using a ""_"".; Outputs:; TGeoHMatrix &mat A matrix with its values set to those; appropriate to the Local to Master transformation; Return:; A logical value if kFALSE then an error occurred and no change to; mat was made. Bool_t GetShape(const TString& volumePath, TString& shapeType, TArrayD& par); Returns the shape and its parameters for the volume specified; by volumeName.; Inputs:; TString& volumeName The volume name; Outputs:; TString &shapeType Shape type; TArrayD &par A TArrayD of parameters with all of the; parameters of the specified shape.; Return:; A logical indicating whether there was an error in getting this; information. Bool_t GetMaterial(const TString& volumeName, TString& name, Int_t& imat, Double_t& a, Double_t& z, Double_t& density, Double_t& radl, Double_t& inter, TArrayD& par); Returns the Material and its parameters for the volume specified; by volumeName.; Note, Geant3 stores and uses mixtures as an element with an effective; Z and A. Consequently, if the parameter Z is not integer, then; this material represents some sort of mixture.; Inputs:; TString& volumeName The volume name; Outputs:; TSrting &name Material name; Int_t &imat Material index number; Double_t &a Average Atomic mass of material; Double_t &z Average Atomic number of material; Double_t &dens Density of material [g/cm^3]; Double_t &radl Average radiation length of material [cm]; Double_t &inter Average interaction length of material [cm]; TArrayD &par A TArrayD of user defined parameters.; Return:; kTRUE if no errors. Bool_t GetMedium(const TString& volumeName, TString& name, Int_t& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMCGeometry.html:19740,log,logical,19740,root/html528/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html528/TGeoMCGeometry.html,6,['log'],['logical']
Testability,3.4 1; : 678 Minimum Test error found - save the configuration ; : 678 | 43.7163 36.54 0.0202108 0.00183597 43537.9 0; : 679 Minimum Test error found - save the configuration ; : 679 | 43.1003 36.3421 0.0201203 0.00181258 43697.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:88079,Test,Test,88079,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"3/eda366b.htm; use now implementation in ROOT::Math::gamma_pdf. /*; ; */. Double_t LaplaceDist(Double_t x, Double_t alpha = 0, Double_t beta = 1); Computes the probability density function of Laplace distribution; at point x, with location parameter alpha and shape parameter beta.; By default, alpha=0, beta=1; This distribution is known under different names, most common is; double exponential distribution, but it also appears as; the two-tailed exponential or the bilateral exponential distribution. Double_t LaplaceDistI(Double_t x, Double_t alpha = 0, Double_t beta = 1); Computes the distribution function of Laplace distribution; at point x, with location parameter alpha and shape parameter beta.; By default, alpha=0, beta=1; This distribution is known under different names, most common is; double exponential distribution, but it also appears as; the two-tailed exponential or the bilateral exponential distribution. Double_t LogNormal(Double_t x, Double_t sigma, Double_t theta = 0, Double_t m = 1); Computes the density of LogNormal distribution at point x.; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; sigma is the shape parameter; theta is the location parameter; m is the scale parameter; The formula was taken from ""Engineering Statistics Handbook"" on site; http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; Implementation using ROOT::Math::lognormal_pdf. /*; ; */. Double_t NormQuantile(Double_t p); Computes quantiles for standard normal distribution N(0, 1); at probability p; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. Bool_t Permute(Int_t n, Int_t* a); Simple recursive algorithm to find the permutations of; n natural numbers, not necessarily all distinct; adapted from CERNLIB routine PERMU.; The input array has to be initialised with a non descending; sequence. The method returns kFALSE when; all combinations are exhausted. Double_t Student(Double_t T, Double_t ndf); Computes density function for Student",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:32808,Log,LogNormal,32808,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,12,['Log'],['LogNormal']
Testability,"30 ; 731#endif; 732 ; 733#ifndef NDEBUG; 734 ; 735/* __gl_meshCheckMesh( mesh ) checks a mesh for self-consistency.; 736 */; 737void __gl_meshCheckMesh( GLUmesh *mesh ); 738{; 739 GLUface *fHead = &mesh->fHead;; 740 GLUvertex *vHead = &mesh->vHead;; 741 GLUhalfEdge *eHead = &mesh->eHead;; 742 GLUface *f, *fPrev;; 743 GLUvertex *v, *vPrev;; 744 GLUhalfEdge *e, *ePrev;; 745 ; 746 fPrev = fHead;; 747 for( fPrev = fHead ; (f = fPrev->next) != fHead; fPrev = f) {; 748 assert( f->prev == fPrev );; 749 e = f->anEdge;; 750 do {; 751 assert( e->Sym != e );; 752 assert( e->Sym->Sym == e );; 753 assert( e->Lnext->Onext->Sym == e );; 754 assert( e->Onext->Sym->Lnext == e );; 755 assert( e->Lface == f );; 756 e = e->Lnext;; 757 } while( e != f->anEdge );; 758 }; 759 assert( f->prev == fPrev && f->anEdge == NULL && f->data == NULL );; 760 ; 761 vPrev = vHead;; 762 for( vPrev = vHead ; (v = vPrev->next) != vHead; vPrev = v) {; 763 assert( v->prev == vPrev );; 764 e = v->anEdge;; 765 do {; 766 assert( e->Sym != e );; 767 assert( e->Sym->Sym == e );; 768 assert( e->Lnext->Onext->Sym == e );; 769 assert( e->Onext->Sym->Lnext == e );; 770 assert( e->Org == v );; 771 e = e->Onext;; 772 } while( e != v->anEdge );; 773 }; 774 assert( v->prev == vPrev && v->anEdge == NULL && v->data == NULL );; 775 ; 776 ePrev = eHead;; 777 for( ePrev = eHead ; (e = ePrev->next) != eHead; ePrev = e) {; 778 assert( e->Sym->next == ePrev->Sym );; 779 assert( e->Sym != e );; 780 assert( e->Sym->Sym == e );; 781 assert( e->Org != NULL );; 782 assert( e->Dst != NULL );; 783 assert( e->Lnext->Onext->Sym == e );; 784 assert( e->Onext->Sym->Lnext == e );; 785 }; 786 assert( e->Sym->next == ePrev->Sym; 787 && e->Sym == &mesh->eHeadSym; 788 && e->Sym->Sym == e; 789 && e->Org == NULL && e->Dst == NULL; 790 && e->Lface == NULL && e->Rface == NULL );; 791}; 792 ; 793#endif; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; a#define a(i)Definition RSha256.hxx:99; e#define e(i)Definition R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mesh_8c_source.html:23305,assert,assert,23305,doc/master/mesh_8c_source.html,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html,22,['assert'],['assert']
Testability,"30 << ""t(s)/epoch"" << std::setw(12) << ""t(s)/Loss"" << std::setw(12) << ""nEvents/s"" << std::setw(12); 1431 << ""Conv. Steps"" << Endl;; 1432 Log() << separator << Endl;; 1433 }; 1434 ; 1435 // set up generator for shuffling the batches; 1436 // if seed is zero we have always a different order in the batches; 1437 size_t shuffleSeed = 0;; 1438 if (fRandomSeed != 0) shuffleSeed = fRandomSeed + trainingPhase;; 1439 RandomGenerator<TRandom3> rng(shuffleSeed);; 1440 ; 1441 // print weights before; 1442 if (fBuildNet && debug) {; 1443 Log() << ""Initial Deep Net Weights "" << Endl;; 1444 auto & weights_tensor = deepNet.GetLayerAt(0)->GetWeights();; 1445 for (size_t l = 0; l < weights_tensor.size(); ++l); 1446 weights_tensor[l].Print();; 1447 auto & bias_tensor = deepNet.GetLayerAt(0)->GetBiases();; 1448 bias_tensor[0].Print();; 1449 }; 1450 ; 1451 Log() << "" Start epoch iteration ..."" << Endl;; 1452 bool debugFirstEpoch = false;; 1453 bool computeLossInTraining = true; // compute loss in training or at test time; 1454 size_t nTrainEpochs = 0;; 1455 while (!converged) {; 1456 nTrainEpochs++;; 1457 trainingData.Shuffle(rng);; 1458 ; 1459 // execute all epochs; 1460 //for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1461 ; 1462 Double_t trainingError = 0;; 1463 for (size_t i = 0; i < batchesInEpoch; ++i ) {; 1464 // Clean and load new batches, one batch for one slave net; 1465 //batches.clear();; 1466 //batches.reserve(nThreads);; 1467 //for (size_t j = 0; j < nThreads; j++) {; 1468 // batches.push_back(trainingData.GetTensorBatch());; 1469 //}; 1470 if (debugFirstEpoch) std::cout << ""\n\n----- batch # "" << i << ""\n\n"";; 1471 ; 1472 auto my_batch = trainingData.GetTensorBatch();; 1473 ; 1474 if (debugFirstEpoch); 1475 std::cout << ""got batch data - doing forward \n"";; 1476 ; 1477#ifdef DEBUG; 1478 ; 1479 Architecture_t::PrintTensor(my_batch.GetInput(),""input tensor"",true);; 1480 typename Architecture_t::Tensor_t tOut(my_batch.GetOutput());; 1481 typename Architecture_t::Te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:57847,test,test,57847,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['test'],['test']
Testability,"30#elif defined(WIN32); 4531 return ::_lseeki64(fd, offset, whence);; 4532#else; 4533 return ::lseek(fd, offset, whence);; 4534#endif; 4535}; 4536 ; 4537////////////////////////////////////////////////////////////////////////////////; 4538/// Return file stat information.; 4539///; 4540/// The interface and return value is; 4541/// identical to TSystem::GetPathInfo(). The function returns 0 in; 4542/// case of success and 1 if the file could not be stat'ed.; 4543 ; 4544Int_t TFile::SysStat(Int_t, Long_t *id, Long64_t *size, Long_t *flags,; 4545 Long_t *modtime); 4546{; 4547 return gSystem->GetPathInfo(fRealName, id, size, flags, modtime);; 4548}; 4549 ; 4550////////////////////////////////////////////////////////////////////////////////; 4551/// Interface to system fsync. All arguments like in POSIX fsync().; 4552 ; 4553Int_t TFile::SysSync(Int_t fd); 4554{; 4555 if (TestBit(kDevNull)) return 0;; 4556 ; 4557#ifndef WIN32; 4558 return ::fsync(fd);; 4559#else; 4560 return ::_commit(fd);; 4561#endif; 4562}; 4563 ; 4564////////////////////////////////////////////////////////////////////////////////; 4565/// Return the total number of bytes written so far to the file.; 4566 ; 4567Long64_t TFile::GetBytesWritten() const; 4568{; 4569 return fCacheWrite ? fCacheWrite->GetBytesInCache() + fBytesWrite : fBytesWrite;; 4570}; 4571 ; 4572////////////////////////////////////////////////////////////////////////////////; 4573/// Static function returning the total number of bytes read from all files.; 4574 ; 4575Long64_t TFile::GetFileBytesRead(); 4576{; 4577 return fgBytesRead;; 4578}; 4579 ; 4580////////////////////////////////////////////////////////////////////////////////; 4581/// Static function returning the total number of bytes written to all files.; 4582/// Does not take into account what might still be in the write caches.; 4583 ; 4584Long64_t TFile::GetFileBytesWritten(); 4585{; 4586 return fgBytesWrite;; 4587}; 4588 ; 4589///////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:166357,Test,TestBit,166357,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Test'],['TestBit']
Testability,"300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.805395; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.725372 0.686272 0.190597 0.0152439 14599.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.695636 0.683324 0.189128 0.015082 14708.8 0; : 3 | 0.691864 0.689576 0.189646 0.0148842 14648.6 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.689168 0.677551 0.190642 0.015026 14577.3 0; : 5 | 0.686885 0.678678 0.189865 0.0148775 14629.7 1; : 6 | 0.68905 0.681357 0.189104 0.014885 14694.1 2; : 7 | 0.687138 0.683485 0.19023 0.0152893 14633.6 3; : 8 | 0.686429 0.685529 0.189996 0.0147979 14612 4; : 9 | 0.685179 0.683467 0.190317 0.0152552 14623.4 5; : 10 Minimum Test error found - save the configuration ; : 10 | 0.684262 0.673795 0.18992 0.0153518 14664.7 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.682907 0.671521 0.194162 0.0155002 14328.7 0; : 12 | 0.693473 0.677553 0.188937 0.0147664 14698.2 1; : 13 | 0.695581 0.671789 0.190501 0.0149406 14581.9 2; : 14 | 0.68024 0.680521 0.188432 0.0146998 14735.3 3; : 15 | 0.68435 0.688062 0.189615 0.0147881 14643.1 4; : 16 | 0.686476 0.675588 0.190015 0.0152195 14645.7 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:18492,Test,Test,18492,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,"3065///; 3066/// See the THistPainter class for a description of all the drawing options.; 3067 ; 3068void TH1::Draw(Option_t *option); 3069{; 3070 TString opt1 = option; opt1.ToLower();; 3071 TString opt2 = option;; 3072 Int_t index = opt1.Index(""same"");; 3073 ; 3074 // Check if the string ""same"" is part of a TCutg name.; 3075 if (index>=0) {; 3076 Int_t indb = opt1.Index(""["");; 3077 if (indb>=0) {; 3078 Int_t indk = opt1.Index(""]"");; 3079 if (index>indb && index<indk) index = -1;; 3080 }; 3081 }; 3082 ; 3083 // If there is no pad or an empty pad the ""same"" option is ignored.; 3084 if (gPad) {; 3085 if (!gPad->IsEditable()) gROOT->MakeDefCanvas();; 3086 if (index>=0) {; 3087 if (gPad->GetX1() == 0 && gPad->GetX2() == 1 &&; 3088 gPad->GetY1() == 0 && gPad->GetY2() == 1 &&; 3089 gPad->GetListOfPrimitives()->GetSize()==0) opt2.Remove(index,4);; 3090 } else {; 3091 //the following statement is necessary in case one attempts to draw; 3092 //a temporary histogram already in the current pad; 3093 if (TestBit(kCanDelete)) gPad->Remove(this);; 3094 gPad->Clear();; 3095 }; 3096 gPad->IncrementPaletteColor(1, opt1);; 3097 } else {; 3098 if (index>=0) opt2.Remove(index,4);; 3099 }; 3100 ; 3101 AppendPad(opt2.Data());; 3102}; 3103 ; 3104////////////////////////////////////////////////////////////////////////////////; 3105/// Copy this histogram and Draw in the current pad.; 3106///; 3107/// Once the histogram is drawn into the pad, any further modification; 3108/// using graphics input will be made on the copy of the histogram,; 3109/// and not to the original object.; 3110/// By default a postfix ""_copy"" is added to the histogram name. Pass an empty postfix in case; 3111/// you want to draw a histogram with the same name; 3112///; 3113/// See Draw for the list of options; 3114 ; 3115TH1 *TH1::DrawCopy(Option_t *option, const char * name_postfix) const; 3116{; 3117 TString opt = option;; 3118 opt.ToLower();; 3119 if (gPad && !opt.Contains(""same"")) gPad->Clear();; 3120 TString ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:123153,Test,TestBit,123153,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['TestBit']
Testability,"30; TColor::RGB2HLSstatic void RGB2HLS(Float_t r, Float_t g, Float_t b, Float_t &h, Float_t &l, Float_t &s)Static method to compute HLS from RGB.Definition TColor.cxx:1716; TF11-Dim function classDefinition TF1.h:233; TF1::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Set the maximum value along Y for this function In case the function is already drawn,...Definition TF1.cxx:3394; TF1::SetTitlevoid SetTitle(const char *title="""") overrideSet function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title i...Definition TF1.cxx:3558; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TF1::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Set the minimum value along Y for this function In case the function is already drawn,...Definition TF1.cxx:3407; TGeoAttVisualization and tracking attributes for volumes and nodes.Definition TGeoAtt.h:17; TGeoAtt::TestAttBitBool_t TestAttBit(UInt_t f) constDefinition TGeoAtt.h:64; TGeoAtt::IsVisBranchBool_t IsVisBranch() constDefinition TGeoAtt.h:85; TGeoAtt::kVisContainers@ kVisContainersDefinition TGeoAtt.h:32; TGeoAtt::kVisOnly@ kVisOnlyDefinition TGeoAtt.h:33; TGeoAtt::kVisOnScreen@ kVisOnScreenDefinition TGeoAtt.h:31; TGeoAtt::kVisBranch@ kVisBranchDefinition TGeoAtt.h:34; TGeoAtt::ResetAttBitvoid ResetAttBit(UInt_t f)Definition TGeoAtt.h:63; TGeoAtt::SetVisRaytracevoid SetVisRaytrace(Bool_t flag=kTRUE)Definition TGeoAtt.h:66; TGeoAtt::IsVisDaughtersBool_t IsVisDaughters() constDefinition TGeoAtt.h:84; TGeoAtt::SetAttBitvoid SetAttBit(UInt_t f)Definition TGeoAtt.h:61; TGeoBBoxDefinition TGeoBBox.h:17; TGeoBatemanSolDefinition TGeoElement.h:286; TGeoBatemanSol::ConcentrationDouble_t Concentration(Double_t time) constFind concentration of the element at a given time.Definition TGeoElement.cxx:1601; TGeoBatemanSol::GetNcoeffInt_t GetNcoeff() constDefinition TGeoElement.h:338; TGeoBatemanSol::GetCoeffvoid GetCoeff(Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:80128,Test,TestAttBit,80128,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Test'],['TestAttBit']
Testability,"31 // Log() << kINFO << Endl;; 1932 // }; 1933 ; 1934 // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; 1935 // --------------------------------------------------------------------; 1936 TString header1 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Dataset"", ""MVA Method"", ""ROC AUC"", ""Sig eff@B=0.01"",; 1937 ""Sig eff@B=0.10"", ""Sig eff@B=0.30"");; 1938 TString header2 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Name:"", ""/ Class:"", ""test (train)"", ""test (train)"",; 1939 ""test (train)"", ""test (train)"");; 1940 Log() << kINFO << Endl;; 1941 Log() << kINFO << ""1-vs-rest performance metrics per class"" << Endl;; 1942 Log() << kINFO << hLine << Endl;; 1943 Log() << kINFO << Endl;; 1944 Log() << kINFO << ""Considers the listed class as signal and the other classes"" << Endl;; 1945 Log() << kINFO << ""as background, reporting the resulting binary performance."" << Endl;; 1946 Log() << kINFO << ""A score of 0.820 (0.850) means 0.820 was acheived on the"" << Endl;; 1947 Log() << kINFO << ""test set and 0.850 on the training set."" << Endl;; 1948 ; 1949 Log() << kINFO << Endl;; 1950 Log() << kINFO << header1 << Endl;; 1951 Log() << kINFO << header2 << Endl;; 1952 for (Int_t k = 0; k < 2; k++) {; 1953 for (Int_t i = 0; i < nmeth_used[k]; i++) {; 1954 if (k == 1) {; 1955 mname[k][i].ReplaceAll(""Variable_"", """");; 1956 }; 1957 ; 1958 const TString datasetName = itrMap->first;; 1959 const TString mvaName = mname[k][i];; 1960 ; 1961 MethodBase *theMethod = dynamic_cast<MethodBase *>(GetMethod(datasetName, mvaName));; 1962 if (theMethod == 0) {; 1963 continue;; 1964 }; 1965 ; 1966 Log() << kINFO << Endl;; 1967 TString row = TString::Format(""%-15s%-15s"", datasetName.Data(), mvaName.Data());; 1968 Log() << kINFO << row << Endl;; 1969 Log() << kINFO << ""------------------------------"" << Endl;; 1970 ; 1971 UInt_t numClasses = theMethod->fDataSetInfo.GetNClasses();; 1972 for (UInt_t iClass = 0; iClass < numClasses; ++iClass) {; 1973 ; 1974 ROCCurve *rocCurveTrai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:81610,Log,Log,81610,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,"['Log', 'test']","['Log', 'test']"
Testability,"315 void SetLabelSize(Float_t size=0.04, Option_t *axis=""X"");; 316 void SetLegoInnerR(Float_t rad=0.5) {fLegoInnerR = rad;}; 317 void SetScreenFactor(Float_t factor=1) {fScreenFactor = factor;}; 318 void SetTickLength(Float_t length=0.03, Option_t *axis=""X"");; 319 void SetTitleColor(Color_t color=1, Option_t *axis=""X""); //set axis title color or pad title color; 320 void SetTitleFont(Style_t font=62, Option_t *axis=""X""); //set axis title font or pad title font; 321 void SetTitleOffset(Float_t offset=1, Option_t *axis=""X""); //set axis title offset; 322 void SetTitleSize(Float_t size=0.02, Option_t *axis=""X""); //set axis title size or pad title size; 323 void SetExponentOffset(Float_t xoff=0., Float_t yoff=0., Option_t *axis=""XY"");; 324 void SetAxisMaxDigits(Int_t maxd=5);; 325 void SetNumberContours(Int_t number=20);; 326 void SetOptDate(Int_t datefl=1);; 327 void SetOptFile(Int_t file=1) {fOptFile = file;}; 328 void SetOptFit(Int_t fit=1);; 329 void SetOptLogx(Int_t logx=1) {fOptLogx = logx;}; 330 void SetOptLogy(Int_t logy=1) {fOptLogy = logy;}; 331 void SetOptLogz(Int_t logz=1) {fOptLogz = logz;}; 332 void SetOptStat(Int_t stat=1);; 333 void SetOptStat(Option_t *stat);; 334 void SetOptTitle(Int_t tit=1) {fOptTitle = tit;}; 335 void SetBarOffset(Float_t baroff=0.5) {fBarOffset = baroff;}; 336 void SetBarWidth(Float_t barwidth=0.5) {fBarWidth = barwidth;}; 337 void SetDateX(Float_t x=0.01) {fDateX = x;}; 338 void SetDateY(Float_t y=0.01) {fDateY = y;}; 339 void SetEndErrorSize(Float_t np=2);; 340 void SetErrorX(Float_t errorx=0.5) {fErrorX = errorx;}; 341 void SetCanvasPreferGL(Bool_t prefer = kTRUE) {fCanvasPreferGL=prefer;}; 342 void SetDrawBorder(Int_t drawborder=1) {fDrawBorder = drawborder;}; 343 void SetCanvasColor(Color_t color=19) {fCanvasColor = color;}; 344 void SetCanvasBorderSize(Width_t size=1) {fCanvasBorderSize = size;}; 345 void SetCanvasBorderMode(Int_t mode=1) {fCanvasBorderMode = mode;}; 346 void SetCanvasDefH(Int_t h=500) {fCanvasDefH = h;}; 347 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h_source.html:19521,log,logx,19521,doc/master/TStyle_8h_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8h_source.html,6,['log'],"['logx', 'logy', 'logz']"
Testability,"32 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 433 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 434 assert( !fDataError.empty() && fDataErrorPtr );; 435 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 436 ; 437 fData[ fNPoints ] = y;; 438 fDataError[ fNPoints ] = (ey != 0.0) ? 1.0/ey : 0.0;; 439 ; 440 FitData::Add( x );; 441 fSumContent += y;; 442 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 443 // set the weight flag checking if error^2 != y; 444 if (!fIsWeighted); 445 if (y != 0 && std::abs( ey*ey/y - 1.0) > 1.E-12) fIsWeighted = true;; 446 }; 447 ; 448 /**; 449 add one dim data with error in the coordinate (x); 450 in this case store the value (y) error and not the inverse; 451 */; 452 void BinData::Add( double x, double y, double ex, double ey ); 453 {; 454 assert( kCoordError == fErrorType );; 455 assert( !fData.empty() && fDataPtr );; 456 assert( !fDataError.empty() && fDataErrorPtr );; 457 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 458 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 459 assert( !fCoordErrors.empty() && fCoordErrors.size() == 1 );; 460 assert( !fCoordErrorsPtr.empty() && fCoordErrorsPtr.size() == 1 && fCoordErrorsPtr[0] );; 461 assert( &fCoordErrors[0].front() == fCoordErrorsPtr[0] );; 462 ; 463 fData[ fNPoints ] = y;; 464 fCoordErrors[0][ fNPoints ] = ex;; 465 fDataError[ fNPoints ] = ey;; 466 ; 467 FitData::Add( x );; 468 fSumContent += y;; 469 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 470 // set the weight flag checking if error^2 != y; 471 if (!fIsWeighted); 472 if (y != 0 && std::abs( ey*ey/y - 1.0) > 1.E-12) fIsWeighted = true;; 473 }; 474 ; 475 /**; 476 add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); 477 in this case store the y errors and not the inverse; 478 */; 479 void BinData::Add( double x, double y, double ex, double eyl, double eyh ); 480 {; 481 assert( kAsymError == fErrorType );; 482 assert( !fData.empty() && fDataPtr );; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:13530,assert,assert,13530,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"32 }; 733 ; 734 if (TestBit(kLabelsHori)) {; 735 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsHori);""<<std::endl;; 736 }; 737 ; 738 if (TestBit(kLabelsVert)) {; 739 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsVert);""<<std::endl;; 740 }; 741 ; 742 if (TestBit(kLabelsDown)) {; 743 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsDown);""<<std::endl;; 744 }; 745 ; 746 if (TestBit(kLabelsUp)) {; 747 out<<"" ""<<name<<subname<<""->SetBit(TAxis::kLabelsUp);""<<std::endl;; 748 }; 749 ; 750 if (TestBit(kCenterLabels)) {; 751 out<<"" ""<<name<<subname<<""->CenterLabels(true);""<<std::endl;; 752 }; 753 ; 754 if (TestBit(kCenterTitle)) {; 755 out<<"" ""<<name<<subname<<""->CenterTitle(true);""<<std::endl;; 756 }; 757 ; 758 if (TestBit(kRotateTitle)) {; 759 out<<"" ""<<name<<subname<<""->RotateTitle(true);""<<std::endl;; 760 }; 761 ; 762 if (TestBit(kDecimals)) {; 763 out<<"" ""<<name<<subname<<""->SetDecimals();""<<std::endl;; 764 }; 765 ; 766 if (TestBit(kMoreLogLabels)) {; 767 out<<"" ""<<name<<subname<<""->SetMoreLogLabels();""<<std::endl;; 768 }; 769 ; 770 if (TestBit(kNoExponent)) {; 771 out<<"" ""<<name<<subname<<""->SetNoExponent();""<<std::endl;; 772 }; 773 if (fModLabs) {; 774 TIter next(fModLabs);; 775 while (auto ml = (TAxisModLab*)next()) {; 776 if (ml->GetLabNum() == 0); 777 out<<"" ""<<name<<subname<<""->ChangeLabelByValue(""<<ml->GetLabValue()<<"","";; 778 else; 779 out<<"" ""<<name<<subname<<""->ChangeLabel(""<<ml->GetLabNum()<<"","";; 780 out<<ml->GetAngle()<<"",""; 781 <<ml->GetSize()<<"",""; 782 <<ml->GetAlign()<<"",""; 783 <<ml->GetColor()<<"",""; 784 <<ml->GetFont()<<"",""; 785 <<quote<<ml->GetText()<<quote<<"");""<<std::endl;; 786 }; 787 }; 788 TAttAxis::SaveAttributes(out,name,subname);; 789}; 790 ; 791////////////////////////////////////////////////////////////////////////////////; 792/// Initialize axis with fix bins; 793 ; 794void TAxis::Set(Int_t nbins, Double_t xlow, Double_t xup); 795{; 796 fNbins = nbins;; 797 fXmin = xlow;; 798 fXmax = xup;; 799 if (!fParent) SetDefaults();; 800 if (fXbins.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:25683,Test,TestBit,25683,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,"322 }; 15323 /* log returned true: continue logging */; 15324 } else if (t == LUA_TSTRING) {; 15325 size_t len;; 15326 const char *txt = lua_tolstring(lstate, -1, &len);; 15327 if ((len == 0) || (*txt == 0)) {; 15328 /* log() returned empty string: do not log */; 15329 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 15330 return;; 15331 }; 15332 /* Copy test from Lua into log_buf */; 15333 if (len >= sizeof(log_buf)) {; 15334 len = sizeof(log_buf) - 1;; 15335 }; 15336 memcpy(log_buf, txt, len);; 15337 log_buf[len] = 0;; 15338 }; 15339 } else {; 15340 lua_cry(conn, ret, lstate, ""lua_background_script"", ""log"");; 15341 }; 15342 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 15343 }; 15344#endif; 15345 ; 15346 if (conn->dom_ctx->config[ACCESS_LOG_FILE] != NULL) {; 15347 if (mg_fopen(conn,; 15348 conn->dom_ctx->config[ACCESS_LOG_FILE],; 15349 MG_FOPEN_MODE_APPEND,; 15350 &fi); 15351 == 0) {; 15352 fi.access.fp = NULL;; 15353 }; 15354 } else {; 15355 fi.access.fp = NULL;; 15356 }; 15357 ; 15358 /* Log is written to a file and/or a callback. If both are not set,; 15359 * executing the rest of the function is pointless. */; 15360 if ((fi.access.fp == NULL); 15361 && (conn->phys_ctx->callbacks.log_access == NULL)) {; 15362 return;; 15363 }; 15364 ; 15365 /* If we did not get a log message from Lua, create it here. */; 15366 if (!log_buf[0]) {; 15367 tm = localtime(&conn->conn_birth_time);; 15368 if (tm != NULL) {; 15369 strftime(date, sizeof(date), ""%d/%b/%Y:%H:%M:%S %z"", tm);; 15370 } else {; 15371 mg_strlcpy(date, ""01/Jan/1970:00:00:00 +0000"", sizeof(date));; 15372 date[sizeof(date) - 1] = '\0';; 15373 }; 15374 ; 15375 ri = &conn->request_info;; 15376 ; 15377 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 15378 referer = header_val(conn, ""Referer"");; 15379 user_agent = header_val(conn, ""User-Agent"");; 15380 ; 15381 mg_snprintf(conn,; 15382 NULL, /* Ignore truncation in access log */; 15383 log_buf,; 15384 sizeof(log_buf),; 15385 ""%s - %s [%s] \""%s %s%s%s HTTP/%s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:453908,Log,Log,453908,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['Log'],['Log']
Testability,"323 }; 15324 /* log returned true: continue logging */; 15325 } else if (t == LUA_TSTRING) {; 15326 size_t len;; 15327 const char *txt = lua_tolstring(lstate, -1, &len);; 15328 if ((len == 0) || (*txt == 0)) {; 15329 /* log() returned empty string: do not log */; 15330 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 15331 return;; 15332 }; 15333 /* Copy test from Lua into log_buf */; 15334 if (len >= sizeof(log_buf)) {; 15335 len = sizeof(log_buf) - 1;; 15336 }; 15337 memcpy(log_buf, txt, len);; 15338 log_buf[len] = 0;; 15339 }; 15340 } else {; 15341 lua_cry(conn, ret, lstate, ""lua_background_script"", ""log"");; 15342 }; 15343 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 15344 }; 15345#endif; 15346 ; 15347 if (conn->dom_ctx->config[ACCESS_LOG_FILE] != NULL) {; 15348 if (mg_fopen(conn,; 15349 conn->dom_ctx->config[ACCESS_LOG_FILE],; 15350 MG_FOPEN_MODE_APPEND,; 15351 &fi); 15352 == 0) {; 15353 fi.access.fp = NULL;; 15354 }; 15355 } else {; 15356 fi.access.fp = NULL;; 15357 }; 15358 ; 15359 /* Log is written to a file and/or a callback. If both are not set,; 15360 * executing the rest of the function is pointless. */; 15361 if ((fi.access.fp == NULL); 15362 && (conn->phys_ctx->callbacks.log_access == NULL)) {; 15363 return;; 15364 }; 15365 ; 15366 /* If we did not get a log message from Lua, create it here. */; 15367 if (!log_buf[0]) {; 15368 tm = localtime(&conn->conn_birth_time);; 15369 if (tm != NULL) {; 15370 strftime(date, sizeof(date), ""%d/%b/%Y:%H:%M:%S %z"", tm);; 15371 } else {; 15372 mg_strlcpy(date, ""01/Jan/1970:00:00:00 +0000"", sizeof(date));; 15373 date[sizeof(date) - 1] = '\0';; 15374 }; 15375 ; 15376 ri = &conn->request_info;; 15377 ; 15378 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 15379 referer = header_val(conn, ""Referer"");; 15380 user_agent = header_val(conn, ""User-Agent"");; 15381 ; 15382 mg_snprintf(conn,; 15383 NULL, /* Ignore truncation in access log */; 15384 log_buf,; 15385 sizeof(log_buf),; 15386 ""%s - %s [%s] \""%s %s%s%s HTTP/%s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:453941,Log,Log,453941,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['Log'],['Log']
Testability,"327 AddTree(fTestAssignTree[i], className, 1.0, TCut(""""), Types::kTesting );; 328 }; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// number of signal events (used to compute significance); 333 ; 334void TMVA::DataLoader::AddTree( TTree* tree, const TString& className, Double_t weight,; 335 const TCut& cut, const TString& treetype ); 336{; 337 Types::ETreeType tt = Types::kMaxTreeType;; 338 TString tmpTreeType = treetype; tmpTreeType.ToLower();; 339 if (tmpTreeType.Contains( ""train"" ) && tmpTreeType.Contains( ""test"" )) tt = Types::kMaxTreeType;; 340 else if (tmpTreeType.Contains( ""train"" )) tt = Types::kTraining;; 341 else if (tmpTreeType.Contains( ""test"" )) tt = Types::kTesting;; 342 else {; 343 Log() << kFATAL << ""<AddTree> cannot interpret tree type: \"""" << treetype; 344 << ""\"" should be \""Training\"" or \""Test\"" or \""Training and Testing\"""" << Endl;; 345 }; 346 AddTree( tree, className, weight, cut, tt );; 347}; 348 ; 349////////////////////////////////////////////////////////////////////////////////; 350 ; 351void TMVA::DataLoader::AddTree( TTree* tree, const TString& className, Double_t weight,; 352 const TCut& cut, Types::ETreeType tt ); 353{; 354 if(!tree); 355 Log() << kFATAL << ""Tree does not exist (empty pointer)."" << Endl;; 356 ; 357 DefaultDataSetInfo().AddClass( className );; 358 ; 359 // set analysistype to ""kMulticlass"" if more than two classes and analysistype == kNoAnalysisType; 360 if( fAnalysisType == Types::kNoAnalysisType && DefaultDataSetInfo().GetNClasses() > 2 ); 361 fAnalysisType = Types::kMulticlass;; 362 ; 363 Log() << kINFO<< ""Add Tree "" << tree->GetName() << "" of type "" << className; 364 << "" with "" << tree->GetEntries() << "" events"" << Endl;; 365 DataInput().AddTree( tree, className, weight, cut, tt );; 366}; 367 ; 368////////////////////////////////////////////////////////////////////////////////; 369/// number of signal events (used to compute significance); 370 ; 371void TMVA::Da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8cxx_source.html:13187,test,test,13187,doc/master/DataLoader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8cxx_source.html,5,"['Log', 'Test', 'test']","['Log', 'Test', 'Testing', 'test']"
Testability,"32; 2216 if (ndf > c[3]) {; 2217 x = TMath::NormQuantile(p);; 2218 //starting approximation using Wilson and Hilferty estimate; 2219 p1=c[2]/ndf;; 2220 ch = ndf*TMath::Power((x*TMath::Sqrt(p1) + 1 - p1), 3);; 2221 if (ch > c[6]*ndf + 6); 2222 ch = -2 * (TMath::Log(1-p) - cp * TMath::Log(0.5 * ch) + g);; 2223 } else {; 2224 ch = c[4];; 2225 a = TMath::Log(1-p);; 2226 do{; 2227 q = ch;; 2228 p1 = 1 + ch * (c[7]+ch);; 2229 p2 = ch * (c[9] + ch * (c[8] + ch));; 2230 t = -0.5 + (c[7] + 2 * ch) / p1 - (c[9] + ch * (c[10] + 3 * ch)) / p2;; 2231 ch = ch - (1 - TMath::Exp(a + g + 0.5 * ch + cp * aa) *p2 / p1) / t;; 2232 }while (TMath::Abs(q/ch - 1) > c[1]);; 2233 }; 2234 } else {; 2235 ch = TMath::Power((p * xx * TMath::Exp(g + xx * aa)),(1./xx));; 2236 if (ch < e) return ch;; 2237 }; 2238//call to algorithm AS 239 and calculation of seven term Taylor series; 2239 for (Int_t i=0; i<maxit; i++){; 2240 q = ch;; 2241 p1 = 0.5 * ch;; 2242 p2 = p - TMath::Gamma(xx, p1);; 2243 ; 2244 t = p2 * TMath::Exp(xx * aa + g + p1 - cp * TMath::Log(ch));; 2245 b = t / ch;; 2246 a = 0.5 * t - b * cp;; 2247 s1 = (c[19] + a * (c[17] + a * (c[14] + a * (c[13] + a * (c[12] +c[11] * a))))) / c[24];; 2248 s2 = (c[24] + a * (c[29] + a * (c[32] + a * (c[33] + c[35] * a)))) / c[37];; 2249 s3 = (c[19] + a * (c[25] + a * (c[28] + c[31] * a))) / c[37];; 2250 s4 = (c[20] + a * (c[27] + c[34] * a) + cp * (c[22] + a * (c[30] + c[36] * a))) / c[38];; 2251 s5 = (c[13] + c[21] * a + cp * (c[18] + c[26] * a)) / c[37];; 2252 s6 = (c[15] + cp * (c[23] + c[16] * cp)) / c[38];; 2253 ch = ch + t * (1 + 0.5 * t * s1 - b * cp * (s1 - b * (s2 - b * (s3 - b * (s4 - b * (s5 - b * s6))))));; 2254 if (TMath::Abs(q / ch - 1) > e) break;; 2255 }; 2256 return ch;; 2257}; 2258 ; 2259////////////////////////////////////////////////////////////////////////////////; 2260/// Computes the density function of F-distribution; 2261/// (probability function, integral of density, is computed in FDistI).; 2262///; 2263/// Parameters N and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:74904,Log,Log,74904,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['Log'],['Log']
Testability,"32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; TMVA::LogIntervalThe TMVA::Interval Class.Definition LogInterval.h:83. Definition at line 83 of file LogInterval.h. Public Member Functions;  LogInterval (const LogInterval &other);  ;  LogInterval (Double_t min, Double_t max, Int_t nbins=0);  ; virtual ~LogInterval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete LogInterval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Interval;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual void Print (std::ostream &os) const;  ; void SetMax (Double_t m);  ; void SetMin (Double_t m);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Interval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:1900,Log,LogInterval,1900,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,2,['Log'],"['Log', 'LogInterval']"
Testability,"332{; 333 if (fBlocks){; 334 fBlocks->Delete();; 335 delete fBlocks;; 336 }; 337 fBlocks = nullptr;; 338 if (fLists){; 339 fLists->Delete();; 340 delete fLists;; 341 }; 342 ; 343 fLists = nullptr;; 344 ; 345 if (fDirectory) fDirectory->Remove(this);; 346 fDirectory = nullptr;; 347 ; 348}; 349 ; 350////////////////////////////////////////////////////////////////////////////////; 351/// \brief Add 2 entry lists.; 352///; 353/// \param[in] elist The list that should be added to the current one.; 354///; 355/// \note If you are creating a TEntryList for a TChain and you would like to; 356/// have a one to one mapping between the sub lists of the TEntryList and; 357/// the sub trees in the TChain, please do not call this function but use; 358/// TEntryList::AddSubList instead and pair it with a call to; 359/// TChain::SetEntryList with option ""sync"". See the AddSubList function; 360/// documentation for an example usage. This helps for example in a; 361/// testing or benchmark scenario where a TChain holds multiple times the; 362/// same tree in the same file. In that case, this function would not be; 363/// be able to distinguish different sub entry lists that refer to the; 364/// same treename and filename. Instead it would create a union of all the; 365/// sub entry lists into one list.; 366 ; 367void TEntryList::Add(const TEntryList *elist); 368{; 369 if (fN==0){; 370 if (!fLists && fTreeName=="""" && fFileName==""""){; 371 //this list is empty. copy the other list completely; 372 fNBlocks = elist->fNBlocks;; 373 fTreeName = elist->fTreeName;; 374 fFileName = elist->fFileName;; 375 fStringHash = elist->fStringHash;; 376 fTreeNumber = elist->fTreeNumber;; 377 fLastIndexQueried = -1;; 378 fLastIndexReturned = 0;; 379 fN = elist->fN;; 380 if (elist->fLists){; 381 fLists = new TList();; 382 TEntryList *el1 = nullptr;; 383 TEntryList *el2 = nullptr;; 384 TIter next(elist->fLists);; 385 while((el1 = (TEntryList*)next())){; 386 el2 = new TEntryList(*el1);; 387 if (el1==elist->f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEntryList_8cxx_source.html:12603,test,testing,12603,doc/master/TEntryList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEntryList_8cxx_source.html,2,"['benchmark', 'test']","['benchmark', 'testing']"
Testability,"338 }; 5339 }; 5340 }; 5341 ; 5342 if (Hoption.Zscale) PaintPalette();; 5343 fH->SetFillStyle(fillsav);; 5344 fH->SetFillColor(colsav);; 5345 fH->TAttFill::Modify();; 5346}; 5347 ; 5348 ; 5349 ; 5350////////////////////////////////////////////////////////////////////////////////; 5351/// [Control function to draw a 2D histogram as a candle (box) plot or violin plot](\ref HP14); 5352 ; 5353void THistPainter::PaintCandlePlot(Option_t *); 5354{; 5355 TH1D *hproj = nullptr;; 5356 TH2D *h2 = (TH2D*)fH;; 5357 ; 5358 TCandle myCandle;; 5359 myCandle.SetOption((TCandle::CandleOption)Hoption.Candle);; 5360 myCandle.SetMarkerColor(fH->GetLineColor());; 5361 myCandle.SetLineColor(fH->GetLineColor());; 5362 myCandle.SetLineWidth(fH->GetLineWidth());; 5363 myCandle.SetFillColor(fH->GetFillColor());; 5364 myCandle.SetFillStyle(fH->GetFillStyle());; 5365 myCandle.SetMarkerSize(fH->GetMarkerSize());; 5366 myCandle.SetMarkerStyle(fH->GetMarkerStyle());; 5367 myCandle.SetLog(Hoption.Logx,Hoption.Logy, Hoption.Logz);; 5368 ; 5369 Bool_t swapXY = myCandle.IsHorizontal();; 5370 const Double_t standardCandleWidth = 0.66;; 5371 const Double_t standardHistoWidth = 0.8;; 5372 ; 5373 double allMaxContent = 0, allMaxIntegral = 0;; 5374 if (myCandle.IsViolinScaled()); 5375 allMaxContent = h2->GetBinContent(h2->GetMaximumBin());; 5376 ; 5377 if (!swapXY) { // Vertical candle; 5378 //Determining the slice with the maximum integral - if necessary; 5379 if (myCandle.IsCandleScaled()); 5380 for (Int_t i=Hparam.xfirst; i<=Hparam.xlast; i++) {; 5381 hproj = h2->ProjectionY(""_px"", i, i);; 5382 if (hproj->Integral() > allMaxIntegral) allMaxIntegral = hproj->Integral();; 5383 }; 5384 for (Int_t i=Hparam.xfirst; i<=Hparam.xlast; i++) {; 5385 Double_t binPosX = fXaxis->GetBinLowEdge(i);; 5386 Double_t binWidth = fXaxis->GetBinWidth(i);; 5387 hproj = h2->ProjectionY(""_px"", i, i);; 5388 if (hproj->GetEntries() != 0) {; 5389 Double_t candleWidth = fH->GetBarWidth();; 5390 Double_t offset = fH->GetBarOffset()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:200121,Log,Logy,200121,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability,34 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91347,Test,Test,91347,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"34 DEBUG_TRACE_FUNC(__func__, __LINE__, fmt, __VA_ARGS__); 235 ; 236#define NEED_DEBUG_TRACE_FUNC; 237#if !defined(DEBUG_TRACE_STREAM); 238#define DEBUG_TRACE_STREAM stdout; 239#endif; 240 ; 241#else; 242#define DEBUG_TRACE(fmt, ...) \; 243 do { \; 244 } while (0); 245#endif /* DEBUG */; 246#endif /* DEBUG_TRACE */; 247 ; 248 ; 249#if !defined(DEBUG_ASSERT); 250#if defined(DEBUG); 251#include <stdlib.h>; 252#define DEBUG_ASSERT(cond) \; 253 do { \; 254 if (!(cond)) { \; 255 DEBUG_TRACE(""ASSERTION FAILED: %s"", #cond); \; 256 exit(2); /* Exit with error */ \; 257 } \; 258 } while (0); 259#else; 260#define DEBUG_ASSERT(cond); 261#endif /* DEBUG */; 262#endif; 263 ; 264 ; 265#if defined(__GNUC__) && defined(GCC_INSTRUMENTATION); 266void __cyg_profile_func_enter(void *this_fn, void *call_site); 267 __attribute__((no_instrument_function));; 268 ; 269void __cyg_profile_func_exit(void *this_fn, void *call_site); 270 __attribute__((no_instrument_function));; 271 ; 272void; 273__cyg_profile_func_enter(void *this_fn, void *call_site); 274{; 275 if ((void *)this_fn != (void *)printf) {; 276 printf(""E %p %p\n"", this_fn, call_site);; 277 }; 278}; 279 ; 280void; 281__cyg_profile_func_exit(void *this_fn, void *call_site); 282{; 283 if ((void *)this_fn != (void *)printf) {; 284 printf(""X %p %p\n"", this_fn, call_site);; 285 }; 286}; 287#endif; 288 ; 289 ; 290#if !defined(IGNORE_UNUSED_RESULT); 291#define IGNORE_UNUSED_RESULT(a) ((void)((a) && 1)); 292#endif; 293 ; 294 ; 295#if defined(__GNUC__) || defined(__MINGW32__); 296 ; 297/* GCC unused function attribute seems fundamentally broken.; 298 * Several attempts to tell the compiler ""THIS FUNCTION MAY BE USED; 299 * OR UNUSED"" for individual functions failed.; 300 * Either the compiler creates an ""unused-function"" warning if a; 301 * function is not marked with __attribute__((unused)).; 302 * On the other hand, if the function is marked with this attribute,; 303 * but is used, the compiler raises a completely idiotic; 304 * ""used-but-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:9684,ASSERT,ASSERTION,9684,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['ASSERT'],['ASSERTION']
Testability,"35 auto outputMatrix = batch.GetOutput();; 1036 testError += testNet.Loss(inputMatrix, outputMatrix);; 1037 }; 1038 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1039 ; 1040 //Log the loss value; 1041 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1042 ; 1043 end = std::chrono::system_clock::now();; 1044 ; 1045 // Compute training error.; 1046 Double_t trainingError = 0.0;; 1047 for (auto batch : trainingData) {; 1048 auto inputMatrix = batch.GetInput();; 1049 auto outputMatrix = batch.GetOutput();; 1050 trainingError += net.Loss(inputMatrix, outputMatrix);; 1051 }; 1052 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1053 //Log the loss value; 1054 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1055 ; 1056 // Compute numerical throughput.; 1057 std::chrono::duration<double> elapsed_seconds = end - start;; 1058 double seconds = elapsed_seconds.count();; 1059 double nFlops = (double) (settings.testInterval * batchesInEpoch);; 1060 nFlops *= net.GetNFlops() * 1e-9;; 1061 ; 1062 converged = minimizer.HasConverged(testError);; 1063 start = std::chrono::system_clock::now();; 1064 ; 1065 if (fInteractive) {; 1066 fInteractive->AddPoint(stepCount, trainingError, testError);; 1067 fIPyCurrentIter = 100.0 * minimizer.GetConvergenceCount(); 1068 / minimizer.GetConvergenceSteps ();; 1069 if (fExitFromTraining) break;; 1070 } else {; 1071 Log() << std::setw(10) << stepCount << "" | ""; 1072 << std::setw(12) << trainingError; 1073 << std::setw(12) << testError; 1074 << std::setw(12) << nFlops / seconds; 1075 << std::setw(12) << minimizer.GetConvergenceCount() << Endl;; 1076 if (converged) {; 1077 Log() << Endl;; 1078 }; 1079 }; 1080 }; 1081 }; 1082 for (size_t l = 0; l < net.GetDepth(); l++) {; 1083 fNet.GetLayer(l).GetWeights() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetWeights();; 1084 fNet.GetLayer(l).GetBiases() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetBiases();; 1085 }; 1086 }; 1087 ; 1088#else // DNNCUDA fla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:37961,test,testInterval,37961,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testInterval']
Testability,"35 corrRatio /= pow(h.ProjectionY()->GetRMS(),2);; 636 return corrRatio;; 637}; 638 ; 639////////////////////////////////////////////////////////////////////////////////; 640/// Compute the mean in Y for a given bin X of a 2D histogram; 641 ; 642Double_t TMVA::Tools::GetYMean_binX( const TH2& h, Int_t bin_x ); 643{; 644 if (h.Integral(bin_x,bin_x,1,h.GetNbinsY()) == 0.) {return 0;}; 645 Double_t y_bin_mean = 0.;; 646 TH1* py = h.ProjectionY();; 647 for (Int_t y = 1; y <= h.GetNbinsY(); y++){; 648 y_bin_mean += h.GetBinContent(bin_x,y)*py->GetBinCenter(y);; 649 }; 650 y_bin_mean /= h.Integral(bin_x,bin_x,1,h.GetNbinsY());; 651 return y_bin_mean;; 652}; 653 ; 654////////////////////////////////////////////////////////////////////////////////; 655/// Transpose quadratic histogram; 656 ; 657TH2F* TMVA::Tools::TransposeHist( const TH2F& h ); 658{; 659 // sanity check; 660 if (h.GetNbinsX() != h.GetNbinsY()) {; 661 Log() << kFATAL << ""<TransposeHist> cannot transpose non-quadratic histogram"" << Endl;; 662 }; 663 ; 664 TH2F *transposedHisto = new TH2F( h );; 665 for (Int_t ix=1; ix <= h.GetNbinsX(); ix++){; 666 for (Int_t iy=1; iy <= h.GetNbinsY(); iy++){; 667 transposedHisto->SetBinContent(iy,ix,h.GetBinContent(ix,iy));; 668 }; 669 }; 670 ; 671 // copy stats (thanks to Swagato Banerjee for pointing out the missing stats information); 672 Double_t stats_old[7];; 673 Double_t stats_new[7];; 674 ; 675 h.GetStats(stats_old);; 676 stats_new[0] = stats_old[0];; 677 stats_new[1] = stats_old[1];; 678 stats_new[2] = stats_old[4];; 679 stats_new[3] = stats_old[5];; 680 stats_new[4] = stats_old[2];; 681 stats_new[5] = stats_old[3];; 682 stats_new[6] = stats_old[6];; 683 transposedHisto->PutStats(stats_new);; 684 ; 685 return transposedHisto; // ownership returned; 686}; 687 ; 688////////////////////////////////////////////////////////////////////////////////; 689/// check for ""silence"" option in configuration option string; 690 ; 691Bool_t TMVA::Tools::CheckForSilentOption( const TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:22906,Log,Log,22906,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"35 {; 736 delete[] fpTmpBinEdgeVector;; 737 fpTmpBinEdgeVector = nullptr;; 738 }; 739 ; 740 fpTmpBinEdgeVector = new double[ fDim ];; 741 }; 742 ; 743 void BinData::UnWrap( ); 744 {; 745 assert( fWrapped );; 746 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 747 kAsymError == fErrorType || kNoError == fErrorType );; 748 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 749 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 750 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 751 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 752 ; 753 assert( fData.empty() );; 754 assert( fDataPtr );; 755 ; 756 unsigned vectorPadding = FitData::VectorPadding(fNPoints);; 757 fData.resize(fNPoints + vectorPadding);; 758 std::copy( fDataPtr, fDataPtr + fNPoints, fData.begin() );; 759 fDataPtr = fData.empty() ? nullptr : &fData.front();; 760 ; 761 for ( unsigned int i=0; i < fDim; i++ ); 762 {; 763 assert( fCoordErrorsPtr[i] );; 764 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 765 }; 766 ; 767 if( kValueError == fErrorType || kCoordError == fErrorType ); 768 {; 769 assert( fDataError.empty() );; 770 assert( fDataErrorPtr );; 771 ; 772 fDataError.resize(fNPoints + vectorPadding);; 773 std::copy(fDataErrorPtr, fDataErrorPtr + fNPoints + vectorPadding, fDataError.begin());; 774 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 775 }; 776 ; 777 if ( kValueError == fErrorType ); 778 {; 779 for ( unsigned int i=0; i < fNPoints; i++ ); 780 {; 781 fDataError[i] = 1.0 / fDataError[i];; 782 }; 783 }; 784 ; 785 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 786 {; 787 fCoordErrors.resize( fDim );; 788 for( unsigned int i=0; i < fDim; i++ ); 789 {; 790 assert( fCoordErrorsPtr[i] );; 791 fCoordErrors[i].resize(fNPoints + vectorPadding);; 792 std::copy(fCoordErrorsPtr[i], fCoordErrorsPtr[i] + fNPoints + vectorPaddi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:23331,assert,assert,23331,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,['assert'],['assert']
Testability,"3522 }; 3523 ; 3524 //; 3525 // Now that we have our data member name, find our offset; 3526 // in our parent class.; 3527 //; 3528 // Note: Our data member name can have many dots in it; 3529 // if branches were elided between our parent branch; 3530 // and us by Unroll().; 3531 //; 3532 // FIXME: This may not work if our member name is ambiguous.; 3533 //; 3534 ; 3535 Int_t offset = 0;; 3536 if (dataName.Length()) {; 3537 // -- We have our data member name, do a lookup in the dictionary meta info of our parent class.; 3538 // Get our parent class.; 3539 TClass* pClass = nullptr;; 3540 // First check whether this sub-branch is part of the 'cache' (because the data member it; 3541 // represents is no longer in the current class layout.; 3542 TStreamerInfo *subInfo = subBranch->GetInfoImp();; 3543 //if (subInfo && subBranch->TestBit(kCache)) { // subInfo->GetElements()->At(subBranch->GetID())->TestBit(TStreamerElement::kCache)) {; 3544 if (subBranchElement->TestBit(TStreamerElement::kCache)) {; 3545 pClass = ((TStreamerElement*)subInfo->GetElements()->At(0))->GetClassPointer();; 3546 }; 3547 // FIXME: Do we need the other base class tests here?; 3548 if (!pClass) {; 3549 if (fType == 1) {; 3550 // -- Parent branch is a base class branch.; 3551 // FIXME: Is using branchElem here the right thing?; 3552 pClass = branchElem->GetClassPointer();; 3553 if (pClass->Property() & kIsAbstract) {; 3554 // the class is abstract, let see if the; 3555 ; 3556 TBranchElement *parent = (TBranchElement*)GetMother()->GetSubBranch(this);; 3557 if (parent && parent != this && !parent->GetClass()->IsLoaded() ) {; 3558 // Our parent's class is emulated and we represent an abstract class.; 3559 // and the target class has not been set explicitly.; 3560 TString target = pClass->GetName();; 3561 target += ""@@emulated"";; 3562 ; 3563 pClass = TClass::GetClass(target);; 3564 }; 3565 }; 3566 } else {; 3567 // -- Parent branch is *not* a base class branch.; 3568 // FIXME: This sometimes returns a nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:128431,Test,TestBit,128431,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,4,"['Test', 'test']","['TestBit', 'tests']"
Testability,3720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91460,Test,Test,91460,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,3726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:92814,Test,Test,92814,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"373 ; 1374 // loop over all canvases to make sure that only one pad is highlighted; 1375 {; 1376 TIter next(gROOT->GetListOfCanvases());; 1377 TCanvas *tc;; 1378 while ((tc = (TCanvas *)next())); 1379 tc->Update();; 1380 }; 1381 ; 1382 //if (pad->GetGLDevice() != -1 && fSelected); 1383 // fSelected->ExecuteEvent(event, px, py);; 1384 ; 1385 break; // don't want fPadSave->cd() to be executed at the end; 1386 ; 1387 case kButton2Motion:; 1388 //was empty!; 1389 case kButton2Up:; 1390 if (fSelected) {; 1391 gPad = fSelectedPad;; 1392 ; 1393 fSelected->ExecuteEvent(event, px, py);; 1394 RunAutoExec();; 1395 }; 1396 break;; 1397 ; 1398 case kButton2Double:; 1399 break;; 1400 ; 1401//*-*----------------------------------------------------------------------; 1402 ; 1403 case kButton3Down:; 1404 // popup context menu; 1405 pad = Pick(px, py, prevSelObj);; 1406 if (!pad) return;; 1407 ; 1408 if (!fDoubleBuffer) FeedbackMode(kFALSE);; 1409 ; 1410 if (fContextMenu && fSelected && !fSelected->TestBit(kNoContextMenu) &&; 1411 !pad->TestBit(kNoContextMenu) && !TestBit(kNoContextMenu)); 1412 fContextMenu->Popup(px, py, fSelected, this, pad);; 1413 ; 1414 break;; 1415 ; 1416 case kButton3Motion:; 1417 break;; 1418 ; 1419 case kButton3Up:; 1420 if (!fDoubleBuffer) FeedbackMode(kTRUE);; 1421 break;; 1422 ; 1423 case kButton3Double:; 1424 break;; 1425 ; 1426 case kKeyPress:; 1427 if (!fSelectedPad || !fSelected) return;; 1428 gPad = fSelectedPad; // don't use cd() because we won't draw in pad; 1429 // we will only use its coordinate system; 1430 fSelected->ExecuteEvent(event, px, py);; 1431 ; 1432 RunAutoExec();; 1433 ; 1434 break;; 1435 ; 1436 case kButton1Shift:; 1437 // Try to select; 1438 pad = Pick(px, py, prevSelObj);; 1439 ; 1440 if (!pad) return;; 1441 ; 1442 EnterLeave(prevSelPad, prevSelObj);; 1443 ; 1444 gPad = pad; // don't use cd() we will use the current; 1445 // canvas via the GetCanvas member and not via; 1446 // gPad->GetCanvas; 1447 if (fSelected) {; 1448 fSelected->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:44420,Test,TestBit,44420,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability,"373 for (size_t i = 0; i < ndata; ++i) {; 2374 if (fInfo->GetElement(i) == elt) {; 2375 if (elt->TestBit (TStreamerElement::kCache); 2376 && (i+1) < ndata; 2377 && s == fInfo->GetElement(i)->GetName()); 2378 {; 2379 // If the TStreamerElement we found is storing the information in the; 2380 // cache and is a repeater, we need to use the real one (the next one).; 2381 // (At least until the cache/repeat mechanism is properly handle by; 2382 // ReadLeaves).; 2383 // fID = i+1;; 2384 fID = i;; 2385 if (fType != 2) {; 2386 if (elt->TestBit(TStreamerElement::kRepeat)) {; 2387 fNewIDs.push_back(fID+1);; 2388 fNewIDs.back().fElement = fInfo->GetElement(i+1);; 2389 fNewIDs.back().fInfo = fInfo;; 2390 } else if (fInfo->GetElement(i+1)->TestBit(TStreamerElement::kWrite)) {; 2391 fNewIDs.push_back(fID+1);; 2392 fNewIDs.back().fElement = fInfo->GetElement(i+1);; 2393 fNewIDs.back().fInfo = fInfo;; 2394 }; 2395 }; 2396 } else {; 2397 fID = i;; 2398 }; 2399 if (elt->TestBit (TStreamerElement::kCache)) {; 2400 SetBit(TBranchElement::kCache);; 2401 }; 2402 break;; 2403 }; 2404 }; 2405 for (size_t i = fID+1+(fNewIDs.size()); i < ndata; ++i) {; 2406 TStreamerElement *nextel = fInfo->GetElement(i);; 2407 ; 2408 std::string ename = nextel->GetName();; 2409 if (ename[0] == '*'); 2410 ename = ename.substr(1);; 2411 ; 2412 while ((pos = ename.rfind('[')) != std::string::npos) {; 2413 ename = ename.substr(0, pos);; 2414 }; 2415 ; 2416 if (s != ename) {; 2417 // We moved on to the next set; 2418 break;; 2419 }; 2420 // Add all (and only) the Artificial Elements that follows this StreamerInfo.; 2421 // fprintf(stderr,""%s/%d[%zu] passing through %zu %s\n"",GetName(),fID,fIDs.size(),i,nextel->GetName());; 2422 if (fType==31||fType==41) {; 2423 // The nested objects are unfolded and their branch can not be used to; 2424 // execute StreamerElements of this StreamerInfo.; 2425 if ((nextel->GetType() == TStreamerInfo::kObject; 2426 || nextel->GetType() == TStreamerInfo::kAny); 2427 && nextel->GetCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:85818,Test,TestBit,85818,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,3730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:92928,Test,Test,92928,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\ "" << Endl;; 1406 logger << "" | | | | | | \\ V / ___ \\ "" << Endl;; 1407 logger << "" |_| |_| |_| \\_/_/ \\_\\ "" << Endl << Endl;; 1408 break;; 1409 ; 1410 case kOriginalWelcomeMsgColor:; 1411 logger << kINFO << """" << Color(""red""); 1412 << ""_______________________________________"" << Color(""reset"") << Endl;; 1413 logger << kINFO << """" << Color(""blue""); 1414 << Color(""red_bgd"") << Color(""bwhite"") << "" // "" << Color(""reset""); 1415 << Color(""white"") << Color(""blue_bgd""); 1416 << ""|\\ /|| \\ // /\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\ "" << Color(""reset"") << Endl;; 1417 logger << kINFO << """"<< Color(""blue""); 1418 << Color(""red_bgd"") << Color(""white"") << ""// "" << Color(""reset""); 1419 << Color(""white"") << Color(""blue_bgd""); 1420 << ""| \\/ || \\// /--\\\\\\\\\\\\\\\\\\\\\\\\ \\ \\ \\"" << Color(""reset"") << Endl;; 1421 break;; 1422 ; 1423 case kOriginalWelcomeMsgBW:; 1424",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:49582,log,logger,49582,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"375; : datasetreg LD : 0.461 2.22 19.6 17.6 | 1.985 1.979; : --------------------------------------------------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on training sample:; : (overtraining check); : --------------------------------------------------------------------------------------------------; : DataSet Name: MVA Method: <Bias> <Bias_T> RMS RMS_T | MutInf MutInf_T; : --------------------------------------------------------------------------------------------------; : datasetreg DNN_CPU : 0.0123 0.0292 1.43 1.12 | 3.293 3.302; : datasetreg BDTG : 0.0597 0.0107 0.566 0.293 | 3.441 3.466; : datasetreg KNN : -0.425 0.423 5.19 3.54 | 3.006 3.034; : datasetreg PDEFoam : 8.35e-07 0.106 8.04 6.57 | 2.488 2.579; : datasetreg LD :-1.03e-06 1.54 20.1 18.5 | 2.134 2.153; : --------------------------------------------------------------------------------------------------; : ; Dataset:datasetreg : Created tree 'TestTree' with 9000 events; : ; Dataset:datasetreg : Created tree 'TrainTree' with 1000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ==> Wrote root file: TMVAReg.root; ==> TMVARegression is done!; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TChain.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TObjString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/TMVARegGui.h""; ; ; using namespace TMVA;; ; void TMVARegression( TString myMethodList = """" ); {; // The explicit loading of the shared libTMVA is done in TMVAlogon.C, defined in .rootrc; // if you use your private .rootrc, or run from a different directory, please copy the; // corresponding lines from .rootrc; ; // methods to be processed can be given as an argument; use format:; //; // mylinux~> root -l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:134140,Test,TestTree,134140,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['TestTree']
Testability,"38 ; 539 The following statements create a ROOT file and store a histogram; 540 on the file. Because TH1 derives from TNamed, the key identifier on; 541 the file is the histogram name:; 542~~~ {.cpp}; 543 TFile f(""histos.root"", ""new"");; 544 TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; 545 h1.FillRandom(""gaus"", 10000);; 546 h1->Write();; 547~~~; 548 To read this histogram in another Root session, do:; 549~~~ {.cpp}; 550 TFile f(""histos.root"");; 551 TH1F *h = (TH1F*)f.Get(""hgaus"");; 552~~~; 553 One can save all histograms in memory to the file by:; 554~~~ {.cpp}; 555 file->Write();; 556~~~; 557 ; 558 ; 559\anchor misc; 560## Miscellaneous operations; 561 ; 562~~~ {.cpp}; 563 TH1::KolmogorovTest(): statistical test of compatibility in shape; 564 between two histograms; 565 TH1::Smooth() smooths the bin contents of a 1-d histogram; 566 TH1::Integral() returns the integral of bin contents in a given bin range; 567 TH1::GetMean(int axis) returns the mean value along axis; 568 TH1::GetStdDev(int axis) returns the sigma distribution along axis; 569 TH1::GetEntries() returns the number of entries; 570 TH1::Reset() resets the bin contents and errors of a histogram; 571~~~; 572 IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the; 573 histogram statistics are calculated. By default, if no range has been set, the; 574 returned values are the (unbinned) ones calculated at fill time. If a range has been; 575 set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN; 576 IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset the range.; 577 To ensure that the returned values are always those of the binned data stored in the; 578 histogram, call TH1::ResetStats. See TH1::GetStats.; 579*/; 580 ; 581TF1 *gF1=nullptr; //left for back compatibility (use TVirtualFitter::GetUserFunc instead); 582 ; 583Int_t TH1::fgBufferSize = 1000;; 584Bool_t TH1::fgAddDirectory = kTRUE;; 585Bool_t TH1::fgDefaultSumw2 = kFALSE;; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:24107,test,test,24107,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,38.5 4; : 1096 | 2.82435 2.85928 0.0200663 0.00175842 43696.9 5; : 1097 | 2.94319 2.67707 0.0201699 0.00175551 43444.3 6; : 1098 | 3.07322 3.0122 0.0200534 0.00175203 43712.7 7; : 1099 | 2.83008 3.95183 0.0205372 0.0017939 42681.9 8; : 1100 | 2.67822 3.34195 0.020666 0.00184085 42496.4 9; : 1101 | 2.97088 2.72336 0.0206136 0.0017901 42500 10; : 1102 Minimum Test error found - save the configuration ; : 1102 | 2.66188 2.52638 0.020367 0.00185502 43215.3 0; : 1103 | 3.01155 3.18843 0.0202364 0.00176536 43311 1; : 1104 | 2.71885 3.00051 0.0201103 0.00176305 43603.3 2; : 1105 Minimum Test error found - save the configuration ; : 1105 | 2.73591 2.50832 0.0201341 0.0018587 43774.7 0; : 1106 | 2.7002 2.7081 0.0203577 0.00176876 43036.3 1; : 1107 | 2.85017 3.38001 0.0201747 0.00176074 43445.3 2; : 1108 | 2.78494 2.55451 0.0203389 0.00176376 43068.3 3; : 1109 | 2.71632 3.12003 0.0200899 0.00175276 43627.4 4; : 1110 | 3.16531 2.9918 0.020346 0.00180026 43136.7 5; : 1111 Minimum Test error found - save the configuration ; : 1111 | 2.97087 2.45167 0.0201922 0.00182484 43555.6 0; : 1112 | 2.60355 2.50464 0.0200664 0.00176061 43702 1; : 1113 | 2.54376 2.96916 0.0200737 0.00178101 43733.3 2; : 1114 | 2.77186 2.89815 0.0200657 0.00175793 43697.4 3; : 1115 | 2.58652 2.73506 0.020068 0.00175912 43694.6 4; : 1116 Minimum Test error found - save the configuration ; : 1116 | 2.82496 2.31503 0.0201083 0.00181922 43742 0; : 1117 | 2.74168 2.90157 0.0200454 0.00175765 43745.2 1; : 1118 | 2.51176 4.00704 0.0201409 0.00176812 43542.7 2; : 1119 | 3.03618 2.55498 0.0202517 0.00178949 43331.7 3; : 1120 | 2.66116 2.61177 0.0204165 0.00176394 42889.5 4; : 1121 | 3.00965 2.56116 0.0204562 0.00180217 42886.2 5; : 1122 | 3.0625 3.75816 0.0204635 0.00176149 42776.2 6; : 1123 | 2.88666 2.6576 0.0204265 0.00178135 42906.6 7; : 1124 | 2.54231 2.73598 0.020225 0.00176346 43333.4 8; : 1125 | 2.44231 2.73459 0.0201498 0.00175906 43500.1 9; : 1126 | 2.45201 2.82465 0.0200726 0.00175651 43677.5 10; : 1127 | 2,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:120398,Test,Test,120398,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,39 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:84057,Test,Test,84057,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,39.5 5; : 1052 Minimum Test error found - save the configuration ; : 1052 | 2.87354 3.24293 0.0202139 0.00182119 43495.4 0; : 1053 | 2.96323 3.45692 0.0200573 0.00175839 43718.4 1; : 1054 | 2.84926 3.80103 0.0200558 0.00175409 43711.6 2; : 1055 | 2.95781 3.27091 0.020067 0.00175747 43693.1 3; : 1056 | 3.19444 5.21663 0.0200546 0.00175884 43725.9 4; : 1057 | 3.64244 3.58532 0.0204609 0.00177451 42811.8 5; : 1058 | 3.4344 3.25697 0.0201011 0.00178651 43681.1 6; : 1059 | 2.82841 3.35413 0.020208 0.00176662 43380.6 7; : 1060 | 2.98819 3.74969 0.0202318 0.00179746 43397.3 8; : 1061 | 3.26859 3.94266 0.0201482 0.00175781 43501 9; : 1062 Minimum Test error found - save the configuration ; : 1062 | 3.14929 3.19749 0.0201067 0.00181963 43746.8 0; : 1063 | 2.87068 3.26991 0.0200491 0.00176391 43751.2 1; : 1064 | 2.93768 3.71885 0.0200468 0.00176208 43752.3 2; : 1065 | 2.97083 3.36192 0.0201608 0.00179095 43549.7 3; : 1066 | 3.04197 3.49012 0.0203588 0.00177356 43045 4; : 1067 Minimum Test error found - save the configuration ; : 1067 | 3.05672 2.86026 0.0203982 0.00182711 43077.7 0; : 1068 | 3.10603 3.29637 0.020205 0.00184144 43564.6 1; : 1069 | 2.88449 4.01918 0.0203768 0.00179741 43058.4 2; : 1070 | 2.97807 3.34364 0.0200746 0.00174903 43654.8 3; : 1071 | 3.12106 3.50221 0.0203054 0.0017782 43179.8 4; : 1072 | 2.87393 2.91962 0.020149 0.001768 43523.2 5; : 1073 | 2.90826 3.29161 0.0202848 0.00180763 43296.8 6; : 1074 | 3.06053 3.26664 0.0201588 0.00175733 43474.8 7; : 1075 Minimum Test error found - save the configuration ; : 1075 | 2.97935 2.76485 0.0202008 0.00187279 43649.1 0; : 1076 | 2.74949 3.00321 0.0203478 0.00181324 43162.6 1; : 1077 | 2.76284 3.75591 0.0207943 0.00180912 42138.1 2; : 1078 Minimum Test error found - save the configuration ; : 1078 | 3.00913 2.73577 0.0203661 0.0018517 43209.6 0; : 1079 | 2.90364 3.01716 0.0202612 0.00175591 43230.9 1; : 1080 | 2.84249 3.41706 0.0201644 0.00176658 43483.3 2; : 1081 | 2.8573 3.42383 0.0204284 0.00175777 42848.1 3; :,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:117507,Test,Test,117507,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"3914 {; 3915 Long_t increment = proxy.GetIncrement();; 3916 sequence->fLoopConfig = new TVectorLoopConfig(&proxy, increment, /* read */ kTRUE);; 3917 // sequence->fLoopConfig = new TAssocLoopConfig(proxy);; 3918 } else {; 3919 sequence->fLoopConfig = new TGenericLoopConfig(&proxy, /* read */ kTRUE);; 3920 }; 3921 for (UInt_t i = 0; i < ndata; ++i) {; 3922 TStreamerElement *element = (TStreamerElement*) info->GetElements()->At(i);; 3923 if (!element) {; 3924 break;; 3925 }; 3926 if (element->GetType() < 0) {; 3927 // -- Skip an ignored TObject base class.; 3928 // Note: The only allowed negative value here is -1, and signifies that Build() has found a TObject; 3929 // base class and TClass::IgnoreTObjectStreamer() was called. In this case the compiled version of the; 3930 // elements omits the TObject base class element, which has to be compensated for by TTree::Bronch(); 3931 // when it is making branches for a split object.; 3932 continue;; 3933 }; 3934 if (element->TestBit(TStreamerElement::kWrite)) {; 3935 // Skip element that only for writing.; 3936 continue;; 3937 }; 3938 TStreamerBase *baseEl = dynamic_cast<TStreamerBase*>(element);; 3939 if (baseEl) {; 3940 if (!baseEl->TestBit(TStreamerElement::kWarned) && baseEl->GetErrorMessage()[0]) {; 3941 // There was a problem with the checksum, the user likely did not; 3942 // increment the version number of the derived class when the; 3943 // base class changed. Since we will be member wise streaming; 3944 // this class, let's warn the user that something is wrong.; 3945 ::Warning(""CreateReadMemberWiseActions"",""%s"",; 3946 baseEl->GetErrorMessage());; 3947 baseEl->SetBit(TStreamerElement::kWarned);; 3948 }; 3949 }; 3950 ; 3951 TStreamerInfo::TCompInfo_t *compinfo = sinfo->fCompFull[i];; 3952 ; 3953 Int_t oldType = element->GetType();; 3954 Int_t newType = element->GetNewType();; 3955 ; 3956 Int_t offset = element->GetOffset();; 3957 if (newType != oldType) {; 3958 if (newType > 0) {; 3959 if (oldType != TVirtualStreame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:183210,Test,TestBit,183210,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Test'],['TestBit']
Testability,"398 // points to permit zooming on the full range.; 1399 rwxmin = uxmin;; 1400 rwxmax = uxmax;; 1401 npt = 100;; 1402 if (theNpoints > npt) npt = theNpoints;; 1403 TH1F *h = new TH1F(TString::Format(""%s_h"",GetName()),GetTitle(),npt,rwxmin,rwxmax);; 1404 theGraph->SetHistogram(h);; 1405 if (!theGraph->GetHistogram()) return;; 1406 theGraph->GetHistogram()->SetMinimum(rwymin);; 1407 theGraph->GetHistogram()->SetMaximum(rwymax);; 1408 theGraph->GetHistogram()->GetYaxis()->SetLimits(rwymin,rwymax);; 1409 theGraph->GetHistogram()->SetBit(TH1::kNoStats);; 1410 theGraph->GetHistogram()->SetDirectory(nullptr);; 1411 theGraph->GetHistogram()->Sumw2(kFALSE);; 1412 theGraph->GetHistogram()->Paint(chopth); // Draw histogram axis, title and grid; 1413 } else {; 1414 if (gPad->GetLogy()) {; 1415 theGraph->GetHistogram()->SetMinimum(rwymin);; 1416 theGraph->GetHistogram()->SetMaximum(rwymax);; 1417 theGraph->GetHistogram()->GetYaxis()->SetLimits(rwymin,rwymax);; 1418 }; 1419 theGraph->GetHistogram()->Sumw2(kFALSE);; 1420 theGraph->GetHistogram()->Paint(chopth); // Draw histogram axis, title and grid; 1421 }; 1422 }; 1423 ; 1424 // Set Clipping option; 1425 gPad->SetBit(TGraph::kClipFrame, theGraph->TestBit(TGraph::kClipFrame));; 1426 ; 1427 rwxmin = gPad->GetUxmin();; 1428 rwxmax = gPad->GetUxmax();; 1429 rwymin = gPad->GetUymin();; 1430 rwymax = gPad->GetUymax();; 1431 uxmin = gPad->PadtoX(rwxmin);; 1432 uxmax = gPad->PadtoX(rwxmax);; 1433 if (theGraph->GetHistogram() && !theGraph->InheritsFrom(""TGraphPolar"")) {; 1434 maximum = theGraph->GetHistogram()->GetMaximum();; 1435 minimum = theGraph->GetHistogram()->GetMinimum();; 1436 } else {; 1437 maximum = gPad->PadtoY(rwymax);; 1438 minimum = gPad->PadtoY(rwymin);; 1439 }; 1440 ; 1441 // Set attributes; 1442 theGraph->TAttLine::Modify();; 1443 theGraph->TAttFill::Modify();; 1444 theGraph->TAttMarker::Modify();; 1445 ; 1446 // Draw the graph with a polyline or a fill area; 1447 gxwork.resize(2*npoints+10);; 1448 gywork.resize(2*npoint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:52822,Test,TestBit,52822,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability,"3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod1(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m). Profile Likelihood function for MODEL 1:; Poisson background/ Binomial Efficiency. void ProfLikeMod1(Double_t mu, Double_t& b, Double_t& e, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m). Helper for calculation of estimates of efficiency and background for model 1. Double_t LikeGradMod1(Double_t e, Double_t mu, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m); gradient model likelihood. Double_t EvalLikeMod2(Double_t mu, Int_t x, Int_t y, Double_t em, Double_t sde, Double_t tau, Int_t what); Calculates the Profile Likelihood for MODEL 2:; Poisson background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod2(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t y, Double_t em, Double_t tau, Double_t v); Profile Likelihood function for MODEL 2:; Poisson background/Gauss Efficiency. Double_t EvalLikeMod3(Double_t mu, Int_t x, Double_t bm, Double_t em, Double_t sde, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 3:; Gauss background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod3(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t bm, Double_t em, Double_t u, Double_t v); Profile Likelihood function for MODEL 3:; Gauss background/Gauss Efficiency. Double_t EvalLikeMod4(Double_t mu, Int_t x, Int_t y, Double_t tau, Int_t what); Calculates the Profile L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRolke.html:23140,Test,Test,23140,root/html528/TRolke.html,https://root.cern,https://root.cern/root/html528/TRolke.html,6,['Test'],['Test']
Testability,"3; , ;   kPerfStatsThreadSlot = 24; , kMaxThreadSlot = 25. };  . Functions; class _NAME2_ (_R__UNIQUE_(_NAME2_(R__dummyholder, default)), _c);  ; class _NAME2_ (_R__UNIQUE_(R__dummyStreamer), _c);  ; class _NAME2_ (_R__UNIQUE_(R__dummyVersionNumber), _c);  ; void AddClass (const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits);  Global function called by the ctor of a class's init class (see the ClassImp macro). ;  ; void AddClass (const char *cname, Version_t id, DictFuncPtr_t dict, Int_t pragmabits);  ; ROOT::TClassAlt * AddClassAlternate (const char *normName, const char *alternate);  Global function called by GenerateInitInstance. ;  ; ROOT::Experimental::RLogChannel & BrowsableLog ();  Log channel for Browsable diagnostics. ;  ; ROOT::Experimental::RLogChannel & BrowserLog ();  Log channel for Browser diagnostics. ;  ; void CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void Class_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:12520,Test,TestBit,12520,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,1,['Test'],['TestBit']
Testability,"3; , ;   kPerfStatsThreadSlot = 24; , kMaxThreadSlot = 25. };  . Functions; class _NAME2_ (_R__UNIQUE_(_NAME2_(R__dummyholder, default)), _c);  ; class _NAME2_ (_R__UNIQUE_(R__dummyStreamer), _c);  ; class _NAME2_ (_R__UNIQUE_(R__dummyVersionNumber), _c);  ; void AddClass (const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits);  Global function called by the ctor of a class's init class (see the ClassImp macro). ;  ; void AddClass (const char *cname, Version_t id, DictFuncPtr_t dict, Int_t pragmabits);  ; ROOT::TClassAlt * AddClassAlternate (const char *normName, const char *alternate);  Global function called by GenerateInitInstance. ;  ; ROOT::Experimental::RLogChannel & BrowsableLog ();  Log channel for Browsable diagnostics. ;  ; ROOT::Experimental::RLogChannel & BrowserLog ();  Log channel for Browser diagnostics. ;  ; void CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void Class_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImpli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:12562,Test,TestBit,12562,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,2,['Test'],['TestBit']
Testability,3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test erro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:97389,Test,Test,97389,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"3; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; Printfvoid Printf(const char *fmt,...)Formats a string in a circular formatting buffer and prints the string.Definition TString.cxx:2503; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TVectorD.h; TVectorF.h; TVirtualFFT.h; TVirtualFitter.h; TVirtualHistPainter.h; R__LOCKGUARD#define R__LOCKGUARD(mutex)Definition TVirtualMutex.h:95; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualPaveStats.h; R__WRITE_LOCKGUARD#define R__WRITE_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:157; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Math::GoFTest::AndersonDarling2SamplesTestvoid AndersonDarling2SamplesTest(Double_t &pvalue, Double_t &testStat) constPerforms the Anderson-Darling 2-Sample Test.Definition GoFTest.cxx:646; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TArrayCArray of chars or bytes (8 bits per element).Definition TArrayC.h:27; TArrayC::fArrayChar_t * fArrayDefinition TArrayC.h:30; TArrayC::Resetvoid Reset(Char_t val=0)Definition TArrayC.h:47; TArrayC::Setvoid Set(Int_t n) overrideSet size of this array to n chars.Definition TArrayC.cxx:105; TArrayDArray of doubles (64 bits per element).Definition TArrayD.h:27; TArrayD::GetAtDouble_t GetAt(Int_t i) const overrideDefinition TArrayD.h:45; TArrayD::fArrayDouble_t * fArrayDefinition TArrayD.h:30; TArrayD::Streamervoid Streamer(TBuffer &) overrideStream a TArrayD object.Definition TArrayD.cxx:149; TArrayD::Copyvoid Copy(TArrayD &array) constDefinition TArrayD.h:42; TArrayD::Setvoid Set(Int_t n) overrideSet size of this array to n doubles.Definition TArrayD.cxx:106; TArrayD::GetArrayconst Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:414017,test,testStat,414017,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,"['Test', 'test']","['Test', 'testStat']"
Testability,"3D; TPoints 2-D graphics point; TPoints3D Defines the abstract array of 3D points; TPoints3DABC A 3-D Points; TPointsArray3D A 3-D PolyLine; TPolyLine A PolyLine; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree dra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:115559,benchmark,benchmarks,115559,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,5,['benchmark'],['benchmarks']
Testability,"3}; 114 ; 115 ; 116 ; 117/* left tail of incomplete gamma function:; 118 *; 119 * inf. k; 120 * a -x - x; 121 * x e > ----------; 122 * - -; 123 * k=0 | (a+k+1); 124 *; 125 */; 126 ; 127double igam( double a, double x ); 128{; 129 double ans, ax, c, r;; 130 ; 131 // LM: for negative values returns 1.0 instead of zero; 132 // This is correct if a is a negative integer since Gamma(-n) = +/- inf; 133 if (a <= 0) return 1.0;; 134 ; 135 if (x <= 0) return 0.0;; 136 ; 137 if( (x > 1.0) && (x > a ) ); 138 return( 1.0 - igamc(a,x) );; 139 ; 140/* Compute x**a * exp(-x) / gamma(a) */; 141 ax = a * std::log(x) - x - lgam(a);; 142 if( ax < -kMAXLOG ); 143 return( 0.0 );; 144 ; 145 ax = std::exp(ax);; 146 ; 147/* power series */; 148 r = a;; 149 c = 1.0;; 150 ans = 1.0;; 151 ; 152 do; 153 {; 154 r += 1.0;; 155 c *= x/r;; 156 ans += c;; 157 }; 158 while( c/ans > kMACHEP );; 159 ; 160 return( ans * ax/a );; 161}; 162 ; 163/*---------------------------------------------------------------------------*/; 164 ; 165/* Logarithm of gamma function */; 166/* A[]: Stirling's formula expansion of log gamma; 167 * B[], C[]: log gamma function between 2 and 3; 168 */; 169 ; 170static double A[] = {; 171 8.11614167470508450300E-4,; 172 -5.95061904284301438324E-4,; 173 7.93650340457716943945E-4,; 174 -2.77777777730099687205E-3,; 175 8.33333333333331927722E-2; 176};; 177 ; 178static double B[] = {; 179 -1.37825152569120859100E3,; 180 -3.88016315134637840924E4,; 181 -3.31612992738871184744E5,; 182 -1.16237097492762307383E6,; 183 -1.72173700820839662146E6,; 184 -8.53555664245765465627E5; 185};; 186 ; 187static double C[] = {; 188/* 1.00000000000000000000E0, */; 189 -3.51815701436523470549E2,; 190 -1.70642106651881159223E4,; 191 -2.20528590553854454839E5,; 192 -1.13933444367982507207E6,; 193 -2.53252307177582951285E6,; 194 -2.01889141433532773231E6; 195};; 196 ; 197double lgam( double x ); 198{; 199 double p, q, u, w, z;; 200 int i;; 201 ; 202 int sgngam = 1;; 203 ; 204 if (x >= std::numeric_limits",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:3387,Log,Logarithm,3387,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,3,"['Log', 'log']","['Logarithm', 'log']"
Testability,"4 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.868652; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.659892 0.620582 0.589558 0.0469541 20523.3 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.604286 0.594787 0.586926 0.0471912 20632.4 0; : 3 | 0.58117 0.603906 0.587335 0.047007 20609.7 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.57382 0.588714 0.592175 0.0469679 20425.3 0; : 5 | 0.569519 0.59535 0.590168 0.0468081 20494.7 1; : 6 | 0.567869 0.590023 0.589038 0.0469022 20541 2; : 7 Minimum Test error found - save the configuration ; : 7 | 0.561012 0.586993 0.590467 0.0471223 20495.3 0; : 8 | 0.559195 0.590522 0.590271 0.0471869 20505.1 1; : 9 | 0.558998 0.588766 0.598449 0.0469787 20193.3 2; : 10 | 0.555383 0.590075 0.591595 0.0470733 20451 3; : 11 Minimum Test error found - save the configuration ; : 11 | 0.555591 0.582449 0.595129 0.047292 20327.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.550993 0.581236 0.592181 0.0472746 20436.5 0; : 13 | 0.548186 0.58351 0.592876 0.0471057 20404.2 1; : 14 | 0.547427 0.581875 0.592374 0.0471592 20425 2; : 15 Minimum Test error found - save the configuratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:24366,Test,Test,24366,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Test'],['Test']
Testability,"4 // Remove trailing blanks in object name; 2095 Int_t nch = strlen(oname);; 2096 char *newName = nullptr;; 2097 if (nch && oname[nch-1] == ' ') {; 2098 newName = new char[nch+1];; 2099 strlcpy(newName,oname,nch+1);; 2100 for (Int_t i=0;i<nch;i++) {; 2101 if (newName[nch-i-1] != ' ') break;; 2102 newName[nch-i-1] = 0;; 2103 }; 2104 oname = newName;; 2105 }; 2106 ; 2107 if (opt.Contains(""overwrite"")) {; 2108 //One must use GetKey. FindObject would return the lowest cycle of the key!; 2109 //key = (TKey*)gDirectory->GetListOfKeys()->FindObject(oname);; 2110 key = GetKey(oname);; 2111 if (key) {; 2112 key->Delete();; 2113 delete key;; 2114 }; 2115 }; 2116 if (opt.Contains(""writedelete"")) {; 2117 oldkey = GetKey(oname);; 2118 }; 2119 key = fFile->CreateKey(this, obj, cl, oname, bsize);; 2120 if (newName) delete [] newName;; 2121 ; 2122 if (!key->GetSeekKey()) {; 2123 fKeys->Remove(key);; 2124 delete key;; 2125 return 0;; 2126 }; 2127 fFile->SumBuffer(key->GetObjlen());; 2128 Int_t nbytes = key->WriteFile(0);; 2129 if (fFile->TestBit(TFile::kWriteError)) return 0;; 2130 ; 2131 if (oldkey) {; 2132 oldkey->Delete();; 2133 delete oldkey;; 2134 }; 2135 ; 2136 return nbytes;; 2137}; 2138 ; 2139////////////////////////////////////////////////////////////////////////////////; 2140/// Overwrite the Directory header record.; 2141 ; 2142void TDirectoryFile::WriteDirHeader(); 2143{; 2144 TFile* f = GetFile();; 2145 if (!f) return;; 2146 ; 2147 if (!f->IsBinary()) {; 2148 fDatimeM.Set();; 2149 f->DirWriteHeader(this);; 2150 return;; 2151 }; 2152 ; 2153 Int_t nbytes = TDirectoryFile::Sizeof(); //Warning ! TFile has a Sizeof(); 2154 char *header = new char[nbytes];; 2155 char *buffer = header;; 2156 fDatimeM.Set();; 2157 TDirectoryFile::FillBuffer(buffer);; 2158 Long64_t pointer = fSeekDir + fNbytesName; // do not overwrite the name/title part; 2159 fModified = kFALSE;; 2160 f->Seek(pointer);; 2161 f->WriteBuffer(header, nbytes);; 2162 if (f->MustFlush()) f->Flush();; 2163 delete [] h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:72742,Test,TestBit,72742,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['Test'],['TestBit']
Testability,"4 ; 145//-----------------------------------------------------------------------------; 146bool CPyCppyy::Scope_Check(PyObject* pyobject); 147{; 148// Test if the given object is of a CPPScope derived type.; 149 if (!Initialize()); 150 return false;; 151 ; 152 return CPPScope_Check(pyobject);; 153}; 154 ; 155//-----------------------------------------------------------------------------; 156bool CPyCppyy::Scope_CheckExact(PyObject* pyobject); 157{; 158// Test if the given object is of a CPPScope type.; 159 if (!Initialize()); 160 return false;; 161 ; 162 return CPPScope_CheckExact(pyobject);; 163}; 164 ; 165//-----------------------------------------------------------------------------; 166bool CPyCppyy::Instance_Check(PyObject* pyobject); 167{; 168// Test if the given pyobject is of CPPInstance derived type.; 169 if (!Initialize()); 170 return false;; 171 ; 172// detailed walk through inheritance hierarchy; 173 return CPPInstance_Check(pyobject);; 174}; 175 ; 176//-----------------------------------------------------------------------------; 177bool CPyCppyy::Instance_CheckExact(PyObject* pyobject); 178{; 179// Test if the given pyobject is of CPPInstance type.; 180 if (!Initialize()); 181 return false;; 182 ; 183// direct pointer comparison of type member; 184 return CPPInstance_CheckExact(pyobject);; 185}; 186 ; 187//-----------------------------------------------------------------------------; 188bool CPyCppyy::Sequence_Check(PyObject* pyobject); 189{; 190// Extends on PySequence_Check() to determine whether an object can be iterated; 191// over (technically, all objects can b/c of C++ pointer arithmetic, hence this; 192// check isn't 100% accurate, but neither is PySequence_Check()).; 193 ; 194// Note: simply having the iterator protocol does not constitute a sequence, bc; 195// PySequence_GetItem() would fail.; 196 ; 197// default to PySequence_Check() if called with a non-C++ object; 198 if (!CPPInstance_Check(pyobject)); 199 return (bool)PySequence_Check(pyo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:5916,Test,Test,5916,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['Test'],['Test']
Testability,"4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooPlot*statOn(RooPlot* frame, const char* what, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.15, Double_t xmax = 0.65, Double_t ymax = 0.85, const char* cutSpec = 0, const char* cutRange = 0, const RooCmdArg* formatCmd = 0); RooAbsDataStore*store(); const RooAbsDataStore*store() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual Double_tsumEntries(const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Roo1DTable*table(const RooArgSet& catSet, const char* cuts = """", const char* opts = """") const; virtual Roo1DTable*table(const RooAbsCategory& cat, const char* cuts = """", const char* opts = """") const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const TTree*tree() const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tvalid() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tweight() const; virtual Double_tweightError(RooAbsData::ErrorType etype = Poisson) const; virtual voidweightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Bool_tallClientsCached(RooAbsArg*, const RooArgSet&); virtual voidattachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); virtual RooAbsData*cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Double_tcorrcov(RooRealVar& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:10820,Test,TestBit,10820,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"4 fSize = sizeof(void*);; 355 } else {; 356 fSize = sizeof(std::string);; 357 }; 358 }; 359 else {; 360 // In the case where we have an emulated class,; 361 // if the class is nested (in a class or a namespace),; 362 // calling G__TypeInfo ti(inside.c_str());; 363 // might fail because CINT does not known the nesting; 364 // scope, so let's first look for an emulated class:; 365 ; 366 fType = TClass::GetClass(intype.c_str(),kTRUE,silent, hint_pair_offset, hint_pair_size);; 367 ; 368 if (fType) {; 369 if (isPointer) {; 370 fCase |= kIsPointer;; 371 fSize = sizeof(void*);; 372 if (fType == TString::Class()) {; 373 fCase |= kBIT_ISTSTRING;; 374 }; 375 }; 376 fCase |= kIsClass;; 377 fCtor = fType->GetNew();; 378 fDtor = fType->GetDestructor();; 379 fDelete = fType->GetDelete();; 380 } else {; 381 R__LOCKGUARD(gInterpreterMutex);; 382 ; 383 // Try to avoid autoparsing.; 384 ; 385 THashTable *typeTable = dynamic_cast<THashTable*>( gROOT->GetListOfTypes() );; 386 assert(typeTable && ""The type of the list of type has changed"");; 387 ; 388 TDataType *fundType = (TDataType *)typeTable->THashTable::FindObject( intype.c_str() );; 389 if (fundType && fundType->GetType() < 0x17 && fundType->GetType() > 0) {; 390 fKind = (EDataType)fundType->GetType();; 391 // R__ASSERT((fKind>0 && fKind<0x17) || (fKind==-1&&(prop&kIsPointer)) );; 392 ; 393 fCase |= kIsFundamental;; 394 if (isPointer) {; 395 fCase |= kIsPointer;; 396 fSize = sizeof(void*);; 397 } else {; 398 fSize = fundType->Size();; 399 }; 400 } else if (TEnum::GetEnum( intype.c_str(), TEnum::kNone) ) {; 401 // This is a known enum.; 402 fCase = kIsEnum;; 403 fSize = sizeof(Int_t);; 404 fKind = kInt_t;; 405 if (isPointer) {; 406 fCase |= kIsPointer;; 407 fSize = sizeof(void*);; 408 }; 409 } else {; 410 // This fallback solution should be hardly used ...; 411 // One of the common use case is to 'discover' that this is a; 412 // collection for the content of which we do not have a dictionary; 413 // which can happen at least in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:11348,assert,assert,11348,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['assert'],['assert']
Testability,"4 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10516,Test,TestDelta,10516,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['Test'],['TestDelta']
Testability,"4 for(UInt_t id = 0; id < element_ids.size(); ++id) {; 4295 if ( element_ids[id] < 0 ) {; 4296 TStreamerInfoActions::ActionContainer_t::iterator end = fActions.end();; 4297 for(TStreamerInfoActions::ActionContainer_t::iterator iter = fActions.begin();; 4298 iter != end;; 4299 ++iter); 4300 {; 4301 TConfiguration *conf = iter->fConfiguration->Copy();; 4302 if (!iter->fConfiguration->fInfo->GetElements()->At(iter->fConfiguration->fElemId)->TestBit(TStreamerElement::kCache)); 4303 conf->AddToOffset(offset);; 4304 sequence->AddAction( iter->fAction, conf );; 4305 }; 4306 } else {; 4307 TStreamerInfoActions::ActionContainer_t::iterator end = fActions.end();; 4308 for(TStreamerInfoActions::ActionContainer_t::iterator iter = fActions.begin();; 4309 iter != end;; 4310 ++iter) {; 4311 if ( iter->fConfiguration->fElemId == (UInt_t)element_ids[id] ) {; 4312 TConfiguration *conf = iter->fConfiguration->Copy();; 4313 if (!iter->fConfiguration->fInfo->GetElements()->At(iter->fConfiguration->fElemId)->TestBit(TStreamerElement::kCache)); 4314 conf->AddToOffset(offset);; 4315 sequence->AddAction( iter->fAction, conf );; 4316 }; 4317 }; 4318 }; 4319 }; 4320 return sequence;; 4321}; 4322 ; 4323#if !defined(R__WIN32) && !defined(_AIX); 4324 ; 4325#include <dlfcn.h>; 4326 ; 4327#endif; 4328 ; 4329typedef void (*voidfunc)();; 4330static const char *R__GetSymbolName(voidfunc func); 4331{; 4332#if defined(R__WIN32) || defined(__CYGWIN__) || defined(_AIX); 4333 return ""not available on this platform"";; 4334#if 0; 4335 MEMORY_BASIC_INFORMATION mbi;; 4336 if (!VirtualQuery (func, &mbi, sizeof (mbi))); 4337 {; 4338 return 0;; 4339 }; 4340 ; 4341 HMODULE hMod = (HMODULE) mbi.AllocationBase;; 4342 static char moduleName[MAX_PATH];; 4343 ; 4344 if (!GetModuleFileNameA (hMod, moduleName, sizeof (moduleName))); 4345 {; 4346 return 0;; 4347 }; 4348 return moduleName;; 4349#endif; 4350#else; 4351 Dl_info info;; 4352 if (dladdr((void*)func,&info)==0) {; 4353 // Not in a known share library, let's give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:203442,Test,TestBit,203442,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Test'],['TestBit']
Testability,4 sec ; : Dataset[dataset] : Evaluation of LD on testing sample; Factory : Test method: FDA_GA for Classification performance; : ; FDA_GA : [dataset] : Evaluation of FDA_GA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00327 sec ; Factory : Test method: MLPBNN for Classification performance; : ; MLPBNN : [dataset] : Evaluation of MLPBNN on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0193 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.333 sec ; Factory : Test method: SVM for Classification performance; : ; SVM : [dataset] : Evaluation of SVM on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.287 sec ; Factory : Test method: BDT for Classification performance; : ; BDT : [dataset] : Evaluation of BDT on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.571 sec ; Factory : Test method: RuleFit for Classification performance; : ; RuleFit : [dataset] : Evaluation of RuleFit on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0137 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: Cuts; : ; <WARNING> : You have asked for histogram MVA_EFF_BvsS which does not seem to exist in *Results* .. better don't use it ; <WARNING> : You have asked for histogram EFF_BVSS_TR which does not seem to exist in *Results* .. be,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:67897,test,testing,67897,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['testing']
Testability,"4 }; 515 }; 516 ; 517 for (UInt_t ivar=0; ivar<nvar; ivar++) {; 518 dsi.GetVariableInfo(ivar).SetMin(min[ivar]);; 519 dsi.GetVariableInfo(ivar).SetMax(max[ivar]);; 520 if( TMath::Abs(max[ivar]-min[ivar]) <= FLT_MIN ); 521 Log() << kWARNING << Form(""Dataset[%s] : "",dsi.GetName()) << ""Variable "" << dsi.GetVariableInfo(ivar).GetExpression().Data() << "" is constant. Please remove the variable."" << Endl;; 522 }; 523 for (UInt_t ivar=0; ivar<ntgts; ivar++) {; 524 dsi.GetTargetInfo(ivar).SetMin(tgmin[ivar]);; 525 dsi.GetTargetInfo(ivar).SetMax(tgmax[ivar]);; 526 if( TMath::Abs(tgmax[ivar]-tgmin[ivar]) <= FLT_MIN ); 527 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName()) << ""Target "" << dsi.GetTargetInfo(ivar).GetExpression().Data() << "" is constant. Please remove the variable."" << Endl;; 528 }; 529 for (UInt_t ivar=0; ivar<nvis; ivar++) {; 530 dsi.GetSpectatorInfo(ivar).SetMin(vmin[ivar]);; 531 dsi.GetSpectatorInfo(ivar).SetMax(vmax[ivar]);; 532 // if( TMath::Abs(vmax[ivar]-vmin[ivar]) <= FLT_MIN ); 533 // Log() << kWARNING << ""Spectator variable "" << dsi.GetSpectatorInfo(ivar).GetExpression().Data() << "" is constant."" << Endl;; 534 }; 535 delete [] min;; 536 delete [] max;; 537 delete [] tgmin;; 538 delete [] tgmax;; 539 delete [] vmin;; 540 delete [] vmax;; 541}; 542 ; 543////////////////////////////////////////////////////////////////////////////////; 544/// computes correlation matrix for variables ""theVars"" in tree;; 545/// ""theType"" defines the required event ""type""; 546/// (""type"" variable must be present in tree); 547 ; 548TMatrixD* TMVA::DataSetFactory::CalcCorrelationMatrix( DataSet* ds, const UInt_t classNumber ); 549{; 550 // first compute variance-covariance; 551 TMatrixD* mat = CalcCovarianceMatrix( ds, classNumber );; 552 ; 553 // now the correlation; 554 UInt_t nvar = ds->GetNVariables(), ivar, jvar;; 555 ; 556 for (ivar=0; ivar<nvar; ivar++) {; 557 for (jvar=0; jvar<nvar; jvar++) {; 558 if (ivar != jvar) {; 559 Double_t d = (*mat)(ivar, ivar)*(*mat)(jva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:22172,Log,Log,22172,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,4.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80209,Test,Test,80209,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,4.4 0; : 668 | 49.9429 40.0919 0.0200598 0.00176937 43738.7 1; : 669 Minimum Test error found - save the configuration ; : 669 | 49.7924 39.9525 0.02013 0.00182828 43711.6 0; : 670 Minimum Test error found - save the configuration ; : 670 | 48.9056 38.9634 0.0204345 0.00193878 43253.1 0; : 671 Minimum Test error found - save the configuration ; : 671 | 47.9479 38.4436 0.0207053 0.00182816 42379.4 0; : 672 | 47.2853 39.0804 0.0202162 0.00175216 43327.4 1; : 673 Minimum Test error found - save the configuration ; : 673 | 47.0153 38.3207 0.0201285 0.00181671 43687.7 0; : 674 Minimum Test error found - save the configuration ; : 674 | 46.5986 38.0788 0.0201224 0.00182147 43713.7 0; : 675 Minimum Test error found - save the configuration ; : 675 | 45.6663 37.2199 0.020138 0.00182969 43696.1 0; : 676 Minimum Test error found - save the configuration ; : 676 | 44.8146 36.9047 0.0201419 0.00182761 43681.7 0; : 677 | 44.1854 37.155 0.0200983 0.0017637 43633.4 1; : 678 Minimum Test error found - save the configuration ; : 678 | 43.7163 36.54 0.0202108 0.00183597 43537.9 0; : 679 Minimum Test error found - save the configuration ; : 679 | 43.1003 36.3421 0.0201203 0.00181258 43697.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.34,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:87118,Test,Test,87118,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"40 });; 341 m_prevGradients.clear ();; 342 }; 343 else; 344 {; 345 auto itW = std::begin (weights);; 346 std::for_each (std::begin (m_localGradients), std::end (m_localGradients), [&itW](double& g); 347 {; 348 *itW += g;; 349 ++itW;; 350 });; 351 }; 352 ; 353 ++currentRepetition;; 354 }; 355 return E;; 356 }; 357 ; 358 ; 359 ; 360 ; 361 ; 362 ; 363 ; 364 ; 365 ; 366 ; 367 ; 368 ; 369 ; 370 ; 371 ; 372 ; 373 ; 374 ; 375 ; 376 ; 377/*! \brief sum of squares error function; 378 *; 379 *; 380 */; 381 template <typename ItOutput, typename ItTruth, typename ItDelta, typename InvFnc>; 382 double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight); 383 {; 384 double errorSum = 0.0;; 385 ; 386 // output - truth; 387 ItTruth itTruth = itTruthBegin;; 388 bool hasDeltas = (itDelta != itDeltaEnd);; 389 for (ItOutput itOutput = itOutputBegin; itOutput != itOutputEnd; ++itOutput, ++itTruth); 390 {; 391// assert (itTruth != itTruthEnd);; 392 double output = (*itOutput);; 393 double error = output - (*itTruth);; 394 if (hasDeltas); 395 {; 396 (*itDelta) = (*invFnc.get ()) (output) * error * patternWeight;; 397 ++itDelta;; 398 }; 399 errorSum += error*error * patternWeight;; 400 }; 401 ; 402 return 0.5*errorSum;; 403 }; 404 ; 405 ; 406 ; 407/*! \brief cross entropy error function; 408 *; 409 *; 410 */; 411 template <typename ItProbability, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 412 double crossEntropy (ItProbability itProbabilityBegin, ItProbability itProbabilityEnd, ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 413 {; 414 bool hasDeltas = (itDelta != itDeltaEnd);; 415 ; 416 double errorSum = 0.0;; 417 for (ItProbability itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability); 418 {; 419 double probability = *itProbabil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:11429,assert,assert,11429,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,"400 }; 401 ; 402 vect.resize(16);; 403 vect[0] = rotate[0];; 404 vect[4] = rotate[1];; 405 vect[8] = rotate[2];; 406 vect[12] = trans[0];; 407 vect[1] = rotate[3];; 408 vect[5] = rotate[4];; 409 vect[9] = rotate[5];; 410 vect[13] = trans[1];; 411 vect[2] = rotate[6];; 412 vect[6] = rotate[7];; 413 vect[10] = rotate[8];; 414 vect[14] = trans[2];; 415 vect[3] = 0;; 416 vect[7] = 0;; 417 vect[11] = 0;; 418 vect[15] = 1;; 419}; 420 ; 421/////////////////////////////////////////////////////////////////////; 422/// Collect information about geometry hierarchy into flat list; 423/// like it done in JSROOT ClonedNodes.createClones; 424 ; 425void RGeomDescription::Build(TGeoManager *mgr, const std::string &volname); 426{; 427 ClearDescription();; 428 if (!mgr); 429 return;; 430 ; 431 TLockGuard lock(fMutex);; 432 ; 433 // by top node visibility always enabled and harm logic; 434 // later visibility can be controlled by other means; 435 // mgr->GetTopNode()->GetVolume()->SetVisibility(kFALSE);; 436 ; 437 int maxnodes = mgr->GetMaxVisNodes();; 438 ; 439 SetNSegments(mgr->GetNsegments());; 440 SetVisLevel(mgr->GetVisLevel());; 441 SetMaxVisNodes(maxnodes);; 442 SetMaxVisFaces((maxnodes > 5000 ? 5000 : (maxnodes < 1000 ? 1000 : maxnodes)) * 100);; 443 ; 444 auto topnode = mgr->GetTopNode();; 445 ; 446 BuildDescription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:11062,log,logic,11062,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['log'],['logic']
Testability,"4022, 4.1791, ; 410 3.9357, 3.7809, 3.6963, 2.807, 6.4954, 5.5823, 5.1456, 4.8657, ; 411 4.5506, 4.3275, 4.2228, 3.0902, 6.8279, 5.8282, 5.3658, 5.0749, ; 412 4.7318, 4.4923, 4.3642, 3.1747, 7.2755, 6.197, 5.6715, 5.3642, ; 413 4.9991, 4.7135, 4.5945, 3.2905, 8.1885, 6.8537, 6.2077, 5.8499, ; 414 5.4246, 5.1137, 4.9555, 3.4808, 9.3061, 7.6592, 6.85, 6.4806, ; 415 5.9919, 5.6122, 5.5136, 3.719, 9.6132, 7.9234, 7.1025, 6.6731, ; 416 6.1549, 5.8217, 5.7345, 3.7911, 10.0989, 8.2395, 7.4326, 6.9567, ; 417 6.3908, 6.011, 5.9566, 3.8906, 10.8825, 8.8994, 7.8934, 7.4501, ; 418 6.9009, 6.4538, 6.2705, 4.0556, 11.8537, 9.5482, 8.5568, 8.0283, ; 419 7.4418, 6.9524, 6.6195, 4.2649 };; 420 ; 421 ; 422 ; 423 ; 424 ; 425 // p values bins ; 426 double p[] = { .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,.1,.2,.3,.4,.5,.6,.7,.8,.9,; 427 .925,.95,.975,.99,.9925,.995,.9975,.999,.99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999 };; 428 ; 429 //int nbins = p.size();; 430 const int nbins = 35;; 431 //assert ( nbins*ns == ts.size() ); ; 432 ; 433 // get ts values for nsamples = 2; 434 // corresponding value is for m=nsamples-1; 435 int offset = 0; // for m = 1 (i.e. for nsamples = 2); 436 if (nsamples != 2) { ; 437 MATH_ERROR_MSG(""InterpolatePValues"", ""Interpolation not implemented for nsamples not equal to 2"");; 438 return 0;; 439 }; 440 std::vector<double> ts2(nbins); // ts values for nsamples = 2; 441 std::vector<double> lp(nbins); // log ( p / (1-p) ); 442 for (int i = 0; i < nbins; ++i) ; 443 { ; 444 ts2[i] = ts[offset+ i * ns]; ; 445 p[i] = 1.-p[i];; 446 lp[i] = std::log( p[i]/(1.-p[i] ) ); ; 447 }; 448 // do linear interpolation to find right lp value for given observed test staistic value; 449 //auto it = std::lower_bound(ts2.begin(), ts2.end(), tx ); ; 450 int i1 = std::distance(ts2.begin(), std::lower_bound(ts2.begin(), ts2.end(), tx ) ) - 1; ; 451 int i2 = i1+1;; 452 // if tx is before min of tabulated data; 453 if (i1 < 0) { ; 454 i1 = 0;; 455 i2 = 1;; 456 }; 45",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:16354,assert,assert,16354,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['assert'],['assert']
Testability,41 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error found - save the configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.3584,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:106539,Test,Test,106539,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"41 assert( fDataErrorHigh.empty() && fDataErrorLow.empty() );; 342 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 343 ; 344 double eval = fDataErrorPtr[ ipoint ];; 345 ; 346 // in case of wrapped data the pointer stores the error and; 347 // not the inverse; 348 if (fWrapped); 349 return 1.0 / eval;; 350 else; 351 return (eval != 0.0) ? eval : 0.0;; 352 }; 353 ; 354 if ( fErrorType == kAsymError ) {; 355 // return inverse of 1/2(el + eh); 356 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 357 assert( fDataError.empty() );; 358 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 359 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 360 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 361 ; 362 double eh = fDataErrorHighPtr[ ipoint ];; 363 double el = fDataErrorLowPtr[ ipoint ];; 364 ; 365 return 2.0 / (el+eh);; 366 }; 367 ; 368 assert( fErrorType == kCoordError );; 369 // for coordinate error we store the error and not the inverse; 370 return 1.0 / fDataErrorPtr[ ipoint ];; 371 }; 372 ; 373 ; 374 /**; 375 retrieve at the same time a pointer to the coordinate data and the fit value; 376 More efficient than calling Coords(i) and Value(i); 377 */; 378 // not threadsafe, to be replaced with never constructs!; 379 // for example: just return std::array or std::vector, there's; 380 // is going to be only minor overhead in c++11.; 381 const double * GetPoint( unsigned int ipoint, double & value ) const; 382 {; 383 assert( ipoint < fMaxPoints );; 384 value = Value( ipoint );; 385 ; 386 return Coords( ipoint );; 387 }; 388 ; 389 /**; 390 returns a single coordinate error component of a point.; 391 This function is threadsafe in contrast to Coords(...); 392 and can easily get vectorized by the compiler in loops; 393 running over the ipoint-index.; 394 */; 395 double GetCoordErrorComponent( unsigned int ipoint, unsigned int icoord ) const; 396 {; 397 assert( ipoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:12899,assert,assert,12899,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['assert'],['assert']
Testability,"42 ; 443vector<Int_t>* TMVA::Tools::ParseANNOptionString( TString theOptions, Int_t nvar,; 444 vector<Int_t>* nodes ); 445{; 446 TList* list = TMVA::Tools::ParseFormatLine( theOptions, "":"" );; 447 ; 448 ; 449 // sanity check; 450 if (list->GetSize() < 1) {; 451 Log() << kFATAL << ""<ParseANNOptionString> unrecognized option string: "" << theOptions << Endl;; 452 }; 453 ; 454 // add number of cycles; 455 nodes->push_back( atoi( ((TObjString*)list->At(0))->GetString() ) );; 456 ; 457 Int_t a;; 458 if (list->GetSize() > 1) {; 459 for (Int_t i=1; i<list->GetSize(); i++) {; 460 TString s = ((TObjString*)list->At(i))->GetString();; 461 s.ToUpper();; 462 if (s(0) == 'N') {; 463 if (s.Length() > 1) nodes->push_back( nvar + atoi(&s[1]) );; 464 else nodes->push_back( nvar );; 465 }; 466 else if ((a = atoi( s )) > 0) nodes->push_back( atoi(s ) );; 467 else {; 468 Log() << kFATAL << ""<ParseANNOptionString> unrecognized option string: "" << theOptions << Endl;; 469 }; 470 }; 471 }; 472 ; 473 return nodes;; 474}; 475 ; 476////////////////////////////////////////////////////////////////////////////////; 477/// check quality of splining by comparing splines and histograms in each bin; 478 ; 479Bool_t TMVA::Tools::CheckSplines( const TH1* theHist, const TSpline* theSpline ); 480{; 481 const Double_t sanityCrit = 0.01; // relative deviation; 482 ; 483 Bool_t retval = kTRUE;; 484 for (Int_t ibin=1; ibin<=theHist->GetNbinsX(); ibin++) {; 485 Double_t x = theHist->GetBinCenter( ibin );; 486 Double_t yh = theHist->GetBinContent( ibin ); // the histogram output; 487 Double_t ys = theSpline->Eval( x ); // the spline output; 488 ; 489 if (ys + yh > 0) {; 490 Double_t dev = 0.5*(ys - yh)/(ys + yh);; 491 if (TMath::Abs(dev) > sanityCrit) {; 492 Log() << kFATAL << ""<CheckSplines> Spline failed sanity criterion; ""; 493 << "" relative deviation from histogram: "" << dev; 494 << "" in (bin, value): ("" << ibin << "", "" << x << "")"" << Endl;; 495 retval = kFALSE;; 496 }; 497 }; 498 }; 499 ; 500 return retv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:16245,Log,Log,16245,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"42 }; 7143 if (Hparam.xlowedge<=0) {; 7144 Error(where, ""cannot set X axis to log scale"");; 7145 return 0;; 7146 }; 7147 }; 7148 Hparam.xmin = Hparam.xlowedge;; 7149 }; 7150 Hparam.xfirst= fXaxis->FindFixBin(Hparam.xmin);; 7151 Hparam.xlast = fXaxis->FindFixBin(Hparam.xmax);; 7152 Hparam.xmin = TMath::Log10(Hparam.xmin);; 7153 Hparam.xmax = TMath::Log10(Hparam.xmax);; 7154 if (Hparam.xlast > last) Hparam.xlast = last;; 7155 if (Hparam.xfirst < first) Hparam.xfirst = first;; 7156 }; 7157 ; 7158 // Compute Y axis parameters; 7159 Double_t bigp = TMath::Power(10,32);; 7160 Double_t ymax = -bigp;; 7161 Double_t ymin = bigp;; 7162 Double_t c1, e1;; 7163 Double_t xv[1];; 7164 Double_t fval;; 7165 TObject *f;; 7166 TF1 *f1;; 7167 Double_t allchan = 0;; 7168 Int_t nonNullErrors = 0;; 7169 TIter next(fFunctions);; 7170 for (i=first; i<=last;i++) {; 7171 c1 = fH->GetBinContent(i);; 7172 ymax = TMath::Max(ymax,c1);; 7173 if (Hoption.Logy) {; 7174 if (c1 > 0) ymin = TMath::Min(ymin,c1);; 7175 } else {; 7176 ymin = TMath::Min(ymin,c1);; 7177 }; 7178 if (Hoption.Error) {; 7179 if (fH->GetBinErrorOption() == TH1::kNormal); 7180 e1 = fH->GetBinError(i);; 7181 else; 7182 e1 = fH->GetBinErrorUp(i);; 7183 if (e1 > 0) nonNullErrors++;; 7184 ymax = TMath::Max(ymax,c1+e1);; 7185 if (fH->GetBinErrorOption() != TH1::kNormal); 7186 e1 = fH->GetBinErrorLow(i);; 7187 ; 7188 if (Hoption.Logy) {; 7189 if (c1-e1>0.01*TMath::Abs(c1)) ymin = TMath::Min(ymin,c1-e1);; 7190 } else {; 7191 ymin = TMath::Min(ymin,c1-e1);; 7192 }; 7193 }; 7194 if (Hoption.Func) {; 7195 xv[0] = fXaxis->GetBinCenter(i);; 7196 while ((f = (TObject*) next())) {; 7197 if (f->IsA() == TF1::Class()) {; 7198 f1 = (TF1*)f;; 7199 if (xv[0] < f1->GetXmin() || xv[0] > f1->GetXmax()) continue;; 7200 fval = f1->Eval(xv[0],0,0);; 7201 if (f1->GetMaximumStored() != -1111) fval = TMath::Min(f1->GetMaximumStored(), fval);; 7202 ymax = TMath::Max(ymax,fval);; 7203 if (Hoption.Logy) {; 7204 if (c1 > 0 && fval > 0.3*c1) ymin = TMath::Min(ymi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:260184,Log,Logy,260184,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability,"422 return 0;; 7423 }; 7424 else xmin = xm;; 7425 if (xmin >= xmax) {; 7426 if (Hoption.Logx) {; 7427 if (xmax > 0) xmin = 0.001*xmax;; 7428 else {; 7429 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", xmax);; 7430 return 0;; 7431 }; 7432 }; 7433 else {; 7434 if (xmin > 0) {; 7435 xmin = 0;; 7436 xmax *= 2;; 7437 } else if (xmin < 0) {; 7438 xmax = 0;; 7439 xmin *= 2;; 7440 } else {; 7441 xmin = 0;; 7442 xmax = 1;; 7443 }; 7444 }; 7445 }; 7446 ; 7447 // take into account normalization factor; 7448 Hparam.allchan = allchan;; 7449 Double_t factor = allchan;; 7450 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 7451 if (allchan) factor /= allchan;; 7452 if (factor == 0) factor = 1;; 7453 Hparam.factor = factor;; 7454 xmax = factor*xmax;; 7455 xmin = factor*xmin;; 7456 ; 7457 // For log scales, histogram coordinates are LOG10(ymin) and; 7458 // LOG10(ymax). Final adjustment (if not option ""Same""; 7459 // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; 7460 // Maximum and Minimum are not defined.; 7461 if (Hoption.Logx) {; 7462 if (xmin <=0 || xmax <=0) {; 7463 Error(where, ""Cannot set Y axis to log scale"");; 7464 return 0;; 7465 }; 7466 xmin = TMath::Log10(xmin);; 7467 if (!minimum) xmin += TMath::Log10(0.5);; 7468 xmax = TMath::Log10(xmax);; 7469 if (!maximum) xmax += TMath::Log10(2*(0.9/0.95));; 7470 if (!Hoption.Same) {; 7471 Hparam.xmin = xmin;; 7472 Hparam.xmax = xmax;; 7473 }; 7474 return 1;; 7475 }; 7476 ; 7477 // final adjustment of ymin for linear scale.; 7478 // if minimum is not set , then ymin is set to zero if >0; 7479 // or to ymin - margin if <0.; 7480 if (!minimum) {; 7481 if (xmin >= 0) xmin = 0;; 7482 else xmin -= yMARGIN*(xmax-xmin);; 7483 }; 7484 ; 7485 // final adjustment of YMAXI for linear scale (if not option ""Same""):; 7486 // decrease histogram height to MAX% of allowed height if HMAXIM; 7487 // has not been called.; 7488 if (!maximum) {; 7489 xmax += yMARGIN*(xmax-xmin);; 74",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:268823,log,logarithmic,268823,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['logarithmic']
Testability,"424 /**; 425 add one dim data with no error in the coordinate (x); 426 in this case store the inverse of the error in the value (y); 427 */; 428 void BinData::Add( double x, double y, double ey ); 429 {; 430 assert( kValueError == fErrorType );; 431 assert( !fData.empty() && fDataPtr );; 432 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 433 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 434 assert( !fDataError.empty() && fDataErrorPtr );; 435 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 436 ; 437 fData[ fNPoints ] = y;; 438 fDataError[ fNPoints ] = (ey != 0.0) ? 1.0/ey : 0.0;; 439 ; 440 FitData::Add( x );; 441 fSumContent += y;; 442 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 443 // set the weight flag checking if error^2 != y; 444 if (!fIsWeighted); 445 if (y != 0 && std::abs( ey*ey/y - 1.0) > 1.E-12) fIsWeighted = true;; 446 }; 447 ; 448 /**; 449 add one dim data with error in the coordinate (x); 450 in this case store the value (y) error and not the inverse; 451 */; 452 void BinData::Add( double x, double y, double ex, double ey ); 453 {; 454 assert( kCoordError == fErrorType );; 455 assert( !fData.empty() && fDataPtr );; 456 assert( !fDataError.empty() && fDataErrorPtr );; 457 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 458 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 459 assert( !fCoordErrors.empty() && fCoordErrors.size() == 1 );; 460 assert( !fCoordErrorsPtr.empty() && fCoordErrorsPtr.size() == 1 && fCoordErrorsPtr[0] );; 461 assert( &fCoordErrors[0].front() == fCoordErrorsPtr[0] );; 462 ; 463 fData[ fNPoints ] = y;; 464 fCoordErrors[0][ fNPoints ] = ex;; 465 fDataError[ fNPoints ] = ey;; 466 ; 467 FitData::Add( x );; 468 fSumContent += y;; 469 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 470 // set the weight flag checking if error^2 != y; 471 if (!fIsWeighted); 472 if (y != 0 && std::abs( ey*ey/y - 1.0) > 1.E-12) fIsWeighted = true;; 473 }; 474 ; 475 /**; 476 add one dim data with error in the coo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:13331,assert,assert,13331,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,['assert'],['assert']
Testability,4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 0.98851 [ -2.9734 3.3513 ]; : m_wbb: -0.010633 0.99340 [ -3.2442 3.2244 ]; : m_wwbb: -0.012669 0.99259 [ -3.1871 5.7307 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0995 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_higgs.h5; PyKeras : [dataset] : Evaluation of PyKeras on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.156 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: Likelihood; : ; Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: Fisher; : ; Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Also filling probability and rarity histograms (on request)...; TFHandler_Fisher : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_l,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:51223,test,test,51223,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['test'],['test']
Testability,42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.98345 9.15873 0.0200325 0.00175472 43768.9 1; : 870 | 5.90893 9.16507 0.0202516 0.00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 8.79318 0.0200883 0.00182097 43794.1 0; : 872 | 5.76603 9.46642 0.0200354 0.00176138 43778.1 1; : 873 Minimum Test error found - save the configuration ; : 873 | 5.70638 8.71803 0.0200731 0.00181478 43815.7 0; : 874 Minimum Test error found - save the configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.8202,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:104354,Test,Test,104354,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,43.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80888,Test,Test,80888,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"433 ; 2434// Draw axis title if it exists; 2435 if (!drawGridOnly && strlen(GetTitle())) {; 2436 textaxis.SetTextSize (GetTitleSize());; 2437 charheight = GetTitleSize();; 2438 if ((GetTextFont() % 10) > 2) {; 2439 charheight /= ((x1==x0) ? padw : padh);; 2440 }; 2441 if (x1 == x0) {; 2442 if (autotoff) {; 2443 if (toffset) ylabel = xlside*charheight+toffset;; 2444 else ylabel = xlside*1.6*charheight;; 2445 } else {; 2446 ylabel = xlside*1.6*charheight*toffset;; 2447 }; 2448 } else {; 2449 ylabel = xlside*1.3*charheight*toffset;; 2450 }; 2451 if (y1 == y0) {; 2452 if (toffset == 0.) toffset = gStyle->GetTitleOffset(""X"");; 2453 ylabel = xlside*1.6*charheight*toffset;; 2454 }; 2455 Double_t axispos;; 2456 if (TestBit(TAxis::kCenterTitle)) axispos = 0.5*axis_length;; 2457 else axispos = axis_length;; 2458 if (TestBit(TAxis::kRotateTitle)) {; 2459 if (x1 >= x0) {; 2460 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2461 else textaxis.SetTextAlign(12);; 2462 } else {; 2463 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2464 else textaxis.SetTextAlign(32);; 2465 }; 2466 phil+=kPI;; 2467 } else {; 2468 if (x1 >= x0) {; 2469 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2470 else textaxis.SetTextAlign(32);; 2471 } else {; 2472 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2473 else textaxis.SetTextAlign(12);; 2474 }; 2475 }; 2476 Rotate(axispos,ylabel,cosphi,sinphi,x0,y0,xpl1,ypl1);; 2477 textaxis.SetTextColor(TitleColor);; 2478 textaxis.SetTextFont(TitleFont);; 2479 textaxis.PaintLatex(gPad->GetX1() + xpl1*(gPad->GetX2() - gPad->GetX1()),; 2480 gPad->GetY1() + ypl1*(gPad->GetY2() - gPad->GetY1()),; 2481 phil*180/kPI,; 2482 GetTitleSize(),; 2483 GetTitle());; 2484 }; 2485 ; 2486}; 2487 ; 2488////////////////////////////////////////////////////////////////////////////////; 2489/// Internal method for axis labels optimisation. This method adjusts the bining; 2490/// of the axis in order to have integer values for t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:83052,Test,TestBit,83052,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: FDA_GA; : ; FDA_GA : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_FDA_GA : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: MLPBNN; : ; TFHandler_MLPBNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; MLPBNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_MLPBNN : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.12216 0.20255 [ -1.0614 1.0246 ]; : myvar2: -0.12333 0.30492 [ -1.2280 0.99911 ]; : var3: 0.097148 0.21347 [ -1.0158 0.99984 ]; : var4: 0.17495 0.23851 [ -1.2661 1.0694 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: DNN_CPU; : ; DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.089214 0.20183 [ -1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1.0000 ]; : --------------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:74931,test,test,74931,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,43603.6 4; : 989 | 3.88349 5.24185 0.0200475 0.00175499 43733.8 5; : 990 | 4.0647 4.52576 0.020036 0.00175545 43762.3 6; : 991 | 3.77396 5.32769 0.0200783 0.00175786 43667.1 7; : 992 | 3.45322 4.61211 0.0200841 0.00175232 43640 8; : 993 | 3.32586 4.54016 0.0200585 0.00176018 43719.9 9; : 994 | 3.54317 4.65875 0.0201539 0.00181263 43617.4 10; : 995 | 3.38008 5.03795 0.0206532 0.00179392 42419.4 11; : 996 | 3.40103 4.41295 0.0204644 0.00176564 42783.5 12; : 997 | 3.23461 4.8031 0.0203306 0.00176616 43093.1 13; : 998 | 3.41797 4.46788 0.0203618 0.00175568 42996.7 14; : 999 Minimum Test error found - save the configuration ; : 999 | 3.31412 4.14973 0.0202938 0.00187677 43438 0; : 1000 | 3.20867 4.17264 0.0201802 0.00179416 43511.4 1; : 1001 | 3.31742 4.17699 0.020287 0.00175118 43159.8 2; : 1002 | 3.35839 4.8143 0.0207434 0.00177731 42180.6 3; : 1003 Minimum Test error found - save the configuration ; : 1003 | 3.42381 4.04915 0.0202591 0.00184351 43441.4 0; : 1004 Minimum Test error found - save the configuration ; : 1004 | 3.27488 4.0384 0.0205262 0.00189376 42935.9 0; : 1005 | 3.09776 4.19224 0.0200956 0.00176781 43649.6 1; : 1006 Minimum Test error found - save the configuration ; : 1006 | 3.1757 3.91876 0.0201134 0.00183093 43757.7 0; : 1007 | 3.17471 4.33126 0.0203423 0.00178093 43100.3 1; : 1008 | 3.23752 4.46797 0.0204556 0.0017847 42847.4 2; : 1009 | 3.5099 4.04664 0.0203963 0.00177013 42950.3 3; : 1010 | 3.39993 4.32216 0.0201011 0.00176915 43639.8 4; : 1011 | 3.28002 4.35065 0.020045 0.00175269 43734.2 5; : 1012 | 3.24301 4.1309 0.0202482 0.00178612 43332 6; : 1013 | 3.47685 4.13785 0.0205714 0.00178247 42578.3 7; : 1014 | 3.38367 4.59532 0.0203076 0.00178189 43183.2 8; : 1015 Minimum Test error found - save the configuration ; : 1015 | 3.15343 3.81668 0.0204522 0.00185272 43011.9 0; : 1016 | 2.99441 4.01707 0.0202697 0.00183758 43402.5 1; : 1017 | 3.3956 4.54944 0.0201133 0.00176644 43604.1 2; : 1018 | 3.2792 3.85661 0.0202747 0.00181943 43348.2 3; : 1019 | 3.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:113424,Test,Test,113424,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164.293 100.588 0.0203765 0.00182671 43127.2 0; : 576 Minimum Test error found - save the configuration ; : 576 | 162.136 99.7953 0.0201485 0.00182291 43654.8 0; : 577 Minimum Test error found - save the configuration ; : 577 | 160.429 98.8873 0.0202404 0.00182125 43433.1 0; : 578 Minimum Test error found - save the configuration ; : 578 | 158.663 98.2522 0.020118 0.00181189 43701.3 0; : 579 Minimum Test error found - save the configuration ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minimum Test error found - save the configuration ; : 582 | 151.197 94.0449 0.020143 0.00182303 43668.3 0; : 583 Minimum Test error found - save the configuration ; : 583 | 149.229 93.6244 0.0201231 0.00181874 43705.4 0; : 584 Minimum Test error found - save the configuration ; : 584 | 147.504 92.2301 0.0202996 0.00182281 43297.5 0; : 585 Minimum Test error found - save the configuration ; : 585 | 145.457 91.5459 0.020121 0.00181177 43693.8 0; : 586 Minimum Test error found - save the configuration ; : 586 | 143.954 90.9958 0.02013 0.00181326 43675.8 0; : 587 Minimum Test error found - save the configuration ; : 587 | 142.242 89.8853 0.0201892 0.0018256 43564.4 0; : 588 Minimum Test error found - save the configuration ; : 588 | 140.475 88.3998 0.0202535 0.0018437 43455.2 0; : 589 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:76533,Test,Test,76533,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.98345 9.15873 0.0200325 0.00175472 43768.9 1; : 870 | 5.90893 9.16507 0.0202516 0.00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 8.79318 0.0200883 0.00182097 43794.1 0; : 872 | 5.76603 9.46642 0.0200354 0.00176138 43778.1 1; : 873 Minimum Test error found - save the configuration ; : 873 | 5.70638 8.71803 0.0200731 0.00181478 43815.7 0; : 874 Minimum Test error found - save the configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:104073,Test,Test,104073,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.98345 9.15873 0.0200325 0.00175472 43768.9 1; : 870 | 5.90893 9.16507 0.0202516 0.00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 8.79318 0.0200883 0.00182097 43794.1 0; : 872 | 5.76603 9.46642 0.0200354 0.00176138 43778.1 1; : 873 Minimum Test error found - save the configuration ; : 873 | 5.70638 8.71803 0.0200731 0.00181478 43815.7 0; : 874 Minimum Test error found - save the configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test err,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:103959,Test,Test,103959,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:92700,Test,Test,92700,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,43780.5 1; : 859 Minimum Test error found - save the configuration ; : 859 | 6.20554 9.48603 0.0201607 0.00183833 43662.6 0; : 860 | 6.16695 10.0812 0.0200598 0.00175295 43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.98345 9.15873 0.0200325 0.00175472 43768.9 1; : 870 | 5.90893 9.16507 0.0202516 0.00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 8.79318 0.0200883 0.00182097 43794.1 0; : 872 | 5.76603 9.46642 0.0200354 0.00176138 43778.1 1; : 873 Minimum Test error found - save the configuration ; : 873 | 5.70638 8.71803 0.0200731 0.00181478 43815.7 0; : 874 Minimum Test error found - save the configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.1,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:103789,Test,Test,103789,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,4394 0.642643 0.0421501 4163.24 1; : 3 | 0.689625 0.697522 0.642119 0.0416746 4163.58 2; : 4 | 0.681203 0.694822 0.637781 0.0412238 4190.71 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 320,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16623,Test,Test,16623,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"43void TMVA::Factory::SetVerbose(Bool_t v); 344{; 345 fVerbose = v;; 346}; 347 ; 348////////////////////////////////////////////////////////////////////////////////; 349/// Book a classifier or regression method.; 350 ; 351TMVA::MethodBase *; 352TMVA::Factory::BookMethod(TMVA::DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption); 353{; 354 if (fModelPersistence); 355 gSystem->MakeDirectory(loader->GetName()); // creating directory for DataLoader output; 356 ; 357 TString datasetname = loader->GetName();; 358 ; 359 if (fAnalysisType == Types::kNoAnalysisType) {; 360 if (loader->GetDataSetInfo().GetNClasses() == 2 && loader->GetDataSetInfo().GetClassInfo(""Signal"") != NULL &&; 361 loader->GetDataSetInfo().GetClassInfo(""Background"") != NULL) {; 362 fAnalysisType = Types::kClassification; // default is classification; 363 } else if (loader->GetDataSetInfo().GetNClasses() >= 2) {; 364 fAnalysisType = Types::kMulticlass; // if two classes, but not named ""Signal"" and ""Background""; 365 } else; 366 Log() << kFATAL << ""No analysis type for "" << loader->GetDataSetInfo().GetNClasses() << "" classes and ""; 367 << loader->GetDataSetInfo().GetNTargets() << "" regression targets."" << Endl;; 368 }; 369 ; 370 // booking via name; the names are translated into enums and the; 371 // corresponding overloaded BookMethod is called; 372 ; 373 if (fMethodsMap.find(datasetname) != fMethodsMap.end()) {; 374 if (GetMethod(datasetname, methodTitle) != 0) {; 375 Log() << kFATAL << ""Booking failed since method with title <"" << methodTitle << ""> already exists ""; 376 << ""in with DataSet Name <"" << loader->GetName() << ""> "" << Endl;; 377 }; 378 }; 379 ; 380 Log() << kHEADER << ""Booking method: "" << gTools().Color(""bold""); 381 << methodTitle; 382 // << gTools().Color(""reset"")<<"" DataSet Name: ""<<gTools().Color(""bold"")<<loader->GetName(); 383 << gTools().Color(""reset"") << Endl << Endl;; 384 ; 385 // interpret option string with respect to a request for boosting (i.e., BostN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:14512,Log,Log,14512,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"44 // their autoparse information. We could be more subtil and remove only; 2045 // the failed one or only the one in this module, but for now this is; 2046 // better than nothing.; 2047 fLookedUpClasses.clear();; 2048 ; 2049 // Make sure we do not set off AutoLoading or autoparsing during the; 2050 // module registration!; 2051 SuspendAutoLoadingRAII autoLoadOff(this);; 2052 ; 2053 for (const char** inclPath = includePaths; *inclPath; ++inclPath) {; 2054 TCling::AddIncludePath(*inclPath);; 2055 }; 2056 cling::Transaction* T = nullptr;; 2057 // Put the template decls and the number of arguments to skip in the TNormalizedCtxt; 2058 for (auto& fwdDeclArgToSkipPair : fwdDeclsArgToSkip){; 2059 const std::string& fwdDecl = fwdDeclArgToSkipPair.first;; 2060 const int nArgsToSkip = fwdDeclArgToSkipPair.second;; 2061 auto compRes = fInterpreter->declare(fwdDecl.c_str(), &T);; 2062 assert(cling::Interpreter::kSuccess == compRes &&; 2063 ""A fwd declaration could not be compiled"");; 2064 if (compRes!=cling::Interpreter::kSuccess){; 2065 Warning(""TCling::RegisterModule"",; 2066 ""Problems in declaring string '%s' were encountered."",; 2067 fwdDecl.c_str()) ;; 2068 continue;; 2069 }; 2070 ; 2071 // Drill through namespaces recursively until the template is found; 2072 if(ClassTemplateDecl* TD = FindTemplateInNamespace(T->getFirstDecl().getSingleDecl())){; 2073 fNormalizedCtxt->AddTemplAndNargsToKeep(TD->getCanonicalDecl(), nArgsToSkip);; 2074 }; 2075 ; 2076 }; 2077 ; 2078 // FIXME: Remove #define __ROOTCLING__ once PCMs are there.; 2079 // This is used to give Sema the same view on ACLiC'ed files (which; 2080 // are then #included through the dictionary) as rootcling had.; 2081 TString code = gNonInterpreterClassDef;; 2082 if (payloadCode); 2083 code += payloadCode;; 2084 ; 2085 std::string dyLibName = cling::DynamicLibraryManager::getSymbolLocation(triggerFunc);; 2086 assert(!llvm::sys::fs::is_symlink_file(dyLibName));; 2087 ; 2088 if (dyLibName.empty()) {; 2089 ::Error(""TCling::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:78786,assert,assert,78786,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"44 Double_t dmaster[3];; 2145 Int_t j;; 2146 for (Int_t i = 0; i < numpoints; i++) {; 2147 j = 3 * i;; 2148 TGeoShape::GetTransform()->LocalToMaster(&points[j], dmaster);; 2149 points[j] = dmaster[0];; 2150 points[j + 1] = dmaster[1];; 2151 points[j + 2] = dmaster[2];; 2152 view->WCtoNDC(&points[j], xndc);; 2153 x1 = gPad->XtoAbsPixel(xndc[0]);; 2154 y1 = gPad->YtoAbsPixel(xndc[1]);; 2155 dpoint2 = (px - x1) * (px - x1) + (py - y1) * (py - y1);; 2156 if (dpoint2 < dist); 2157 dist = (Int_t)dpoint2;; 2158 }; 2159 if (dist > 100); 2160 return dist;; 2161 dist = Int_t(TMath::Sqrt(Double_t(dist)));; 2162 if (dist < maxdist && fIsPaintingShape); 2163 gPad->SetSelected((TObject *)shape);; 2164 return dist;; 2165}; 2166 ; 2167////////////////////////////////////////////////////////////////////////////////; 2168/// Check time of finding ""Where am I"" for n points.; 2169 ; 2170void TGeoPainter::Test(Int_t npoints, Option_t *option); 2171{; 2172 fChecker->Test(npoints, option);; 2173}; 2174 ; 2175////////////////////////////////////////////////////////////////////////////////; 2176/// Geometry overlap checker based on sampling.; 2177 ; 2178void TGeoPainter::TestOverlaps(const char *path); 2179{; 2180 fChecker->TestOverlaps(path);; 2181}; 2182 ; 2183////////////////////////////////////////////////////////////////////////////////; 2184/// Check voxels efficiency per volume.; 2185 ; 2186Bool_t TGeoPainter::TestVoxels(TGeoVolume *vol); 2187{; 2188 return fChecker->TestVoxels(vol);; 2189}; 2190 ; 2191////////////////////////////////////////////////////////////////////////////////; 2192/// Get the new 'unbombed' translation vector according current exploded view mode.; 2193 ; 2194void TGeoPainter::UnbombTranslation(const Double_t *tr, Double_t *bombtr); 2195{; 2196 memcpy(bombtr, tr, 3 * sizeof(Double_t));; 2197 switch (fExplodedView) {; 2198 case kGeoNoBomb: return;; 2199 case kGeoBombXYZ:; 2200 bombtr[0] /= fBombX;; 2201 bombtr[1] /= fBombY;; 2202 bombtr[2] /= fBombZ;; 2203 return;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:70762,Test,Test,70762,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Test'],['Test']
Testability,"44 const Double_t p5 = -0.4237922726e7, p6 = 0.8511937935e4;; 1745 const Double_t p7 = 0.2499580570e14, p8 = 0.4244419664e12;; 1746 const Double_t p9 = 0.3733650367e10, p10 = 0.2245904002e8;; 1747 const Double_t p11 = 0.1020426050e6, p12 = 0.3549632885e3;; 1748 const Double_t p13 = 0.636619772;; 1749 const Double_t q1 = 2.356194491;; 1750 const Double_t q2 = 0.183105e-2, q3 = -0.3516396496e-4;; 1751 const Double_t q4 = 0.2457520174e-5, q5 = -0.240337019e-6;; 1752 const Double_t q6 = 0.04687499995, q7 = -0.2002690873e-3;; 1753 const Double_t q8 = 0.8449199096e-5, q9 = -0.88228987e-6;; 1754 const Double_t q10 = 0.105787412e-6, q11 = 0.636619772;; 1755 ; 1756 if (x < 8) {; 1757 y=x*x;; 1758 result1 = x*(p1 + y*(p2 + y*(p3 + y*(p4 + y*(p5 + y*p6)))));; 1759 result2 = p7 + y*(p8 + y*(p9 + y*(p10 + y*(p11 + y*(p12+y)))));; 1760 result = (result1/result2) + p13*(TMath::BesselJ1(x)*log(x)-1/x);; 1761 } else {; 1762 z = 8/x;; 1763 y = z*z;; 1764 xx = x-q1;; 1765 result1 = 1 + y*(q2 + y*(q3 + y*(q4 + y*q5)));; 1766 result2 = q6 + y*(q7 + y*(q8 + y*(q9 + y*q10)));; 1767 result = sqrt(q11/x)*(sin(xx)*result1+z*cos(xx)*result2);; 1768 }; 1769 return result;; 1770}; 1771 ; 1772////////////////////////////////////////////////////////////////////////////////; 1773/// Struve Functions of Order 0; 1774///; 1775/// Converted from CERNLIB M342 by Rene Brun.; 1776 ; 1777Double_t TMath::StruveH0(Double_t x); 1778{; 1779 const Int_t n1 = 15;; 1780 const Int_t n2 = 25;; 1781 const Double_t c1[16] = { 1.00215845609911981, -1.63969292681309147,; 1782 1.50236939618292819, -.72485115302121872,; 1783 .18955327371093136, -.03067052022988,; 1784 .00337561447375194, -2.6965014312602e-4,; 1785 1.637461692612e-5, -7.8244408508e-7,; 1786 3.021593188e-8, -9.6326645e-10,; 1787 2.579337e-11, -5.8854e-13,; 1788 1.158e-14, -2e-16 };; 1789 const Double_t c2[26] = { .99283727576423943, -.00696891281138625,; 1790 1.8205103787037e-4, -1.063258252844e-5,; 1791 9.8198294287e-7, -1.2250645445e-7,; 1792 1.8940833",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:59704,log,log,59704,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['log'],['log']
Testability,"440 fprintf(fmk, ""else\n"");; 3441 fprintf(fmk, ""ifeq ($(PLATFORM),win32)\n"");; 3442 fprintf(fmk, ""\t\tbindexplib $* $^ > $*.def\n"");; 3443 fprintf(fmk, ""\t\tlib -nologo -MACHINE:IX86 $^ -def:$*.def \\\n"");; 3444 fprintf(fmk, ""\t\t $(OutPutOpt)$(PACKLIB)\n"");; 3445 fprintf(fmk, ""\t\t$(LD) $(SOFLAGS) $(LDFLAGS) $^ $*.exp $(LIBS) \\\n"");; 3446 fprintf(fmk, ""\t\t $(OutPutOpt)$@\n"");; 3447 fprintf(fmk, ""else\n"");; 3448 fprintf(fmk, ""\t\t$(LD) $(SOFLAGS) $(LDFLAGS) $^ $(OutPutOpt) $@ $(LIBS) $(EXPLLINKLIBS)\n"");; 3449 fprintf(fmk, ""endif\n"");; 3450 fprintf(fmk, ""endif\n"");; 3451 fprintf(fmk, ""endif\n"");; 3452 fprintf(fmk, ""endif\n"");; 3453 fprintf(fmk, ""\t\t@echo \""$@ done\""\n"");; 3454 fprintf(fmk, ""\n"");; 3455 fprintf(fmk, ""clean:\n"");; 3456 fprintf(fmk, ""\t\t@rm -f $(OBJS) core\n"");; 3457 fprintf(fmk, ""\n"");; 3458 fprintf(fmk, ""distclean: clean\n"");; 3459 fprintf(fmk, ""\t\t@rm -f $(PROGRAMS) $(PACKSO) $(PACKLIB) *Dict.* *.def *.exp \\\n"");; 3460 fprintf(fmk, ""\t\t *.so *.lib *.dll *.d *.log .def so_locations\n"");; 3461 fprintf(fmk, ""\t\t@rm -rf cxx_repository\n"");; 3462 fprintf(fmk, ""\n"");; 3463 fprintf(fmk, ""# Dependencies\n"");; 3464 fprintf(fmk, ""\n"");; 3465 fprintf(fmk, ""%sProjectSource.$(ObjSuf): %sProjectHeaders.h %sLinkDef.h %sProjectDict.$(SrcSuf)\n"", pack, pack, pack, pack);; 3466 fprintf(fmk, ""\n"");; 3467 fprintf(fmk, ""%sProjectDict.$(SrcSuf): %sProjectHeaders.h %sLinkDef.h\n"", pack, pack, pack);; 3468 fprintf(fmk, ""\t\t@echo \""Generating dictionary $@...\""\n"");; 3469 fprintf(fmk, ""\t\t@rootcint -f $@ $^\n"");; 3470 fprintf(fmk, ""\n"");; 3471 fprintf(fmk, "".$(SrcSuf).$(ObjSuf):\n"");; 3472 fprintf(fmk, ""\t\t$(CXX) $(CXXFLAGS) -c $<\n"");; 3473 fprintf(fmk, ""\n"");; 3474 ; 3475 // Close the file; 3476 fclose(fmk);; 3477 ; 3478 // Done; 3479 return 0;; 3480}; 3481 ; 3482////////////////////////////////////////////////////////////////////////////////; 3483/// Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'.; 3484/// Called by MakeProject when option ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:125686,log,log,125686,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['log'],['log']
Testability,"442 if (autotoff) {; 2443 if (toffset) ylabel = xlside*charheight+toffset;; 2444 else ylabel = xlside*1.6*charheight;; 2445 } else {; 2446 ylabel = xlside*1.6*charheight*toffset;; 2447 }; 2448 } else {; 2449 ylabel = xlside*1.3*charheight*toffset;; 2450 }; 2451 if (y1 == y0) {; 2452 if (toffset == 0.) toffset = gStyle->GetTitleOffset(""X"");; 2453 ylabel = xlside*1.6*charheight*toffset;; 2454 }; 2455 Double_t axispos;; 2456 if (TestBit(TAxis::kCenterTitle)) axispos = 0.5*axis_length;; 2457 else axispos = axis_length;; 2458 if (TestBit(TAxis::kRotateTitle)) {; 2459 if (x1 >= x0) {; 2460 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2461 else textaxis.SetTextAlign(12);; 2462 } else {; 2463 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2464 else textaxis.SetTextAlign(32);; 2465 }; 2466 phil+=kPI;; 2467 } else {; 2468 if (x1 >= x0) {; 2469 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2470 else textaxis.SetTextAlign(32);; 2471 } else {; 2472 if (TestBit(TAxis::kCenterTitle)) textaxis.SetTextAlign(22);; 2473 else textaxis.SetTextAlign(12);; 2474 }; 2475 }; 2476 Rotate(axispos,ylabel,cosphi,sinphi,x0,y0,xpl1,ypl1);; 2477 textaxis.SetTextColor(TitleColor);; 2478 textaxis.SetTextFont(TitleFont);; 2479 textaxis.PaintLatex(gPad->GetX1() + xpl1*(gPad->GetX2() - gPad->GetX1()),; 2480 gPad->GetY1() + ypl1*(gPad->GetY2() - gPad->GetY1()),; 2481 phil*180/kPI,; 2482 GetTitleSize(),; 2483 GetTitle());; 2484 }; 2485 ; 2486}; 2487 ; 2488////////////////////////////////////////////////////////////////////////////////; 2489/// Internal method for axis labels optimisation. This method adjusts the bining; 2490/// of the axis in order to have integer values for the labels.; 2491///; 2492/// \param[in] A1,A2 Old WMIN,WMAX; 2493/// \param[out] binLow,binHigh New WMIN,WMAX; 2494/// \param[in] nold Old NDIV (primary divisions); 2495/// \param[out] nbins New NDIV; 2496/// \param[out] binWidth Bin width; 2497 ; 2498void TGaxis::AdjustBinSize(Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:83339,Test,TestBit,83339,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['Test'],['TestBit']
Testability,"4452 maxy = theY[0] + d;; 4453 }; 4454 }; 4455 if (theColor) {; 4456 if (minc == maxc) {; 4457 if (theColor[0] == 0.) {; 4458 minc = -e;; 4459 maxc = e;; 4460 } else {; 4461 d = TMath::Abs(theColor[0]*e);; 4462 minc = theColor[0] - d;; 4463 maxc = theColor[0] + d;; 4464 }; 4465 }; 4466 }; 4467 if (theSize) {; 4468 if (mins == maxs) {; 4469 if (theSize[0] == 0.) {; 4470 mins = -e;; 4471 maxs = e;; 4472 } else {; 4473 d = TMath::Abs(theSize[0]*e);; 4474 mins = theSize[0] - d;; 4475 maxs = theSize[0] + d;; 4476 }; 4477 }; 4478 }; 4479 ; 4480 TH2F *h = theScatter->GetHistogram();; 4481 if (optionAxis) h->Paint("" "");; 4482 if (h->GetMinimum() != h->GetMaximum()) {; 4483 if (minc<h->GetMinimum()) minc = h->GetMinimum();; 4484 if (maxc>h->GetMaximum()) maxc = h->GetMaximum();; 4485 }; 4486 ; 4487 // Define and paint palette; 4488 if (theColor) {; 4489 TPaletteAxis *palette;; 4490 TList *functions = theScatter->GetGraph()->GetListOfFunctions();; 4491 palette = (TPaletteAxis*)functions->FindObject(""palette"");; 4492 TView *view = gPad->GetView();; 4493 if (palette) {; 4494 if (view) {; 4495 if (!palette->TestBit(TPaletteAxis::kHasView)) {; 4496 functions->Remove(palette);; 4497 delete palette; palette = nullptr;; 4498 }; 4499 } else {; 4500 if (palette->TestBit(TPaletteAxis::kHasView)) {; 4501 functions->Remove(palette);; 4502 delete palette; palette = nullptr;; 4503 }; 4504 }; 4505 }; 4506 if (!palette) {; 4507 Double_t xup = gPad->GetUxmax();; 4508 Double_t x2 = gPad->PadtoX(gPad->GetX2());; 4509 Double_t ymin = gPad->PadtoY(gPad->GetUymin());; 4510 Double_t ymax = gPad->PadtoY(gPad->GetUymax());; 4511 Double_t xr = 0.05*(gPad->GetX2() - gPad->GetX1());; 4512 Double_t xmin = gPad->PadtoX(xup +0.1*xr);; 4513 Double_t xmax = gPad->PadtoX(xup + xr);; 4514 if (xmax > x2) xmax = gPad->PadtoX(gPad->GetX2()-0.01*xr);; 4515 palette = new TPaletteAxis(xmin,ymin,xmax,ymax,minc,maxc);; 4516 palette->SetLabelColor(h->GetZaxis()->GetLabelColor());; 4517 palette->SetLabelFont(h->GetZaxis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:158238,Test,TestBit,158238,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['Test'],['TestBit']
Testability,"449 of file RuleFitParams.cxx. ◆ GetPathIdx1(). UInt_t TMVA::RuleFitParams::GetPathIdx1 ; (; ); const. inline . Definition at line 91 of file RuleFitParams.h. ◆ GetPathIdx2(). UInt_t TMVA::RuleFitParams::GetPathIdx2 ; (; ); const. inline . Definition at line 92 of file RuleFitParams.h. ◆ GetPerfIdx1(). UInt_t TMVA::RuleFitParams::GetPerfIdx1 ; (; ); const. inline . Definition at line 93 of file RuleFitParams.h. ◆ GetPerfIdx2(). UInt_t TMVA::RuleFitParams::GetPerfIdx2 ; (; ); const. inline . Definition at line 94 of file RuleFitParams.h. ◆ Init(). void TMVA::RuleFitParams::Init ; (; ). Initializes all parameters using the RuleEnsemble and the training tree. ; Definition at line 114 of file RuleFitParams.cxx. ◆ InitGD(). void TMVA::RuleFitParams::InitGD ; (; ). Initialize GD path search. ; Definition at line 373 of file RuleFitParams.cxx. ◆ InitNtuple(). void TMVA::RuleFitParams::InitNtuple ; (; ). protected . initializes the ntuple ; Definition at line 185 of file RuleFitParams.cxx. ◆ Log(). MsgLogger & TMVA::RuleFitParams::Log ; (; ); const. inlineprivate . Definition at line 254 of file RuleFitParams.h. ◆ LossFunction() [1/3]. Double_t TMVA::RuleFitParams::LossFunction ; (; const Event & ; e); const. Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ; Definition at line 278 of file RuleFitParams.cxx. ◆ LossFunction() [2/3]. Double_t TMVA::RuleFitParams::LossFunction ; (; UInt_t ; evtidx); const. Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ; Definition at line 290 of file RuleFitParams.cxx. ◆ LossFunction() [3/3]. Double_t TMVA::RuleFitParams::LossFunction ; (; UInt_t ; evtidx, . UInt_t ; itau . ); const. Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ; Definition at line 302 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:13456,Log,Log,13456,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['Log'],['Log']
Testability,45.466 nsig=141.134 sig1frac=0.532895; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 100; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-920.777) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.726241 a1=-0.424659 mean=5.05565 nbkg=151.228 nsig=170.816 sig1frac=0.771802; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-743.339) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.942558 a1=-0.775768 mean=4.99866 nbkg=187.872 nsig=63.0852 sig1frac=0.868175; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-743.339) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.984478 a1=-0.59938 mean=4.99914 nbkg=173.959 nsig=90.3182 sig1frac=0.461117; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 90; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 80; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 70; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-775.389) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.72761 a1=-0.375581 mean=5.04879 nbkg=141.143 nsig=137.402 sig1frac=0.495257; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 60; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 50; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 40; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 30; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 20; [#0] PROGRESS:Generation --,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:27631,log,log,27631,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"4509 return;; 4510 } else {; 4511 fPie.reset();; 4512 }; 4513 ; 4514 fXbuf.resize(kNMAX);; 4515 fYbuf.resize(kNMAX);; 4516 if (fH->GetDimension() > 2) {; 4517 PaintH3(option);; 4518 fH->SetMinimum(minsav);; 4519 if (Hoption.Func) {; 4520 Hoption_t hoptsave = Hoption;; 4521 Hparam_t hparsave = Hparam;; 4522 PaintFunction(option);; 4523 SetHistogram(hsave);; 4524 Hoption = hoptsave;; 4525 Hparam = hparsave;; 4526 }; 4527 gCurrentHist = oldhist;; 4528 fXbuf.clear();; 4529 fYbuf.clear();; 4530 return;; 4531 }; 4532 TView *view = gPad->GetView();; 4533 if (view) {; 4534 if (!Hoption.Lego && !Hoption.Surf && !Hoption.Tri) {; 4535 delete view;; 4536 gPad->SetView(nullptr);; 4537 }; 4538 }; 4539 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) {; 4540 // In case of 1D histogram, Z axis becomes Y axis.; 4541 Int_t logysav=0, logzsav=0;; 4542 if (fH->GetDimension() == 1) {; 4543 logysav = Hoption.Logy;; 4544 logzsav = Hoption.Logz;; 4545 Hoption.Logz = 0;; 4546 if (Hoption.Logy) {; 4547 Hoption.Logz = 1;; 4548 Hoption.Logy = 0;; 4549 }; 4550 }; 4551 PaintTable(option);; 4552 if (Hoption.Func) {; 4553 Hoption_t hoptsave = Hoption;; 4554 Hparam_t hparsave = Hparam;; 4555 PaintFunction(option);; 4556 SetHistogram(hsave);; 4557 Hoption = hoptsave;; 4558 Hparam = hparsave;; 4559 }; 4560 fH->SetMinimum(minsav);; 4561 gCurrentHist = oldhist;; 4562 fXbuf.clear();; 4563 fYbuf.clear();; 4564 if (fH->GetDimension() == 1) {; 4565 Hoption.Logy = logysav;; 4566 Hoption.Logz = logzsav;; 4567 }; 4568 return;; 4569 }; 4570 ; 4571 if (Hoption.Bar >= 20) {; 4572 PaintBarH(option);; 4573 fXbuf.clear();; 4574 fYbuf.clear();; 4575 return;; 4576 }; 4577 ; 4578 gPad->RangeAxisChanged(); //emit RangeAxisChanged() signal to sync axes; 4579 // fill Hparam structure with histo parameters; 4580 if (!PaintInit()) {; 4581 fXbuf.clear();; 4582 fYbuf.clear();; 4583 return;; 4584 }; 4585 ; 4586 // Picture surround (if new page) and page number (if requested).; 4587 // Histogram surround (if not opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:172778,Log,Logy,172778,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability,"4538, 6.2705, 4.0556, 11.8537, 9.5482, 8.5568, 8.0283, ; 419 7.4418, 6.9524, 6.6195, 4.2649 };; 420 ; 421 ; 422 ; 423 ; 424 ; 425 // p values bins ; 426 double p[] = { .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,.1,.2,.3,.4,.5,.6,.7,.8,.9,; 427 .925,.95,.975,.99,.9925,.995,.9975,.999,.99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999 };; 428 ; 429 //int nbins = p.size();; 430 const int nbins = 35;; 431 //assert ( nbins*ns == ts.size() ); ; 432 ; 433 // get ts values for nsamples = 2; 434 // corresponding value is for m=nsamples-1; 435 int offset = 0; // for m = 1 (i.e. for nsamples = 2); 436 if (nsamples != 2) { ; 437 MATH_ERROR_MSG(""InterpolatePValues"", ""Interpolation not implemented for nsamples not equal to 2"");; 438 return 0;; 439 }; 440 std::vector<double> ts2(nbins); // ts values for nsamples = 2; 441 std::vector<double> lp(nbins); // log ( p / (1-p) ); 442 for (int i = 0; i < nbins; ++i) ; 443 { ; 444 ts2[i] = ts[offset+ i * ns]; ; 445 p[i] = 1.-p[i];; 446 lp[i] = std::log( p[i]/(1.-p[i] ) ); ; 447 }; 448 // do linear interpolation to find right lp value for given observed test staistic value; 449 //auto it = std::lower_bound(ts2.begin(), ts2.end(), tx ); ; 450 int i1 = std::distance(ts2.begin(), std::lower_bound(ts2.begin(), ts2.end(), tx ) ) - 1; ; 451 int i2 = i1+1;; 452 // if tx is before min of tabulated data; 453 if (i1 < 0) { ; 454 i1 = 0;; 455 i2 = 1;; 456 }; 457 // if tx is after max of tabulated data; 458 if (i2 >= int(ts2.size()) ) { ; 459 i1 = ts2.size()-2; ; 460 i2 = ts2.size()-1;; 461 }; 462 ; 463 //std::cout << i1 << "" , "" << i2 << std::endl;; 464 assert(i1 < (int) lp.size() && i2 < (int) lp.size() ); ; 465 double lp1 = lp[i1]; ; 466 double lp2 = lp[i2];; 467 double tx1 = ts2[i1];; 468 double tx2 = ts2[i2];; 469 ; 470 //std::cout << "" tx1,2 "" << tx1 << "" "" << tx2 << std::endl;; 471 /// find interpolated (or extrapolated value)( ; 472 double lp0 = (lp1-lp2) * (tx - tx2)/ ( tx1-tx2) + lp2; ; 473 ; 474 ; 475 double p0 = exp(lp0)/(1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:16937,log,log,16937,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['log'],['log']
Testability,"454 of file RooFitResult.cxx. ◆ globalCorr() [2/3]. double RooFitResult::globalCorr ; (; const char * ; parname). Return the global correlation of the named parameter. ; Definition at line 430 of file RooFitResult.cxx. ◆ globalCorr() [3/3]. double RooFitResult::globalCorr ; (; const RooAbsArg & ; par). inline . Definition at line 137 of file RooFitResult.h. ◆ IsA(). TClass * RooFitResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 203 of file RooFitResult.h. ◆ isIdentical(). bool RooFitResult::isIdentical ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolCorr = 1e-4, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolCorrabsolute tolerance for correlation coefficients. ; [in]verboseIf this function will log to the standard output when comparisons fail. As the relative tolerance for the parameter errors, the default value of 1e-3 will be used. ; Definition at line 863 of file RooFitResult.cxx. ◆ isIdenticalNoCov(). bool RooFitResult::isIdenticalNoCov ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolErr = 1e-3, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolErrRelative tolerance for parameter errors. ; [in]verboseIf this function will log to the standard output when comparisons fail. . Definition at line 801 of file RooFitResult.cxx. ◆ lastMinuitFit(). RooFitResult * RooFitResult::lastMinuitFit ; (; const RooArgList & ; varList = RooArgList()). static . Import the results of the last fit performed by gMinuit, interpreting the fit parameters as the given varList of para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:29893,log,log,29893,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['log'],['log']
Testability,"456 */; 457 template <typename ItOutput, typename ItTruth, typename ItDelta, typename ItInvActFnc>; 458 double softMaxCrossEntropy (ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc /*itInvActFnc*/, double patternWeight); 459 {; 460 double errorSum = 0.0;; 461 ; 462 bool hasDeltas = (itDelta != itDeltaEnd);; 463 // output - truth; 464 ItTruth itTruth = itTruthBegin;; 465 for (auto itProbability = itProbabilityBegin; itProbability != itProbabilityEnd; ++itProbability, ++itTruth); 466 {; 467// assert (itTruth != itTruthEnd);; 468 double probability = (*itProbability);; 469 double truth = (*itTruth);; 470 if (hasDeltas); 471 {; 472 (*itDelta) = probability - truth;; 473// (*itDelta) = (*itInvActFnc)(sm) * delta * patternWeight;; 474 ++itDelta; //++itInvActFnc;; 475 }; 476 double error (0);; 477 ; 478 error += truth * log (probability);; 479 errorSum += error;; 480 }; 481 ; 482 return -errorSum * patternWeight;; 483 }; 484 ; 485 ; 486 ; 487 ; 488 ; 489 ; 490 ; 491 ; 492 ; 493/*! \brief compute the weight decay for regularization (L1 or L2); 494 *; 495 *; 496 */; 497 template <typename ItWeight>; 498 double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization); 499 {; 500 if (eRegularization == EnumRegularization::L1); 501 {; 502 // weight decay (regularization); 503 double w = 0;; 504 size_t n = 0;; 505 for (; itWeight != itWeightEnd; ++itWeight, ++n); 506 {; 507 double weight = (*itWeight);; 508 w += std::fabs (weight);; 509 }; 510 return error + 0.5 * w * factorWeightDecay / n;; 511 }; 512 else if (eRegularization == EnumRegularization::L2); 513 {; 514 // weight decay (regularization); 515 double w = 0;; 516 size_t n = 0;; 517 for (; itWeight != itWeightEnd; ++itWeight, ++n); 518 {; 519 double weight = (*itWeight);; 520 w += weight*weight;; 521 }; 522 return error + 0.5 * w * factorWeightDecay /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:13922,assert,assert,13922,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,"['assert', 'log']","['assert', 'log']"
Testability,"46 if (fWrapped); 447 invError = e;; 448 else; 449 invError = ( e != 0.0 ) ? 1.0/e : 1.0;; 450 ; 451 return GetPoint( ipoint, value );; 452 }; 453 ; 454 /**; 455 Retrieve the errors on the point (coordinate and value) for the given fit point; 456 It must be called only when the coordinate errors are stored otherwise it will produce an; 457 assert.; 458 */; 459 // not threadsafe, to be replaced with never constructs!; 460 // for example: just return std::array or std::vector, there's; 461 // is going to be only minor overhead in c++11.; 462 const double* GetPointError(unsigned int ipoint, double & errvalue) const; 463 {; 464 assert( ipoint < fMaxPoints );; 465 assert( fErrorType == kCoordError || fErrorType == kAsymError );; 466 ; 467 errvalue = Error( ipoint );; 468 return CoordErrors( ipoint );; 469 }; 470 ; 471 /**; 472 Get errors on the point (coordinate errors and asymmetric value errors) for the; 473 given fit point.; 474 It must be called only when the coordinate errors and asymmetric errors are stored; 475 otherwise it will produce an assert.; 476 */; 477 // not threadsafe, to be replaced with never constructs!; 478 // for example: just return std::array or std::vector, there's; 479 // is going to be only minor overhead in c++11.; 480 const double* GetPointError(unsigned int ipoint, double & errlow, double & errhigh) const; 481 {; 482 assert( ipoint < fMaxPoints );; 483 assert( fErrorType == kAsymError );; 484 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 485 assert( fDataError.empty() );; 486 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 487 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 488 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 489 ; 490 errhigh = fDataErrorHighPtr[ ipoint ];; 491 errlow = fDataErrorLowPtr[ ipoint ];; 492 ; 493 return CoordErrors( ipoint );; 494 }; 495 ; 496 /**; 497 returns a single coordinate error component of a point.; 498 T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:16790,assert,assert,16790,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['assert'],['assert']
Testability,"46 if( eventVectorTesting.size() < UInt_t(requestedTesting) ); 1347 Log() << kWARNING << Form(""Dataset[%s] : "",dsi.GetName())<< ""DataSetFactory/requested number of testing samples larger than size of eventVectorTesting.\n""; 1348 << ""There is probably an issue. Please contact the TMVA developers."" << Endl;; 1349 else if ( eventVectorTesting.size() > UInt_t(requestedTesting) ) {; 1350 std::for_each( eventVectorTesting.begin()+requestedTesting, eventVectorTesting.end(), DeleteFunctor<Event>() );; 1351 eventVectorTesting.erase(eventVectorTesting.begin()+requestedTesting,eventVectorTesting.end());; 1352 }; 1353 }; 1354 }; 1355 ; 1356 TMVA::DataSetFactory::RenormEvents( dsi, tmpEventVector, eventCounts, normMode );; 1357 ; 1358 Int_t trainingSize = 0;; 1359 Int_t testingSize = 0;; 1360 ; 1361 // sum up number of training and testing events; 1362 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1363 trainingSize += tmpEventVector[Types::kTraining].at(cls).size();; 1364 testingSize += tmpEventVector[Types::kTesting].at(cls).size();; 1365 }; 1366 ; 1367 // --- collect all training (testing) events into the training (testing) eventvector; 1368 ; 1369 // create event vectors reserve enough space; 1370 EventVector* trainingEventVector = new EventVector();; 1371 EventVector* testingEventVector = new EventVector();; 1372 ; 1373 trainingEventVector->reserve( trainingSize );; 1374 testingEventVector->reserve( testingSize );; 1375 ; 1376 ; 1377 // collect the events; 1378 ; 1379 // mixing of kTraining and kTesting data sets; 1380 Log() << kDEBUG << "" MIXING ============= "" << Endl;; 1381 ; 1382 if( mixMode == ""ALTERNATE"" ){; 1383 // Inform user if he tries to use alternate mixmode for; 1384 // event classes with different number of events, this works but the alternation stops at the last event of the smaller class; 1385 for( UInt_t cls = 1; cls < dsi.GetNClasses(); ++cls ){; 1386 if (tmpEventVector[Types::kTraining].at(cls).size() != tmpEventVector[Types::kTraining].at(0).size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:61191,test,testingSize,61191,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSize']
Testability,469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:96933,Test,Test,96933,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"471 }; 472 ; 473 return nodes;; 474}; 475 ; 476////////////////////////////////////////////////////////////////////////////////; 477/// check quality of splining by comparing splines and histograms in each bin; 478 ; 479Bool_t TMVA::Tools::CheckSplines( const TH1* theHist, const TSpline* theSpline ); 480{; 481 const Double_t sanityCrit = 0.01; // relative deviation; 482 ; 483 Bool_t retval = kTRUE;; 484 for (Int_t ibin=1; ibin<=theHist->GetNbinsX(); ibin++) {; 485 Double_t x = theHist->GetBinCenter( ibin );; 486 Double_t yh = theHist->GetBinContent( ibin ); // the histogram output; 487 Double_t ys = theSpline->Eval( x ); // the spline output; 488 ; 489 if (ys + yh > 0) {; 490 Double_t dev = 0.5*(ys - yh)/(ys + yh);; 491 if (TMath::Abs(dev) > sanityCrit) {; 492 Log() << kFATAL << ""<CheckSplines> Spline failed sanity criterion; ""; 493 << "" relative deviation from histogram: "" << dev; 494 << "" in (bin, value): ("" << ibin << "", "" << x << "")"" << Endl;; 495 retval = kFALSE;; 496 }; 497 }; 498 }; 499 ; 500 return retval;; 501}; 502 ; 503////////////////////////////////////////////////////////////////////////////////; 504/// computes difference between two vectors; 505 ; 506std::vector<Double_t> TMVA::Tools::MVADiff( std::vector<Double_t>& a, std::vector<Double_t>& b ); 507{; 508 if (a.size() != b.size()) {; 509 throw;; 510 }; 511 vector<Double_t> result(a.size());; 512 for (UInt_t i=0; i<a.size();i++) result[i]=a[i]-b[i];; 513 return result;; 514}; 515 ; 516////////////////////////////////////////////////////////////////////////////////; 517/// scales double vector; 518 ; 519void TMVA::Tools::Scale( std::vector<Double_t>& v, Double_t f ); 520{; 521 for (UInt_t i=0; i<v.size();i++) v[i]*=f;; 522}; 523 ; 524////////////////////////////////////////////////////////////////////////////////; 525/// scales float vector; 526 ; 527void TMVA::Tools::Scale( std::vector<Float_t>& v, Float_t f ); 528{; 529 for (UInt_t i=0; i<v.size();i++) v[i]*=f;; 530}; 531 ; 532///////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:17127,Log,Log,17127,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"4731 +/- 0.946564 ; p1 = -4.81581 +/- 0.26533 ; ; #include <TH1.h>; #include <TF1.h>; #include <TROOT.h>; ; bool reject;; double fline(double *x, double *par); {; if (reject && x[0] > 2.5 && x[0] < 3.5) {; TF1::RejectPoint();; return 0;; }; return par[0] + par[1]*x[0];; }; ; void fitExclude() {; //Create a source function; TF1 *f1 = new TF1(""f1"",""[0] +[1]*x +gaus(2)"",0,5);; f1->SetParameters(6,-1,5,3,0.2);; // create and fill histogram according to the source function; TH1F *h = new TH1F(""h"",""background + signal"",100,0,5);; h->FillRandom(""f1"",2000);; TF1 *fl = new TF1(""fl"",fline,0,5,2);; fl->SetParameters(2,-1);; //fit only the linear background excluding the signal area; reject = true;; h->Fit(fl,""0"");; reject = false;; //store 2 separate functions for visualization; TF1 *fleft = new TF1(""fleft"",fline,0,2.5,2);; fleft->SetParameters(fl->GetParameters());; h->GetListOfFunctions()->Add(fleft);; gROOT->GetListOfFunctions()->Remove(fleft);; TF1 *fright = new TF1(""fright"",fline,3.5,5,2);; fright->SetParameters(fl->GetParameters());; h->GetListOfFunctions()->Add(fright);; gROOT->GetListOfFunctions()->Remove(fright);; h->Draw();; }; ; h#define h(i)Definition RSha256.hxx:106; TF1.h; TH1.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TF11-Dim function classDefinition TF1.h:233; TF1::RejectPointstatic void RejectPoint(Bool_t reject=kTRUE)Static function to set the global flag to reject points the fgRejectPoint global flag is tested by al...Definition TF1.cxx:3683; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; xDouble_t x[n]Definition legend1.C:17; f1TF1 * f1Definition legend1.C:11; AuthorRene Brun ; Definition in file fitExclude.C. tutorialsfitfitExclude.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitExclude_8C.html:1856,test,tested,1856,doc/master/fitExclude_8C.html,https://root.cern,https://root.cern/doc/master/fitExclude_8C.html,1,['test'],['tested']
Testability,48 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.97436 0.0200851 0.00180832 43771.4 0; : 961 | 3.60053 5.18492 0.0200347 0.00175376 43761.4 1; : 962 | 4.06747 4.98756 0.0202606 0.00194113 43669.3 2; : 963 | 3.72111 5.2317 0.020058 0.00176556 43733.9 3; : 964 | 3.60317 5.20936 0.020113 0.00175786 43584.5 4; : 965 | 3.63413 5.37485 0.0201057 0.00175921 43605 5; : 966 | 3.74764 5.16986 0.0200985 0.00180899 43741 6; : 967 | 3.64317 5.0911 0.0200896 0.00175556 43634.6 7; : 968 Minimum Test error found - save the configuration ; : 968 | 3.75704 4.83525 0.0200988 0.00182012 43766.9 0; : 969 | 3.53402 4.87481 0.020433 0.0017954 42924.1 1; : 970 | 3.39152 4.92875 0.0207012 0.00184125 42417.9 2; : 971 | 3.38481 4.91243 0.0205923 0.00181714 42609.4 3; : 972 | 3.49443 4.93416 0.0204303 0.00180084 42942.7 4; : 973 | 3.50169 4.88411 0.0201535 0.00176496 43505.4 5; : 974 | 3.70493 4.95915 0.0200555 0.00176513 43738.9 6; : 975 Minimum Test error found - save the configuration ; : 975 | 3.52504 4.65912 0.0202218 0.00185299 43552 0; : 976 | 3.7346 5.23443 0.0200603 0.00176255 43721.2 1; : 977 | 3.73856 4.9727 0.0200443 0.00176151 43757 2; : 978 | 3.60727 4.99113 0.0200479 0.00175633 43736 3; : 979 | 3.40672 4.84357 0.0200357 0.00175685 43766.5 4; : 980 | 3.44899 4.83288 0.0200548 0.0017499 43704.2 5; : 981 | 3.46445 4.72048 0.0203135 0.00176046 43119.7 6; : 982 Minimum Test error found - save the configuration ; : 982 | 3.46604 4.64127 0.0202116 0.00183381 43530.8 0; : 983 Minimum Test error found - save the configuration ; : 983 | 3.37896 4.59559 0.0201715 0.00182642 43608.5 0; : 984 Minimum Test error found - save the configuration ; : 984 | 3.36213 4.34126 0.0202597 0.00185498 43467.1 0; : 985 | 3.39032 4.51659 0.0201503 0.00185184 43719.5 1; : 986 | 3.5234 4.95577 0.0201762 0.0017578 43434.8 2; : 987 | 3.50466 4.60061 0.0201538 0.00175522 43481.6 3; : 988 | 3.61316 4.68965 0.0201071 0.00176 43603.6 4; : 989 | 3.88349 5.24185 0.0200,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:111464,Test,Test,111464,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"48 ; 149 TAttText::Modify(); // change text attributes only if necessary; 150 ; 151 if (TestBit(kTextNDC)) {; 152 ptx = gPad->UtoPixel(fX);; 153 pty = gPad->VtoPixel(fY);; 154 } else {; 155 ptx = gPad->XtoAbsPixel(gPad->XtoPad(fX));; 156 pty = gPad->YtoAbsPixel(gPad->YtoPad(fY));; 157 }; 158 ; 159 // Get the text control box; 160 Int_t cBoxX[5], cBoxY[5];; 161 GetControlBox(ptx, pty, -fTextAngle, cBoxX, cBoxY);; 162 cBoxY[4] = cBoxY[0];; 163 cBoxX[4] = cBoxX[0];; 164 ; 165 // Check if the point (px,py) is inside the text control box; 166 if (TMath::IsInside(px, py, 5, cBoxX, cBoxY)){; 167 return 0;; 168 } else {; 169 return 9999;; 170 }; 171}; 172 ; 173////////////////////////////////////////////////////////////////////////////////; 174/// Draw this text with new coordinates.; 175 ; 176TText *TText::DrawText(Double_t x, Double_t y, const char *text); 177{; 178 TText *newtext = new TText(x, y, text);; 179 TAttText::Copy(*newtext);; 180 newtext->SetBit(kCanDelete);; 181 if (TestBit(kTextNDC)) newtext->SetNDC();; 182 newtext->AppendPad();; 183 return newtext;; 184}; 185 ; 186////////////////////////////////////////////////////////////////////////////////; 187/// Draw this text with new coordinates.; 188 ; 189TText *TText::DrawText(Double_t x, Double_t y, const wchar_t *text); 190{; 191 TText *newtext = new TText(x, y, text);; 192 TAttText::Copy(*newtext);; 193 newtext->SetBit(kCanDelete);; 194 if (TestBit(kTextNDC)) newtext->SetNDC();; 195 newtext->AppendPad();; 196 return newtext;; 197}; 198 ; 199////////////////////////////////////////////////////////////////////////////////; 200/// Draw this text with new coordinates in NDC.; 201 ; 202TText *TText::DrawTextNDC(Double_t x, Double_t y, const char *text); 203{; 204 TText *newtext = DrawText(x, y, text);; 205 newtext->SetNDC();; 206 return newtext;; 207}; 208 ; 209////////////////////////////////////////////////////////////////////////////////; 210/// Draw this text with new coordinates in NDC.; 211 ; 212TText *TText::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TText_8cxx_source.html:5403,Test,TestBit,5403,doc/master/TText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TText_8cxx_source.html,1,['Test'],['TestBit']
Testability,"48 assert( kCoordError == fErrorType );; 549 assert( !fData.empty() && fDataPtr );; 550 assert( !fDataError.empty() && fDataErrorPtr );; 551 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 552 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 553 assert( fCoordErrors.size() == fDim );; 554 assert( fCoordErrorsPtr.size() == fDim );; 555 ; 556 fData[ fNPoints ] = val;; 557 ; 558 for( unsigned int i=0; i<fDim; i++ ); 559 {; 560 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 561 ; 562 fCoordErrors[i][ fNPoints ] = ex[i];; 563 }; 564 // in this case we store the y error and not the inverse; 565 fDataError[ fNPoints ] = eval;; 566 ; 567 FitData::Add( x );; 568 fSumContent += val;; 569 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 570 if (!fIsWeighted); 571 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 572 }; 573 ; 574 /**; 575 add multi-dim coordinate data with both error in coordinates and value; 576 */; 577 void BinData::Add( const double* x, double val, const double* ex, double elval, double ehval ); 578 {; 579 assert( kAsymError == fErrorType );; 580 ; 581 assert( !fData.empty() && fDataPtr );; 582 assert( !fDataErrorHigh.empty() && fDataErrorHighPtr );; 583 assert( !fDataErrorLow.empty() && fDataErrorLowPtr );; 584 assert( fDataError.empty() && !fDataErrorPtr );; 585 assert( fCoordErrors.size() == fDim );; 586 assert( fCoordErrorsPtr.size() == fDim );; 587 ; 588 fData[ fNPoints ] = val;; 589 ; 590 for( unsigned int i=0; i<fDim; i++ ); 591 {; 592 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 593 ; 594 fCoordErrors[i][ fNPoints ] = ex[i];; 595 }; 596 ; 597 fDataErrorLow[ fNPoints ] = elval;; 598 fDataErrorHigh[ fNPoints ] = ehval;; 599 ; 600 FitData::Add( x );; 601 fSumContent += val;; 602 if (val != 0 || elval != 1.0 || ehval != 1.0 ); 603 fSumError2 += (elval+ehval)*(elval+ehval)/4;; 604 }; 605 ; 606 ; 607 /**; 608 add the bin width data, a pointer to an array with the bin upper edge info",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:17930,assert,assert,17930,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,['assert'],['assert']
Testability,"484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brief preparation for monitoring output; 518 *; 519 */; 520 void ClassificationSettings::setResultComputation (; 521 std::string _fileNameNetConfig,; 522 std::string _fileNameResult,; 523 std::vector<Pattern>* _resultPatternContainer); 524 {; 525 m_pResultPatternContainer = _resultPatternContainer;; 526 m_fileNameResult = _fileNameResult;; 527 m_fileNameNetConfig = _fileNameNetConfig;; 528 }; 529 ; 530 ; 531 ; 532 ; 533 ; 534 ; 535 ; 536 ; 537 /** \brief compute the number of weights given the size of the input layer; 538 *; 539 */; 540 size_t Net::numWeights (size_t trainingStartLayer) const ; 541 {; 542 size_t num (0);; 543 size_t index (0);; 544 size_t prevNodes (inputSize ());; 545 for (auto& layer : m_layers); 546 {; 547 if (index >= trainingStartLayer); 548 num += layer.numWeights (prevNodes);; 549 prevNodes = layer.numNodes ();; 550 ++index;; 551 }; 552 return num;; 553 }; 554 ; 555 ; 556 size_t Net::numNodes (size_t trainingStartLayer) const ; 557 {; 558 size_t num (0);; 559 size_t index (0);; 560 for (auto& layer : m_layers); 561 {; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:17123,test,testError,17123,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,2,['test'],['testError']
Testability,4867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.35846 6.60136 0.0200632 0.00176343 43716.3 1; : 920 | 4.30933 6.53557 0.0200239 0.00175965 43801.4 2; : 921 Minimum Test error found - save the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195 0.0202769 0.00175908 43201.6 2; : 930 | 4.39879 6.60248 0.0204218 0.00176177 42872.3 3; : 931 | 4.17549 6.55946 0.0200581 0.00175886 43717.6 4; : 932 | 4.18849 6.67063 0.0200652 0.00175543 43692.5 5; : 933 Minimum Test error found - save the configuration ; : 933 | 4.07608 6.08713 0.0202588 0.00184594 43447.8 0; : 934 | 4.3998 6.10426 0.0204691 0.00178412 42815.1 1; : 935 | 4.23034 6.39854 0.0202977 0.00176426 43165.2 2; : 936 Minimum Test error ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:107662,Test,Test,107662,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.6148 0.0201377 0.00175591 43521.3 1; : 834 Minimum Test error found - save the configuration ; : 834 | 7.55905 11.3034 0.0200924 0.00180566 43747.5 0; : 835 | 7.51796 11.4086 0.0200653 0.00174972 43678.7 1; : 836 | 7.6539 11.6743 0.0201454 0.00175856 43509.3 2; : 837 | 7.98319 11.3225 0.0201169 0.00175643 43571.8 3; : 838 | 7.66699 11.6657 0.0201662 0.00181142 43585.5 4; : 839 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:100415,Test,Test,100415,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"49 && (fComp[fNdata].fType == kObjectp || fComp[fNdata].fType == kAnyp; 3150 || fComp[fNdata].fType == kObject || fComp[fNdata].fType == kAny; 3151 || fComp[fNdata].fType == kTObject || fComp[fNdata].fType == kTNamed || fComp[fNdata].fType == kTString ); 3152 ) {; 3153 fComp[fNdata].fType = fComp[fNdata].fNewType;; 3154 } else if (fComp[fNdata].fType != kCounter) {; 3155 fComp[fNdata].fType += kConv;; 3156 }; 3157 } else {; 3158 if (fComp[fNdata].fType == kCounter) {; 3159 Warning(""Compile"", ""Counter %s should not be skipped from class %s"", element->GetName(), GetName());; 3160 }; 3161 fComp[fNdata].fType += kSkip;; 3162 }; 3163 }; 3164 fCompOpt[fNdata] = &(fComp[fNdata]);; 3165 fCompFull[fNfulldata] = &(fComp[fNdata]);; 3166 ; 3167 R__ASSERT( fNdata < (fNslots - optiOut) );; 3168 ; 3169 keep = fNdata;; 3170 if (fComp[keep].fLength == 0) {; 3171 fComp[keep].fLength = 1;; 3172 }; 3173 fNdata++;; 3174 previousOptimized = kFALSE;; 3175 }; 3176 // The test 'fMethod[keep] == 0' fails to detect a variable size array; 3177 // if the counter happens to have an offset of zero, so let's explicitly; 3178 // prevent for here.; 3179 if (element->HasCounter()) keep = -1;; 3180 ++fNfulldata;; 3181 previous = element;; 3182 }; 3183 ; 3184 for (i = 0; i < fNdata; ++i) {; 3185 if (!fCompOpt[i]->fElem || fCompOpt[i]->fElem->GetType()< 0) {; 3186 continue;; 3187 }; 3188 AddReadAction(fReadObjectWise, i, fCompOpt[i]);; 3189 AddWriteAction(fWriteObjectWise, i, fCompOpt[i]);; 3190 }; 3191 for (i = 0; i < fNfulldata; ++i) {; 3192 if (!fCompFull[i]->fElem || fCompFull[i]->fElem->GetType()< 0) {; 3193 continue;; 3194 }; 3195 AddReadAction(fReadMemberWise, i, fCompFull[i]);; 3196 AddWriteAction(fWriteMemberWise, i, fCompFull[i]);; 3197 AddReadMemberWiseVecPtrAction(fReadMemberWiseVecPtr, i, fCompFull[i]);; 3198 AddWriteMemberWiseVecPtrAction(fWriteMemberWiseVecPtr, i, fCompFull[i]);; 3199 ; 3200 AddReadTextAction(fReadText, i, fCompFull[i]);; 3201 AddWriteTextAction(fWriteText, i, fCompFull[i]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:138938,test,test,138938,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['test'],['test']
Testability,"49 ; 50////////////////////////////////////////////////////////////////////////////////; 51/// Destructor. Delete the contained TFitResult pointer if needed; 52/// if ( fPointer != 0); 53/// delete fPointer;; 54 ; 55TFitResultPtr::~TFitResultPtr(); 56{; 57}; 58 ; 59////////////////////////////////////////////////////////////////////////////////; 60/// Implement the de-reference operator to make the class acts as a pointer to a TFitResult; 61/// assert in case the class does not contain a pointer to TFitResult; 62 ; 63TFitResult& TFitResultPtr::operator*() const; 64{; 65 if (!fPointer) {; 66 Error(""TFitResultPtr"",""TFitResult is empty - use the fit option S"");; 67 }; 68 return *fPointer;; 69}; 70 ; 71////////////////////////////////////////////////////////////////////////////////; 72/// Implement the -> operator to make the class acts as a pointer to a TFitResult.; 73/// assert in case the class does not contain a pointer to TFitResult; 74 ; 75TFitResult* TFitResultPtr::operator->() const; 76{; 77 if (!fPointer) {; 78 Error(""TFitResultPtr"",""TFitResult is empty - use the fit option S"");; 79 }; 80 return fPointer.get();; 81}; 82 ; 83////////////////////////////////////////////////////////////////////////////////; 84/// Return contained pointer; 85 ; 86TFitResult * TFitResultPtr::Get() const {; 87 return fPointer.get();; 88}; 89 ; 90////////////////////////////////////////////////////////////////////////////////; 91/// Assignment operator.; 92/// if needed copy the TFitResult object and delete previous one if existing; 93 ; 94TFitResultPtr & TFitResultPtr::operator=(const TFitResultPtr& rhs); 95{; 96 if ( &rhs == this) return *this; // self assignment; 97 fStatus = rhs.fStatus;; 98 fPointer = rhs.fPointer; ; 99 // if ( fPointer ) delete fPointer;; 100 // fPointer = 0;; 101 // if (rhs.fPointer != 0) fPointer = new TFitResult(*rhs);; 102 return *this;; 103}; 104 ; 105////////////////////////////////////////////////////////////////////////////////; 106/// Print the TFitResul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html:2746,assert,assert,2746,doc/master/TFitResultPtr_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFitResultPtr_8cxx_source.html,1,['assert'],['assert']
Testability,4; : 1131 | 2.55367 2.59723 0.0200573 0.00177202 43751.1 15; : 1132 | 2.73554 2.74944 0.020135 0.00176885 43558.3 16; : 1133 | 2.68556 2.54814 0.0200421 0.00176557 43772.1 17; : 1134 | 2.52258 2.47147 0.0200724 0.0017645 43696.9 18; : 1135 | 2.54757 2.67188 0.0200351 0.00176104 43778 19; : 1136 | 2.63764 2.78828 0.0200363 0.0017639 43781.8 20; : 1137 Minimum Test error found - save the configuration ; : 1137 | 2.5743 2.19951 0.0201074 0.00183887 43791.1 0; : 1138 | 2.48438 2.23196 0.0200456 0.00175699 43743.1 1; : 1139 | 2.50812 2.26597 0.0200665 0.00175755 43694.4 2; : 1140 | 2.3988 2.24899 0.0200386 0.00175805 43762.4 3; : 1141 | 2.7672 3.06409 0.0200539 0.00176427 43740.6 4; : 1142 | 2.49905 2.42566 0.0200843 0.00176461 43669 5; : 1143 | 2.42701 2.41776 0.0200668 0.00178464 43758.5 6; : 1144 | 2.26582 2.24235 0.0200333 0.00176428 43790 7; : 1145 | 2.32819 2.25052 0.0200451 0.00176354 43759.9 8; : 1146 | 2.38829 2.61112 0.0201128 0.00176481 43601.4 9; : 1147 Minimum Test error found - save the configuration ; : 1147 | 2.71251 2.10665 0.0201008 0.00183197 43790.4 0; : 1148 | 2.56397 2.40861 0.020487 0.00176022 42719.5 1; : 1149 | 2.55242 2.99103 0.0200648 0.00175967 43703.6 2; : 1150 | 2.53052 2.44638 0.0200564 0.00175887 43721.8 3; : 1151 | 2.36129 2.75405 0.0200417 0.00175605 43750.1 4; : 1152 | 2.30106 2.27284 0.0200533 0.00175628 43722.9 5; : 1153 | 2.28835 2.14929 0.0200647 0.00175706 43697.6 6; : 1154 Minimum Test error found - save the configuration ; : 1154 | 2.32858 2.0616 0.0201066 0.00182104 43750.5 0; : 1155 | 2.28245 2.19923 0.0201625 0.00180627 43581.8 1; : 1156 | 2.38727 2.77806 0.0202008 0.00175311 43365.8 2; : 1157 | 2.61021 2.4986 0.0209687 0.00176336 41655.1 3; : 1158 | 2.53941 2.59597 0.020405 0.00180555 43012.1 4; : 1159 | 2.53249 2.63389 0.0200503 0.0017649 43750.8 5; : 1160 | 2.39348 2.24444 0.0200488 0.00176513 43755 6; : 1161 | 2.30038 2.13197 0.0204918 0.00181558 42835.3 7; : 1162 Minimum Test error found - save the configuration ; : 1162 |,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:122618,Test,Test,122618,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"4; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::RemoveAtTObject * RemoveAt(Int_t idx) overrideRemove object at index idx.Definition TObjArray.cxx:694; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjLink::NextTObjLink * Next()Definition TList.h:151; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Notifyvirtual Bool_t Notify()This method must be overridden to handle object notification (the base implementation is no-op).Definition TObject.cxx:599; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::kBitMask@ kBitMaskDefinition TObject.h:86; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::kOnlyPrepStep@ kOnlyPrepStepUsed to request that the class specific implementation of TObject::Write just prepare the objects to ...Definition TObject.h:106; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:421856,Test,TestBit,421856,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Test'],['TestBit']
Testability,"4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables.; 2004/// Biometrics 29, 205-220.; 2005/// - [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity; 2006/// test in 2xN tables. Biometrics 21, 19-33.; 2007/// - [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis.; 2008/// John Wiley & Sons Inc., New York.; 2009 ; 2010Double_t TH1::Chi2Test(const TH1* h2, Option_t *option, Double_t *res) const; 2011{; 2012 Double_t chi2 = 0;; 2013 Int_t ndf = 0, igood = 0;; 2014 ; 2015 TString opt = option;; 2016 opt.ToUpper();; 2017 ; 2018 Double_t prob = Chi2TestX(h2,chi2,ndf,igood,option,res);; 2019 ; 2020 if(opt.Contains(""P"")) {; 2021 printf(""Chi2 = %f, Prob = %g, NDF = %d, igood = %d\n"", chi2,prob,ndf,igood);; 2022 }; 2023 if(opt.Contains(""CHI2/NDF"")) {; 2024 if (ndf == 0) return 0;; 2025 return chi2/ndf;; 2026 }; 2027 if(opt.Contains(""CHI2"")) {; 2028 return chi2;; 2029 }; 2030 ; 2031 return prob;; 2032}; 2033 ; 2034////////////////////////////////////////////////////////////////////////////////; 2035/// The computation routine of the Chisquare test. For the method description,; 2036/// see Chi2Test() function.; 2037///; 2038/// \return p-value; 2039/// \param[in] h2 the second histogram; 2040/// \param[in] option; 2041/// - ""UU"" = experiment experiment comparison (unweighted-unweighted); 2042/// - ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first; 2043/// histogram should be unweighted; 2044/// - ""WW"" = MC MC comparison (weighted-weighted); 2045/// - ""NORM"" = if one or both histograms is scaled; 2046/// - ""OF"" = overflows included; 2047/// - ""UF"" = underflows included; 2048/// by default underflows and overflows are not included; 2049/// \param[out] igood test output; 2050/// - igood=0 - no problems; 2051/// - For unweighted unweighted comparison; 2052/// - igood=1'There is a bin in the 1st histogram with less than 1 event'; 2053/// - igood=2'There is a bin in the 2nd histogram with less than ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:82943,test,test,82943,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability,"4_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelectorDraw::ProcessFill(Long64_t entry); virtual voidTSelectorDraw::ProcessFillMultiple(Long64_t entry); virtual voidTSelectorDraw::ProcessFillObject(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelectorDraw::SetEstimate(Long64_t n); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTSelector::SlaveBegin(TTree*); virtual voidTSelector::SlaveTerminate(); virtual UInt_tTSelectorDraw::SplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSelectorDraw::TakeAction(); virtual voidTSelectorDraw::TakeEstimate(); virtual voidTSelectorDraw::Terminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveSelectorToEventList.html:6812,Test,TestBit,6812,root/html530/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html530/TEveSelectorToEventList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,5 0; : 564 Minimum Test error found - save the configuration ; : 564 | 186.85 112.339 0.0201831 0.00181479 43553.4 0; : 565 Minimum Test error found - save the configuration ; : 565 | 185.071 111.259 0.0203048 0.00182605 43292.9 0; : 566 Minimum Test error found - save the configuration ; : 566 | 182.616 110.112 0.0201778 0.00183613 43616.5 0; : 567 Minimum Test error found - save the configuration ; : 567 | 180.473 109.26 0.0202561 0.00182678 43409.1 0; : 568 Minimum Test error found - save the configuration ; : 568 | 178.451 108.059 0.0201373 0.00182611 43689.1 0; : 569 Minimum Test error found - save the configuration ; : 569 | 176.264 106.78 0.0201111 0.00181323 43721.1 0; : 570 Minimum Test error found - save the configuration ; : 570 | 174.355 105.885 0.0201445 0.00181905 43655.2 0; : 571 | 172.647 106.784 0.0200848 0.0017791 43702.2 1; : 572 Minimum Test error found - save the configuration ; : 572 | 170.589 104.683 0.020165 0.00182763 43626.8 0; : 573 Minimum Test error found - save the configuration ; : 573 | 168.468 102.528 0.0201413 0.00182619 43679.9 0; : 574 Minimum Test error found - save the configuration ; : 574 | 166.622 102.085 0.0201407 0.00181861 43663.2 0; : 575 Minimum Test error found - save the configuration ; : 575 | 164.293 100.588 0.0203765 0.00182671 43127.2 0; : 576 Minimum Test error found - save the configuration ; : 576 | 162.136 99.7953 0.0201485 0.00182291 43654.8 0; : 577 Minimum Test error found - save the configuration ; : 577 | 160.429 98.8873 0.0202404 0.00182125 43433.1 0; : 578 Minimum Test error found - save the configuration ; : 578 | 158.663 98.2522 0.020118 0.00181189 43701.3 0; : 579 Minimum Test error found - save the configuration ; : 579 | 156.666 96.9925 0.0201133 0.00181082 43710 0; : 580 Minimum Test error found - save the configuration ; : 580 | 154.635 96.1367 0.0201142 0.00181294 43712.9 0; : 581 Minimum Test error found - save the configuration ; : 581 | 153.026 95.3539 0.0201307 0.0018172 43683.7 0; : 582 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:75738,Test,Test,75738,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80550,Test,Test,80550,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:82755,Test,Test,82755,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"5 double eps_minus = nominal - low;; 266 double S = 0.5 * (eps_plus + eps_minus);; 267 double A = 0.0625 * (eps_plus - eps_minus);; 268 ; 269 return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));; 270 } else if (code == 5) {; 271 double x = paramVal;; 272 double mod = 1.0;; 273 if (x >= boundary) {; 274 mod = std::pow(high / nominal, +paramVal);; 275 } else if (x <= -boundary) {; 276 mod = std::pow(low / nominal, -paramVal);; 277 } else {; 278 // interpolate 6th degree exp; 279 double x0 = boundary;; 280 ; 281 high /= nominal;; 282 low /= nominal;; 283 ; 284 // GHL: Swagato's suggestions; 285 double powUp = std::pow(high, x0);; 286 double powDown = std::pow(low, x0);; 287 double logHi = std::log(high);; 288 double logLo = std::log(low);; 289 double powUpLog = high <= 0.0 ? 0.0 : powUp * logHi;; 290 double powDownLog = low <= 0.0 ? 0.0 : -powDown * logLo;; 291 double powUpLog2 = high <= 0.0 ? 0.0 : powUpLog * logHi;; 292 double powDownLog2 = low <= 0.0 ? 0.0 : -powDownLog * logLo;; 293 ; 294 double S0 = 0.5 * (powUp + powDown);; 295 double A0 = 0.5 * (powUp - powDown);; 296 double S1 = 0.5 * (powUpLog + powDownLog);; 297 double A1 = 0.5 * (powUpLog - powDownLog);; 298 double S2 = 0.5 * (powUpLog2 + powDownLog2);; 299 double A2 = 0.5 * (powUpLog2 - powDownLog2);; 300 ; 301 // fcns+der+2nd_der are eq at bd; 302 ; 303 double a = 1. / (8 * x0) * (15 * A0 - 7 * x0 * S1 + x0 * x0 * A2);; 304 double b = 1. / (8 * x0 * x0) * (-24 + 24 * S0 - 9 * x0 * A1 + x0 * x0 * S2);; 305 double c = 1. / (4 * std::pow(x0, 3)) * (-5 * A0 + 5 * x0 * S1 - x0 * x0 * A2);; 306 double d = 1. / (4 * std::pow(x0, 4)) * (12 - 12 * S0 + 7 * x0 * A1 - x0 * x0 * S2);; 307 double e = 1. / (8 * std::pow(x0, 5)) * (+3 * A0 - 3 * x0 * S1 + x0 * x0 * A2);; 308 double f = 1. / (8 * std::pow(x0, 6)) * (-8 + 8 * S0 - 5 * x0 * A1 + x0 * x0 * S2);; 309 ; 310 // evaluate the 6-th degree polynomial using Horner's method; 311 double value = 1. + x * (a + x * (b + x * (c + x * (d + x * (e + x * f)))));; 312 m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:8954,log,logLo,8954,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['log'],['logLo']
Testability,"5 of file LogLikelihoodFCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFunction. Definition at line 48 of file LogLikelihoodFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseObjFunction. Definition at line 47 of file LogLikelihoodFCN.h. ◆ IModelFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::IParamMultiFunctionTempl<T> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 50 of file LogLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:7500,Log,LogLikelihoodFCN,7500,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"5 of file RooAbsArg.h. ◆ makeLegacyIterator(). RooAbsArg::RefCountListLegacyIterator_t * RooAbsArg::makeLegacyIterator ; (; const RefCountList_t & ; list); const. private . Definition at line 2464 of file RooAbsArg.cxx. ◆ namePtr(). const TNamed * RooAbsArg::namePtr ; (; ); const. inline . De-duplicated pointer to this object's name. ; This can be used for fast name comparisons. like if (namePtr() == other.namePtr()). NoteTNamed::GetName() will return a pointer that's different for each object, but namePtr() always points to a unique instance. ; Definition at line 535 of file RooAbsArg.h. ◆ numCaches(). Int_t RooAbsArg::numCaches ; (; ); const. Return number of registered caches. ; Definition at line 2136 of file RooAbsArg.cxx. ◆ numProxies(). Int_t RooAbsArg::numProxies ; (; ); const. Return the number of registered proxies. ; Definition at line 1457 of file RooAbsArg.cxx. ◆ observableOverlaps() [1/2]. bool RooAbsArg::observableOverlaps ; (; const RooAbsData * ; dset, . const RooAbsArg & ; testArg . ); const. Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ; Definition at line 914 of file RooAbsArg.cxx. ◆ observableOverlaps() [2/2]. bool RooAbsArg::observableOverlaps ; (; const RooArgSet * ; depList, . const RooAbsArg & ; testArg . ); const. Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ; Definition at line 924 of file RooAbsArg.cxx. ◆ operator=(). RooAbsArg & RooAbsArg::operator= ; (; const RooAbsArg & ; other). delete . ◆ operator==(). virtual bool RooAbsArg::operator== ; (; const RooAbsArg & ; other); const. pure virtual . Implemented in RooAbsCategory, RooAbsReal, and RooStringVar. ◆ operMode(). OperMode RooAbsArg::operMode ; (; ); const. inline . Query the operation mode of this node. ; Definition at line 456 of file RooAbsArg.h. ◆ operModeHook(). virtual void RooAbsArg::operModeHook ; (; ). inlineprotectedvirtual . Reimplem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:76844,test,testArg,76844,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['test'],['testArg']
Testability,"5 return;; 426 // all this code below is not needed when using TTReeFormula; 427 ; 428 Log() << kDEBUG << Form(""Dataset[%s] : "", dsi.GetName()) << ""enable branches"" << Endl;; 429 // now enable only branches that are needed in any input formula, target, cut, weight; 430 ; 431 if (!hasDollar) {; 432 tr->SetBranchStatus(""*"",0);; 433 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: input variables"" << Endl;; 434 // input vars; 435 for (formIt = fInputFormulas.begin(); formIt!=fInputFormulas.end(); ++formIt) {; 436 ttf = *formIt;; 437 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++) {; 438 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 439 }; 440 }; 441 // targets; 442 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: targets"" << Endl;; 443 for (formIt = fTargetFormulas.begin(); formIt!=fTargetFormulas.end(); ++formIt) {; 444 ttf = *formIt;; 445 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++); 446 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 447 }; 448 // spectators; 449 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: spectators"" << Endl;; 450 for (formIt = fSpectatorFormulas.begin(); formIt!=fSpectatorFormulas.end(); ++formIt) {; 451 ttf = *formIt;; 452 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++); 453 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 454 }; 455 // cuts; 456 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: cuts"" << Endl;; 457 for (formIt = fCutFormulas.begin(); formIt!=fCutFormulas.end(); ++formIt) {; 458 ttf = *formIt;; 459 if (!ttf) continue;; 460 for (Int_t bi = 0; bi<ttf->GetNcodes(); bi++); 461 tr->SetBranchStatus( ttf->GetLeaf(bi)->GetBranch()->GetName(), 1 );; 462 }; 463 // weights; 464 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""enable branches: weights"" << Endl;; 465 for (formIt = fWeightFormula.begin(); formIt!=fWeightFormula.end(); ++formIt) {; 466 ttf = *form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:18422,Log,Log,18422,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"5 v[1] = c * rot[1] - s * rot[4];; 2026 v[2] = c * rot[2] - s * rot[5];; 2027 v[3] = s * rot[0] + c * rot[3];; 2028 v[4] = s * rot[1] + c * rot[4];; 2029 v[5] = s * rot[2] + c * rot[5];; 2030 v[6] = rot[6];; 2031 v[7] = rot[7];; 2032 v[8] = rot[8];; 2033 fRotation->SetMatrix(v);; 2034 fRotation->SetBit(kGeoRotation);; 2035 if (!IsTranslation()); 2036 return;; 2037 v[0] = c * fTranslation[0] - s * fTranslation[1];; 2038 v[1] = s * fTranslation[0] + c * fTranslation[1];; 2039 v[2] = fTranslation[2];; 2040 memcpy(fTranslation, v, kN3);; 2041}; 2042 ; 2043////////////////////////////////////////////////////////////////////////////////; 2044/// Multiply by a reflection respect to YZ.; 2045 ; 2046void TGeoCombiTrans::ReflectX(Bool_t leftside, Bool_t rotonly); 2047{; 2048 if (leftside && !rotonly); 2049 fTranslation[0] = -fTranslation[0];; 2050 if (!fRotation || !TestBit(kGeoMatrixOwned)) {; 2051 if (fRotation); 2052 fRotation = new TGeoRotation(*fRotation);; 2053 else; 2054 fRotation = new TGeoRotation();; 2055 SetBit(kGeoMatrixOwned);; 2056 }; 2057 SetBit(kGeoRotation);; 2058 fRotation->ReflectX(leftside);; 2059 SetBit(kGeoReflection, !IsReflection());; 2060}; 2061 ; 2062////////////////////////////////////////////////////////////////////////////////; 2063/// Multiply by a reflection respect to ZX.; 2064 ; 2065void TGeoCombiTrans::ReflectY(Bool_t leftside, Bool_t rotonly); 2066{; 2067 if (leftside && !rotonly); 2068 fTranslation[1] = -fTranslation[1];; 2069 if (!fRotation || !TestBit(kGeoMatrixOwned)) {; 2070 if (fRotation); 2071 fRotation = new TGeoRotation(*fRotation);; 2072 else; 2073 fRotation = new TGeoRotation();; 2074 SetBit(kGeoMatrixOwned);; 2075 }; 2076 SetBit(kGeoRotation);; 2077 fRotation->ReflectY(leftside);; 2078 SetBit(kGeoReflection, !IsReflection());; 2079}; 2080 ; 2081////////////////////////////////////////////////////////////////////////////////; 2082/// Multiply by a reflection respect to XY.; 2083 ; 2084void TGeoCombiTrans::ReflectZ(Bool_t leftside, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:71408,Test,TestBit,71408,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Test'],['TestBit']
Testability,"5 {; 656 if (drops.empty () || weights.empty ()); 657 return;; 658 ; 659 auto itWeight = std::begin (weights);; 660 auto itWeightEnd = std::end (weights);; 661 auto itDrop = std::begin (drops);; 662 auto itDropEnd = std::end (drops);; 663 size_t numNodesPrev = inputSize ();; 664 double dropFractionPrev = *itDrop;; 665 ++itDrop;; 666 ; 667 for (auto& layer : layers ()); 668 {; 669 if (itDrop == itDropEnd); 670 break;; 671 ; 672 size_t _numNodes = layer.numNodes ();; 673 ; 674 double dropFraction = *itDrop;; 675 double pPrev = 1.0 - dropFractionPrev;; 676 double p = 1.0 - dropFraction;; 677 p *= pPrev;; 678 ; 679 if (inverse); 680 {; 681 p = 1.0/p;; 682 }; 683 size_t _numWeights = layer.numWeights (numNodesPrev);; 684 for (size_t iWeight = 0; iWeight < _numWeights; ++iWeight); 685 {; 686 if (itWeight == itWeightEnd); 687 break;; 688 ; 689 *itWeight *= p;; 690 ++itWeight;; 691 }; 692 numNodesPrev = _numNodes;; 693 dropFractionPrev = dropFraction;; 694 ++itDrop;; 695 }; 696 }; 697 ; 698 ; 699 ; 700 ; 701 ; 702 ; 703/*! \brief execute the training until convergence emerges; 704 *; 705 * \param weights the container with the weights (synapses); 706 * \param trainPattern the pattern for the training; 707 * \param testPattern the pattern for the testing; 708 * \param minimizer the minimizer (e.g. steepest gradient descent) to be used; 709 * \param settings the settings for the training (e.g. multithreading or not, regularization etc.); 710 */; 711 template <typename Minimizer>; 712 double Net::train (std::vector<double>& weights,; 713 std::vector<Pattern>& trainPattern,; 714 const std::vector<Pattern>& testPattern,; 715 Minimizer& minimizer,; 716 Settings& settings); 717 {; 718// std::cout << ""START TRAINING"" << std::endl;; 719 settings.startTrainCycle ();; 720 ; 721 // JsMVA progress bar maximum (100%); 722 if (fIPyMaxIter) *fIPyMaxIter = 100;; 723 ; 724 settings.pads (4);; 725 settings.create (""trainErrors"", 100, 0, 100, 100, 0,1);; 726 settings.create (""testErrors"", 100, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:20676,test,testPattern,20676,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['test'],"['testPattern', 'testing']"
Testability,"5) 0.947 (0.933) 0.981 (0.980); : -------------------------------------------------------------------------------------------------------------------; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> Factory : Booking method: BDTG_fold2; : ; <HEADER> BDTG_fold2 : #events: (reweighted) sig: 499 bkg: 499; : #events: (unweighted) sig: 499 bkg: 499; : Training 100 Decision Trees ... patience please; : Elapsed time for training with 998 events: 0.0434 sec ; <HEADER> BDTG_fold2 : [datasetcv] : Evaluation of BDTG_fold2 on training sample (998 events); : Elapsed time for evaluation of 998 events: 0.00338 sec ; : Creating xml weight file: datasetcv/weights/TMVACrossValidation_BDTG_fold2.weights.xml; : Creating standalone class: datasetcv/weights/TMVACrossValidation_BDTG_fold2.class.C; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG_fold2 for Classification performance; : ; <HEADER> BDTG_fold2 : [datasetcv] : Evaluation of BDTG_fold2 on testing sample (1000 events); : Elapsed time for evaluation of 1000 events: 0.00341 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDTG_fold2; : ; <HEADER> BDTG_fold2 : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv BDTG_fold2 : 0.961; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from traini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:6478,Test,Test,6478,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,3,"['Test', 'test']","['Test', 'testing']"
Testability,5.1 2; : 1030 | 3.28552 3.92634 0.0200717 0.0017618 43692.2 3; : 1031 | 3.09879 3.64842 0.0200603 0.0017557 43704.9 4; : 1032 | 3.23242 4.45782 0.0201318 0.0017893 43614.6 5; : 1033 Minimum Test error found - save the configuration ; : 1033 | 3.57665 3.43738 0.0206178 0.00193324 42816.1 0; : 1034 | 3.26951 3.4755 0.0201231 0.00175901 43563.3 1; : 1035 | 3.0748 4.32816 0.0202002 0.00180771 43496 2; : 1036 | 3.05868 3.88772 0.0202082 0.00176323 43372.3 3; : 1037 | 3.11243 3.8552 0.0200473 0.00176925 43768.4 4; : 1038 | 2.97479 4.01382 0.020048 0.00176307 43752 5; : 1039 | 3.15714 3.85081 0.0200388 0.00176348 43774.8 6; : 1040 | 2.97124 3.72013 0.0200295 0.00176294 43795.8 7; : 1041 | 2.92938 3.63611 0.020078 0.00179099 43746.9 8; : 1042 | 3.04184 3.72584 0.0202124 0.00176555 43367.8 9; : 1043 | 3.24904 3.46339 0.0200395 0.00176046 43765.9 10; : 1044 | 3.08383 3.85222 0.0200574 0.0017582 43717.6 11; : 1045 | 3.00904 3.46043 0.0200555 0.00175872 43723.6 12; : 1046 Minimum Test error found - save the configuration ; : 1046 | 2.89922 3.28968 0.0204754 0.00188349 43029.5 0; : 1047 | 3.06628 3.80261 0.0206565 0.00177157 42361.9 1; : 1048 | 3.0482 4.21427 0.0203272 0.00175981 43086.2 2; : 1049 | 3.02565 3.406 0.0200479 0.00175462 43732 3; : 1050 | 3.16008 3.99499 0.0202749 0.00175016 43185.5 4; : 1051 | 3.00714 3.41105 0.0202798 0.00177822 43239.5 5; : 1052 Minimum Test error found - save the configuration ; : 1052 | 2.87354 3.24293 0.0202139 0.00182119 43495.4 0; : 1053 | 2.96323 3.45692 0.0200573 0.00175839 43718.4 1; : 1054 | 2.84926 3.80103 0.0200558 0.00175409 43711.6 2; : 1055 | 2.95781 3.27091 0.020067 0.00175747 43693.1 3; : 1056 | 3.19444 5.21663 0.0200546 0.00175884 43725.9 4; : 1057 | 3.64244 3.58532 0.0204609 0.00177451 42811.8 5; : 1058 | 3.4344 3.25697 0.0201011 0.00178651 43681.1 6; : 1059 | 2.82841 3.35413 0.020208 0.00176662 43380.6 7; : 1060 | 2.98819 3.74969 0.0202318 0.00179746 43397.3 8; : 1061 | 3.26859 3.94266 0.0201482 0.00175781 43501 9; : 1062 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:116145,Test,Test,116145,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"5/// Returns the number of bytes read from the input buffer.; 2666/// - If entry does not exist, then returns 0.; 2667/// - If an I/O error occurs, then returns -1.; 2668///; 2669/// See IMPORTANT REMARKS in TTree::GetEntry.; 2670 ; 2671Int_t TBranchElement::GetEntry(Long64_t entry, Int_t getall); 2672{; 2673 // Remember which entry we are reading.; 2674 fReadEntry = entry;; 2675 ; 2676 // If our tree has a branch ref, make it remember the entry and; 2677 // this branch. This allows a TRef::GetObject() call done during; 2678 // the following I/O operation, for example in a custom streamer,; 2679 // to search for the referenced object in the proper element of the; 2680 // proper branch.; 2681 TBranchRef* bref = fTree->GetBranchRef();; 2682 if (R__unlikely(bref)) {; 2683 R__LOCKGUARD_IMT(gROOTMutex); // Lock for parallel TTree I/O; 2684 fBranchID = bref->SetParent(this, fBranchID);; 2685 bref->SetRequestedEntry(entry);; 2686 }; 2687 ; 2688 Int_t nbytes = 0;; 2689 ; 2690 if (R__unlikely(IsAutoDelete())) {; 2691 SetBit(kDeleteObject);; 2692 SetAddress(fAddress);; 2693 } else {; 2694 if (R__unlikely(!fAddress && !TestBit(kDecomposedObj))) {; 2695 R__LOCKGUARD_IMT(gROOTMutex); // Lock for parallel TTree I/O; 2696 SetupAddressesImpl();; 2697 }; 2698 }; 2699 ; 2700 Int_t nbranches = fBranches.GetEntriesFast();; 2701 if (nbranches) {; 2702 // -- Branch has daughters.; 2703 // One must always read the branch counter.; 2704 // In the case when one reads consecutively twice the same entry,; 2705 // the user may have cleared the TClonesArray between the GetEntry calls.; 2706 if ((fType == 3) || (fType == 4)) {; 2707 Int_t nb = TBranch::GetEntry(entry, getall);; 2708 if (nb < 0) {; 2709 return nb;; 2710 }; 2711 nbytes += nb;; 2712 }; 2713 switch(fSTLtype) {; 2714 case ROOT::kSTLset:; 2715 case ROOT::kSTLmultiset:; 2716 case ROOT::kSTLunorderedset:; 2717 case ROOT::kSTLunorderedmultiset:; 2718 case ROOT::kSTLmap:; 2719 case ROOT::kSTLmultimap:; 2720 case ROOT::kSTLunorderedmap:; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:96223,Test,TestBit,96223,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,50.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:82416,Test,Test,82416,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,50/// (Also known as MakeClass mode).; 5551/// Return whether the setting was possible (it is not possible for; 5552/// TBranch and TBranchObject).; 5553 ; 5554bool TBranchElement::SetMakeClass(bool decomposeObj); 5555{; 5556 if (decomposeObj); 5557 SetBit(kDecomposedObj); // Same as SetBit(kMakeClass); 5558 else; 5559 ResetBit(kDecomposedObj);; 5560 ; 5561 Int_t nbranches = fBranches.GetEntriesFast();; 5562 for (Int_t i = 0; i < nbranches; ++i) {; 5563 TBranchElement* branch = (TBranchElement*) fBranches[i];; 5564 branch->SetMakeClass(decomposeObj);; 5565 }; 5566 SetReadLeavesPtr();; 5567 SetFillLeavesPtr();; 5568 ; 5569 return true;; 5570}; 5571 ; 5572////////////////////////////////////////////////////////////////////////////////; 5573/// Set object this branch is pointing to.; 5574 ; 5575void TBranchElement::SetObject(void* obj); 5576{; 5577 if (TestBit(kDoNotProcess)) {; 5578 return;; 5579 }; 5580 fObject = (char*)obj;; 5581 SetAddress( &fObject );; 5582}; 5583 ; 5584////////////////////////////////////////////////////////////////////////////////; 5585/// Set offset of the object (to which the data member represented by this; 5586/// branch belongs) inside its containing object (if any).; 5587 ; 5588void TBranchElement::SetOffset(Int_t offset); 5589{; 5590 // We need to make sure that the Read and Write action's configuration; 5591 // properly reflect this value.; 5592 ; 5593 if (offset == TVirtualStreamerInfo::kMissing) {; 5594 SetMissing();; 5595 return;; 5596 }; 5597 ; 5598 if (fReadActionSequence) {; 5599 fReadActionSequence->AddToOffset(offset - fOffset);; 5600 }; 5601 if (fFillActionSequence) {; 5602 fFillActionSequence->AddToOffset(offset - fOffset);; 5603 }; 5604 fOffset = offset;; 5605}; 5606 ; 5607////////////////////////////////////////////////////////////////////////////////; 5608/// Set offset of the object (to which the data member represented by this; 5609/// branch belongs) inside its containing object (if any) to mark it as missing.; 5610 ; 5611,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:206978,Test,TestBit,206978,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"51 ; 152 TCollection() : fName(), fSize(0) { }; 153 ; 154 virtual void PrintCollectionHeader(Option_t* option) const;; 155 virtual const char* GetCollectionEntryName(TObject* entry) const;; 156 virtual void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const;; 157 ; 158public:; 159 enum { kInitCapacity = 16, kInitHashTableCapacity = 17 };; 160 ; 161 virtual ~TCollection();; 162 virtual void Add(TObject *obj) = 0;; 163 void AddVector(TObject *obj1, ...);; 164 virtual void AddAll(const TCollection *col);; 165 Bool_t AssertClass(TClass *cl) const;; 166 void Browse(TBrowser *b) override;; 167 Int_t Capacity() const { return fSize; }; 168 void Clear(Option_t *option="""") override = 0;; 169 TObject *Clone(const char *newname="""") const override;; 170 Int_t Compare(const TObject *obj) const override;; 171 Bool_t Contains(const char *name) const { return FindObject(name) != nullptr; }; 172 Bool_t Contains(const TObject *obj) const { return FindObject(obj) != nullptr; }; 173 void Delete(Option_t *option="""") override = 0;; 174 void Draw(Option_t *option="""") override;; 175 void Dump() const override;; 176 TObject *FindObject(const char *name) const override;; 177 TObject *operator()(const char *name) const;; 178 TObject *FindObject(const TObject *obj) const override;; 179 virtual Int_t GetEntries() const { return GetSize(); }; 180 const char *GetName() const override;; 181 virtual TObject **GetObjectRef(const TObject *obj) const = 0;; 182 /// Return the *capacity* of the collection, i.e. the current total amount of space that has been allocated so far.; 183 /// Same as `Capacity`. Use `GetEntries` to get the number of elements currently in the collection.; 184 virtual Int_t GetSize() const { return fSize; }; 185 virtual Int_t GrowBy(Int_t delta) const;; 186 ULong_t Hash() const override { return fName.Hash(); }; 187 Bool_t IsArgNull(const char *where, const TObject *obj) const;; 188 virtual Bool_t IsEmpty() const { return GetSize() <= 0; }; 189 Bool_t IsF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:5644,Assert,AssertClass,5644,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['Assert'],['AssertClass']
Testability,"51 pass_through_type passThrough (settings, batch, dropContainerTest);; 852 double testPatternError = (*this) (passThrough, weights, ModeOutput::FETCH, output);; 853 if (output.size() == (outputSize() - 1) * batch.size()); 854 {; 855 auto output_iterator = output.begin();; 856 for (auto pattern_it = batch.begin(); pattern_it != batch.end(); ++pattern_it); 857 {; 858 for (size_t output_index = 1; output_index < outputSize(); ++output_index); 859 {; 860 settings.testSample (0, *output_iterator, (*pattern_it).output ().at (0),; 861 (*pattern_it).weight ());; 862 ++output_iterator;; 863 }; 864 }; 865 }; 866 testError += testPatternError; /// batch.size ();; 867 }; 868 // testError /= testPattern.size ();; 869 }; 870 settings.endTestCycle ();; 871// testError /= weightSum;; 872 ; 873 settings.computeResult (*this, weights);; 874 ; 875 hasConverged = settings.hasConverged (testError);; 876 if (!hasConverged && !isWeightsForDrop); 877 {; 878 dropOutWeightFactor (weights, dropFractions, true); // inverse; 879 isWeightsForDrop = true;; 880 }; 881 }; 882 ++testCycleCount;; 883 ++dropOutChangeCount;; 884 ; 885 ; 886// settings.resetPlot (""errors"");; 887 settings.addPoint (""trainErrors"", cycleCount, trainError);; 888 settings.addPoint (""testErrors"", cycleCount, testError);; 889 settings.plot (""trainErrors"", ""C"", 1, kBlue);; 890 settings.plot (""testErrors"", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:26519,test,testError,26519,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['test'],"['testCycleCount', 'testError']"
Testability,51/// pyrange = fAbsHNDC \times fCh; 5552/// \f]; 5553///; 5554/// ### Conversion from px to x; 5555///; 5556/// \f[; 5557/// \Rightarrow x = \frac{xrange(px-pxlow)}{pxrange}+ xmin = fPixeltoXk + fPixeltoX \times px; 5558/// \f]; 5559///; 5560/// \f[; 5561/// \Rightarrow fPixeltoXk = xmin - pxlow \times\frac{xrange}{pxrange}; 5562/// \f]; 5563/// \f[; 5564/// fPixeltoX = \frac{xrange}{pxrange}; 5565/// \f]; 5566///; 5567/// ### Conversion from py to y; 5568///; 5569/// \f[; 5570/// \Rightarrow y = \frac{yrange(py-pylow)}{pyrange}+ ymin = fPixeltoYk + fPixeltoY \times py; 5571/// \f]; 5572///; 5573/// \f[; 5574/// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; 5575/// \f]; 5576/// \f[; 5577/// fPixeltoY = \frac{yrange}{pyrange}; 5578/// \f]; 5579///; 5580/// ### Computation of the coefficients in case of LOG scales; 5581///; 5582/// #### Conversion from pixel coordinates to world coordinates; 5583///; 5584/// \f[; 5585/// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; 5586/// \f]; 5587///; 5588/// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; 5589/// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; 5590/// Let:; 5591/// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; 5592///; 5593/// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; 5594/// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; 5595/// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; 5596/// \f[ fPixeltoX = alfa \f]; 5597///; 5598/// \f[; 5599/// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; 5600/// \f]; 5601/// Let:; 5602/// \f[ beta = Log(\frac{ymax}{ymin}) \f]; 5603/// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; 5604/// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; 5605/// \f[ y = ymin \times e^{(beta \times p,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:180416,Log,Log,180416,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Log'],['Log']
Testability,"510 TFormula *old = nullptr;; 511 R__LOCKGUARD(gROOTMutex);; 512 old = dynamic_cast<TFormula *>(gROOT->GetListOfFunctions()->FindObject(name));; 513 if (old); 514 gROOT->GetListOfFunctions()->Remove(old);; 515 if (IsReservedName(name)); 516 Error(""TFormula"", ""The name %s is reserved as a TFormula variable name.\n"", name);; 517 else; 518 gROOT->GetListOfFunctions()->Add(this);; 519 }; 520 SetBit(kNotGlobal,!addToGlobList);; 521 }; 522 }; 523}; 524 ; 525////////////////////////////////////////////////////////////////////////////////; 526/// Constructor from a full compile-able C++ expression; 527 ; 528TFormula::TFormula(const char *name, const char *formula, int ndim, int npar, bool addToGlobList) :; 529 TNamed(name,formula),; 530 fClingInput(formula),fFormula(formula); 531{; 532 fReadyToExecute = false;; 533 fClingInitialized = false;; 534 fNpar = 0;; 535 fNumber = 0;; 536 fLambdaPtr = nullptr;; 537 fFuncPtr = nullptr;; 538 fGradFuncPtr = nullptr;; 539 fHessFuncPtr = nullptr;; 540 ; 541 ; 542 fNdim = ndim;; 543 for (int i = 0; i < npar; ++i) {; 544 DoAddParameter(TString::Format(""p%d"",i), 0, false);; 545 }; 546 fAllParametersSetted = true;; 547 assert (fNpar == npar);; 548 ; 549 bool ret = InitLambdaExpression(formula);; 550 ; 551 if (ret) {; 552 ; 553 SetBit(TFormula::kLambda);; 554 ; 555 fReadyToExecute = true;; 556 ; 557 if (addToGlobList && gROOT) {; 558 TFormula *old = nullptr;; 559 R__LOCKGUARD(gROOTMutex);; 560 old = dynamic_cast<TFormula*> ( gROOT->GetListOfFunctions()->FindObject(name) );; 561 if (old); 562 gROOT->GetListOfFunctions()->Remove(old);; 563 if (IsReservedName(name)); 564 Error(""TFormula"",""The name %s is reserved as a TFormula variable name.\n"",name);; 565 else; 566 gROOT->GetListOfFunctions()->Add(this);; 567 }; 568 SetBit(kNotGlobal,!addToGlobList);; 569 }; 570 else; 571 Error(""TFormula"",""Syntax error in building the lambda expression %s"", formula );; 572}; 573 ; 574////////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:20554,assert,assert,20554,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['assert'],['assert']
Testability,"511 char *oscat = strstr(optscat,""scat="");; 8512 char *blank = strstr(oscat,"" ""); if (blank) *blank = 0;; 8513 sscanf(oscat+5,""%lg"",&scale);; 8514 }; 8515 // use an independent instance of a random generator; 8516 // instead of gRandom to avoid conflicts and; 8517 // to get same random numbers when drawing the same histogram; 8518 TRandom2 random;; 8519 marker=0;; 8520 for (Int_t j=Hparam.yfirst; j<=Hparam.ylast;j++) {; 8521 yk = fYaxis->GetBinLowEdge(j);; 8522 ystep = fYaxis->GetBinWidth(j);; 8523 for (Int_t i=Hparam.xfirst; i<=Hparam.xlast;i++) {; 8524 Int_t bin = j*(fXaxis->GetNbins()+2) + i;; 8525 xk = fXaxis->GetBinLowEdge(i);; 8526 xstep = fXaxis->GetBinWidth(i);; 8527 if (!IsInside(xk+0.5*xstep,yk+0.5*ystep)) continue;; 8528 z = fH->GetBinContent(bin);; 8529 if (z < zmin) z = zmin;; 8530 if (z > zmax) z = zmax;; 8531 if (Hoption.Logz) {; 8532 if (z > 0) z = TMath::Log10(z) - zmin;; 8533 } else {; 8534 z -= zmin;; 8535 }; 8536 if (z <= 0) continue;; 8537 k = Int_t(z*scale);; 8538 if (ltest) k++;; 8539 if (k > 0) {; 8540 for (Int_t loop=0; loop<k; loop++) {; 8541 if (k+marker >= kNMAX) {; 8542 gPad->PaintPolyMarker(marker, fXbuf.data(), fYbuf.data());; 8543 marker=0;; 8544 }; 8545 fXbuf[marker] = (random.Rndm()*xstep) + xk;; 8546 fYbuf[marker] = (random.Rndm()*ystep) + yk;; 8547 if (Hoption.Logx) {; 8548 if (fXbuf[marker] > 0) fXbuf[marker] = TMath::Log10(fXbuf[marker]);; 8549 else break;; 8550 }; 8551 if (Hoption.Logy) {; 8552 if (fYbuf[marker] > 0) fYbuf[marker] = TMath::Log10(fYbuf[marker]);; 8553 else break;; 8554 }; 8555 if (fXbuf[marker] < gPad->GetUxmin()) break;; 8556 if (fYbuf[marker] < gPad->GetUymin()) break;; 8557 if (fXbuf[marker] > gPad->GetUxmax()) break;; 8558 if (fYbuf[marker] > gPad->GetUymax()) break;; 8559 marker++;; 8560 }; 8561 }; 8562 }; 8563 }; 8564 if (marker > 0) gPad->PaintPolyMarker(marker, fXbuf.data(), fYbuf.data());; 8565 ; 8566 if (Hoption.Zscale) PaintPalette();; 8567}; 8568 ; 8569////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:305509,Log,Logz,305509,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"513 path.Form(""%s/BUILD.sh"", proofinf);; 3514#ifdef R__WINGCC; 3515 FILE *f = fopen(path.Data(), ""wb"");; 3516#else; 3517 FILE *f = fopen(path.Data(), ""w"");; 3518#endif; 3519 if (!f) {; 3520 Error(""MakeProjectParProofInf"", ""cannot create file '%s' (errno: %d)"",; 3521 path.Data(), TSystem::GetErrno());; 3522 return -1;; 3523 }; 3524 ; 3525 fprintf(f, ""#! /bin/sh\n"");; 3526 fprintf(f, ""# Build libEvent library.\n"");; 3527 fprintf(f, ""\n"");; 3528 fprintf(f, ""#\n"");; 3529 fprintf(f, ""# The environment variables ROOTPROOFLITE and ROOTPROOFCLIENT can be used to\n"");; 3530 fprintf(f, ""# adapt the script to the calling environment\n"");; 3531 fprintf(f, ""#\n"");; 3532 fprintf(f, ""# if test ! \""x$ROOTPROOFLITE\"" = \""x\""; then\n"");; 3533 fprintf(f, ""# echo \""event-BUILD: PROOF-Lite node (session has $ROOTPROOFLITE workers)\""\n"");; 3534 fprintf(f, ""# elif test ! \""x$ROOTPROOFCLIENT\"" = \""x\""; then\n"");; 3535 fprintf(f, ""# echo \""event-BUILD: PROOF client\""\n"");; 3536 fprintf(f, ""# else\n"");; 3537 fprintf(f, ""# echo \""event-BUILD: standard PROOF node\""\n"");; 3538 fprintf(f, ""# fi\n"");; 3539 fprintf(f, ""\n"");; 3540 fprintf(f, ""if [ \""\"" = \""clean\"" ]; then\n"");; 3541 fprintf(f, "" make distclean\n"");; 3542 fprintf(f, "" exit 0\n"");; 3543 fprintf(f, ""fi\n"");; 3544 fprintf(f, ""\n"");; 3545 fprintf(f, ""make\n"");; 3546 fprintf(f, ""rc=$?\n"");; 3547 fprintf(f, ""echo \""rc=$?\""\n"");; 3548 fprintf(f, ""if [ $? != \""0\"" ] ; then\n"");; 3549 fprintf(f, "" exit 1\n"");; 3550 fprintf(f, ""fi\n"");; 3551 fprintf(f, ""exit 0\n"");; 3552 ; 3553 // Close the file; 3554 fclose(f);; 3555 ; 3556 // Then SETUP.C; 3557 path.Form(""%s/SETUP.C"", proofinf);; 3558#ifdef R__WINGCC; 3559 f = fopen(path.Data(), ""wb"");; 3560#else; 3561 f = fopen(path.Data(), ""w"");; 3562#endif; 3563 if (!f) {; 3564 Error(""MakeProjectParProofInf"", ""cannot create file '%s' (errno: %d)"",; 3565 path.Data(), TSystem::GetErrno());; 3566 return -1;; 3567 }; 3568 ; 3569 fprintf(f, ""Int_t SETUP()\n"");; 3570 fprintf(f, ""{\n"");; 3571 fprintf(f, ""\n"");;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:128311,test,test,128311,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,['test'],['test']
Testability,"52/// Returns if class AutoLoading is currently enabled.; 7553 ; 7554bool TCling::IsClassAutoLoadingEnabled() const; 7555{; 7556 if (IsFromRootCling()); 7557 return false;; 7558 if (!fClingCallbacks); 7559 return false;; 7560 return fClingCallbacks->IsAutoLoadingEnabled();; 7561}; 7562 ; 7563////////////////////////////////////////////////////////////////////////////////; 7564/// Enable/Disable the AutoLoading of libraries.; 7565/// Returns the old value, i.e whether it was enabled or not.; 7566 ; 7567int TCling::SetClassAutoLoading(int autoload) const; 7568{; 7569 // If no state change is required, exit early.; 7570 // FIXME: In future we probably want to complain if we made a request which; 7571 // was with the same state as before in order to catch programming errors.; 7572 if ((bool) autoload == IsClassAutoLoadingEnabled()); 7573 return autoload;; 7574 ; 7575 assert(fClingCallbacks && ""We must have callbacks!"");; 7576 bool oldVal = fClingCallbacks->IsAutoLoadingEnabled();; 7577 fClingCallbacks->SetAutoLoadingEnabled(autoload);; 7578 return oldVal;; 7579}; 7580 ; 7581////////////////////////////////////////////////////////////////////////////////; 7582/// Enable/Disable the Autoparsing of headers.; 7583/// Returns the old value, i.e whether it was enabled or not.; 7584 ; 7585int TCling::SetClassAutoparsing(int autoparse); 7586{; 7587 bool oldVal = fHeaderParsingOnDemand;; 7588 fHeaderParsingOnDemand = autoparse;; 7589 return oldVal;; 7590}; 7591 ; 7592////////////////////////////////////////////////////////////////////////////////; 7593/// Suspend the Autoparsing of headers.; 7594/// Returns the old value, i.e whether it was suspended or not.; 7595 ; 7596Bool_t TCling::SetSuspendAutoParsing(Bool_t value) {; 7597 Bool_t old = fIsAutoParsingSuspended;; 7598 fIsAutoParsingSuspended = value;; 7599 if (fClingCallbacks) fClingCallbacks->SetAutoParsingSuspended(value);; 7600 return old;; 7601}; 7602 ; 7603/////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:295544,assert,assert,295544,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,"521 // compose_binary creates a BinaryFunction of ...; 1522 // std::plus<Double_t>() knows how to sum up two doubles; 1523 // null<Double_t>() leaves the first argument (the running sum) unchanged and returns it; 1524 //; 1525 // all together sums up all the event-weights of the events in the vector and returns it; 1526 trainingSumWeightsPerClass.at(cls) =; 1527 std::accumulate(tmpEventVector[Types::kTraining].at(cls).begin(),; 1528 tmpEventVector[Types::kTraining].at(cls).end(),; 1529 Double_t(0), [](Double_t w, const TMVA::Event *E) { return w + E->GetOriginalWeight(); });; 1530 ; 1531 testingSumWeightsPerClass.at(cls) =; 1532 std::accumulate(tmpEventVector[Types::kTesting].at(cls).begin(),; 1533 tmpEventVector[Types::kTesting].at(cls).end(),; 1534 Double_t(0), [](Double_t w, const TMVA::Event *E) { return w + E->GetOriginalWeight(); });; 1535 ; 1536 if ( cls == dsi.GetSignalClassIndex()){; 1537 trainingSumSignalWeights += trainingSumWeightsPerClass.at(cls);; 1538 testingSumSignalWeights += testingSumWeightsPerClass.at(cls);; 1539 }else{; 1540 trainingSumBackgrWeights += trainingSumWeightsPerClass.at(cls);; 1541 testingSumBackgrWeights += testingSumWeightsPerClass.at(cls);; 1542 }; 1543 }; 1544 ; 1545 // ---------------------------------; 1546 // compute renormalization factors; 1547 ; 1548 ValuePerClass renormFactor( dsi.GetNClasses() );; 1549 ; 1550 ; 1551 // for information purposes; 1552 dsi.SetNormalization( normMode );; 1553 // !! these will be overwritten later by the 'rescaled' ones if; 1554 // NormMode != None !!!; 1555 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1556 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1557 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1558 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1559 ; 1560 ; 1561 if (normMode == ""NONE"") {; 1562 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""No weight renormalisation applied: use original global and event weights"" << Endl;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:70247,test,testingSumSignalWeights,70247,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,['test'],"['testingSumSignalWeights', 'testingSumWeightsPerClass']"
Testability,"52}; 6253 ; 6254////////////////////////////////////////////////////////////////////////////////; 6255/// Fill the matrix `xarr` and `yarr` for Contour Plot.; 6256 ; 6257Int_t THistPainter::PaintContourLine(Double_t elev1, Int_t icont1, Double_t x1, Double_t y1,; 6258 Double_t elev2, Int_t icont2, Double_t x2, Double_t y2,; 6259 Double_t *xarr, Double_t *yarr, Int_t *itarr, Double_t *levels); 6260{; 6261 ; 6262 Bool_t vert;; 6263 Double_t tlen, tdif, elev, diff, pdif, xlen;; 6264 Int_t n, i, icount;; 6265 ; 6266 if (x1 == x2) {; 6267 vert = kTRUE;; 6268 tlen = y2 - y1;; 6269 } else {; 6270 vert = kFALSE;; 6271 tlen = x2 - x1;; 6272 }; 6273 ; 6274 n = icont1 +1;; 6275 tdif = elev2 - elev1;; 6276 i = 0;; 6277 icount = 0;; 6278 while (n <= icont2 && i <= kMAXCONTOUR/2 -3) {; 6279 //elev = fH->GetContourLevel(n);; 6280 elev = levels[n];; 6281 diff = elev - elev1;; 6282 pdif = diff/tdif;; 6283 xlen = tlen*pdif;; 6284 if (vert) {; 6285 if (Hoption.Logx); 6286 xarr[i] = TMath::Log10(x1);; 6287 else; 6288 xarr[i] = x1;; 6289 if (Hoption.Logy); 6290 yarr[i] = TMath::Log10(y1 + xlen);; 6291 else; 6292 yarr[i] = y1 + xlen;; 6293 } else {; 6294 if (Hoption.Logx); 6295 xarr[i] = TMath::Log10(x1 + xlen);; 6296 else; 6297 xarr[i] = x1 + xlen;; 6298 if (Hoption.Logy); 6299 yarr[i] = TMath::Log10(y1);; 6300 else; 6301 yarr[i] = y1;; 6302 }; 6303 itarr[i] = n;; 6304 icount++;; 6305 i +=2;; 6306 n++;; 6307 }; 6308 return icount;; 6309}; 6310 ; 6311////////////////////////////////////////////////////////////////////////////////; 6312/// [Draw 1D histograms error bars.](\ref HP09); 6313 ; 6314void THistPainter::PaintErrors(Option_t *); 6315{; 6316 ; 6317 // On iOS, we do not highlight histogram, if it's not picked at the moment; 6318 // (but part of histogram (axis or pavestat) was picked, that's why this code; 6319 // is called at all. This conditional statement never executes on non-iOS platform.; 6320 if (gPad->PadInHighlightMode() && gPad->GetSelected() != fH) return;; 6321 ; 6322 co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:231237,Log,Logx,231237,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability,"54 ; 555 PyGILRAII gilRaii;; 556 ; 557 // enter i/o interactive mode; 558 PyRun_InteractiveLoop(stdin, const_cast<char *>(""\0""));; 559}; 560 ; 561////////////////////////////////////////////////////////////////////////////////; 562/// Test whether the type of the given pyobject is of CPPInstance type or any; 563/// derived type.; 564 ; 565Bool_t TPython::CPPInstance_Check(PyObject *pyobject); 566{; 567 // setup; 568 if (!Initialize()); 569 return kFALSE;; 570 ; 571 PyGILRAII gilRaii;; 572 ; 573 // detailed walk through inheritance hierarchy; 574 return CPyCppyy::Instance_Check(pyobject);; 575}; 576 ; 577////////////////////////////////////////////////////////////////////////////////; 578/// Test whether the type of the given pyobject is CPPinstance type.; 579 ; 580Bool_t TPython::CPPInstance_CheckExact(PyObject *pyobject); 581{; 582 // setup; 583 if (!Initialize()); 584 return kFALSE;; 585 ; 586 PyGILRAII gilRaii;; 587 ; 588 // direct pointer comparison of type member; 589 return CPyCppyy::Instance_CheckExact(pyobject);; 590}; 591 ; 592////////////////////////////////////////////////////////////////////////////////; 593/// Test whether the type of the given pyobject is of CPPOverload type or any; 594/// derived type.; 595 ; 596Bool_t TPython::CPPOverload_Check(PyObject *pyobject); 597{; 598 // setup; 599 if (!Initialize()); 600 return kFALSE;; 601 ; 602 PyGILRAII gilRaii;; 603 ; 604 // detailed walk through inheritance hierarchy; 605 return CPyCppyy::Overload_Check(pyobject);; 606}; 607 ; 608////////////////////////////////////////////////////////////////////////////////; 609/// Test whether the type of the given pyobject is CPPOverload type.; 610 ; 611Bool_t TPython::CPPOverload_CheckExact(PyObject *pyobject); 612{; 613 // setup; 614 if (!Initialize()); 615 return kFALSE;; 616 ; 617 PyGILRAII gilRaii;; 618 ; 619 // direct pointer comparison of type member; 620 return CPyCppyy::Overload_CheckExact(pyobject);; 621}; 622 ; 623//////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8cxx_source.html:19577,Test,Test,19577,doc/master/TPython_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPython_8cxx_source.html,1,['Test'],['Test']
Testability,"54 Double_t tana = dy/dx;; 155 tana *= tana;; 156 Double_t distr = TMath::Sqrt((1+tana)/(1.0/(r1*r1) + tana/(r2*r2)));; 157 Int_t dist = 9999;; 158 if (GetFillColor() && GetFillStyle()) {; 159 if (distr > distp) dist = 0;; 160 } else {; 161 if (TMath::Abs(distr-distp)/(r1+r2) < 0.01) dist = 0;; 162 }; 163 return dist;; 164}; 165 ; 166////////////////////////////////////////////////////////////////////////////////; 167/// Draw this ellipse with its current attributes.; 168 ; 169void TEllipse::Draw(Option_t *option); 170{; 171 AppendPad(option);; 172}; 173 ; 174////////////////////////////////////////////////////////////////////////////////; 175/// Draw this ellipse with new coordinates.; 176 ; 177TEllipse *TEllipse::DrawEllipse(Double_t x1, Double_t y1,Double_t r1,Double_t r2,Double_t phimin,Double_t phimax,Double_t theta,Option_t *option); 178{; 179 TEllipse *newellipse = new TEllipse(x1, y1, r1, r2, phimin, phimax,theta);; 180 TAttLine::Copy(*newellipse);; 181 TAttFill::Copy(*newellipse);; 182 newellipse->SetBit(kCanDelete);; 183 newellipse->AppendPad(option);; 184 if (TestBit(kNoEdges)) newellipse->SetBit(kNoEdges);; 185 return newellipse;; 186}; 187 ; 188////////////////////////////////////////////////////////////////////////////////; 189/// Execute action corresponding to one event.; 190///; 191/// This member function is called when a line is clicked with the locator; 192///; 193/// If Left button clicked on one of the line end points, this point; 194/// follows the cursor until button is released.; 195///; 196/// if Middle button clicked, the line is moved parallel to itself; 197/// until the button is released.; 198///; 199/// NOTE that support for log scale is not implemented; 200 ; 201void TEllipse::ExecuteEvent(Int_t event, Int_t px, Int_t py); 202{; 203 if (!gPad) return;; 204 ; 205 Int_t kMaxDiff = 10;; 206 ; 207 Int_t i, dpx, dpy;; 208 Double_t angle,dx,dy,dphi,ct,st,fTy,fBy,fLx,fRx;; 209 static Int_t px1,py1,npe,r1,r2,sav1,sav2;; 210 const Int_t kMinSiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEllipse_8cxx_source.html:5940,Test,TestBit,5940,doc/master/TEllipse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEllipse_8cxx_source.html,1,['Test'],['TestBit']
Testability,"55 Int_t offset = element->GetOffset();; 4056#if defined(CDJ_NO_COMPILE); 4057 Int_t newType = element->GetNewType();; 4058 ; 4059 if (newType != oldType) {; 4060 if (newType > 0) {; 4061 if (oldType != TVirtualStreamerInfo::kCounter) {; 4062 oldType += TVirtualStreamerInfo::kConv;; 4063 }; 4064 } else {; 4065 oldType += TVirtualStreamerInfo::kSkip;; 4066 }; 4067 }; 4068 if ( IsDefaultVector(proxy); 4069 /*|| (proxy.GetCollectionType() == ROOT::kSTLset || proxy.GetCollectionType() == ROOT::kSTLmultiset; 4070 || proxy.GetCollectionType() == ROOT::kSTLmap || proxy.GetCollectionType() == ROOT::kSTLmultimap) */ ); 4071 {; 4072 ; 4073 // We can speed up the iteration in case of vector. We also know that all emulated collection are stored internally as a vector.; 4074 if (element->TestBit(TStreamerElement::kCache)) {; 4075 TConfiguredAction action( GetCollectionWriteAction<VectorLooper>(info,element,oldType,i,compinfo,offset) );; 4076 sequence->AddAction( UseCacheVectorLoop, new TConfigurationUseCache(info,action,element->TestBit(TStreamerElement::kRepeat)) );; 4077 } else {; 4078 sequence->AddAction(GetCollectionWriteAction<VectorLooper>(info,element,oldType,i,compinfo,offset));; 4079 }; 4080 ; 4081 // } else if (proxy.GetCollectionType() == ROOT::kSTLset || proxy.GetCollectionType() == ROOT::kSTLmultiset; 4082 // || proxy.GetCollectionType() == ROOT::kSTLmap || proxy.GetCollectionType() == ROOT::kSTLmultimap) {; 4083 // sequence->AddAction( GenericAssocCollectionAction, new TConfigSTL(info,i,compinfo,offset,0,proxy.GetCollectionClass(),0,0) );; 4084 } else {; 4085 // The usual collection case.; 4086 if (element->TestBit(TStreamerElement::kCache)) {; 4087 TConfiguredAction action( GetWriteAction<VectorLooper>(info,element,oldType,i,compinfo,offset) );; 4088 sequence->AddAction( UseCacheGenericCollection, new TConfigurationUseCache(info,action,element->TestBit(TStreamerElement::kRepeat)) );; 4089 } else {; 4090 switch (oldType) {; 4091 // read basic types; 4092 case TVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:189806,Test,TestBit,189806,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['Test'],['TestBit']
Testability,"55 std::string FullASTFilePath;; 1256 if (!HasASTFileOnDisk(M, PP, &FullASTFilePath)); 1257 continue;; 1258 ; 1259 if (GlobalIndex && KnownModuleFileNames.count(FullASTFilePath)); 1260 continue;; 1261 ; 1262 if (M->IsUnimportable); 1263 continue;; 1264 ; 1265 if (GlobalIndex); 1266 LoadModule(M->Name, clingInterp);; 1267 else {; 1268 // FIXME: We may be able to remove those checks as cling::loadModule; 1269 // checks if a module was alredy loaded.; 1270 if (std::find(CoreModules.begin(), CoreModules.end(), M->Name) != CoreModules.end()); 1271 continue; // This is a core module which was already loaded.; 1272 ; 1273 // Load system modules now and delay the other modules after we have; 1274 // loaded all system ones.; 1275 if (M->IsSystem); 1276 LoadModule(M->Name, clingInterp);; 1277 else; 1278 PendingModules.push_back(M->Name);; 1279 }; 1280 }; 1281 LoadModules(PendingModules, clingInterp);; 1282 }; 1283 ; 1284 // Check that the gROOT macro was exported by any core module.; 1285 assert(clingInterp.getMacro(""gROOT"") && ""Couldn't load gROOT macro?"");; 1286 ; 1287 // `ERROR` and `PI` are from loading R related modules, which conflict with; 1288 // user's code.; 1289 clingInterp.declare(R""CODE(; 1290#ifdef PI; 1291# undef PI; 1292#endif; 1293#ifdef ERROR; 1294# undef ERROR; 1295#endif; 1296 )CODE"");; 1297}; 1298 ; 1299static void RegisterPreIncludedHeaders(cling::Interpreter &clingInterp); 1300{; 1301 std::string PreIncludes;; 1302 bool hasCxxModules = clingInterp.getCI()->getLangOpts().Modules;; 1303 ; 1304 // For the list to also include string, we have to include it now.; 1305 // rootcling does parts already if needed, e.g. genreflex does not want using; 1306 // namespace std.; 1307 if (IsFromRootCling()) {; 1308 PreIncludes += ""#include \""RtypesCore.h\""\n"";; 1309 } else {; 1310 if (!hasCxxModules); 1311 PreIncludes += ""#include \""Rtypes.h\""\n"";; 1312 ; 1313 PreIncludes += gClassDefInterpMacro + ""\n""; 1314 + gInterpreterClassDef + ""\n""; 1315 ""#undef ClassImp\n""; 1316",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:46473,assert,assert,46473,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,5563 43751.8 2; : 803 | 10.2123 14.6873 0.0200478 0.00175638 43736.3 3; : 804 | 10.1133 14.2109 0.0201368 0.00176313 43540.5 4; : 805 Minimum Test error found - save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.7,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:99575,Test,Test,99575,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"5583 of file TSpectrum2Fit.cxx. ◆ SetTailParameters(). void TSpectrum2Fit::SetTailParameters ; (; Double_t ; tInitXY, . Bool_t ; fixTxy, . Double_t ; tInitX, . Bool_t ; fixTx, . Double_t ; tInitY, . Bool_t ; fixTy, . Double_t ; bInitX, . Bool_t ; fixBx, . Double_t ; bInitY, . Bool_t ; fixBy, . Double_t ; sInitXY, . Bool_t ; fixSxy, . Double_t ; sInitX, . Bool_t ; fixSx, . Double_t ; sInitY, . Bool_t ; fixSy . ). This function sets the following fitting parameters of tails of peaks. . tInitXY - initial value of txy parameter; fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); tInitX - initial value of tx parameter; fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); tInitY - initial value of ty parameter; fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); bInitX - initial value of bx parameter; fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); bInitY - initial value of by parameter; fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); sInitXY - initial value of sxy parameter; fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); sInitX - initial value of sx parameter; fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); sInitY - initial value of sy parameter; fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit) . Definition at line 5681 of file TSpectrum2Fit.cxx. ◆ Shape2(). Double_t TSpectrum2Fit::Shape2 ; (; Int_t ; numOfFittedPeaks, . Double_t ; x, . Double_t ; y, . const Double_t * ; parameter, . Double_t ; sigmax, . Double_t ; sigmay, . Double_t ; ro, . Double_t ; a0, . Double_t ; ax, . Double_t ; ay, . Double_t ; txy, . Double_t ; sxy, . Double_t ; tx, . Double_t ; ty, . Double_t ; sx, . Double_t ; sy, . Double_t ; bx, . Double_t ; by . ). protected . This function calculates 2D peaks ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:74562,log,logical,74562,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,8,['log'],['logical']
Testability,"56 ; 3757////////////////////////////////////////////////////////////////////////////////; 3758/// Check the boundary errors reference file created by CheckBoundaryErrors method.; 3759/// The shape for which the crossing failed is drawn with the starting point in red; 3760/// and the extrapolated point to boundary (+/- failing push/pull) in yellow.; 3761 ; 3762void TGeoManager::CheckBoundaryReference(Int_t icheck); 3763{; 3764 GetGeomPainter()->CheckBoundaryReference(icheck);; 3765}; 3766 ; 3767////////////////////////////////////////////////////////////////////////////////; 3768/// Classify a given point. See TGeoChecker::CheckPoint().; 3769 ; 3770void TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z, Option_t *option, Double_t safety); 3771{; 3772 GetGeomPainter()->CheckPoint(x, y, z, option, safety);; 3773}; 3774 ; 3775////////////////////////////////////////////////////////////////////////////////; 3776/// Test for shape navigation methods. Summary for test numbers:; 3777/// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; 3778/// directions randomly in cos(theta). Compute DistFromInside and move the; 3779/// point with bigger distance. Compute DistFromOutside back from new point.; 3780/// Plot d-(d1+d2); 3781///; 3782 ; 3783void TGeoManager::CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option); 3784{; 3785 GetGeomPainter()->CheckShape(shape, testNo, nsamples, option);; 3786}; 3787 ; 3788////////////////////////////////////////////////////////////////////////////////; 3789/// Geometry checking.; 3790/// - if option contains 'o': Optional overlap checkings (by sampling and by mesh).; 3791/// - if option contains 'b': Optional boundary crossing check + timing per volume.; 3792///; 3793/// STAGE 1: extensive overlap checking by sampling per volume. Stdout need to be; 3794/// checked by user to get report, then TGeoVolume::CheckOverlaps(0.01, ""s"") can; 3795/// be called for the suspicious volumes.; 3796///; 379",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:137824,test,test,137824,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['test'],['test']
Testability,"56 logger << "" year = \""2007\"","" << Endl;; 1457 logger << "" pages = \""040\"","" << Endl;; 1458 logger << "" eprint = \""physics/0703039\"","" << Endl;; 1459 logger << "" archivePrefix = \""arXiv\"","" << Endl;; 1460 logger << "" SLACcitation = \""%%CITATION = PHYSICS/0703039;%%\"""" << Endl;; 1461 logger << ""}"" << Endl;; 1462 break;; 1463 ; 1464 case kLaTeX:; 1465 logger << ""%\\cite{TMVA2007}"" << Endl;; 1466 logger << ""\\bibitem{TMVA2007}"" << Endl;; 1467 logger << "" A.~Hoecker, P.~Speckmayer, J.~Stelzer, J.~Therhaag, E.~von Toerne, H.~Voss"" << Endl;; 1468 logger << "" %``TMVA: Toolkit for multivariate data analysis,''"" << Endl;; 1469 logger << "" PoS A {\\bf CAT} (2007) 040"" << Endl;; 1470 logger << "" [arXiv:physics/0703039]."" << Endl;; 1471 logger << "" %%CITATION = POSCI,ACAT,040;%%"" << Endl;; 1472 break;; 1473 ; 1474 case kHtmlLink:; 1475 // logger << kINFO << "" "" << Endl;; 1476 logger << kHEADER << gTools().Color(""bold""); 1477 << ""Thank you for using TMVA!"" << gTools().Color(""reset"") << Endl;; 1478 logger << kINFO << gTools().Color(""bold""); 1479 << ""For citation information, please visit: http://tmva.sf.net/citeTMVA.html""; 1480 << gTools().Color(""reset"") << Endl;; 1481 }; 1482}; 1483 ; 1484////////////////////////////////////////////////////////////////////////////////; 1485 ; 1486Bool_t TMVA::Tools::HistoHasEquidistantBins(const TH1& h); 1487{; 1488 return !(h.GetXaxis()->GetXbins()->fN);; 1489}; 1490 ; 1491////////////////////////////////////////////////////////////////////////////////; 1492 ; 1493std::vector<TMatrixDSym*>*; 1494TMVA::Tools::CalcCovarianceMatrices( const std::vector<const Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ); 1495{; 1496 std::vector<Event*> eventVector;; 1497 for (std::vector<const Event*>::const_iterator it = events.begin(), itEnd = events.end(); it != itEnd; ++it); 1498 {; 1499 eventVector.push_back (new Event(*(*it)));; 1500 }; 1501 std::vector<TMatrixDSym*>* returnValue = CalcCovarianceMatrices (eventVector, maxCls, transfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:52946,log,logger,52946,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"56/// ~~~; 1857 ; 1858Bool_t TString::IsFloat() const; 1859{; 1860 //we first check if we have an integer, in this case, IsDigit() will be true straight away; 1861 if (IsDigit()) return kTRUE;; 1862 ; 1863 TString tmp = *this;; 1864 //now we look for occurrences of '.', ',', e', 'E', '+', '-' and replace each; 1865 //with ' ', if it is a floating point, IsDigit() will then return kTRUE; 1866 ; 1867 tmp.ToLower();; 1868 Ssiz_t pos = tmp.First('.');; 1869 if (pos != kNPOS) tmp.Replace(pos, 1, "" "", 1);; 1870 pos = tmp.First(',');; 1871 if (pos != kNPOS) tmp.Replace(pos, 1, "" "", 1);; 1872 pos = tmp.Index(""e-"");; 1873 if (pos >= 1) tmp.Replace(pos, 2, "" "", 1);; 1874 pos = tmp.Index(""e+"");; 1875 if (pos >= 1) tmp.Replace(pos, 2, "" "", 1);; 1876 pos = tmp.Index(""e"");; 1877 if (pos >= 1) tmp.Replace(pos, 1, "" "", 1);; 1878 pos = tmp.First('-');; 1879 if (pos == 0) tmp.Replace(pos, 1, "" "", 1);; 1880 pos = tmp.First('+');; 1881 if (pos == 0) tmp.Replace(pos, 1, "" "", 1);; 1882 ; 1883 //test if it is now uniquely composed of numbers; 1884 return tmp.IsDigit();; 1885}; 1886 ; 1887////////////////////////////////////////////////////////////////////////////////; 1888/// Returns true if all characters in string are hexadecimal digits; 1889/// (0-9,a-f,A-F). Returns false in case string length is 0 or string; 1890/// contains other characters.; 1891 ; 1892Bool_t TString::IsHex() const; 1893{; 1894 const char *cp = Data();; 1895 Ssiz_t len = Length();; 1896 if (len == 0) return kFALSE;; 1897 for (Ssiz_t i = 0; i < len; ++i); 1898 if (!isxdigit(cp[i])); 1899 return kFALSE;; 1900 return kTRUE;; 1901}; 1902 ; 1903////////////////////////////////////////////////////////////////////////////////; 1904/// Returns true if all characters in string are binary digits (0,1).; 1905/// Returns false in case string length is 0 or string contains other; 1906/// characters.; 1907 ; 1908Bool_t TString::IsBin() const; 1909{; 1910 const char *cp = Data();; 1911 Ssiz_t len = Length();; 1912 if (len == 0) r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:58309,test,test,58309,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['test'],['test']
Testability,"564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) - 0.705 (0.733) 0.768 (0.764) ; : bg1 0.999 (0.998) 0.752 (0.746) - 0.776 (0.809) ; : bg2 0.789 (0.786) 0.773 (0.794) 0.730 (0.736) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.979 (0.985) 1.000 (0.996) 0.986 (0.986) ; : bg0 0.943 (0.940) - 0.899 (0.901) 0.956 (0.947) ; : bg1 1.000 (0.999) 0.955 (0.957) - 0.953 (0.959) ; : bg2 0.946 (0.924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ==> Wrote root file: TMVAMulticlass.root; ==> TMVAMulticlass is done!; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/TMVAMultiClassGui.h""; ; ; using namespace TMVA;; ; void TMVAMulticlass( TString myMethodList = """" ); {; ; // This loads the library; TMVA::Tools::Instance();; ; // to get access to the GUI and all tmva macros; //; // TString tmva_dir(TString(gRootDir) + ""/tmva"");; // if(gSystem->Getenv(""TMVASYS"")); // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; // gROOT->Proces",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:31096,Test,TestTree,31096,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Test'],['TestTree']
Testability,"56; TGraphDelaunay::FileItvoid FileIt(Int_t P, Int_t N, Int_t M)Files the triangle defined by the 3 vertices p, n and m into the fxTried arrays.Definition TGraphDelaunay.cxx:237; TGraphDelaunay::fYNminDouble_t fYNmin! Minimum value of fYNDefinition TGraphDelaunay.h:49; TGraphDelaunay::fTriedSizeInt_t fTriedSize! Real size of the fxTried arraysDefinition TGraphDelaunay.h:58; TGraphDelaunay::fMTriedInt_t * fMTried!Definition TGraphDelaunay.h:61; TGraphDelaunay::fXDouble_t * fX! Pointer to fGraph2D->fXDefinition TGraphDelaunay.h:42; TGraphDelaunay::fGraph2DTGraph2D * fGraph2D! 2D graph containing the user dataDefinition TGraphDelaunay.h:66; TGraphDelaunay::FindAllTrianglesvoid FindAllTriangles()Attempt to find all the Delaunay triangles of the point set.Definition TGraphDelaunay.cxx:290; TGraphDelaunay::fAllTriBool_t fAllTri! True if FindAllTriangles() has been performed on fGraph2DDefinition TGraphDelaunay.h:64; TGraphDelaunay::SetMaxItervoid SetMaxIter(Int_t n=100000)Defines the number of triangles tested for a Delaunay triangle (number of iterations) before abandoni...Definition TGraphDelaunay.cxx:932; TGraphDelaunay::fMaxIterInt_t fMaxIter! Maximum number of iterations to find Delaunay trianglesDefinition TGraphDelaunay.h:57; TGraphDelaunay::fInitBool_t fInit! True if CreateTrianglesDataStructure() and FindHull() have been performedDefinition TGraphDelaunay.h:65; TGraphDelaunay::fOrderInt_t * fOrder! Array used to order mass points by distanceDefinition TGraphDelaunay.h:63; TGraphDelaunay::EncloseBool_t Enclose(Int_t T1, Int_t T2, Int_t T3, Int_t Ex) constIs point e inside the triangle t1-t2-t3 ?Definition TGraphDelaunay.cxx:215; TGraphDelaunay::fXScaleFactorDouble_t fXScaleFactor!Definition TGraphDelaunay.h:53; TGraphDelaunay::fNdtInt_t fNdt! Number of Delaunay triangles foundDefinition TGraphDelaunay.h:39; TGraphDelaunay::fZDouble_t * fZ! Pointer to fGraph2D->fZDefinition TGraphDelaunay.h:44; TGraphDelaunay::fYNmaxDouble_t fYNmax! Maximum value of fYNDefinition TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphDelaunay_8cxx_source.html:37578,test,tested,37578,doc/master/TGraphDelaunay_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphDelaunay_8cxx_source.html,1,['test'],['tested']
Testability,"57 fTsumwyz += v * y * z;; 558 }; 559 return bin;; 560}; 561 ; 562 ; 563////////////////////////////////////////////////////////////////////////////////; 564/// Increment cell defined by namex,namey,z by a weight w; 565///; 566/// If the weight is not equal to 1, the storage of the sum of squares of; 567/// weights is automatically triggered and the sum of the squares of weights is incremented; 568/// by w^2 in the corresponding cell.; 569/// The function returns the corresponding global bin number which has its content; 570/// incremented by w; 571 ; 572Int_t TH3::Fill(const char *namex, const char *namey, Double_t z, Double_t w); 573{; 574 Int_t binx, biny, binz, bin;; 575 fEntries++;; 576 binx = fXaxis.FindBin(namex);; 577 biny = fYaxis.FindBin(namey);; 578 binz = fZaxis.FindBin(z);; 579 if (binx <0 || biny <0 || binz<0) return -1;; 580 bin = binx + (fXaxis.GetNbins()+2)*(biny + (fYaxis.GetNbins()+2)*binz);; 581 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 582 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 583 AddBinContent(bin,w);; 584 if (binx == 0 || binx > fXaxis.GetNbins()) return -1;; 585 if (biny == 0 || biny > fYaxis.GetNbins()) return -1;; 586 if (binz == 0 || binz > fZaxis.GetNbins()) {; 587 if (!GetStatOverflowsBehaviour()) return -1;; 588 }; 589 Double_t v = w;; 590 fTsumw += v;; 591 fTsumw2 += v*v;; 592 fTsumwz += v*z;; 593 fTsumwz2 += v*z*z;; 594 // skip computation of the statistics along axis that have labels (can be extended and are aphanumeric); 595 UInt_t labelBitMask = GetAxisLabelStatus();; 596 if (labelBitMask != (TH1::kXaxis | TH1::kYaxis)) {; 597 Double_t x = (labelBitMask & TH1::kXaxis) ? 0 : fXaxis.GetBinCenter(binx);; 598 Double_t y = (labelBitMask & TH1::kYaxis) ? 0 : fYaxis.GetBinCenter(biny);; 599 fTsumwx += v * x;; 600 fTsumwx2 += v * x * x;; 601 fTsumwy += v * y;; 602 fTsumwy2 += v * y * y;; 603 fTsumwxy += v * x * y;; 604 fTsumwxz += v * x * z;; 605 fTsumwyz += v * y * z;; 606 }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:22363,Test,TestBit,22363,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability,"57 of file TObject.cxx. ◆ HandleTimer(). Bool_t TObject::HandleTimer ; (; TTimer * ; timer). virtual . Execute action in response of a timer timing out. ; This method must be overridden if an object has to react to timers. ; Reimplemented in TGWindow, TGuiBldDragManager, TSessionViewer, TGLEventHandler, TGCommandPlugin, TGDNDManager, TGFileContainer, TGPopupMenu, TGScrollBar, TGShutter, TGTextEdit, TGTextEditor, TGTextEntry, TGTextView, TGToolTip, TGHtml, TVirtualPacketizer, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, TProofPlayerLite, and TTreeViewer.; Definition at line 493 of file TObject.cxx. ◆ Hash(). ULong_t TObject::Hash ; (; ); const. virtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:515; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:42494,Test,TestBit,42494,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['Test'],['TestBit']
Testability,"571 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1572 << "" such that the effective (weighted) number of events in each class equals the respective "" << Endl;; 1573 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1574 << "" number of events (entries) that you demanded in PrepareTrainingAndTestTree(\""\"",\""nTrain_Signal=.. )"" << Endl;; 1575 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1576 << "" ... i.e. such that Sum[i=1..N_j]{w_i} = N_j, j=0,1,2..."" << Endl;; 1577 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1578 << "" ... (note that N_j is the sum of TRAINING events (nTrain_j...with j=Signal,Background.."" << Endl;; 1579 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1580 << "" ..... Testing events are not renormalised nor included in the renormalisation factor! )""<< Endl;; 1581 ; 1582 for( UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls < clsEnd; ++cls ){; 1583 // renormFactor.at(cls) = ( (trainingSizePerClass.at(cls) + testingSizePerClass.at(cls))/; 1584 // (trainingSumWeightsPerClass.at(cls) + testingSumWeightsPerClass.at(cls)) );; 1585 //changed by Helge 27.5.2013; 1586 renormFactor.at(cls) = ((Float_t)trainingSizePerClass.at(cls) )/; 1587 (trainingSumWeightsPerClass.at(cls)) ;; 1588 }; 1589 }; 1590 else if (normMode == ""EQUALNUMEVENTS"") {; 1591 //changed by Helge 27.5.2013 What on earth was done here before? I still remember the idea behind this which apparently was; 1592 //NOT understood by the 'programmer' :) .. the idea was to have SAME amount of effective TRAINING data for signal and background.; 1593 //done here was something like having each data source normalized to its number of entries and this even for training+testing together.; 1594 // what should this have been good for ???; 1595 ; 1596 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Weight renormalisation mode: \""EqualNumEvents\"": renormalises all event classes ..."" << Endl;; 1597 Log() << kINFO << Form(""Dataset[%s] : "",dsi.Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:72862,test,testingSizePerClass,72862,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testingSizePerClass']
Testability,58 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 0.0200333 0.00176264 43785.9 6; : 850 | 6.72856 10.6877 0.0200521 0.00176189 43739.2 7; : 851 | 6.84236 10.8522 0.0200238 0.00176009 43802.7 8; : 852 Minimum Test error found - save the configuration ; : 852 | 6.78011 10.0733 0.0201111 0.00182524 43749.6 0; : 853 Minimum Test error found - save the configuration ; : 853 | 6.53284 9.90736 0.0201187 0.00181829 43714.8 0; : 854 | 6.67108 10.0768 0.0205443 0.0017732 42618.8 1; : 855 | 6.58878 10.7427 0.0200637 0.00176264 43713.2 2; : 856 | 6.54513 10.3387 0.0200413 0.00176141 43764 3; : 857 Minimum Test error found - save the configuration ; : 857 | 6.43616 9.72218 0.020097 0.00182688 43787.4 0; : 858 | 6.34936 10.0458 0.0200349 0.00176193 43780.5 1; : 859 Minimum Test error found - save the configuration ; : 859 | 6.20554 9.48603 0.0201607 0.00183833 43662.6 0; : 860 | 6.16695 10.0812 0.0200598 0.00175295 43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.98345 9.15873 0.0200325 0.00175472 43768.9 1; : 870 | 5.90893 9.16507 0.0202516 0.00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 8.79318 0.0200883 0.00182097 43794.1 0; : 872 | 5.76603 9.46642 0.0200354 0.00176138 43778.1 1; : 873 Minimum Test error found - save the configuration ; : 873 | 5.70638 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:103001,Test,Test,103001,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"58 logger << "" \\:\\ \\ /:|:| | /:/ / /:/\\:\\ \\ "" << Endl;; 1359 logger << "" /::\\ \\ /:/|:|__|__ /:/__/ ___ /::\\~\\:\\ \\ "" << Endl;; 1360 logger << "" /:/\\:\\__\\ /:/ |::::\\__\\ |:| | /\\__\\ /:/\\:\\ \\:\\__\\ "" << Endl;; 1361 logger << "" /:/ \\/__/ \\/__/~~/:/ / |:| |/:/ / \\/__\\:\\/:/ / "" << Endl;; 1362 logger << ""/:/ / /:/ / |:|__/:/ / \\::/ / "" << Endl;; 1363 logger << ""\\/__/ /:/ / \\::::/__/ /:/ / "" << Endl;; 1364 logger << "" /:/ / ~~~~ /:/ / "" << Endl;; 1365 logger << "" \\/__/ \\/__/ "" << Endl << Endl;; 1366 break;; 1367 ; 1368 case kBlockWelcomeMsg:; 1369 logger << Endl;; 1370 logger << ""_|_|_|_|_| _| _| _| _| _|_| "" << Endl;; 1371 logger << "" _| _|_| _|_| _| _| _| _| "" << Endl;; 1372 logger << "" _| _| _| _| _| _| _|_|_|_| "" << Endl;; 1373 logger << "" _| _| _| _| _| _| _| "" << Endl;; 1374 logger << "" _| _| _| _| _| _| "" << Endl << Endl;; 1375 break;; 1376 ; 1377 case kLeanWelcomeMsg:; 1378 logger << Endl;; 1379 logger << ""_/_/_/_/_/ _/ _/ _/ _/ _/_/ "" << Endl;; 1380 logger << "" _/ _/_/ _/_/ _/ _/ _/ _/ "" << Endl;; 1381 logger << "" _/ _/ _/ _/ _/ _/ _/_/_/_/ "" << Endl;; 1382 logger << "" _/ _/ _/ _/ _/ _/ _/ "" << Endl;; 1383 logger << ""_/ _/ _/ _/ _/ _/ "" << Endl << Endl;; 1384 break;; 1385 ; 1386 case kLogoWelcomeMsg:; 1387 logger << Endl;; 1388 logger << ""_/_/_/_/_/ _| _| _| _| _|_| "" << Endl;; 1389 logger << "" _/ _|_| _|_| _| _| _| _| "" << Endl;; 1390 logger << "" _/ _| _| _| _| _| _|_|_|_| "" << Endl;; 1391 logger << "" _/ _| _| _| _| _| _| "" << Endl;; 1392 logger << ""_/ _| _| _| _| _| "" << Endl << Endl;; 1393 break;; 1394 ; 1395 case kSmall1WelcomeMsg:; 1396 logger << "" _____ __ ____ ___ "" << Endl;; 1397 logger << ""|_ _| \\/ \\ \\ / /_\\ "" << Endl;; 1398 logger << "" | | | |\\/| |\\ V / _ \\ "" << Endl;; 1399 logger << "" |_| |_| |_| \\_/_/ \\_\\"" << Endl << Endl;; 1400 break;; 1401 ; 1402 case kSmall2WelcomeMsg:; 1403 logger << "" _____ __ ____ ___ "" << Endl;; 1404 logger << ""|_ _| \\/ \\ \\ / / \\ "" << Endl;; 1405 logger << "" | | | |\\/| |\\ \\ / / _ \\",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:48715,log,logger,48715,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['log'],['logger']
Testability,"58 of file GSLMultiFit.h. ◆ Iterate(). int ROOT::Math::GSLMultiFit::Iterate ; (; ). inline . Definition at line 145 of file GSLMultiFit.h. ◆ Name(). std::string ROOT::Math::GSLMultiFit::Name ; (; ); const. inline . Definition at line 140 of file GSLMultiFit.h. ◆ operator=() [1/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; const GSLMultiFit & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; GSLMultiFit && ; rhs). delete . ◆ Set(). template<class Func > . int ROOT::Math::GSLMultiFit::Set ; (; const std::vector< Func > & ; funcVec, . const double * ; x . ). inline . set the solver parameters ; Definition at line 111 of file GSLMultiFit.h. ◆ TestDelta(). int ROOT::Math::GSLMultiFit::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 191 of file GSLMultiFit.h. ◆ TestGradient(). int ROOT::Math::GSLMultiFit::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from solver gradient vector) ; Definition at line 183 of file GSLMultiFit.h. ◆ X(). const double * ROOT::Math::GSLMultiFit::X ; (; ); const. inline . parameter values at the minimum ; Definition at line 151 of file GSLMultiFit.h. Member Data Documentation. ◆ fCov. gsl_matrix* ROOT::Math::GSLMultiFit::fCov. mutableprivate . Definition at line 221 of file GSLMultiFit.h. ◆ fFunc. GSLMultiFitFunctionWrapper ROOT::Math::GSLMultiFit::fFunc. private . Definition at line 216 of file GSLMultiFit.h. ◆ fSolver. gsl_multifit_fdfsolver* ROOT::Math::GSLMultiFit::fSolver. private . Definition at line 217 of file GSLMultiFit.h. ◆ fTmp. gsl_vector* ROOT::Math::GSLMultiFit::fTmp. mutableprivate . Definition at line 220 of file GSLMultiFit.h. ◆ fType. const gsl_multifit_fdfsolver_type* ROOT::Math::GSLMultiFit::fType. private . Definition at line 225 of file GSLMultiFit.h. ◆ fVec. gsl_vector* ROOT::Math::GSLMultiFit::fVec. mutableprivate . D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:4449,Test,TestGradient,4449,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,1,['Test'],['TestGradient']
Testability,5832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:100024,Test,Test,100024,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"586 ; 5587 Double_t z;; 5588 ; 5589 // Use existing max or min values. If either is already set; 5590 // the appropriate value to use.; 5591 Double_t zmin = fH->GetMinimumStored();; 5592 Double_t zmax = fH->GetMaximumStored();; 5593 Double_t originalZMin = zmin;; 5594 Double_t originalZMax = zmax;; 5595 if ((zmin == -1111) && (zmax == -1111)) {; 5596 fH->GetMinimumAndMaximum(zmin, zmax);; 5597 fH->SetMinimum(zmin);; 5598 fH->SetMaximum(zmax);; 5599 } else if (zmin == -1111) {; 5600 zmin = fH->GetMinimum();; 5601 fH->SetMinimum(zmin);; 5602 } else if (zmax == -1111) {; 5603 zmax = fH->GetMaximum();; 5604 fH->SetMaximum(zmax);; 5605 }; 5606 ; 5607 Double_t dz = zmax - zmin;; 5608 if (dz <= 0) { // Histogram filled with a constant value; 5609 zmax += 0.1*TMath::Abs(zmax);; 5610 zmin -= 0.1*TMath::Abs(zmin);; 5611 dz = zmax - zmin;; 5612 }; 5613 ; 5614 if (Hoption.Logz) {; 5615 if (zmin > 0) {; 5616 zmin = TMath::Log10(zmin);; 5617 zmax = TMath::Log10(zmax);; 5618 dz = zmax - zmin;; 5619 } else {; 5620 Error(""THistPainter::PaintColorLevelsFast(Option_t*)"",; 5621 ""Cannot plot logz because bin content is less than 0."");; 5622 return;; 5623 }; 5624 }; 5625 ; 5626 // Initialize the levels on the Z axis; 5627 Int_t ndiv = fH->GetContour();; 5628 if (ndiv == 0 ) {; 5629 ndiv = gStyle->GetNumberContours();; 5630 fH->SetContour(ndiv);; 5631 }; 5632 std::vector<Double_t> colorBounds(ndiv);; 5633 std::vector<Double_t> contours(ndiv, 0);; 5634 if (!fH->TestBit(TH1::kUserContour)) {; 5635 fH->SetContour(ndiv);; 5636 } else {; 5637 fH->GetContour(contours.data());; 5638 }; 5639 ; 5640 Double_t step = 1.0/ndiv;; 5641 for (Int_t i=0; i<ndiv; ++i) {; 5642 colorBounds[i] = step*i;; 5643 }; 5644 ; 5645 auto pFrame = gPad->GetFrame();; 5646 Int_t px0 = gPad->XtoPixel(pFrame->GetX1());; 5647 Int_t px1 = gPad->XtoPixel(pFrame->GetX2());; 5648 Int_t py0 = gPad->YtoPixel(pFrame->GetY1());; 5649 Int_t py1 = gPad->YtoPixel(pFrame->GetY2());; 5650 Int_t nXPixels = px1-px0;; 5651 Int_t nYPixels = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:209628,Log,Logz,209628,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,"['Log', 'log']","['Logz', 'logz']"
Testability,"586 TGraph graph;; 6587 graph.SetLineStyle(fH->GetLineStyle());; 6588 graph.SetLineColor(fH->GetLineColor());; 6589 graph.SetLineWidth(fH->GetLineWidth());; 6590 graph.SetFillStyle(fH->GetFillStyle());; 6591 graph.SetFillColor(fH->GetFillColor());; 6592 Int_t logx = gPad->GetLogx();; 6593 Int_t logy = gPad->GetLogy();; 6594 gPad->SetLogx(0);; 6595 gPad->SetLogy(0);; 6596 ; 6597 // In some cases the number of points in the fill area is smaller than; 6598 // 2*npoints. In such cases the array xline and yline must be arranged; 6599 // before being plotted. The next loop does that.; 6600 if (if2 > npoints) {; 6601 for (i=1; i<if1; i++) {; 6602 xline[if1-2+i] = xline[if2-1+i];; 6603 yline[if1-2+i] = yline[if2-1+i];; 6604 }; 6605 npoints = if1-1;; 6606 }; 6607 if (option4) graph.PaintGraph(2*npoints,xline.data(),yline.data(),""FC"");; 6608 else graph.PaintGraph(2*npoints,xline.data(),yline.data(),""F"");; 6609 gPad->SetLogx(logx);; 6610 gPad->SetLogy(logy);; 6611 }; 6612}; 6613 ; 6614////////////////////////////////////////////////////////////////////////////////; 6615/// Draw 2D histograms errors.; 6616 ; 6617void THistPainter::Paint2DErrors(Option_t *); 6618{; 6619 ; 6620 fH->TAttMarker::Modify();; 6621 fH->TAttLine::Modify();; 6622 ; 6623 // Define the 3D view; 6624 fXbuf[0] = Hparam.xmin;; 6625 fYbuf[0] = Hparam.xmax;; 6626 fXbuf[1] = Hparam.ymin;; 6627 fYbuf[1] = Hparam.ymax;; 6628 fXbuf[2] = Hparam.zmin;; 6629 fYbuf[2] = Hparam.zmax*(1. + gStyle->GetHistTopMargin());; 6630 fLego = std::make_unique<TPainter3dAlgorithms>(fXbuf.data(), fYbuf.data());; 6631 TView *view = gPad ? gPad->GetView() : nullptr;; 6632 if (!view) {; 6633 Error(""Paint2DErrors"", ""no TView in current pad"");; 6634 return;; 6635 }; 6636 Double_t thedeg = 90 - gPad->GetTheta();; 6637 Double_t phideg = -90 - gPad->GetPhi();; 6638 Double_t psideg = view->GetPsi();; 6639 Int_t irep;; 6640 view->SetView(phideg, thedeg, psideg, irep);; 6641 ; 6642 // Set color/style for back box; 6643 fLego->SetFillStyle(gPad-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:242412,log,logx,242412,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,['log'],"['logx', 'logy']"
Testability,"591 Bool_t gridx = gPad->GetGridx();; 4592 Bool_t gridy = gPad->GetGridy();; 4593 if (Hoption.Axis > 0) {; 4594 if (Hoption.Axis > 1) PaintAxis(kTRUE); //axis with grid; 4595 else {; 4596 if (gridx) gPad->SetGridx(0);; 4597 if (gridy) gPad->SetGridy(0);; 4598 PaintAxis(kFALSE);; 4599 if (gridx) gPad->SetGridx(1);; 4600 if (gridy) gPad->SetGridy(1);; 4601 }; 4602 if ((Hoption.Same%10) ==1) Hoption.Same += 1;; 4603 goto paintstat;; 4604 }; 4605 if (gridx || gridy) PaintAxis(kTRUE); // Draw the grid only; 4606 ; 4607 // test for options BAR or HBAR; 4608 if (Hoption.Bar >= 10) {; 4609 PaintBar(option);; 4610 }; 4611 ; 4612 // do not draw histogram if error bars required; 4613 if (!Hoption.Error) {; 4614 if (Hoption.Hist && Hoption.Bar<10) PaintHist(option);; 4615 }; 4616 ; 4617 // test for error bars or option E; 4618 if (Hoption.Error) {; 4619 PaintErrors(option);; 4620 if (Hoption.Hist == 2) PaintHist(option);; 4621 }; 4622 ; 4623 if (Hoption.Text) PaintText(option);; 4624 ; 4625 // test for associated function; 4626 if (Hoption.Func) {; 4627 Hoption_t hoptsave = Hoption;; 4628 Hparam_t hparsave = Hparam;; 4629 PaintFunction(option);; 4630 SetHistogram(hsave);; 4631 Hoption = hoptsave;; 4632 Hparam = hparsave;; 4633 }; 4634 ; 4635 if (gridx) gPad->SetGridx(0);; 4636 if (gridy) gPad->SetGridy(0);; 4637 PaintAxis(kFALSE);; 4638 if (gridx) gPad->SetGridx(1);; 4639 if (gridy) gPad->SetGridy(1);; 4640 ; 4641 PaintTitle(); // Draw histogram title; 4642 ; 4643 // Draw box with histogram statistics and/or fit parameters; 4644paintstat:; 4645 if ((Hoption.Same%10) != 1 && !fH->TestBit(TH1::kNoStats)) { // bit set via TH1::SetStats; 4646 TIter next(fFunctions);; 4647 TObject *obj = nullptr;; 4648 while ((obj = next())) {; 4649 if (obj->InheritsFrom(TF1::Class())) break;; 4650 obj = nullptr;; 4651 }; 4652 ; 4653 //Stat is painted twice (first, it will be in canvas' list of primitives),; 4654 //second, it will be here, this is not required on iOS.; 4655 //Condition is ALWAYS tru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:174863,test,test,174863,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['test'],['test']
Testability,"596/// May change in future.; 2597 ; 2598void TCanvas::CreatePainter(); 2599{; 2600 //Even for batch mode painter is still required, just to delegate; 2601 //some calls to batch ""virtual X"".; 2602 if (!UseGL() || fBatch) {; 2603 fPainter = nullptr;; 2604 if (fCanvasImp) fPainter = fCanvasImp->CreatePadPainter();; 2605 if (!fPainter) fPainter = new TPadPainter; // Do not need plugin manager for this!; 2606 } else {; 2607 fPainter = TVirtualPadPainter::PadPainter(""gl"");; 2608 if (!fPainter) {; 2609 Error(""CreatePainter"", ""GL Painter creation failed! Will use default!"");; 2610 fPainter = new TPadPainter;; 2611 fUseGL = kFALSE;; 2612 }; 2613 }; 2614}; 2615 ; 2616////////////////////////////////////////////////////////////////////////////////; 2617/// Access and (probably) creation of pad painter.; 2618 ; 2619TVirtualPadPainter *TCanvas::GetCanvasPainter(); 2620{; 2621 if (!fPainter) CreatePainter();; 2622 return fPainter;; 2623}; 2624 ; 2625 ; 2626////////////////////////////////////////////////////////////////////////////////; 2627///assert on IsBatch() == false?; 2628 ; 2629void TCanvas::DeleteCanvasPainter(); 2630{; 2631 if (fGLDevice != -1) {; 2632 //fPainter has a font manager.; 2633 //Font manager will delete textures.; 2634 //If context is wrong (we can have several canvases) -; 2635 //wrong texture will be deleted, damaging some of our fonts.; 2636 gGLManager->MakeCurrent(fGLDevice);; 2637 }; 2638 ; 2639 SafeDelete(fPainter);; 2640 ; 2641 if (fGLDevice != -1) {; 2642 gGLManager->DeleteGLContext(fGLDevice);//?; 2643 fGLDevice = -1;; 2644 }; 2645}; 2646 ; 2647 ; 2648////////////////////////////////////////////////////////////////////////////////; 2649/// Save provided pads/canvases into the image file(s); 2650/// Filename can include printf argument for image number - like ""image%03d.png"".; 2651/// In this case images: ""image000.png"", ""image001.png"", ""image002.png"" will be created.; 2652/// If pattern is not provided - it will be automatically inserted before exte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:85269,assert,assert,85269,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['assert'],['assert']
Testability,598) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.865 (0.854) 0.996 (0.994) 0.908 (0.907) ; : bg0 0.784 (0.776) - 0.666 (0.655) 0.919 (0.895) ; : bg1 0.998 (0.998) 0.791 (0.785) - 0.912 (0.902) ; : bg2 0.943 (0.903) 0.946 (0.939) 0.924 (0.928) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.978 (0.964) 0.997 (0.997) 0.993 (0.986) ; : bg0 0.952 (0.924) - 0.936 (0.928) 0.992 (0.990) ; : bg1 1.000 (1.000) 0.945 (0.936) - 0.998 (0.995) ; : bg2 0.994 (0.985) 0.998 (0.998) 0.998 (0.998) - ; : ; : === Showing confusion matrix for method : PDEFoam ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.289 (0.233) 0.467 (0.436) 0.421 (0.332) ; : bg0 0.100 (0.045) - 0.132 (0.116) 0.540 (0.313) ; : bg1 0.209 (0.434) 0.153 (0.092) - 0.347 (0.323) ; : bg2 0.560 (0.552) 0.445 (0.424) 0.501 (0.506) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.665 (0.640) 0.854 (0.822) 0.807 (0.790) ; : bg0 0.538 (0.520) - 0.415 (0.374) 0.843 (0.833) ; : bg1 0.885 (0.886) 0.542 (0.491) - 0.728 (0.646) ; : bg2 0.928 (0.890) 0.956 (0.959) 0.847 (0.895) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.898 (0.878) 0.971 (0.950) 0.982 (0.975) ; : bg0 0.828 (0.810) - 0.696 (0.676) 0.954 (0.951) ; : bg1 0.951 (0.966) 0.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:28611,test,test,28611,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,599 43273.3 0; : 1086 | 3.10333 2.86337 0.0200994 0.00175565 43611.6 1; : 1087 | 2.9523 3.05621 0.0202345 0.00180564 43410.1 2; : 1088 | 2.96621 3.82134 0.0204023 0.0017658 42926.6 3; : 1089 | 2.9107 3.10267 0.0201393 0.00176662 43542.9 4; : 1090 | 2.7802 2.77409 0.0201095 0.00176132 43601.1 5; : 1091 Minimum Test error found - save the configuration ; : 1091 | 2.70558 2.65986 0.0201114 0.00182448 43747.2 0; : 1092 | 2.6448 3.0589 0.0201057 0.00177852 43651.1 1; : 1093 | 2.72808 2.74342 0.0203461 0.00179008 43112.8 2; : 1094 | 2.90448 3.26391 0.0206789 0.00182352 42428.3 3; : 1095 | 2.99675 3.1053 0.0203677 0.00177969 43038.5 4; : 1096 | 2.82435 2.85928 0.0200663 0.00175842 43696.9 5; : 1097 | 2.94319 2.67707 0.0201699 0.00175551 43444.3 6; : 1098 | 3.07322 3.0122 0.0200534 0.00175203 43712.7 7; : 1099 | 2.83008 3.95183 0.0205372 0.0017939 42681.9 8; : 1100 | 2.67822 3.34195 0.020666 0.00184085 42496.4 9; : 1101 | 2.97088 2.72336 0.0206136 0.0017901 42500 10; : 1102 Minimum Test error found - save the configuration ; : 1102 | 2.66188 2.52638 0.020367 0.00185502 43215.3 0; : 1103 | 3.01155 3.18843 0.0202364 0.00176536 43311 1; : 1104 | 2.71885 3.00051 0.0201103 0.00176305 43603.3 2; : 1105 Minimum Test error found - save the configuration ; : 1105 | 2.73591 2.50832 0.0201341 0.0018587 43774.7 0; : 1106 | 2.7002 2.7081 0.0203577 0.00176876 43036.3 1; : 1107 | 2.85017 3.38001 0.0201747 0.00176074 43445.3 2; : 1108 | 2.78494 2.55451 0.0203389 0.00176376 43068.3 3; : 1109 | 2.71632 3.12003 0.0200899 0.00175276 43627.4 4; : 1110 | 3.16531 2.9918 0.020346 0.00180026 43136.7 5; : 1111 Minimum Test error found - save the configuration ; : 1111 | 2.97087 2.45167 0.0201922 0.00182484 43555.6 0; : 1112 | 2.60355 2.50464 0.0200664 0.00176061 43702 1; : 1113 | 2.54376 2.96916 0.0200737 0.00178101 43733.3 2; : 1114 | 2.77186 2.89815 0.0200657 0.00175793 43697.4 3; : 1115 | 2.58652 2.73506 0.020068 0.00175912 43694.6 4; : 1116 Minimum Test error found - save the configuration ; : 1,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:119775,Test,Test,119775,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"599627370496e15;; 27static double kBiginv = 2.22044604925031308085e-16;; 28 ; 29/* log( sqrt( 2*pi ) ) */; 30static double LS2PI = 0.91893853320467274178;; 31 ; 32 ; 33// incomplete gamma function (complement integral); 34// igamc(a,x) = 1 - igam(a,x); 35//; 36// inf.; 37// -; 38// 1 | | -t a-1; 39// = ----- | e t dt.; 40// - | |; 41// | (a) -; 42// x; 43//; 44//; 45 ; 46// In this implementation both arguments must be positive.; 47// The integral is evaluated by either a power series or; 48// continued fraction expansion, depending on the relative; 49// values of a and x.; 50 ; 51double igamc( double a, double x ); 52{; 53 ; 54 double ans, ax, c, yc, r, t, y, z;; 55 double pk, pkm1, pkm2, qk, qkm1, qkm2;; 56 ; 57 // LM: for negative values returns 0.0; 58 // This is correct if a is a negative integer since Gamma(-n) = +/- inf; 59 if (a <= 0) return 0.0;; 60 ; 61 if (x <= 0) return 1.0;; 62 ; 63 if( (x < 1.0) || (x < a) ); 64 return( 1.0 - igam(a,x) );; 65 ; 66 ax = a * std::log(x) - x - lgam(a);; 67 if( ax < -kMAXLOG ); 68 return( 0.0 );; 69 ; 70 ax = std::exp(ax);; 71 ; 72/* continued fraction */; 73 y = 1.0 - a;; 74 z = x + y + 1.0;; 75 c = 0.0;; 76 pkm2 = 1.0;; 77 qkm2 = x;; 78 pkm1 = x + 1.0;; 79 qkm1 = z * x;; 80 ans = pkm1/qkm1;; 81 ; 82 do; 83 {; 84 c += 1.0;; 85 y += 1.0;; 86 z += 2.0;; 87 yc = y * c;; 88 pk = pkm1 * z - pkm2 * yc;; 89 qk = qkm1 * z - qkm2 * yc;; 90 if(qk); 91 {; 92 r = pk/qk;; 93 t = std::abs( (ans - r)/r );; 94 ans = r;; 95 }; 96 else; 97 t = 1.0;; 98 pkm2 = pkm1;; 99 pkm1 = pk;; 100 qkm2 = qkm1;; 101 qkm1 = qk;; 102 if( std::abs(pk) > kBig ); 103 {; 104 pkm2 *= kBiginv;; 105 pkm1 *= kBiginv;; 106 qkm2 *= kBiginv;; 107 qkm1 *= kBiginv;; 108 }; 109 }; 110 while( t > kMACHEP );; 111 ; 112 return( ans * ax );; 113}; 114 ; 115 ; 116 ; 117/* left tail of incomplete gamma function:; 118 *; 119 * inf. k; 120 * a -x - x; 121 * x e > ----------; 122 * - -; 123 * k=0 | (a+k+1); 124 *; 125 */; 126 ; 127double igam( double a, double x ); 128{; 129 do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:1595,log,log,1595,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['log'],['log']
Testability,"5; TH1.Print Name = TrainingHistory_PyKeras_LSTM_'val_loss', Entries= 0, Total sum= 11.0066; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PyKeras_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_BDTG.weights.xml␛[0m; nthreads = 4; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: TMVA_LSTM for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0529 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0218 sec ; Factory : Test method: PyKeras_LSTM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.249 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00679 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:52908,Test,Test,52908,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,2,"['Test', 'test']","['Test', 'testing']"
Testability,"5; TPad::PadtoXDouble_t PadtoX(Double_t x) const overrideConvert x from pad to X.Definition TPad.cxx:3542; TPad::PixeltoXYvirtual void PixeltoXY(Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y)Convert pixel to X/Y coordinates.Definition TPad.cxx:7406; TPad::DrawCrosshairvirtual void DrawCrosshair()Function called to draw a crosshair in the canvas.Definition TPad.cxx:1605; TPad::YtoPadDouble_t YtoPad(Double_t y) const overrideConvert y from Y to pad.Definition TPad.cxx:3572; TPad::RangeChangedvirtual void RangeChanged()Definition TPad.h:316; TPad::fUyminDouble_t fUyminMinimum value on the Y axis.Definition TPad.h:75; TPad::SetPadvoid SetPad(const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=35, Short_t bordersize=5, Short_t bordermode=-1) overrideSet all pad parameters.Definition TPad.cxx:6171; TPad::GetCanvasIDInt_t GetCanvasID() const overrideGet canvas identifier.Definition TPad.cxx:2738; TPad::fLogzInt_t fLogz(=0 if Z linear scale, =1 if log scale)Definition TPad.h:93; TPad::fYtoPixelkDouble_t fYtoPixelkConversion coefficient for Y World to pixel.Definition TPad.h:45; TPad::UpdateAsyncvoid UpdateAsync() overrideAsynchronous pad update.Definition TPad.cxx:2947; TPad::TPadTPad()Pad default constructor.Definition TPad.cxx:132; TPad::AbsPixeltoXDouble_t AbsPixeltoX(Int_t px) overrideDefinition TPad.h:168; TPad::UseCurrentStylevoid UseCurrentStyle() overrideForce a copy of current style for all objects in pad.Definition TPad.cxx:6927; TPad::GetMaxPickDistancestatic Int_t GetMaxPickDistance()Static function (see also TPad::SetMaxPickDistance)Definition TPad.cxx:2794; TPad::VtoAbsPixelInt_t VtoAbsPixel(Double_t v) const overrideConvert Y NDC to absolute pixel.Definition TPad.cxx:7467; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::EventPavevirtual void EventPave()Definition TPad.h:416; TPad::fUtoPixelkDo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:41705,log,log,41705,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['log'],['log']
Testability,"5;; 4381 if (strstr(chopt,""E6"")) Hoption.Error = 16;; 4382 if (strstr(chopt,""E0"")) Hoption.Error += 40;; 4383 if (strstr(chopt,""X0"")) {; 4384 if (Hoption.Error == 1) Hoption.Error += 20;; 4385 Hoption.Error += 10;; 4386 }; 4387 if (Hoption.Text && fH->InheritsFrom(TProfile::Class())) {; 4388 Hoption.Text += 2000;; 4389 Hoption.Error = 0;; 4390 }; 4391 } else {; 4392 if (Hoption.Error == 0) {; 4393 Hoption.Error = 100;; 4394 if (!explicitColor) Hoption.Color = 0;; 4395 }; 4396 if (Hoption.Text) {; 4397 Hoption.Text += 2000;; 4398 Hoption.Error = 0;; 4399 }; 4400 }; 4401 }; 4402 ; 4403 if (Hoption.Surf == 15) {; 4404 if (Hoption.System == kPOLAR || Hoption.System == kCARTESIAN) {; 4405 Hoption.Surf = 13;; 4406 Warning(""MakeChopt"",""option SURF5 is not supported in Cartesian and Polar modes"");; 4407 }; 4408 }; 4409 ; 4410 // Copy options from current style; 4411 Hoption.Logx = gPad->GetLogx();; 4412 Hoption.Logy = gPad->GetLogy();; 4413 Hoption.Logz = gPad->GetLogz();; 4414 ; 4415 // Check options incompatibilities; 4416 if (Hoption.Bar == 1) Hoption.Hist = -1;; 4417 return 1;; 4418}; 4419 ; 4420////////////////////////////////////////////////////////////////////////////////; 4421/// Decode string `choptin` and fill Graphical cuts structure.; 4422 ; 4423Int_t THistPainter::MakeCuts(char *choptin); 4424{; 4425 ; 4426 fNcuts = 0;; 4427 char *left = (char*)strchr(choptin,'[');; 4428 if (!left) return 0;; 4429 char *right = (char*)strchr(choptin,']');; 4430 if (!right) return 0;; 4431 Int_t nch = right-left;; 4432 if (nch < 2) return 0;; 4433 char *cuts = left+1;; 4434 *right = 0;; 4435 char *comma, *minus;; 4436 Int_t i;; 4437 while (true) {; 4438 comma = strchr(cuts,',');; 4439 if (comma) *comma = 0;; 4440 minus = strchr(cuts,'-');; 4441 if (minus) cuts = minus+1;; 4442 while (*cuts == ' ') cuts++;; 4443 Int_t nc = strlen(cuts);; 4444 while (cuts[nc-1] == ' ') {cuts[nc-1] = 0; nc--;}; 4445 TIter next(gROOT->GetListOfSpecials());; 4446 TCutG *cut=nullptr;; 4447 TObject *ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:168705,Log,Logz,168705,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"5E-2,; 289 4.76367800457137231464E-2,; 290 2.07448227648435975150E-1,; 291 4.94214826801497100753E-1,; 292 9.99999999999999996796E-1; 293};; 294static double Q[] = {; 295 -2.31581873324120129819E-5,; 296 5.39605580493303397842E-4,; 297 -4.45641913851797240494E-3,; 298 1.18139785222060435552E-2,; 299 3.58236398605498653373E-2,; 300 -2.34591795718243348568E-1,; 301 7.14304917030273074085E-2,; 302 1.00000000000000000320E0; 303};; 304 ; 305/* Stirling's formula for the gamma function */; 306static double STIR[5] = {; 307 7.87311395793093628397E-4,; 308 -2.29549961613378126380E-4,; 309 -2.68132617805781232825E-3,; 310 3.47222221605458667310E-3,; 311 8.33333333333482257126E-2,; 312};; 313 ; 314#define SQTPI std::sqrt(2*ROOT::Math::Pi()) /* sqrt(2*pi) */; 315/* Stirling formula for the gamma function */; 316static double stirf( double x); 317{; 318 double y, w, v;; 319 ; 320 w = 1.0/x;; 321 w = 1.0 + w * Polynomialeval( w, STIR, 4 );; 322 y = exp(x);; 323 ; 324/* #define kMAXSTIR kMAXLOG/log(kMAXLOG) */; 325 ; 326 if( x > kMAXSTIR ); 327 { /* Avoid overflow in pow() */; 328 v = pow( x, 0.5 * x - 0.25 );; 329 y = v * (v / y);; 330 }; 331 else; 332 {; 333 y = pow( x, x - 0.5 ) / y;; 334 }; 335 y = SQTPI * y * w;; 336 return( y );; 337}; 338 ; 339double gamma( double x ); 340{; 341 double p, q, z;; 342 int i;; 343 ; 344 int sgngam = 1;; 345 ; 346 if (x >=std::numeric_limits<double>::infinity()); 347 return(x);; 348 ; 349 q = std::abs(x);; 350 ; 351 if( q > 33.0 ); 352 {; 353 if( x < 0.0 ); 354 {; 355 p = std::floor(q);; 356 if( p == q ); 357 {; 358 return( sgngam * std::numeric_limits<double>::infinity());; 359 }; 360 i = (int) p;; 361 if( (i & 1) == 0 ); 362 sgngam = -1;; 363 z = q - p;; 364 if( z > 0.5 ); 365 {; 366 p += 1.0;; 367 z = q - p;; 368 }; 369 z = q * std::sin( ROOT::Math::Pi() * z );; 370 if( z == 0 ); 371 {; 372 return( sgngam * std::numeric_limits<double>::infinity());; 373 }; 374 z = std::abs(z);; 375 z = ROOT::Math::Pi()/(z * stirf(q) );; 376 }; 377 else; 378 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:7267,log,log,7267,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['log'],['log']
Testability,"5{; 426 if (IgnoreEventsWithNegWeightsInTraining()) {; 427 Log() << kINFO; 428 << ""Will ignore negative events in training!""; 429 << Endl;; 430 }; 431 ; 432 if (fArchitectureString == ""STANDARD"") {; 433 Log() << kERROR << ""The STANDARD architecture has been deprecated. ""; 434 ""Please use Architecture=CPU or Architecture=CPU.""; 435 ""See the TMVA Users' Guide for instructions if you ""; 436 ""encounter problems.""; 437 << Endl;; 438 Log() << kFATAL << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been implemented yet. ""; 452 ""Please use Architecture=CPU or Architecture=CPU for the ""; 453 ""time being. See the TMVA Users' Guide for instructions ""; 454 ""if you encounter problems.""; 455 << Endl;; 456 }; 457 ; 458 if (fArchitectureString == ""GPU"") {; 459#ifndef DNNCUDA // Included only if DNNCUDA flag is _not_ set.; 460 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 461 ""you have CUDA installed and it was successfully ""; 462 ""detected by CMAKE.""; 463 << Endl;; 464 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 465 ""you have CUDA installed and it was successfully ""; 466 ""detected by CMAKE.""; 467 << Endl;; 468#endif // DNNCUDA; 469 }; 470 ; 471 if (fArchitectureString == ""CPU"") {; 472#ifndef DNNCPU // Included only if DNNCPU flag is _not_ set.; 473 Log() << kERROR << ""Multi-core CPU backend not enabled. Please make sure ""; 474 ""you have a BLAS implementation and it was successfully ""; 475 ""detected by CMake as well that t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:15229,Log,Log,15229,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability,"6 */; 97 void Rectify();; 98 ; 99 ; 100 // ======== Construction and Assignment From other Rotation Forms ==================; 101 ; 102 /**; 103 Construct from another supported rotation type (see gv_detail::convert ); 104 */; 105 template <class OtherRotation>; 106 explicit constexpr RotationZYX(const OtherRotation & r) {gv_detail::convert(r,*this);}; 107 ; 108 ; 109 /**; 110 Assign from another supported rotation type (see gv_detail::convert ); 111 */; 112 template <class OtherRotation>; 113 RotationZYX & operator=( OtherRotation const & r ) {; 114 gv_detail::convert(r,*this);; 115 return *this;; 116 }; 117 ; 118 ; 119 // ======== Components ==============; 120 ; 121 /**; 122 Set the three Euler angles given a pair of pointers or iterators; 123 defining the beginning and end of an array of three Scalars.; 124 */; 125 template<class IT>; 126 void SetComponents(IT begin, IT end) {; 127 fPhi = *begin++;; 128 fTheta = *begin++;; 129 fPsi = *begin++;; 130 (void)end;; 131 assert(begin == end);; 132 Rectify();; 133 }; 134 ; 135 /**; 136 Get the axis and then the angle into data specified by an iterator begin; 137 and another to the end of the desired data (4 past start).; 138 */; 139 template<class IT>; 140 void GetComponents(IT begin, IT end) const {; 141 *begin++ = fPhi;; 142 *begin++ = fTheta;; 143 *begin++ = fPsi;; 144 (void)end;; 145 assert(begin == end);; 146 }; 147 ; 148 /**; 149 Get the axis and then the angle into data specified by an iterator begin; 150 */; 151 template<class IT>; 152 void GetComponents(IT begin) const {; 153 *begin++ = fPhi;; 154 *begin++ = fTheta;; 155 *begin = fPsi;; 156 }; 157 ; 158 /**; 159 Set the components phi, theta, psi based on three Scalars.; 160 */; 161 void SetComponents(Scalar phi, Scalar theta, Scalar psi) {; 162 fPhi=phi; fTheta=theta; fPsi=psi;; 163 Rectify();; 164 }; 165 ; 166 /**; 167 Get the components phi, theta, psi into three Scalars.; 168 */; 169 void GetComponents(Scalar & phi, Scalar & theta, Scalar & psi) const {; 170",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2RotationZYX_8h_source.html:4196,assert,assert,4196,doc/master/GenVector_2RotationZYX_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2RotationZYX_8h_source.html,1,['assert'],['assert']
Testability,6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.02,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80664,Test,Test,80664,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.395,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:83605,Test,Test,83605,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,6 2; : 1036 | 3.05868 3.88772 0.0202082 0.00176323 43372.3 3; : 1037 | 3.11243 3.8552 0.0200473 0.00176925 43768.4 4; : 1038 | 2.97479 4.01382 0.020048 0.00176307 43752 5; : 1039 | 3.15714 3.85081 0.0200388 0.00176348 43774.8 6; : 1040 | 2.97124 3.72013 0.0200295 0.00176294 43795.8 7; : 1041 | 2.92938 3.63611 0.020078 0.00179099 43746.9 8; : 1042 | 3.04184 3.72584 0.0202124 0.00176555 43367.8 9; : 1043 | 3.24904 3.46339 0.0200395 0.00176046 43765.9 10; : 1044 | 3.08383 3.85222 0.0200574 0.0017582 43717.6 11; : 1045 | 3.00904 3.46043 0.0200555 0.00175872 43723.6 12; : 1046 Minimum Test error found - save the configuration ; : 1046 | 2.89922 3.28968 0.0204754 0.00188349 43029.5 0; : 1047 | 3.06628 3.80261 0.0206565 0.00177157 42361.9 1; : 1048 | 3.0482 4.21427 0.0203272 0.00175981 43086.2 2; : 1049 | 3.02565 3.406 0.0200479 0.00175462 43732 3; : 1050 | 3.16008 3.99499 0.0202749 0.00175016 43185.5 4; : 1051 | 3.00714 3.41105 0.0202798 0.00177822 43239.5 5; : 1052 Minimum Test error found - save the configuration ; : 1052 | 2.87354 3.24293 0.0202139 0.00182119 43495.4 0; : 1053 | 2.96323 3.45692 0.0200573 0.00175839 43718.4 1; : 1054 | 2.84926 3.80103 0.0200558 0.00175409 43711.6 2; : 1055 | 2.95781 3.27091 0.020067 0.00175747 43693.1 3; : 1056 | 3.19444 5.21663 0.0200546 0.00175884 43725.9 4; : 1057 | 3.64244 3.58532 0.0204609 0.00177451 42811.8 5; : 1058 | 3.4344 3.25697 0.0201011 0.00178651 43681.1 6; : 1059 | 2.82841 3.35413 0.020208 0.00176662 43380.6 7; : 1060 | 2.98819 3.74969 0.0202318 0.00179746 43397.3 8; : 1061 | 3.26859 3.94266 0.0201482 0.00175781 43501 9; : 1062 Minimum Test error found - save the configuration ; : 1062 | 3.14929 3.19749 0.0201067 0.00181963 43746.8 0; : 1063 | 2.87068 3.26991 0.0200491 0.00176391 43751.2 1; : 1064 | 2.93768 3.71885 0.0200468 0.00176208 43752.3 2; : 1065 | 2.97083 3.36192 0.0201608 0.00179095 43549.7 3; : 1066 | 3.04197 3.49012 0.0203588 0.00177356 43045 4; : 1067 Minimum Test error found - save the configuration ; : 1067 |,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:116541,Test,Test,116541,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"6 TObject *object = nullptr;; 57 TIter next(fPersistentRules);; 58 while ((object = next())) {; 59 object->ls(fClassName);; 60 }; 61 TROOT::DecreaseDirLevel();; 62}; 63 ; 64////////////////////////////////////////////////////////////////////////////////; 65 ; 66Bool_t TSchemaRuleSet::AddRules( TSchemaRuleSet* /* rules */, EConsistencyCheck /* checkConsistency */, TString * /* errmsg */ ); 67{; 68 return kFALSE;; 69}; 70 ; 71////////////////////////////////////////////////////////////////////////////////; 72/// The consistency check always fails if the TClass object was not set!; 73/// if checkConsistency is:; 74/// kNoCheck: no check is done, register the rule as is; 75/// kCheckConflict: check only for conflicting rules; 76/// kCheckAll: check for conflict and check for rule about members that are not in the current class layout.; 77/// return kTRUE if the layout is accepted, in which case we take ownership of; 78/// the rule object.; 79/// return kFALSE if the rule failed one of the test, the rule now needs to be deleted by the caller.; 80 ; 81Bool_t TSchemaRuleSet::AddRule( TSchemaRule* rule, EConsistencyCheck checkConsistency, TString *errmsg ); 82{; 83 //---------------------------------------------------------------------------; 84 // Cannot verify the consistency if the TClass object is not present; 85 /////////////////////////////////////////////////////////////////////////////; 86 ; 87 if( (checkConsistency != kNoCheck) && !fClass ); 88 return kFALSE;; 89 ; 90 if( !rule->IsValid() ); 91 return kFALSE;; 92 ; 93 //---------------------------------------------------------------------------; 94 // If we don't check the consistency then we should just add the object; 95 /////////////////////////////////////////////////////////////////////////////; 96 ; 97 if( checkConsistency == kNoCheck ) {; 98 if( rule->GetEmbed() ); 99 fPersistentRules->Add( rule );; 100 else; 101 fRemainingRules->Add( rule );; 102 fAllRules->Add( rule );; 103 return kTRUE;; 104 }; 105 ; 106 /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:2840,test,test,2840,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,1,['test'],['test']
Testability,"6 UpdateBinContent(bin, cont[i + nx * (b[a[j]] + ny * k)]);; 5807 if (!errors2.empty()); 5808 fSumw2.fArray[bin] = errors2[i + nx * (b[a[j]] + ny * k)];; 5809 }; 5810 }; 5811 }; 5812 } else {; 5813 // labels on z axis; 5814 for (i = 0; i < nx; i++) {; 5815 for (j = 0; j < ny; j++) {; 5816 for (k = 0; k < n; k++) {; 5817 Int_t bin = GetBin(i, j, k+1);; 5818 UpdateBinContent(bin, cont[i + nx * (j + ny * b[a[k]])]);; 5819 if (!errors2.empty()); 5820 fSumw2.fArray[bin] = errors2[i + nx * (j + ny * b[a[k]])];; 5821 }; 5822 }; 5823 }; 5824 }; 5825 }; 5826 }; 5827 // need to set to zero the statistics if axis has been sorted; 5828 // see for example TH3::PutStats for definition of s vector; 5829 bool labelsAreSorted = kFALSE;; 5830 for (i = 0; i < n; ++i) {; 5831 if (a[i] != i) {; 5832 labelsAreSorted = kTRUE;; 5833 break;; 5834 }; 5835 }; 5836 if (labelsAreSorted) {; 5837 double s[TH1::kNstat];; 5838 GetStats(s);; 5839 if (iaxis == 1) {; 5840 s[2] = 0; // fTsumwx; 5841 s[3] = 0; // fTsumwx2; 5842 s[6] = 0; // fTsumwxy; 5843 s[9] = 0; // fTsumwxz; 5844 } else if (iaxis == 2) {; 5845 s[4] = 0; // fTsumwy; 5846 s[5] = 0; // fTsumwy2; 5847 s[6] = 0; // fTsumwxy; 5848 s[10] = 0; // fTsumwyz; 5849 } else if (iaxis == 3) {; 5850 s[7] = 0; // fTsumwz; 5851 s[8] = 0; // fTsumwz2; 5852 s[9] = 0; // fTsumwxz; 5853 s[10] = 0; // fTsumwyz; 5854 }; 5855 PutStats(s);; 5856 }; 5857 delete labold;; 5858}; 5859 ; 5860////////////////////////////////////////////////////////////////////////////////; 5861/// Test if two double are almost equal.; 5862 ; 5863static inline Bool_t AlmostEqual(Double_t a, Double_t b, Double_t epsilon = 0.00000001); 5864{; 5865 return TMath::Abs(a - b) < epsilon;; 5866}; 5867 ; 5868////////////////////////////////////////////////////////////////////////////////; 5869/// Test if a double is almost an integer.; 5870 ; 5871static inline Bool_t AlmostInteger(Double_t a, Double_t epsilon = 0.00000001); 5872{; 5873 return AlmostEqual(a - TMath::Floor(a), 0, epsilon) ||; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:232017,Test,Test,232017,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['Test']
Testability,"6 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 898 layerBiases(i,0) = 0.0;; 899 }; 900 }; 901 }; 902 if (!fExitFromTraining) fIPyMaxIter = fIPyCurrentIter;; 903 ExitFromTraining();; 904}; 905 ; 906////////////////////////////////////////////////////////////////////////////////; 907 ; 908void TMVA::MethodDNN::TrainGpu(); 909{; 910 ; 911#ifdef DNNCUDA // Included only if DNNCUDA flag is set.; 912 Log() << kINFO << ""Start of neural network training on GPU."" << Endl << Endl;; 913 ; 914 size_t nValidationSamples = GetNumValidationSamples();; 915 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 916 size_t nTestSamples = nValidationSamples;; 917 ; 918 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 919 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 920 ; 921 size_t trainingPhase = 1;; 922 fNet.Initialize(fWeightInitialization);; 923 for (TTrainingSettings & settings : fTrainingSettings) {; 924 ; 925 if (fInteractive){; 926 fInteractive->ClearGraphs();; 927 }; 928 ; 929 TNet<TCuda<>> net(settings.batchSize, fNet);; 930 net.SetWeightDecay(settings.weightDecay);; 931 net.SetRegularization(settings.regularization);; 932 ; 933 // Need to convert dropoutprobabilities to conventions used; 934 // by backend implementation.; 935 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 936 for (auto & p : dropoutVector) {; 937 p = 1.0 - p;; 938 }; 939 net.SetDropoutProbabilities(dropoutVector);; 940 ; 941 net.InitializeGradients();; 942 auto testNet = net.CreateClone(settings.batchSize);; 943 ; 944 Log() << kINFO << ""Training phase "" << trainingPhase << "" o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:32765,Log,Log,32765,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability,"6#include ""GSLMultiFitFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiFitFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 47 typedef void ( * GSLMultiFitDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 48 typedef void ( * GSLMultiFitFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiFitFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiFitFunctionWrapper(); 63 {; 64 fFunc.f = 0;; 65 fFunc.df = 0;; 66 fFunc.fdf = 0;; 67 fFunc.n = 0;; 68 fFunc.p = 0;; 69 fFunc.params = 0;; 70#if GSL_MAJOR_VERSION > 1; 71 fFunc.nevalf = 0;; 72 fFunc.nevaldf = 0;; 73#endif; 74 }; 75 ; 76 ; 77 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = npar;; 87 fFunc.params = const_cast<void *>(p);; 88 }; 89 ; 90 gsl_multifit_function_fdf * GetFunc() { return &fFunc; }; 91 ; 92 ; 93 private:; 94 ; 95 gsl_multifit_function_fdf fFunc;; 96 ; 97};; 98 ; 99 ; 100 ; 101} // namespace Math; 102} // namespace ROOT; 103 ; 104#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMulti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html:2776,assert,assert,2776,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html,1,['assert'],['assert']
Testability,"6#include <vector>; 17#include <iostream>; 18#include <map>; 19#include <string>; 20 ; 21#include ""TFile.h""; 22#include ""TTree.h""; 23#include ""TString.h""; 24#include ""TSystem.h""; 25#include ""TROOT.h""; 26#include ""TStopwatch.h""; 27 ; 28#include ""TMVA/Tools.h""; 29#include ""TMVA/Reader.h""; 30 ; 31using namespace TMVA;; 32 ; 33void TMVARegressionApplication( TString myMethodList = """" ); 34{; 35 //---------------------------------------------------------------; 36 // This loads the library; 37 TMVA::Tools::Instance();; 38 ; 39 // Default MVA methods to be trained + tested; 40 std::map<std::string,int> Use;; 41 ; 42 // --- Mutidimensional likelihood and Nearest-Neighbour methods; 43 Use[""PDERS""] = 0;; 44 Use[""PDEFoam""] = 1;; 45 Use[""KNN""] = 1;; 46 //; 47 // --- Linear Discriminant Analysis; 48 Use[""LD""] = 1;; 49 //; 50 // --- Function Discriminant analysis; 51 Use[""FDA_GA""] = 0;; 52 Use[""FDA_MC""] = 0;; 53 Use[""FDA_MT""] = 0;; 54 Use[""FDA_GAMT""] = 0;; 55 //; 56 // --- Neural Network; 57 Use[""MLP""] = 0;; 58 // Deep neural network; 59#ifdef R__HAS_TMVAGPU; 60 Use[""DNN_GPU""] = 1;; 61 Use[""DNN_CPU""] = 0;; 62#else; 63 Use[""DNN_GPU""] = 0;; 64#ifdef R__HAS_TMVACPU; 65 Use[""DNN_CPU""] = 1;; 66#else; 67 Use[""DNN_CPU""] = 0;; 68#endif; 69#endif; 70 //; 71 // --- Support Vector Machine; 72 Use[""SVM""] = 0;; 73 //; 74 // --- Boosted Decision Trees; 75 Use[""BDT""] = 0;; 76 Use[""BDTG""] = 1;; 77 // ---------------------------------------------------------------; 78 ; 79 std::cout << std::endl;; 80 std::cout << ""==> Start TMVARegressionApplication"" << std::endl;; 81 ; 82 // Select methods (don't look at this code - not of interest); 83 if (myMethodList != """") {; 84 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; 85 ; 86 std::vector<TString> mlist = gTools().SplitString( myMethodList, ',' );; 87 for (UInt_t i=0; i<mlist.size(); i++) {; 88 std::string regMethod(mlist[i]);; 89 ; 90 if (Use.find(regMethod) == Use.end()) {; 91 std::cout << ""Method ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html:1224,test,tested,1224,doc/master/TMVARegressionApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html,1,['test'],['tested']
Testability,"6.1.2 \(\mbox{MINIMIZE}\); 6.1.3 \(\mbox{SCAN}\); 6.1.4 \(\mbox{SIMPLEX}\). 6.2 Floating point precision; 6.3 Parameter limits; 6.3.1 Getting the Right Minimum with Limits; 6.3.2 Getting the right parameter errors with limits. 6.4 Fixing and releasing parameters; 6.5 Interpretation of parameter errors; 6.5.1 Statistical interpretation; 6.5.2 The reliability of M error estimates. 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; 6.7 Additional trouble–shooting. 7 A complete example; 7.1 The user’s \(\mbox{FCN}\); 7.1.1 GaussFunction.h; 7.1.2 GaussFcn.h; 7.1.3 GaussFcn.cpp. 7.2 The user’s main program. Minuit 2; *** Fred JAMES and Matthias WINKLER CERN, Geneva ***; 1 Foreword; 1.1 What M is intended to do; M is conceived as a tool to find the minimum value of a multi-parameter function (the “\(\mbox{FCN}\)”) and analyze the shape of the function around the minimum. The principal application is foreseen for statistical analysis, working on chisquare or log-likelihood functions, to compute the best-fit parameter values and uncertainties, including correlations between the parameters. It is especially suited to handle difficult problems, including those which may require guidance in order to find the correct solution.; 1.2 What M is not intended to do; Although M will of course solve easy problems faster than complicated ones, it is not intended for the repeated solution of identically parametrized problems (such as track fitting in a detector) where a specialized program will in general be much more efficient.; 1.3 Further remarks; M was initially written in Fortran around 1975-1980 at CERN by Fred James @bib-MINUIT. Its main field of usage is statistical data analysis of experimental data recorded at CERN, but it is also used by people doing data analysis outside CERN or outside high energy physics (HEP). In 2002 Fred James started a project aiming to re-implement M in an object-oriented way using .; More information about recent developments, releases an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:5861,log,log-likelihood,5861,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['log'],['log-likelihood']
Testability,"60 (*itWeight) = DNN::gaussDouble (0.0, sqrt (layer.numWeights (nIn))); // factor 2.0 for ReLU; 1561 ++itWeight;; 1562 }; 1563 numInput = layer.numNodes ();; 1564 }; 1565 return;; 1566 }; 1567 ; 1568 }; 1569 ; 1570 ; 1571 ; 1572 ; 1573 ; 1574/*! \brief compute the error function; 1575 *; 1576 *; 1577 */; 1578 template <typename Container, typename ItWeight>; 1579 double Net::errorFunction (LayerData& layerData,; 1580 Container truth,; 1581 ItWeight itWeight,; 1582 ItWeight itWeightEnd,; 1583 double patternWeight,; 1584 double factorWeightDecay,; 1585 EnumRegularization eRegularization) const; 1586 {; 1587 double error (0);; 1588 switch (m_eErrorFunction); 1589 {; 1590 case ModeErrorFunction::SUMOFSQUARES:; 1591 {; 1592 error = sumOfSquares (layerData.valuesBegin (), layerData.valuesEnd (), begin (truth), end (truth),; 1593 layerData.deltasBegin (), layerData.deltasEnd (),; 1594 layerData.inverseActivationFunction (),; 1595 patternWeight);; 1596 break;; 1597 }; 1598 case ModeErrorFunction::CROSSENTROPY:; 1599 {; 1600 assert (!TMVA::DNN::isFlagSet (ModeOutputValues::DIRECT, layerData.outputMode ()));; 1601 std::vector<double> probabilities = layerData.probabilities ();; 1602 error = crossEntropy (begin (probabilities), end (probabilities),; 1603 begin (truth), end (truth),; 1604 layerData.deltasBegin (), layerData.deltasEnd (),; 1605 layerData.inverseActivationFunction (),; 1606 patternWeight);; 1607 break;; 1608 }; 1609 case ModeErrorFunction::CROSSENTROPY_MUTUALEXCLUSIVE:; 1610 {; 1611 std::cout << ""softmax."" << std::endl;; 1612 assert (!TMVA::DNN::isFlagSet (ModeOutputValues::DIRECT, layerData.outputMode ()));; 1613 std::vector<double> probabilities = layerData.probabilities ();; 1614 error = softMaxCrossEntropy (begin (probabilities), end (probabilities),; 1615 begin (truth), end (truth),; 1616 layerData.deltasBegin (), layerData.deltasEnd (),; 1617 layerData.inverseActivationFunction (),; 1618 patternWeight);; 1619 break;; 1620 }; 1621 }; 1622 if (factorWeightDec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:52944,assert,assert,52944,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['assert'],['assert']
Testability,"60 double sig = std::abs(sigma);; 661 ; 662 double tmin = (mMin - m0) / sig;; 663 double tmax = (mMax - m0) / sig;; 664 ; 665 if (alpha < 0) {; 666 double tmp = tmin;; 667 tmin = -tmax;; 668 tmax = -tmp;; 669 }; 670 ; 671 double absAlpha = std::abs(alpha);; 672 ; 673 if (tmin >= -absAlpha) {; 674 result += sig * sqrtPiOver2 * (approxErf(tmax / sqrt2) - approxErf(tmin / sqrt2));; 675 } else if (tmax <= -absAlpha) {; 676 double a = std::pow(n / absAlpha, n) * std::exp(-0.5 * absAlpha * absAlpha);; 677 double b = n / absAlpha - absAlpha;; 678 ; 679 if (useLog) {; 680 result += a * sig * (std::log(b - tmin) - std::log(b - tmax));; 681 } else {; 682 result += a * sig / (1.0 - n) * (1.0 / (std::pow(b - tmin, n - 1.0)) - 1.0 / (std::pow(b - tmax, n - 1.0)));; 683 }; 684 } else {; 685 double a = std::pow(n / absAlpha, n) * std::exp(-0.5 * absAlpha * absAlpha);; 686 double b = n / absAlpha - absAlpha;; 687 ; 688 double term1 = 0.0;; 689 if (useLog) {; 690 term1 = a * sig * (std::log(b - tmin) - std::log(n / absAlpha));; 691 } else {; 692 term1 = a * sig / (1.0 - n) * (1.0 / (std::pow(b - tmin, n - 1.0)) - 1.0 / (std::pow(n / absAlpha, n - 1.0)));; 693 }; 694 ; 695 double term2 = sig * sqrtPiOver2 * (approxErf(tmax / sqrt2) - approxErf(-absAlpha / sqrt2));; 696 ; 697 result += term1 + term2;; 698 }; 699 ; 700 if (result == 0); 701 return 1.E-300;; 702 return result;; 703}; 704 ; 705inline double bernsteinIntegral(double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs); 706{; 707 double xloScaled = (xlo - xmin) / (xmax - xmin);; 708 double xhiScaled = (xhi - xmin) / (xmax - xmin);; 709 ; 710 int degree = nCoefs - 1; // n+1 polys of degree n; 711 double norm = 0.;; 712 ; 713 for (int i = 0; i <= degree; ++i) {; 714 // for each of the i Bernstein basis polynomials; 715 // represent it in the 'power basis' (the naive polynomial basis); 716 // where the integral is straight forward.; 717 double temp = 0.;; 718 for (int j = i; j <= degree; ++j) { // power basis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:22901,log,log,22901,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,2,['log'],['log']
Testability,"60 int sq_size; /* No of elements in socket queue */; 2361#if defined(USE_SERVER_STATS); 2362 int sq_max_fill;; 2363#endif /* USE_SERVER_STATS */; 2364#endif /* ALTERNATIVE_QUEUE */; 2365 ; 2366 /* Memory related */; 2367 unsigned int max_request_size; /* The max request size */; 2368 ; 2369#if defined(USE_SERVER_STATS); 2370 struct mg_memory_stat ctx_memory;; 2371#endif; 2372 ; 2373 /* Operating system related */; 2374 char *systemName; /* What operating system is running */; 2375 time_t start_time; /* Server start time, used for authentication; 2376 * and for diagnstics. */; 2377 ; 2378#if defined(USE_TIMERS); 2379 struct ttimers *timers;; 2380#endif; 2381 ; 2382 /* Lua specific: Background operations and shared websockets */; 2383#if defined(USE_LUA); 2384 void *lua_background_state; /* lua_State (here as void *) */; 2385 pthread_mutex_t lua_bg_mutex; /* Protect background state */; 2386 int lua_bg_log_available; /* Use Lua background state for access log */; 2387#endif; 2388 ; 2389 /* Server nonce */; 2390 pthread_mutex_t nonce_mutex; /* Protects ssl_ctx, handlers,; 2391 * ssl_cert_last_mtime, nonce_count, and; 2392 * next (linked list) */; 2393 ; 2394 /* Server callbacks */; 2395 struct mg_callbacks callbacks; /* User-defined callback function */; 2396 void *user_data; /* User-defined data */; 2397 ; 2398 /* Part 2 - Logical domain:; 2399 * This holds hostname, TLS certificate, document root, ...; 2400 * set for a domain hosted at the server.; 2401 * There may be multiple domains hosted at one physical server.; 2402 * The default domain ""dd"" is the first element of a list of; 2403 * domains.; 2404 */; 2405 struct mg_domain_context dd; /* default domain */; 2406};; 2407 ; 2408 ; 2409#if defined(USE_SERVER_STATS); 2410static struct mg_memory_stat mg_common_memory = {0, 0, 0};; 2411 ; 2412static struct mg_memory_stat *; 2413get_memory_stat(struct mg_context *ctx); 2414{; 2415 if (ctx) {; 2416 return &(ctx->ctx_memory);; 2417 }; 2418 return &mg_common_memory;; 2419}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:74221,log,log,74221,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,"['Log', 'log']","['Logical', 'log']"
Testability,6037 43767.1 1; : 845 | 6.97518 10.5462 0.0200409 0.00175987 43761.2 2; : 846 | 6.93317 10.5904 0.0200239 0.00176026 43802.8 3; : 847 | 6.86223 10.6492 0.0200268 0.00176058 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 0.0200333 0.00176264 43785.9 6; : 850 | 6.72856 10.6877 0.0200521 0.00176189 43739.2 7; : 851 | 6.84236 10.8522 0.0200238 0.00176009 43802.7 8; : 852 Minimum Test error found - save the configuration ; : 852 | 6.78011 10.0733 0.0201111 0.00182524 43749.6 0; : 853 Minimum Test error found - save the configuration ; : 853 | 6.53284 9.90736 0.0201187 0.00181829 43714.8 0; : 854 | 6.67108 10.0768 0.0205443 0.0017732 42618.8 1; : 855 | 6.58878 10.7427 0.0200637 0.00176264 43713.2 2; : 856 | 6.54513 10.3387 0.0200413 0.00176141 43764 3; : 857 Minimum Test error found - save the configuration ; : 857 | 6.43616 9.72218 0.020097 0.00182688 43787.4 0; : 858 | 6.34936 10.0458 0.0200349 0.00176193 43780.5 1; : 859 Minimum Test error found - save the configuration ; : 859 | 6.20554 9.48603 0.0201607 0.00183833 43662.6 0; : 860 | 6.16695 10.0812 0.0200598 0.00175295 43699.5 1; : 861 Minimum Test error found - save the configuration ; : 861 | 6.43224 9.42041 0.0201492 0.00182399 43655.7 0; : 862 | 6.08067 10.0276 0.0200725 0.0017577 43680.5 1; : 863 | 6.34296 10.0575 0.0200642 0.00175521 43694.5 2; : 864 Minimum Test error found - save the configuration ; : 864 | 6.33486 9.34508 0.0201279 0.00182025 43697.5 0; : 865 | 6.18959 10.0219 0.0205128 0.00175205 42642.3 1; : 866 Minimum Test error found - save the configuration ; : 866 | 6.05678 9.24173 0.0204648 0.00182051 42908.5 0; : 867 | 5.92011 9.34278 0.0202303 0.00193747 43733 1; : 868 Minimum Test error found - save the configuration ; : 868 | 5.90509 9.03441 0.0202616 0.0019877 43778.3 0; : 869 | 5.98345 9.15873 0.0200325 0.00175472 43768.9 1; : 870 | 5.90893 9.16507 0.0202516 0.00176171 43266.9 2; : 871 Minimum Test error found - save the configuration ; : 871 | 5.78015 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:102831,Test,Test,102831,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"6074/// The value of `fStreamerType` are; 6075/// ~~~ {.cpp}; 6076/// kTObject : the class inherits from TObject; 6077/// kForeign : the class does not have a Streamer method; 6078/// kInstrumented: the class does have a Streamer method; 6079/// kExternal: the class has a free standing way of streaming itself; 6080/// kEmulatedStreamer: the class is missing its shared library.; 6081/// ~~~; 6082///; 6083/// Implementation note: the data member fProperty has the value -1; 6084/// until it is initialized.; 6085 ; 6086Long_t TClass::Property() const; 6087{; 6088 // Check if we can return without taking the lock,; 6089 // this is valid since fProperty is atomic and set as; 6090 // the last operation before return.; 6091 if (fProperty!=(-1)) return fProperty;; 6092 ; 6093 R__LOCKGUARD(gInterpreterMutex);; 6094 ; 6095 // Check if another thread set fProperty while we; 6096 // were waiting.; 6097 if (fProperty!=(-1)) return fProperty;; 6098 ; 6099 // Avoid asking about the class when it is still building; 6100 if (TestBit(kLoading)) return fProperty;; 6101 ; 6102 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 6103 // gets allocated on the heap and not in the mapped file.; 6104 TMmallocDescTemp setreset;; 6105 ; 6106 TClass *kl = const_cast<TClass*>(this);; 6107 ; 6108 kl->fStreamerType = TClass::kDefault;; 6109 kl->fStreamerImpl = &TClass::StreamerDefault;; 6110 ; 6111 if (InheritsFrom(TObject::Class())) {; 6112 kl->SetBit(kIsTObject);; 6113 ; 6114 // Is it DIRECT inheritance from TObject?; 6115 Int_t delta = kl->GetBaseClassOffsetRecurse(TObject::Class());; 6116 if (delta==0) kl->SetBit(kStartWithTObject);; 6117 ; 6118 kl->fStreamerType = kTObject;; 6119 kl->fStreamerImpl = &TClass::StreamerTObject;; 6120 }; 6121 ; 6122 if (HasInterpreterInfo()) {; 6123 ; 6124 // This code used to use ClassInfo_Has|IsValidMethod but since v6; 6125 // they return true if the routine is defined in the class or any of; 6126 // its parent. We explicitly want to kno",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:234600,Test,TestBit,234600,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.6148 0.0201377 0.00175591 43521.3 1; : 834 Minimum Test error found - save the configuration ; : 834 | 7.55905 11.3034 0.0200924 0.00180566 43747.5 0; : 835 | 7.51796 11.4086 0.0200653 0.00174972 43678.7 1; : 836 | 7.6539 11.6743 0.0201454 0.00175856 43509.3 2; : 837 | 7.98319 11.3225 0.0201169 0.00175643 43571.8 3; : 838 | 7.66699 11.6657 0.0201662 0.00181142 43585.5 4; : 839 Minimum Test error found - save the configuration ; : 839 | 7.52525 10.9666 0.0202646 0.00182844 43392.9 0; : 840 | 7.48548 1,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:100529,Test,Test,100529,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"61 int sq_size; /* No of elements in socket queue */; 2362#if defined(USE_SERVER_STATS); 2363 int sq_max_fill;; 2364#endif /* USE_SERVER_STATS */; 2365#endif /* ALTERNATIVE_QUEUE */; 2366 ; 2367 /* Memory related */; 2368 unsigned int max_request_size; /* The max request size */; 2369 ; 2370#if defined(USE_SERVER_STATS); 2371 struct mg_memory_stat ctx_memory;; 2372#endif; 2373 ; 2374 /* Operating system related */; 2375 char *systemName; /* What operating system is running */; 2376 time_t start_time; /* Server start time, used for authentication; 2377 * and for diagnstics. */; 2378 ; 2379#if defined(USE_TIMERS); 2380 struct ttimers *timers;; 2381#endif; 2382 ; 2383 /* Lua specific: Background operations and shared websockets */; 2384#if defined(USE_LUA); 2385 void *lua_background_state; /* lua_State (here as void *) */; 2386 pthread_mutex_t lua_bg_mutex; /* Protect background state */; 2387 int lua_bg_log_available; /* Use Lua background state for access log */; 2388#endif; 2389 ; 2390 /* Server nonce */; 2391 pthread_mutex_t nonce_mutex; /* Protects ssl_ctx, handlers,; 2392 * ssl_cert_last_mtime, nonce_count, and; 2393 * next (linked list) */; 2394 ; 2395 /* Server callbacks */; 2396 struct mg_callbacks callbacks; /* User-defined callback function */; 2397 void *user_data; /* User-defined data */; 2398 ; 2399 /* Part 2 - Logical domain:; 2400 * This holds hostname, TLS certificate, document root, ...; 2401 * set for a domain hosted at the server.; 2402 * There may be multiple domains hosted at one physical server.; 2403 * The default domain ""dd"" is the first element of a list of; 2404 * domains.; 2405 */; 2406 struct mg_domain_context dd; /* default domain */; 2407};; 2408 ; 2409 ; 2410#if defined(USE_SERVER_STATS); 2411static struct mg_memory_stat mg_common_memory = {0, 0, 0};; 2412 ; 2413static struct mg_memory_stat *; 2414get_memory_stat(struct mg_context *ctx); 2415{; 2416 if (ctx) {; 2417 return &(ctx->ctx_memory);; 2418 }; 2419 return &mg_common_memory;; 2420}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:74253,log,log,74253,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,"['Log', 'log']","['Logical', 'log']"
Testability,"6141/// The value of `fStreamerType` are; 6142/// ~~~ {.cpp}; 6143/// kTObject : the class inherits from TObject; 6144/// kForeign : the class does not have a Streamer method; 6145/// kInstrumented: the class does have a Streamer method; 6146/// kExternal: the class has a free standing way of streaming itself; 6147/// kEmulatedStreamer: the class is missing its shared library.; 6148/// ~~~; 6149///; 6150/// Implementation note: the data member fProperty has the value -1; 6151/// until it is initialized.; 6152 ; 6153Long_t TClass::Property() const; 6154{; 6155 // Check if we can return without taking the lock,; 6156 // this is valid since fProperty is atomic and set as; 6157 // the last operation before return.; 6158 if (fProperty!=(-1)) return fProperty;; 6159 ; 6160 R__LOCKGUARD(gInterpreterMutex);; 6161 ; 6162 // Check if another thread set fProperty while we; 6163 // were waiting.; 6164 if (fProperty!=(-1)) return fProperty;; 6165 ; 6166 // Avoid asking about the class when it is still building; 6167 if (TestBit(kLoading)) return fProperty;; 6168 ; 6169 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 6170 // gets allocated on the heap and not in the mapped file.; 6171 TMmallocDescTemp setreset;; 6172 ; 6173 TClass *kl = const_cast<TClass*>(this);; 6174 ; 6175 kl->fStreamerType = TClass::kDefault;; 6176 kl->fStreamerImpl = &TClass::StreamerDefault;; 6177 ; 6178 if (InheritsFrom(TObject::Class())) {; 6179 kl->SetBit(kIsTObject);; 6180 ; 6181 // Is it DIRECT inheritance from TObject?; 6182 Int_t delta = kl->GetBaseClassOffsetRecurse(TObject::Class());; 6183 if (delta==0) kl->SetBit(kStartWithTObject);; 6184 ; 6185 kl->fStreamerType = kTObject;; 6186 kl->fStreamerImpl = &TClass::StreamerTObject;; 6187 }; 6188 ; 6189 if (HasInterpreterInfo()) {; 6190 ; 6191 // This code used to use ClassInfo_Has|IsValidMethod but since v6; 6192 // they return true if the routine is defined in the class or any of; 6193 // its parent. We explicitly want to kno",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:237351,Test,TestBit,237351,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.22 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network tr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16958,Test,Test,16958,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,"618265, 0.749305866, 0.86126694,0.0346994482,0.0931224583, 0.655257095,; 0.959517847, 0.487057231, 0.859895745, 0.084794421, 0.718541715, 0.850918328, 0.818884782, 0.71627446,; 0.40822393, 0.63658567, 0.523838703, 0.372038872, 0.353426097, 0.598049047,0.0974868746, 0.276353038; };; ; Int_t rc1 = 0;; Int_t rc2 = 0;; TRandom3 r(4357);; Float_t x;; Int_t i;; ; // check whether the sequence is ok or not; for (i=0;i<1000;i++) {; x = r.Rndm();; // printf(""%e "",x-RefValue[i]); if(i%8==7) printf(""\n"");; if (TMath::Abs(x-RefValue[i]) > 10e-8) {; printf(""i=%d x=%.8f but should be %.8f\n"",i,x,RefValue[i]);; rc1 += 1;; }; }; ; // check whether a state can be saved and restored; TFile *file = new TFile(""random3.root"",""RECREATE"");; file->SetCompressionLevel(0);; r.Write(""r"");; delete file;; file = new TFile(""random3.root"");; TRandom3 *rs = (TRandom3*) file->Get(""r"");; for (i=0;i<1000;i++) {; if (r.Rndm() - rs->Rndm() != 0) rc2 += 1;; }; if (rc2 != 0) printf(""state restoration failed\n"");; ; return rc1 + rc2;; }; ; ; void testrandom(); {; testRandom3();; testAll();; }; e#define e(i)Definition RSha256.hxx:103; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TF1.h; TFile.h; N#define N; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRandom1.h; TRandom2.h; TRandom3.h; TRandomGen.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStopwatch.h; TUnuranContDist.h; TUnuran.h; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TF11-Dim function classDefinition TF1.h:233; TF1::GetRandomvirtual Double_t GetRandom(TRandom *rng=nullptr, Option_t *opt=nullptr)Return a random number following this function shape.Definition TF1.cxx:2192; TF1::SetP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testrandom_8C.html:29154,test,testrandom,29154,doc/master/testrandom_8C.html,https://root.cern,https://root.cern/doc/master/testrandom_8C.html,2,['test'],"['testAll', 'testrandom']"
Testability,"619 ; 620 // the integral with respect to the mean is the integral of a gamma distribution; 621 // negative ix does not need protection (gamma returns 0.0); 622 const double ix = 1 + x;; 623 ; 624 return ROOT::Math::inc_gamma(ix, integrandMax) - ROOT::Math::inc_gamma(ix, integrandMin);; 625}; 626 ; 627inline double logNormalIntegral(double xMin, double xMax, double m0, double k); 628{; 629 const double root2 = std::sqrt(2.);; 630 ; 631 double ln_k = std::abs(std::log(k));; 632 double ret =; 633 0.5 * (TMath::Erf(std::log(xMax / m0) / (root2 * ln_k)) - TMath::Erf(std::log(xMin / m0) / (root2 * ln_k)));; 634 ; 635 return ret;; 636}; 637 ; 638inline double logNormalIntegralStandard(double xMin, double xMax, double mu, double sigma); 639{; 640 const double root2 = std::sqrt(2.);; 641 ; 642 double ln_k = std::abs(sigma);; 643 double ret =; 644 0.5 * (TMath::Erf((std::log(xMax) - mu) / (root2 * ln_k)) - TMath::Erf((std::log(xMin) - mu) / (root2 * ln_k)));; 645 ; 646 return ret;; 647}; 648 ; 649inline double cbShapeIntegral(double mMin, double mMax, double m0, double sigma, double alpha, double n); 650{; 651 const double sqrtPiOver2 = 1.2533141373;; 652 const double sqrt2 = 1.4142135624;; 653 ; 654 double result = 0.0;; 655 bool useLog = false;; 656 ; 657 if (std::abs(n - 1.0) < 1.0e-05); 658 useLog = true;; 659 ; 660 double sig = std::abs(sigma);; 661 ; 662 double tmin = (mMin - m0) / sig;; 663 double tmax = (mMax - m0) / sig;; 664 ; 665 if (alpha < 0) {; 666 double tmp = tmin;; 667 tmin = -tmax;; 668 tmax = -tmp;; 669 }; 670 ; 671 double absAlpha = std::abs(alpha);; 672 ; 673 if (tmin >= -absAlpha) {; 674 result += sig * sqrtPiOver2 * (approxErf(tmax / sqrt2) - approxErf(tmin / sqrt2));; 675 } else if (tmax <= -absAlpha) {; 676 double a = std::pow(n / absAlpha, n) * std::exp(-0.5 * absAlpha * absAlpha);; 677 double b = n / absAlpha - absAlpha;; 678 ; 679 if (useLog) {; 680 result += a * sig * (std::log(b - tmin) - std::log(b - tmax));; 681 } else {; 682 result += a * sig ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:21461,log,log,21461,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,2,['log'],['log']
Testability,64.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 2,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91743,Test,Test,91743,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"642 }; 643 ; 644 m = fDataSetInfo.CorrelationMatrix(""Regression"");; 645 h = fDataSetInfo.CreateCorrelationMatrixHist(m, ""CorrelationMatrix"", ""Correlation Matrix"");; 646 if (h != 0) {; 647 h->Write();; 648 delete h;; 649 }; 650 }; 651 ; 652 // some default transformations to evaluate; 653 // NOTE: all transformations are destroyed after this test; 654 TString processTrfs = ""I""; //""I;N;D;P;U;G,D;""; 655 ; 656 // plus some user defined transformations; 657 processTrfs = fTransformations;; 658 ; 659 // remove any trace of identity transform - if given (avoid to apply it twice); 660 std::vector<TMVA::TransformationHandler *> trfs;; 661 TransformationHandler *identityTrHandler = 0;; 662 ; 663 std::vector<TString> trfsDef = gTools().SplitString(processTrfs, ';');; 664 std::vector<TString>::iterator trfsDefIt = trfsDef.begin();; 665 for (; trfsDefIt != trfsDef.end(); ++trfsDefIt) {; 666 trfs.push_back(new TMVA::TransformationHandler(fDataSetInfo, ""Factory""));; 667 TString trfS = (*trfsDefIt);; 668 ; 669 // Log() << kINFO << Endl;; 670 Log() << kDEBUG << ""current transformation string: '"" << trfS.Data() << ""'"" << Endl;; 671 TMVA::CreateVariableTransforms(trfS, fDataSetInfo, *(trfs.back()), Log());; 672 ; 673 if (trfS.BeginsWith('I')); 674 identityTrHandler = trfs.back();; 675 }; 676 ; 677 const std::vector<Event *> &inputEvents = fDataSetInfo.GetDataSet()->GetEventCollection();; 678 ; 679 // apply all transformations; 680 std::vector<TMVA::TransformationHandler *>::iterator trfIt = trfs.begin();; 681 ; 682 for (; trfIt != trfs.end(); ++trfIt) {; 683 // setting a Root dir causes the variables distributions to be saved to the root file; 684 (*trfIt)->SetRootDir(RootBaseDir()->GetDirectory(fDataSetInfo.GetName())); // every dataloader have its own dir; 685 (*trfIt)->CalcTransformations(inputEvents);; 686 }; 687 if (identityTrHandler); 688 identityTrHandler->PrintVariableRanking();; 689 ; 690 // clean up; 691 for (trfIt = trfs.begin(); trfIt != trfs.end(); ++trfIt); 692 delete *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:26880,Log,Log,26880,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Log'],['Log']
Testability,"644 for( UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls < clsEnd; ++cls ){; 1645 trainingSumWeightsPerClass.at(cls) =; 1646 std::accumulate(tmpEventVector[Types::kTraining].at(cls).begin(),; 1647 tmpEventVector[Types::kTraining].at(cls).end(),; 1648 Double_t(0), [](Double_t w, const TMVA::Event *E) { return w + E->GetOriginalWeight(); });; 1649 ; 1650 testingSumWeightsPerClass.at(cls) =; 1651 std::accumulate(tmpEventVector[Types::kTesting].at(cls).begin(),; 1652 tmpEventVector[Types::kTesting].at(cls).end(),; 1653 Double_t(0), [](Double_t w, const TMVA::Event *E) { return w + E->GetOriginalWeight(); });; 1654 ; 1655 if ( cls == dsi.GetSignalClassIndex()){; 1656 trainingSumSignalWeights += trainingSumWeightsPerClass.at(cls);; 1657 testingSumSignalWeights += testingSumWeightsPerClass.at(cls);; 1658 }else{; 1659 trainingSumBackgrWeights += trainingSumWeightsPerClass.at(cls);; 1660 testingSumBackgrWeights += testingSumWeightsPerClass.at(cls);; 1661 }; 1662 ; 1663 // output statistics; 1664 ; 1665 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1666 << setiosflags(ios::left) << std::setw(maxL); 1667 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1668 << ""training events : "" << trainingSizePerClass.at(cls) << Endl;; 1669 Log() << kDEBUG << ""\t(sum of weights: "" << trainingSumWeightsPerClass.at(cls) << "")""; 1670 << "" - requested were "" << eventCounts[cls].nTrainingEventsRequested << "" events"" << Endl;; 1671 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1672 << setiosflags(ios::left) << std::setw(maxL); 1673 << dsi.GetClassInfo(cls)->GetName() << "" -- ""; 1674 << ""testing events : "" << testingSizePerClass.at(cls) << Endl;; 1675 Log() << kDEBUG << ""\t(sum of weights: "" << testingSumWeightsPerClass.at(cls) << "")""; 1676 << "" - requested were "" << eventCounts[cls].nTestingEventsRequested << "" events"" << Endl;; 1677 Log() << kINFO //<< Form(""Dataset[%s] : "",dsi.GetName()); 1678 << setiosflags(ios::left) << std::setw(maxL); 1679 << dsi.GetClassInfo(cls)->Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:77445,Log,Log,77445,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability,"646 fStreamer = TVirtualStreamerInfo::Factory()->GenEmulatedClassStreamer( GetName(), silent );; 1647 }; 1648 }; 1649 } else if (TClassEdit::IsStdPair(GetName())) {; 1650 // std::pairs have implicit conversions; 1651 GetSchemaRules(kTRUE);; 1652 }; 1653 ; 1654 ResetBit(kLoading);; 1655}; 1656 ; 1657////////////////////////////////////////////////////////////////////////////////; 1658/// TClass dtor. Deletes all list that might have been created.; 1659 ; 1660TClass::~TClass(); 1661{; 1662 R__LOCKGUARD(gInterpreterMutex);; 1663 ; 1664 // Remove from the typedef hashtables.; 1665 if (fgClassTypedefHash && TestBit (kHasNameMapNode)) {; 1666 TString resolvedThis = TClassEdit::ResolveTypedef (GetName(), kTRUE);; 1667 TIter next (fgClassTypedefHash->GetListForObject (resolvedThis));; 1668 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1669 if (resolvedThis == htmp->String() && htmp->fOrigName == GetName()) {; 1670 fgClassTypedefHash->Remove (htmp);; 1671 delete htmp;; 1672 break;; 1673 }; 1674 }; 1675 }; 1676 ; 1677 // Not owning lists, don't call Delete(); 1678 // But this still need to be done first because the TList destructor; 1679 // does access the object contained (via GetObject()->TestBit(kCanDelete)); 1680 delete fStreamer; fStreamer =nullptr;; 1681 delete fAllPubData; fAllPubData =nullptr;; 1682 delete fAllPubMethod; fAllPubMethod=nullptr;; 1683 ; 1684 delete fPersistentRef.load();; 1685 ; 1686 if (fBase.load()); 1687 (*fBase).Delete();; 1688 delete fBase.load(); fBase = nullptr;; 1689 ; 1690 if (fData.load()); 1691 (*fData).Delete();; 1692 delete fData.load(); fData = nullptr;; 1693 ; 1694 if (fUsingData.load()); 1695 (*fUsingData).Delete();; 1696 delete fUsingData.load(); fUsingData = nullptr;; 1697 ; 1698 if (fEnums.load()); 1699 (*fEnums).Delete();; 1700 delete fEnums.load(); fEnums = nullptr;; 1701 ; 1702 if (fFuncTemplate); 1703 fFuncTemplate->Delete();; 1704 delete fFuncTemplate; fFuncTemplate = nullptr;; 1705 ; 1706 if (fMethod.load",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:64153,Test,TestBit,64153,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['Test'],['TestBit']
Testability,647 nsig=151.993 sig1frac=0.742914; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 890; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 880; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 870; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-903.916) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.877959 a1=-0.428367 mean=4.99746 nbkg=167.444 nsig=157.288 sig1frac=0.424997; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 860; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 850; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 840; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 830; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-970.563) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.867793 a1=-0.296045 mean=5.10353 nbkg=164.822 nsig=173.566 sig1frac=0.899431; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 820; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 810; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 800; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 790; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 780; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 770; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 760; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-915.472) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.807508 a1=-0.34963 mean=5.09438 nbkg=142.436 nsig=172.312 sig1frac=0.886183; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 750; RooAbsMinimizerFcn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:12977,log,log,12977,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. Long64_t DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the caceh information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:27910,sandbox,sandbox,27910,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['sandbox'],['sandbox']
Testability,"64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. Long64_t DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:31907,sandbox,sandbox,31907,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['sandbox'],['sandbox']
Testability,"64_t size = 0)MENU ; virtual voidSetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTree::SetNotify(TObject* obj); virtual voidTTree::SetObject(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTChain::SetPacketSize(Int_t size = 100); virtual voidTTree::SetParallelUnzip(Bool_t opt = kTRUE, Float_t RelSize = -1); virtual voidTTree::SetPerfStats(TVirtualPerfStats* perf); virtual voidTChain::SetProof(Bool_t on = kTRUE, Bool_t refresh = kFALSE, Bool_t gettreeheader = kFALSE); virtual voidTTree::SetScanField(Int_t n = 50)MENU ; virtual voidTTree::SetTimerInterval(Int_t msec = 333); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTTree::SetTreeIndex(TVirtualIndex* index); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTTree::SetUpdate(Int_t freq = 0); virtual voidTChain::SetWeight(Double_t w = 1, Option_t* option = """"); virtual voidTTree::Show(Long64_t entry = -1, Int_t lenmax = 20); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidTTree::StartViewer()MENU ; virtual voidTTree::StopCacheLearningPhase(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTTree::UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual voidTChain::UseCache(Int_t maxCacheSize = 10, Int_t pageSize = 0); virtual voidTTree::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTTree::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofChain.html:19920,Test,TestBit,19920,root/html534/TProofChain.html,https://root.cern,https://root.cern/root/html534/TProofChain.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidSaveAs(const char* filename = """", Option_t* option = """") const; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBytesRead(Long64_t nbytes); virtual voidSetBytesReadExtra(Long64_t nbytes); virtual voidSetCompress(Double_t cx); virtual voidSetCpuTime(Double_t cptime); virtual voidSetDiskTime(Double_t t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetGraphIO(TGraphErrors* gr); virtual voidSetGraphTime(TGraphErrors* gr); virtual voidSetHostInfo(const char* info); virtual voidSetName(const char* name); virtual voidSetNleaves(Int_t nleaves); virtual voidSetNumEvents(Long64_t); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetReadaheadSize(Int_t nbytes); virtual voidSetReadCalls(Int_t ncalls); virtual voidSetRealNorm(Double_t rnorm); virtual voidSetRealTime(Double_t rtime); virtual voidSetTreeCacheSize(Int_t nbytes); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetUnzipTime(Double_t uztime); virtual voidShowMembers(TMemberInspector&); virtual voidSimpleEvent(TVirtualPerfStats::EEventType); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUnzipEvent(TObject* tree, Long64_t pos, Double_t start, Int_t complen, Int_t objlen); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreePerfStats.html:8441,Test,TestBit,8441,root/html534/TTreePerfStats.html,https://root.cern,https://root.cern/root/html534/TTreePerfStats.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,65.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0925 30.8793 0.0200419 0.00175584 43749.1 2; : 703 Minimum Test error found - save the configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:90059,Test,Test,90059,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,65.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 55.5039 42.6809 0.0201245 0.00180935 43679.7 0; : 662 Minimum Test error found - save the configuration ; : 662 | 54.3572 42.2723 0.0202587 0.00183315 43417.9 0; : 663 Minimum Test error found - save the configuration ; : 663 | 53.566 41.7624 0.0203991 0.00186617 43166.5 0; : 664 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:84679,Test,Test,84679,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"65; TPad::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideCompute distance from point px,py to a box.Definition TPad.cxx:1174; TPad::fFixedAspectRatioBool_t fFixedAspectRatioTrue if fixed aspect ratio.Definition TPad.h:104; TPad::PaintFillAreavoid PaintFillArea(Int_t n, Float_t *x, Float_t *y, Option_t *option="""") overrideDefinition TPad.cxx:4017; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from a pad and its sub-pads.Definition TPad.cxx:5389; TPad::HasFixedAspectRatioBool_t HasFixedAspectRatio() const overrideDefinition TPad.h:270; TPad::CloseToolTipvoid CloseToolTip(TObject *tip) overrideHide tool tip.Definition TPad.cxx:7123; TPad::GetUxminDouble_t GetUxmin() const overrideReturns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decad...Definition TPad.h:228; TPad::SetToolTipTextvoid SetToolTipText(const char *text, Long_t delayms=1000) overrideSet tool tip text associated with this pad.Definition TPad.cxx:6690; TPad::PaintPolyLinevoid PaintPolyLine(Int_t n, Float_t *x, Float_t *y, Option_t *option="""") overridePaint polyline in CurrentPad World coordinates.Definition TPad.cxx:4392; TPad::lsvoid ls(Option_t *option="""") const overrideList all primitives in pad.Definition TPad.cxx:3090; TPad::GetViewTView * GetView() const overrideDefinition TPad.h:254; TPad::ModifiedUpdatevoid ModifiedUpdate() overrideShort cut to call Modified() and Update() in a single call.Definition TPad.cxx:3530; TPad::fVtoAbsPixelkDouble_t fVtoAbsPixelkConversion coefficient for V NDC to absolute pixel.Definition TPad.h:51; TPad::GetPadSaveTVirtualPad * GetPadSave() const overrideGet save pad.Definition TPad.cxx:2820; TPad::SetAttLinePSvoid SetAttLinePS(Color_t color, Style_t style, Width_t lwidth) overrideSet postscript li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:48486,log,log,48486,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['log'],['log']
Testability,"6669 } else {; 6670 xyerror = gStyle->GetErrorX();; 6671 }; 6672 ; 6673 Double_t xk, xstep, yk, ystep;; 6674 for (Int_t j=Hparam.yfirst; j<=Hparam.ylast;j++) {; 6675 y = fYaxis->GetBinCenter(j);; 6676 ey = fYaxis->GetBinWidth(j)*xyerror;; 6677 y1 = y-ey;; 6678 y2 = y+ey;; 6679 if (Hoption.Logy) {; 6680 if (y > 0) y = TMath::Log10(y);; 6681 else continue;; 6682 if (y1 > 0) y1 = TMath::Log10(y1);; 6683 else y1 = Hparam.ymin;; 6684 if (y2 > 0) y2 = TMath::Log10(y2);; 6685 else y2 = Hparam.ymin;; 6686 }; 6687 yk = fYaxis->GetBinLowEdge(j);; 6688 ystep = fYaxis->GetBinWidth(j);; 6689 for (Int_t i=Hparam.xfirst; i<=Hparam.xlast;i++) {; 6690 xk = fXaxis->GetBinLowEdge(i);; 6691 xstep = fXaxis->GetBinWidth(i);; 6692 if (!IsInside(xk+0.5*xstep,yk+0.5*ystep)) continue;; 6693 Int_t bin = fH->GetBin(i,j);; 6694 x = fXaxis->GetBinCenter(i);; 6695 ex = fXaxis->GetBinWidth(i)*xyerror;; 6696 x1 = x-ex;; 6697 x2 = x+ex;; 6698 if (Hoption.Logx) {; 6699 if (x > 0) x = TMath::Log10(x);; 6700 else continue;; 6701 if (x1 > 0) x1 = TMath::Log10(x1);; 6702 else x1 = Hparam.xmin;; 6703 if (x2 > 0) x2 = TMath::Log10(x2);; 6704 else x2 = Hparam.xmin;; 6705 }; 6706 z = fH->GetBinContent(bin);; 6707 if (fH->GetBinErrorOption() == TH1::kNormal) {; 6708 ez1 = fH->GetBinError(bin);; 6709 ez2 = ez1;; 6710 }; 6711 else {; 6712 ez1 = fH->GetBinErrorLow(bin);; 6713 ez2 = fH->GetBinErrorUp(bin);; 6714 }; 6715 z1 = z - ez1;; 6716 z2 = z + ez2;; 6717 if (Hoption.Logz) {; 6718 if (z > 0) z = TMath::Log10(z);; 6719 else z = Hparam.zmin;; 6720 if (z1 > 0) z1 = TMath::Log10(z1);; 6721 else z1 = Hparam.zmin;; 6722 if (z2 > 0) z2 = TMath::Log10(z2);; 6723 else z2 = Hparam.zmin;; 6724 ; 6725 }; 6726 if (z <= Hparam.zmin) continue;; 6727 if (z > Hparam.zmax) z = Hparam.zmax;; 6728 ; 6729 temp1[0] = x1;; 6730 temp1[1] = y;; 6731 temp1[2] = z;; 6732 temp2[0] = x2;; 6733 temp2[1] = y;; 6734 temp2[2] = z;; 6735 gPad->PaintLine3D(temp1, temp2);; 6736 temp1[0] = x;; 6737 temp1[1] = y1;; 6738 temp1[2] = z;; 6739 temp2[0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:245358,Log,Logx,245358,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability,67 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test error found - save the configuration ; : 786 | 12.1859 15.8365 0.0202015 0.00183664 43561.5 0; : 787 Minimum Test error found - save the configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test erro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:97275,Test,Test,97275,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,67 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80776,Test,Test,80776,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"671/// ch.Draw(""var:t1.v1:t2.v2"");; 672/// ~~~; 673/// When a TChain::Draw is executed, an automatic call to TTree::AddFriend; 674/// connects the trees in the chain. When a chain is deleted, its friend; 675/// elements are also deleted.; 676///; 677/// The number of entries in the friend must be equal or greater to the number; 678/// of entries of the original chain. If the friend has fewer entries a warning; 679/// is given and the resulting histogram will have missing entries.; 680/// For additional information see TTree::AddFriend.; 681 ; 682TFriendElement* TChain::AddFriend(const char* chain, const char* dummy /* = """" */); 683{; 684 if (!fFriends) {; 685 fFriends = new TList();; 686 }; 687 TFriendElement* fe = new TFriendElement(this, chain, dummy);; 688 ; 689 R__ASSERT(fe); // There used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null; 690 ; 691 fFriends->Add(fe);; 692 ; 693 if (fProofChain); 694 // This updates the proxy chain when we will really use PROOF; 695 ResetBit(kProofUptodate);; 696 ; 697 // We need to invalidate the loading of the current tree because its list; 698 // of real friends is now obsolete. It is repairable only from LoadTree.; 699 InvalidateCurrentTree();; 700 ; 701 TTree* tree = fe->GetTree();; 702 if (!tree) {; 703 Warning(""AddFriend"", ""Unknown TChain %s"", chain);; 704 }; 705 return fe;; 706}; 707 ; 708////////////////////////////////////////////////////////////////////////////////; 709/// Add the whole chain or tree as a friend of this chain.; 710 ; 711TFriendElement* TChain::AddFriend(const char* chain, TFile* dummy); 712{; 713 if (!fFriends) fFriends = new TList();; 714 TFriendElement *fe = new TFriendElement(this,chain,dummy);; 715 ; 716 R__ASSERT(fe); // There used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null; 717 ; 718 fFriends->Add(fe);; 719 ; 720 if (fProofChain); 721 // This updates the proxy chain when we will really use PROOF; 722 ResetBit(kProofUptodat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:26884,assert,assert,26884,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['assert'],['assert']
Testability,"679 if (m == 0); 1680 continue;; 1681 theVars->push_back(m->GetTestvarName());; 1682 rvec.push_back(m->GetSignalReferenceCut());; 1683 theVars->back().ReplaceAll(""MVA_"", """");; 1684 mvaRes.push_back(dynamic_cast<ResultsClassification *>(; 1685 m->Data()->GetResults(m->GetMethodName(), Types::kTesting, Types::kMaxAnalysisType)));; 1686 }; 1687 ; 1688 // for overlap study; 1689 TMatrixD *overlapS = new TMatrixD(nmeth, nmeth);; 1690 TMatrixD *overlapB = new TMatrixD(nmeth, nmeth);; 1691 (*overlapS) *= 0; // init...; 1692 (*overlapB) *= 0; // init...; 1693 ; 1694 // loop over test tree; 1695 DataSet *defDs = method->fDataSetInfo.GetDataSet();; 1696 defDs->SetCurrentType(Types::kTesting);; 1697 for (Int_t ievt = 0; ievt < defDs->GetNEvents(); ievt++) {; 1698 const Event *ev = defDs->GetEvent(ievt);; 1699 ; 1700 // for correlations; 1701 TMatrixD *theMat = 0;; 1702 for (Int_t im = 0; im < nmeth; im++) {; 1703 // check for NaN value; 1704 Double_t retval = (Double_t)(*mvaRes[im])[ievt][0];; 1705 if (TMath::IsNaN(retval)) {; 1706 Log() << kWARNING << ""Found NaN return value in event: "" << ievt << "" for method \""""; 1707 << methodsNoCuts[im]->GetName() << ""\"""" << Endl;; 1708 dvec[im] = 0;; 1709 } else; 1710 dvec[im] = retval;; 1711 }; 1712 for (Int_t iv = 0; iv < nvar; iv++); 1713 dvec[iv + nmeth] = (Double_t)ev->GetValue(iv);; 1714 if (method->fDataSetInfo.IsSignal(ev)) {; 1715 tpSig->AddRow(dvec);; 1716 theMat = overlapS;; 1717 } else {; 1718 tpBkg->AddRow(dvec);; 1719 theMat = overlapB;; 1720 }; 1721 ; 1722 // count overlaps; 1723 for (Int_t im = 0; im < nmeth; im++) {; 1724 for (Int_t jm = im; jm < nmeth; jm++) {; 1725 if ((dvec[im] - rvec[im]) * (dvec[jm] - rvec[jm]) > 0) {; 1726 (*theMat)(im, jm)++;; 1727 if (im != jm); 1728 (*theMat)(jm, im)++;; 1729 }; 1730 }; 1731 }; 1732 }; 1733 ; 1734 // renormalise overlap matrix; 1735 (*overlapS) *= (1.0 / defDs->GetNEvtSigTest()); // init...; 1736 (*overlapB) *= (1.0 / defDs->GetNEvtBkgdTest()); // init...; 1737 ; 1738 tpSig->Make",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:70867,Log,Log,70867,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"68 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.22 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:17235,Test,Test,17235,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,68 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.6148 0.0201377 0.00175591 43521.3 1; : 834 Minimum Test error found - save the configuration ; : 834 | 7.55905 11.3034 0.0200924 0.00180566 43747.5 0; : 835 | 7.51796 11.4086 0.0200653 0.00174972 43678.7 1; : 836 | 7.6539 11.6743 0.0201454 0.00175856 43509.3 2; : 837 | 7.98319 11.3225 0.0201169 0.00175643 43571.8 3; : 838 | 7.66699 11.6657 0.0201662 0.00181142 43585.5 4; : 839 Minimum Test error found - save the configuration ; : 839 | 7.52525 10.9666 0.0202646 0.00182844 43392.9 0; : 840 | 7.48548 11.313 0.020051 0.00174873 43710.5 1; : 841 | 7.28024 11.1847 0.0200374 0.0017493 43744.4 2; : 842 | 7.18939 11.0082 0.0200397 0.00175322 43748.2 3; : 843 Minimum Test error found - save the configuration ; : 843 | 7.01613 10.4197 0.0201334 0.00182993 43707.5 0; : 844 | 6.83302 10.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:100810,Test,Test,100810,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"69 }; 2870 SetBit(kGeoRotation);; 2871 SetBit(kGeoReflection, !IsReflection());; 2872}; 2873 ; 2874////////////////////////////////////////////////////////////////////////////////; 2875/// Save a primitive as a C++ statement(s) on output stream ""out"".; 2876 ; 2877void TGeoHMatrix::SavePrimitive(std::ostream &out, Option_t * /*option*/ /*= """"*/); 2878{; 2879 if (TestBit(kGeoSavePrimitive)); 2880 return;; 2881 const Double_t *tr = fTranslation;; 2882 const Double_t *rot = fRotationMatrix;; 2883 out << "" // HMatrix: "" << GetName() << std::endl;; 2884 out << "" tr[0] = "" << tr[0] << ""; ""; 2885 << ""tr[1] = "" << tr[1] << ""; ""; 2886 << ""tr[2] = "" << tr[2] << "";"" << std::endl;; 2887 out << "" rot[0] ="" << rot[0] << ""; ""; 2888 << ""rot[1] = "" << rot[1] << ""; ""; 2889 << ""rot[2] = "" << rot[2] << "";"" << std::endl;; 2890 out << "" rot[3] ="" << rot[3] << ""; ""; 2891 << ""rot[4] = "" << rot[4] << ""; ""; 2892 << ""rot[5] = "" << rot[5] << "";"" << std::endl;; 2893 out << "" rot[6] ="" << rot[6] << ""; ""; 2894 << ""rot[7] = "" << rot[7] << ""; ""; 2895 << ""rot[8] = "" << rot[8] << "";"" << std::endl;; 2896 const char *name = GetPointerName();; 2897 out << "" auto "" << name << "" = new TGeoHMatrix(\"""" << GetName() << ""\"");"" << std::endl;; 2898 out << "" "" << name << ""->SetTranslation(tr);"" << std::endl;; 2899 out << "" "" << name << ""->SetRotation(rot);"" << std::endl;; 2900 if (IsTranslation()); 2901 out << "" "" << name << ""->SetBit(TGeoMatrix::kGeoTranslation);"" << std::endl;; 2902 if (IsRotation()); 2903 out << "" "" << name << ""->SetBit(TGeoMatrix::kGeoRotation);"" << std::endl;; 2904 if (IsReflection()); 2905 out << "" "" << name << ""->SetBit(TGeoMatrix::kGeoReflection);"" << std::endl;; 2906 TObject::SetBit(kGeoSavePrimitive);; 2907}; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:99071,Test,TestBit,99071,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Test'],['TestBit']
Testability,69.4 0; : 764 Minimum Test error found - save the configuration ; : 764 | 15.3977 18.5678 0.0201039 0.0018081 43725.8 0; : 765 | 15.238 19.0685 0.0200523 0.00175459 43721.4 1; : 766 Minimum Test error found - save the configuration ; : 766 | 14.9634 18.5633 0.0200937 0.00181207 43759.7 0; : 767 Minimum Test error found - save the configuration ; : 767 | 14.6611 18.2211 0.0200896 0.00180918 43762.7 0; : 768 Minimum Test error found - save the configuration ; : 768 | 14.4892 18.1817 0.0200772 0.00181141 43797.6 0; : 769 Minimum Test error found - save the configuration ; : 769 | 14.3366 17.8635 0.0200909 0.00180773 43756.2 0; : 770 Minimum Test error found - save the configuration ; : 770 | 14.5733 17.5465 0.0200968 0.00180191 43728 0; : 771 | 13.9827 17.8429 0.0200367 0.0017469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 0.0201132 0.00182368 43740.8 0; : 782 | 12.7687 16.3043 0.0200467 0.00175214 43728.9 1; : 783 Minimum Test error found - save the configuration ; : 783 | 12.8267 16.1842 0.0201195 0.00182779 43735.8 0; : 784 Minimum Test error found - save the configuration ; : 784 | 12.4995 16.0856 0.0201584 0.00184241 43677.8 0; : 785 Minimum Test error found - save the configuration ; : 785 | 12.0807 15.9892 0.0201102 0.00181891 43736.6 0; : 786 Minimum Test e,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:96149,Test,Test,96149,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"699 localInfo = FindOnfileInfo(fClonesClass, fBranches);; 5700 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionGetter;; 5701 }; 5702 ; 5703 if (create) {; 5704 SetActionSequence(originalClass, localInfo, create, fReadActionSequence);; 5705 }; 5706}; 5707 ; 5708////////////////////////////////////////////////////////////////////////////////; 5709/// Set the ReadLeaves pointer to execute the expected operations.; 5710 ; 5711void TBranchElement::SetReadLeavesPtr(); 5712{; 5713 if (TestBit(kDecomposedObj)) {; 5714 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesMakeClass;; 5715 } else if (fType == 4) {; 5716 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesCollection;; 5717 } else if (fType == 41) {; 5718 if( fSplitLevel >= TTree::kSplitCollectionOfPointers ) {; 5719 if (fBranchCount->fSTLtype == ROOT::kSTLvector) {; 5720 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesCollectionSplitVectorPtrMember;; 5721 } else {; 5722 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesCollectionSplitPtrMember;; 5723 }; 5724 } else {; 5725 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesCollectionMember;; 5726 }; 5727 } else if (fType == 3) {; 5728 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesClones;; 5729 } else if (fType == 31) {; 5730 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesClonesMember;; 5731 } else if (fType < 0) {; 5732 fReadLeaves = (ReadLeaves_t)&TBranchElement::ReadLeavesCustomStreamer;; 5733 } else if (fType == 0 && fID == -1) {; 5734 // top-level branch.; 5735 bool hasCustomStreamer = fBranchClass.GetClass() && !fBranchClass.GetClass()->GetCollectionProxy() && (fBranchClass.GetClass()->GetStreamer() != nullptr || fBranchClass.GetClass()->HasCustomStreamerMember());; 5736 if (hasCustomStreamer) {; 5737 // We are in the case where the object did *not* have a custom; 5738 // Streamer when the TTree was written but now *does* have a custom; 5739 // Streamer thus we must use it.; 5740 fReadLeav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:212741,Test,TestBit,212741,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,6mdataset/weights/TMVA_CNN_Classification_PyKeras.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_PyTorch.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: BDT for Classification performance; : ; BDT : [dataset] : Evaluation of BDT on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.00573 sec ; Factory : Test method: TMVA_DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 400; : ; TMVA_DNN_CPU : [dataset] : Evaluation of TMVA_DNN_CPU on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.023 sec ; Factory : Test method: TMVA_CNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 400; : ; TMVA_CNN_CPU : [dataset] : Evaluation of TMVA_CNN_CPU on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.149 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_cnn.h5; PyKeras : [dataset] : Evaluation of PyKeras on testing sample (400 events); : Elapsed time for evaluation of 400 events: 0.175 sec ; Factory : Test method: PyTorch for Classification performance; : ; : Setup PyTorch Model for training; : Executing user initialization code from /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials/tmva/PyTorch_Generate_CNN_Model.py; RecursiveScriptModule(; original_name=Sequential; (0): RecursiveScriptModule(original_name=Reshape); (1): RecursiveScriptModule(original_name=Conv2d); (2): RecursiveScriptModule(original_name=ReLU); (3): RecursiveScriptModule(original_name=BatchNorm2d); (4): RecursiveScriptModule(ori,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:38611,Test,Test,38611,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability,7 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80323,Test,Test,80323,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"7 Int_t nwrite = 0;; 4608 Int_t nerror = 0;; 4609 Int_t nbranches = fBranches.GetEntriesFast();; 4610 ; 4611 // Case of one single super branch. Automatically update; 4612 // all the branch addresses if a new object was created.; 4613 if (nbranches == 1); 4614 ((TBranch *)fBranches.UncheckedAt(0))->UpdateAddress();; 4615 ; 4616 if (fBranchRef); 4617 fBranchRef->Clear();; 4618 ; 4619#ifdef R__USE_IMT; 4620 const auto useIMT = ROOT::IsImplicitMTEnabled() && fIMTEnabled;; 4621 ROOT::Internal::TBranchIMTHelper imtHelper;; 4622 if (useIMT) {; 4623 fIMTFlush = true;; 4624 fIMTZipBytes.store(0);; 4625 fIMTTotBytes.store(0);; 4626 }; 4627#endif; 4628 ; 4629 for (Int_t i = 0; i < nbranches; ++i) {; 4630 // Loop over all branches, filling and accumulating bytes written and error counts.; 4631 TBranch *branch = (TBranch *)fBranches.UncheckedAt(i);; 4632 ; 4633 if (branch->TestBit(kDoNotProcess)); 4634 continue;; 4635 ; 4636#ifndef R__USE_IMT; 4637 nwrite = branch->FillImpl(nullptr);; 4638#else; 4639 nwrite = branch->FillImpl(useIMT ? &imtHelper : nullptr);; 4640#endif; 4641 if (nwrite < 0) {; 4642 if (nerror < 2) {; 4643 Error(""Fill"", ""Failed filling branch:%s.%s, nbytes=%d, entry=%lld\n""; 4644 "" This error is symptomatic of a Tree created as a memory-resident Tree\n""; 4645 "" Instead of doing:\n""; 4646 "" TTree *T = new TTree(...)\n""; 4647 "" TFile *f = new TFile(...)\n""; 4648 "" you should do:\n""; 4649 "" TFile *f = new TFile(...)\n""; 4650 "" TTree *T = new TTree(...)\n\n"",; 4651 GetName(), branch->GetName(), nwrite, fEntries + 1);; 4652 } else {; 4653 Error(""Fill"", ""Failed filling branch:%s.%s, nbytes=%d, entry=%lld"", GetName(), branch->GetName(), nwrite,; 4654 fEntries + 1);; 4655 }; 4656 ++nerror;; 4657 } else {; 4658 nbytes += nwrite;; 4659 }; 4660 }; 4661 ; 4662#ifdef R__USE_IMT; 4663 if (fIMTFlush) {; 4664 imtHelper.Wait();; 4665 fIMTFlush = false;; 4666 const_cast<TTree *>(this)->AddTotBytes(fIMTTotBytes);; 4667 const_cast<TTree *>(this)->AddZipBytes(fIMTZipBytes);; 4668 nby",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:188065,Test,TestBit,188065,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Test'],['TestBit']
Testability,"7 if (useWeights) p2->Sumw2();; 1108 ; 1109 // make projection in a 3D first; 1110 TH3D * h3dW = ProjectionXYZ(""h3temp-W"",""W"");; 1111 TH3D * h3dN = ProjectionXYZ(""h3temp-N"",""B"");; 1112 ; 1113 h3dW->SetDirectory(nullptr); h3dN->SetDirectory(nullptr);; 1114 ; 1115 // Since no axis range is considered when doing the projection TProfile3D->TH3D; 1116 // the resulting histogram will have the same axis as the parent one; 1117 // we need afterwards to set the range in the 3D histogram to considered it later; 1118 // when doing the projection in a Profile2D; 1119 if (fXaxis.TestBit(TAxis::kAxisRange) ) {; 1120 h3dW->GetXaxis()->SetRange(fXaxis.GetFirst(),fXaxis.GetLast());; 1121 h3dN->GetXaxis()->SetRange(fXaxis.GetFirst(),fXaxis.GetLast());; 1122 }; 1123 if (fYaxis.TestBit(TAxis::kAxisRange) ) {; 1124 h3dW->GetYaxis()->SetRange(fYaxis.GetFirst(),fYaxis.GetLast());; 1125 h3dN->GetYaxis()->SetRange(fYaxis.GetFirst(),fYaxis.GetLast());; 1126 }; 1127 if (fZaxis.TestBit(TAxis::kAxisRange) ) {; 1128 h3dW->GetZaxis()->SetRange(fZaxis.GetFirst(),fZaxis.GetLast());; 1129 h3dN->GetZaxis()->SetRange(fZaxis.GetFirst(),fZaxis.GetLast());; 1130 }; 1131 ; 1132 // note that h3dW is always a weighted histogram - so we need to compute error in the projection; 1133 TAxis * projX_hW = h3dW->GetXaxis();; 1134 TAxis * projX_hN = h3dN->GetXaxis();; 1135 if (projX == GetYaxis() ) { projX_hW = h3dW->GetYaxis(); projX_hN = h3dN->GetYaxis(); }; 1136 if (projX == GetZaxis() ) { projX_hW = h3dW->GetZaxis(); projX_hN = h3dN->GetZaxis(); }; 1137 TAxis * projY_hW = h3dW->GetYaxis();; 1138 TAxis * projY_hN = h3dN->GetYaxis();; 1139 if (projY == GetXaxis() ) { projY_hW = h3dW->GetXaxis(); projY_hN = h3dN->GetXaxis(); }; 1140 if (projY == GetZaxis() ) { projY_hW = h3dW->GetZaxis(); projY_hN = h3dN->GetZaxis(); }; 1141 ; 1142 TH2D * h2W = TH3::DoProject2D(*h3dW,""htemp-W"","""",projX_hW, projY_hW, true, originalRange, useUF, useOF);; 1143 TH2D * h2N = TH3::DoProject2D(*h3dN,""htemp-N"","""",projX_hN, projY_hN, useWei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:42260,Test,TestBit,42260,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['Test'],['TestBit']
Testability,"7 in this case store the y errors and not the inverse; 478 */; 479 void BinData::Add( double x, double y, double ex, double eyl, double eyh ); 480 {; 481 assert( kAsymError == fErrorType );; 482 assert( !fData.empty() && fDataPtr );; 483 assert( !fDataErrorHigh.empty() && fDataErrorHighPtr );; 484 assert( !fDataErrorLow.empty() && fDataErrorLowPtr );; 485 assert( fDataError.empty() && !fDataErrorPtr );; 486 assert( !fCoordErrors.empty() && fCoordErrors.size() == 1 );; 487 assert( !fCoordErrorsPtr.empty() && fCoordErrorsPtr.size() == 1 && fCoordErrorsPtr[0] );; 488 assert( &fCoordErrors[0].front() == fCoordErrorsPtr[0] );; 489 ; 490 fData[ fNPoints ] = y;; 491 fCoordErrors[0][ fNPoints ] = ex;; 492 fDataErrorHigh[ fNPoints ] = eyh;; 493 fDataErrorLow[ fNPoints ] = eyl;; 494 ; 495 FitData::Add( x );; 496 fSumContent += y;; 497 if (y != 0 || eyl != 1.0 || eyh != 1.0) fSumError2 += (eyl+eyh)*(eyl+eyh)/4;; 498 ; 499 }; 500 ; 501 /**; 502 add multi-dim coordinate data with only value; 503 */; 504 void BinData::Add( const double* x, double val ); 505 {; 506 assert( kNoError == fErrorType );; 507 ; 508 assert( !fData.empty() && fDataPtr );; 509 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 510 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 511 assert( fDataError.empty() && !fDataErrorPtr );; 512 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 513 ; 514 fData[ fNPoints ] = val;; 515 ; 516 FitData::Add( x );; 517 fSumContent += val;; 518 }; 519 ; 520 /**; 521 add multi-dim coordinate data with only error in value; 522 The class stores internally the inverse of the error in this case; 523 */; 524 void BinData::Add( const double* x, double val, double eval ); 525 {; 526 assert( kValueError == fErrorType );; 527 assert( !fData.empty() && fDataPtr );; 528 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 529 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 530 assert( !fDataError.empty() && fDataErrorPtr );; 531 assert( fCoordErrors.empt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:15354,assert,assert,15354,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,['assert'],['assert']
Testability,"7 virtual bool GetClusterPrefetch() const { return fCacheDoClusterPrefetch; }; 458 TFile *GetCurrentFile() const;; 459 Int_t GetDefaultEntryOffsetLen() const {return fDefaultEntryOffsetLen;}; 460 Long64_t GetDebugMax() const { return fDebugMax; }; 461 Long64_t GetDebugMin() const { return fDebugMin; }; 462 TDirectory *GetDirectory() const { return fDirectory; }; 463 virtual Long64_t GetEntries() const { return fEntries; }; 464 virtual Long64_t GetEntries(const char *selection);; 465 /// Return a number greater or equal to the total number of entries in the; 466 /// dataset.; 467 ///; 468 /// \note If you are interested in the total number of entries in a TChain,; 469 /// this function will give that number once the last file of the chain; 470 /// is opened. In general, using this instead of GetEntries will avoid; 471 /// opening all files in the chain which could be very costly for very; 472 /// large number of files stored at a remote location.; 473 ///; 474 /// The logic depends on whether the dataset is a TTree or a TChain. In the; 475 /// first case, it simply returns the total number of entries in the tree. In; 476 /// the latter case, it depends on which point of the processing of the chain; 477 /// this function is called. During most of the chain processing, this; 478 /// function will return TTree::kMaxEntries. When the chain arrives at the; 479 /// last file, then the function will return the accumulated total number of; 480 /// entries in the whole chain. A notable use case where this function; 481 /// becomes quite useful is when writing the following for loop to traverse; 482 /// the entries in the dataset:; 483 ///; 484 /// \code{.cpp}; 485 /// for(Long64_t ievent = 0; ievent < dataset.GetEntriesFast(); ievent++) {; 486 /// // Do something with the event in the dataset; 487 /// }; 488 /// \endcode; 489 ///; 490 /// In the example above, independently on whether the dataset is a TTree or; 491 /// a TChain, the GetEntriesFast call will provide the correct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:25209,log,logic,25209,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['log'],['logic']
Testability,"7 }; 4258 // We can not check at this point whether after the unload there will; 4259 // still be interpreter information about this class (as v5 was doing),; 4260 // instead this function must only be called if the definition is (about); 4261 // to be unloaded.; 4262 ; 4263 ResetCaches();; 4264 ; 4265 // We got here because the definition Decl is about to be unloaded.; 4266 if (fState != TClass::kHasTClassInit) {; 4267 if (fStreamerInfo->GetEntries() != 0) {; 4268 fState = TClass::kEmulated;; 4269 } else {; 4270 fState = TClass::kForwardDeclared;; 4271 }; 4272 } else {; 4273 // if the ClassInfo was loaded for a class with a TClass Init and it; 4274 // gets unloaded, should we guess it can be reloaded?; 4275 fCanLoadClassInfo = kTRUE;; 4276 }; 4277}; 4278 ; 4279////////////////////////////////////////////////////////////////////////////////; 4280/// To clean out all caches.; 4281 ; 4282void TClass::ResetCaches(); 4283{; 4284 R__ASSERT(!TestBit(kLoading) && ""Resetting the caches does not make sense during loading!"" );; 4285 ; 4286 // Not owning lists, don't call Delete(), but unload; 4287 if (fData.load()); 4288 (*fData).Unload();; 4289 if (fUsingData.load()); 4290 (*fUsingData).Unload();; 4291 if (fEnums.load()); 4292 (*fEnums).Unload();; 4293 if (fMethod.load()); 4294 (*fMethod).Unload();; 4295 ; 4296 delete fAllPubData; fAllPubData = nullptr;; 4297 ; 4298 if (fBase.load()); 4299 (*fBase).Delete();; 4300 delete fBase.load(); fBase = nullptr;; 4301 ; 4302 if (fRealData); 4303 fRealData->Delete();; 4304 delete fRealData; fRealData=nullptr;; 4305}; 4306 ; 4307////////////////////////////////////////////////////////////////////////////////; 4308/// Resets the menu list to it's standard value.; 4309 ; 4310void TClass::ResetMenuList(); 4311{; 4312 if (fClassMenuList); 4313 fClassMenuList->Delete();; 4314 else; 4315 fClassMenuList = new TList();; 4316 fClassMenuList->Add(new TClassMenuItem(TClassMenuItem::kPopupStandardList, this));; 4317}; 4318 ; 4319/////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:162275,Test,TestBit,162275,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,7.4 0; : 680 Minimum Test error found - save the configuration ; : 680 | 42.8206 35.8087 0.0201316 0.00181818 43683.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:88305,Test,Test,88305,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"70 ; 771 if (nbreak++ > 10000) {; 772 Log() << kFATAL << ""<MCEvents>: could not find signal events""; 773 << "" after 10000 trials - do you have signal events in your sample ?""; 774 << Endl;; 775 isSignal = 1;; 776 }; 777 }; 778 ; 779 // sort; 780 if (evt1 > evt2) { Double_t z = evt1; evt1 = evt2; evt2 = z; }; 781 pars[2*ivar] = evt1;; 782 pars[2*ivar+1] = evt2 - evt1;; 783 }; 784 ; 785 // compute estimator; 786 EstimatorFunction( pars );; 787 ; 788 // what's the time please?; 789 ic++;; 790 if ((nsamples<1000) || ic%1000 == 0) timer.DrawProgressBar( ic );; 791 }; 792 ; 793 delete rnd;; 794 }; 795 // --------------------------------------------------------------------------; 796 else Log() << kFATAL << ""Unknown minimisation method: "" << fFitMethod << Endl;; 797 ; 798 if (fBinaryTreeS != 0) { delete fBinaryTreeS; fBinaryTreeS = 0; }; 799 if (fBinaryTreeB != 0) { delete fBinaryTreeB; fBinaryTreeB = 0; }; 800 ; 801 // force cut ranges within limits; 802 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 803 for (Int_t ibin=0; ibin<fNbins; ibin++) {; 804 ; 805 if ((*fFitParams)[ivar] == kForceMin && fCutMin[ivar][ibin] > -fgMaxAbsCutVal) {; 806 fCutMin[ivar][ibin] = -fgMaxAbsCutVal;; 807 }; 808 if ((*fFitParams)[ivar] == kForceMax && fCutMax[ivar][ibin] < fgMaxAbsCutVal) {; 809 fCutMax[ivar][ibin] = fgMaxAbsCutVal;; 810 }; 811 }; 812 }; 813 ; 814 // some output; 815 // the efficiency which is asked for has to be slightly higher than the bin-borders.; 816 // if not, then the wrong bin is taken in some cases.; 817 Double_t epsilon = 0.0001;; 818 for (Double_t eff=0.1; eff<0.95; eff += 0.1) PrintCuts( eff+epsilon );; 819 ; 820 if (!fExitFromTraining) fIPyMaxIter = fIPyCurrentIter;; 821 ExitFromTraining();; 822}; 823 ; 824////////////////////////////////////////////////////////////////////////////////; 825/// nothing to test; 826 ; 827void TMVA::MethodCuts::TestClassification(); 828{; 829}; 830 ; 831////////////////////////////////////////////////////////////////////////////////; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:29797,Log,Log,29797,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability,"708 const Double_t p1 = -2957821389., p2 = 7062834065.0, p3 = -512359803.6;; 1709 const Double_t p4 = 10879881.29, p5 = -86327.92757, p6 = 228.4622733;; 1710 const Double_t p7 = 40076544269., p8 = 745249964.8, p9 = 7189466.438;; 1711 const Double_t p10 = 47447.26470, p11 = 226.1030244, p12 = 0.636619772;; 1712 ; 1713 const Double_t q1 = 0.785398164;; 1714 const Double_t q2 = -0.1098628627e-2, q3 = 0.2734510407e-4;; 1715 const Double_t q4 = -0.2073370639e-5, q5 = 0.2093887211e-6;; 1716 const Double_t q6 = -0.1562499995e-1, q7 = 0.1430488765e-3;; 1717 const Double_t q8 = -0.6911147651e-5, q9 = 0.7621095161e-6;; 1718 const Double_t q10 = -0.934945152e-7, q11 = 0.636619772;; 1719 ; 1720 if (x < 8) {; 1721 y = x*x;; 1722 result1 = p1 + y*(p2 + y*(p3 + y*(p4 + y*(p5 + y*p6))));; 1723 result2 = p7 + y*(p8 + y*(p9 + y*(p10 + y*(p11 + y))));; 1724 result = (result1/result2) + p12*TMath::BesselJ0(x)*log(x);; 1725 } else {; 1726 z = 8/x;; 1727 y = z*z;; 1728 xx = x-q1;; 1729 result1 = 1 + y*(q2 + y*(q3 + y*(q4 + y*q5)));; 1730 result2 = q6 + y*(q7 + y*(q8 + y*(q9 + y*q10)));; 1731 result = sqrt(q11/x)*(sin(xx)*result1+z*cos(xx)*result2);; 1732 }; 1733 return result;; 1734}; 1735 ; 1736////////////////////////////////////////////////////////////////////////////////; 1737/// Returns the Bessel function Y1(x) for positive x.; 1738 ; 1739Double_t TMath::BesselY1(Double_t x); 1740{; 1741 Double_t z,xx,y,result,result1,result2;; 1742 const Double_t p1 = -0.4900604943e13, p2 = 0.1275274390e13;; 1743 const Double_t p3 = -0.5153438139e11, p4 = 0.7349264551e9;; 1744 const Double_t p5 = -0.4237922726e7, p6 = 0.8511937935e4;; 1745 const Double_t p7 = 0.2499580570e14, p8 = 0.4244419664e12;; 1746 const Double_t p9 = 0.3733650367e10, p10 = 0.2245904002e8;; 1747 const Double_t p11 = 0.1020426050e6, p12 = 0.3549632885e3;; 1748 const Double_t p13 = 0.636619772;; 1749 const Double_t q1 = 2.356194491;; 1750 const Double_t q2 = 0.183105e-2, q3 = -0.3516396496e-4;; 1751 const Double_t q4 = 0.245752",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:58151,log,log,58151,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['log'],['log']
Testability,71.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91856,Test,Test,91856,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"710 // The architecture specified at compile time in ArchitectureImpl_t; 1711 // is used. This should be the CPU architecture; 1712 ; 1713 if (!fNet || fNet->GetDepth() == 0) {; 1714 Log() << kFATAL << ""The network has not been trained and fNet is not built"" << Endl;; 1715 }; 1716 if (fNet->GetBatchSize() != 1) {; 1717 Log() << kFATAL << ""FillINputTensor::Network batch size must be equal to 1 when doing single event predicition"" << Endl;; 1718 }; 1719 ; 1720 // get current event; 1721 const std::vector<Float_t> &inputValues = GetEvent()->GetValues();; 1722 size_t nVariables = GetEvent()->GetNVariables();; 1723 ; 1724 // for Columnlayout tensor memory layout is HWC while for rowwise is CHW; 1725 if (fXInput.GetLayout() == TMVA::Experimental::MemoryLayout::ColumnMajor) {; 1726 R__ASSERT(fXInput.GetShape().size() < 4);; 1727 size_t nc, nhw = 0;; 1728 if (fXInput.GetShape().size() == 2) {; 1729 nc = fXInput.GetShape()[0];; 1730 if (nc != 1) {; 1731 ArchitectureImpl_t::PrintTensor(fXInput);; 1732 Log() << kFATAL << ""First tensor dimension should be equal to batch size, i.e. = 1"" << Endl;; 1733 }; 1734 nhw = fXInput.GetShape()[1];; 1735 } else {; 1736 nc = fXInput.GetCSize();; 1737 nhw = fXInput.GetWSize();; 1738 }; 1739 if (nVariables != nc * nhw) {; 1740 Log() << kFATAL << ""Input Event variable dimensions are not compatible with the built network architecture""; 1741 << "" n-event variables "" << nVariables << "" expected input tensor "" << nc << "" x "" << nhw << Endl;; 1742 }; 1743 for (size_t j = 0; j < nc; j++) {; 1744 for (size_t k = 0; k < nhw; k++) {; 1745 // note that in TMVA events images are stored as C H W while in the buffer we stored as H W C; 1746 fXInputBuffer[k * nc + j] = inputValues[j * nhw + k]; // for column layout !!!; 1747 }; 1748 }; 1749 } else {; 1750 // row-wise layout; 1751 assert(fXInput.GetShape().size() >= 4);; 1752 size_t nc = fXInput.GetCSize();; 1753 size_t nh = fXInput.GetHSize();; 1754 size_t nw = fXInput.GetWSize();; 1755 size_t n = nc * nh *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:68710,Log,Log,68710,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Log'],['Log']
Testability,"713 fStreamer = TVirtualStreamerInfo::Factory()->GenEmulatedClassStreamer( GetName(), silent );; 1714 }; 1715 }; 1716 } else if (TClassEdit::IsStdPair(GetName())) {; 1717 // std::pairs have implicit conversions; 1718 GetSchemaRules(kTRUE);; 1719 }; 1720 ; 1721 ResetBit(kLoading);; 1722}; 1723 ; 1724////////////////////////////////////////////////////////////////////////////////; 1725/// TClass dtor. Deletes all list that might have been created.; 1726 ; 1727TClass::~TClass(); 1728{; 1729 R__LOCKGUARD(gInterpreterMutex);; 1730 ; 1731 // Remove from the typedef hashtables.; 1732 if (fgClassTypedefHash && TestBit (kHasNameMapNode)) {; 1733 TString resolvedThis = TClassEdit::ResolveTypedef (GetName(), kTRUE);; 1734 TIter next (fgClassTypedefHash->GetListForObject (resolvedThis));; 1735 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1736 if (resolvedThis == htmp->String() && htmp->fOrigName == GetName()) {; 1737 fgClassTypedefHash->Remove (htmp);; 1738 delete htmp;; 1739 break;; 1740 }; 1741 }; 1742 }; 1743 ; 1744 // Not owning lists, don't call Delete(); 1745 // But this still need to be done first because the TList destructor; 1746 // does access the object contained (via GetObject()->TestBit(kCanDelete)); 1747 delete fStreamer; fStreamer =nullptr;; 1748 delete fAllPubData; fAllPubData =nullptr;; 1749 delete fAllPubMethod; fAllPubMethod=nullptr;; 1750 ; 1751 delete fPersistentRef.load();; 1752 ; 1753 if (fBase.load()); 1754 (*fBase).Delete();; 1755 delete fBase.load(); fBase = nullptr;; 1756 ; 1757 if (fData.load()); 1758 (*fData).Delete();; 1759 delete fData.load(); fData = nullptr;; 1760 ; 1761 if (fUsingData.load()); 1762 (*fUsingData).Delete();; 1763 delete fUsingData.load(); fUsingData = nullptr;; 1764 ; 1765 if (fEnums.load()); 1766 (*fEnums).Delete();; 1767 delete fEnums.load(); fEnums = nullptr;; 1768 ; 1769 if (fFuncTemplate); 1770 fFuncTemplate->Delete();; 1771 delete fFuncTemplate; fFuncTemplate = nullptr;; 1772 ; 1773 if (fMethod.load",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:66904,Test,TestBit,66904,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['Test'],['TestBit']
Testability,"719{; 2720 static Double_t a, b, ya, ytest, y1, x1, h;; 2721 static Int_t j1, it, j3, j2;; 2722 Double_t yb, x2;; 2723 yb = 0;; 2724 ; 2725 // Calculate Y(X) at X=AZ.; 2726 if (k <= 0) {; 2727 a = AZ;; 2728 b = BZ;; 2729 X = a;; 2730 j1 = 1;; 2731 it = 1;; 2732 k = j1;; 2733 return;; 2734 }; 2735 ; 2736 // Test whether Y(X) is sufficiently small.; 2737 ; 2738 if (TMath::Abs(Y) <= E2) {; 2739 k = 2;; 2740 return;; 2741 }; 2742 ; 2743 // Calculate Y(X) at X=BZ.; 2744 ; 2745 if (j1 == 1) {; 2746 ya = Y;; 2747 X = b;; 2748 j1 = 2;; 2749 return;; 2750 }; 2751 // Test whether the signs of Y(AZ) and Y(BZ) are different.; 2752 // if not, begin the binary subdivision.; 2753 ; 2754 if (j1 != 2) goto L100;; 2755 if (ya * Y < 0) goto L120;; 2756 x1 = a;; 2757 y1 = ya;; 2758 j1 = 3;; 2759 h = b - a;; 2760 j2 = 1;; 2761 x2 = a + 0.5 * h;; 2762 j3 = 1;; 2763 it++; //*-*- Check whether (maxiterations) function values have been calculated.; 2764 if (it >= maxiterations) k = j1;; 2765 else X = x2;; 2766 return;; 2767 ; 2768 // Test whether a bracket has been found .; 2769 // If not,continue the search; 2770 ; 2771L100:; 2772 if (j1 > 3) goto L170;; 2773 if (ya*Y >= 0) {; 2774 if (j3 >= j2) {; 2775 h = 0.5 * h;; 2776 j2 = 2 * j2;; 2777 a = x1;; 2778 ya = y1;; 2779 x2 = a + 0.5 * h;; 2780 j3 = 1;; 2781 } else {; 2782 a = X;; 2783 ya = Y;; 2784 x2 = X + h;; 2785 j3++;; 2786 }; 2787 it++;; 2788 if (it >= maxiterations) k = j1;; 2789 else X = x2;; 2790 return;; 2791 }; 2792 ; 2793 // The first bracket has been found.calculate the next X by the; 2794 // secant method based on the bracket.; 2795 ; 2796L120:; 2797 b = X;; 2798 yb = Y;; 2799 j1 = 4;; 2800L130:; 2801 if (TMath::Abs(ya) > TMath::Abs(yb)) {; 2802 x1 = a;; 2803 y1 = ya;; 2804 X = b;; 2805 Y = yb;; 2806 } else {; 2807 x1 = b;; 2808 y1 = yb;; 2809 X = a;; 2810 Y = ya;; 2811 }; 2812 ; 2813 // Use the secant method based on the function values y1 and Y.; 2814 // check that x2 is inside the interval (a,b).; 2815 ; 2816L150:; 2817 x2 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:98143,Test,Test,98143,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['Test'],['Test']
Testability,"72 ; 73Then the equations for parameter increments are; 74\f[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; 75+\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; 76\qquad i=1\ldots m\tag{6}; 77\f]; 78 ; 79Remarkable feature of algorithm is the technique for step; 80restriction. For an initial value of parameter \f${\vec\theta}^0\f$ a; 81parallelepiped \f$P_0\f$ is built with the center at \f${\vec\theta}^0\f$ and; 82axes parallel to coordinate axes \f$\theta_i\f$. The lengths of; 83parallelepiped sides along i-th axis is \f$2b_i\f$, where \f$b_i\f$ is such a; 84value that the functions \f$f_j(\vec\theta)\f$ are quasi-linear all over; 85the parallelepiped.; 86 ; 87FUMILI takes into account simple linear inequalities in the form:; 88\f[; 89\theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; 90\f]; 91 ; 92They form parallelepiped \f$P\f$ (\f$P_0\f$ may be deformed by \f$P\f$).; 93Very similar step formulae are used in FUMILI for negative logarithm; 94of the likelihood function with the same idea - linearization of; 95function argument.; 96 ; 97*/; 98 ; 99 ; 100#include ""TFumili.h""; 101 ; 102#include <iostream>; 103#include ""TGraphAsymmErrors.h""; 104#include ""TF1.h""; 105#include ""TF2.h""; 106#include ""TF3.h""; 107#include ""TH1.h""; 108#include ""TMath.h""; 109#include ""TROOT.h""; 110#include ""TList.h""; 111#include ""TVirtualFitter.h""; 112 ; 113 ; 114extern void H1FitChisquareFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 115extern void H1FitLikelihoodFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 116extern void GraphFitChisquareFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 117 ; 118 ; 119ClassImp(TFumili);; 120 ; 121TFumili *gFumili=nullptr;; 122// Machine dependent values fiXME!!; 123// But don't set min=max=0 if param is unlimited; 124static const Double_t gMAXDOUBLE=1e300;; 125static const Double_t gMINDOUBLE=-1e300;; 126 ; 127///////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:3738,log,logarithm,3738,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['log'],['logarithm']
Testability,"721///; 722/// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; 723/// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; 724/// normalization set.; 725double RooAbsPdf::extendedTerm(double sumEntries, RooArgSet const* nset, double sumEntriesW2, bool doOffset) const; 726{; 727 return extendedTerm(sumEntries, expectedEvents(nset), sumEntriesW2, doOffset);; 728}; 729 ; 730double RooAbsPdf::extendedTerm(double sumEntries, double expected, double sumEntriesW2, bool doOffset) const; 731{; 732 // check if this PDF supports extended maximum likelihood fits; 733 if(!canBeExtended()) {; 734 coutE(InputArguments) << GetName() << "": this PDF does not support extended maximum likelihood""; 735 << std::endl;; 736 return 0.0;; 737 }; 738 ; 739 if(expected < 0.0) {; 740 coutE(InputArguments) << GetName() << "": calculated negative expected events: "" << expected; 741 << std::endl;; 742 logEvalError(""extendedTerm #expected events is <0 return a NaN"");; 743 return TMath::QuietNaN();; 744 }; 745 ; 746 ; 747 // Explicitly handle case Nobs=Nexp=0; 748 if (std::abs(expected)<1e-10 && std::abs(sumEntries)<1e-10) {; 749 return 0.0;; 750 }; 751 ; 752 // Check for errors in Nexpected; 753 if (TMath::IsNaN(expected)) {; 754 logEvalError(""extendedTerm #expected events is a NaN"") ;; 755 return TMath::QuietNaN() ;; 756 }; 757 ; 758 double extra = doOffset; 759 ? (expected - sumEntries) - sumEntries * (std::log(expected) - std::log(sumEntries)); 760 : expected - sumEntries * std::log(expected);; 761 ; 762 if(sumEntriesW2 != 0.0) {; 763 extra *= sumEntriesW2 / sumEntries;; 764 }; 765 ; 766 return extra;; 767}; 768 ; 769////////////////////////////////////////////////////////////////////////////////; 770/// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); 771/// of this PDF for the given number of observed events.; 772///; 773/// This function is a wrapper around; 774/// Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:29625,log,logEvalError,29625,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['logEvalError']
Testability,"7215 Hoption.Error=0;; 7216 }; 7217 }; 7218 ; 7219 ; 7220 // Take into account maximum , minimum; 7221 ; 7222 if (Hoption.Logy && ymin <= 0) {; 7223 if (ymax >= 1) ymin = TMath::Max(.005,ymax*1e-10);; 7224 else ymin = 0.001*ymax;; 7225 }; 7226 ; 7227 Double_t xm = ymin;; 7228 if (maximum) ymax = fH->GetMaximumStored();; 7229 if (minimum) xm = fH->GetMinimumStored();; 7230 if (Hoption.Logy && xm < 0) {; 7231 Error(where, ""log scale requested with a negative argument (%f)"", xm);; 7232 return 0;; 7233 } else if (Hoption.Logy && xm>=0 && ymax==0) { // empty histogram in log scale; 7234 ymin = 0.01;; 7235 ymax = 10.;; 7236 } else {; 7237 ymin = xm;; 7238 }; 7239 ; 7240 if (ymin >= ymax) {; 7241 if (Hoption.Logy) {; 7242 if (ymax > 0) ymin = 0.001*ymax;; 7243 else {; 7244 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", ymax);; 7245 return 0;; 7246 }; 7247 }; 7248 else {; 7249 if (ymin > 0) {; 7250 ymin = 0;; 7251 ymax *= 2;; 7252 } else if (ymin < 0) {; 7253 ymax = 0;; 7254 ymin *= 2;; 7255 } else {; 7256 ymin = 0;; 7257 ymax = 1;; 7258 }; 7259 }; 7260 }; 7261 ; 7262 // In some cases, mainly because of precision issues, ymin and ymax could almost equal.; 7263 if (TMath::AreEqualRel(ymin,ymax,1E-15)) {; 7264 ymin = ymin*(1-1E-14);; 7265 ymax = ymax*(1+1E-14);; 7266 }; 7267 ; 7268 // take into account normalization factor; 7269 Hparam.allchan = allchan;; 7270 Double_t factor = allchan;; 7271 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 7272 if (allchan) factor /= allchan;; 7273 if (factor == 0) factor = 1;; 7274 Hparam.factor = factor;; 7275 ymax = factor*ymax;; 7276 ymin = factor*ymin;; 7277 //just in case the norm factor is negative; 7278 // this may happen with a positive norm factor and a negative integral !; 7279 if (ymax < ymin) {; 7280 Double_t temp = ymax;; 7281 ymax = ymin;; 7282 ymin = temp;; 7283 }; 7284 ; 7285 // For log scales, histogram coordinates are LOG10(ymin) and; 7286 // LOG10(ymax). Final adjus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:262300,log,log,262300,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability,724.2 0; : 755 | 16.6744 20.3793 0.0200328 0.00175569 43770.5 1; : 756 Minimum Test error found - save the configuration ; : 756 | 16.5214 19.4549 0.0200975 0.00181399 43755.3 0; : 757 | 16.5493 20.0416 0.0200274 0.00175373 43778.7 1; : 758 | 16.7051 19.8344 0.0200284 0.00174826 43763.4 2; : 759 | 16.2032 19.717 0.0200656 0.00175048 43679.7 3; : 760 | 16.1221 19.4686 0.0200628 0.00175006 43685.5 4; : 761 Minimum Test error found - save the configuration ; : 761 | 15.7828 18.8348 0.0201031 0.00181849 43752.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Minimum Test error found - save the configuration ; : 764 | 15.3977 18.5678 0.0201039 0.0018081 43725.8 0; : 765 | 15.238 19.0685 0.0200523 0.00175459 43721.4 1; : 766 Minimum Test error found - save the configuration ; : 766 | 14.9634 18.5633 0.0200937 0.00181207 43759.7 0; : 767 Minimum Test error found - save the configuration ; : 767 | 14.6611 18.2211 0.0200896 0.00180918 43762.7 0; : 768 Minimum Test error found - save the configuration ; : 768 | 14.4892 18.1817 0.0200772 0.00181141 43797.6 0; : 769 Minimum Test error found - save the configuration ; : 769 | 14.3366 17.8635 0.0200909 0.00180773 43756.2 0; : 770 Minimum Test error found - save the configuration ; : 770 | 14.5733 17.5465 0.0200968 0.00180191 43728 0; : 771 | 13.9827 17.8429 0.0200367 0.0017469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.53,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:95471,Test,Test,95471,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test e,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:91574,Test,Test,91574,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"727/// more details.; 2728///; 2729/// Note: If the histograms are filled with weights, only bayesian methods and the; 2730/// normal approximation are supported.; 2731 ; 2732Double_t TEfficiency::GetEfficiencyErrorLow(Int_t bin) const; 2733{; 2734 Double_t total = fTotalHistogram->GetBinContent(bin);; 2735 Double_t passed = fPassedHistogram->GetBinContent(bin);; 2736 ; 2737 Double_t eff = GetEfficiency(bin);; 2738 ; 2739 // check whether weights have been used; 2740 if(TestBit(kUseWeights)); 2741 {; 2742 Double_t tw = fTotalHistogram->GetBinContent(bin);; 2743 Double_t tw2 = fTotalHistogram->GetSumw2()->At(bin);; 2744 Double_t pw = fPassedHistogram->GetBinContent(bin);; 2745 Double_t pw2 = fPassedHistogram->GetSumw2()->At(bin);; 2746 ; 2747 if(TestBit(kIsBayesian)); 2748 {; 2749 Double_t alpha = TestBit(kUseBinPrior) ? GetBetaAlpha(bin) : GetBetaAlpha();; 2750 Double_t beta = TestBit(kUseBinPrior) ? GetBetaBeta(bin) : GetBetaBeta();; 2751 ; 2752 if (tw2 <= 0) return 0;; 2753 ; 2754 // tw/tw2 renormalize the weights; 2755 Double_t norm = tw/tw2;; 2756 Double_t aa = pw * norm + alpha;; 2757 Double_t bb = (tw - pw) * norm + beta;; 2758 Double_t low = 0;; 2759 Double_t upper = 1;; 2760 if(TestBit(kShortestInterval)) {; 2761 TEfficiency::BetaShortestInterval(fConfLevel,aa,bb,low,upper);; 2762 }; 2763 else {; 2764 low = TEfficiency::BetaCentralInterval(fConfLevel,aa,bb,false);; 2765 }; 2766 ; 2767 return eff - low;; 2768 }; 2769 else; 2770 {; 2771 if(fStatisticOption != kFNormal); 2772 {; 2773 Warning(""GetEfficiencyErrorLow"",""frequentist confidence intervals for weights are only supported by the normal approximation"");; 2774 Info(""GetEfficiencyErrorLow"",""setting statistic option to kFNormal"");; 2775 const_cast<TEfficiency*>(this)->SetStatisticOption(kFNormal);; 2776 }; 2777 ; 2778 Double_t variance = ( pw2 * (1. - 2 * eff) + tw2 * eff *eff ) / ( tw * tw) ;; 2779 Double_t sigma = sqrt(variance);; 2780 ; 2781 Double_t prob = 0.5 * (1.- fConfLevel);; 2782 Double_t delta = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:110143,Test,TestBit,110143,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,5,['Test'],['TestBit']
Testability,729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 24.7604 0.0201019 0.00180745 43729.1 0; : 726 Minimum Test error found - save the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:92193,Test,Test,92193,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"72PyObject *PyMethodBase::fEval = NULL;; 73PyObject *PyMethodBase::fOpen = NULL;; 74 ; 75PyObject *PyMethodBase::fModulePickle = NULL;; 76PyObject *PyMethodBase::fPickleDumps = NULL;; 77PyObject *PyMethodBase::fPickleLoads = NULL;; 78 ; 79PyObject *PyMethodBase::fMain = NULL;; 80PyObject *PyMethodBase::fGlobalNS = NULL;; 81 ; 82///////////////////////////////////////////////////////////////////////////////; 83 ; 84PyMethodBase::PyMethodBase(const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi,; 85 const TString &theOption); 86 : MethodBase(jobName, methodType, methodTitle, dsi, theOption),; 87 fClassifier(NULL); 88{; 89 if (!PyIsInitialized()) {; 90 PyInitialize();; 91 }; 92 ; 93 // Set up private local namespace for each method instance; 94 fLocalNS = PyDict_New();; 95 if (!fLocalNS) {; 96 Log() << kFATAL << ""Can't init local namespace"" << Endl;; 97 }; 98}; 99 ; 100///////////////////////////////////////////////////////////////////////////////; 101 ; 102PyMethodBase::PyMethodBase(Types::EMVA methodType,; 103 DataSetInfo &dsi,; 104 const TString &weightFile): MethodBase(methodType, dsi, weightFile),; 105 fClassifier(NULL); 106{; 107 if (!PyIsInitialized()) {; 108 PyInitialize();; 109 }; 110 ; 111 // Set up private local namespace for each method instance; 112 fLocalNS = PyDict_New();; 113 if (!fLocalNS) {; 114 Log() << kFATAL << ""Can't init local namespace"" << Endl;; 115 }; 116}; 117 ; 118///////////////////////////////////////////////////////////////////////////////; 119 ; 120PyMethodBase::~PyMethodBase(); 121{; 122 // should we delete here fLocalNS ?; 123 //PyFinalize();; 124 if (fLocalNS) Py_DECREF(fLocalNS);; 125}; 126 ; 127///////////////////////////////////////////////////////////////////////////////; 128/// Evaluate Python code; 129///; 130/// \param[in] code Python code as string; 131/// \return Python object from evaluation of code line; 132///; 133/// Take a Python code as input and evaluate it in the local namespace.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PyMethodBase_8cxx_source.html:3925,Log,Log,3925,doc/master/PyMethodBase_8cxx_source.html,https://root.cern,https://root.cern/doc/master/PyMethodBase_8cxx_source.html,1,['Log'],['Log']
Testability,"72{; 973 if (&other == this); 974 return kTRUE;; 975 const Double_t *rot = GetRotationMatrix();; 976 const Double_t *orot = other.GetRotationMatrix();; 977 for (auto i = 0; i < 9; i++); 978 if (TMath::Abs(rot[i] - orot[i]) > 1.E-10); 979 return kFALSE;; 980 return kTRUE;; 981}; 982 ; 983////////////////////////////////////////////////////////////////////////////////; 984/// Return a temporary inverse of this.; 985 ; 986TGeoHMatrix TGeoRotation::Inverse() const; 987{; 988 TGeoHMatrix h;; 989 h = *this;; 990 h.ResetBit(kGeoRegistered);; 991 Double_t newrot[9];; 992 newrot[0] = fRotationMatrix[0];; 993 newrot[1] = fRotationMatrix[3];; 994 newrot[2] = fRotationMatrix[6];; 995 newrot[3] = fRotationMatrix[1];; 996 newrot[4] = fRotationMatrix[4];; 997 newrot[5] = fRotationMatrix[7];; 998 newrot[6] = fRotationMatrix[2];; 999 newrot[7] = fRotationMatrix[5];; 1000 newrot[8] = fRotationMatrix[8];; 1001 h.SetRotation(newrot);; 1002 return h;; 1003}; 1004 ; 1005////////////////////////////////////////////////////////////////////////////////; 1006/// Perform orthogonality test for rotation.; 1007 ; 1008Bool_t TGeoRotation::IsValid() const; 1009{; 1010 const Double_t *r = fRotationMatrix;; 1011 Double_t cij;; 1012 for (Int_t i = 0; i < 2; i++) {; 1013 for (Int_t j = i + 1; j < 3; j++) {; 1014 // check columns; 1015 cij = TMath::Abs(r[i] * r[j] + r[i + 3] * r[j + 3] + r[i + 6] * r[j + 6]);; 1016 if (cij > 1E-4); 1017 return kFALSE;; 1018 // check rows; 1019 cij = TMath::Abs(r[3 * i] * r[3 * j] + r[3 * i + 1] * r[3 * j + 1] + r[3 * i + 2] * r[3 * j + 2]);; 1020 if (cij > 1E-4); 1021 return kFALSE;; 1022 }; 1023 }; 1024 return kTRUE;; 1025}; 1026 ; 1027////////////////////////////////////////////////////////////////////////////////; 1028/// reset data members; 1029 ; 1030void TGeoRotation::Clear(Option_t *); 1031{; 1032 memcpy(fRotationMatrix, kIdentityMatrix, kN9);; 1033 ResetBit(kGeoRotation);; 1034}; 1035 ; 1036//////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:34438,test,test,34438,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['test'],['test']
Testability,"73 BinData::BinData (unsigned int n, const double * dataX, const double * val,; 74 const double * ex , const double * eval ) :; 75 FitData( n, dataX ),; 76 fDataPtr( nullptr ),; 77 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 78 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 79 {; 80 assert( val );; 81 fDataPtr = val;; 82 ; 83 if ( nullptr != eval ); 84 {; 85 fDataErrorPtr = eval;; 86 ; 87 fErrorType = kValueError;; 88 ; 89 if ( nullptr != ex ); 90 {; 91 fCoordErrorsPtr.resize( 1 );; 92 ; 93 fCoordErrorsPtr[0] = ex;; 94 ; 95 fErrorType = kCoordError;; 96 }; 97 }; 98 else; 99 {; 100 fErrorType = kNoError;; 101 }; 102 ; 103 fpTmpCoordErrorVector = new double [ fDim ];; 104 ; 105 ComputeSums();; 106 }; 107 ; 108 /**; 109 constructor from external data for 2D with errors on coordinate and value; 110 */; 111 BinData::BinData(unsigned int n, const double * dataX, const double * dataY,; 112 const double * val, const double * ex , const double * ey,; 113 const double * eval ) :; 114 FitData( n, dataX, dataY ),; 115 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 116 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 117 {; 118 assert( val );; 119 fDataPtr = val;; 120 ; 121 if ( nullptr != eval ); 122 {; 123 fDataErrorPtr = eval;; 124 ; 125 fErrorType = kValueError;; 126 ; 127 if ( nullptr != ex || nullptr != ey ); 128 {; 129 fCoordErrorsPtr.resize( 2 );; 130 ; 131 fCoordErrorsPtr[0] = ex;; 132 fCoordErrorsPtr[1] = ey;; 133 ; 134 fErrorType = kCoordError;; 135 }; 136 }; 137 else; 138 {; 139 fErrorType = kNoError;; 140 }; 141 ; 142 fpTmpCoordErrorVector = new double [ fDim ];; 143 ComputeSums();; 144 }; 145 ; 146 /**; 147 constructor from external data for 3D with errors on coordinate and value; 148 */; 149 BinData::BinData(unsigned int n, const double * dataX, const double * dataY,; 150 const double * dataZ, const double * val, const double * ex ,; 151 const double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:3476,assert,assert,3476,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"7329}; 7330 ; 7331////////////////////////////////////////////////////////////////////////////////; 7332/// Compute histogram parameters used by the drawing routines for a rotated pad.; 7333 ; 7334Int_t THistPainter::PaintInitH(); 7335{; 7336 ; 7337 static const char *where = ""PaintInitH"";; 7338 Double_t yMARGIN = gStyle->GetHistTopMargin();; 7339 Int_t maximum = 0;; 7340 Int_t minimum = 0;; 7341 if (fH->GetMaximumStored() != -1111) maximum = 1;; 7342 if (fH->GetMinimumStored() != -1111) minimum = 1;; 7343 ; 7344 // Compute X axis parameters; 7345 ; 7346 Int_t last = fXaxis->GetLast();; 7347 Int_t first = fXaxis->GetFirst();; 7348 Hparam.xlowedge = fXaxis->GetBinLowEdge(first);; 7349 Hparam.xbinsize = fXaxis->GetBinWidth(first);; 7350 Hparam.xlast = last;; 7351 Hparam.xfirst = first;; 7352 Hparam.ymin = Hparam.xlowedge;; 7353 Hparam.ymax = fXaxis->GetBinLowEdge(last)+fXaxis->GetBinWidth(last);; 7354 ; 7355 // if log scale in Y, replace ymin,max by the log; 7356 if (Hoption.Logy) {; 7357 if (Hparam.xlowedge <=0 ) {; 7358 Hparam.xlowedge = 0.1*Hparam.xbinsize;; 7359 Hparam.ymin = Hparam.xlowedge;; 7360 }; 7361 if (Hparam.ymin <=0 || Hparam.ymax <=0) {; 7362 Error(where, ""cannot set Y axis to log scale"");; 7363 return 0;; 7364 }; 7365 Hparam.xfirst= fXaxis->FindFixBin(Hparam.ymin);; 7366 Hparam.xlast = fXaxis->FindFixBin(Hparam.ymax);; 7367 Hparam.ymin = TMath::Log10(Hparam.ymin);; 7368 Hparam.ymax = TMath::Log10(Hparam.ymax);; 7369 if (Hparam.xlast > last) Hparam.xlast = last;; 7370 }; 7371 ; 7372 // Compute Y axis parameters; 7373 Double_t bigp = TMath::Power(10,32);; 7374 Double_t xmax = -bigp;; 7375 Double_t xmin = bigp;; 7376 Double_t c1, e1;; 7377 Double_t xv[1];; 7378 Double_t fval;; 7379 Int_t i;; 7380 TObject *f;; 7381 TF1 *f1;; 7382 Double_t allchan = 0;; 7383 TIter next(fFunctions);; 7384 for (i=first; i<=last;i++) {; 7385 c1 = fH->GetBinContent(i);; 7386 xmax = TMath::Max(xmax,c1);; 7387 xmin = TMath::Min(xmin,c1);; 7388 if (Hoption.Error) {; 7389 e1 = fH->G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:265803,Log,Logy,265803,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability,"73{; 174 double binWidth = (high - low) / numBins;; 175 return val >= high ? numBins - 1 : std::abs((val - low) / binWidth);; 176}; 177 ; 178inline double interpolate1d(double low, double high, double val, unsigned int numBins, double const* vals); 179{; 180 double binWidth = (high - low) / numBins;; 181 int idx = val >= high ? numBins - 1 : std::abs((val - low) / binWidth);; 182 ; 183 // interpolation; 184 double central = low + (idx + 0.5) * binWidth;; 185 if (val > low + 0.5 * binWidth && val < high - 0.5 * binWidth) {; 186 double slope;; 187 if (val < central) {; 188 slope = vals[idx] - vals[idx - 1];; 189 } else {; 190 slope = vals[idx + 1] - vals[idx];; 191 }; 192 return vals[idx] + slope * (val - central) / binWidth;; 193 }; 194 ; 195 return vals[idx];; 196}; 197 ; 198inline double poisson(double x, double par); 199{; 200 if (par < 0); 201 return TMath::QuietNaN();; 202 ; 203 if (x < 0) {; 204 return 0;; 205 } else if (x == 0.0) {; 206 return std::exp(-par);; 207 } else {; 208 double out = x * std::log(par) - TMath::LnGamma(x + 1.) - par;; 209 return std::exp(out);; 210 }; 211}; 212 ; 213inline double flexibleInterpSingle(unsigned int code, double low, double high, double boundary, double nominal,; 214 double paramVal, double res); 215{; 216 if (code == 0) {; 217 // piece-wise linear; 218 if (paramVal > 0) {; 219 return paramVal * (high - nominal);; 220 } else {; 221 return paramVal * (nominal - low);; 222 }; 223 } else if (code == 1) {; 224 // piece-wise log; 225 if (paramVal >= 0) {; 226 return res * (std::pow(high / nominal, +paramVal) - 1);; 227 } else {; 228 return res * (std::pow(low / nominal, -paramVal) - 1);; 229 }; 230 } else if (code == 2) {; 231 // parabolic with linear; 232 double a = 0.5 * (high + low) - nominal;; 233 double b = 0.5 * (high - low);; 234 double c = 0;; 235 if (paramVal > 1) {; 236 return (2 * a + b) * (paramVal - 1) + high - nominal;; 237 } else if (paramVal < -1) {; 238 return -1 * (2 * a - b) * (paramVal + 1) + low - nominal;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:6177,log,log,6177,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['log'],['log']
Testability,"74 {; 375 u = std::exp(-v-1);; 376 lan = (std::exp(-u)/std::sqrt(u))*(p1[0]+(p1[1]+(p1[2]+(p1[3]+p1[4]*v)*v)*v)*v)/; 377 (q1[0]+(q1[1]+(q1[2]+(q1[3]+q1[4]*v)*v)*v)*v);; 378 }; 379 else if (v < 1); 380 lan = (p2[0]+(p2[1]+(p2[2]+p2[3]*v)*v)*v)/(q2[0]+(q2[1]+(q2[2]+q2[3]*v)*v)*v);; 381 ; 382 else if (v < 4); 383 lan = (p3[0]+(p3[1]+(p3[2]+p3[3]*v)*v)*v)/(q3[0]+(q3[1]+(q3[2]+q3[3]*v)*v)*v);; 384 ; 385 else if (v < 12); 386 {; 387 u = 1./v;; 388 lan = (p4[0]+(p4[1]+(p4[2]+p4[3]*u)*u)*u)/(q4[0]+(q4[1]+(q4[2]+q4[3]*u)*u)*u);; 389 }; 390 else if (v < 50); 391 {; 392 u = 1./v;; 393 lan = (p5[0]+(p5[1]+(p5[2]+p5[3]*u)*u)*u)/(q5[0]+(q5[1]+(q5[2]+q5[3]*u)*u)*u);; 394 }; 395 else if (v < 300); 396 {; 397 u = 1./v;; 398 lan = (p6[0]+(p6[1]+(p6[2]+p6[3]*u)*u)*u)/(q6[0]+(q6[1]+(q6[2]+q6[3]*u)*u)*u);; 399 }; 400 else; 401 {; 402 u = 1./(v-v*std::log(v)/(v+1));; 403 lan = 1-(a2[1]+(a2[2]+a2[3]*u)*u)*u;; 404 }; 405 return lan;; 406 }; 407 ; 408 ; 409 double landau_xm1(double x, double xi, double x0); 410 {; 411 // implementation of first momentum of Landau distribution; 412 // translated from Cernlib (XM1LAN function) by Benno List; 413 ; 414 static double p1[5] = {-0.8949374280E+0, 0.4631783434E+0,-0.4053332915E-1,; 415 0.1580075560E-1,-0.3423874194E-2};; 416 static double q1[5] = { 1.0 , 0.1002930749E+0, 0.3575271633E-1,; 417 -0.1915882099E-2, 0.4811072364E-4};; 418 static double p2[5] = {-0.8933384046E+0, 0.1161296496E+0, 0.1200082940E+0,; 419 0.2185699725E-1, 0.2128892058E-2};; 420 static double q2[5] = { 1.0 , 0.4935531886E+0, 0.1066347067E+0,; 421 0.1250161833E-1, 0.5494243254E-3};; 422 static double p3[5] = {-0.8933322067E+0, 0.2339544896E+0, 0.8257653222E-1,; 423 0.1411226998E-1, 0.2892240953E-3};; 424 static double q3[5] = { 1.0 , 0.3616538408E+0, 0.6628026743E-1,; 425 0.4839298984E-2, 0.5248310361E-4};; 426 static double p4[4] = { 0.9358419425E+0, 0.6716831438E+2,-0.6765069077E+3,; 427 0.9026661865E+3};; 428 static double q4[4] = { 1.0 , 0.7752562854E+2,-0.5637811998E+3,; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:13111,log,log,13111,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,1,['log'],['log']
Testability,"746 for (Int_t itoy=0; itoy<nsamples; itoy++) {; 747 fIPyCurrentIter = ic;; 748 if (fExitFromTraining) break;; 749 ; 750 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 751 ; 752 // generate minimum and delta cuts for this variable; 753 ; 754 // retrieve signal events; 755 Bool_t isSignal = kFALSE;; 756 Int_t ievt1, ievt2;; 757 Double_t evt1 = 0., evt2 = 0.;; 758 Int_t nbreak = 0;; 759 while (!isSignal) {; 760 ievt1 = Int_t(rnd->Uniform(0.,1.)*nevents);; 761 ievt2 = Int_t(rnd->Uniform(0.,1.)*nevents);; 762 ; 763 const Event *ev1 = GetEvent(ievt1);; 764 isSignal = DataInfo().IsSignal(ev1);; 765 evt1 = ev1->GetValue( ivar );; 766 ; 767 const Event *ev2 = GetEvent(ievt2);; 768 isSignal &= DataInfo().IsSignal(ev2);; 769 evt2 = ev2->GetValue( ivar );; 770 ; 771 if (nbreak++ > 10000) {; 772 Log() << kFATAL << ""<MCEvents>: could not find signal events""; 773 << "" after 10000 trials - do you have signal events in your sample ?""; 774 << Endl;; 775 isSignal = 1;; 776 }; 777 }; 778 ; 779 // sort; 780 if (evt1 > evt2) { Double_t z = evt1; evt1 = evt2; evt2 = z; }; 781 pars[2*ivar] = evt1;; 782 pars[2*ivar+1] = evt2 - evt1;; 783 }; 784 ; 785 // compute estimator; 786 EstimatorFunction( pars );; 787 ; 788 // what's the time please?; 789 ic++;; 790 if ((nsamples<1000) || ic%1000 == 0) timer.DrawProgressBar( ic );; 791 }; 792 ; 793 delete rnd;; 794 }; 795 // --------------------------------------------------------------------------; 796 else Log() << kFATAL << ""Unknown minimisation method: "" << fFitMethod << Endl;; 797 ; 798 if (fBinaryTreeS != 0) { delete fBinaryTreeS; fBinaryTreeS = 0; }; 799 if (fBinaryTreeB != 0) { delete fBinaryTreeB; fBinaryTreeB = 0; }; 800 ; 801 // force cut ranges within limits; 802 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 803 for (Int_t ibin=0; ibin<fNbins; ibin++) {; 804 ; 805 if ((*fFitParams)[ivar] == kForceMin && fCutMin[ivar][ibin] > -fgMaxAbsCutVal) {; 806 fCutMin[ivar][ibin] = -fgMaxAbsCutVal;; 807 }; 808 if ((*fFitParams)[ivar] == kForceMax &&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:29144,Log,Log,29144,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability,74992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.35846 6.60136 0.0200632 0.00176343 43716.3 1; : 920 | 4.30933 6.53557 0.0200239 0.00175965 43801.4 2; : 921 Minimum Test error found - save the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195 0.0202769 0.00175908 43201.6 2; : 930 | 4.39879 6.60248 0.0204218 0.00176177 42872.3 3; : 931 | 4.17549 6.55946 0,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:107325,Test,Test,107325,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,75 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.6148 0.0201377 0.00175591 43521.3 1; : 834 Minimum Test error found - save the configuration ; : 834 | 7.55905 11.3034 0.0200924 0.00180566 43747.5 0; : 835 | 7.51796 11.4086 0.0200653 0.00174972 43678.7 1; : 836 | 7.6539 11.6743 0.0201454 0.00175856 43509.3 2; : 837 | 7.98319 11.3225 0.0201169 0.00175643 43571.8 3; : 838 | 7.66699 11.6657 0.0201662 0.00181142 43585.5 4; : 839 Minimum Test error found - save the configuration ; : 839 | 7.52525 10.9666 0.0202646 0.00182844 43392.9 0; : 840 | 7.48548 11.313 0.020051 0.00174873 43710.5 1; : 841 | 7.28024 11.1847 0.0200374 0.0017493 43744.4 2; : 842 | 7.18939 11.0082 0.0200397 0.00175322 43748.2 3; : 843 Minimum Test error found - save the configuration ; : 843 | 7.01613 10.4197 0.0201334 0.00182993 43707.5 0; : 844 | 6.83302 10.8151 0.020039 0.00176037 43767.1 1; : 845 | 6.97518 10.5462 0.0200409 0.00175987 43761.2 2; : 846 | 6.93317 10.5904 0.0200239 0.00176026 43802.8 3; : 847 | 6.86223 10.6492 0.0200268 0.00176058 43796.8 4; : 848 | 7.00201 10.9279 0.0200258 0.00175939 43796.3 5; : 849 | 6.9266 10.4735 0.0200333 0.00176264 43785.9 6; : 850 | 6.72856 10.6877 0.0200521 0.00176189 43739.2 7; : 851 | 6.84236 10.8522 0.0200238 0.00176009 43802.7 8; : 852 Minimum Test error found - save the configuration ; : 852 | 6.78011 10.0733 0.0201111 0.00182524 43749.6 0; : 853 Minimum Test error found - save the configuration ; : 853 | 6.53284 9.90736 0.0201187 0.00181829 43714.8 0; : 854 | 6.67108 10.0768 0.0205443 0.0017732 42618.8 1; : 855 | 6.58878 10.7427 0.0200637 0.00176264 43713.2 2; : 856 | 6.54513 10.3387 0.0200413 0.00176141 43764 3; : 857 Minimum Test error found - save the configuration ; : 857 | 6.43616 9.722,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:101709,Test,Test,101709,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"759 _numNodes = layer.numNodes ();; 760 // how many nodes have to be dropped; 761 dropFraction = 0.0;; 762 if (dropFractions.size () > dropIndex); 763 dropFraction = dropFractions.at (dropIndex);; 764 ; 765 fillDropContainer (dropContainer, dropFraction, _numNodes);; 766 }; 767 isWeightsForDrop = true;; 768 }; 769 ; 770 // execute training cycle; 771 trainError = trainCycle (minimizer, weights, begin (trainPattern), end (trainPattern), settings, dropContainer);; 772 ; 773 ; 774 // ------ check if we have to execute a test ------------------; 775 bool hasConverged = false;; 776 if (testCycleCount % settings.testRepetitions () == 0) // we test only everye ""testRepetitions"" repetition; 777 {; 778 if (isWeightsForDrop); 779 {; 780 dropOutWeightFactor (weights, dropFractions);; 781 isWeightsForDrop = false;; 782 }; 783 ; 784 ; 785 testError = 0;; 786 //double weightSum = 0;; 787 settings.startTestCycle ();; 788 if (settings.useMultithreading ()); 789 {; 790 size_t numThreads = std::thread::hardware_concurrency ();; 791 size_t patternPerThread = testPattern.size () / numThreads;; 792 std::vector<Batch> batches;; 793 auto itPat = testPattern.begin ();; 794 // auto itPatEnd = testPattern.end ();; 795 for (size_t idxThread = 0; idxThread < numThreads-1; ++idxThread); 796 {; 797 batches.push_back (Batch (itPat, itPat + patternPerThread));; 798 itPat += patternPerThread;; 799 }; 800 if (itPat != testPattern.end ()); 801 batches.push_back (Batch (itPat, testPattern.end ()));; 802 ; 803 std::vector<std::future<std::tuple<double,std::vector<double>>>> futures;; 804 for (auto& batch : batches); 805 {; 806 // -------------------- execute each of the batch ranges on a different thread -------------------------------; 807 futures.push_back (; 808 std::async (std::launch::async, [&](); 809 {; 810 std::vector<double> localOutput;; 811 pass_through_type passThrough (settings, batch, dropContainerTest);; 812 double testBatchError = (*this) (passThrough, weights, ModeOutput::FETCH, localOu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:23531,test,testPattern,23531,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['test'],['testPattern']
Testability,"76 *((char**) fAddress) = nullptr;; 4677 }; 4678 ResetBit(kDeleteObject);; 4679 if (fType == 3) {; 4680 // -- We are a TClonesArray master branch.; 4681 TClonesArray::Class()->Destructor(fObject);; 4682 fObject = nullptr;; 4683 if ((fStreamerType == TVirtualStreamerInfo::kObjectp) ||; 4684 (fStreamerType == TVirtualStreamerInfo::kObjectP)) {; 4685 // -- We are a pointer to a TClonesArray.; 4686 // We must zero the pointer in the object.; 4687 *((char**) fAddress) = nullptr;; 4688 }; 4689 } else if (fType == 4) {; 4690 // -- We are an STL container master branch.; 4691 TVirtualCollectionProxy* proxy = GetCollectionProxy();; 4692 ; 4693 if (!proxy) {; 4694 Warning(""ReleaseObject"", ""Cannot delete allocated STL container because I do not have a proxy! branch: %s"", GetName());; 4695 fObject = nullptr;; 4696 } else {; 4697 bool needDelete = proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete;; 4698 if (needDelete && fID >= 0) {; 4699 TVirtualStreamerInfo* si = GetInfoImp();; 4700 TStreamerElement* se = (TStreamerElement*) si->GetElement(fID);; 4701 needDelete = !se->TestBit(TStreamerElement::kDoNotDelete);; 4702 }; 4703 if (needDelete) {; 4704 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4705 proxy->Clear(""force"");; 4706 }; 4707 proxy->Destructor(fObject);; 4708 fObject = nullptr;; 4709 }; 4710 if (fStreamerType == TVirtualStreamerInfo::kSTLp) {; 4711 // -- We are a pointer to an STL container.; 4712 // We must zero the pointer in the object.; 4713 *((char**) fAddress) = nullptr;; 4714 }; 4715 } else {; 4716 // We are *not* a TClonesArray master branch and we are *not* an STL container master branch.; 4717 TClass* cl = fBranchClass.GetClass();; 4718 if (!cl) {; 4719 Warning(""ReleaseObject"", ""Cannot delete allocated object because I cannot instantiate a TClass object for its class! branch: '%s' class: '%s'"", GetName(), fBranchClass.GetClassName());; 4720 fObject = nullptr;; 4721 } else {; 4722 TVirtualCollectionProxy* proxy = cl->GetCollectionProxy();;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:174323,Test,TestBit,174323,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"76 Double_t angle,dx,dy ;; 2077 ; 2078 SetLineColor(spec.fColor);; 2079 TAttLine::Modify(); //Change line attributes only if necessary; 2080 ; 2081 for (Int_t i=0;i<=np;i++) {; 2082 angle = phimin*kPI/180 + Double_t(i)*dphi;; 2083 dx = r1*TMath::Cos(angle) +x1 -xOrigin;; 2084 dy = r2*TMath::Sin(angle) +y1 -yOrigin;; 2085 x[i] = gPad->AbsPixeltoX(Int_t( dx*cosang+dy*sinang +xOrigin));; 2086 y[i] = gPad->AbsPixeltoY(Int_t(-dx*sinang+dy*cosang +yOrigin));; 2087 }; 2088 gPad->PaintPolyLine(np+1,x,y);; 2089}; 2090 ; 2091////////////////////////////////////////////////////////////////////////////////; 2092/// Paint.; 2093 ; 2094void TLatex::Paint(Option_t *); 2095{; 2096 if (!gPad) return ;; 2097 Double_t xsave = fX;; 2098 Double_t ysave = fY;; 2099 if (TestBit(kTextNDC)) {; 2100 fX = gPad->GetX1() + xsave*(gPad->GetX2() - gPad->GetX1());; 2101 fY = gPad->GetY1() + ysave*(gPad->GetY2() - gPad->GetY1());; 2102 PaintLatex(fX,fY,GetTextAngle(),GetTextSize(),GetTitle());; 2103 } else {; 2104 PaintLatex(gPad->XtoPad(fX),gPad->YtoPad(fY),GetTextAngle(),GetTextSize(),GetTitle());; 2105 }; 2106 fX = xsave;; 2107 fY = ysave;; 2108}; 2109 ; 2110////////////////////////////////////////////////////////////////////////////////; 2111/// Main drawing function; 2112///; 2113/// Warning: Unlike most others ""XYZ::PaintXYZ"" methods, PaintLatex modifies; 2114/// the TLatex data members.; 2115 ; 2116void TLatex::PaintLatex(Double_t x, Double_t y, Double_t angle, Double_t size, const Char_t *text1); 2117{; 2118 if (size<=0 || strlen(text1) <= 0) return; // do not paint empty text or text with size <= 0; 2119 ; 2120 TAttText::Modify(); // Change text attributes only if necessary.; 2121 ; 2122 TVirtualPS *saveps = gVirtualPS;; 2123 ; 2124 if (gVirtualPS) {; 2125 if (gVirtualPS->InheritsFrom(""TTeXDump"")) {; 2126 gVirtualPS->SetTextAngle(angle);; 2127 TString t(text1);; 2128 if (t.Index(""#"")>=0 || t.Index(""^"")>=0 || t.Index(""\\"")>=0) {; 2129 t.ReplaceAll(""#LT"",""\\langle"");; 2130 t.ReplaceAll(""#GT""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:76439,Test,TestBit,76439,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['Test'],['TestBit']
Testability,760 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: Likelihood; : ; Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: LikelihoodPCA; : ; TFHandler_LikelihoodPCA : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 1.1147 2.2628 [ -12.508 10.719 ]; : myvar2: -0.25554 1.1225 [ -4.1578 3.8995 ]; : var3: -0.19401 0.58225 [ -2.2950 1.8880 ]; : var4: -0.32038 0.33412 [ -1.3929 0.88819 ]; : -----------------------------------------------------------; LikelihoodPCA : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_LikelihoodPCA : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 1.1147 2.2628 [ -12.508 10.719 ]; : myvar2: -0.25554 1.1225 [ -4.1578 3.8995 ]; : var3: -0.19401 0.58225 [ -2.2950 1.8880 ]; : var4: -0.32038 0.33412 [ -1.3929 0.88819 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: PDERS; : ; PDERS : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_PDERS : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.21781 1.7248 [ -9.8605 7.9024 ]; : myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: PDEFoam; : ; PDEFoam : [,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:71558,test,test,71558,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability,76259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792 0.0203192 0.00184107 43294.4 0; : 928 | 4.15393 6.23618 0.0200677 0.00177036 43722.3 1; : 929 | 4.2848 6.29195 0.0202769 0.00175908 43201.6 2; : 930 | 4.39879 6.60248 0.0204218 0.00176177 42872.3 3; : 931 | 4.17549 6.55946 0.0200581 0.00175886 43717.6 4; : 932 | 4.18849 6.67063 0.0200652 0.00175543 43692.5 5; : 933 Minimum Test error found - save the configuration ; : 933 | 4.07608 6.08713 0.0202588 0.00184594 43447.8 0; : 934 | 4.3998 6.10426 0.0204691 0.00178412 42815.1 1; : 935 | 4.23034 6.39854 0.0202977 0.00176426 43165.2 2; : 936 Minimum Test error found - save the configuration ; : 936 | 4.45077 5.93539 0.020128 0.0018336 43729.3 0; : 937 | 4.31583 6.35935 0.0203501 0.00176302 43040.6 1; : 938 Minimum Test error found - save the configuration ; : 938 | 4.1293 5.8271 0.0205749 0.0018749 42780.8 0; : 939 Minimum Test error found - save the configuration ; : 939 | 4.02273 5.7049 0.0206164 0.00186577 42665.2 0; : 940 | 3.91188 6.29174 0.0201055 0.00180854 43723.1 1; : 941 | 3.89757 5.80965 0.0203179 0.00179759 43195.8 2; : 942 | 3.94904 5.73464 0.0200877 0.00175468 43637.1 3; : 943 | 3.90362 5.73888 0.0200954 0.00175028 43608.4 4; : 944 | 3.87035 5.70718 0.0200345 0.0017513 43756.1 5; : 945 | 4.07017 5.95519 0.020321 0.00177709 43140.8 6; : 946 Minimum Test error found - save the configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:108948,Test,Test,108948,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"770 g->TAttMarker::Modify();; 9771 g->TAttFill::Modify();; 9772 if (line) {; 9773 Int_t fs = g->GetFillStyle();; 9774 Int_t db = gStyle->GetDrawBorder();; 9775 g->SetFillStyle(0);; 9776 gStyle->SetDrawBorder(1);; 9777 g->Paint(""F"");; 9778 gStyle->SetDrawBorder(db);; 9779 g->SetFillStyle(fs);; 9780 }; 9781 if (fill) g->Paint(""F"");; 9782 if (mark) g->Paint(""P"");; 9783 }; 9784 }; 9785 }; 9786}; 9787 ; 9788////////////////////////////////////////////////////////////////////////////////; 9789/// [Control function to draw a TH2Poly as a color plot.](\ref HP20a); 9790 ; 9791void THistPainter::PaintTH2PolyColorLevels(Option_t *); 9792{; 9793 ; 9794 //Do not highlight the histogram, if its part was picked.; 9795 if (gPad->PadInHighlightMode() && gPad->GetSelected() != fH); 9796 return;; 9797 ; 9798 Int_t ncolors, color, theColor;; 9799 Double_t z, zc;; 9800 Double_t zmin = fH->GetMinimum();; 9801 Double_t zmax = fH->GetMaximum();; 9802 if (Hoption.Logz) {; 9803 if (zmax > 0) {; 9804 if (zmin <= 0) zmin = TMath::Min((Double_t)1, (Double_t)0.001*zmax);; 9805 zmin = TMath::Log10(zmin);; 9806 zmax = TMath::Log10(zmax);; 9807 } else {; 9808 return;; 9809 }; 9810 }; 9811 Double_t dz = zmax - zmin;; 9812 ; 9813 // Initialize the levels on the Z axis; 9814 ncolors = gStyle->GetNumberOfColors();; 9815 Int_t ndiv = fH->GetContour();; 9816 if (ndiv == 0 ) {; 9817 ndiv = gStyle->GetNumberContours();; 9818 fH->SetContour(ndiv);; 9819 }; 9820 Int_t ndivz = TMath::Abs(ndiv);; 9821 if (!fH->TestBit(TH1::kUserContour)) fH->SetContour(ndiv);; 9822 Double_t scale = ndivz/dz;; 9823 ; 9824 TIter next(((TH2Poly*)fH)->GetBins());; 9825 ; 9826 while (auto obj = next()) {; 9827 TH2PolyBin *b = (TH2PolyBin*)obj;; 9828 TObject *poly = b->GetPolygon();; 9829 ; 9830 z = b->GetContent();; 9831 if (z==0 && Hoption.Zero) continue;; 9832 if (Hoption.Logz) {; 9833 if (z > 0) z = TMath::Log10(z);; 9834 else z = zmin;; 9835 }; 9836 if (z < zmin) continue;; 9837 ; 9838 // Define the bin color.; 9839 if (fH->Tes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:353663,Log,Logz,353663,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logz']
Testability,"774 cumulativeDist->SetBinContent(ibin,partialSum*inverseSum);; 1775 }; 1776 return cumulativeDist;; 1777}; 1778 ; 1779void TMVA::Tools::ReadAttr(void *node, const char *attrname, float &value); 1780{; 1781 // read attribute from xml; 1782 const char *val = xmlengine().GetAttr(node, attrname);; 1783 if (val == nullptr) {; 1784 const char *nodename = xmlengine().GetNodeName(node);; 1785 Log() << kFATAL << ""Trying to read non-existing attribute '"" << attrname << ""' from xml node '"" << nodename << ""'""; 1786 << Endl;; 1787 } else; 1788 value = atof(val);; 1789}; 1790 ; 1791void TMVA::Tools::ReadAttr(void *node, const char *attrname, int &value); 1792{; 1793 // read attribute from xml; 1794 const char *val = xmlengine().GetAttr(node, attrname);; 1795 if (val == nullptr) {; 1796 const char *nodename = xmlengine().GetNodeName(node);; 1797 Log() << kFATAL << ""Trying to read non-existing attribute '"" << attrname << ""' from xml node '"" << nodename << ""'""; 1798 << Endl;; 1799 } else; 1800 value = atoi(val);; 1801}; 1802 ; 1803void TMVA::Tools::ReadAttr(void *node, const char *attrname, short &value); 1804{; 1805 // read attribute from xml; 1806 const char *val = xmlengine().GetAttr(node, attrname);; 1807 if (val == nullptr) {; 1808 const char *nodename = xmlengine().GetNodeName(node);; 1809 Log() << kFATAL << ""Trying to read non-existing attribute '"" << attrname << ""' from xml node '"" << nodename << ""'""; 1810 << Endl;; 1811 } else; 1812 value = atoi(val);; 1813}; Event.h; MsgLogger.h; PDF.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Long_tlong Long_tDefinition RtypesCore.h:54; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:63458,Log,Log,63458,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"78 Int_t bin,i;; 779 ntimes *= stride;; 780 Int_t ifirst = 0;; 781 //If a buffer is activated, fill buffer; 782 // (note that this function must not be called from TH2::BufferEmpty); 783 if (fBuffer) {; 784 for (i=0;i<ntimes;i+=stride) {; 785 if (!fBuffer) break; // buffer can be deleted in BufferFill when is empty; 786 if (w) BufferFill(x[i],y[i],w[i]);; 787 else BufferFill(x[i], y[i], 1.);; 788 }; 789 // fill the remaining entries if the buffer has been deleted; 790 if (i < ntimes && fBuffer==nullptr); 791 ifirst = i; // start from i; 792 else; 793 return;; 794 }; 795 ; 796 for (i=ifirst;i<ntimes;i+=stride) {; 797 if (fYmin != fYmax) {; 798 if (y[i] <fYmin || y[i]> fYmax || TMath::IsNaN(y[i])) continue;; 799 }; 800 ; 801 Double_t u = (w) ? w[i] : 1; // (w[i] > 0 ? w[i] : -w[i]);; 802 fEntries++;; 803 bin =fXaxis.FindBin(x[i]);; 804 AddBinContent(bin, u*y[i]);; 805 fSumw2.fArray[bin] += u*y[i]*y[i];; 806 if (!fBinSumw2.fN && u != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before accumulating the entries; 807 if (fBinSumw2.fN) fBinSumw2.fArray[bin] += u*u;; 808 fBinEntries.fArray[bin] += u;; 809 if (bin == 0 || bin > fXaxis.GetNbins()) {; 810 if (!GetStatOverflowsBehaviour()) continue;; 811 }; 812 fTsumw += u;; 813 fTsumw2 += u*u;; 814 fTsumwx += u*x[i];; 815 fTsumwx2 += u*x[i]*x[i];; 816 fTsumwy += u*y[i];; 817 fTsumwy2 += u*y[i]*y[i];; 818 }; 819}; 820 ; 821////////////////////////////////////////////////////////////////////////////////; 822/// Return bin content of a Profile histogram.; 823 ; 824Double_t TProfile::GetBinContent(Int_t bin) const; 825{; 826 if (fBuffer) ((TProfile*)this)->BufferEmpty();; 827 ; 828 if (bin < 0 || bin >= fNcells) return 0;; 829 if (fBinEntries.fArray[bin] == 0) return 0;; 830 if (!fArray) return 0;; 831 return fArray[bin]/fBinEntries.fArray[bin];; 832}; 833 ; 834////////////////////////////////////////////////////////////////////////////////; 835/// Return bin entries of a Profile histogram.; 836 ; 837Double_t TProfile:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:29050,Test,TestBit,29050,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['Test'],['TestBit']
Testability,78412 42815.1 1; : 935 | 4.23034 6.39854 0.0202977 0.00176426 43165.2 2; : 936 Minimum Test error found - save the configuration ; : 936 | 4.45077 5.93539 0.020128 0.0018336 43729.3 0; : 937 | 4.31583 6.35935 0.0203501 0.00176302 43040.6 1; : 938 Minimum Test error found - save the configuration ; : 938 | 4.1293 5.8271 0.0205749 0.0018749 42780.8 0; : 939 Minimum Test error found - save the configuration ; : 939 | 4.02273 5.7049 0.0206164 0.00186577 42665.2 0; : 940 | 3.91188 6.29174 0.0201055 0.00180854 43723.1 1; : 941 | 3.89757 5.80965 0.0203179 0.00179759 43195.8 2; : 942 | 3.94904 5.73464 0.0200877 0.00175468 43637.1 3; : 943 | 3.90362 5.73888 0.0200954 0.00175028 43608.4 4; : 944 | 3.87035 5.70718 0.0200345 0.0017513 43756.1 5; : 945 | 4.07017 5.95519 0.020321 0.00177709 43140.8 6; : 946 Minimum Test error found - save the configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test error found - save the configuration ; : 953 | 3.78482 5.22353 0.0202416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test error found - save the configuration ; : 959 | 3.68258 5.15386 0.0202548 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.974,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:109565,Test,Test,109565,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,796.8 0; : 754 Minimum Test error found - save the configuration ; : 754 | 16.8738 20.0271 0.0201173 0.00182078 43724.2 0; : 755 | 16.6744 20.3793 0.0200328 0.00175569 43770.5 1; : 756 Minimum Test error found - save the configuration ; : 756 | 16.5214 19.4549 0.0200975 0.00181399 43755.3 0; : 757 | 16.5493 20.0416 0.0200274 0.00175373 43778.7 1; : 758 | 16.7051 19.8344 0.0200284 0.00174826 43763.4 2; : 759 | 16.2032 19.717 0.0200656 0.00175048 43679.7 3; : 760 | 16.1221 19.4686 0.0200628 0.00175006 43685.5 4; : 761 Minimum Test error found - save the configuration ; : 761 | 15.7828 18.8348 0.0201031 0.00181849 43752.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Minimum Test error found - save the configuration ; : 764 | 15.3977 18.5678 0.0201039 0.0018081 43725.8 0; : 765 | 15.238 19.0685 0.0200523 0.00175459 43721.4 1; : 766 Minimum Test error found - save the configuration ; : 766 | 14.9634 18.5633 0.0200937 0.00181207 43759.7 0; : 767 Minimum Test error found - save the configuration ; : 767 | 14.6611 18.2211 0.0200896 0.00180918 43762.7 0; : 768 Minimum Test error found - save the configuration ; : 768 | 14.4892 18.1817 0.0200772 0.00181141 43797.6 0; : 769 Minimum Test error found - save the configuration ; : 769 | 14.3366 17.8635 0.0200909 0.00180773 43756.2 0; : 770 Minimum Test error found - save the configuration ; : 770 | 14.5733 17.5465 0.0200968 0.00180191 43728 0; : 771 | 13.9827 17.8429 0.0200367 0.0017469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.02,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:95357,Test,Test,95357,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,79972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error found - save the configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.218,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:105306,Test,Test,105306,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"79; TPad::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideCompute distance from point px,py to a box.Definition TPad.cxx:1174; TPad::fFixedAspectRatioBool_t fFixedAspectRatioTrue if fixed aspect ratio.Definition TPad.h:104; TPad::PaintFillAreavoid PaintFillArea(Int_t n, Float_t *x, Float_t *y, Option_t *option="""") overrideDefinition TPad.cxx:4017; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from a pad and its sub-pads.Definition TPad.cxx:5389; TPad::HasFixedAspectRatioBool_t HasFixedAspectRatio() const overrideDefinition TPad.h:270; TPad::CloseToolTipvoid CloseToolTip(TObject *tip) overrideHide tool tip.Definition TPad.cxx:7123; TPad::GetUxminDouble_t GetUxmin() const overrideReturns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decad...Definition TPad.h:228; TPad::SetToolTipTextvoid SetToolTipText(const char *text, Long_t delayms=1000) overrideSet tool tip text associated with this pad.Definition TPad.cxx:6690; TPad::PaintPolyLinevoid PaintPolyLine(Int_t n, Float_t *x, Float_t *y, Option_t *option="""") overridePaint polyline in CurrentPad World coordinates.Definition TPad.cxx:4392; TPad::lsvoid ls(Option_t *option="""") const overrideList all primitives in pad.Definition TPad.cxx:3090; TPad::GetViewTView * GetView() const overrideDefinition TPad.h:254; TPad::ModifiedUpdatevoid ModifiedUpdate() overrideShort cut to call Modified() and Update() in a single call.Definition TPad.cxx:3530; TPad::fVtoAbsPixelkDouble_t fVtoAbsPixelkConversion coefficient for V NDC to absolute pixel.Definition TPad.h:51; TPad::GetPadSaveTVirtualPad * GetPadSave() const overrideGet save pad.Definition TPad.cxx:2820; TPad::SetAttLinePSvoid SetAttLinePS(Color_t color, Style_t style, Width_t lwidth) overrideSet postscript li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:305480,log,log,305480,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['log'],['log']
Testability,"7; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::m_factorWeightDecaydouble m_factorWeightDecayDefinition NeuralNet.h:840; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::count_mb_dEsize_t count_mb_dEDefinition NeuralNet.h:845; TMVA::DNN::Settings::m_useMultithreadingbool m_useMultithreadingDefinition NeuralNet.h:863; TMVA::DNN::Settings::count_mb_Esize_t count_mb_EDefinition NeuralNet.h:844; TMVA::DNN::Settings::existsbool exists(std::string hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:75514,test,testSamplevirtual,75514,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,2,['test'],"['testSample', 'testSamplevirtual']"
Testability,"7TGeoRotation::TGeoRotation(const char *name, Double_t phi, Double_t theta, Double_t psi) : TGeoMatrix(name); 908{; 909 SetAngles(phi, theta, psi);; 910}; 911 ; 912////////////////////////////////////////////////////////////////////////////////; 913/// Rotation constructor a la GEANT3. Angles theta(i), phi(i) are the polar and azimuthal; 914/// angles of the (i) axis of the rotated system with respect to the initial non-rotated; 915/// system.; 916/// Example : the identity matrix (no rotation) is composed by; 917/// theta1=90, phi1=0, theta2=90, phi2=90, theta3=0, phi3=0; 918/// SetBit(kGeoRotation);; 919 ; 920TGeoRotation::TGeoRotation(const char *name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2,; 921 Double_t theta3, Double_t phi3); 922 : TGeoMatrix(name); 923{; 924 SetAngles(theta1, phi1, theta2, phi2, theta3, phi3);; 925}; 926 ; 927////////////////////////////////////////////////////////////////////////////////; 928/// Assignment from a general matrix; 929 ; 930TGeoRotation &TGeoRotation::operator=(const TGeoMatrix &other); 931{; 932 if (&other == this); 933 return *this;; 934 Bool_t registered = TestBit(kGeoRegistered);; 935 TNamed::operator=(other);; 936 SetRotation(other);; 937 SetBit(kGeoRegistered, registered);; 938 ResetBit(kGeoTranslation);; 939 ResetBit(kGeoScale);; 940 return *this;; 941}; 942 ; 943////////////////////////////////////////////////////////////////////////////////; 944/// Composition; 945 ; 946TGeoRotation &TGeoRotation::operator*=(const TGeoRotation &right); 947{; 948 if (!right.IsRotation()); 949 return *this;; 950 MultiplyBy(&right, true);; 951 return *this;; 952}; 953 ; 954TGeoRotation TGeoRotation::operator*(const TGeoRotation &right) const; 955{; 956 TGeoRotation r = *this;; 957 r *= right;; 958 return r;; 959}; 960 ; 961TGeoHMatrix TGeoRotation::operator*(const TGeoMatrix &right) const; 962{; 963 TGeoHMatrix t = *this;; 964 t *= right;; 965 return t;; 966}; 967 ; 968//////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:32364,Test,TestBit,32364,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Test'],['TestBit']
Testability,"7void TMVA::MethodCuts::MakeClassSpecific( std::ostream& fout, const TString& className ) const; 1708{; 1709 fout << "" // not implemented for class: \"""" << className << ""\"""" << std::endl;; 1710 fout << ""};"" << std::endl;; 1711}; 1712 ; 1713////////////////////////////////////////////////////////////////////////////////; 1714/// get help message text; 1715///; 1716/// typical length of text line:; 1717/// ""|--------------------------------------------------------------|""; 1718 ; 1719void TMVA::MethodCuts::GetHelpMessage() const; 1720{; 1721 TString bold = gConfig().WriteOptionsReference() ? ""<b>"" : """";; 1722 TString resbold = gConfig().WriteOptionsReference() ? ""</b>"" : """";; 1723 TString brk = gConfig().WriteOptionsReference() ? ""<br>"" : """";; 1724 ; 1725 Log() << Endl;; 1726 Log() << gTools().Color(""bold"") << ""--- Short description:"" << gTools().Color(""reset"") << Endl;; 1727 Log() << Endl;; 1728 Log() << ""The optimisation of rectangular cuts performed by TMVA maximises "" << Endl;; 1729 Log() << ""the background rejection at given signal efficiency, and scans "" << Endl;; 1730 Log() << ""over the full range of the latter quantity. Three optimisation"" << Endl;; 1731 Log() << ""methods are optional: Monte Carlo sampling (MC), a Genetics"" << Endl;; 1732 Log() << ""Algorithm (GA), and Simulated Annealing (SA). GA and SA are"" << Endl;; 1733 Log() << ""expected to perform best."" << Endl;; 1734 Log() << Endl;; 1735 Log() << ""The difficulty to find the optimal cuts strongly increases with"" << Endl;; 1736 Log() << ""the dimensionality (number of input variables) of the problem."" << Endl;; 1737 Log() << ""This behavior is due to the non-uniqueness of the solution space.""<< Endl;; 1738 Log() << Endl;; 1739 Log() << gTools().Color(""bold"") << ""--- Performance optimisation:"" << gTools().Color(""reset"") << Endl;; 1740 Log() << Endl;; 1741 Log() << ""If the dimensionality exceeds, say, 4 input variables, it is "" << Endl;; 1742 Log() << ""advisable to scrutinize the separation power of the varia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:67163,Log,Log,67163,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,4,['Log'],['Log']
Testability,8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 | 58.5813 44.6814 0.020214 0.00181641 43484.1 0; : 657 Minimum Test error found - save the configuration ; : 657 | 58.1075 44.2582 0.0201216 0.0018139 43697.5 0; : 658 Minimum Test error found - save the configuration ; : 658 | 57.7428 43.9646 0.0201606 0.00184632 43681.8 0; : 659 Minimum Test error found - save the configuration ; : 659 | 56.5877 43.7448 0.0201275 0.00181379 43683.2 0; : 660 Minimum Test error found - save the configuration ; : 660 | 56.1107 42.9226 0.0200887 0.00181275 43773.3 0; : 661 Minimum Test error found - save the configuration ; : 661 | 55.5039 42.6809 0.0201245 0.00180935 43679.7 0; : 662 Minimum Test error found - save the configuration ; : 662 | 54.3572 42.2723 0.0202587 0.00183315 43417.9 0; : 663 Minimum Test error found - save the configuration ; : 663 | 53.566 41.7624 0.0203991 0.00186617 43166.5 0; : 664 Minimum Test error found - save the configuration ; : 664 | 52.9086 41.2393 0.0201899 0.00182999 43573.1 0; : 665 Minimum Test error found - save the configuration ; : 665 | 52.1886 40.6761 0.020181 0.00182542 43583.6 0; : 666 Minimum Test error found - save the configuration ; : 666 | 51.2956 40.6256 0.0201396 0.00182896 43690.5 0; : 667 Minimum Test error found - save the configuration ; : 667 | 50.7315 40.0752 0.0201193 0.00182284 43724.4 0; : 668 | ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:85133,Test,Test,85133,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0925 30.8793 0.0200419 0.00175584 43749.1 2; : 703 Minimum Test error found - save the configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:89494,Test,Test,89494,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,8 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 Minimum Test error found - save the configuration ; : 651 | 62.641 46.7417 0.020143 0.00182812 43680.3 0; : 652 Minimum Test error found - save the configuration ; : 652 | 61.875 46.3421 0.0201124 0.00182035 43734.8 0; : 653 Minimum Test error found - save the configuration ; : 653 | 61.1155 45.9892 0.0201549 0.00182806 43651.9 0; : 654 | 60.3955 46.5097 0.0201006 0.00177795 43661.9 1; : 655 Minimum Test error found - save the configuration ; : 655 | 59.5776 45.1172 0.0204622 0.00186914 43026.9 0; : 656 Minimum Test error found - save the configuration ; : 656 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:83831,Test,Test,83831,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"8 ; 2229 Int_t bin = GetBin(i, j, k);; 2230 ; 2231 sum1 += RetrieveBinContent(bin);; 2232 sum2 += h2->RetrieveBinContent(bin);; 2233 ; 2234 if ( comparisonWW ) sumw1 += GetBinErrorSqUnchecked(bin);; 2235 if ( comparisonUW || comparisonWW ) sumw2 += h2->GetBinErrorSqUnchecked(bin);; 2236 }; 2237 }; 2238 }; 2239 }; 2240 //checks that the histograms are not empty; 2241 if (sum1 == 0.0 || sum2 == 0.0) {; 2242 Error(""Chi2TestX"",""one histogram is empty"");; 2243 return 0.0;; 2244 }; 2245 ; 2246 if ( comparisonWW && ( sumw1 <= 0.0 && sumw2 <= 0.0 ) ){; 2247 Error(""Chi2TestX"",""Hist1 and Hist2 have both all zero errors\n"");; 2248 return 0.0;; 2249 }; 2250 ; 2251 //THE TEST; 2252 Int_t m = 0, n = 0;; 2253 ; 2254 //Experiment - experiment comparison; 2255 if (comparisonUU) {; 2256 Double_t sum = sum1 + sum2;; 2257 for (Int_t i = i_start; i <= i_end; ++i) {; 2258 for (Int_t j = j_start; j <= j_end; ++j) {; 2259 for (Int_t k = k_start; k <= k_end; ++k) {; 2260 ; 2261 Int_t bin = GetBin(i, j, k);; 2262 ; 2263 Double_t cnt1 = RetrieveBinContent(bin);; 2264 Double_t cnt2 = h2->RetrieveBinContent(bin);; 2265 ; 2266 if (scaledHistogram) {; 2267 // scale bin value to effective bin entries; 2268 Double_t e1sq = GetBinErrorSqUnchecked(bin);; 2269 Double_t e2sq = h2->GetBinErrorSqUnchecked(bin);; 2270 ; 2271 if (e1sq > 0) cnt1 = TMath::Floor(cnt1 * cnt1 / e1sq + 0.5); // avoid rounding errors; 2272 else cnt1 = 0;; 2273 ; 2274 if (e2sq > 0) cnt2 = TMath::Floor(cnt2 * cnt2 / e2sq + 0.5); // avoid rounding errors; 2275 else cnt2 = 0;; 2276 }; 2277 ; 2278 if (Int_t(cnt1) == 0 && Int_t(cnt2) == 0) --ndf; // no data means one degree of freedom less; 2279 else {; 2280 ; 2281 Double_t cntsum = cnt1 + cnt2;; 2282 Double_t nexp1 = cntsum * sum1 / sum;; 2283 //Double_t nexp2 = binsum*sum2/sum;; 2284 ; 2285 if (res) res[i - i_start] = (cnt1 - nexp1) / TMath::Sqrt(nexp1);; 2286 ; 2287 if (cnt1 < 1) ++m;; 2288 if (cnt2 < 1) ++n;; 2289 ; 2290 //Habermann correction for residuals; 2291 Double_t correc = (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:90838,TEST,TEST,90838,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['TEST'],['TEST']
Testability,"8 = RooCmdArg::none()); virtual RooPlot*RooAbsData::statOn(RooPlot* frame, const char* what, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.15, Double_t xmax = 0.65, Double_t ymax = 0.85, const char* cutSpec = 0, const char* cutRange = 0, const RooCmdArg* formatCmd = 0); RooAbsDataStore*RooAbsData::store(); const RooAbsDataStore*RooAbsData::store() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Double_tsum(Bool_t correctForBinSize) const; Double_tsum(const RooArgSet& sumSet, const RooArgSet& sliceSet, Bool_t correctForBinSize); virtual Double_tsumEntries(const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Roo1DTable*RooAbsData::table(const RooArgSet& catSet, const char* cuts = """", const char* opts = """") const; virtual Roo1DTable*RooAbsData::table(const RooAbsCategory& cat, const char* cuts = """", const char* opts = """") const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const TTree*RooAbsData::tree() const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tvalid() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tweight() const; Double_tweight(const RooArgSet& bin, Int_t intOrder = 1, Bool_t correctForBinSize = kFALSE, Bool_t cdfBoundaries = kFALSE); virtual Double_tweightError(RooAbsData::ErrorType etype = Poisson) const; virtual voidweightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. RooDataHist(const char* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); voidadjustBinning(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataHist.html:12604,Test,TestBit,12604,root/html526/RooDataHist.html,https://root.cern,https://root.cern/root/html526/RooDataHist.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"8 if (fVerboseLevel.CompareTo(""Verbose"") == 0); 269 fLogger->SetMinType(kVERBOSE);; 270 if (fVerboseLevel.CompareTo(""Info"") == 0); 271 fLogger->SetMinType(kINFO);; 272 ; 273 // global settings; 274 gConfig().SetUseColor(color);; 275 gConfig().SetSilent(silent);; 276 gConfig().SetDrawProgressBar(drawProgressBar);; 277 ; 278 analysisType.ToLower();; 279 if (analysisType == ""classification""); 280 fAnalysisType = Types::kClassification;; 281 else if (analysisType == ""regression""); 282 fAnalysisType = Types::kRegression;; 283 else if (analysisType == ""multiclass""); 284 fAnalysisType = Types::kMulticlass;; 285 else if (analysisType == ""auto""); 286 fAnalysisType = Types::kNoAnalysisType;; 287 ; 288 Greetings();; 289}; 290 ; 291////////////////////////////////////////////////////////////////////////////////; 292/// Print welcome message.; 293/// Options are: kLogoWelcomeMsg, kIsometricWelcomeMsg, kLeanWelcomeMsg; 294 ; 295void TMVA::Factory::Greetings(); 296{; 297 gTools().ROOTVersionMessage(Log());; 298 gTools().TMVAWelcomeMessage(Log(), gTools().kLogoWelcomeMsg);; 299 gTools().TMVAVersionMessage(Log());; 300 Log() << Endl;; 301}; 302 ; 303////////////////////////////////////////////////////////////////////////////////; 304/// Destructor.; 305 ; 306TMVA::Factory::~Factory(void); 307{; 308 std::vector<TMVA::VariableTransformBase *>::iterator trfIt = fDefaultTrfs.begin();; 309 for (; trfIt != fDefaultTrfs.end(); ++trfIt); 310 delete (*trfIt);; 311 ; 312 this->DeleteAllMethods();; 313 ; 314 // problem with call of REGISTER_METHOD macro ...; 315 // ClassifierFactory::DestroyInstance();; 316 // Types::DestroyInstance();; 317 // Tools::DestroyInstance();; 318 // Config::DestroyInstance();; 319}; 320 ; 321////////////////////////////////////////////////////////////////////////////////; 322/// Delete methods.; 323 ; 324void TMVA::Factory::DeleteAllMethods(void); 325{; 326 std::map<TString, MVector *>::iterator itrMap;; 327 ; 328 for (itrMap = fMethodsMap.begin(); itrMap != fMethods",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:12014,Log,Log,12014,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability,"8 m = dynamic_cast<MethodBase *>(ClassifierFactory::Instance().Create(; 1239 Types::Instance().GetMethodName(methodType).Data(), dataSetInfo, weightfile));; 1240 if (m->GetMethodType() == Types::kCategory) {; 1241 MethodCategory *methCat = (dynamic_cast<MethodCategory *>(m));; 1242 if (!methCat); 1243 Log() << kFATAL << ""Method with type kCategory cannot be casted to MethodCategory. /Factory"" << Endl;; 1244 else; 1245 methCat->fDataSetManager = m->DataInfo().GetDataSetManager();; 1246 }; 1247 // ToDo, Do we need to fill the DataSetManager of MethodBoost here too?; 1248 ; 1249 TString wfileDir = m->DataInfo().GetName();; 1250 wfileDir += ""/"" + gConfig().GetIONames().fWeightFileDir;; 1251 m->SetWeightFileDir(wfileDir);; 1252 m->SetModelPersistence(fModelPersistence);; 1253 m->SetSilentFile(IsSilentFile());; 1254 m->SetAnalysisType(fAnalysisType);; 1255 m->SetupMethod();; 1256 m->ReadStateFromFile();; 1257 m->SetTestvarName(testvarName);; 1258 ; 1259 // replace trained method by newly created one (from weight file) in methods vector; 1260 (*methods)[i] = m;; 1261 }; 1262 }; 1263 }; 1264}; 1265 ; 1266////////////////////////////////////////////////////////////////////////////////; 1267/// Evaluates all booked methods on the testing data and adds the output to the; 1268/// Results in the corresponiding DataSet.; 1269///; 1270 ; 1271void TMVA::Factory::TestAllMethods(); 1272{; 1273 Log() << kHEADER << gTools().Color(""bold"") << ""Test all methods"" << gTools().Color(""reset"") << Endl;; 1274 ; 1275 // don't do anything if no method booked; 1276 if (fMethodsMap.empty()) {; 1277 Log() << kINFO << ""...nothing found to test"" << Endl;; 1278 return;; 1279 }; 1280 std::map<TString, MVector *>::iterator itrMap;; 1281 ; 1282 for (itrMap = fMethodsMap.begin(); itrMap != fMethodsMap.end(); ++itrMap) {; 1283 MVector *methods = itrMap->second;; 1284 MVector::iterator itrMethod;; 1285 ; 1286 // iterate over methods and test; 1287 for (itrMethod = methods->begin(); itrMethod != methods->end()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:51529,test,testvarName,51529,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['test'],"['testing', 'testvarName']"
Testability,"8 of file GSLRndmEngines.cxx. ◆ GaussianZig(). double ROOT::Math::GSLRandomEngine::GaussianZig ; (; double ; sigma); const. Gaussian distribution - Ziggurat method. ; Definition at line 209 of file GSLRndmEngines.cxx. ◆ Initialize(). void ROOT::Math::GSLRandomEngine::Initialize ; (; ). initialize the generator If no rng is present the default one based on Mersenne and Twister is created ; Definition at line 124 of file GSLRndmEngines.cxx. ◆ IntRndm(). unsigned long ROOT::Math::GSLRandomEngine::IntRndm ; (; ); const. inline . Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 133 of file GSLRndmEngines.h. ◆ Landau(). double ROOT::Math::GSLRandomEngine::Landau ; (; ); const. Landau distribution. ; Definition at line 287 of file GSLRndmEngines.cxx. ◆ Logistic(). double ROOT::Math::GSLRandomEngine::Logistic ; (; double ; a); const. Logistic distribution. ; Definition at line 336 of file GSLRndmEngines.cxx. ◆ LogNormal(). double ROOT::Math::GSLRandomEngine::LogNormal ; (; double ; zeta, . double ; sigma . ); const. Log Normal distribution. ; Definition at line 305 of file GSLRndmEngines.cxx. ◆ MaxInt(). unsigned long ROOT::Math::GSLRandomEngine::MaxInt ; (; ); const. return the maximum integer +1 a generator can handle ; Definition at line 157 of file GSLRndmEngines.cxx. ◆ MinInt(). unsigned long ROOT::Math::GSLRandomEngine::MinInt ; (; ); const. return the minimum integer a generator can handle typically this value is 0 ; Definition at line 152 of file GSLRndmEngines.cxx. ◆ Multinomial(). std::vector< unsigned int > ROOT::Math::GSLRandomEngine::Multinomial ; (; unsigned int ; ntot, . const std::vector< double > & ; p . ); const. Multinomial distribution. ; Definition at line 379 of file GSLRndmEngines.cxx. ◆ Name(). std::string ROOT::Math::GSLRandomEngine::Name ; (; ); const. return name of generator ; Definition at line 19",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:10255,Log,Logistic,10255,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,1,['Log'],['Logistic']
Testability,"8 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ; x, . double ; par . ). inline . Definition at line 198 of file MathFuncs.h. ◆ poissonIntegral(). double RooFit::Detail::MathFuncs::poissonIntegral ; (; int ; code, . double ; mu, . double ; x, . double ; integrandMin, . double ; integrandMax, . unsigned int ; protectNegative . ). inline . Definition at line 580 of file MathFuncs.h. ◆ polynomial(). template<bool pd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:9058,log,logNormalIntegralStandard,9058,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['log'],['logNormalIntegralStandard']
Testability,"8 of file TProof.cxx. ◆ LoadPackage(). Int_t TProof::LoadPackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; loadopts = 0, . TList * ; workers = 0 . ). private . Load specified package. ; Executes the PROOF-INF/SETUP.C script on all active nodes. If notOnClient = true, don't load package on the client. The default is to load the package also on the client. The argument 'loadopts' specify a list of objects to be passed to the SETUP. The objects in the list must be streamable; the SETUP macro will be executed like this: SETUP.C(loadopts). Returns 0 in case of success and -1 in case of error. ; Definition at line 8069 of file TProof.cxx. ◆ LogMessage(). void TProof::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Log a message into the appropriate window by emitting a signal. ; Definition at line 6414 of file TProof.cxx. ◆ LogViewer(). void TProof::LogViewer ; (; const char * ; url = 0, . Int_t ; sessionidx = 0 . ). static . Start the log viewer window usign the plugin manager. ; Definition at line 12470 of file TProof.cxx. ◆ MakePlayer(). TVirtualProofPlayer * TProof::MakePlayer ; (; const char * ; player = 0, . TSocket * ; s = 0 . ). protectedvirtual . Construct a TProofPlayer object. ; The player string specifies which player should be created: remote, slave, sm (supermaster) or base. Default is remote. Socket is needed in case a slave player is created. ; Reimplemented in TProofSuperMaster.; Definition at line 10211 of file TProof.cxx. ◆ MarkBad() [1/2]. void TProof::MarkBad ; (; TSlave * ; wrk, . const char * ; reason = 0 . ). private . Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor objects. ; Assume that the work done by this worker was lost and ask packerizer to reassign it. ; Definition at line 4521 of file TProof.cxx. ◆ MarkBad() [2/2]. void TProof::MarkBad ; (; TSocket * ; s, . const char * ; reason = 0 . ). private . Add slave with socket s to the bad slave list a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:115831,log,log,115831,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['log'],['log']
Testability,"8 return;; 9809 }; 9810 }; 9811 Double_t dz = zmax - zmin;; 9812 ; 9813 // Initialize the levels on the Z axis; 9814 ncolors = gStyle->GetNumberOfColors();; 9815 Int_t ndiv = fH->GetContour();; 9816 if (ndiv == 0 ) {; 9817 ndiv = gStyle->GetNumberContours();; 9818 fH->SetContour(ndiv);; 9819 }; 9820 Int_t ndivz = TMath::Abs(ndiv);; 9821 if (!fH->TestBit(TH1::kUserContour)) fH->SetContour(ndiv);; 9822 Double_t scale = ndivz/dz;; 9823 ; 9824 TIter next(((TH2Poly*)fH)->GetBins());; 9825 ; 9826 while (auto obj = next()) {; 9827 TH2PolyBin *b = (TH2PolyBin*)obj;; 9828 TObject *poly = b->GetPolygon();; 9829 ; 9830 z = b->GetContent();; 9831 if (z==0 && Hoption.Zero) continue;; 9832 if (Hoption.Logz) {; 9833 if (z > 0) z = TMath::Log10(z);; 9834 else z = zmin;; 9835 }; 9836 if (z < zmin) continue;; 9837 ; 9838 // Define the bin color.; 9839 if (fH->TestBit(TH1::kUserContour)) {; 9840 zc = fH->GetContourLevelPad(0);; 9841 if (z < zc) continue;; 9842 color = -1;; 9843 for (Int_t k=0; k<ndiv; k++) {; 9844 zc = fH->GetContourLevelPad(k);; 9845 if (z < zc) {; 9846 continue;; 9847 } else {; 9848 color++;; 9849 }; 9850 }; 9851 } else {; 9852 color = Int_t(0.01+(z-zmin)*scale);; 9853 }; 9854 theColor = Int_t((color+0.99)*Float_t(ncolors)/Float_t(ndivz));; 9855 if (theColor > ncolors-1) theColor = ncolors-1;; 9856 ; 9857 // Paint the TGraph bins.; 9858 if (poly->IsA() == TGraph::Class()) {; 9859 TGraph *g = (TGraph*)poly;; 9860 g->SetFillColor(gStyle->GetColorPalette(theColor));; 9861 g->TAttFill::Modify();; 9862 g->Paint(""F"");; 9863 }; 9864 ; 9865 // Paint the TMultiGraph bins.; 9866 if (poly->IsA() == TMultiGraph::Class()) {; 9867 TMultiGraph *mg = (TMultiGraph*)poly;; 9868 TList *gl = mg->GetListOfGraphs();; 9869 if (!gl) return;; 9870 TGraph *g;; 9871 TIter nextg(gl);; 9872 while ((g = (TGraph*) nextg())) {; 9873 g->SetFillColor(gStyle->GetColorPalette(theColor));; 9874 g->TAttFill::Modify();; 9875 g->Paint(""F"");; 9876 }; 9877 }; 9878 }; 9879 if (Hoption.Zscale) PaintPalette();;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:354707,Test,TestBit,354707,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability,"8 std::copy( fDataPtr, fDataPtr + fNPoints, fData.begin() );; 759 fDataPtr = fData.empty() ? nullptr : &fData.front();; 760 ; 761 for ( unsigned int i=0; i < fDim; i++ ); 762 {; 763 assert( fCoordErrorsPtr[i] );; 764 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 765 }; 766 ; 767 if( kValueError == fErrorType || kCoordError == fErrorType ); 768 {; 769 assert( fDataError.empty() );; 770 assert( fDataErrorPtr );; 771 ; 772 fDataError.resize(fNPoints + vectorPadding);; 773 std::copy(fDataErrorPtr, fDataErrorPtr + fNPoints + vectorPadding, fDataError.begin());; 774 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 775 }; 776 ; 777 if ( kValueError == fErrorType ); 778 {; 779 for ( unsigned int i=0; i < fNPoints; i++ ); 780 {; 781 fDataError[i] = 1.0 / fDataError[i];; 782 }; 783 }; 784 ; 785 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 786 {; 787 fCoordErrors.resize( fDim );; 788 for( unsigned int i=0; i < fDim; i++ ); 789 {; 790 assert( fCoordErrorsPtr[i] );; 791 fCoordErrors[i].resize(fNPoints + vectorPadding);; 792 std::copy(fCoordErrorsPtr[i], fCoordErrorsPtr[i] + fNPoints + vectorPadding, fCoordErrors[i].begin());; 793 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 794 }; 795 ; 796 if( kAsymError == fErrorType ); 797 {; 798 assert( fDataErrorHigh.empty() );; 799 assert( fDataErrorLow.empty() );; 800 assert( fDataErrorHighPtr && fDataErrorLowPtr );; 801 ; 802 fDataErrorHigh.resize(fNPoints + vectorPadding);; 803 fDataErrorLow.resize(fNPoints + vectorPadding);; 804 std::copy(fDataErrorHighPtr, fDataErrorHighPtr + fNPoints + vectorPadding, fDataErrorHigh.begin());; 805 std::copy(fDataErrorLowPtr, fDataErrorLowPtr + fNPoints + vectorPadding, fDataErrorLow.begin());; 806 fDataErrorHighPtr = fDataErrorHigh.empty() ? nullptr : &fDataErrorHigh.front();; 807 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 808 }; 809 }; 810 ; 811 FitData::U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:24160,assert,assert,24160,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"8 xb = (3*dx-(co+a)*t)/tsquare;; 5209 ya = (b*t-2*dy)/tcube;; 5210 yb = (3*dy-(so+b)*t)/tsquare;; 5211 ; 5212 // If the curve is close to a straight line then use a straight; 5213 // line between (xo,yo) and (xt,yt).; 5214 ; 5215 if (.75*TMath::Max(TMath::Abs(dx*so-dy*co),TMath::Abs(dx*st-dy*ct)) <= delta) {; 5216 finished = -1;; 5217 xt += dx;; 5218 yt += dy;; 5219 goto L300;; 5220 }; 5221 ; 5222 // Calculate a set of values 0 == t(0).LTCT(1) < ... < t(M)=TC; 5223 // such that polygonal arc joining X(t(J)),Y(t(J)) (J=0,1,..M); 5224 // is within the required accuracy of the curve; 5225 ; 5226 tj = 0;; 5227 u1 = ya*xb-yb*xa;; 5228 u2 = yb*co-xb*so;; 5229 u3 = so*xa-ya*co;; 5230 ; 5231 // Given t(J), calculate t(J+1). The values of X(t(J)),; 5232 // Y(t(J)) t(J) are contained in xt,yt and tj respectively.; 5233 ; 5234L180:; 5235 s = t - tj;; 5236 iw = -2;; 5237 ; 5238 // Define iw here later.; 5239 ; 5240 p1 = (2*u1)*tj-u3;; 5241 p2 = (u1*tj-u3)*3*tj+u2;; 5242 p3 = 3*tj*ya+yb;; 5243 p4 = (p3+yb)*tj+so;; 5244 p5 = 3*tj*xa+xb;; 5245 p6 = (p5+xb)*tj+co;; 5246 ; 5247 // Test D(tj,THETA). A is set to (Y(tj+s)-Y(tj))/s.b is; 5248 // set to (X(tj+s)-X(tj))/s.; 5249 ; 5250 cc = 0.8209285;; 5251 err = 0.1209835;; 5252L190:; 5253 iw -= 2;; 5254L200:; 5255 a = (s*ya+p3)*s+p4;; 5256 b = (s*xa+p5)*s+p6;; 5257 ; 5258 // Set z to PSI(D/delta)-cc.; 5259 ; 5260 w1 = -s*(s*u1+p1);; 5261 w2 = s*s*u1-p2;; 5262 w3 = 1.5*w1+w2;; 5263 ; 5264 // Set the estimate of (THETA-tj)/s.Then set the numerator; 5265 // of the expression (EQUATION 4.4)/s. Then set the square; 5266 // of D(tj,tj+s)/delta. Then replace z by PSI(D/delta)-cc.; 5267 ; 5268 if (w3 > 0) wsign = TMath::Abs(w1);; 5269 else wsign = -TMath::Abs(w1);; 5270 sth = 0.5+wsign/(3.4*TMath::Abs(w1)+5.2*TMath::Abs(w3));; 5271 z = s*sth*(s-s*sth)*(w1*sth+w1+w2);; 5272 z = z*z/((a*a+b*b)*(delta*delta));; 5273 z = (z+2.642937)*z/((.3715652*z+3.063444)*z+.2441889)-cc;; 5274 ; 5275 // Branch if z has been calculated; 5276 ; 5277 if (iw > 0) got",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:182210,Test,Test,182210,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['Test'],['Test']
Testability,"8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the generic Echo(); that works with TObjects. Returns -1 on error, the number of workers that; received the message on success. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = -1, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoMoreParallel(Int_t nWorkersToAdd); Add nWorkersToAdd workers to current list of workers. Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:67089,log,logging,67089,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['log'],['logging']
Testability,"8);; 8318 }; 8319 if (ndivz < 0) {; 8320 ndivz = TMath::Abs(ndivz);; 8321 strlcat(chopaz, ""N"",8);; 8322 }; 8323 ; 8324 // Set Axis attributes.; 8325 // The variable SCALE rescales the VSIZ; 8326 // in order to have the same label size for all angles.; 8327 ; 8328 axis->SetLineWidth(1);; 8329 ; 8330 // X axis drawing; 8331 if (TMath::Abs(x1[0] - x2[0]) >= epsil || TMath::Abs(x1[1] - x2[1]) > epsil) {; 8332 axis->ImportAxisAttributes(fXaxis);; 8333 axis->SetLabelOffset(fXaxis->GetLabelOffset()+fXaxis->GetTickLength());; 8334 if (Hoption.Logx && !fH->InheritsFrom(TH3::Class())) {; 8335 bmin = TMath::Power(10, rmin[0]);; 8336 bmax = TMath::Power(10, rmax[0]);; 8337 } else {; 8338 bmin = rmin[0];; 8339 bmax = rmax[0];; 8340 }; 8341 // Option time display is required ?; 8342 if (fXaxis->GetTimeDisplay()) {; 8343 strlcat(chopax,""t"",8);; 8344 if (strlen(fXaxis->GetTimeFormatOnly()) == 0) {; 8345 axis->SetTimeFormat(fXaxis->ChooseTimeFormat(bmax-bmin));; 8346 } else {; 8347 axis->SetTimeFormat(fXaxis->GetTimeFormat());; 8348 }; 8349 }; 8350 axis->SetOption(chopax);; 8351 axis->PaintAxis(x1[0], x1[1], x2[0], x2[1], bmin, bmax, ndivx, chopax);; 8352 }; 8353 ; 8354 // Y axis drawing; 8355 if (TMath::Abs(y1[0] - y2[0]) >= epsil || TMath::Abs(y1[1] - y2[1]) > epsil) {; 8356 axis->ImportAxisAttributes(fYaxis);; 8357 axis->SetLabelOffset(fYaxis->GetLabelOffset()+fYaxis->GetTickLength());; 8358 if (fYaxis->GetTitleOffset() == 0) axis->SetTitleOffset(1.5);; 8359 ; 8360 if (fH->GetDimension() < 2) {; 8361 strlcpy(chopay, ""V=+UN"",8);; 8362 ndivy = 0;; 8363 }; 8364 if (TMath::Abs(y1[0] - y2[0]) < epsil) {; 8365 y2[0] = y1[0];; 8366 }; 8367 if (Hoption.Logy && !fH->InheritsFrom(TH3::Class())) {; 8368 bmin = TMath::Power(10, rmin[1]);; 8369 bmax = TMath::Power(10, rmax[1]);; 8370 } else {; 8371 bmin = rmin[1];; 8372 bmax = rmax[1];; 8373 }; 8374 // Option time display is required ?; 8375 if (fYaxis->GetTimeDisplay()) {; 8376 strlcat(chopay,""t"",8);; 8377 if (strlen(fYaxis->GetTimeFormatOnl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:298688,Log,Logx,298688,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability,8.7 1; : 758 | 16.7051 19.8344 0.0200284 0.00174826 43763.4 2; : 759 | 16.2032 19.717 0.0200656 0.00175048 43679.7 3; : 760 | 16.1221 19.4686 0.0200628 0.00175006 43685.5 4; : 761 Minimum Test error found - save the configuration ; : 761 | 15.7828 18.8348 0.0201031 0.00181849 43752.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Minimum Test error found - save the configuration ; : 764 | 15.3977 18.5678 0.0201039 0.0018081 43725.8 0; : 765 | 15.238 19.0685 0.0200523 0.00175459 43721.4 1; : 766 Minimum Test error found - save the configuration ; : 766 | 14.9634 18.5633 0.0200937 0.00181207 43759.7 0; : 767 Minimum Test error found - save the configuration ; : 767 | 14.6611 18.2211 0.0200896 0.00180918 43762.7 0; : 768 Minimum Test error found - save the configuration ; : 768 | 14.4892 18.1817 0.0200772 0.00181141 43797.6 0; : 769 Minimum Test error found - save the configuration ; : 769 | 14.3366 17.8635 0.0200909 0.00180773 43756.2 0; : 770 Minimum Test error found - save the configuration ; : 770 | 14.5733 17.5465 0.0200968 0.00180191 43728 0; : 771 | 13.9827 17.8429 0.0200367 0.0017469 43740.1 1; : 772 Minimum Test error found - save the configuration ; : 772 | 14.2497 17.3556 0.0201068 0.00181254 43729.6 0; : 773 | 14.0413 17.7428 0.020033 0.00175319 43764.2 1; : 774 Minimum Test error found - save the configuration ; : 774 | 13.9671 16.982 0.020108 0.00180715 43713.8 0; : 775 | 13.7965 17.224 0.0200334 0.0017548 43767 1; : 776 | 13.601 17.9652 0.0200139 0.00175385 43811.5 2; : 777 | 14.0445 17.0226 0.0200253 0.00175316 43782.5 3; : 778 Minimum Test error found - save the configuration ; : 778 | 13.4936 16.5395 0.0200845 0.00181482 43788.4 0; : 779 | 13.0033 16.7495 0.0200505 0.00176209 43743.6 1; : 780 | 12.772 17.4981 0.0200745 0.00176104 43683.8 2; : 781 Minimum Test error found - save the configuration ; : 781 | 12.7689 16.2598 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:95699,Test,Test,95699,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"8//==============================================================================; 579// Operators; 580//==============================================================================; 581template <class T, unsigned int D>; 582inline const T& SVector<T,D>::operator[](unsigned int i) const { return fArray[i]; }; 583 ; 584template <class T, unsigned int D>; 585inline const T& SVector<T,D>::operator()(unsigned int i) const { return fArray[i]; }; 586 ; 587template <class T, unsigned int D>; 588inline T& SVector<T,D>::operator[](unsigned int i) { return fArray[i]; }; 589 ; 590template <class T, unsigned int D>; 591inline T& SVector<T,D>::operator()(unsigned int i) { return fArray[i]; }; 592//==============================================================================; 593// Element access with At(); 594//==============================================================================; 595template <class T, unsigned int D>; 596inline const T& SVector<T,D>::At(unsigned int i) const {; 597 assert(i < D);; 598 return fArray[i];; 599}; 600 ; 601template <class T, unsigned int D>; 602inline T& SVector<T,D>::At(unsigned int i) {; 603 assert(i < D);; 604 return fArray[i];; 605}; 606 ; 607//==============================================================================; 608// SubVector; 609//==============================================================================; 610template <class T, unsigned int D>; 611template <class SubVector>; 612SubVector SVector<T,D>::Sub(unsigned int row) const {; 613 ; 614 STATIC_CHECK( SubVector::kSize <= D,SVector_dimension_too_small);; 615 ; 616 assert(row + SubVector::kSize <= D);; 617 ; 618 SubVector tmp;; 619 // need to use std::copy ??; 620 for(unsigned int i=0; i < SubVector::kSize; ++i) {; 621 tmp[i] = fArray[i+row];; 622 }; 623 return tmp;; 624}; 625 ; 626// check if the given passed pointer is the same contained in the vector; 627template <class T, unsigned int D>; 628bool SVector<T,D>::IsInUse( const T * p) const {; 629 return p == fArra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SVector_8icc_source.html:19597,assert,assert,19597,doc/master/SVector_8icc_source.html,https://root.cern,https://root.cern/doc/master/SVector_8icc_source.html,1,['assert'],['assert']
Testability,"807/// more details.; 2808///; 2809/// Note: If the histograms are filled with weights, only bayesian methods and the; 2810/// normal approximation are supported.; 2811 ; 2812Double_t TEfficiency::GetEfficiencyErrorUp(Int_t bin) const; 2813{; 2814 Double_t total = fTotalHistogram->GetBinContent(bin);; 2815 Double_t passed = fPassedHistogram->GetBinContent(bin);; 2816 ; 2817 Double_t eff = GetEfficiency(bin);; 2818 ; 2819 // check whether weights have been used; 2820 if(TestBit(kUseWeights)); 2821 {; 2822 Double_t tw = fTotalHistogram->GetBinContent(bin);; 2823 Double_t tw2 = fTotalHistogram->GetSumw2()->At(bin);; 2824 Double_t pw = fPassedHistogram->GetBinContent(bin);; 2825 Double_t pw2 = fPassedHistogram->GetSumw2()->At(bin);; 2826 ; 2827 if(TestBit(kIsBayesian)); 2828 {; 2829 Double_t alpha = TestBit(kUseBinPrior) ? GetBetaAlpha(bin) : GetBetaAlpha();; 2830 Double_t beta = TestBit(kUseBinPrior) ? GetBetaBeta(bin) : GetBetaBeta();; 2831 ; 2832 if (tw2 <= 0) return 0;; 2833 ; 2834 // tw/tw2 renormalize the weights; 2835 Double_t norm = tw/tw2;; 2836 Double_t aa = pw * norm + alpha;; 2837 Double_t bb = (tw - pw) * norm + beta;; 2838 Double_t low = 0;; 2839 Double_t upper = 1;; 2840 if(TestBit(kShortestInterval)) {; 2841 TEfficiency::BetaShortestInterval(fConfLevel,aa,bb,low,upper);; 2842 }; 2843 else {; 2844 upper = TEfficiency::BetaCentralInterval(fConfLevel,aa,bb,true);; 2845 }; 2846 ; 2847 return upper - eff;; 2848 }; 2849 else; 2850 {; 2851 if(fStatisticOption != kFNormal); 2852 {; 2853 Warning(""GetEfficiencyErrorUp"",""frequentist confidence intervals for weights are only supported by the normal approximation"");; 2854 Info(""GetEfficiencyErrorUp"",""setting statistic option to kFNormal"");; 2855 const_cast<TEfficiency*>(this)->SetStatisticOption(kFNormal);; 2856 }; 2857 ; 2858 Double_t variance = ( pw2 * (1. - 2 * eff) + tw2 * eff *eff ) / ( tw * tw) ;; 2859 Double_t sigma = sqrt(variance);; 2860 ; 2861 Double_t prob = 0.5 * (1.- fConfLevel);; 2862 Double_t delta = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:113123,Test,TestBit,113123,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,5,['Test'],['TestBit']
Testability,80; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 770; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 760; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-915.472) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.807508 a1=-0.34963 mean=5.09438 nbkg=142.436 nsig=172.312 sig1frac=0.886183; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 750; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-885.867) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.7962 a1=-0.414289 mean=5.07605 nbkg=135.514 nsig=167.164 sig1frac=0.927781; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-848.597) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.577138 a1=-0.518554 mean=5.09299 nbkg=144.203 nsig=156.938 sig1frac=0.54541; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 740; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 730; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 720; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 710; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 700; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-814.549) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.848973 a1=-0.489149 mean=5.08811 nbkg=132.911 nsig=150.647 sig1frac=0.826731; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 690; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 680; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 670; RooAbsMinimizerFcn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:14447,log,log,14447,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability,"80}; 581 ; 582////////////////////////////////////////////////////////////////////////////////; 583/// print characteristics of this material; 584 ; 585void TGeoMaterial::Print(const Option_t * /*option*/) const; 586{; 587 printf(""Material %s %s A=%g Z=%g rho=%g radlen=%g intlen=%g index=%i\n"", GetName(), GetTitle(), fA, fZ, fDensity,; 588 fRadLen, fIntLen, fIndex);; 589}; 590 ; 591////////////////////////////////////////////////////////////////////////////////; 592/// Save a primitive as a C++ statement(s) on output stream ""out"".; 593 ; 594void TGeoMaterial::SavePrimitive(std::ostream &out, Option_t * /*option*/ /*= """"*/); 595{; 596 if (TestBit(TGeoMaterial::kMatSavePrimitive)); 597 return;; 598 const char *name = GetPointerName();; 599 out << ""// Material: "" << GetName() << std::endl;; 600 out << "" a = "" << fA << "";"" << std::endl;; 601 out << "" z = "" << fZ << "";"" << std::endl;; 602 out << "" density = "" << fDensity << "";"" << std::endl;; 603 out << "" radl = "" << fRadLen << "";"" << std::endl;; 604 out << "" absl = "" << fIntLen << "";"" << std::endl;; 605 ; 606 out << "" auto "" << name << "" = new TGeoMaterial(\"""" << GetName() << ""\"", a, z, density, radl, absl);"" << std::endl;; 607 out << "" "" << name << ""->SetIndex("" << GetIndex() << "");"" << std::endl;; 608 SetBit(TGeoMaterial::kMatSavePrimitive);; 609}; 610 ; 611////////////////////////////////////////////////////////////////////////////////; 612/// Get some default color related to this material.; 613 ; 614Int_t TGeoMaterial::GetDefaultColor() const; 615{; 616 Int_t id = 1 + gGeoManager->GetListOfMaterials()->IndexOf(this);; 617 return (2 + id % 6);; 618}; 619 ; 620////////////////////////////////////////////////////////////////////////////////; 621/// Get a pointer to the element this material is made of.; 622/// This second call is to avoid warnings to not call a virtual; 623/// method from the constructor; 624 ; 625TGeoElement *TGeoMaterial::GetElement() const; 626{; 627 if (fElement); 628 return fElement;; 629 TGeoEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html:20333,Test,TestBit,20333,doc/master/TGeoMaterial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html,1,['Test'],['TestBit']
Testability,"81/// observables. If no direct generator method is provided, this information; 3382/// will assist the accept/reject generator to operate more efficiently as; 3383/// it can skip the initial trial sampling phase to empirically find the function; 3384/// maximum; 3385 ; 3386Int_t RooAbsReal::getMaxVal(const RooArgSet& /*vars*/) const; 3387{; 3388 return 0 ;; 3389}; 3390 ; 3391 ; 3392 ; 3393////////////////////////////////////////////////////////////////////////////////; 3394/// Return maximum value for set of observables identified by code assigned; 3395/// in getMaxVal; 3396 ; 3397double RooAbsReal::maxVal(Int_t /*code*/) const; 3398{; 3399 assert(1) ;; 3400 return 0 ;; 3401}; 3402 ; 3403 ; 3404 ; 3405////////////////////////////////////////////////////////////////////////////////; 3406/// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.; 3407 ; 3408void RooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString); 3409{; 3410 if (evalErrorData().mode == Ignore) {; 3411 return ;; 3412 }; 3413 ; 3414 if (evalErrorData().mode == CountErrors) {; 3415 evalErrorData().count++ ;; 3416 return ;; 3417 }; 3418 ; 3419 static bool inLogEvalError = false ;; 3420 ; 3421 if (inLogEvalError) {; 3422 return ;; 3423 }; 3424 inLogEvalError = true ;; 3425 ; 3426 EvalError ee ;; 3427 ee.setMessage(message) ;; 3428 ; 3429 if (serverValueString) {; 3430 ee.setServerValues(serverValueString) ;; 3431 }; 3432 ; 3433 if (evalErrorData().mode == PrintErrors) {; 3434 oocoutE(nullptr,Eval) << ""RooAbsReal::logEvalError("" << ""<STATIC>"" << "") evaluation error, "" << std::endl; 3435 << "" origin : "" << origName << std::endl; 3436 << "" message : "" << ee._msg << std::endl; 3437 << "" server values: "" << ee._srvval << std::endl ;; 3438 } else if (evalErrorData().mode == CollectErrors) {; 3439 auto &evalErrorList = evalErrorData().errorList[originator];; 3440 evalErrorList.first",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:146368,log,logEvalError,146368,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logEvalError']
Testability,"810 }; 3811 result = ExecAndReport(relink_cmd);; 3812 }; 3813 ; 3814 TNamed *k = new TNamed(library,library);; 3815 Long_t lib_time;; 3816 gSystem->GetPathInfo( library, nullptr, (Long_t*)nullptr, nullptr, &lib_time );; 3817 k->SetUniqueID(lib_time);; 3818 if (!keep) k->SetBit(kMustCleanup);; 3819 fCompiled->Add(k);; 3820 ; 3821 if (needLoadMap) {; 3822 gInterpreter->LoadLibraryMap(libmapfilename);; 3823 }; 3824 if (verboseLevel>3 && withInfo) ::Info(""ACLiC"",""loading the shared library"");; 3825 if (loadLib); 3826 result = LoadLibrary(library);; 3827 else; 3828 result = kTRUE;; 3829 ; 3830 if ( !result ) {; 3831 if (verboseLevel>3 && withInfo) {; 3832 ::Info(""ACLiC"",""testing for missing symbols:"");; 3833 if (verboseLevel>4) ::Info(""ACLiC"", ""%s"", testcmd.Data());; 3834 }; 3835 gSystem->Exec(testcmd);; 3836 gSystem->Unlink( exec );; 3837 }; 3838 ; 3839 };; 3840 ; 3841 if (verboseLevel<=5 && !internalDebug) {; 3842 gSystem->Unlink( dict );; 3843 gSystem->Unlink( dicth );; 3844 gSystem->Unlink( dictObj );; 3845 gSystem->Unlink( linkdef );; 3846 gSystem->Unlink( mapfilein );; 3847 gSystem->Unlink( mapfileout );; 3848 gSystem->Unlink( fakeMain );; 3849 gSystem->Unlink( exec );; 3850 }; 3851 if (verboseLevel>6) {; 3852 rcling.Prepend(""echo "");; 3853 cmd.Prepend(""echo \"" "").Append("" \"" "");; 3854 testcmd.Prepend(""echo \"" "").Append("" \"" "");; 3855 gSystem->Exec(rcling);; 3856 gSystem->Exec( cmd );; 3857 gSystem->Exec(testcmd);; 3858 }; 3859 ; 3860 return result;; 3861}; 3862 ; 3863////////////////////////////////////////////////////////////////////////////////; 3864/// Return the ACLiC properties field. See EAclicProperties for details; 3865/// on the semantic of each bit.; 3866 ; 3867Int_t TSystem::GetAclicProperties() const; 3868{; 3869 return fAclicProperties;; 3870}; 3871 ; 3872////////////////////////////////////////////////////////////////////////////////; 3873/// Return the build architecture.; 3874 ; 3875const char *TSystem::GetBuildArch() const; 3876{; 3877 return fBuil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:130396,test,testcmd,130396,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['testcmd']
Testability,"81296500E+1};; 436 static double a1[4] = { 0, -0.4583333333E+0, 0.6675347222E+0,; 437 -0.1641741416E+1};; 438 static double a2[5] = { 0, -0.1958333333E+1, 0.5563368056E+1,; 439 -0.2111352961E+2, 0.1006946266E+3};; 440 ; 441 double v = (x-x0)/xi;; 442 double xm1lan;; 443 if (v < -4.5); 444 {; 445 double u = std::exp(v+1);; 446 xm1lan = v-u*(1+(a2[1]+(a2[2]+(a2[3]+a2[4]*u)*u)*u)*u)/; 447 (1+(a1[1]+(a1[2]+a1[3]*u)*u)*u);; 448 }; 449 else if (v < -2); 450 {; 451 xm1lan = (p1[0]+(p1[1]+(p1[2]+(p1[3]+p1[4]*v)*v)*v)*v)/; 452 (q1[0]+(q1[1]+(q1[2]+(q1[3]+q1[4]*v)*v)*v)*v);; 453 }; 454 else if (v < 2); 455 {; 456 xm1lan = (p2[0]+(p2[1]+(p2[2]+(p2[3]+p2[4]*v)*v)*v)*v)/; 457 (q2[0]+(q2[1]+(q2[2]+(q2[3]+q2[4]*v)*v)*v)*v);; 458 }; 459 else if (v < 10); 460 {; 461 xm1lan = (p3[0]+(p3[1]+(p3[2]+(p3[3]+p3[4]*v)*v)*v)*v)/; 462 (q3[0]+(q3[1]+(q3[2]+(q3[3]+q3[4]*v)*v)*v)*v);; 463 }; 464 else if (v < 40); 465 {; 466 double u = 1/v;; 467 xm1lan = std::log(v)*(p4[0]+(p4[1]+(p4[2]+p4[3]*u)*u)*u)/; 468 (q4[0]+(q4[1]+(q4[2]+q4[3]*u)*u)*u);; 469 }; 470 else if (v < 200); 471 {; 472 double u = 1/v;; 473 xm1lan = std::log(v)*(p5[0]+(p5[1]+(p5[2]+p5[3]*u)*u)*u)/; 474 (q5[0]+(q5[1]+(q5[2]+q5[3]*u)*u)*u);; 475 }; 476 else; 477 {; 478 double u = v-v*std::log(v)/(v+1);; 479 v = 1/(u-u*(u+ std::log(u)-v)/(u+1));; 480 u = -std::log(v);; 481 xm1lan = (u+a0[0]+(-u+a0[1]+(a0[2]*u+a0[3]+(a0[4]*u+a0[5])*v)*v)*v)/; 482 (1-(1-(a0[2]+a0[4]*v)*v)*v);; 483 }; 484 return xm1lan*xi + x0;; 485 }; 486 ; 487 ; 488 ; 489 double landau_xm2(double x, double xi, double x0); 490 {; 491 // implementation of second momentum of Landau distribution; 492 // translated from Cernlib (XM2LAN function) by Benno List; 493 ; 494 static double p1[5] = { 0.1169837582E+1,-0.4834874539E+0, 0.4383774644E+0,; 495 0.3287175228E-2, 0.1879129206E-1};; 496 static double q1[5] = { 1.0 , 0.1795154326E+0, 0.4612795899E-1,; 497 0.2183459337E-2, 0.7226623623E-4};; 498 static double p2[5] = { 0.1157939823E+1,-0.3842809495E+0, 0.3317532899E+0,; 499",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:15554,log,log,15554,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,5,['log'],['log']
Testability,"816 fGeoManager->DoRestoreState();; 1817 fGeoManager->SetOutside(outside);; 1818 fGeoManager->SetCurrentPoint(cop);; 1819 fGeoManager->SetCurrentDirection(dir);; 1820 // fGeoManager->InitTrack(cop,dir);; 1821 // current ray pointing to pixel (px,py); 1822 done = kFALSE;; 1823 norm = nullptr;; 1824 // propagate to the clipping shape if any; 1825 if (fClippingShape) {; 1826 if (inclip) {; 1827 stemin = fClippingShape->DistFromInside(cop, dir, 3);; 1828 stemax = TGeoShape::Big();; 1829 } else {; 1830 stemax = fClippingShape->DistFromOutside(cop, dir, 3);; 1831 stemin = 0;; 1832 }; 1833 }; 1834 ; 1835 while (!done) {; 1836 if (fClippingShape) {; 1837 if (stemin > 1E10); 1838 break;; 1839 if (stemin > 0) {; 1840 // we are inside clipping shape; 1841 fGeoManager->SetStep(stemin);; 1842 next = fGeoManager->Step();; 1843 steptot = 0;; 1844 stemin = 0;; 1845 up = 0;; 1846 while (next) {; 1847 // we found something after clipping region; 1848 nextvol = next->GetVolume();; 1849 if (nextvol->TestAttBit(TGeoAtt::kVisOnScreen)) {; 1850 done = kTRUE;; 1851 base_color = nextvol->GetLineColor();; 1852 fClippingShape->ComputeNormal(ppoint, dir, normal);; 1853 norm = normal;; 1854 break;; 1855 }; 1856 up++;; 1857 next = fGeoManager->GetMother(up);; 1858 }; 1859 if (done); 1860 break;; 1861 inclip = fClippingShape->Contains(ppoint);; 1862 fGeoManager->SetStep(1E-3);; 1863 while (inclip) {; 1864 fGeoManager->Step();; 1865 inclip = fClippingShape->Contains(ppoint);; 1866 }; 1867 stemax = fClippingShape->DistFromOutside(ppoint, dir, 3);; 1868 }; 1869 }; 1870 nextnode = fGeoManager->FindNextBoundaryAndStep();; 1871 step = fGeoManager->GetStep();; 1872 if (step > 1E10); 1873 break;; 1874 steptot += step;; 1875 next = nextnode;; 1876 // Check the step; 1877 if (fClippingShape) {; 1878 if (steptot > stemax) {; 1879 steptot = 0;; 1880 inclip = fClippingShape->Contains(ppoint);; 1881 if (inclip) {; 1882 stemin = fClippingShape->DistFromInside(ppoint, dir, 3);; 1883 stemax = TGeoShape::Big();; 18",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:60552,Test,TestAttBit,60552,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Test'],['TestAttBit']
Testability,"82 line[kvalue+i] = 0;; 683 } else {; 684 line[kvalue] = 0;; 685 }; 686 } else {; 687 strncpy(&line[kvalue], membertype->AsString(p3pointer), TMath::Min(kline-1-kvalue,(int)strlen(membertype->AsString(p3pointer))));; 688 }; 689 } else if (!strcmp(memberFullTypeName, ""char*"") ||; 690 !strcmp(memberFullTypeName, ""const char*"")) {; 691 i = strlen(*ppointer);; 692 if (kvalue+i >= kline) i=kline-1-kvalue;; 693 Bool_t isPrintable = kTRUE;; 694 for (Int_t j = 0; j < i; j++) {; 695 if (!std::isprint((*ppointer)[j])) {; 696 isPrintable = kFALSE;; 697 break;; 698 }; 699 }; 700 if (isPrintable) {; 701 strncpy(line + kvalue, *ppointer, std::min( i, kline - kvalue));; 702 line[kvalue+i] = 0;; 703 } else {; 704 line[kvalue] = 0;; 705 }; 706 } else {; 707 if (!fNoAddr) {; 708 snprintf(&line[kvalue],kline-kvalue,""->%zx "", (size_t)p3pointer);; 709 }; 710 }; 711 } else if (membertype) {; 712 if (isdate) {; 713 cdatime = (UInt_t*)pointer;; 714 TDatime::GetDateTime(cdatime[0],cdate,ctime);; 715 snprintf(&line[kvalue],kline-kvalue,""%d/%d"",cdate,ctime);; 716 } else if (isbits) {; 717 snprintf(&line[kvalue],kline-kvalue,""0x%08x"", *(UInt_t*)pointer);; 718 } else {; 719 strncpy(&line[kvalue], membertype->AsString(pointer), TMath::Min(kline-1-kvalue,(int)strlen(membertype->AsString(pointer))));; 720 }; 721 } else {; 722 if (isStdString) {; 723 std::string *str = (std::string*)pointer;; 724 snprintf(&line[kvalue],kline-kvalue,""%s"",str->c_str());; 725 } else if (isTString) {; 726 TString *str = (TString*)pointer;; 727 snprintf(&line[kvalue],kline-kvalue,""%s"",str->Data());; 728 } else {; 729 if (!fNoAddr) {; 730 snprintf(&line[kvalue],kline-kvalue,""->%zx "", (size_t)pointer);; 731 }; 732 }; 733 }; 734 // Encode data member title; 735 if (isdate == kFALSE && strcmp(memberFullTypeName, ""char*"") && strcmp(memberFullTypeName, ""const char*"")) {; 736 i = strlen(&line[0]); line[i] = ' ';; 737 assert(250 > ktitle);; 738 strlcpy(&line[ktitle],memberTitle,250-ktitle+1); // strlcpy copy 'size-1' characters.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:25440,assert,assert,25440,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['assert'],['assert']
Testability,"820; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:183220,Test,TestBit,183220,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['Test'],['TestBit']
Testability,82242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test error found - save the configuration ; : 800 | 10.3317 14.1583 0.0201165 0.00182126 43727.2 0; : 801 | 10.3503 14.2866 0.0200523 0.00175781 43729 1; : 802 | 10.3453 15.2815 0.0200406 0.00175563 43751.8 2; : 803 | 10.2123 14.6873 0.0200478 0.00175638 43736.3 3; : 804 | 10.1133 14.2109 0.0201368 0.00176313 43540.5 4; : 805 Minimum Test error found - save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:98904,Test,Test,98904,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"824 return fShape->IsAssembly();; 1825}; 1826 ; 1827////////////////////////////////////////////////////////////////////////////////; 1828/// Clone this volume.; 1829/// build a volume with same name, shape and medium; 1830 ; 1831TGeoVolume *TGeoVolume::CloneVolume() const; 1832{; 1833 TGeoVolume *vol = new TGeoVolume(GetName(), fShape, fMedium);; 1834 Int_t i;; 1835 // copy volume attributes; 1836 vol->SetTitle(GetTitle());; 1837 vol->SetLineColor(GetLineColor());; 1838 vol->SetLineStyle(GetLineStyle());; 1839 vol->SetLineWidth(GetLineWidth());; 1840 vol->SetFillColor(GetFillColor());; 1841 vol->SetFillStyle(GetFillStyle());; 1842 // copy other attributes; 1843 Int_t nbits = 8 * sizeof(UInt_t);; 1844 for (i = 0; i < nbits; i++); 1845 vol->SetAttBit(1 << i, TGeoAtt::TestAttBit(1 << i));; 1846 for (i = 14; i < 24; i++); 1847 vol->SetBit(1 << i, TestBit(1 << i));; 1848 ; 1849 // copy field; 1850 vol->SetField(fField);; 1851 // Set bits; 1852 for (i = 0; i < nbits; i++); 1853 vol->SetBit(1 << i, TObject::TestBit(1 << i));; 1854 vol->SetBit(kVolumeClone);; 1855 // copy nodes; 1856 // CloneNodesAndConnect(vol);; 1857 vol->MakeCopyNodes(this);; 1858 // if volume is divided, copy finder; 1859 vol->SetFinder(fFinder);; 1860 // copy voxels; 1861 TGeoVoxelFinder *voxels = nullptr;; 1862 if (fVoxels) {; 1863 voxels = new TGeoVoxelFinder(vol);; 1864 vol->SetVoxelFinder(voxels);; 1865 }; 1866 // copy option, uid; 1867 vol->SetOption(fOption);; 1868 vol->SetNumber(fNumber);; 1869 vol->SetNtotal(fNtotal);; 1870 // copy extensions; 1871 vol->SetUserExtension(fUserExtension);; 1872 vol->SetFWExtension(fFWExtension);; 1873 vol->SetOverlappingCandidate(IsOverlappingCandidate());; 1874 return vol;; 1875}; 1876 ; 1877////////////////////////////////////////////////////////////////////////////////; 1878/// Clone the array of nodes.; 1879 ; 1880void TGeoVolume::CloneNodesAndConnect(TGeoVolume *newmother) const; 1881{; 1882 if (!fNodes); 1883 return;; 1884 TGeoNode *node;; 1885 Int_t nd = f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:70240,Test,TestAttBit,70240,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,3,['Test'],"['TestAttBit', 'TestBit']"
Testability,"83 // It visits the AST and marks all classes (in all of their redeclarations); 1884 // with the setHasExternalLexicalStorage method.; 1885 public:; 1886 bool VisitRecordDecl(clang::RecordDecl* rcd){; 1887 if (gDebug > 2); 1888 Info(""ExtLexicalStorageAdder"",; 1889 ""Adding external lexical storage to class %s"",; 1890 rcd->getNameAsString().c_str());; 1891 auto reDeclPtr = rcd->getMostRecentDecl();; 1892 do {; 1893 reDeclPtr->setHasExternalLexicalStorage();; 1894 } while ((reDeclPtr = reDeclPtr->getPreviousDecl()));; 1895 ; 1896 return false;; 1897 }; 1898 };; 1899 ; 1900 ; 1901}; 1902 ; 1903////////////////////////////////////////////////////////////////////////////////; 1904///\returns true if the module map was loaded, false on error or if the map was; 1905/// already loaded.; 1906bool TCling::RegisterPrebuiltModulePath(const std::string &FullPath,; 1907 const std::string &ModuleMapName /*= ""module.modulemap""*/) const; 1908{; 1909 assert(llvm::sys::path::is_absolute(FullPath));; 1910 Preprocessor &PP = fInterpreter->getCI()->getPreprocessor();; 1911 FileManager &FM = PP.getFileManager();; 1912 // FIXME: In a ROOT session we can add an include path (through .I /inc/path); 1913 // We should look for modulemap files there too.; 1914 if (auto DE = FM.getOptionalDirectoryRef(FullPath)) {; 1915 HeaderSearch &HS = PP.getHeaderSearchInfo();; 1916 HeaderSearchOptions &HSOpts = HS.getHeaderSearchOpts();; 1917 const auto &ModPaths = HSOpts.PrebuiltModulePaths;; 1918 bool pathExists = std::find(ModPaths.begin(), ModPaths.end(), FullPath) != ModPaths.end();; 1919 if (!pathExists); 1920 HSOpts.AddPrebuiltModulePath(FullPath);; 1921 // We cannot use HS.lookupModuleMapFile(DE, /*IsFramework*/ false);; 1922 // because its internal call to getFile has CacheFailure set to true.; 1923 // In our case, modulemaps can appear any time due to ACLiC.; 1924 // Code copied from HS.lookupModuleMapFile.; 1925 llvm::SmallString<256> ModuleMapFileName(DE->getName());; 1926 llvm::sys::path::append(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:71921,assert,assert,71921,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability,83.7 0; : 681 Minimum Test error found - save the configuration ; : 681 | 42.0593 35.186 0.0205402 0.00185408 42812.5 0; : 682 Minimum Test error found - save the configuration ; : 682 | 41.3592 34.9319 0.0201181 0.00182063 43721.9 0; : 683 | 40.8775 34.9951 0.020058 0.00175108 43699.3 1; : 684 Minimum Test error found - save the configuration ; : 684 | 40.654 34.3931 0.0201589 0.00183818 43666.4 0; : 685 Minimum Test error found - save the configuration ; : 685 | 40.0613 33.8904 0.0201577 0.00183348 43658.1 0; : 686 | 39.3281 34.3645 0.0200576 0.00176772 43739.9 1; : 687 | 38.8187 34.1117 0.0201676 0.00177122 43486.9 2; : 688 Minimum Test error found - save the configuration ; : 688 | 38.3466 33.422 0.0201552 0.00185044 43704.5 0; : 689 Minimum Test error found - save the configuration ; : 689 | 37.998 33.2339 0.0201139 0.00182328 43738.2 0; : 690 Minimum Test error found - save the configuration ; : 690 | 37.3126 32.8977 0.0200976 0.0018112 43748.3 0; : 691 Minimum Test error found - save the configuration ; : 691 | 36.956 32.4497 0.0202163 0.00185879 43578.8 0; : 692 | 36.3494 32.5119 0.0203375 0.00178876 43129.6 1; : 693 Minimum Test error found - save the configuration ; : 693 | 35.9446 31.7942 0.0202985 0.00181447 43280.7 0; : 694 | 35.3125 31.8389 0.0201438 0.00175333 43500.7 1; : 695 Minimum Test error found - save the configuration ; : 695 | 34.8867 31.3734 0.0201347 0.00182018 43681.2 0; : 696 Minimum Test error found - save the configuration ; : 696 | 34.4357 31.1348 0.0201081 0.00181563 43733.9 0; : 697 Minimum Test error found - save the configuration ; : 697 | 34.0416 30.9812 0.0205543 0.00184744 42765.1 0; : 698 Minimum Test error found - save the configuration ; : 698 | 33.7716 30.3897 0.0201321 0.00181458 43673.9 0; : 699 | 33.1269 30.7769 0.0201928 0.00175872 43397.8 1; : 700 Minimum Test error found - save the configuration ; : 700 | 32.8076 30.1388 0.0201025 0.00181993 43757.5 0; : 701 | 32.6014 30.2991 0.0200398 0.0017563 43755.4 1; : 702 | 32.0,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:88418,Test,Test,88418,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"83; TSystem::CloseConnectionvirtual void CloseConnection(int sock, Bool_t force=kFALSE)Close socket connection.Definition TSystem.cxx:2390; TSystem::GetLibrariesvirtual const char * GetLibraries(const char *regexp="""", const char *option="""", Bool_t isRegexp=kTRUE)Return a space separated list of loaded shared libraries.Definition TSystem.cxx:2136; TSystem::GetListOfSignalHandlersvirtual TSeqCollection * GetListOfSignalHandlers() constDefinition TSystem.h:379; TSystem::fBuildDirTString fBuildDirDefinition TSystem.h:307; TSystem::SetErrorStrvoid SetErrorStr(const char *errstr)Set the system error string.Definition TSystem.cxx:245; TSystem::RemoveSignalHandlervirtual TSignalHandler * RemoveSignalHandler(TSignalHandler *sh)Remove a signal handler from list of signal handlers.Definition TSystem.cxx:542; TSystem::SetSoExtvirtual void SetSoExt(const char *soExt)Set shared library extension, should be either .so, .sl, .a, .dll, etc.Definition TSystem.cxx:4236; TSystem::Closelogvirtual void Closelog()Close connection to system log daemon.Definition TSystem.cxx:1694; TSystem::fBuildCompilerTString fBuildCompilerDefinition TSystem.h:303; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TSystem::GetBuildArchvirtual const char * GetBuildArch() constReturn the build architecture.Definition TSystem.cxx:3875; TSystem::Linkvirtual int Link(const char *from, const char *to)Create a link from file1 to file2.Definition TSystem.cxx:1359; TSystem::SigAlarmInterruptsSyscallsvirtual void SigAlarmInterruptsSyscalls(Bool_t)Definition TSystem.h:330; TSystem::HomeDirectoryvirtual const char * HomeDirectory(const char *userName=nullptr)Return the user's home directory.Definition TSystem.cxx:887; TSystem::SetLinkedLibsvirtual void SetLinkedLibs(const char *linkedLibs)LinkedLibs should contain the library directory and list of libraries needed to recreate the current ...Definition TSystem.cxx:4205; TSystem::GetErrorStrcons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:60548,log,log,60548,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['log'],['log']
Testability,"83}; 1084 ; 1085////////////////////////////////////////////////////////////////////////////////; 1086/// Returns the weighted mean of an array a with length n.; 1087 ; 1088template <typename T>; 1089Double_t TMath::Mean(Long64_t n, const T *a, const Double_t *w); 1090{; 1091 if (w) {; 1092 return TMath::Mean(a, a+n, w);; 1093 } else {; 1094 return TMath::Mean(a, a+n);; 1095 }; 1096}; 1097 ; 1098////////////////////////////////////////////////////////////////////////////////; 1099/// Returns the geometric mean of an array defined by the iterators.; 1100/// \f[ GeomMean = (\prod_{i=0}^{n-1} |a[i]|)^{1/n} \f]; 1101 ; 1102template <typename Iterator>; 1103Double_t TMath::GeomMean(Iterator first, Iterator last); 1104{; 1105 Double_t logsum = 0.;; 1106 Long64_t n = 0;; 1107 while ( first != last ) {; 1108 if (*first == 0) return 0.;; 1109 Double_t absa = (Double_t) TMath::Abs(*first);; 1110 logsum += TMath::Log(absa);; 1111 ++first;; 1112 ++n;; 1113 }; 1114 ; 1115 return TMath::Exp(logsum/n);; 1116}; 1117 ; 1118////////////////////////////////////////////////////////////////////////////////; 1119/// Returns the geometric mean of an array a of size n.; 1120/// \f[ GeomMean = (\prod_{i=0}^{n-1} |a[i]|)^{1/n} \f]; 1121 ; 1122template <typename T>; 1123Double_t TMath::GeomMean(Long64_t n, const T *a); 1124{; 1125 return TMath::GeomMean(a, a+n);; 1126}; 1127 ; 1128////////////////////////////////////////////////////////////////////////////////; 1129/// Returns the Standard Deviation of an array defined by the iterators.; 1130/// Note that this function returns the sigma(standard deviation) and; 1131/// not the root mean square of the array.; 1132///; 1133/// Use the two pass algorithm, which is slower (! a factor of 2) but much more; 1134/// precise. Since we have a vector the 2 pass algorithm is still faster than the; 1135/// Welford algorithm. (See also ROOT-5545); 1136 ; 1137template <typename Iterator>; 1138Double_t TMath::RMS(Iterator first, Iterator last); 1139{; 1140 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:39664,log,logsum,39664,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,3,"['Log', 'log']","['Log', 'logsum']"
Testability,"84 Double_t separation = 0;; 185 Int_t nstep = 100;; 186 Double_t intBin = (xmax - xmin)/Double_t(nstep);; 187 for (Int_t bin=0; bin<nstep; bin++) {; 188 Double_t x = (bin + 0.5)*intBin + xmin;; 189 Double_t s = pdfS.GetVal( x );; 190 Double_t b = pdfB.GetVal( x );; 191 // separation; 192 if (s + b > 0) separation += (s - b)*(s - b)/(s + b);; 193 }; 194 separation *= (0.5*intBin);; 195 ; 196 return separation;; 197}; 198 ; 199////////////////////////////////////////////////////////////////////////////////; 200/// sanity check; 201 ; 202void TMVA::Tools::ComputeStat( const std::vector<TMVA::Event*>& events, std::vector<Float_t>* valVec,; 203 Double_t& meanS, Double_t& meanB,; 204 Double_t& rmsS, Double_t& rmsB,; 205 Double_t& xmin, Double_t& xmax,; 206 Int_t signalClass, Bool_t norm ); 207{; 208 if (0 == valVec); 209 Log() << kFATAL << ""<Tools::ComputeStat> value vector is zero pointer"" << Endl;; 210 ; 211 if ( events.size() != valVec->size() ); 212 Log() << kWARNING << ""<Tools::ComputeStat> event and value vector have different lengths ""; 213 << events.size() << ""!="" << valVec->size() << Endl;; 214 ; 215 Long64_t entries = valVec->size();; 216 ; 217 // first fill signal and background in arrays before analysis; 218 Double_t* varVecS = new Double_t[entries];; 219 Double_t* varVecB = new Double_t[entries];; 220 Double_t* wgtVecS = new Double_t[entries];; 221 Double_t* wgtVecB = new Double_t[entries];; 222 xmin = +DBL_MAX;; 223 xmax = -DBL_MAX;; 224 Long64_t nEventsS = 0;; 225 Long64_t nEventsB = 0;; 226 Double_t xmin_ = 0, xmax_ = 0;; 227 ; 228 if (norm) {; 229 xmin_ = *std::min( valVec->begin(), valVec->end() );; 230 xmax_ = *std::max( valVec->begin(), valVec->end() );; 231 }; 232 ; 233 for (Int_t ievt=0; ievt<entries; ievt++) {; 234 Double_t theVar = (*valVec)[ievt];; 235 if (norm) theVar = Tools::NormVariable( theVar, xmin_, xmax_ );; 236 ; 237 if (Int_t(events[ievt]->GetClass()) == signalClass ){; 238 wgtVecS[nEventsS] = events[ievt]->GetWeight(); // this is signa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:7281,Log,Log,7281,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"84/// \f[; 5585/// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; 5586/// \f]; 5587///; 5588/// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; 5589/// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; 5590/// Let:; 5591/// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; 5592///; 5593/// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; 5594/// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; 5595/// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; 5596/// \f[ fPixeltoX = alfa \f]; 5597///; 5598/// \f[; 5599/// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; 5600/// \f]; 5601/// Let:; 5602/// \f[ beta = Log(\frac{ymax}{ymin}) \f]; 5603/// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; 5604/// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; 5605/// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; 5606/// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; 5607/// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; 5608/// \f[ fPixeltoY = -beta \f]; 5609///; 5610/// #### Conversion from World coordinates to pixel coordinates; 5611///; 5612/// \f[ px = pxlow + u*pxrange \f]; 5613/// \f[ = pxlow + Log(x/xmin)/alfa \f]; 5614/// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; 5615/// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; 5616/// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; 5617/// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; 5618///; 5619/// \f[ py = pylow - Log(y/ymin)/beta \f]; 5620/// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; 5621/// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; 5622/// \f[ fYtoPixel = 1/beta \f]; 5623 ; 5624void TPad::ResizePad(Option_t *option); 5625{; 5626 ; 5627 if (!gPad) {; 5628 Error(""ResizePad"", ""Cannot resize pad.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:181785,Log,Log,181785,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,8,['Log'],['Log']
Testability,"8428////////////////////////////////////////////////////////////////////////////////; 8429/// Return value of contour number level.; 8430/// Use GetContour to return the array of all contour levels; 8431 ; 8432Double_t TH1::GetContourLevel(Int_t level) const; 8433{; 8434 return (level >= 0 && level < fContour.fN) ? fContour.fArray[level] : 0.0;; 8435}; 8436 ; 8437////////////////////////////////////////////////////////////////////////////////; 8438/// Return the value of contour number ""level"" in Pad coordinates.; 8439/// ie: if the Pad is in log scale along Z it returns le log of the contour level; 8440/// value. See GetContour to return the array of all contour levels; 8441 ; 8442Double_t TH1::GetContourLevelPad(Int_t level) const; 8443{; 8444 if (level <0 || level >= fContour.fN) return 0;; 8445 Double_t zlevel = fContour.fArray[level];; 8446 ; 8447 // In case of user defined contours and Pad in log scale along Z,; 8448 // fContour.fArray doesn't contain the log of the contour whereas it does; 8449 // in case of equidistant contours.; 8450 if (gPad && gPad->GetLogz() && TestBit(kUserContour)) {; 8451 if (zlevel <= 0) return 0;; 8452 zlevel = TMath::Log10(zlevel);; 8453 }; 8454 return zlevel;; 8455}; 8456 ; 8457////////////////////////////////////////////////////////////////////////////////; 8458/// Set the maximum number of entries to be kept in the buffer.; 8459 ; 8460void TH1::SetBuffer(Int_t buffersize, Option_t * /*option*/); 8461{; 8462 if (fBuffer) {; 8463 BufferEmpty();; 8464 delete [] fBuffer;; 8465 fBuffer = nullptr;; 8466 }; 8467 if (buffersize <= 0) {; 8468 fBufferSize = 0;; 8469 return;; 8470 }; 8471 if (buffersize < 100) buffersize = 100;; 8472 fBufferSize = 1 + buffersize*(fDimension+1);; 8473 fBuffer = new Double_t[fBufferSize];; 8474 memset(fBuffer, 0, sizeof(Double_t)*fBufferSize);; 8475}; 8476 ; 8477////////////////////////////////////////////////////////////////////////////////; 8478/// Set the number and values of contour levels.; 8479///; 8480",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:331901,log,log,331901,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['log'],['log']
Testability,"844 x[1] = pp[i1][0] + xdel*tt[it][1];; 7845 y[1] = pp[i1][1] + ydel*tt[it][1];; 7846 gPad->PaintPolyLine(2, x, y);; 7847 }; 7848 }; 7849 fLego->FillPolygonBorder(4, &pp[0][0]); // update raster screen; 7850 }; 7851 }; 7852 }; 7853 }; 7854 ; 7855 // Draw frame box; 7856 if (Hoption.BackBox) {; 7857 fLego->DefineGridLevels(fZaxis->GetNdivisions()%100);; 7858 fLego->SetDrawFace(&TPainter3dAlgorithms::DrawFaceRaster1);; 7859 fLego->BackBox(90);; 7860 }; 7861 ; 7862 if (Hoption.FrontBox) fLego->FrontBox(90);; 7863 ; 7864 // Draw axis and title; 7865 if (!Hoption.Axis && !Hoption.Same) {; 7866 TGaxis axis;; 7867 PaintLegoAxis(&axis, 90);; 7868 }; 7869 PaintTitle();; 7870 ; 7871 //Draw stats and fit results; 7872 TF1 *fit = nullptr;; 7873 TIter next(fFunctions);; 7874 while (auto obj = next()) {; 7875 if (obj->InheritsFrom(TF1::Class())) {; 7876 fit = (TF1*)obj;; 7877 break;; 7878 }; 7879 }; 7880 if ((Hoption.Same%10) != 1) {; 7881 if (!fH->TestBit(TH1::kNoStats)) { // bit set via TH1::SetStats; 7882 PaintStat3(gStyle->GetOptStat(),fit);; 7883 }; 7884 }; 7885 ; 7886 fLego.reset();; 7887}; 7888 ; 7889////////////////////////////////////////////////////////////////////////////////; 7890/// [Control function to draw a 3D histogram with Iso Surfaces.](\ref HP25); 7891 ; 7892void THistPainter::PaintH3Iso(); 7893{; 7894 ; 7895 const Double_t ydiff = 1;; 7896 const Double_t yligh1 = 10;; 7897 const Double_t qa = 0.15;; 7898 const Double_t qd = 0.15;; 7899 const Double_t qs = 0.8;; 7900 Double_t fmin, fmax;; 7901 Int_t i, irep;; 7902 Int_t nbcol = 28;; 7903 Int_t icol1 = 201;; 7904 Int_t ic1 = icol1;; 7905 Int_t ic2 = ic1+nbcol;; 7906 Int_t ic3 = ic2+nbcol;; 7907 ; 7908 TAxis *xaxis = fH->GetXaxis();; 7909 TAxis *yaxis = fH->GetYaxis();; 7910 TAxis *zaxis = fH->GetZaxis();; 7911 ; 7912 Int_t nx = fH->GetNbinsX();; 7913 Int_t ny = fH->GetNbinsY();; 7914 Int_t nz = fH->GetNbinsZ();; 7915 ; 7916 std::vector<Double_t> x(nx);; 7917 std::vector<Double_t> y(ny);; 7918 std::vector<Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:283185,Test,TestBit,283185,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability,"844 } else if (iaxis == 2) {; 5845 s[4] = 0; // fTsumwy; 5846 s[5] = 0; // fTsumwy2; 5847 s[6] = 0; // fTsumwxy; 5848 s[10] = 0; // fTsumwyz; 5849 } else if (iaxis == 3) {; 5850 s[7] = 0; // fTsumwz; 5851 s[8] = 0; // fTsumwz2; 5852 s[9] = 0; // fTsumwxz; 5853 s[10] = 0; // fTsumwyz; 5854 }; 5855 PutStats(s);; 5856 }; 5857 delete labold;; 5858}; 5859 ; 5860////////////////////////////////////////////////////////////////////////////////; 5861/// Test if two double are almost equal.; 5862 ; 5863static inline Bool_t AlmostEqual(Double_t a, Double_t b, Double_t epsilon = 0.00000001); 5864{; 5865 return TMath::Abs(a - b) < epsilon;; 5866}; 5867 ; 5868////////////////////////////////////////////////////////////////////////////////; 5869/// Test if a double is almost an integer.; 5870 ; 5871static inline Bool_t AlmostInteger(Double_t a, Double_t epsilon = 0.00000001); 5872{; 5873 return AlmostEqual(a - TMath::Floor(a), 0, epsilon) ||; 5874 AlmostEqual(a - TMath::Floor(a), 1, epsilon);; 5875}; 5876 ; 5877////////////////////////////////////////////////////////////////////////////////; 5878/// Test if the binning is equidistant.; 5879 ; 5880static inline bool IsEquidistantBinning(const TAxis& axis); 5881{; 5882 // check if axis bin are equals; 5883 if (!axis.GetXbins()->fN) return true; //; 5884 // not able to check if there is only one axis entry; 5885 bool isEquidistant = true;; 5886 const Double_t firstBinWidth = axis.GetBinWidth(1);; 5887 for (int i = 1; i < axis.GetNbins(); ++i) {; 5888 const Double_t binWidth = axis.GetBinWidth(i);; 5889 const bool match = TMath::AreEqualRel(firstBinWidth, binWidth, 1.E-10);; 5890 isEquidistant &= match;; 5891 if (!match); 5892 break;; 5893 }; 5894 return isEquidistant;; 5895}; 5896 ; 5897////////////////////////////////////////////////////////////////////////////////; 5898/// Same limits and bins.; 5899 ; 5900Bool_t TH1::SameLimitsAndNBins(const TAxis &axis1, const TAxis &axis2){; 5901 return axis1.GetNbins() == axis2.GetNbins() &&; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:232670,Test,Test,232670,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Test'],['Test']
Testability,"86 ; 1687#define RVEC_ASSIGNMENT_OPERATOR(OP) \; 1688template <typename T0, typename T1> \; 1689RVec<T0>& operator OP(RVec<T0> &v, const T1 &y) \; 1690{ \; 1691 auto op = [&y](T0 &x) { return x OP y; }; \; 1692 std::transform(v.begin(), v.end(), v.begin(), op); \; 1693 return v; \; 1694} \; 1695 \; 1696template <typename T0, typename T1> \; 1697RVec<T0>& operator OP(RVec<T0> &v0, const RVec<T1> &v1) \; 1698{ \; 1699 if (v0.size() != v1.size()) \; 1700 throw std::runtime_error(ERROR_MESSAGE(OP)); \; 1701 \; 1702 auto op = [](T0 &x, const T1 &y) { return x OP y; }; \; 1703 std::transform(v0.begin(), v0.end(), v1.begin(), v0.begin(), op); \; 1704 return v0; \; 1705} \; 1706 ; 1707RVEC_ASSIGNMENT_OPERATOR(+=); 1708RVEC_ASSIGNMENT_OPERATOR(-=); 1709RVEC_ASSIGNMENT_OPERATOR(*=); 1710RVEC_ASSIGNMENT_OPERATOR(/=); 1711RVEC_ASSIGNMENT_OPERATOR(%=); 1712RVEC_ASSIGNMENT_OPERATOR(^=); 1713RVEC_ASSIGNMENT_OPERATOR(|=); 1714RVEC_ASSIGNMENT_OPERATOR(&=); 1715RVEC_ASSIGNMENT_OPERATOR(>>=); 1716RVEC_ASSIGNMENT_OPERATOR(<<=); 1717#undef RVEC_ASSIGNMENT_OPERATOR; 1718 ; 1719///@}; 1720///@name RVec Comparison and Logical Operators; 1721///@{; 1722 ; 1723#define RVEC_LOGICAL_OPERATOR(OP) \; 1724template <typename T0, typename T1> \; 1725auto operator OP(const RVec<T0> &v, const T1 &y) \; 1726 -> RVec<int> /* avoid std::vector<bool> */ \; 1727{ \; 1728 RVec<int> ret(v.size()); \; 1729 auto op = [y](const T0 &x) -> int { return x OP y; }; \; 1730 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1731 return ret; \; 1732} \; 1733 \; 1734template <typename T0, typename T1> \; 1735auto operator OP(const T0 &x, const RVec<T1> &v) \; 1736 -> RVec<int> /* avoid std::vector<bool> */ \; 1737{ \; 1738 RVec<int> ret(v.size()); \; 1739 auto op = [x](const T1 &y) -> int { return x OP y; }; \; 1740 std::transform(v.begin(), v.end(), ret.begin(), op); \; 1741 return ret; \; 1742} \; 1743 \; 1744template <typename T0, typename T1> \; 1745auto operator OP(const RVec<T0> &v0, const RVec<T1> &v1) \;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:60308,Log,Logical,60308,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['Log'],['Logical']
Testability,"86/// - fval: The calculated function value.; 787/// - grad: The (optional) vector of first derivatives).; 788///; 789/// The meaning of the parameters par is of course defined by the user,; 790/// who uses the values of those parameters to calculate their function value.; 791/// The starting values must be specified by the user.; 792/// Later values are determined by Minuit as it searches for the minimum; 793/// or performs whatever analysis is requested by the user.; 794///; 795/// Note that this virtual function may be redefined in a class derived from TMinuit.; 796/// The default function calls the function specified in SetFCN; 797///; 798/// Example of Minimisation function:; 799 ; 800Int_t TMinuit::Eval(Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag); 801{; 802/*; 803 if (flag == 1) {; 804 read input data,; 805 calculate any necessary constants, etc.; 806 }; 807 if (flag == 2) {; 808 calculate GRAD, the first derivatives of FVAL; 809 (this is optional); 810 }; 811 Always calculate the value of the function, FVAL,; 812 which is usually a chisquare or log likelihood.; 813 if (iflag == 3) {; 814 will come here only after the fit is finished.; 815 Perform any final calculations, output fitted data, etc.; 816 }; 817*/; 818// See concrete examples in TH1::H1FitChisquare, H1FitLikelihood; 819 ; 820 if (fFCN) (*fFCN)(npar,grad,fval,par,flag);; 821 return 0;; 822}; 823 ; 824////////////////////////////////////////////////////////////////////////////////; 825/// fix a parameter; 826 ; 827Int_t TMinuit::FixParameter( Int_t parNo); 828{; 829 Int_t err;; 830 Double_t tmp[1];; 831 tmp[0] = parNo+1; //set internal Minuit numbering; 832 ; 833 mnexcm( ""FIX"", tmp, 1, err );; 834 ; 835 return err;; 836}; 837 ; 838////////////////////////////////////////////////////////////////////////////////; 839/// return parameter value and error; 840 ; 841Int_t TMinuit::GetParameter( Int_t parNo, Double_t &currentValue, Double_t &currentError ) const; 842{; 843 Int_t er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:30671,log,log,30671,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['log'],['log']
Testability,"86/// Mutual Information method for non-linear correlations estimates in 2D histogram; 587/// Author: Moritz Backes, Geneva (2009); 588 ; 589Double_t TMVA::Tools::GetMutualInformation( const TH2F& h_ ); 590{; 591 Double_t hi = h_.Integral();; 592 if (hi == 0) return -1;; 593 ; 594 // copy histogram and rebin to speed up procedure; 595 TH2F h( h_ );; 596 h.RebinX(2);; 597 h.RebinY(2);; 598 ; 599 Double_t mutualInfo = 0.;; 600 Int_t maxBinX = h.GetNbinsX();; 601 Int_t maxBinY = h.GetNbinsY();; 602 for (Int_t x = 1; x <= maxBinX; x++) {; 603 for (Int_t y = 1; y <= maxBinY; y++) {; 604 Double_t p_xy = h.GetBinContent(x,y)/hi;; 605 Double_t p_x = h.Integral(x,x,1,maxBinY)/hi;; 606 Double_t p_y = h.Integral(1,maxBinX,y,y)/hi;; 607 if (p_x > 0. && p_y > 0. && p_xy > 0.){; 608 mutualInfo += p_xy*TMath::Log(p_xy / (p_x * p_y));; 609 }; 610 }; 611 }; 612 ; 613 return mutualInfo;; 614}; 615 ; 616////////////////////////////////////////////////////////////////////////////////; 617/// Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables; 618/// Author: Moritz Backes, Geneva (2009); 619 ; 620Double_t TMVA::Tools::GetCorrelationRatio( const TH2F& h_ ); 621{; 622 Double_t hi = h_.Integral();; 623 if (hi == 0.) return -1;; 624 ; 625 // copy histogram and rebin to speed up procedure; 626 TH2F h( h_ );; 627 h.RebinX(2);; 628 h.RebinY(2);; 629 ; 630 Double_t corrRatio = 0.;; 631 Double_t y_mean = h.ProjectionY()->GetMean();; 632 for (Int_t ix=1; ix<=h.GetNbinsX(); ix++) {; 633 corrRatio += (h.Integral(ix,ix,1,h.GetNbinsY())/hi)*pow((GetYMean_binX(h,ix)-y_mean),2);; 634 }; 635 corrRatio /= pow(h.ProjectionY()->GetRMS(),2);; 636 return corrRatio;; 637}; 638 ; 639////////////////////////////////////////////////////////////////////////////////; 640/// Compute the mean in Y for a given bin X of a 2D histogram; 641 ; 642Double_t TMVA::Tools::GetYMean_binX( const TH2& h, Int_t bin_x ); 643{; 644 if (h.Integral(bin_x,bin_x,1,h.GetNbinsY()) == 0.) {r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:21164,Log,Log,21164,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['Log'],['Log']
Testability,"86///; 387/// The member filepos is used to calculate correct version number of key; 388/// if filepos==-1, end of file position is used.; 389 ; 390void TKey::Build(TDirectory* motherDir, const char* classname, Long64_t filepos); 391{; 392 fMotherDir = motherDir;; 393 ; 394 fPidOffset = 0;; 395 fNbytes = 0;; 396 fBuffer = 0;; 397 fKeylen = 0;; 398 fObjlen = 0;; 399 fBufferRef = 0;; 400 fCycle = 0;; 401 fSeekPdir = 0;; 402 fSeekKey = 0;; 403 fLeft = 0;; 404 ; 405 fClassName = classname;; 406 //the following test required for forward and backward compatibility; 407 if (fClassName == ""TDirectoryFile"") SetBit(kIsDirectoryFile);; 408 ; 409 fVersion = TKey::Class_Version();; 410 ; 411 if ((filepos==-1) && GetFile()) filepos = GetFile()->GetEND();; 412 if (filepos > TFile::kStartBigFile) fVersion += 1000;; 413 ; 414 if (fTitle.Length() > kTitleMax) fTitle.Resize(kTitleMax);; 415 ; 416 if (GetFile() && GetFile()->TestBit(TFile::kReproducible)); 417 SetBit(TKey::kReproducible);; 418}; 419 ; 420////////////////////////////////////////////////////////////////////////////////; 421/// Read object from disk and call its Browse() method.; 422///; 423/// If object with same name already exist in memory delete it (like; 424/// TDirectoryFile::Get() is doing), except when the key references a; 425/// folder in which case we don't want to re-read the folder object; 426/// since it might contain new objects not yet saved.; 427 ; 428void TKey::Browse(TBrowser *b); 429{; 430 if (fMotherDir==0) return;; 431 ; 432 TClass *objcl = TClass::GetClass(GetClassName());; 433 ; 434 void* obj = fMotherDir->GetList()->FindObject(GetName());; 435 if (obj && objcl->IsTObject()) {; 436 TObject *tobj = (TObject*) objcl->DynamicCast(TObject::Class(), obj);; 437 if (!tobj->IsFolder()) {; 438 if (tobj->InheritsFrom(TCollection::Class())); 439 tobj->Delete(); // delete also collection elements; 440 delete tobj;; 441 obj = 0;; 442 }; 443 }; 444 ; 445 if (!obj); 446 obj = ReadObj();; 447 ; 448 if (b && obj) {;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:15151,Test,TestBit,15151,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['Test'],['TestBit']
Testability,87.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:82302,Test,Test,82302,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"880 }; 881 size_t weightIndex = 0;; 882 for (size_t l = 0; l < fNet.GetDepth(); l++) {; 883 auto & layerWeights = fNet.GetLayer(l).GetWeights();; 884 for (Int_t j = 0; j < layerWeights.GetNcols(); j++) {; 885 for (Int_t i = 0; i < layerWeights.GetNrows(); i++) {; 886 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 898 layerBiases(i,0) = 0.0;; 899 }; 900 }; 901 }; 902 if (!fExitFromTraining) fIPyMaxIter = fIPyCurrentIter;; 903 ExitFromTraining();; 904}; 905 ; 906////////////////////////////////////////////////////////////////////////////////; 907 ; 908void TMVA::MethodDNN::TrainGpu(); 909{; 910 ; 911#ifdef DNNCUDA // Included only if DNNCUDA flag is set.; 912 Log() << kINFO << ""Start of neural network training on GPU."" << Endl << Endl;; 913 ; 914 size_t nValidationSamples = GetNumValidationSamples();; 915 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 916 size_t nTestSamples = nValidationSamples;; 917 ; 918 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 919 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 920 ; 921 size_t trainingPhase = 1;; 922 fNet.Initialize(fWeightInitialization);; 923 for (TTrainingSettings & settings : fTrainingSettings) {; 924 ; 925 if (fInteractive){; 926 fInteractive->ClearGraphs();; 927 }; 928 ; 929 TNet<TCuda<>> net(settings.batchSize, fNet);; 930 net.SetWeightDecay(settings.weightDecay);; 931 net.SetRegularization(settings.regularization);; 932 ; 933 // Need to convert dropoutprobabilities to conventions used; 934 // by backend implementation.; 935 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 936 for (a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:32466,Log,Log,32466,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability,"882 if (!fNodes); 1883 return;; 1884 TGeoNode *node;; 1885 Int_t nd = fNodes->GetEntriesFast();; 1886 if (!nd); 1887 return;; 1888 // create new list of nodes; 1889 TObjArray *list = new TObjArray(nd);; 1890 // attach it to new volume; 1891 newmother->SetNodes(list);; 1892 // ((TObject*)newmother)->SetBit(kVolumeImportNodes);; 1893 for (Int_t i = 0; i < nd; i++) {; 1894 // create copies of nodes and add them to list; 1895 node = GetNode(i)->MakeCopyNode();; 1896 if (!node) {; 1897 Fatal(""CloneNodesAndConnect"", ""cannot make copy node"");; 1898 return;; 1899 }; 1900 node->SetMotherVolume(newmother);; 1901 list->Add(node);; 1902 }; 1903}; 1904 ; 1905////////////////////////////////////////////////////////////////////////////////; 1906/// make a new list of nodes and copy all nodes of other volume inside; 1907 ; 1908void TGeoVolume::MakeCopyNodes(const TGeoVolume *other); 1909{; 1910 Int_t nd = other->GetNdaughters();; 1911 if (!nd); 1912 return;; 1913 if (fNodes) {; 1914 if (!TObject::TestBit(kVolumeImportNodes)); 1915 fNodes->Delete();; 1916 delete fNodes;; 1917 }; 1918 fNodes = new TObjArray();; 1919 for (Int_t i = 0; i < nd; i++); 1920 fNodes->Add(other->GetNode(i));; 1921 TObject::SetBit(kVolumeImportNodes);; 1922}; 1923 ; 1924////////////////////////////////////////////////////////////////////////////////; 1925/// make a copy of this volume; 1926/// build a volume with same name, shape and medium; 1927 ; 1928TGeoVolume *TGeoVolume::MakeCopyVolume(TGeoShape *newshape); 1929{; 1930 TGeoVolume *vol = new TGeoVolume(GetName(), newshape, fMedium);; 1931 // copy volume attributes; 1932 vol->SetVisibility(IsVisible());; 1933 vol->SetLineColor(GetLineColor());; 1934 vol->SetLineStyle(GetLineStyle());; 1935 vol->SetLineWidth(GetLineWidth());; 1936 vol->SetFillColor(GetFillColor());; 1937 vol->SetFillStyle(GetFillStyle());; 1938 // copy field; 1939 vol->SetField(fField);; 1940 // if divided, copy division object; 1941 if (fFinder) {; 1942 // Error(""MakeCopyVolume"", ""volume %",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:72389,Test,TestBit,72389,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['Test'],['TestBit']
Testability,"8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:59644,log,logEvalError,59644,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,3,['log'],"['logEvalError', 'logging']"
Testability,"8; TMVA::ROCCurve::GetROCCurveTGraph * GetROCCurve(const UInt_t points=100)Returns a new TGraph containing the ROC curve.Definition ROCCurve.cxx:274; TMVA::RankingRanking for variables in method (implementation)Definition Ranking.h:48; TMVA::Ranking::Printvirtual void Print() constget maximum length of variable namesDefinition Ranking.cxx:111; TMVA::ResultsClassificationClass that is the base-class for a vector of result.Definition ResultsClassification.h:48; TMVA::ResultsMulticlassClass which takes the results of a multiclass classification.Definition ResultsMulticlass.h:55; TMVA::ResultsClass that is the base-class for a vector of result.Definition Results.h:57; TMVA::Tools::FormattedOutputvoid FormattedOutput(const std::vector< Double_t > &, const std::vector< TString > &, const TString titleVars, const TString titleValues, MsgLogger &logger, TString format=""%+1.3f"")formatted output of simple tableDefinition Tools.cxx:887; TMVA::Tools::ROOTVersionMessagevoid ROOTVersionMessage(MsgLogger &logger)prints the ROOT release number and dateDefinition Tools.cxx:1325; TMVA::Tools::UsefulSortDescendingvoid UsefulSortDescending(std::vector< std::vector< Double_t > > &, std::vector< TString > *vs=nullptr)sort 2D vector (AND in parallel a TString vector) in such a way that the ""first vector is sorted"" and...Definition Tools.cxx:564; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TMVA::Tools::Colorconst TString & Color(const TString &)human readable color stringsDefinition Tools.cxx:828; TMVA::Tools::GetCorrelationMatrixconst TMatrixD * GetCorrelationMatrix(const TMatrixD *covMat)turns covariance into correlation matrixDefinition Tools.cxx:324; TMVA::Tools::kHtmlLink@ kHtmlLinkDefinition Tools.h:212; TMVA::Tools::UsefulSortAscendingvoid UsefulSortAscending(std::vector< std::vector< Double_t > > &,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:133345,log,logger,133345,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['log'],['logger']
Testability,"8e+00; : 2 : var1 : 2.336e+00; : ------------------------------------; <HEADER> IdTransformation : Ranking result (top variable is best ranked); : ----------------------------------------; : Rank : Variable : Correlation Ratio (T); : ----------------------------------------; : 1 : var1 : 5.362e-01; : 2 : var2 : 5.109e-01; : ----------------------------------------; : Elapsed time for training with 9999 events: 5.01e-06 sec ; : Dataset[datasetcvreg] : Create results for training; : Dataset[datasetcvreg] : Evaluation of BDTG on training sample; : Dataset[datasetcvreg] : Elapsed time for evaluation of 9999 events: 0.369 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; : Creating xml weight file: datasetcvreg/weights/TMVACrossValidationRegression_BDTG.weights.xml; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG for Regression performance; : ; : Dataset[datasetcvreg] : Create results for testing; : Dataset[datasetcvreg] : Evaluation of BDTG on testing sample; : Dataset[datasetcvreg] : Elapsed time for evaluation of 9999 events: 0.37 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; <HEADER> Factory : Evaluate all methods; : Evaluate regression method: BDTG; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9999 events: 0.37 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 9999 events: 0.369 sec ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 2.4948 1.4515 [ 0.00020069 5.0000 ]; : var2: 2.4837 1.4409 [ 0.00071490 5.0000 ]; : fvalue: 134.53 84.778 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on test sample:; : (""Bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:12192,Test,Test,12192,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,4,"['Test', 'test']","['Test', 'testing']"
Testability,"9 */; 330 ; 331 double gamma_cdf_c(double x, double alpha, double theta, double x0 = 0);; 332 ; 333 ; 334 ; 335 ; 336 /**; 337 ; 338 Cumulative distribution function of the gamma distribution; 339 (lower tail).; 340 ; 341 \f[ D(x) = \int_{-\infty}^{x} {1 \over \Gamma(\alpha) \theta^{\alpha}} x'^{\alpha-1} e^{-x'/\theta} dx' \f]; 342 ; 343 For detailed description see; 344 <A HREF=""http://mathworld.wolfram.com/GammaDistribution.html"">; 345 Mathworld</A>. It is implemented using the incomplete gamma function, ROOT::Math::inc_gamma,; 346 from <A HREF=""http://www.netlib.org/cephes"">Cephes</A>; 347 ; 348 @ingroup ProbFunc; 349 ; 350 */; 351 ; 352 double gamma_cdf(double x, double alpha, double theta, double x0 = 0);; 353 ; 354 ; 355 ; 356 /**; 357 ; 358 Cumulative distribution function of the Landau; 359 distribution (lower tail).; 360 ; 361 \f[ D(x) = \int_{-\infty}^{x} p(x) dx \f]; 362 ; 363 where \f$p(x)\f$ is the Landau probability density function :; 364 \f[ p(x) = \frac{1}{\xi} \phi (\lambda) \f]; 365 with; 366 \f[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\f]; 367 with \f$\lambda = (x-x_0)/\xi\f$. For a detailed description see; 368 K.S. K&ouml;lbig and B. Schorr, A program package for the Landau distribution,; 369 <A HREF=""http://dx.doi.org/10.1016/0010-4655(84)90085-7"">Computer Phys. Comm. 31 (1984) 97-111</A>; 370 <A HREF=""http://dx.doi.org/10.1016/j.cpc.2008.03.002"">[Erratum-ibid. 178 (2008) 972]</A>.; 371 The same algorithms as in; 372 <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g110/top.html"">; 373 CERNLIB</A> (DISLAN) is used.; 374 ; 375 @param x The argument \f$x\f$; 376 @param xi The width parameter \f$\xi\f$; 377 @param x0 The location parameter \f$x_0\f$; 378 ; 379 @ingroup ProbFunc; 380 ; 381 */; 382 ; 383 double landau_cdf(double x, double xi = 1, double x0 = 0);; 384 ; 385 /**; 386 ; 387 Complement of the distribution function of the Landau; 388 distribution (upper tail).; 389 ; 390 \f[ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html:11062,log,log,11062,doc/master/ProbFuncMathCore_8h_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html,1,['log'],['log']
Testability,"9 // Second pass in the list of friends when; 5350 // the branch name is prefixed by the tree name.; 5351 next.Reset();; 5352 while ((fe = (TFriendElement*) next())) {; 5353 TTree* t = fe->GetTree();; 5354 if (!t) {; 5355 continue;; 5356 }; 5357 const char* subname = strstr(name, fe->GetName());; 5358 if (subname != name) {; 5359 continue;; 5360 }; 5361 Int_t l = strlen(fe->GetName());; 5362 subname += l;; 5363 if (*subname != '.') {; 5364 continue;; 5365 }; 5366 subname++;; 5367 TBranch* branch = t->GetBranch(subname);; 5368 if (branch) {; 5369 return branch;; 5370 }; 5371 }; 5372 return nullptr;; 5373}; 5374 ; 5375////////////////////////////////////////////////////////////////////////////////; 5376/// Return status of branch with name branchname.; 5377///; 5378/// - 0 if branch is not activated; 5379/// - 1 if branch is activated; 5380 ; 5381bool TTree::GetBranchStatus(const char* branchname) const; 5382{; 5383 TBranch* br = const_cast<TTree*>(this)->GetBranch(branchname);; 5384 if (br) {; 5385 return br->TestBit(kDoNotProcess) == 0;; 5386 }; 5387 return false;; 5388}; 5389 ; 5390////////////////////////////////////////////////////////////////////////////////; 5391/// Static function returning the current branch style.; 5392///; 5393/// - style = 0 old Branch; 5394/// - style = 1 new Bronch; 5395 ; 5396Int_t TTree::GetBranchStyle(); 5397{; 5398 return fgBranchStyle;; 5399}; 5400 ; 5401////////////////////////////////////////////////////////////////////////////////; 5402/// Used for automatic sizing of the cache.; 5403///; 5404/// Estimates a suitable size for the tree cache based on AutoFlush.; 5405/// A cache sizing factor is taken from the configuration. If this yields zero; 5406/// and withDefault is true the historical algorithm for default size is used.; 5407 ; 5408Long64_t TTree::GetCacheAutoSize(bool withDefault /* = false */ ); 5409{; 5410 auto calculateCacheSize = [this](Double_t cacheFactor); 5411 {; 5412 Long64_t cacheSize = 0;; 5413 if (fAutoFlush < 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:213598,Test,TestBit,213598,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Test'],['TestBit']
Testability,9 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum Test error found - save the configuration ; : 636 | 76.4488 55.0573 0.020202 0.00188181 43667.6 0; : 637 Minimum Test error found - save the configuration ; : 637 | 75.4894 54.0711 0.0202555 0.00186268 43495.3 0; : 638 Minimum Test error found - save the configuration ; : 638 | 74.5839 53.0373 0.0201113 0.00181775 43731.4 0; : 639 Minimum Test error found - save the configuration ; : 639 | 73.497 52.6629 0.0200838 0.00181639 43793.9 0; : 640 Minimum Test error found - save the configuration ; : 640 | 72.4195 52.0402 0.0201153 0.00181887 43724.4 0; : 641 | 71.5077 52.3492 0.0200565 0.00175616 43715 1; : 642 Minimum Test error found - save the configuration ; : 642 | 70.8829 51.1798 0.0201079 0.00181215 43725.9 0; : 643 Minimum Test error found - save the configuration ; : 643 | 69.8143 50.8726 0.0201142 0.00180555 43695.1 0; : 644 Minimum Test error found - save the configuration ; : 644 | 68.806 50.1244 0.0201666 0.00186273 43706.7 0; : 645 Minimum Test error found - save the configuration ; : 645 | 67.8562 49.8828 0.0202418 0.00183622 43465.2 0; : 646 Minimum Test error found - save the configuration ; : 646 | 67.0733 49.0958 0.0205161 0.00187288 42911 0; : 647 Minimum Test error found - save the configuration ; : 647 | 66.0907 48.4839 0.0203074 0.00181472 43260.4 0; : 648 Minimum Test error found - save the configuration ; : 648 | 65.1425 47.9895 0.0205925 0.00181541 42605 0; : 649 Minimum Test error found - save the configuration ; : 649 | 64.2291 47.827 0.0205836 0.00185514 42715.8 0; : 650 Minimum Test error found - save the configuration ; : 650 | 63.5181 47.2461 0.0203914 0.00184161 43127.1 0; : 651 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:83264,Test,Test,83264,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"9 ; 1040 //Log the loss value; 1041 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1042 ; 1043 end = std::chrono::system_clock::now();; 1044 ; 1045 // Compute training error.; 1046 Double_t trainingError = 0.0;; 1047 for (auto batch : trainingData) {; 1048 auto inputMatrix = batch.GetInput();; 1049 auto outputMatrix = batch.GetOutput();; 1050 trainingError += net.Loss(inputMatrix, outputMatrix);; 1051 }; 1052 trainingError /= (Double_t) (nTrainingSamples / settings.batchSize);; 1053 //Log the loss value; 1054 fTrainHistory.AddValue(""trainingError"",stepCount,trainingError);; 1055 ; 1056 // Compute numerical throughput.; 1057 std::chrono::duration<double> elapsed_seconds = end - start;; 1058 double seconds = elapsed_seconds.count();; 1059 double nFlops = (double) (settings.testInterval * batchesInEpoch);; 1060 nFlops *= net.GetNFlops() * 1e-9;; 1061 ; 1062 converged = minimizer.HasConverged(testError);; 1063 start = std::chrono::system_clock::now();; 1064 ; 1065 if (fInteractive) {; 1066 fInteractive->AddPoint(stepCount, trainingError, testError);; 1067 fIPyCurrentIter = 100.0 * minimizer.GetConvergenceCount(); 1068 / minimizer.GetConvergenceSteps ();; 1069 if (fExitFromTraining) break;; 1070 } else {; 1071 Log() << std::setw(10) << stepCount << "" | ""; 1072 << std::setw(12) << trainingError; 1073 << std::setw(12) << testError; 1074 << std::setw(12) << nFlops / seconds; 1075 << std::setw(12) << minimizer.GetConvergenceCount() << Endl;; 1076 if (converged) {; 1077 Log() << Endl;; 1078 }; 1079 }; 1080 }; 1081 }; 1082 for (size_t l = 0; l < net.GetDepth(); l++) {; 1083 fNet.GetLayer(l).GetWeights() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetWeights();; 1084 fNet.GetLayer(l).GetBiases() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetBiases();; 1085 }; 1086 }; 1087 ; 1088#else // DNNCUDA flag not set.; 1089 ; 1090 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 1091 ""you have CUDA installed and it was successfully ""; 1092 ""detected by CMAKE."" << Endl;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:38081,test,testError,38081,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['test'],['testError']
Testability,"9 ; 1820 // when projecting in Z outer axis are X and Y (order is important. It is defined in the DoProject1D function); 1821 return DoProject1D(hname, title, ixmin, ixmax, iymin, iymax, &fZaxis, &fXaxis, &fYaxis, option);; 1822}; 1823 ; 1824 ; 1825////////////////////////////////////////////////////////////////////////////////; 1826/// internal method performing the projection to 1D histogram; 1827/// called from TH3::Project3D; 1828 ; 1829TH1D *TH3::DoProject1D(const char* name, const char * title, int imin1, int imax1, int imin2, int imax2,; 1830 const TAxis* projAxis, const TAxis * axis1, const TAxis * axis2, Option_t * option) const; 1831{; 1832 ; 1833 TString opt = option;; 1834 opt.ToLower();; 1835 ; 1836 // save previous axis range and bits; 1837 // Int_t iminOld1 = axis1->GetFirst();; 1838 // Int_t imaxOld1 = axis1->GetLast();; 1839 // Int_t iminOld2 = axis2->GetFirst();; 1840 // Int_t imaxOld2 = axis2->GetLast();; 1841 // Bool_t hadRange1 = axis1->TestBit(TAxis::kAxisRange);; 1842 // Bool_t hadRange2 = axis2->TestBit(TAxis::kAxisRange);; 1843 ; 1844 // need to cast-away constness to set range; 1845 TAxis out1(*axis1);; 1846 TAxis out2(*axis2);; 1847 // const_cast<TAxis *>(axis1)->SetRange(imin1, imax1);; 1848 // const_cast<TAxis*>(axis2)->SetRange(imin2,imax2);; 1849 out1.SetRange(imin1, imax1);; 1850 out2.SetRange(imin2, imax2);; 1851 ; 1852 Bool_t computeErrors = GetSumw2N();; 1853 if (opt.Contains(""e"") ) {; 1854 computeErrors = kTRUE;; 1855 opt.Remove(opt.First(""e""),1);; 1856 }; 1857 Bool_t originalRange = kFALSE;; 1858 if (opt.Contains('o') ) {; 1859 originalRange = kTRUE;; 1860 opt.Remove(opt.First(""o""),1);; 1861 }; 1862 ; 1863 TH1D * h1 = DoProject1D(name, title, projAxis, &out1, &out2, computeErrors, originalRange,true,true);; 1864 ; 1865 // // restore original range; 1866 // if (axis1->TestBit(TAxis::kAxisRange)) {; 1867 // if (hadRange1) const_cast<TAxis*>(axis1)->SetRange(iminOld1,imaxOld1);; 1868 // if (axis2->TestBit(TAxis::kAxisRange)) const_ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:73540,Test,TestBit,73540,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,2,['Test'],['TestBit']
Testability,"9 ; 300 Gl_windowchanged();; 301 ; 302 atexit(ResetTermAtExit);; 303 ; 304 // Setup for tab completion; 305 gTabCom = new TTabCom;; 306 Gl_in_key = &Key_Pressed;; 307 Gl_beep_hook = &BeepHook;; 308 ; 309 // tell Cling to use our getline; 310 gCling->SetGetline(Getline, Gl_histadd);; 311}; 312 ; 313////////////////////////////////////////////////////////////////////////////////; 314/// Destructor.; 315 ; 316TRint::~TRint(); 317{; 318 delete gTabCom;; 319 gTabCom = nullptr;; 320 Gl_in_key = nullptr;; 321 Gl_beep_hook = nullptr;; 322 fInputHandler->Remove();; 323 delete fInputHandler;; 324 // We can't know where the signal handler was changed since we started ...; 325 // so for now let's not delete it.; 326// TSignalHandler *ih = GetSignalHandler();; 327// ih->Remove();; 328// SetSignalHandler(0);; 329// delete ih;; 330}; 331 ; 332////////////////////////////////////////////////////////////////////////////////; 333/// Execute logon macro's. There are three levels of logon macros that; 334/// will be executed: the system logon etc/system.rootlogon.C, the global; 335/// user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; 336/// compatibility also the logon macro as specified by the Rint.Logon; 337/// environment setting, by default ./rootlogon.C, will be executed.; 338/// No logon macros will be executed when the system is started with; 339/// the -n option.; 340 ; 341void TRint::ExecLogon(); 342{; 343 if (NoLogOpt()) return;; 344 ; 345 TString name = "".rootlogon.C"";; 346 TString sname = ""system"";; 347 sname += name;; 348 char *s = gSystem->ConcatFileName(TROOT::GetEtcDir(), sname);; 349 if (!gSystem->AccessPathName(s, kReadPermission)) {; 350 ProcessFile(s);; 351 }; 352 delete [] s;; 353 s = gSystem->ConcatFileName(gSystem->HomeDirectory(), name);; 354 if (!gSystem->AccessPathName(s, kReadPermission)) {; 355 ProcessFile(s);; 356 }; 357 delete [] s;; 358 // avoid executing ~/.rootlogon.C twice; 359 if (strcmp(gSystem->HomeDirectory(), gSystem->WorkingDir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:11433,log,logon,11433,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,2,['log'],['logon']
Testability,"9 ; 610 ; 611////////////////////////////////////////////////////////////////////////////////; 612/// evaluates the regression MVA; 613 ; 614Float_t TMVA::Reader::EvaluateRegression( UInt_t tgtNumber, const TString& methodTag, Double_t aux ); 615{; 616 try {; 617 return EvaluateRegression(methodTag, aux).at(tgtNumber);; 618 }; 619 catch (std::out_of_range &) {; 620 Log() << kWARNING << ""Regression could not be evaluated for target-number "" << tgtNumber << Endl;; 621 return 0;; 622 }; 623}; 624 ; 625 ; 626 ; 627////////////////////////////////////////////////////////////////////////////////; 628/// evaluates MVA for given set of input variables; 629 ; 630const std::vector< Float_t >& TMVA::Reader::EvaluateMulticlass( const TString& methodTag, Double_t aux ); 631{; 632 IMethod* method = 0;; 633 ; 634 std::map<TString, IMethod*>::iterator it = fMethodMap.find( methodTag );; 635 if (it == fMethodMap.end()) {; 636 Log() << kINFO << ""<EvaluateMVA> unknown method in map; ""; 637 << ""you looked for \"""" << methodTag << ""\"" within available methods: "" << Endl;; 638 for (it = fMethodMap.begin(); it!=fMethodMap.end(); ++it) Log() << ""--> "" << it->first << Endl;; 639 Log() << ""Check calling string"" << kFATAL << Endl;; 640 }; 641 else method = it->second;; 642 ; 643 MethodBase * kl = dynamic_cast<TMVA::MethodBase*>(method);; 644 ; 645 if(kl==0); 646 Log() << kFATAL << methodTag << "" is not a method"" << Endl;; 647 // check for NaN in event data: (note: in the factory, this check was done already at the creation of the datasets, hence; 648 // it is not again checked in each of these subsequent calls..; 649 ; 650 const Event* ev = kl->GetEvent();; 651 for (UInt_t i=0; i<ev->GetNVariables(); i++){; 652 if (TMath::IsNaN(ev->GetValue(i))) {; 653 Log() << kERROR << i << ""-th variable of the event is NaN, \n regression values might evaluate to .. what do I know. \n sorry this warning is all I can do, please fix or remove this event."" << Endl;; 654 }; 655 }; 656 ; 657 return this->EvaluateM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:24485,Log,Log,24485,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['Log'],['Log']
Testability,"9 EventVector& unspecifiedEvents = tmpEventVector[Types::kMaxTreeType].at(cls);; 1080 if( ! unspecifiedEvents.empty() ) {; 1081 Log() << kDEBUG << ""randomly shuffling ""; 1082 << unspecifiedEvents.size(); 1083 << "" events of class "" << cls; 1084 << "" which are not yet associated to testing or training"" << Endl;; 1085 std::shuffle(unspecifiedEvents.begin(), unspecifiedEvents.end(), rndm);; 1086 }; 1087 }; 1088 }; 1089 ; 1090 // check for each class the number of training and testing events, the requested number and the available number; 1091 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""SPLITTING ========"" << Endl;; 1092 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1093 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""---- class "" << cls << Endl;; 1094 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""check number of training/testing events, requested and available number of events and for class "" << cls << Endl;; 1095 ; 1096 // check if enough or too many events are already in the training/testing eventvectors of the class cls; 1097 EventVector& eventVectorTraining = tmpEventVector[ Types::kTraining ].at(cls);; 1098 EventVector& eventVectorTesting = tmpEventVector[ Types::kTesting ].at(cls);; 1099 EventVector& eventVectorUndefined = tmpEventVector[ Types::kMaxTreeType ].at(cls);; 1100 ; 1101 Int_t availableTraining = eventVectorTraining.size();; 1102 Int_t availableTesting = eventVectorTesting.size();; 1103 Int_t availableUndefined = eventVectorUndefined.size();; 1104 ; 1105 Float_t presel_scale;; 1106 if (fScaleWithPreselEff) {; 1107 presel_scale = eventCounts[cls].cutScaling();; 1108 if (presel_scale < 1); 1109 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" you have opted for scaling the number of requested training/testing events\n to be scaled by the preselection efficiency""<< Endl;; 1110 }else{; 1111 presel_scale = 1.; // this scaling was too confusing to most people, including me! Sorry... (Helge); 1112 if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:47054,test,testing,47054,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,['test'],['testing']
Testability,"9 if (c1-e1>0.01*TMath::Abs(c1)) ymin = TMath::Min(ymin,c1-e1);; 7190 } else {; 7191 ymin = TMath::Min(ymin,c1-e1);; 7192 }; 7193 }; 7194 if (Hoption.Func) {; 7195 xv[0] = fXaxis->GetBinCenter(i);; 7196 while ((f = (TObject*) next())) {; 7197 if (f->IsA() == TF1::Class()) {; 7198 f1 = (TF1*)f;; 7199 if (xv[0] < f1->GetXmin() || xv[0] > f1->GetXmax()) continue;; 7200 fval = f1->Eval(xv[0],0,0);; 7201 if (f1->GetMaximumStored() != -1111) fval = TMath::Min(f1->GetMaximumStored(), fval);; 7202 ymax = TMath::Max(ymax,fval);; 7203 if (Hoption.Logy) {; 7204 if (c1 > 0 && fval > 0.3*c1) ymin = TMath::Min(ymin,fval);; 7205 }; 7206 }; 7207 }; 7208 next.Reset();; 7209 }; 7210 allchan += c1;; 7211 }; 7212 if (!nonNullErrors) {; 7213 if (Hoption.Error) {; 7214 if (!Hoption.Mark && !Hoption.Line && !Hoption.Star && !Hoption.Curve) Hoption.Hist = 2;; 7215 Hoption.Error=0;; 7216 }; 7217 }; 7218 ; 7219 ; 7220 // Take into account maximum , minimum; 7221 ; 7222 if (Hoption.Logy && ymin <= 0) {; 7223 if (ymax >= 1) ymin = TMath::Max(.005,ymax*1e-10);; 7224 else ymin = 0.001*ymax;; 7225 }; 7226 ; 7227 Double_t xm = ymin;; 7228 if (maximum) ymax = fH->GetMaximumStored();; 7229 if (minimum) xm = fH->GetMinimumStored();; 7230 if (Hoption.Logy && xm < 0) {; 7231 Error(where, ""log scale requested with a negative argument (%f)"", xm);; 7232 return 0;; 7233 } else if (Hoption.Logy && xm>=0 && ymax==0) { // empty histogram in log scale; 7234 ymin = 0.01;; 7235 ymax = 10.;; 7236 } else {; 7237 ymin = xm;; 7238 }; 7239 ; 7240 if (ymin >= ymax) {; 7241 if (Hoption.Logy) {; 7242 if (ymax > 0) ymin = 0.001*ymax;; 7243 else {; 7244 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", ymax);; 7245 return 0;; 7246 }; 7247 }; 7248 else {; 7249 if (ymin > 0) {; 7250 ymin = 0;; 7251 ymax *= 2;; 7252 } else if (ymin < 0) {; 7253 ymax = 0;; 7254 ymin *= 2;; 7255 } else {; 7256 ymin = 0;; 7257 ymax = 1;; 7258 }; 7259 }; 7260 }; 7261 ; 7262 // In some cases, mainly beca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:261612,Log,Logy,261612,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability,"9 of file GSLMultiRootFinder.cxx. ◆ GetGSLType(). const gsl_multiroot_fsolver_type * ROOT::Math::GetGSLType ; (; GSLMultiRootFinder::EType ; type). Definition at line 171 of file GSLMultiRootFinder.cxx. ◆ getSum(). int ROOT::Math::getSum ; (; const int * ; x, . int ; n . ). Definition at line 534 of file GoFTest.cxx. ◆ human_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::human_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 197 of file GenVectorIO.h. ◆ Lmag(). template<class A , class T > . T ROOT::Math::Lmag ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 308 of file Functions.h. ◆ Lmag2(). template<class A , class T > . T ROOT::Math::Lmag2 ; (; const VecExpr< A, T, 4 > & ; rhs). inline . Definition at line 284 of file Functions.h. ◆ log1p(). double ROOT::Math::log1p ; (; double ; x). inline . declarations for functions which are not implemented by some compilers ; log(1+x) with error cancelation when x is small ; Definition at line 98 of file Math.h. ◆ machine_readable(). template<class char_t , class traits_t > . std::basic_ios< char_t, traits_t > & ROOT::Math::machine_readable ; (; std::basic_ios< char_t, traits_t > & ; ios). inline . Definition at line 208 of file GenVectorIO.h. ◆ Mag(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 261 of file Functions.h. ◆ Mag2(). template<class A , class T , unsigned int D> . T ROOT::Math::Mag2 ; (; const VecExpr< A, T, D > & ; rhs). inline . Definition at line 238 of file Functions.h. ◆ minfunction(). double ROOT::Math::minfunction ; (; const std::vector< double > & ; x). function to return the function values at point x ; Definition at line 19 of file RMinimizer.cxx. ◆ mingradfunction(). TVectorD ROOT::Math::mingradfunction ; (; TVectorD ; y). function to return the gradient values at point y ; Definition at line 25 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:153691,log,log,153691,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,1,['log'],['log']
Testability,"9 of file TGCommandPlugin.cxx. ◆ HandleTextChanged(). void TGCommandPlugin::HandleTextChanged ; (; const char * ; text). Handle the text changed events. ; Definition at line 264 of file TGCommandPlugin.cxx. ◆ HandleTimer(). Bool_t TGCommandPlugin::HandleTimer ; (; TTimer * ; t). overridevirtual . Handle timer event. ; Reimplemented from TObject.; Definition at line 272 of file TGCommandPlugin.cxx. ◆ IsA(). TClass * TGCommandPlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TGCommandPlugin.h. ◆ SetHistAdd(). void TGCommandPlugin::SetHistAdd ; (; Bool_t ; add = kTRUE). The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file. ; However, this function has no effect if the user does not explictly set on his standalone application the name of the ROOT history file. To log into the default ROOT history file, call this on the user-side of the code: Gl_histinit(gEnv->GetValue(""Rint.History"", gSystem->HomeDirectory())); Otherwise, replace the argument of Gl_histinit with a text file name you want to use for application-specific logging. ; Definition at line 302 of file TGCommandPlugin.cxx. ◆ Streamer(). void TGCommandPlugin::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGCommandPlugin::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TGCommandPlugin.h. ◆ ToggleTimer(). void TGCommandPlugin::ToggleTimer ; (; Bool_t ; on). Let user stop the internal timer when there is no need to check for remote. ; or start it again later on if needed. (on=False to stop, on=True to start) ; Definition at line 283 of file TGCommandPlugin.cxx. Member Data Documentation. ◆ fComboCmd. TGComboBox* TGCommandPlugin::fComboCmd. protected . commands combobox ; Definition at line 33 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCommandPlugin.html:39173,log,log,39173,doc/master/classTGCommandPlugin.html,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html,1,['log'],['log']
Testability,"9 this->GetTreeIndex()->Append(nullptr,false); // Force the sorting; 3680 }; 3681 }; 3682 return nbytes;; 3683}; 3684 ; 3685////////////////////////////////////////////////////////////////////////////////; 3686/// Copy a tree with selection.; 3687///; 3688/// ### Important:; 3689///; 3690/// The returned copied tree stays connected with the original tree; 3691/// until the original tree is deleted. In particular, any changes; 3692/// to the branch addresses in the original tree are also made to; 3693/// the copied tree. Any changes made to the branch addresses of the; 3694/// copied tree are overridden anytime the original tree changes its; 3695/// branch addresses. When the original tree is deleted, all the; 3696/// branch addresses of the copied tree are set to zero.; 3697///; 3698/// For examples of CopyTree, see the tutorials:; 3699///; 3700/// - copytree.C:; 3701/// Example macro to copy a subset of a tree to a new tree.; 3702/// The input file was generated by running the program in; 3703/// $ROOTSYS/test/Event in this way:; 3704/// ~~~ {.cpp}; 3705/// ./Event 1000 1 1 1; 3706/// ~~~; 3707/// - copytree2.C; 3708/// Example macro to copy a subset of a tree to a new tree.; 3709/// One branch of the new tree is written to a separate file.; 3710/// The input file was generated by running the program in; 3711/// $ROOTSYS/test/Event in this way:; 3712/// ~~~ {.cpp}; 3713/// ./Event 1000 1 1 1; 3714/// ~~~; 3715/// - copytree3.C; 3716/// Example macro to copy a subset of a tree to a new tree.; 3717/// Only selected entries are copied to the new tree.; 3718/// NOTE that only the active branches are copied.; 3719 ; 3720TTree* TTree::CopyTree(const char* selection, Option_t* option /* = 0 */, Long64_t nentries /* = TTree::kMaxEntries */, Long64_t firstentry /* = 0 */); 3721{; 3722 GetPlayer();; 3723 if (fPlayer) {; 3724 return fPlayer->CopyTree(selection, option, nentries, firstentry);; 3725 }; 3726 return nullptr;; 3727}; 3728 ; 3729////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:146142,test,test,146142,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['test'],['test']
Testability,"9 } else if (paramVal < -1) {; 250 return -1 * (2 * a - b) * (paramVal + 1) + low - nominal;; 251 } else {; 252 return a * std::pow(paramVal, 2) + b * paramVal + c;; 253 }; 254 } else if (code == 4) {; 255 double x = paramVal;; 256 if (x >= boundary) {; 257 return x * (high - nominal);; 258 } else if (x <= -boundary) {; 259 return x * (nominal - low);; 260 }; 261 ; 262 // interpolate 6th degree; 263 double t = x / boundary;; 264 double eps_plus = high - nominal;; 265 double eps_minus = nominal - low;; 266 double S = 0.5 * (eps_plus + eps_minus);; 267 double A = 0.0625 * (eps_plus - eps_minus);; 268 ; 269 return x * (S + t * A * (15 + t * t * (-10 + t * t * 3)));; 270 } else if (code == 5) {; 271 double x = paramVal;; 272 double mod = 1.0;; 273 if (x >= boundary) {; 274 mod = std::pow(high / nominal, +paramVal);; 275 } else if (x <= -boundary) {; 276 mod = std::pow(low / nominal, -paramVal);; 277 } else {; 278 // interpolate 6th degree exp; 279 double x0 = boundary;; 280 ; 281 high /= nominal;; 282 low /= nominal;; 283 ; 284 // GHL: Swagato's suggestions; 285 double powUp = std::pow(high, x0);; 286 double powDown = std::pow(low, x0);; 287 double logHi = std::log(high);; 288 double logLo = std::log(low);; 289 double powUpLog = high <= 0.0 ? 0.0 : powUp * logHi;; 290 double powDownLog = low <= 0.0 ? 0.0 : -powDown * logLo;; 291 double powUpLog2 = high <= 0.0 ? 0.0 : powUpLog * logHi;; 292 double powDownLog2 = low <= 0.0 ? 0.0 : -powDownLog * logLo;; 293 ; 294 double S0 = 0.5 * (powUp + powDown);; 295 double A0 = 0.5 * (powUp - powDown);; 296 double S1 = 0.5 * (powUpLog + powDownLog);; 297 double A1 = 0.5 * (powUpLog - powDownLog);; 298 double S2 = 0.5 * (powUpLog2 + powDownLog2);; 299 double A2 = 0.5 * (powUpLog2 - powDownLog2);; 300 ; 301 // fcns+der+2nd_der are eq at bd; 302 ; 303 double a = 1. / (8 * x0) * (15 * A0 - 7 * x0 * S1 + x0 * x0 * A2);; 304 double b = 1. / (8 * x0 * x0) * (-24 + 24 * S0 - 9 * x0 * A1 + x0 * x0 * S2);; 305 double c = 1. / (4 * std::pow(x0, 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:8654,log,logHi,8654,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,4,['log'],"['log', 'logHi', 'logLo']"
Testability,"9 }; 1100 ; 1101 // Workaround for TMultigraph not drawing title correctly.; 1102 multigraph->GetHistogram()->SetTitle(titleString.Data());; 1103 multigraph->SetTitle(titleString.Data());; 1104 ; 1105 canvas->BuildLegend(0.15, 0.15, 0.35, 0.3, ""MVA Method"");; 1106 }; 1107 ; 1108 return canvas;; 1109}; 1110 ; 1111////////////////////////////////////////////////////////////////////////////////; 1112/// Iterates through all booked methods and calls training; 1113 ; 1114void TMVA::Factory::TrainAllMethods(); 1115{; 1116 Log() << kHEADER << gTools().Color(""bold"") << ""Train all methods"" << gTools().Color(""reset"") << Endl;; 1117 // iterates over all MVAs that have been booked, and calls their training methods; 1118 ; 1119 // don't do anything if no method booked; 1120 if (fMethodsMap.empty()) {; 1121 Log() << kINFO << ""...nothing found to train"" << Endl;; 1122 return;; 1123 }; 1124 ; 1125 // here the training starts; 1126 // Log() << kINFO << "" "" << Endl;; 1127 Log() << kDEBUG << ""Train all methods for ""; 1128 << (fAnalysisType == Types::kRegression; 1129 ? ""Regression""; 1130 : (fAnalysisType == Types::kMulticlass ? ""Multiclass"" : ""Classification"")); 1131 << "" ..."" << Endl;; 1132 ; 1133 std::map<TString, MVector *>::iterator itrMap;; 1134 ; 1135 for (itrMap = fMethodsMap.begin(); itrMap != fMethodsMap.end(); ++itrMap) {; 1136 MVector *methods = itrMap->second;; 1137 MVector::iterator itrMethod;; 1138 ; 1139 // iterate over methods and train; 1140 for (itrMethod = methods->begin(); itrMethod != methods->end(); ++itrMethod) {; 1141 Event::SetIsTraining(kTRUE);; 1142 MethodBase *mva = dynamic_cast<MethodBase *>(*itrMethod);; 1143 ; 1144 if (mva == 0); 1145 continue;; 1146 ; 1147 if (mva->DataInfo().GetDataSetManager()->DataInput().GetEntries() <=; 1148 1) { // 0 entries --> 0 events, 1 entry --> dynamical dataset (or one entry); 1149 Log() << kFATAL << ""No input data for the training provided!"" << Endl;; 1150 }; 1151 ; 1152 if (fAnalysisType == Types::kRegression && mva->Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:46123,Log,Log,46123,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Log'],['Log']
Testability,"9 }; 4710 if (fStreamerType == TVirtualStreamerInfo::kSTLp) {; 4711 // -- We are a pointer to an STL container.; 4712 // We must zero the pointer in the object.; 4713 *((char**) fAddress) = nullptr;; 4714 }; 4715 } else {; 4716 // We are *not* a TClonesArray master branch and we are *not* an STL container master branch.; 4717 TClass* cl = fBranchClass.GetClass();; 4718 if (!cl) {; 4719 Warning(""ReleaseObject"", ""Cannot delete allocated object because I cannot instantiate a TClass object for its class! branch: '%s' class: '%s'"", GetName(), fBranchClass.GetClassName());; 4720 fObject = nullptr;; 4721 } else {; 4722 TVirtualCollectionProxy* proxy = cl->GetCollectionProxy();; 4723 ; 4724 if (proxy) {; 4725 if (fID >= 0) {; 4726 TVirtualStreamerInfo* si = GetInfoImp();; 4727 TStreamerElement* se = si->GetElement(fID);; 4728 if (!se->TestBit(TStreamerElement::kDoNotDelete) && proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete) {; 4729 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4730 proxy->Clear(""force"");; 4731 }; 4732 } else if (proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete) {; 4733 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4734 proxy->Clear(""force"");; 4735 }; 4736 ; 4737 }; 4738 cl->Destructor(fObject);; 4739 fObject = nullptr;; 4740 }; 4741 }; 4742 }; 4743}; 4744 ; 4745////////////////////////////////////////////////////////////////////////////////; 4746/// Reset a Branch.; 4747///; 4748/// Existing i/o buffers are deleted.; 4749/// Entries, max and min are reset.; 4750///; 4751 ; 4752void TBranchElement::Reset(Option_t* option); 4753{; 4754 Int_t nbranches = fBranches.GetEntriesFast();; 4755 for (Int_t i = 0; i < nbranches; ++i) {; 4756 TBranch* branch = (TBranch*) fBranches[i];; 4757 branch->Reset(option);; 4758 }; 4759 fBranchID = -1;; 4760 TBranch::Reset(option);; 4761}; 4762 ; 4763////////////////////////////////////////////////////////////////////////////////; 4764/// Reset a Branch after a Merge operation (drop ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:175398,Test,TestBit,175398,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability,"9, 5.6122, 5.5136, 3.719, 9.6132, 7.9234, 7.1025, 6.6731, ; 416 6.1549, 5.8217, 5.7345, 3.7911, 10.0989, 8.2395, 7.4326, 6.9567, ; 417 6.3908, 6.011, 5.9566, 3.8906, 10.8825, 8.8994, 7.8934, 7.4501, ; 418 6.9009, 6.4538, 6.2705, 4.0556, 11.8537, 9.5482, 8.5568, 8.0283, ; 419 7.4418, 6.9524, 6.6195, 4.2649 };; 420 ; 421 ; 422 ; 423 ; 424 ; 425 // p values bins ; 426 double p[] = { .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,.1,.2,.3,.4,.5,.6,.7,.8,.9,; 427 .925,.95,.975,.99,.9925,.995,.9975,.999,.99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999 };; 428 ; 429 //int nbins = p.size();; 430 const int nbins = 35;; 431 //assert ( nbins*ns == ts.size() ); ; 432 ; 433 // get ts values for nsamples = 2; 434 // corresponding value is for m=nsamples-1; 435 int offset = 0; // for m = 1 (i.e. for nsamples = 2); 436 if (nsamples != 2) { ; 437 MATH_ERROR_MSG(""InterpolatePValues"", ""Interpolation not implemented for nsamples not equal to 2"");; 438 return 0;; 439 }; 440 std::vector<double> ts2(nbins); // ts values for nsamples = 2; 441 std::vector<double> lp(nbins); // log ( p / (1-p) ); 442 for (int i = 0; i < nbins; ++i) ; 443 { ; 444 ts2[i] = ts[offset+ i * ns]; ; 445 p[i] = 1.-p[i];; 446 lp[i] = std::log( p[i]/(1.-p[i] ) ); ; 447 }; 448 // do linear interpolation to find right lp value for given observed test staistic value; 449 //auto it = std::lower_bound(ts2.begin(), ts2.end(), tx ); ; 450 int i1 = std::distance(ts2.begin(), std::lower_bound(ts2.begin(), ts2.end(), tx ) ) - 1; ; 451 int i2 = i1+1;; 452 // if tx is before min of tabulated data; 453 if (i1 < 0) { ; 454 i1 = 0;; 455 i2 = 1;; 456 }; 457 // if tx is after max of tabulated data; 458 if (i2 >= int(ts2.size()) ) { ; 459 i1 = ts2.size()-2; ; 460 i2 = ts2.size()-1;; 461 }; 462 ; 463 //std::cout << i1 << "" , "" << i2 << std::endl;; 464 assert(i1 < (int) lp.size() && i2 < (int) lp.size() ); ; 465 double lp1 = lp[i1]; ; 466 double lp2 = lp[i2];; 467 double tx1 = ts2[i1];; 468 double tx2 = ts2[i2];; 469 ; 470 /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:16799,log,log,16799,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['log'],['log']
Testability,"9,beta2=0.999,eps=1e-07) Learning rate = 0.01 regularization 0 minimum error = 0.699892; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.548477 0.466013 0.191275 0.014698 9061.23 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.431501 0.379356 0.191981 0.0145985 9020.06 0; : 3 | 0.40241 0.379482 0.19151 0.014162 9021.8 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.408996 0.379041 0.192713 0.0146534 8985.76 0; : 5 | 0.41143 0.414316 0.191728 0.014237 9014.55 1; : 6 | 0.385066 0.478603 0.19226 0.0142608 8988.82 2; : 7 | 0.404168 0.388159 0.192259 0.0142353 8987.58 3; : 8 Minimum Test error found - save the configuration ; : 8 | 0.394387 0.377539 0.19273 0.0147168 8988.1 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.386834 0.375541 0.192946 0.014741 8978.44 0; : 10 | 0.381359 0.385778 0.195351 0.0142527 8835 1; : 11 | 0.391916 0.415129 0.193961 0.0143386 8907.56 2; : 12 | 0.390755 0.379468 0.194376 0.0145555 8897.75 3; : 13 | 0.409355 0.396515 0.195082 0.0144231 8856.49 4; : 14 | 0.400917 0.375809 0.194321 0.0142902 8887.36 5; : 15 | 0.384495 0.401588 0.194138 0.0144019 8901.96 6; : 16 | 0.400658 0.401489 0.198047 0.014311 8708.13 7; : 17 Minimum Test error found - save the configuration ; : 17 | 0.386851 0.371455 0.194859 0.0148291 8887.42 0; : 18 | 0.389253 0.376491 0.196282 0.0143574 8794.87 1; : 19 | 0.378227 0.384958 0.199317 0.0143422 8649.85 2; : 20 | 0.387911 0.390858 0.193697 0.0144047 8923.97 3; : 21 | 0.391998 0.3743 0.194318 0.0146357 8904.63 4; : 22 | 0.396695 0.384671 0.194406 0.0145452 8895.77 5; : 23 | 0.38744 0.376683 0.195092 0.0143629 8853.03 6; : 24 | 0.38501 0.377878 0.194456 0.0147282 8902.35 7; : 25 | 0.389388 0.376148 0.201694 0.0152248 858",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:48037,Test,Test,48037,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Test'],['Test']
Testability,9.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum Test error found - save the configuration ; : 621 | 92.9103 63.3038 0.0201905 0.00182603 43562.4 0; : 622 Minimum Test error found - save the configuration ; : 622 | 91.6075 63.2578 0.0201995 0.00184553 43587.4 0; : 623 Minimum Test error found - save the configuration ; : 623 | 90.7693 62.0703 0.0202228 0.00181118 43450.9 0; : 624 Minimum Test error found - save the configuration ; : 624 | 89.2125 61.1087 0.0202046 0.00181706 43507.7 0; : 625 | 88.1287 61.343 0.0200847 0.00175821 43652.7 1; : 626 Minimum Test error found - save the configuration ; : 626 | 87.0203 60.0927 0.0202246 0.00182742 43485 0; : 627 | 86.1022 60.6165 0.020286 0.00178227 43234.5 1; : 628 Minimum Test error found - save the configuration ; : 628 | 84.7933 59.0719 0.0201769 0.00183209 43609.1 0; : 629 Minimum Test error found - save the configuration ; : 629 | 83.7285 58.2513 0.0204361 0.0018731 43096.5 0; : 630 Minimum Test error found - save the configuration ; : 630 | 82.639 58.0942 0.0203377 0.00185077 43273.9 0; : 631 Minimum Test error found - save the configuration ; : 631 | 81.6101 57.1049 0.0203504 0.00184845 43238.6 0; : 632 | 80.6827 57.1221 0.0201225 0.00176999 43590.8 1; : 633 Minimum Test error found - save the configuration ; : 633 | 79.5527 56.2669 0.0201884 0.00185082 43626.2 0; : 634 Minimum Test error found - save the configuration ; : 634 | 78.6493 55.4759 0.0202109 0.00182609 43514.1 0; : 635 Minimum Test error found - save the configuration ; : 635 | 77.3887 55.223 0.020166 0.00184577 43667.6 0; : 636 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:81625,Test,Test,81625,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"9/// printf(""Loop i=%d, found objIsA=%s, name=%s\n"",; 7040/// i,obj->ClassName(),obj->GetName());; 7041/// }; 7042///}; 7043/// ~~~; 7044///; 7045/// If ROOT runs in batch mode a call to this method does nothing.; 7046 ; 7047TObject *TPad::WaitPrimitive(const char *pname, const char *emode); 7048{; 7049 if (!gPad || IsWeb()); 7050 return nullptr;; 7051 ; 7052 if (emode && strlen(emode)) gROOT->SetEditorMode(emode);; 7053 if (gROOT->GetEditorMode() == 0 && pname && strlen(pname) > 2) gROOT->SetEditorMode(&pname[1]);; 7054 ; 7055 if (!fPrimitives) fPrimitives = new TList;; 7056 gSystem->ProcessEvents();; 7057 TObject *oldlast = gPad->GetListOfPrimitives() ? gPad->GetListOfPrimitives()->Last() : nullptr;; 7058 TObject *obj = nullptr;; 7059 Bool_t testlast = kFALSE;; 7060 Bool_t hasname = pname && (strlen(pname) > 0);; 7061 if (!pname[0] && !emode[0]) testlast = kTRUE;; 7062 if (testlast) gROOT->SetEditorMode();; 7063 while (!gSystem->ProcessEvents() && gROOT->GetSelectedPad() && gPad) {; 7064 if (gROOT->GetEditorMode() == 0) {; 7065 if (hasname) {; 7066 obj = FindObject(pname);; 7067 if (obj) return obj;; 7068 }; 7069 if (testlast) {; 7070 if (!gPad->GetListOfPrimitives()) return nullptr;; 7071 obj = gPad->GetListOfPrimitives()->Last();; 7072 if (obj != oldlast) return obj;; 7073 Int_t event = GetEvent();; 7074 if (event == kButton1Double || event == kKeyPress) {; 7075 //the following statement is required against other loop executions; 7076 //before returning; 7077 fCanvas->HandleInput((EEventType)-1,0,0);; 7078 return nullptr;; 7079 }; 7080 }; 7081 }; 7082 gSystem->Sleep(10);; 7083 }; 7084 ; 7085 return nullptr;; 7086}; 7087 ; 7088////////////////////////////////////////////////////////////////////////////////; 7089/// Create a tool tip and return its pointer.; 7090 ; 7091TObject *TPad::CreateToolTip(const TBox *box, const char *text, Long_t delayms); 7092{; 7093 if (gPad->IsBatch()) return nullptr;; 7094 return (TObject*)gROOT->ProcessLineFast(TString::Format(""new TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:235648,test,testlast,235648,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,4,['test'],['testlast']
Testability,"91 << ""Correlations between input variables and MVA response (background):"" << Endl;; 1792 gTools().FormattedOutput(varmvaMatB, theInputVars, *theVars, Log());; 1793 Log() << kINFO << Endl;; 1794 } else; 1795 Log() << kWARNING << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1796 << ""<TestAllMethods> cannot compute correlation matrices"" << Endl;; 1797 ; 1798 // print overlap matrices; 1799 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1800 << ""The following \""overlap\"" matrices contain the fraction of events for which "" << Endl;; 1801 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1802 << ""the MVAs 'i' and 'j' have returned conform answers about \""signal-likeness\"""" << Endl;; 1803 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1804 << ""An event is signal-like, if its MVA output exceeds the following value:"" << Endl;; 1805 gTools().FormattedOutput(rvec, *theVars, ""Method"", ""Cut value"", Log());; 1806 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1807 << ""which correspond to the working point: eff(signal) = 1 - eff(background)"" << Endl;; 1808 ; 1809 // give notice that cut method has been excluded from this test; 1810 if (nmeth != (Int_t)methods->size()); 1811 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1812 << ""Note: no correlations and overlap with cut method are provided at present"" << Endl;; 1813 ; 1814 if (nmeth > 1) {; 1815 Log() << kINFO << Endl;; 1816 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1817 << ""Inter-MVA overlap matrix (signal):"" << Endl;; 1818 gTools().FormattedOutput(*overlapS, *theVars, Log());; 1819 Log() << kINFO << Endl;; 1820 ; 1821 Log() << kINFO << Form(""Dataset[%s] : "", method->fDataSetInfo.GetName()); 1822 << ""Inter-MVA overlap matrix (background):"" << Endl;; 1823 gTools().FormattedOutput(*overlapB, *theVars, Log());; 1824 }; 1825 ; 1826 // cleanup; 1827 delete tpSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:74910,Log,Log,74910,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Log'],['Log']
Testability,91864 0.689576 0.189646 0.0148842 14648.6 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.689168 0.677551 0.190642 0.015026 14577.3 0; : 5 | 0.686885 0.678678 0.189865 0.0148775 14629.7 1; : 6 | 0.68905 0.681357 0.189104 0.014885 14694.1 2; : 7 | 0.687138 0.683485 0.19023 0.0152893 14633.6 3; : 8 | 0.686429 0.685529 0.189996 0.0147979 14612 4; : 9 | 0.685179 0.683467 0.190317 0.0152552 14623.4 5; : 10 Minimum Test error found - save the configuration ; : 10 | 0.684262 0.673795 0.18992 0.0153518 14664.7 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.682907 0.671521 0.194162 0.0155002 14328.7 0; : 12 | 0.693473 0.677553 0.188937 0.0147664 14698.2 1; : 13 | 0.695581 0.671789 0.190501 0.0149406 14581.9 2; : 14 | 0.68024 0.680521 0.188432 0.0146998 14735.3 3; : 15 | 0.68435 0.688062 0.189615 0.0147881 14643.1 4; : 16 | 0.686476 0.675588 0.190015 0.0152195 14645.7 5; : 17 | 0.677004 0.674528 0.190369 0.0146787 14571.1 6; : 18 Minimum Test error found - save the configuration ; : 18 | 0.670403 0.662 0.188594 0.0151297 14758.1 0; : 19 | 0.673327 0.684121 0.189356 0.0146185 14650.5 1; : 20 | 0.68729 0.678527 0.188558 0.0148948 14741.2 2; : ; : Elapsed time for training with 3200 events: 3.82 sec ; : Evaluate deep neural network on CPU using batches with size = 256; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.0999 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras_LSTM for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ PyKeras_LSTM ] :␛[0m; : ; : Keras is a high-level API for the Theano and Tensorflow packages.; : This method wraps the training and predi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:19581,Test,Test,19581,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,"92 Bool_t CanSplit() const;; 393 Bool_t CanIgnoreTObjectStreamer() { return TestBit(kIgnoreTObjectStreamer);}; 394 Long_t ClassProperty() const;; 395 TObject *Clone(const char *newname="""") const override;; 396 void CopyCollectionProxy(const TVirtualCollectionProxy&);; 397 void Draw(Option_t *option="""") override;; 398 void Dump() const override { TDictionary::Dump(); }; 399 void Dump(const void *obj, Bool_t noAddr = kFALSE) const;; 400 char *EscapeChars(const char *text) const;; 401 TVirtualStreamerInfo *FindStreamerInfo(UInt_t checksum, Bool_t isTransient = kFALSE) const;; 402 TVirtualStreamerInfo *GetConversionStreamerInfo( const char* onfile_classname, Int_t version ) const;; 403 TVirtualStreamerInfo *FindConversionStreamerInfo( const char* onfile_classname, UInt_t checksum ) const;; 404 TVirtualStreamerInfo *GetConversionStreamerInfo( const TClass* onfile_cl, Int_t version ) const;; 405 TVirtualStreamerInfo *FindConversionStreamerInfo( const TClass* onfile_cl, UInt_t checksum ) const;; 406 void ForceReload (TClass* oldcl);; 407 Bool_t HasDataMemberInfo() const { return fIsSyntheticPair || fHasRootPcmInfo || HasInterpreterInfo(); }; 408 Bool_t HasDefaultConstructor(Bool_t testio = kFALSE) const;; 409 Bool_t HasInterpreterInfoInMemory() const { return nullptr != fClassInfo; }; 410 Bool_t HasInterpreterInfo() const { return fCanLoadClassInfo || fClassInfo; }; 411 UInt_t GetCheckSum(ECheckSum code = kCurrentCheckSum) const;; 412 UInt_t GetCheckSum(Bool_t &isvalid) const;; 413 UInt_t GetCheckSum(ECheckSum code, Bool_t &isvalid) const;; 414 TVirtualCollectionProxy *GetCollectionProxy() const;; 415 TVirtualIsAProxy *GetIsAProxy() const;; 416 TMethod *GetClassMethod(const char *name, const char *params, Bool_t objectIsConst = kFALSE);; 417 TMethod *GetClassMethodWithPrototype(const char *name, const char *proto,; 418 Bool_t objectIsConst = kFALSE,; 419 ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch);; 420 Version_t GetClassVersion() const {; 421 if (!fVersionUsed.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:20426,test,testio,20426,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,2,['test'],['testio']
Testability,"92 eminus=-eplus;; 893 return 0;; 894}; 895 ; 896////////////////////////////////////////////////////////////////////////////////; 897/// Return global fit parameters; 898/// - amin : chisquare; 899/// - edm : estimated distance to minimum; 900/// - errdef; 901/// - nvpar : number of variable parameters; 902/// - nparx : total number of parameters; 903 ; 904Int_t TFumili::GetStats(Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const; 905{; 906 amin = 2*fS;; 907 edm = fGT; //; 908 errdef = 0; // ??; 909 nparx = fNpar;; 910 nvpar = 0;; 911 for(Int_t ii=0; ii<fNpar; ii++) {; 912 if(fPL0[ii]>0.) nvpar++;; 913 }; 914 return 0;; 915}; 916 ; 917////////////////////////////////////////////////////////////////////////////////; 918/// Return Sum(log(i) i=0,n; 919/// used by log-likelihood fits; 920 ; 921Double_t TFumili::GetSumLog(Int_t n); 922{; 923 if (n < 0) return 0;; 924 if (n > fNlog) {; 925 if (fSumLog) delete [] fSumLog;; 926 fNlog = 2*n+1000;; 927 fSumLog = new Double_t[fNlog+1];; 928 Double_t fobs = 0;; 929 for (Int_t j=0;j<=fNlog;j++) {; 930 if (j > 1) fobs += TMath::Log(j);; 931 fSumLog[j] = fobs;; 932 }; 933 }; 934 if (fSumLog) return fSumLog[n];; 935 return 0;; 936}; 937 ; 938////////////////////////////////////////////////////////////////////////////////; 939/// Inverts packed diagonal matrix Z by square-root method.; 940/// Matrix elements corresponding to; 941/// fix parameters are removed.; 942///; 943/// - n: number of variable parameters; 944 ; 945void TFumili::InvertZ(Int_t n); 946{; 947 static Double_t am = 3.4e138;; 948 static Double_t rp = 5.0e-14;; 949 Double_t ap, aps, c, d;; 950 Double_t *r_1=fR;; 951 Double_t *pl_1=fPL;; 952 Double_t *z_1=fZ;; 953 Int_t i, k, l, ii, ki, li, kk, ni, ll, nk, nl, ir, lk;; 954 if (n < 1) {; 955 return;; 956 }; 957 --pl_1;; 958 --r_1;; 959 --z_1;; 960 aps = am / n;; 961 aps = sqrt(aps);; 962 ap = 1.0e0 / (aps * aps);; 963 ir = 0;; 964 for (i = 1; i <= n; ++i) {; 965 L1:; 966 ++ir;; 967 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:27322,log,log,27322,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,3,"['Log', 'log']","['Log', 'log', 'log-likelihood']"
Testability,"924////////////////////////////////////////////////////////////////////////////////; 925/// Least square linear fit without weights.; 926///; 927/// Fit a straight line (a0 + a1*x) to the data in this graph.; 928///; 929/// - ndata: number of points to fit; 930/// - first: first point number to fit; 931/// - last: last point to fit O(ndata should be last-first; 932/// - ifail: return parameter indicating the status of the fit (ifail=0, fit is OK); 933///; 934/// extracted from CERNLIB LLSQ: Translated to C++ by Rene Brun; 935 ; 936void TMultiGraph::LeastSquareLinearFit(Int_t ndata, Double_t &a0, Double_t &a1,; 937 Int_t &ifail, Double_t xmin, Double_t xmax); 938{; 939 Double_t xbar, ybar, x2bar;; 940 Int_t i;; 941 Double_t xybar;; 942 Double_t fn, xk, yk;; 943 Double_t det;; 944 ; 945 ifail = -2;; 946 xbar = ybar = x2bar = xybar = 0;; 947 Int_t np = 0;; 948 TGraph *g;; 949 TIter next(fGraphs);; 950 Double_t *px, *py;; 951 Int_t npp;; 952 while ((g = (TGraph*) next())) {; 953 px=g->GetX();; 954 py=g->GetY();; 955 npp=g->GetN();; 956 for (i = 0; i < npp; ++i) {; 957 xk = px[i];; 958 if (xk < xmin || xk > xmax) continue;; 959 np++;; 960 yk = py[i];; 961 if (ndata < 0) {; 962 if (yk <= 0) yk = 1e-9;; 963 yk = TMath::Log(yk);; 964 }; 965 xbar += xk;; 966 ybar += yk;; 967 x2bar += xk*xk;; 968 xybar += xk*yk;; 969 }; 970 }; 971 fn = Double_t(np);; 972 det = fn*x2bar - xbar*xbar;; 973 ifail = -1;; 974 if (det <= 0) {; 975 if (fn > 0) a0 = ybar/fn;; 976 else a0 = 0;; 977 a1 = 0;; 978 return;; 979 }; 980 ifail = 0;; 981 a0 = (x2bar*ybar - xbar*xybar) / det;; 982 a1 = (fn*xybar - xbar*ybar) / det;; 983}; 984 ; 985 ; 986////////////////////////////////////////////////////////////////////////////////; 987/// Return 1 if the point (x,y) is inside one of the graphs 0 otherwise.; 988 ; 989Int_t TMultiGraph::IsInside(Double_t x, Double_t y) const; 990{; 991 Int_t in = 0;; 992 if (!fGraphs) return in;; 993 TGraph *g;; 994 TIter next(fGraphs);; 995 while ((g = (TGraph*) next())) {; 99",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:30852,Log,Log,30852,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['Log'],['Log']
Testability,928) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.978 (0.964) 0.997 (0.997) 0.993 (0.986) ; : bg0 0.952 (0.924) - 0.936 (0.928) 0.992 (0.990) ; : bg1 1.000 (1.000) 0.945 (0.936) - 0.998 (0.995) ; : bg2 0.994 (0.985) 0.998 (0.998) 0.998 (0.998) - ; : ; : === Showing confusion matrix for method : PDEFoam ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.289 (0.233) 0.467 (0.436) 0.421 (0.332) ; : bg0 0.100 (0.045) - 0.132 (0.116) 0.540 (0.313) ; : bg1 0.209 (0.434) 0.153 (0.092) - 0.347 (0.323) ; : bg2 0.560 (0.552) 0.445 (0.424) 0.501 (0.506) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.665 (0.640) 0.854 (0.822) 0.807 (0.790) ; : bg0 0.538 (0.520) - 0.415 (0.374) 0.843 (0.833) ; : bg1 0.885 (0.886) 0.542 (0.491) - 0.728 (0.646) ; : bg2 0.928 (0.890) 0.956 (0.959) 0.847 (0.895) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.898 (0.878) 0.971 (0.950) 0.982 (0.975) ; : bg0 0.828 (0.810) - 0.696 (0.676) 0.954 (0.951) ; : bg1 0.951 (0.966) 0.803 (0.745) - 0.958 (0.966) ; : bg2 0.998 (0.991) 0.998 (0.996) 0.998 (0.993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:29015,test,test,29015,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,"94 he was in charge of the Application Software group in the computing division. In 1995, at a time when the majority of software gurus had decided to follow a dead-end line, he created the ROOT system while working for the NA49 heavy ion experiment at the SPS. Rene has led the ROOT project from 1995-2010.; ; . Fons Rademakers ; ; Fons received his Ph.D. in particle physics from the Univ. of Amsterdam in 1991 for his work on event displays and data analysis for the DELPHI experiment at CERN's LEP collider. Since then he has worked at CERN and been involved in designing and developing data analysis programs. In 1991 he joined the PAW project where he developed the column wise-ntuples (a column-oriented storage system) and PIAF, a parallel data analysis system. In 1995, while working as Linux evangelist for Hewlett-Packard at CERN, he started with Rene Brun the ROOT project and has been involved in all aspects of the system since then. In 2001 Fons joined the ALICE collaboration and has worked as software architect on the initial version of the AliRoot framework. In recent years his special attention has gone to high performance parallel computing using PROOF. Fons took over from Rene Brun as ROOT project leader in 2011 and has led the project till 2014, culminating in the release of ROOT 6.; ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:4372,test,tests,4372,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability,"945/// Static function returning `gStyle->GetAxisMaxDigits()`.; 946 ; 947Int_t TGaxis::GetMaxDigits(); 948{; 949 return gStyle->GetAxisMaxDigits();; 950}; 951 ; 952////////////////////////////////////////////////////////////////////////////////; 953/// Internal method to import TAxis attributes to this TGaxis.; 954 ; 955void TGaxis::ImportAxisAttributes(TAxis *axis); 956{; 957 // cleanup previously configured custom labels; 958 CleanupModLabs();; 959 ; 960 fAxis = axis;; 961 SetLineColor(axis->GetAxisColor());; 962 SetTextColor(axis->GetTitleColor());; 963 SetTextFont(axis->GetTitleFont());; 964 SetLabelColor(axis->GetLabelColor());; 965 SetLabelFont(axis->GetLabelFont());; 966 SetLabelSize(axis->GetLabelSize());; 967 SetLabelOffset(axis->GetLabelOffset());; 968 SetTickSize(axis->GetTickLength());; 969 SetTitle(axis->GetTitle());; 970 SetTitleOffset(axis->GetTitleOffset());; 971 SetTitleSize(axis->GetTitleSize());; 972 SetBit(TAxis::kCenterTitle, axis->TestBit(TAxis::kCenterTitle));; 973 SetBit(TAxis::kCenterLabels, axis->TestBit(TAxis::kCenterLabels));; 974 SetBit(TAxis::kRotateTitle, axis->TestBit(TAxis::kRotateTitle));; 975 SetBit(TAxis::kNoExponent, axis->TestBit(TAxis::kNoExponent));; 976 SetBit(TAxis::kTickPlus, axis->TestBit(TAxis::kTickPlus));; 977 SetBit(TAxis::kTickMinus, axis->TestBit(TAxis::kTickMinus));; 978 SetBit(TAxis::kMoreLogLabels, axis->TestBit(TAxis::kMoreLogLabels));; 979 if (axis->GetDecimals()) SetBit(TAxis::kDecimals); //the bit is in TAxis::fAxis2; 980 SetTimeFormat(axis->GetTimeFormat());; 981}; 982 ; 983////////////////////////////////////////////////////////////////////////////////; 984/// Draw this axis with its current attributes.; 985 ; 986void TGaxis::Paint(Option_t *); 987{; 988 if (!gPad) return;; 989 ; 990 Double_t wmin = fWmin;; 991 Double_t wmax = fWmax;; 992 Int_t ndiv = fNdiv;; 993 ; 994 // following code required to support toggle of lin/log scales; 995 Double_t x1 = gPad->XtoPad(fX1);; 996 Double_t y1 = gPad->YtoPad(fY1);; 9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:33554,Test,TestBit,33554,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,7,['Test'],['TestBit']
Testability,"949 ; 950 // Split training data into training and validation set; 951 const std::vector<Event *> &allData = GetEventCollection(Types::kTraining);; 952 const std::vector<Event *> trainingInputData =; 953 std::vector<Event *>(allData.begin(), allData.begin() + nTrainingSamples);; 954 const std::vector<Event *> testInputData =; 955 std::vector<Event *>(allData.begin() + nTrainingSamples, allData.end());; 956 ; 957 if (trainingInputData.size() != nTrainingSamples) {; 958 Log() << kFATAL << ""Inconsistent training sample size"" << Endl;; 959 }; 960 if (testInputData.size() != nTestSamples) {; 961 Log() << kFATAL << ""Inconsistent test sample size"" << Endl;; 962 }; 963 ; 964 size_t nThreads = 1;; 965 TMVAInput_t trainingTuple = std::tie(trainingInputData, DataInfo());; 966 TMVAInput_t testTuple = std::tie(testInputData, DataInfo());; 967 DataLoader_t trainingData(trainingTuple, nTrainingSamples,; 968 net.GetBatchSize(), net.GetInputWidth(),; 969 net.GetOutputWidth(), nThreads);; 970 DataLoader_t testData(testTuple, nTestSamples, testNet.GetBatchSize(),; 971 net.GetInputWidth(), net.GetOutputWidth(),; 972 nThreads);; 973 DNN::TGradientDescent<TCuda<>> minimizer(settings.learningRate,; 974 settings.convergenceSteps,; 975 settings.testInterval);; 976 ; 977 std::vector<TNet<TCuda<>>> nets{};; 978 std::vector<TBatch<TCuda<>>> batches{};; 979 nets.reserve(nThreads);; 980 for (size_t i = 0; i < nThreads; i++) {; 981 nets.push_back(net);; 982 for (size_t j = 0; j < net.GetDepth(); j++); 983 {; 984 auto &masterLayer = net.GetLayer(j);; 985 auto &layer = nets.back().GetLayer(j);; 986 TCuda<>::Copy(layer.GetWeights(),; 987 masterLayer.GetWeights());; 988 TCuda<>::Copy(layer.GetBiases(),; 989 masterLayer.GetBiases());; 990 }; 991 }; 992 ; 993 bool converged = false;; 994 size_t stepCount = 0;; 995 size_t batchesInEpoch = nTrainingSamples / net.GetBatchSize();; 996 ; 997 std::chrono::time_point<std::chrono::system_clock> start, end;; 998 start = std::chrono::system_clock::now();; 999 ; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:34905,test,testData,34905,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,3,['test'],"['testData', 'testNet', 'testTuple']"
Testability,"95% confidence interval. MCMCCalculator(RooAbsData& data, const RooStats::ModelConfig& model, RooStats::ProposalFunction& proposalFunction, Int_t numIters, RooArgList* axes = NULL, Double_t size = 0.05); alternate constructor, specifying many arguments. void SetModel(const RooStats::ModelConfig& model); set the model. MCMCCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, RooAbsPdf& priorPdf, RooStats::ProposalFunction& proposalFunction, Int_t numIters, RooArgList* axes = NULL, Double_t size = 0.05). void SetupBasicUsage(); Setting automatic configuration with basic settings. Uses a; UniformProposal,10,000 iterations, 40 burn in steps, 50 bins for each; RooRealVar, determines interval by keys, and turns on sparse histogram; mode in the MCMCInterval. Finds a 95% confidence interval. MCMCInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval. MCMCCalculator(); default constructor. virtual ~MCMCCalculator(); {}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet if not already there. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCCalculator.html:10603,test,test,10603,root/html526/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCCalculator.html,1,['test'],['test']
Testability,"95; TVirtualPad.h; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttBBox2DAbstract base class for elements drawn in the editor.Definition TAttBBox2D.h:19; TAxisClass to manage histogram axis.Definition TAxis.h:31; TBoxCreate a Box.Definition TBox.h:22; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TCanvasImpABC describing GUI independent main window (with menubar, scrollbars and a drawing area).Definition TCanvasImp.h:30; TCanvasThe Canvas class.Definition TCanvas.h:23; TFrameDefine a Frame.Definition TFrame.h:19; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TListA doubly linked list.Definition TList.h:38; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetGridxvoid SetGridx(Int_t value=1) overrideDefinition TPad.h:336; TPad::GetBorderModeShort_t GetBorderMode() const overrideDefinition TPad.h:199; TPad::OpaqueMovingBool_t OpaqueMoving() const overrideIs pad moving in opaque mode ?Definition TPad.cxx:2879; TPad::SetBorderSizevoid SetBorderSize(Short_t bordersize) overrideDefinition TPad.h:326; TPad::PaintTextNDCvoid PaintTextNDC(Double_t u, Double_t v, const char *text) overridePaint text in CurrentPad NDC coordinates.Definition TPad.cxx:4613; TPad::GetTickyInt_t GetTicky() const overrideDefinition TPad.h:239; TPad::Clipvirtual Int_t Clip(Float_t *x, Float_t *y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt)Clipping routine: Cohen Sutherland algorithm.Definition TPad.cxx:768; TPad::HideToolTipvirtual void HideToolTip(Int_t event)Hide tool tip depending on the event type.Definition TPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:29293,Test,TestBit,29293,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['Test'],['TestBit']
Testability,"96 // Booking Seed; 2297 BookMethod(seedloader, theMethod, methodTitle, theOption);; 2298 ; 2299 // Train/Test/Evaluation; 2300 TrainAllMethods();; 2301 TestAllMethods();; 2302 EvaluateAllMethods();; 2303 ; 2304 // getting ROC; 2305 ROC[x] = GetROCIntegral(xbitset.to_string(), methodTitle);; 2306 ; 2307 // cleaning information to process sub-seeds; 2308 TMVA::MethodBase *smethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[xbitset.to_string().c_str()][0][0]);; 2309 TMVA::ResultsClassification *sresults = (TMVA::ResultsClassification *)smethod->Data()->GetResults(; 2310 smethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2311 delete sresults;; 2312 delete seedloader;; 2313 this->DeleteAllMethods();; 2314 ; 2315 fMethodsMap.clear();; 2316 // removing global result because it is requiring a lot of RAM for all seeds; 2317 }; 2318 ; 2319 for (x = 0; x < range; x++) {; 2320 SROC = ROC[x];; 2321 for (uint32_t i = 0; i < VIBITS; ++i) {; 2322 if (x & (uint64_t(1) << i)) {; 2323 y = x & ~(1 << i);; 2324 std::bitset<VIBITS> ybitset(y);; 2325 // need at least one variable; 2326 // NOTE: if sub-seed is zero then is the special case; 2327 // that count in xbitset is 1; 2328 uint32_t ny = static_cast<uint32_t>( log(x - y) / 0.693147 ) ;; 2329 if (y == 0) {; 2330 importances[ny] = SROC - 0.5;; 2331 continue;; 2332 }; 2333 ; 2334 // getting ROC; 2335 SSROC = ROC[y];; 2336 importances[ny] += SROC - SSROC;; 2337 // cleaning information; 2338 }; 2339 }; 2340 }; 2341 std::cout << ""--- Variable Importance Results (All)"" << std::endl;; 2342 return GetImportance(nbits, importances, varNames);; 2343}; 2344 ; 2345static uint64_t sum(uint64_t i); 2346{; 2347 // add a limit for overflows; 2348 if (i > 62) return 0;; 2349 return static_cast<uint64_t>( std::pow(2, i + 1)) - 1;; 2350 // uint64_t _sum = 0;; 2351 // for (uint64_t n = 0; n < i; n++); 2352 // _sum += pow(2, n);; 2353 // return _sum;; 2354}; 2355 ; 2356/////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:97824,log,log,97824,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['log'],['log']
Testability,"96 ; 297 Init();; 298 SetBit(kMenuBar,true);; 299 if (form < 0) {; 300 form = -form;; 301 SetBit(kMenuBar,false);; 302 }; 303 ; 304 fCanvas = this;; 305 ; 306 fCanvasID = -1;; 307 TCanvas *old = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(name);; 308 if (old && old->IsOnHeap()) {; 309 Warning(""Constructor"",""Deleting canvas with same name: %s"",name);; 310 delete old;; 311 }; 312 if (gROOT->IsBatch()) { //We are in Batch mode; 313 fWindowTopX = fWindowTopY = 0;; 314 if (form == 1) {; 315 fWindowWidth = gStyle->GetCanvasDefW();; 316 fWindowHeight = gStyle->GetCanvasDefH();; 317 } else {; 318 fWindowWidth = 500;; 319 fWindowHeight = 500;; 320 }; 321 fCw = fWindowWidth;; 322 fCh = fWindowHeight;; 323 fCanvasImp = gBatchGuiFactory->CreateCanvasImp(this, name, fCw, fCh);; 324 if (!fCanvasImp) return;; 325 fBatch = kTRUE;; 326 } else { //normal mode with a screen window; 327 Float_t cx = gStyle->GetScreenFactor();; 328 if (form < 1 || form > 20) form = 1;; 329 auto factory = gROOT->IsWebDisplay() ? gBatchGuiFactory : gGuiFactory;; 330 Int_t ux, uy, cw, ch;; 331 if (form == 1) {; 332 cw = gStyle->GetCanvasDefW();; 333 ch = gStyle->GetCanvasDefH();; 334 ux = gStyle->GetCanvasDefX();; 335 uy = gStyle->GetCanvasDefY();; 336 } else {; 337 cw = ch = 500;; 338 ux = uy = form * 10;; 339 }; 340 ; 341 fCanvasImp = factory->CreateCanvasImp(this, name, Int_t(cx*ux), Int_t(cx*uy), UInt_t(cx*cw), UInt_t(cx*ch));; 342 if (!fCanvasImp) return;; 343 ; 344 if (!gROOT->IsBatch() && fCanvasID == -1); 345 fCanvasID = fCanvasImp->InitWindow();; 346 ; 347 fCanvasImp->ShowMenuBar(TestBit(kMenuBar));; 348 fBatch = kFALSE;; 349 }; 350 ; 351 CreatePainter();; 352 ; 353 fName = GetNewCanvasName(name); // avoid Modified() signal from SetName; 354 SetTitle(title); // requires fCanvasImp set; 355 Build();; 356 ; 357 // Popup canvas; 358 fCanvasImp->Show();; 359}; 360 ; 361////////////////////////////////////////////////////////////////////////////////; 362/// Create a new canvas at a random position.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:10742,Test,TestBit,10742,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability,"96 xlh[0] = cosb*xli[i-1]-sinb*ycur;; 4297 ylh[0] = sinb*xli[i-1]+cosb*ycur;; 4298 xlh[1] = cosb*xli[i] -sinb*ycur;; 4299 ylh[1] = sinb*xli[i] +cosb*ycur;; 4300 // Convert hatches' positions from true NDC to WC; 4301 xlh[0] = (xlh[0]/wndc)*(rwxmax-rwxmin)+rwxmin;; 4302 ylh[0] = (ylh[0]/hndc)*(rwymax-rwymin)+rwymin;; 4303 xlh[1] = (xlh[1]/wndc)*(rwxmax-rwxmin)+rwxmin;; 4304 ylh[1] = (ylh[1]/hndc)*(rwymax-rwymin)+rwymin;; 4305 gPad->PaintLine(xlh[0], ylh[0], xlh[1], ylh[1]);; 4306 }; 4307 }; 4308}; 4309 ; 4310////////////////////////////////////////////////////////////////////////////////; 4311/// Paint line in CurrentPad World coordinates.; 4312 ; 4313void TPad::PaintLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); 4314{; 4315 Double_t x[2] = {x1, x2}, y[2] = {y1, y2};; 4316 ; 4317 //If line is totally clipped, return; 4318 if (TestBit(TGraph::kClipFrame)) {; 4319 if (Clip(x,y,fUxmin,fUymin,fUxmax,fUymax) == 2) return;; 4320 } else {; 4321 if (Clip(x,y,fX1,fY1,fX2,fY2) == 2) return;; 4322 }; 4323 ; 4324 if (!gPad->IsBatch() && GetPainter()); 4325 GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);; 4326 ; 4327 if (gVirtualPS); 4328 gVirtualPS->DrawPS(2, x, y);; 4329 ; 4330 Modified();; 4331}; 4332 ; 4333////////////////////////////////////////////////////////////////////////////////; 4334/// Paint line in normalized coordinates.; 4335 ; 4336void TPad::PaintLineNDC(Double_t u1, Double_t v1,Double_t u2, Double_t v2); 4337{; 4338 static Double_t xw[2], yw[2];; 4339 if (!gPad->IsBatch() && GetPainter()); 4340 GetPainter()->DrawLineNDC(u1, v1, u2, v2);; 4341 ; 4342 if (gVirtualPS) {; 4343 xw[0] = fX1 + u1*(fX2 - fX1);; 4344 xw[1] = fX1 + u2*(fX2 - fX1);; 4345 yw[0] = fY1 + v1*(fY2 - fY1);; 4346 yw[1] = fY1 + v2*(fY2 - fY1);; 4347 gVirtualPS->DrawPS(2, xw, yw);; 4348 }; 4349 ; 4350 Modified();; 4351}; 4352 ; 4353////////////////////////////////////////////////////////////////////////////////; 4354/// Paint 3-D line in the CurrentPad.; 4355 ; 4356void TPad::PaintLine3D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:137541,Test,TestBit,137541,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Test'],['TestBit']
Testability,"96////////////////////////////////////////////////////////////////////////////////; 1597/// Returns the maximum value of the function; 1598///; 1599/// Method:; 1600/// First, the grid search is used to bracket the maximum; 1601/// with the step size = (xmax-xmin)/fNpx.; 1602/// This way, the step size can be controlled via the SetNpx() function.; 1603/// If the function is unimodal or if its extrema are far apart, setting; 1604/// the fNpx to a small value speeds the algorithm up many times.; 1605/// Then, Brent's method is applied on the bracketed interval; 1606/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1607/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1608/// of iteration of the Brent algorithm; 1609/// If the flag logx is set the grid search is done in log step size; 1610/// This is done automatically if the log scale is set in the current Pad; 1611///; 1612/// NOTE: see also TF1::GetMaximumX and TF1::GetX; 1613 ; 1614Double_t TF1::GetMaximum(Double_t xmin, Double_t xmax, Double_t epsilon, Int_t maxiter, Bool_t logx) const; 1615{; 1616 if (xmin >= xmax) {; 1617 xmin = fXmin;; 1618 xmax = fXmax;; 1619 }; 1620 ; 1621 if (!logx && gPad != nullptr) logx = gPad->GetLogx();; 1622 ; 1623 ROOT::Math::BrentMinimizer1D bm;; 1624 GInverseFunc g(this);; 1625 ROOT::Math::WrappedFunction<GInverseFunc> wf1(g);; 1626 bm.SetFunction(wf1, xmin, xmax);; 1627 bm.SetNpx(fNpx);; 1628 bm.SetLogScan(logx);; 1629 bm.Minimize(maxiter, epsilon, epsilon);; 1630 Double_t x;; 1631 x = - bm.FValMinimum();; 1632 ; 1633 return x;; 1634}; 1635 ; 1636 ; 1637////////////////////////////////////////////////////////////////////////////////; 1638/// Returns the X value corresponding to the maximum value of the function; 1639///; 1640/// Method:; 1641/// First, the grid search is used to bracket the maximum; 1642/// with the step size = (xmax-xmin)/fNpx.; 1643/// This way, the step size can be controlled via the SetNpx() functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:58534,log,logx,58534,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,6,['log'],"['log', 'logx']"
Testability,"96template <>; 397std::vector<double> fetchValue(const std::map<TString, TString> & keyValueMap,; 398 TString key,; 399 std::vector<double> defaultValue); 400{; 401 TString parseString (fetchValue (keyValueMap, key));; 402 if (parseString == """") {; 403 return defaultValue;; 404 }; 405 parseString.ToUpper ();; 406 std::vector<double> values;; 407 ; 408 const TString tokenDelim (""+"");; 409 TObjArray* tokenStrings = parseString.Tokenize (tokenDelim);; 410 TIter nextToken (tokenStrings);; 411 TObjString* tokenString = (TObjString*)nextToken ();; 412 for (; tokenString != NULL; tokenString = (TObjString*)nextToken ()) {; 413 std::stringstream sstr;; 414 double currentValue;; 415 sstr << tokenString->GetString ().Data ();; 416 sstr >> currentValue;; 417 values.push_back (currentValue);; 418 }; 419 return values;; 420}; 421 ; 422////////////////////////////////////////////////////////////////////////////////; 423 ; 424void TMVA::MethodDNN::ProcessOptions(); 425{; 426 if (IgnoreEventsWithNegWeightsInTraining()) {; 427 Log() << kINFO; 428 << ""Will ignore negative events in training!""; 429 << Endl;; 430 }; 431 ; 432 if (fArchitectureString == ""STANDARD"") {; 433 Log() << kERROR << ""The STANDARD architecture has been deprecated. ""; 434 ""Please use Architecture=CPU or Architecture=CPU.""; 435 ""See the TMVA Users' Guide for instructions if you ""; 436 ""encounter problems.""; 437 << Endl;; 438 Log() << kFATAL << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been imp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:14314,Log,Log,14314,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,['Log'],['Log']
Testability,"97 } else {; 1198 if (!fClass->IsVersioned()) {; 1199 Fatal(""BuildCheck"", ""\n\; 1200 The StreamerInfo of unversioned class %s \n\; 1201 has the same version (=%d) as the active class but an old checksum.\n\; 1202 This should not happen. An assert will follow.\n"", GetName(), fClassVersion);; 1203 }; 1204 }; 1205 }; 1206 if (!fClass->IsLoaded() && this->fOnFileClassVersion>1); 1207 {; 1208 ROOT::ResetClassVersion(fClass,(const char*)-1, this->fClassVersion);; 1209 }; 1210 }; 1211 // FIXME: This code can never execute because Build() calls; 1212 // TStreamerElement::Class()->IgnoreTObjectStreamer(); 1213 // so our bits are never saved to the file.; 1214 if (TestBit(kIgnoreTObjectStreamer)) {; 1215 fClass->IgnoreTObjectStreamer();; 1216 }; 1217 if ((fClassVersion < -1) || (fClassVersion > 65000)) {; 1218 printf(""ERROR reading TStreamerInfo: %s fClassVersion=%d\n"", GetName(), fClassVersion);; 1219 SetBit(kCanDelete);; 1220 fNumber = -1;; 1221 return;; 1222 }; 1223 ; 1224 if (!fClass->TestBit(TClass::kWarned); 1225 && fClass->GetState() >= TClass::kInterpreted; 1226 && GetCheckSum() != fClass->GetCheckSum(); 1227 && fClassVersion == fClass->GetClassVersion()) {; 1228 // We got here, thus we are a perfect alias for the current streamerInfo,; 1229 // but we might had odd v5 style name spelling, so let's prefer the; 1230 // current one.; 1231 auto maininfo = fClass->GetStreamerInfo();; 1232 if (maininfo) {; 1233 fNumber = maininfo->GetNumber(); // For ReadStreamerInfo to record the expected slot.; 1234 }; 1235 SetBit(kCanDelete);; 1236 return;; 1237 }; 1238 ; 1239 fClass->RegisterStreamerInfo(this);; 1240 ++fgCount;; 1241 fNumber = fgCount;; 1242 ; 1243 // Since we just read this streamerInfo from file, it has already been built.; 1244 fIsBuilt = kTRUE;; 1245 ; 1246 //add to the global list of StreamerInfo; 1247 TObjArray* infos = (TObjArray*) gROOT->GetListOfStreamerInfo();; 1248 infos->AddAtAndExpand(this, fNumber);; 1249}; 1250 ; 1251///////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:46423,Test,TestBit,46423,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,['Test'],['TestBit']
Testability,98 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614 | 101.983 68.108 0.0201318 0.00182452 43698.5 0; : 615 Minimum Test error found - save the configuration ; : 615 | 100.329 67.3723 0.0201441 0.00182383 43667.6 0; : 616 Minimum Test error found - save the configuration ; : 616 | 99.0728 66.9343 0.0201375 0.00182665 43689.9 0; : 617 Minimum Test error found - save the configuration ; : 617 | 97.8374 65.9501 0.0201618 0.00184005 43664 0; : 618 Minimum Test error found - save the configuration ; : 618 | 96.3739 65.107 0.0201565 0.0018204 43629.8 0; : 619 Minimum Test error found - save the configuration ; : 619 | 95.4431 64.9258 0.0202106 0.00183339 43532.2 0; : 620 Minimum Test error found - save the configuration ; : 620 | 94.1902 64.0162 0.020412 0.0018551 43110.6 0; : 621 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:80096,Test,Test,80096,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,"99 for (Int_t i = 0; i < 3; i++); 1700 fTranslation[i] = 0.0;; 1701 }; 1702 if (other.IsRotation()) {; 1703 SetBit(kGeoRotation);; 1704 SetBit(kGeoMatrixOwned);; 1705 fRotation = new TGeoRotation(other);; 1706 } else; 1707 fRotation = nullptr;; 1708}; 1709 ; 1710////////////////////////////////////////////////////////////////////////////////; 1711/// Constructor from a translation and a rotation.; 1712 ; 1713TGeoCombiTrans::TGeoCombiTrans(const TGeoTranslation &tr, const TGeoRotation &rot); 1714{; 1715 if (tr.IsTranslation()) {; 1716 SetBit(kGeoTranslation);; 1717 const Double_t *trans = tr.GetTranslation();; 1718 memcpy(fTranslation, trans, kN3);; 1719 } else {; 1720 for (Int_t i = 0; i < 3; i++); 1721 fTranslation[i] = 0.0;; 1722 }; 1723 if (rot.IsRotation()) {; 1724 SetBit(kGeoRotation);; 1725 SetBit(kGeoMatrixOwned);; 1726 fRotation = new TGeoRotation(rot);; 1727 SetBit(kGeoReflection, rot.TestBit(kGeoReflection));; 1728 } else; 1729 fRotation = nullptr;; 1730}; 1731 ; 1732////////////////////////////////////////////////////////////////////////////////; 1733/// Named ctor.; 1734 ; 1735TGeoCombiTrans::TGeoCombiTrans(const char *name) : TGeoMatrix(name); 1736{; 1737 for (Int_t i = 0; i < 3; i++); 1738 fTranslation[i] = 0.0;; 1739 fRotation = nullptr;; 1740}; 1741 ; 1742////////////////////////////////////////////////////////////////////////////////; 1743/// Constructor from a translation specified by X,Y,Z and a pointer to a rotation. The rotation will not be owned by; 1744/// this.; 1745 ; 1746TGeoCombiTrans::TGeoCombiTrans(Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot) : TGeoMatrix(""""); 1747{; 1748 SetTranslation(dx, dy, dz);; 1749 fRotation = nullptr;; 1750 SetRotation(rot);; 1751}; 1752 ; 1753////////////////////////////////////////////////////////////////////////////////; 1754/// Named ctor; 1755 ; 1756TGeoCombiTrans::TGeoCombiTrans(const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot); 1757 : TGeoMatrix(name); 1758{; 1759 Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:60899,Test,TestBit,60899,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Test'],['TestBit']
Testability,"992 ""Declaring assembly %s as possibly overlapping inside %s not allowed. Using AddNode instead !"",; 2993 vol->GetName(), GetName());; 2994 AddNode(vol, copy_no, mat, option);; 2995}; 2996 ; 2997////////////////////////////////////////////////////////////////////////////////; 2998/// Clone this volume.; 2999/// build a volume with same name, shape and medium; 3000 ; 3001TGeoVolume *TGeoVolumeAssembly::CloneVolume() const; 3002{; 3003 TGeoVolume *vol = new TGeoVolumeAssembly(GetName());; 3004 Int_t i;; 3005 // copy other attributes; 3006 Int_t nbits = 8 * sizeof(UInt_t);; 3007 for (i = 0; i < nbits; i++); 3008 vol->SetAttBit(1 << i, TGeoAtt::TestAttBit(1 << i));; 3009 for (i = 14; i < 24; i++); 3010 vol->SetBit(1 << i, TestBit(1 << i));; 3011 ; 3012 // copy field; 3013 vol->SetField(fField);; 3014 // Set bits; 3015 for (i = 0; i < nbits; i++); 3016 vol->SetBit(1 << i, TObject::TestBit(1 << i));; 3017 vol->SetBit(kVolumeClone);; 3018 // make copy nodes; 3019 vol->MakeCopyNodes(this);; 3020 // CloneNodesAndConnect(vol);; 3021 ((TGeoShapeAssembly *)vol->GetShape())->NeedsBBoxRecompute();; 3022 // copy voxels; 3023 TGeoVoxelFinder *voxels = nullptr;; 3024 if (fVoxels) {; 3025 voxels = new TGeoVoxelFinder(vol);; 3026 vol->SetVoxelFinder(voxels);; 3027 }; 3028 // copy option, uid; 3029 vol->SetOption(fOption);; 3030 vol->SetNumber(fNumber);; 3031 vol->SetNtotal(fNtotal);; 3032 vol->SetTitle(GetTitle());; 3033 // copy extensions; 3034 vol->SetUserExtension(fUserExtension);; 3035 vol->SetFWExtension(fFWExtension);; 3036 return vol;; 3037}; 3038 ; 3039////////////////////////////////////////////////////////////////////////////////; 3040/// Division makes no sense for assemblies.; 3041 ; 3042TGeoVolume *TGeoVolumeAssembly::Divide(const char *, Int_t, Int_t, Double_t, Double_t, Int_t, Option_t *); 3043{; 3044 Error(""Divide"", ""Assemblies cannot be divided"");; 3045 return nullptr;; 3046}; 3047 ; 3048////////////////////////////////////////////////////////////////////////////////;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:108682,Test,TestAttBit,108682,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,3,['Test'],"['TestAttBit', 'TestBit']"
Testability,998) - ; : ; : === Showing confusion matrix for method : PDEFoam ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.289 (0.233) 0.467 (0.436) 0.421 (0.332) ; : bg0 0.100 (0.045) - 0.132 (0.116) 0.540 (0.313) ; : bg1 0.209 (0.434) 0.153 (0.092) - 0.347 (0.323) ; : bg2 0.560 (0.552) 0.445 (0.424) 0.501 (0.506) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.665 (0.640) 0.854 (0.822) 0.807 (0.790) ; : bg0 0.538 (0.520) - 0.415 (0.374) 0.843 (0.833) ; : bg1 0.885 (0.886) 0.542 (0.491) - 0.728 (0.646) ; : bg2 0.928 (0.890) 0.956 (0.959) 0.847 (0.895) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.898 (0.878) 0.971 (0.950) 0.982 (0.975) ; : bg0 0.828 (0.810) - 0.696 (0.676) 0.954 (0.951) ; : bg1 0.951 (0.966) 0.803 (0.745) - 0.958 (0.966) ; : bg2 0.998 (0.991) 0.998 (0.996) 0.998 (0.993) - ; : ; : === Showing confusion matrix for method : DL_CPU ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.398 (0.501) 0.933 (0.951) 0.351 (0.195) ; : bg0 0.339 (0.316) - 0.222 (0.213) 0.419 (0.371) ; : bg1 0.927 (0.909) 0.213 (0.130) - 0.290 (0.332) ; : bg2 0.549 (0.529) 0.546 (0.564) 0.488 (0.509) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.884 (0.909) 0.988 (0.991) 0.784 (0.767) ; : bg0 0.766 (0.764) -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:29419,test,test,29419,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,"9void TMVA::MethodCuts::GetHelpMessage() const; 1720{; 1721 TString bold = gConfig().WriteOptionsReference() ? ""<b>"" : """";; 1722 TString resbold = gConfig().WriteOptionsReference() ? ""</b>"" : """";; 1723 TString brk = gConfig().WriteOptionsReference() ? ""<br>"" : """";; 1724 ; 1725 Log() << Endl;; 1726 Log() << gTools().Color(""bold"") << ""--- Short description:"" << gTools().Color(""reset"") << Endl;; 1727 Log() << Endl;; 1728 Log() << ""The optimisation of rectangular cuts performed by TMVA maximises "" << Endl;; 1729 Log() << ""the background rejection at given signal efficiency, and scans "" << Endl;; 1730 Log() << ""over the full range of the latter quantity. Three optimisation"" << Endl;; 1731 Log() << ""methods are optional: Monte Carlo sampling (MC), a Genetics"" << Endl;; 1732 Log() << ""Algorithm (GA), and Simulated Annealing (SA). GA and SA are"" << Endl;; 1733 Log() << ""expected to perform best."" << Endl;; 1734 Log() << Endl;; 1735 Log() << ""The difficulty to find the optimal cuts strongly increases with"" << Endl;; 1736 Log() << ""the dimensionality (number of input variables) of the problem."" << Endl;; 1737 Log() << ""This behavior is due to the non-uniqueness of the solution space.""<< Endl;; 1738 Log() << Endl;; 1739 Log() << gTools().Color(""bold"") << ""--- Performance optimisation:"" << gTools().Color(""reset"") << Endl;; 1740 Log() << Endl;; 1741 Log() << ""If the dimensionality exceeds, say, 4 input variables, it is "" << Endl;; 1742 Log() << ""advisable to scrutinize the separation power of the variables,"" << Endl;; 1743 Log() << ""and to remove the weakest ones. If some among the input variables"" << Endl;; 1744 Log() << ""can be described by a single cut (e.g., because signal tends to be"" << Endl;; 1745 Log() << ""larger than background), this can be indicated to MethodCuts via"" << Endl;; 1746 Log() << ""the \""Fsmart\"" options (see option string). Choosing this option"" << Endl;; 1747 Log() << ""reduces the number of requirements for the variable from 2 (min/max)"" << Endl;; 1748 Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:67679,Log,Log,67679,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,3,['Log'],['Log']
Testability,": """",; 15394 ri->http_version,; 15395 conn->status_code,; 15396 conn->num_bytes_sent,; 15397 referer,; 15398 user_agent);; 15399 }; 15400 ; 15401 /* Here we have a log message in log_buf. Call the callback */; 15402 if (conn->phys_ctx->callbacks.log_access) {; 15403 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15404 /* do not log if callack returns non-zero */; 15405 if (fi.access.fp) {; 15406 mg_fclose(&fi.access);; 15407 }; 15408 return;; 15409 }; 15410 }; 15411 ; 15412 /* Store in file */; 15413 if (fi.access.fp) {; 15414 int ok = 1;; 15415 flockfile(fi.access.fp);; 15416 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15417 ok = 0;; 15418 }; 15419 if (fflush(fi.access.fp) != 0) {; 15420 ok = 0;; 15421 }; 15422 funlockfile(fi.access.fp);; 15423 if (mg_fclose(&fi.access) != 0) {; 15424 ok = 0;; 15425 }; 15426 if (!ok) {; 15427 mg_cry_internal(conn,; 15428 ""Error writing log file %s"",; 15429 conn->dom_ctx->config[ACCESS_LOG_FILE]);; 15430 }; 15431 }; 15432}; 15433#else; 15434#error ""Either enable filesystems or provide a custom log_access implementation""; 15435#endif /* Externally provided function */; 15436 ; 15437 ; 15438/* Verify given socket address against the ACL.; 15439 * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.; 15440 */; 15441static int; 15442check_acl(struct mg_context *phys_ctx, const union usa *sa); 15443{; 15444 int allowed, flag, matched;; 15445 struct vec vec;; 15446 ; 15447 if (phys_ctx) {; 15448 const char *list = phys_ctx->dd.config[ACCESS_CONTROL_LIST];; 15449 ; 15450 /* If any ACL is set, deny by default */; 15451 allowed = (list == NULL) ? '+' : '-';; 15452 ; 15453 while ((list = next_option(list, &vec, NULL)) != NULL) {; 15454 flag = vec.ptr[0];; 15455 matched = -1;; 15456 if ((vec.len > 0) && ((flag == '+') || (flag == '-'))) {; 15457 vec.ptr++;; 15458 vec.len--;; 15459 matched = parse_match_net(&vec, sa, 1);; 15460 }; 15461 if (matched < 0) {; 15462 mg_cry_ctx_internal(phys_ctx,; 15463 ""%s: su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:456119,log,log,456119,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['log'],['log']
Testability,": """",; 15395 ri->http_version,; 15396 conn->status_code,; 15397 conn->num_bytes_sent,; 15398 referer,; 15399 user_agent);; 15400 }; 15401 ; 15402 /* Here we have a log message in log_buf. Call the callback */; 15403 if (conn->phys_ctx->callbacks.log_access) {; 15404 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15405 /* do not log if callack returns non-zero */; 15406 if (fi.access.fp) {; 15407 mg_fclose(&fi.access);; 15408 }; 15409 return;; 15410 }; 15411 }; 15412 ; 15413 /* Store in file */; 15414 if (fi.access.fp) {; 15415 int ok = 1;; 15416 flockfile(fi.access.fp);; 15417 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15418 ok = 0;; 15419 }; 15420 if (fflush(fi.access.fp) != 0) {; 15421 ok = 0;; 15422 }; 15423 funlockfile(fi.access.fp);; 15424 if (mg_fclose(&fi.access) != 0) {; 15425 ok = 0;; 15426 }; 15427 if (!ok) {; 15428 mg_cry_internal(conn,; 15429 ""Error writing log file %s"",; 15430 conn->dom_ctx->config[ACCESS_LOG_FILE]);; 15431 }; 15432 }; 15433}; 15434#else; 15435#error ""Either enable filesystems or provide a custom log_access implementation""; 15436#endif /* Externally provided function */; 15437 ; 15438 ; 15439/* Verify given socket address against the ACL.; 15440 * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.; 15441 */; 15442static int; 15443check_acl(struct mg_context *phys_ctx, const union usa *sa); 15444{; 15445 int allowed, flag, matched;; 15446 struct vec vec;; 15447 ; 15448 if (phys_ctx) {; 15449 const char *list = phys_ctx->dd.config[ACCESS_CONTROL_LIST];; 15450 ; 15451 /* If any ACL is set, deny by default */; 15452 allowed = (list == NULL) ? '+' : '-';; 15453 ; 15454 while ((list = next_option(list, &vec, NULL)) != NULL) {; 15455 flag = vec.ptr[0];; 15456 matched = -1;; 15457 if ((vec.len > 0) && ((flag == '+') || (flag == '-'))) {; 15458 vec.ptr++;; 15459 vec.len--;; 15460 matched = parse_match_net(&vec, sa, 1);; 15461 }; 15462 if (matched < 0) {; 15463 mg_cry_ctx_internal(phys_ctx,; 15464 ""%s: su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:456152,log,log,456152,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['log'],['log']
Testability,": ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mTMVA_CNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:Va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:3629,Test,TestRepetitions,3629,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['TestRepetitions']
Testability,: --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.70053 0.692869 0.629389 0.0419042 4255.43 0; : 2 | 0.694153 0.694394 0.642643 0.0421501 4163.24 1; : 3 | 0.689625 0.697522 0.642119 0.0416746 4163.58 2; : 4 | 0.681203 0.694822 0.637781 0.0412238 4190.71 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for traini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16400,Test,Test,16400,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability,": -----------------------------------------------------------; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.027271 1.0264 [ -3.3694 5.7307 ]; : var2: 0.0028453 0.98623 [ -5.7307 5.7307 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: BDTG; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 2.09 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.234 sec ; TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on test sample:; : (""Bias"" quotes the mean deviation of the regression from true target.; : ""MutInf"" is the ""Mutual Information"" between regression and target.; : Indicated by ""_T"" are the corresponding ""truncated"" quantities ob-; : tained when removing events deviating more than 2sigma from average.); : --------------------------------------------------------------------------------------------------; : --------------------------------------------------------------------------------------------------; : datasetreg DNN_CPU :-0.000247 0.00357 1.51 1.22 | 3.276 3.288; : datasetreg BDTG : 0.0707 0.102 2.45 1.95 | 3.100 3.175; : datasetreg KNN : -0.237 0.578 5.17 3.44 | 2.898 2.939; : datasetreg PDEFoam : 0.106 -0.0677 9.22 7.74 | 2.283 2.375; : datasetreg LD : 0.461 2.22 19.6 17.6 | 1.985 1.979; : --------------------------------------------------------------------------------------------------; : ; : Evaluation results ranked by smallest RMS on training sample:; : (overtrai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:132426,test,test,132426,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['test'],['test']
Testability,: 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum Test error found - save the configuration ; : 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum Test error found - save the configuration ; : 115 | 11961.2 10939.8 0.0202696 0.00181495 43349.5 0; : 116 Minimum Test error found - save the configuration ; : 116 | 11860.6 10843.2 0.0200362 0.00180159 43872.5 0; : 117 Minimum Test error found - save the configuration ; : 117 | 11765.1 10743.9 0.0200658 0.00179585 43787.7 0; : 118 Minimum Test error found - save the configuration ; : 118 | 11664.5 10650.2 0.0200137 0.00179245 43904.8 0; : 119 Minimum Test error found - save the configuration ; : 119 | 11569.9 10554.7 0.0200191 0.00179411 43895.9 0; : 120 Minimum Test error found - save the configuration ; : 120 | 11473 10462 0.0200241 0.00179418 43883.8 0; : 121 Minimum Test error found - save the configuration ; : 121 | 11379.1 10368.9 0.0200276 0.00179623 43880.4 0; : 122 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:23682,Test,Test,23682,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 111 | 12365.7 11337.8 0.0200081 0.00179319 43920.1 0; : 112 Minimum Test error found - save the configuration ; : 112 | 12261.9 11237.7 0.02002 0.00179362 43892.3 0; : 113 Minimum Test error found - save the configuration ; : 113 | 12160 11139.2 0.0201211 0.00180176 43669.7 0; : 114 Minimum Test error found - save the configuration ; : 114 | 12060.2 11039.6 0.020348 0.00184935 43246.4 0; : 115 Minimum Test error found - save the configuration ; : 115 | 11961.2 10939.8 0.0202696 0.00181495 43349.5 0; : 116 Minimum Test error found - save the configuration ; : 116 | 11860.6 10843.2 0.0200362 0.00180159 43872.5 0; : 117 Minimum Test error found - save the configuration ; : 117 | 11765.1 10743.9 0.0200658 0.00179585 43787.7 0; : 118 Minimum Test error found - save the configuration ; : 118 | 11664.5 10650.2 0.0200137 0.00179245 43904.8 0; : 119 Minimum Test error found - save the configuration ; : 119 | 11569.9 10554.7 0.0200191 0.00179411 43895.9 0; : 120 Minimum Test error found - save the configuration ; : 120 | 11473 10462 0.0200241 0.00179418 43883.8 0; : 121 Minimum Test error found - save the configuration ; : 121 | 11379.1 10368.9 0.0200276 0.00179623 43880.4 0; : 122 Minimum Test error found - save the configuration ; : 122 | 11283.5 10279 0.0203977 0.00185462 43142.8 0; : 123 Minimum Test error found - save the configuration ; : 123 | 11193.7 10184.6 0.0202751 0.00180182 43305.7 0; : 124 Minimum Test error found - save the configuration ; : 124 | 11099.9 10093.3 0.0200203 0.00180095 43909.4 0; : 125 Minimum Test error found - save the configuration ; : 125 | 11007.6 10003.9 0.020012 0.00179997 43927 0; : 126 Minimum Test error found - save the configuration ; : 126 | 10916.6 9915.56 0.020034 0.00179861 43870.8 0; : 127 Minimum Test error found - save the configuration ; : 127 | 10828 9825.55 0.020018 0.00180003 43912.6 0; : 128 Minimum Test error found - save the configuration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:24477,Test,Test,24477,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Minimum Test error found - save the configuration ; : 196 | 6137.18 5180.37 0.0200943 0.00180721 43746.7 0; : 197 Minimum Test error found - save the configuration ; : 197 | 6087.3 5129.97 0.0200908 0.00180793 43756.8 0; : 198 Minimum Test error found - save the configuration ; : 198 | 6036.37 5081.81 0.0200859 0.00180009 43749.7 0; : 199 Minimum Test error found - save the configuration ; : 199 | 5987.5 5033.69 0.0200862 0.001808 43768 0; : 200 Minimum Test error found - save the configuration ; : 200 | 5938.96 4985.44 0.0201058 0.00181448 43736.6 0; : 201 Minimum Test error found - save the configuration ; : 201 | 5891.43 4936.26 0.0201175 0.00184013 43770 0; : 202 Minimum Test error found - save the configuration ; : 202 | 5842.14 4889.6 0.0203335 0.00187992 43352.1 0; : 203 Minimum Test error found - save the configuration ; : 203 | 5794.67 4843.13 0.0203128 0.00181164 43240.6 0; : 204 Minimum Test error found - save the configuration ; : 204 | 5748.17 4795.8 0.0204843 0.00186518 42966.5 0; : 205 Minimum Test error found - save the configuration ; : 205 | 5701.17 4749.25 0.0206407 0.00185898 42594.5 0; : 206 Minimum Test error found - save the configuration ; : 206 | 5653.72 4704.65 0.0205823 0.00187697 42768.5 0; : 207 Minimum Test error found - save the configuration ; : 207 | 5608.52 4659.29 0.0205316 0.00181286 42737.8 0; : 208 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:33409,Test,Test,33409,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 235 | 4458.22 3537.88 0.0202146 0.00181434 43477.6 0; : 236 Minimum Test error found - save the configuration ; : 236 | 4420.27 3503.48 0.0201332 0.00182095 43686.7 0; : 237 Minimum Test error found - save the configuration ; : 237 | 4384.12 3469.32 0.020111 0.00181828 43733.2 0; : 238 Minimum Test error found - save the configuration ; : 238 | 4349.33 3433.65 0.0201102 0.00181751 43733.3 0; : 239 Minimum Test error found - save the configuration ; : 239 | 4312.94 3399.06 0.0201135 0.00181726 43724.7 0; : 240 Minimum Test error found - save the configuration ; : 240 | 4277.25 3365.37 0.0201097 0.00181862 43737.2 0; : 241 Minimum Test error found - save the configuration ; : 241 | 4241.69 3332.68 0.0201074 0.00181941 43744.5 0; : 242 Minimum Test error found - save the configuration ; : 242 | 4208.08 3298.33 0.0201335 0.00181692 43676.3 0; : 243 Minimum Test error found - save the configuration ; : 243 | 4173.13 3264.81 0.0202242 0.00183569 43505.4 0; : 244 Minimum Test error found - save the configuration ; : 244 | 4137.61 3233.61 0.0204354 0.00200563 43408 0; : 245 Minimum Test error found - save the configuration ; : 245 | 4104.68 3201.11 0.0208426 0.00184317 42106.5 0; : 246 Minimum Test error found - save the configuration ; : 246 | 4071.07 3168.1 0.0203912 0.0018296 43099.8 0; : 247 Minimum Test error found - save the configuration ; : 247 | 4036.99 3136.52 0.0201725 0.00181637 43582.1 0; : 248 Minimum Test error found - save the configuration ; : 248 | 4004.73 3104.47 0.0201502 0.00182336 43651.8 0; : 249 Minimum Test error found - save the configuration ; : 249 | 3970.44 3073.93 0.0201703 0.00181858 43592.7 0; : 250 Minimum Test error found - save the configuration ; : 250 | 3939.05 3041.72 0.0204513 0.00185682 43023.5 0; : 251 Minimum Test error found - save the configuration ; : 251 | 3905.19 3012.24 0.0207706 0.0018857 42361.9 0; : 252 Minimum Test error found - save the configuration ; : 252 | 3873.64 2981.7 0.0208833 0.0019031 42149.1 0; : 253 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:38510,Test,Test,38510,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: LD; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.00655 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.00224 sec ; TFHandler_LD : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 3.3352 1.1893 [ 0.00020069 5.0000 ]; : var2: 2.4860 1.4342 [ 0.00071490 5.0000 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: DNN_CPU; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.23 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.0277 sec ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.027271 1.0264 [ -3.3694 5.7307 ]; : var2: 0.0028453 0.98623 [ -5.7307 5.7307 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: -0.027271 1.0264 [ -3.3694 5.7307 ]; : var2: 0.0028453 0.98623 [ -5.7307 5.7307 ]; : fvalue: 163.91 83.651 [ 1.6186 394.84 ]; : -----------------------------------------------------------; : Evaluate regression method: BDTG; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 2.09 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time for evaluation of 1000 events: 0.234 sec ; TFHandler_BDTG : Va,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:131035,Test,TestRegression,131035,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['TestRegression']
Testability,: 303 | 2520.76 1746.74 0.0201278 0.00181436 43683.8 0; : 304 Minimum Test error found - save the configuration ; : 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Minimum Test error found - save the configuration ; : 314 | 2292.26 1547.75 0.0201333 0.00182196 43688.8 0; : 315 Minimum Test error found - save the configuration ; : 315 | 2272.08 1531.44 0.0203842 0.00191824 43322.9 0; : 316 Minimum Test error found - save the configuration ; : 316 | 2252.46 1514.26 0.0207323 0.00182901 42320.7 0; : 317 Minimum Test error found - save the configuration ; : 317 | 2232.67 1498.14 0.0203947 0.00181143 43049.5 0; : 318 Minimum Test error found - save the configuration ; : 318 | 2213.29 1481.14 0.0201416 0.00181311 43647.9 0; : 319 Minimum Test error found - save the configuration ; : 319 | 2194.1 1464.7 0.0201406 0.00182876 43687.5 0; : 320 Minimum Test error found - save the configuration ; : 320 | 2175.38 1447.67 0.0206862 0.00188802 42557.4 0; : 321 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:46217,Test,Test,46217,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 304 | 2499.57 1727.02 0.0204166 0.00191205 43232.5 0; : 305 Minimum Test error found - save the configuration ; : 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Minimum Test error found - save the configuration ; : 314 | 2292.26 1547.75 0.0201333 0.00182196 43688.8 0; : 315 Minimum Test error found - save the configuration ; : 315 | 2272.08 1531.44 0.0203842 0.00191824 43322.9 0; : 316 Minimum Test error found - save the configuration ; : 316 | 2252.46 1514.26 0.0207323 0.00182901 42320.7 0; : 317 Minimum Test error found - save the configuration ; : 317 | 2232.67 1498.14 0.0203947 0.00181143 43049.5 0; : 318 Minimum Test error found - save the configuration ; : 318 | 2213.29 1481.14 0.0201416 0.00181311 43647.9 0; : 319 Minimum Test error found - save the configuration ; : 319 | 2194.1 1464.7 0.0201406 0.00182876 43687.5 0; : 320 Minimum Test error found - save the configuration ; : 320 | 2175.38 1447.67 0.0206862 0.00188802 42557.4 0; : 321 Minimum Test error found - save the configuration ; : 321 | 2155.9 1431.89 0.0202817 0.00182411 43342.5 0; : 322 Mini,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:46331,Test,Test,46331,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 305 | 2477.45 1708.65 0.0204906 0.00190401 43041.7 0; : 306 Minimum Test error found - save the configuration ; : 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Minimum Test error found - save the configuration ; : 314 | 2292.26 1547.75 0.0201333 0.00182196 43688.8 0; : 315 Minimum Test error found - save the configuration ; : 315 | 2272.08 1531.44 0.0203842 0.00191824 43322.9 0; : 316 Minimum Test error found - save the configuration ; : 316 | 2252.46 1514.26 0.0207323 0.00182901 42320.7 0; : 317 Minimum Test error found - save the configuration ; : 317 | 2232.67 1498.14 0.0203947 0.00181143 43049.5 0; : 318 Minimum Test error found - save the configuration ; : 318 | 2213.29 1481.14 0.0201416 0.00181311 43647.9 0; : 319 Minimum Test error found - save the configuration ; : 319 | 2194.1 1464.7 0.0201406 0.00182876 43687.5 0; : 320 Minimum Test error found - save the configuration ; : 320 | 2175.38 1447.67 0.0206862 0.00188802 42557.4 0; : 321 Minimum Test error found - save the configuration ; : 321 | 2155.9 1431.89 0.0202817 0.00182411 43342.5 0; : 322 Minimum Test error found - save the configuration ; : 322 | 2136.97 1416.3 0.0201745 0.00185513 43669.6 0; : 323 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:46445,Test,Test,46445,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 306 | 2456.23 1690.14 0.0205827 0.00188115 42777.3 0; : 307 Minimum Test error found - save the configuration ; : 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Minimum Test error found - save the configuration ; : 314 | 2292.26 1547.75 0.0201333 0.00182196 43688.8 0; : 315 Minimum Test error found - save the configuration ; : 315 | 2272.08 1531.44 0.0203842 0.00191824 43322.9 0; : 316 Minimum Test error found - save the configuration ; : 316 | 2252.46 1514.26 0.0207323 0.00182901 42320.7 0; : 317 Minimum Test error found - save the configuration ; : 317 | 2232.67 1498.14 0.0203947 0.00181143 43049.5 0; : 318 Minimum Test error found - save the configuration ; : 318 | 2213.29 1481.14 0.0201416 0.00181311 43647.9 0; : 319 Minimum Test error found - save the configuration ; : 319 | 2194.1 1464.7 0.0201406 0.00182876 43687.5 0; : 320 Minimum Test error found - save the configuration ; : 320 | 2175.38 1447.67 0.0206862 0.00188802 42557.4 0; : 321 Minimum Test error found - save the configuration ; : 321 | 2155.9 1431.89 0.0202817 0.00182411 43342.5 0; : 322 Minimum Test error found - save the configuration ; : 322 | 2136.97 1416.3 0.0201745 0.00185513 43669.6 0; : 323 Minimum Test error found - save the configuration ; : 323 | 2118.43 1400.63 0.0201356 0.00181878 43675.8 0; : 324 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:46559,Test,Test,46559,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 307 | 2435.47 1671.48 0.0207046 0.00184968 42429.2 0; : 308 Minimum Test error found - save the configuration ; : 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Minimum Test error found - save the configuration ; : 314 | 2292.26 1547.75 0.0201333 0.00182196 43688.8 0; : 315 Minimum Test error found - save the configuration ; : 315 | 2272.08 1531.44 0.0203842 0.00191824 43322.9 0; : 316 Minimum Test error found - save the configuration ; : 316 | 2252.46 1514.26 0.0207323 0.00182901 42320.7 0; : 317 Minimum Test error found - save the configuration ; : 317 | 2232.67 1498.14 0.0203947 0.00181143 43049.5 0; : 318 Minimum Test error found - save the configuration ; : 318 | 2213.29 1481.14 0.0201416 0.00181311 43647.9 0; : 319 Minimum Test error found - save the configuration ; : 319 | 2194.1 1464.7 0.0201406 0.00182876 43687.5 0; : 320 Minimum Test error found - save the configuration ; : 320 | 2175.38 1447.67 0.0206862 0.00188802 42557.4 0; : 321 Minimum Test error found - save the configuration ; : 321 | 2155.9 1431.89 0.0202817 0.00182411 43342.5 0; : 322 Minimum Test error found - save the configuration ; : 322 | 2136.97 1416.3 0.0201745 0.00185513 43669.6 0; : 323 Minimum Test error found - save the configuration ; : 323 | 2118.43 1400.63 0.0201356 0.00181878 43675.8 0; : 324 Minimum Test error found - save the configuration ; : 324 | 2100.24 1384.53 0.0201342 0.00182071 43683.6 0; : 325 Minim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:46673,Test,Test,46673,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 308 | 2413.82 1653.88 0.0201781 0.00181945 43576.1 0; : 309 Minimum Test error found - save the configuration ; : 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Minimum Test error found - save the configuration ; : 314 | 2292.26 1547.75 0.0201333 0.00182196 43688.8 0; : 315 Minimum Test error found - save the configuration ; : 315 | 2272.08 1531.44 0.0203842 0.00191824 43322.9 0; : 316 Minimum Test error found - save the configuration ; : 316 | 2252.46 1514.26 0.0207323 0.00182901 42320.7 0; : 317 Minimum Test error found - save the configuration ; : 317 | 2232.67 1498.14 0.0203947 0.00181143 43049.5 0; : 318 Minimum Test error found - save the configuration ; : 318 | 2213.29 1481.14 0.0201416 0.00181311 43647.9 0; : 319 Minimum Test error found - save the configuration ; : 319 | 2194.1 1464.7 0.0201406 0.00182876 43687.5 0; : 320 Minimum Test error found - save the configuration ; : 320 | 2175.38 1447.67 0.0206862 0.00188802 42557.4 0; : 321 Minimum Test error found - save the configuration ; : 321 | 2155.9 1431.89 0.0202817 0.00182411 43342.5 0; : 322 Minimum Test error found - save the configuration ; : 322 | 2136.97 1416.3 0.0201745 0.00185513 43669.6 0; : 323 Minimum Test error found - save the configuration ; : 323 | 2118.43 1400.63 0.0201356 0.00181878 43675.8 0; : 324 Minimum Test error found - save the configuration ; : 324 | 2100.24 1384.53 0.0201342 0.00182071 43683.6 0; : 325 Minimum Test error found - save the configuration ; : 325 | 2081.68 1368.94 0.02014 0.00181951 43666.9 0; : 326 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:46787,Test,Test,46787,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 309 | 2393.9 1635.56 0.0203837 0.00183898 43138.9 0; : 310 Minimum Test error found - save the configuration ; : 310 | 2372.92 1617.74 0.0207665 0.00191074 42427.4 0; : 311 Minimum Test error found - save the configuration ; : 311 | 2352.45 1599.83 0.0207471 0.00187139 42382.5 0; : 312 Minimum Test error found - save the configuration ; : 312 | 2332.13 1582.05 0.0206387 0.00189784 42687.5 0; : 313 Minimum Test error found - save the configuration ; : 313 | 2311.44 1565.38 0.0203909 0.00182385 43087.1 0; : 314 Minimum Test error found - save the configuration ; : 314 | 2292.26 1547.75 0.0201333 0.00182196 43688.8 0; : 315 Minimum Test error found - save the configuration ; : 315 | 2272.08 1531.44 0.0203842 0.00191824 43322.9 0; : 316 Minimum Test error found - save the configuration ; : 316 | 2252.46 1514.26 0.0207323 0.00182901 42320.7 0; : 317 Minimum Test error found - save the configuration ; : 317 | 2232.67 1498.14 0.0203947 0.00181143 43049.5 0; : 318 Minimum Test error found - save the configuration ; : 318 | 2213.29 1481.14 0.0201416 0.00181311 43647.9 0; : 319 Minimum Test error found - save the configuration ; : 319 | 2194.1 1464.7 0.0201406 0.00182876 43687.5 0; : 320 Minimum Test error found - save the configuration ; : 320 | 2175.38 1447.67 0.0206862 0.00188802 42557.4 0; : 321 Minimum Test error found - save the configuration ; : 321 | 2155.9 1431.89 0.0202817 0.00182411 43342.5 0; : 322 Minimum Test error found - save the configuration ; : 322 | 2136.97 1416.3 0.0201745 0.00185513 43669.6 0; : 323 Minimum Test error found - save the configuration ; : 323 | 2118.43 1400.63 0.0201356 0.00181878 43675.8 0; : 324 Minimum Test error found - save the configuration ; : 324 | 2100.24 1384.53 0.0201342 0.00182071 43683.6 0; : 325 Minimum Test error found - save the configuration ; : 325 | 2081.68 1368.94 0.02014 0.00181951 43666.9 0; : 326 Minimum Test error found - save the configuration ; : 326 | 2062.99 1354.16 0.0201231 0.00181474 43695.9 0; : 327 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:46901,Test,Test,46901,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 374 | 1335.01 784.052 0.0201186 0.0018071 43688.4 0; : 375 Minimum Test error found - save the configuration ; : 375 | 1322.7 774.736 0.0201382 0.00181076 43650.3 0; : 376 Minimum Test error found - save the configuration ; : 376 | 1310.36 765.843 0.0201418 0.00181155 43643.7 0; : 377 Minimum Test error found - save the configuration ; : 377 | 1298.44 756.891 0.0201268 0.00181403 43685.4 0; : 378 Minimum Test error found - save the configuration ; : 378 | 1285.86 748.455 0.0201275 0.00181908 43695.6 0; : 379 Minimum Test error found - save the configuration ; : 379 | 1273.98 740.611 0.0201241 0.00181383 43691.2 0; : 380 Minimum Test error found - save the configuration ; : 380 | 1262.34 731.526 0.0201157 0.00181169 43706.2 0; : 381 Minimum Test error found - save the configuration ; : 381 | 1250.17 723.372 0.0201233 0.00181189 43688.6 0; : 382 Minimum Test error found - save the configuration ; : 382 | 1238.6 715.116 0.0201183 0.00181259 43702.2 0; : 383 Minimum Test error found - save the configuration ; : 383 | 1227 706.748 0.0201329 0.0018213 43688.2 0; : 384 Minimum Test error found - save the configuration ; : 384 | 1215.11 699.222 0.0201342 0.00181943 43680.7 0; : 385 Minimum Test error found - save the configuration ; : 385 | 1203.63 691.403 0.02014 0.00182334 43676.1 0; : 386 Minimum Test error found - save the configuration ; : 386 | 1192.53 683.241 0.0201197 0.00181992 43716.3 0; : 387 Minimum Test error found - save the configuration ; : 387 | 1181.2 675.7 0.0201175 0.00182002 43721.9 0; : 388 Minimum Test error found - save the configuration ; : 388 | 1170.08 667.761 0.0201168 0.00182403 43733.1 0; : 389 Minimum Test error found - save the configuration ; : 389 | 1158.61 661.271 0.0204728 0.0018727 43010.6 0; : 390 Minimum Test error found - save the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test erro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:54266,Test,Test,54266,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,: 516 | 317.804 177.214 0.0201516 0.00181548 43629.8 0; : 517 Minimum Test error found - save the configuration ; : 517 | 314.454 175.878 0.0201248 0.00181905 43702.1 0; : 518 Minimum Test error found - save the configuration ; : 518 | 311.376 174.038 0.0209489 0.00256909 43525.9 0; : 519 Minimum Test error found - save the configuration ; : 519 | 308.194 172.777 0.0312717 0.00294953 28246.5 0; : 520 Minimum Test error found - save the configuration ; : 520 | 304.608 170.454 0.0241719 0.00185008 35839.4 0; : 521 Minimum Test error found - save the configuration ; : 521 | 301.091 169.057 0.0201646 0.00182965 43632.5 0; : 522 Minimum Test error found - save the configuration ; : 522 | 297.757 167.472 0.0204481 0.00183794 42987.2 0; : 523 Minimum Test error found - save the configuration ; : 523 | 294.843 165.895 0.0201197 0.00181783 43711.4 0; : 524 Minimum Test error found - save the configuration ; : 524 | 291.692 164.911 0.0201636 0.00183144 43639.1 0; : 525 Minimum Test error found - save the configuration ; : 525 | 288.615 162.74 0.0201168 0.0018126 43705.7 0; : 526 Minimum Test error found - save the configuration ; : 526 | 285.409 161.045 0.0201121 0.00181244 43716.6 0; : 527 Minimum Test error found - save the configuration ; : 527 | 282.171 159.772 0.0201445 0.00181159 43637.4 0; : 528 Minimum Test error found - save the configuration ; : 528 | 279.108 159.481 0.0201013 0.00180683 43729.2 0; : 529 Minimum Test error found - save the configuration ; : 529 | 276.719 156.675 0.0201429 0.0018175 43655.3 0; : 530 Minimum Test error found - save the configuration ; : 530 | 273.651 155.435 0.0201142 0.00181452 43716.7 0; : 531 Minimum Test error found - save the configuration ; : 531 | 270.462 154.476 0.0201154 0.00181212 43707.9 0; : 532 Minimum Test error found - save the configuration ; : 532 | 267.569 152.332 0.02019 0.00182583 43563.1 0; : 533 Minimum Test error found - save the configuration ; : 533 | 264.8 151.073 0.0201226 0.00181364 43694.6 0; : 534 Minimum ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:70358,Test,Test,70358,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability,": ; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_PyKeras_LSTM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_BDTG.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: TMVA_LSTM for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0494 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0212 sec ; Factory : Test method: PyKeras_LSTM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.202 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00597 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:45578,Test,Test,45578,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['Test']
Testability,: Elapsed time for evaluation of 9000 events: 0.0705 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: KNN for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of KNN on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.0918 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: LD for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of LD on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.00483 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: DNN_CPU for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of DNN_CPU on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 0.231 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : Test method: BDTG for Regression performance; : ; : Dataset[datasetreg] : Create results for testing; : Dataset[datasetreg] : Evaluation of BDTG on testing sample; : Dataset[datasetreg] : Elapsed time for evaluation of 9000 events: 2.1 sec ; : Create variable histograms; : Create regression target histograms; : Create regression average deviation; : Results created; Factory : ␛[1mEvaluate all methods␛[0m; : Evaluate regression method: PDEFoam; : TestRegression (testing); : Calculate regression for all events; : Elapsed time for evaluation of 9000 events: 0.0447 sec ; : TestRegression (training); : Calculate regression for all events; : Elapsed time fo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:128283,Test,Test,128283,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,3,"['Test', 'test']","['Test', 'testing']"
Testability,": Input/Output = ( 100 , 100 , 1 ) Norm dim = 100 axis = -1; ; Layer 6 DENSE Layer: ( Input = 100 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 7 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 119.005; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.881238 0.852851 0.181896 0.0160504 7235.64 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.658204 0.827727 0.182292 0.0161751 7223.84 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.58547 0.792475 0.182478 0.0158424 7201.32 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.508772 0.760461 0.18258 0.0158465 7197.11 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.445197 0.705323 0.183204 0.015935 7174.07 0; : 6 | 0.409018 0.708257 0.18274 0.0151517 7160.42 1; : 7 | 0.369062 0.747523 0.18295 0.0151377 7150.84 2; : 8 | 0.31294 0.740134 0.183339 0.015769 7161.2 3; : 9 | 0.256184 0.756239 0.181088 0.0154708 7245.63 4; : 10 | 0.224257 0.809455 0.18089 0.0153446 7248.78 5; : ; : Elapsed time for training with 1600 events: 1.86 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_DNN_CPU : [dataset] : Evaluation of TMVA_DNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.0796 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:11790,Test,Test,11790,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability,": dataset DL_CPU ; : ------------------------------; : Signal 0.965 (0.965) 0.400 (0.404) 0.929 (0.920) 0.991 (0.989) ; : bg0 0.917 (0.915) 0.322 (0.305) 0.757 (0.742) 0.925 (0.929) ; : bg1 0.950 (0.948) 0.331 (0.302) 0.866 (0.853) 0.978 (0.972) ; : bg2 0.925 (0.925) 0.530 (0.506) 0.767 (0.766) 0.918 (0.926) ; : ; : -------------------------------------------------------------------------------------------------------; : ; : ; : Confusion matrices for all methods; : -------------------------------------------------------------------------------------------------------; : ; : Does a binary comparison between the two classes given by a ; : particular row-column combination. In each case, the class ; : given by the row is considered signal while the class given ; : by the column index is considered background.; : ; : === Showing confusion matrix for method : BDTG ; : (Signal Efficiency for Background Efficiency 0.01%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.497 (0.373) 0.710 (0.693) 0.680 (0.574) ; : bg0 0.271 (0.184) - 0.239 (0.145) 0.705 (0.667) ; : bg1 0.855 (0.766) 0.369 (0.222) - 0.587 (0.578) ; : bg2 0.714 (0.585) 0.705 (0.581) 0.648 (0.601) - ; : ; : (Signal Efficiency for Background Efficiency 0.10%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.911 (0.853) 0.991 (0.981) 0.945 (0.913) ; : bg0 0.833 (0.774) - 0.654 (0.582) 0.930 (0.901) ; : bg1 0.971 (0.980) 0.716 (0.681) - 0.871 (0.862) ; : bg2 0.976 (0.951) 0.971 (0.973) 0.936 (0.941) - ; : ; : (Signal Efficiency for Background Efficiency 0.30%); : ---------------------------------------------------; : Signal bg0 bg1 bg2 ; : test (train) test (train) test (train) test (train) ; : Signal - 0.978 (0.957) 0.999 (1.000) 0.998 (0.997) ; : bg0 0.965 (0.926) - 0.874 (0.835) 0.991 (0.976) ; : bg1 1.000 (0.999) 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:26083,test,test,26083,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability,: m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 0.98851 [ -2.9734 3.3513 ]; : m_wbb: -0.010633 0.99340 [ -3.2442 3.2244 ]; : m_wwbb: -0.012669 0.99259 [ -3.1871 5.7307 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.101 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: Higgs_trained_model.h5; PyKeras : [dataset] : Evaluation of PyKeras on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.168 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: Likelihood; : ; Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: Fisher; : ; Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Also filling probability and rarity histograms (on request)...; TFHandler_Fisher : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_l,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:51727,test,test,51727,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['test'],['test']
Testability,: m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: Fisher; : ; Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Also filling probability and rarity histograms (on request)...; TFHandler_Fisher : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: DNN_CPU; : ; DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.0043655 0.99836 [ -3.2801 5.7307 ]; : m_jjj: 0.0044371 0.99827 [ -3.2805 5,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:53037,test,test,53037,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,['test'],['test']
Testability,: myvar2: -0.062175 1.1106 [ -4.0854 4.0259 ]; : var3: 0.16451 1.0589 [ -5.3563 4.6422 ]; : var4: 0.43566 1.2253 [ -6.9675 5.0307 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset DNN_CPU : 0.921; : dataset LD : 0.921; : dataset MLPBNN : 0.919; : dataset LikelihoodPCA : 0.913; : dataset CutsD : 0.908; : dataset SVM : 0.898; : dataset RuleFit : 0.881; : dataset BDT : 0.881; : dataset KNN : 0.838; : dataset PDEFoam : 0.822; : dataset PDERS : 0.797; : dataset Cuts : 0.792; : dataset FDA_GA : 0.782; : dataset Likelihood : 0.760; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : dataset DNN_CPU : 0.352 (0.448) 0.779 (0.752) 0.929 (0.918); : dataset LD : 0.364 (0.438) 0.781 (0.758) 0.929 (0.920); : dataset MLPBNN : 0.343 (0.432) 0.777 (0.768) 0.926 (0.920); : dataset LikelihoodPCA : 0.288 (0.316) 0.756 (0.729) 0.920 (0.913); : dataset CutsD : 0.262 (0.449) 0.735 (0.709) 0.914 (0.890); : dataset SVM : 0.321 (0.332) 0.711 (0.725) 0.894 (0.898); : dataset RuleFit : 0.075 (0.077) 0.667 (0.718) 0.893 (0.896); : dataset BDT : 0.275 (0.402) 0.661 (0.731) 0.870 (0.899); : dataset KNN : 0.195 (0.252) 0.561 (0.642) 0.810 (0.843); : dataset PDEFoam : 0.173 (0.219) 0.499 (0.541) 0.761 (0.773); : dataset PDERS : 0.158 (0.171) 0.4,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:78845,Test,Testing,78845,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Test', 'test']","['Testing', 'test']"
Testability,": try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofMgrLite(). TProofMgrLite::TProofMgrLite ; (; const char * ; url, . Int_t ; loglevel = -1, . const char * ; alias = """" . ). Create a PROOF manager for the Lite environment. ; Definition at line 41 of file TProofMgrLite.cxx. ◆ ~TProofMgrLite(). TProofMgrLite::~TProofMgrLite ; (; ). inlineoverride . Definition at line 31 of file TProofMgrLite.h. Member Function Documentation. ◆ Class(). static TClass * TProofMgrLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofMgrLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofMgrLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 39 of file TProofMgrLite.h. ◆ CreateSession(). TProof * TProofMgrLite::CreateSession ; (; const char * ; cfg = 0, . const char * ; = 0, . Int_t ; loglevel = -1 . ). overridevirtual . Create a new session. ; Reimplemented from TProofMgr.; Definition at line 51 of file TProofMgrLite.cxx. ◆ DeclFileName(). static const char * TProofMgrLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 39 of file TProofMgrLite.h. ◆ GetSessionLogs(). TProofLog * TProofMgrLite::GetSessionLogs ; (; Int_t ; isess = 0, . const char * ; stag = 0, . const char * ; pattern = ""-v | SvcMsg"", . Bool_t ; rescan = kFALSE . ). overridevirtual . Get logs or log tails from last session associated with this manager instance. ; The arguments allow to specify a session different from the last one: isess specifies a position relative to the last one, i.e. 1 for the next to last session; the absolute value is taken so -1 and 1 are equivalent. stag specifies the unique tag of the wanted session The special value stag = ""NR"" allows to just initialize the TProofLog object w/o retrieving the files; this may b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgrLite.html:17575,log,loglevel,17575,doc/master/classTProofMgrLite.html,https://root.cern,https://root.cern/doc/master/classTProofMgrLite.html,1,['log'],['loglevel']
Testability,": try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSessionViewer() [1/2]. TSessionViewer::TSessionViewer ; (; const char * ; title = ""ROOT Session Viewer"", . UInt_t ; w = 550, . UInt_t ; h = 320 . ). Main Session viewer constructor. ; Definition at line 3631 of file TSessionViewer.cxx. ◆ TSessionViewer() [2/2]. TSessionViewer::TSessionViewer ; (; const char * ; title, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). Main Session viewer constructor. ; Definition at line 3647 of file TSessionViewer.cxx. ◆ ~TSessionViewer(). TSessionViewer::~TSessionViewer ; (; ). override . Destructor. ; Definition at line 4625 of file TSessionViewer.cxx. Member Function Documentation. ◆ Build(). void TSessionViewer::Build ; (; ). virtual . Build main session viewer frame and subframes. ; Definition at line 4299 of file TSessionViewer.cxx. ◆ ChangeRightLogo(). void TSessionViewer::ChangeRightLogo ; (; const char * ; name). Change the right logo (used for animation). ; Definition at line 4980 of file TSessionViewer.cxx. ◆ Class(). static TClass * TSessionViewer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSessionViewer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSessionViewer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 631 of file TSessionViewer.h. ◆ CleanupSession(). void TSessionViewer::CleanupSession ; (; ). Clean-up Proof session. ; Definition at line 5126 of file TSessionViewer.cxx. ◆ CloseWindow(). void TSessionViewer::CloseWindow ; (; ). overridevirtual . Close main Session Viewer window. ; Reimplemented from TGMainFrame.; Definition at line 4946 of file TSessionViewer.cxx. ◆ DeclFileName(). static const char * TSessionViewer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 631 of file TSes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:41004,log,logo,41004,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['log'],['logo']
Testability,: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_PyKeras.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.012 sec ; Factory : Test method: Fisher for Classification performance; : ; Fisher : [dataset] : Evaluation of Fisher on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.00146 sec ; : Dataset[dataset] : Evaluation of Fisher on testing sample; Factory : Test method: BDT for Classification performance; : ; BDT : [dataset] : Evaluation of BDT on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0456 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.017919 1.0069 [ -3.3498 3.4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 0.98851 [ -2.9734 3.3513 ]; : m_wbb: -0.010633 0.99340 [ -3.2442 3.2244 ]; : m_wwbb: -0.012669 0.99259 [ -3.1871 5.7307 ]; : -----------------------------------------------------------; DNN_CPU : [dataset] : Evaluation of DNN_CPU on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.101 sec ; Factory : Test method: PyKeras for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: Higgs_trained_model.h5; Py,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:50355,Test,Test,50355,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Test'],['Test']
Testability,":""));; 361 if (methodType.Contains("" "")) methodType = methodType(methodType.Last(' ')+1,methodType.Length());; 362 return methodType;; 363}; 364 ; 365////////////////////////////////////////////////////////////////////////////////; 366/// read method name from weight file; 367 ; 368TMVA::IMethod* TMVA::Reader::BookMVA( const TString& methodTag, const TString& weightfile ); 369{; 370 // assert non-existence; 371 if (fMethodMap.find( methodTag ) != fMethodMap.end()); 372 Log() << kFATAL << ""<BookMVA> method tag \"""" << methodTag << ""\"" already exists!"" << Endl;; 373 ; 374 TString methodType(GetMethodTypeFromFile(weightfile));; 375 ; 376 Log() << kINFO << ""Booking \"""" << methodTag << ""\"" of type \"""" << methodType << ""\"" from "" << weightfile << ""."" << Endl;; 377 ; 378 MethodBase* method = dynamic_cast<MethodBase*>(this->BookMVA( Types::Instance().GetMethodType(methodType),; 379 weightfile ) );; 380 if( method && method->GetMethodType() == Types::kCategory ){; 381 MethodCategory *methCat = (dynamic_cast<MethodCategory*>(method));; 382 if( !methCat ); 383 Log() << kFATAL << ""Method with type kCategory cannot be casted to MethodCategory. /Reader"" << Endl;; 384 methCat->fDataSetManager = fDataSetManager;; 385 }; 386 ; 387 return fMethodMap[methodTag] = method;; 388}; 389 ; 390////////////////////////////////////////////////////////////////////////////////; 391/// books MVA method from weightfile; 392 ; 393TMVA::IMethod* TMVA::Reader::BookMVA( TMVA::Types::EMVA methodType, const TString& weightfile ); 394{; 395 IMethod *im =; 396 ClassifierFactory::Instance().Create(Types::Instance().GetMethodName(methodType).Data(), DataInfo(), weightfile);; 397 ; 398 MethodBase *method = (dynamic_cast<MethodBase*>(im));; 399 ; 400 if (method==0) return im;; 401 ; 402 if( method->GetMethodType() == Types::kCategory ){; 403 MethodCategory *methCat = (dynamic_cast<MethodCategory*>(method));; 404 if( !methCat ); 405 Log() << kERROR << ""Method with type kCategory cannot be casted to MethodCategor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:14180,Log,Log,14180,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['Log'],['Log']
Testability,":%s, name=%s, fType[%d]=%d,""; 154 "" %s, bufpos=%d, arr=%p, eoffset=%d, Redirect=%p\n"",; 155 fClass->GetName(),aElement->GetName(),i,compinfo[i]->fType,; 156 aElement->ClassName(),b.Length(),arr[0], eoffset,((TBufferFile&)b).PeekDataCache()->GetObjectAt(0));; 157 }; 158 WriteBufferAux(b,*((TBufferFile&)b).PeekDataCache(),compinfo,i,i+1,narr,eoffset, arrayMode);; 159 }; 160 continue;; 161 } else {; 162 if (gDebug > 1) {; 163 printf(""WriteBuffer, class:%s, name=%s, fType[%d]=%d,""; 164 "" %s, bufpos=%d, arr=%p, eoffset=%d, not a write rule, skipping.\n"",; 165 fClass->GetName(),aElement->GetName(),i,compinfo[i]->fType,; 166 aElement->ClassName(),b.Length(),arr[0], eoffset);; 167 }; 168 // The rule was a cached element for a read, rule, the real offset is in the; 169 // next element (the one for the rule itself).; 170 if (aElement->TestBit(TStreamerElement::kRepeat)) continue;; 171 ioffset = eoffset+compinfo[i]->fOffset;; 172 continue;; 173 }; 174 }; 175 ; 176 if (gDebug > 1) {; 177 printf(""WriteBuffer, class:%s, name=%s, fType[%d]=%d, %s, ""; 178 ""bufpos=%d, arr=%p, offset=%d\n"",; 179 fClass->GetName(),aElement->GetName(),i,compinfo[i]->fType,aElement->ClassName(),; 180 b.Length(),arr[0],ioffset);; 181 }; 182 ; 183 switch (compinfo[i]->fType+typeOffset) {; 184 // In this switch we intentionally use 'continue' instead of; 185 // 'break' to avoid running the 2nd switch (see later in this; 186 // function).; 187 ; 188 case TStreamerInfo::kBool: WriteBasicType(Bool_t); continue;; 189 case TStreamerInfo::kChar: WriteBasicType(Char_t); continue;; 190 case TStreamerInfo::kShort: WriteBasicType(Short_t); continue;; 191 case TStreamerInfo::kInt: WriteBasicType(Int_t); continue;; 192 case TStreamerInfo::kLong: WriteBasicType(Long_t); continue;; 193 case TStreamerInfo::kLong64: WriteBasicType(Long64_t); continue;; 194 case TStreamerInfo::kFloat: WriteBasicType(Float_t); continue;; 195 case TStreamerInfo::kDouble: WriteBasicType(Double_t); continue;; 196 case TStreamerInfo::kUChar: Wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html:5734,Test,TestBit,5734,doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,1,['Test'],['TestBit']
Testability,":. Float_t*fCpuTime[fNbench] Cpu Time; TStringTNamed::fNameobject identifier; TString*fNames[fNbench] Names of benchmarks; Int_tfNbenchNumber of active benchmarks; Int_tfNmaxMaximum number of benchmarks initialized; Float_t*fRealTime[fNbench] Real Time; TStopwatch*fTimerTimers; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBenchmark(); Benchmark default constructor*-*-*-; *-* =============================. TBenchmark(const TBenchmark& ); copy constructor. TBenchmark& operator=(const TBenchmark& ); assignment operator. ~TBenchmark(); Benchmark default destructor*-*-*-; *-* ============================. Int_t GetBench(const char* name) const; -*-*-*Returns index of Benchmark name; *-* ===============================. Float_t GetCpuTime(const char* name); -*-*-*Returns Cpu time used by Benchmark name; *-* =======================================. Float_t GetRealTime(const char* name); -*-*-*Returns Realtime used by Benchmark name; *-* =======================================. void Print(Option_t* name = """") const; -*Prints parameters of Benchmark name; *-* ===================================. void Reset(); -*Reset all Benchmarks; *-* ====================. void Show(const char* name); Stops Benchmark name and Prints results*-; *-* =======================================. void Start(const char* name); -*-*-*-*-*Starts Benchmark name; *-* =====================; -; *-* An independent timer (see class TStopwatch) is started.; *-* the name of the benchmark is entered into the list of benchmarks.; *-* Benchmark can be stopped via TBenchmark::Stop; *-* Results can be printed via TBenchmark::Print; *-* TBenchmark::Show can be used to stop benchmark and print results.; *-* If name is an already existing benchmark, existing parameters are reset.; *-* A summary of all benchmarks can be seen via TBenchmark::Summary.; -; *. void Stop(const char* name); Terminates Benchmark name*-; *-* =====================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBenchmark.html:6684,Benchmark,Benchmark,6684,root/html526/TBenchmark.html,https://root.cern,https://root.cern/root/html526/TBenchmark.html,4,['Benchmark'],['Benchmark']
Testability,"://oss.sgi.com/projects/FreeB/; 15 * shall be included in all copies or substantial portions of the Software.; 16 *; 17 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS; 18 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; 19 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL; 20 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; 21 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF; 22 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; 23 * SOFTWARE.; 24 *; 25 * Except as contained in this notice, the name of Silicon Graphics, Inc.; 26 * shall not be used in advertising or otherwise to promote the sale, use or; 27 * other dealings in this Software without prior written authorization from; 28 * Silicon Graphics, Inc.; 29 */; 30/*; 31** Author: Eric Veach, July 1994.; 32**; 33*/; 34 ; 35#include ""gluos.h""; 36#include <stddef.h>; 37#include <assert.h>; 38#include ""mesh.h""; 39#include ""memalloc.h""; 40 ; 41#ifndef TRUE; 42#define TRUE 1; 43#endif; 44#ifndef FALSE; 45#define FALSE 0; 46#endif; 47 ; 48static GLUvertex *allocVertex(); 49{; 50 return (GLUvertex *)memAlloc( sizeof( GLUvertex ));; 51}; 52 ; 53static GLUface *allocFace(); 54{; 55 return (GLUface *)memAlloc( sizeof( GLUface ));; 56}; 57 ; 58/************************ Utility Routines ************************/; 59 ; 60/* MakeEdge creates a new pair of half-edges which form their own loop.; 61 * No vertex or face structures are allocated, but these must be assigned; 62 * before the current edge operation is completed.; 63 */; 64static GLUhalfEdge *MakeEdge( GLUhalfEdge *eNext ); 65{; 66 GLUhalfEdge *e;; 67 GLUhalfEdge *eSym;; 68 GLUhalfEdge *ePrev;; 69 EdgePair *pair = (EdgePair *)memAlloc( sizeof( EdgePair ));; 70 if (pair == NULL) return NULL;; 71 ; 72 e = &pair->e;; 73 eSym = &pair->eSym;; 74 ; 75 /* Make sure eNext points to the first edge of the edge pair */; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mesh_8c_source.html:1933,assert,assert,1933,doc/master/mesh_8c_source.html,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html,1,['assert'],['assert']
Testability,":155; TAxis::SetNoExponentvoid SetNoExponent(Bool_t noExponent=kTRUE)Set the NoExponent flag By default, an exponent of the form 10^N is used when the label value are eit...Definition TAxis.h:233; TAxis::SaveAttributesvoid SaveAttributes(std::ostream &out, const char *name, const char *subname) overrideSave axis attributes as C++ statement(s) on output stream out.Definition TAxis.cxx:710; TAxis::GetDecimalsBool_t GetDecimals() constDefinition TAxis.h:120; TAxis::GetLastInt_t GetLast() constReturn last bin on the axis i.e.Definition TAxis.cxx:469; TAxis::SetLimitsvirtual void SetLimits(Double_t xmin, Double_t xmax)Definition TAxis.h:164; TAxis::ImportAttributesvirtual void ImportAttributes(const TAxis *axis)Copy axis attributes to this.Definition TAxis.cxx:680; TAxis::GetTimeFormatOnlyvirtual const char * GetTimeFormatOnly() constReturn only the time format from the string fTimeFormat.Definition TAxis.cxx:599; TAxis::GetBinCenterLogvirtual Double_t GetBinCenterLog(Int_t bin) constReturn center of bin in log With a log-equidistant binning for a bin with low and up edges,...Definition TAxis.cxx:501; TAxis::SetAlphanumericvoid SetAlphanumeric(Bool_t alphanumeric=kTRUE)Set axis alphanumeric.Definition TAxis.cxx:842; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TAxis::operator=TAxis & operator=(const TAxis &)Assignment operator.Definition TAxis.cxx:118; TAxis::~TAxis~TAxis() overrideDestructor.Definition TAxis.cxx:89; TAxis::GetModifiedLabelsTList * GetModifiedLabels() constDefinition TAxis.h:122; TAxis::GetNbinsInt_t GetNbins() constDefinition TAxis.h:125; TAxis::ChangeLabelByValuevoid ChangeLabelByValue(Double_t labValue, Double_t labAngle=-1., Double_t labSize=-1., Int_t labAlign=-1, Int_t labColor=-1, Int_t labFont=-1, const TString &labText="""")Define new text attributes for the label value ""labValue"".Definition TAxis.cxx:1009; TAxis::SetRangeUservirtual void SetRangeUser(Double_t ufirst, Double_t ulast)Set the viewing range for the axis from ufirst t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8h_source.html:21655,log,log,21655,doc/master/TAxis_8h_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8h_source.html,2,['log'],"['log', 'log-equidistant']"
Testability,":173; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TNamed::lsvoid ls(Option_t *option="""") const overrideList TNamed name and title.Definition TNamed.cxx:113; TNamed::SetNameTitlevirtual void SetNameTitle(const char *name, const char *title)Set all the TNamed parameters (name and title).Definition TNamed.cxx:154; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::operator=TObject & operator=(const TObject &rhs)TObject assignment operator.Definition TObject.h:296; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Clonevirtual TObject * Clone(const char *newname="""") constMake a clone of an object using the Streamer facility.Definition TObject.cxx:229; TObject::Copyvirtual void Copy(TObject &object) constCopy this to obj.Definition TObject.cxx:146; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::FillBuffervirtual void FillBuffer(char *&buffer) constCopy string into I/O buffer.Definition TString.cxx:1310; TString::Sizeofvirtual Int_t Sizeof() constReturns size string will occupy on I/O buffer.Definition TString.cxx:1401; int; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395. corebasesrcTNamed.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8cxx_source.html:9672,Test,TestBit,9672,doc/master/TNamed_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8cxx_source.html,1,['Test'],['TestBit']
Testability,":268; TGeoNode::SafetyDouble_t Safety(const Double_t *point, Bool_t in=kTRUE) constcomputes the closest distance from given point to this shapeDefinition TGeoNode.cxx:684; TGeoNode::fMotherTGeoVolume * fMotherDefinition TGeoNode.h:42; TGeoPatternFinderBase finder class for patterns.Definition TGeoPatternFinder.h:31; TGeoPatternFinder::cdvirtual void cd(Int_t)Definition TGeoPatternFinder.h:74; TGeoPatternFinder::GetMatrixvirtual TGeoMatrix * GetMatrix()Return current matrix.Definition TGeoPatternFinder.cxx:183; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::GetMediumTGeoMedium * GetMedium() constDefinition TGeoVolume.h:175; TGeoVolume::SetCurrentPointvoid SetCurrentPoint(Double_t x, Double_t y, Double_t z)Set the current tracking point.Definition TGeoVolume.cxx:2059; TGeoVolume::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoVolume.h:362; TGeoVolume::GetNodesTObjArray * GetNodes()Definition TGeoVolume.h:169; TGeoVolume::GetNodeTGeoNode * GetNode(const char *name) constget the pointer to a daughter nodeDefinition TGeoVolume.cxx:2193; TGeoVolume::IsVisiblevirtual Bool_t IsVisible() constDefinition TGeoVolume.h:155; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TStringBasic string class.Definition TString.h:139; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Drawth1 Draw(). geomgeomincTGeoNode.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNode_8h_source.html:31805,Test,TestBit,31805,doc/master/TGeoNode_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNode_8h_source.html,1,['Test'],['TestBit']
Testability,":37; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TFileMergeInfoDefinition TFileMergeInfo.h:42; TFolder<div class=""legacybox""><h2>Legacy Code</h2> TFolder is a legacy interface: there will be no bug fixes...Definition TFolder.h:30; TLeafElementA TLeaf for the general case when using the branches created via a TStreamerInfo (i....Definition TLeafElement.h:32; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TStreamerInfoActions::TActionSequenceDefinition TStreamerInfoActions.h:177; TStreamerInfoActions::TActionSequence::SequenceGetter_tSequencePtr(*)(TStreamerInfo *info, TVirtualCollectionProxy *collectionProxy, TClass *originalClass) SequenceGetter_tDefinition TStreamerInfoActions.h:185; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeA TTree represents a columna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8h_source.html:40996,Test,TestBit,40996,doc/master/TBranchElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8h_source.html,1,['Test'],['TestBit']
Testability,":447; TMVA::DataLoader::AddSignalTestEventvoid AddSignalTestEvent(const std::vector< Double_t > &event, Double_t weight=1.0)add signal testing eventDefinition DataLoader.cxx:236; TMVA::DataLoader::fATreeEventstd::vector< Float_t > fATreeEventevent variablesDefinition DataLoader.h:208; TMVA::DataLoader::DefaultDataSetInfoDataSetInfo & DefaultDataSetInfo()default creationDefinition DataLoader.cxx:533; TMVA::DataLoader::AddBackgroundTestEventvoid AddBackgroundTestEvent(const std::vector< Double_t > &event, Double_t weight=1.0)add signal training eventDefinition DataLoader.cxx:252; TMVA::DataLoader::fDataSetManagerDataSetManager * fDataSetManagerDefinition DataLoader.h:186; TMVA::DataLoader::MakeCopyDataLoader * MakeCopy(TString name)Copy method use in VI and CV.Definition DataLoader.cxx:691; TMVA::DataLoader::SetSignalWeightExpressionvoid SetSignalWeightExpression(const TString &variable)Definition DataLoader.cxx:549; TMVA::DataLoader::MakeKFoldDataSetvoid MakeKFoldDataSet(CvSplit &s)Function required to split the training and testing datasets into a number of folds.Definition DataLoader.cxx:662; TMVA::DataLoader::SetWeightExpressionvoid SetWeightExpression(const TString &variable, const TString &className="""")Definition DataLoader.cxx:563; TMVA::DataLoader::AddBackgroundTrainingEventvoid AddBackgroundTrainingEvent(const std::vector< Double_t > &event, Double_t weight=1.0)add signal training eventDefinition DataLoader.cxx:244; TMVA::DataLoader::RecombineKFoldDataSetvoid RecombineKFoldDataSet(CvSplit &s, Types::ETreeType tt=Types::kTraining)Recombines the dataset.Definition DataLoader.cxx:683; TMVA::DataLoader::VarTransformDataLoader * VarTransform(TString trafoDefinition)Transforms the variables and return a new DataLoader with the transformed variables.Definition DataLoader.cxx:146; TMVA::DataLoader::SetBackgroundWeightExpressionvoid SetBackgroundWeightExpression(const TString &variable)Definition DataLoader.cxx:556; TMVA::DataLoader::AddCutvoid AddCut(const TString &c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8h_source.html:14933,test,testing,14933,doc/master/DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html,1,['test'],['testing']
Testability,"::ActionContainer_t::iterator iter = fActions.begin();; 4165 iter != end;; 4166 ++iter); 4167 {; 4168 // (fElemId == -1) indications that the action is a Push or Pop DataCache.; 4169 if (iter->fConfiguration->fElemId != (UInt_t)-1 &&; 4170 !iter->fConfiguration->fInfo->GetElements()->At(iter->fConfiguration->fElemId)->TestBit(TStreamerElement::kCache)); 4171 iter->fConfiguration->AddToOffset(delta);; 4172 }; 4173}; 4174 ; 4175void TStreamerInfoActions::TActionSequence::SetMissing(); 4176{; 4177 // Add the (potentially negative) delta to all the configuration's offset. This is used by; 4178 // TBranchElement in the case of split sub-object.; 4179 ; 4180 TStreamerInfoActions::ActionContainer_t::iterator end = fActions.end();; 4181 for(TStreamerInfoActions::ActionContainer_t::iterator iter = fActions.begin();; 4182 iter != end;; 4183 ++iter); 4184 {; 4185 if (!iter->fConfiguration->fInfo->GetElements()->At(iter->fConfiguration->fElemId)->TestBit(TStreamerElement::kCache)); 4186 iter->fConfiguration->SetMissing();; 4187 }; 4188}; 4189 ; 4190TStreamerInfoActions::TActionSequence *TStreamerInfoActions::TActionSequence::CreateCopy(); 4191{; 4192 // Create a copy of this sequence.; 4193 ; 4194 TStreamerInfoActions::TActionSequence *sequence = new TStreamerInfoActions::TActionSequence(fStreamerInfo, fActions.size(), IsForVectorPtrLooper());; 4195 ; 4196 sequence->fLoopConfig = fLoopConfig ? fLoopConfig->Copy() : 0;; 4197 ; 4198 TStreamerInfoActions::ActionContainer_t::iterator end = fActions.end();; 4199 for(TStreamerInfoActions::ActionContainer_t::iterator iter = fActions.begin();; 4200 iter != end;; 4201 ++iter); 4202 {; 4203 TConfiguration *conf = iter->fConfiguration->Copy();; 4204 sequence->AddAction( iter->fAction, conf );; 4205 }; 4206 return sequence;; 4207}; 4208 ; 4209void TStreamerInfoActions::TActionSequence::AddToSubSequence(TStreamerInfoActions::TActionSequence *sequence,; 4210 const TStreamerInfoActions::TIDs &element_ids,; 4211 Int_t offset,; 4212 TStreamerIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:197297,Test,TestBit,197297,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Test'],['TestBit']
Testability,"::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2435,Log,LogLikelihoodFCN,2435,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,"::Box &b);  ; TFitResultPtr UnBinFit (ROOT::Fit::UnBinData *data, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption);  fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ;  . Variables; double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();  ; const int gInitialResultStatus = -99;  . Detailed Description; Namespace for the fitting classes. ; Typedef Documentation. ◆ Chi2Function. typedef Chi2FCN<ROOT::Math::IMultiGenFunction,ROOT::Math::IParamMultiFunction> ROOT::Fit::Chi2Function. Definition at line 167 of file Chi2FCN.h. ◆ Chi2GradFunction. typedef Chi2FCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::Chi2GradFunction. Definition at line 168 of file Chi2FCN.h. ◆ LogLikelihoodFunction. typedef LogLikelihoodFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::LogLikelihoodFunction. Definition at line 180 of file LogLikelihoodFCN.h. ◆ LogLikelihoodGradFunction. typedef LogLikelihoodFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::LogLikelihoodGradFunction. Definition at line 181 of file LogLikelihoodFCN.h. ◆ PoissonLLFunction. typedef PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::PoissonLLFunction. Definition at line 214 of file PoissonLikelihoodFCN.h. ◆ PoissonLLGradFunction. typedef PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::PoissonLLGradFunction. Definition at line 215 of file PoissonLikelihoodFCN.h. Enumeration Type Documentation. ◆ EChisquareType. enum class ROOT::Fit::EChisquareType. strong . EnumeratorkNeyman ; kPLikeRatio ; kPearson . Definition at line 53 of file HFitInterface.h. ◆ EFitObjectType. enum class ROOT::Fit::EFitObjectType. strong . EnumeratorkHistogram ; kGraph . Definition at line 48 of file HFitInterface.h. Function Documentation. ◆ Chisquare() [1/2]. double ROOT::Fit::Chi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:8721,Log,LogLikelihoodGradFunction,8721,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,2,['Log'],['LogLikelihoodGradFunction']
Testability,"::BreitWigner(Double_t mean, Double_t gamma); 227{; 228 Double_t rval, displ;; 229 rval = 2*Rndm() - 1;; 230 displ = 0.5*gamma*TMath::Tan(rval*TMath::PiOver2());; 231 ; 232 return (mean+displ);; 233}; 234 ; 235////////////////////////////////////////////////////////////////////////////////; 236/// Generates random vectors, uniformly distributed over a circle of given radius.; 237/// Input : r = circle radius; 238/// Output: x,y a random 2-d vector of length r; 239 ; 240void TRandom::Circle(Double_t &x, Double_t &y, Double_t r); 241{; 242 Double_t phi = Uniform(0,TMath::TwoPi());; 243 x = r*TMath::Cos(phi);; 244 y = r*TMath::Sin(phi);; 245}; 246 ; 247////////////////////////////////////////////////////////////////////////////////; 248/// Returns an exponential deviate.; 249///; 250/// exp( -t/tau ); 251 ; 252Double_t TRandom::Exp(Double_t tau); 253{; 254 Double_t x = Rndm(); // uniform on ] 0, 1 ]; 255 Double_t t = -tau * TMath::Log( x ); // convert to exponential distribution; 256 return t;; 257}; 258 ; 259////////////////////////////////////////////////////////////////////////////////; 260/// Samples a random number from the standard Normal (Gaussian) Distribution; 261/// with the given mean and sigma.; 262/// Uses the Acceptance-complement ratio from W. Hoermann and G. Derflinger; 263/// This is one of the fastest existing method for generating normal random variables.; 264/// It is a factor 2/3 faster than the polar (Box-Muller) method used in the previous; 265/// version of TRandom::Gaus. The speed is comparable to the Ziggurat method (from Marsaglia); 266/// implemented for example in GSL and available in the MathMore library.; 267///; 268/// REFERENCE: - W. Hoermann and G. Derflinger (1990):; 269/// The ACR Method for generating normal random variables,; 270/// OR Spektrum 12 (1990), 181-185.; 271///; 272/// Implementation taken from; 273/// UNURAN (c) 2000 W. Hoermann & J. Leydold, Institut f. Statistik, WU Wien; 274 ; 275Double_t TRandom::Gaus(Double_t mean,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom_8cxx_source.html:12974,Log,Log,12974,doc/master/TRandom_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom_8cxx_source.html,1,['Log'],['Log']
Testability,"::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSQLServer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TSQLServer.h. ◆ ClearError(). void TSQLServer::ClearError ; (; ). protected . reset error fields ; Definition at line 119 of file TSQLServer.cxx. ◆ Close(). virtual void TSQLServer::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ Commit(). Bool_t TSQLServer::Commit ; (; ). virtual . submit ""COMMIT"" query to database return kTRUE, if successful ; Reimplemented in TMySQLServer, TODBCServer, and TSQLiteServer.; Definition at line 160 of file TSQLServer.cxx. ◆ Connect(). TSQLServer * TSQLServer::Connect ; (; const char * ; db, . const char * ; uid, . const char * ; pw . ). static . The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ; Depending on the <dbms> the shared library (plugin) for the selected system will be loaded. When the connection could not be opened 0 is returned. ; Definition at line 61 of file TSQLServer.cxx. ◆ CreateDataBase(). virtual Int_t TSQLServer::CreateDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ DeclFileName(). static const char * TSQLServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TSQLServer.h. ◆ DropDataBase(). virtual Int_t TSQLServer::DropDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ EnableErrorOutput(). virtual void TSQLServer::EnableErrorOutput ; (; Bool_t ; on = kTRUE). inlinevirtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:15589,test,test,15589,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['test'],['test']
Testability,"::CommitSealedPage ; (; DescriptorId_t ; physicalColumnId, . const RPageStorage::RSealedPage & ; sealedPage . ). pure virtual . Write a preprocessed page to storage. The column must have been added before. ; Implemented in ROOT::Experimental::Internal::RPagePersistentSink, ROOT::Experimental::Internal::RPageSinkBuf, and ROOT::Experimental::Internal::RPageNullSink. ◆ CommitSealedPageV(). virtual void ROOT::Experimental::Internal::RPageSink::CommitSealedPageV ; (; std::span< RPageStorage::RSealedPageGroup > ; ranges). pure virtual . Write a vector of preprocessed pages to storage. The corresponding columns must have been added before. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ CommitStagedClusters(). virtual void ROOT::Experimental::Internal::RPageSink::CommitStagedClusters ; (; std::span< RStagedCluster > ; clusters). pure virtual . Commit staged clusters, logically appending them to the ntuple descriptor. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ CommitSuppressedColumn(). virtual void ROOT::Experimental::Internal::RPageSink::CommitSuppressedColumn ; (; ColumnHandle_t ; columnHandle). pure virtual . Commits a suppressed column for the current cluster. ; Can be called anytime before CommitCluster(). For any given column and cluster, there must be no calls to both CommitSuppressedColumn() and page commits. ; Implemented in ROOT::Experimental::Internal::RPageSinkBuf, ROOT::Experimental::Internal::RPagePersistentSink, and ROOT::Experimental::Internal::RPageNullSink. ◆ DropColumn(). void ROOT::Experimental::Internal::RPageSink::DropColumn ; (; ColumnHandle_t ; columnHandle). inlinefinalvirtual . Unregisters a column. ; A page source decreases the reference counter for the corresponding active column. For a page sink, dropping columns is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:10937,log,logically,10937,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,1,['log'],['logically']
Testability,"::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; UInt_tTargetSelectionToUInt(TMVA::ETargetSelection ts) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); voidTrainMonoTargetRegression(); voidTrainMultiClassification(); voidTrainMultiTargetRegression(); voidTrainSeparatedClassification(); voidTrainUnifiedClassification(); TMVA::MethodPDEFoam::EKernelUIntToKernel(UInt_t iker); TMVA::ETargetSelectionUIntToTargetSelection(UInt_t its); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); voidWriteFoamsToFile() const; virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDEFoam.html:12880,Test,TestRegression,12880,root/html530/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDEFoam.html,2,['Test'],['TestRegression']
Testability,"::DataSetFactory::EventStats::varAvLengthFloat_t * varAvLengthDefinition DataSetFactory.h:137; TMVA::DataSetFactory::EventStats::nWeEvBeforeCutFloat_t nWeEvBeforeCutDefinition DataSetFactory.h:134; TMVA::DataSetFactory::EventStats::nNegWeightsDouble_t nNegWeightsDefinition DataSetFactory.h:136; TMVA::DataSetFactory::~DataSetFactory~DataSetFactory()destructorDefinition DataSetFactory.cxx:107; TMVA::DataSetFactory::BuildInitialDataSetDataSet * BuildInitialDataSet(DataSetInfo &, TMVA::DataInputHandler &)if no entries, than create a DataSet with one Event which uses dynamic variables (pointers to variabl...Definition DataSetFactory.cxx:202; TMVA::DataSetFactory::DataSetFactoryDataSetFactory()constructorDefinition DataSetFactory.cxx:93; TMVA::DataSetFactory::EventVectorOfClassesOfTreeTypestd::map< Types::ETreeType, EventVectorOfClasses > EventVectorOfClassesOfTreeTypeDefinition DataSetFactory.h:120; TMVA::DataSetFactory::ChangeToNewTreevoid ChangeToNewTree(TreeInfo &, const DataSetInfo &)While the data gets copied into the local training and testing trees, the input tree can change (for ...Definition DataSetFactory.cxx:293; TMVA::DataSetFactory::BuildEventVectorvoid BuildEventVector(DataSetInfo &dsi, DataInputHandler &dataInput, EventVectorOfClassesOfTreeType &eventsmap, EvtStatsPerClass &eventCounts)build empty event vectors distributes events between kTraining/kTesting/kMaxTreeTypeDefinition DataSetFactory.cxx:728; TMVA::DataSetFactory::CreateDataSetDataSet * CreateDataSet(DataSetInfo &, DataInputHandler &)steering the creation of a new datasetDefinition DataSetFactory.cxx:123; TMVA::DataSetFactory::MixEventsDataSet * MixEvents(DataSetInfo &dsi, EventVectorOfClassesOfTreeType &eventsmap, EvtStatsPerClass &eventCounts, const TString &splitMode, const TString &mixMode, const TString &normMode, UInt_t splitSeed)Select and distribute unassigned events to kTraining and kTesting.Definition DataSetFactory.cxx:1063; TMVA::DataSetFactory::NumberPerClassstd::vector< int > NumberP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:84356,test,testing,84356,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability,"::EExecutionPolicy::kSequential) {; 158 return LeastSquareFit(data, executionPolicy);; 159 }; 160 ; 161 /**; 162 Fit a binned data set using a least square fit.; 163 Pass the input data using a `shared_ptr` for NOT copying the input data.; 164 */; 165 bool Fit(const std::shared_ptr<BinData> & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 166 return LeastSquareFit(data, executionPolicy);; 167 }; 168 ; 169 /**; 170 Fit a binned data set using a least square fit copying the input data.; 171 */; 172 bool LeastSquareFit(const BinData & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 173 SetData(data);; 174 return DoLeastSquareFit(executionPolicy);; 175 }; 176 /**; 177 Fit a binned data set using a least square fit NOT copying the input data.; 178 */; 179 bool LeastSquareFit(const std::shared_ptr<BinData> & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 180 SetData(data);; 181 return DoLeastSquareFit(executionPolicy);; 182 }; 183 ; 184 /**; 185 Fit an un-binned data set using the negative log-likelihood method.; 186 This function copies the input data.; 187 */; 188 bool Fit(const UnBinData & data, bool extended = false, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 189 return LikelihoodFit(data, extended, executionPolicy);; 190 }; 191 /**; 192 Fit an un-binned data set using the negative log-likelihood method.; 193 This function uses a `shared_ptr` to avoid copying the input data.; 194 */; 195 bool Fit(const std::shared_ptr<UnBinData> & data, bool extended = false, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 196 return LikelihoodFit(data, extended, executionPolicy);; 197 }; 198 ; 199 /**; 200 Binned Likelihood fit copying the input data.; 201 Default is extended.; 202 */; 203 bool LikelihoodFit(const BinData &data, bool extended = true,; 204 const RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:6593,log,log-likelihood,6593,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['log'],['log-likelihood']
Testability,"::EMVA method) const; TMVA::Types::EMVAGetMethodType(const TString& method) const; static TMVA::Types&Instance(); TMVA::Types&operator=(const TMVA::Types&); TMVA::TypesTypes(const TMVA::Types&). private:. TMVA::MsgLogger&Log() const; TMVA::TypesTypes(). Data Members; public:. enum EMVA { kVariable; kCuts; kLikelihood; kPDERS; kHMatrix; kFisher; kKNN; kCFMlpANN; kTMlpANN; kBDT; kDT; kRuleFit; kSVM; kMLP; kBayesClassifier; kFDA; kCommittee; kBoost; kPDEFoam; kLD; kPlugins; kCategory; kMaxMethod; };; enum EVariableTransform { kIdentity; kDecorrelated; kNormalized; kPCA; kRearranged; kGauss; kUniform; kMaxVariableTransform; };; enum EAnalysisType { kClassification; kRegression; kMulticlass; kNoAnalysisType; kMaxAnalysisType; };; enum ESBType { kSignal; kBackground; kSBBoth; kMaxSBType; kTrueType; };; enum ETreeType { kTraining; kTesting; kMaxTreeType; kValidation; kTrainingOriginal; };; enum EBoostStage { kBoostProcBegin; kBeforeTraining; kBeforeBoosting; kAfterBoosting; kBoostValidation; kBoostProcEnd; };. private:. TMVA::MsgLogger*fLoggermessage logger; map<TString,TMVA::Types::EMVA>fStr2typetypes-to-text map; static TMVA::Types*fgTypesPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Types(); constructor. ~Types(); destructor. TMVA::Types& Instance(); the the single instance of ""Types"" if existin already, or create it (Signleton). void DestroyInstance(); ""destructor"" of the single instance. Bool_t AddTypeMapping(TMVA::Types::EMVA method, const TString& methodname). TString GetMethodName(TMVA::Types::EMVA method) const. Types::EMVA GetMethodType(const TString& method) const. Types(). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Types.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Types.html:1514,log,logger,1514,root/html532/TMVA__Types.html,https://root.cern,https://root.cern/root/html532/TMVA__Types.html,1,['log'],['logger']
Testability,"::EMVA method) const; TMVA::Types::EMVAGetMethodType(const TString& method) const; static TMVA::Types&Instance(); TMVA::Types&operator=(const TMVA::Types&); TMVA::TypesTypes(const TMVA::Types&). private:. TMVA::MsgLogger&Log() const; TMVA::TypesTypes(). Data Members; public:. enum EMVA { kVariable; kCuts; kLikelihood; kPDERS; kHMatrix; kFisher; kKNN; kCFMlpANN; kTMlpANN; kBDT; kDT; kRuleFit; kSVM; kMLP; kBayesClassifier; kFDA; kCommittee; kBoost; kPDEFoam; kLD; kPlugins; kCategory; kMaxMethod; };; enum EVariableTransform { kIdentity; kDecorrelated; kNormalized; kPCA; kRearranged; kGauss; kUniform; kMaxVariableTransform; };; enum EAnalysisType { kClassification; kRegression; kMulticlass; kNoAnalysisType; kMaxAnalysisType; };; enum ESBType { kSignal; kBackground; kSBBoth; kMaxSBType; kTrueType; };; enum ETreeType { kTraining; kTesting; kMaxTreeType; kValidation; kTrainingOriginal; };; enum EBoostStage { kBoostProcBegin; kBeforeTraining; kBeforeBoosting; kAfterBoosting; kBoostValidation; kBoostProcEnd; };. private:. TMVA::MsgLogger*fLoggermessage logger; map<TString,TMVA::Types::EMVA>fStr2typetypes-to-text map; static TMVA::Types*fgTypesPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Types(); constructor. ~Types(); destructor. TMVA::Types& Instance(); the the single instance of ""Types"" if existin already, or create it (Signleton). void DestroyInstance(); ""destructor"" of the single instance. Bool_t AddTypeMapping(TMVA::Types::EMVA method, const TString& methodname). TString GetMethodName(TMVA::Types::EMVA method) const. Types::EMVA GetMethodType(const TString& method) const. Types(). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Types.h 40012 2011-06-27 16:03:11Z stelzer $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Types.html:1514,log,logger,1514,root/html530/TMVA__Types.html,https://root.cern,https://root.cern/root/html530/TMVA__Types.html,1,['log'],['logger']
Testability,"::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofProgressLog.html:25723,log,logs,25723,root/html604/TProofProgressLog.html,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html,1,['log'],['logs']
Testability,"::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-30 15:28; This page has been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:25723,log,logs,25723,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,1,['log'],['logs']
Testability,"::EvalErrorContext > makeEvalErrorContext () const;  ; double & maxFCN ();  ; void profileStart ();  Start profiling timer. ;  ; void profileStop ();  Stop profiling timer and report results of last session. ;  ; bool update (bool isValid);  ; void updateErrors ();  ; void updateFitConfig ();  ; bool updateMinimizerOptions (bool canDifferentMinim=true);  . Private Attributes; RooMinimizer::Config _cfg;  ; ROOT::Fit::FitConfig _config;  fitter configuration (options and parameter settings) ;  ; TStopwatch _cumulTimer;  ; std::unique_ptr< TMatrixDSym > _extV;  ; std::unique_ptr< RooAbsMinimizerFcn > _fcn;  ; std::unique_ptr< ROOT::Math::Minimizer > _minimizer;  ! pointer to used minimizer ;  ; bool _profileStart = false;  ; std::unique_ptr< FitResult > _result;  ! pointer to the object containing the result of the fit ;  ; int _status = -99;  ; std::vector< std::pair< std::string, int > > _statusHistory;  ; TStopwatch _timer;  . Friends; class RooAbsMinimizerFcn;  ; class RooFit::TestStatistics::LikelihoodGradientJob;  ; class RooMinimizerFcn;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <RooMinimizer.h>. Inheritance diagram for RooMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ PrintLevel. enum RooMinimizer::PrintLevel. EnumeratorNone ; Reduced ; Normal ; ExtraForProblem ; Maximum . Definition at line 137 of file RooMinimizer.h. ◆ Strategy. enum RooMinimizer::Strategy. EnumeratorSpeed ; Balance ; Robustness . Definition at line 136 of file RooMinimizer.h. Constructor & Destructor Documentation. ◆ RooMinimizer(). RooMinimizer::RooMinimizer ; (; RooAbsReal & ; function, . Config const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:15415,Test,TestStatistics,15415,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['Test'],['TestStatistics']
Testability,"::GSLMultiMinimizer::operator= ; (; const GSLMultiMinimizer & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiMinimizer & ROOT::Math::GSLMultiMinimizer::operator= ; (; GSLMultiMinimizer && ; rhs). delete . ◆ Restart(). int ROOT::Math::GSLMultiMinimizer::Restart ; (; ). inline . restart minimization from current point ; Definition at line 166 of file GSLMultiMinimizer.h. ◆ Set(). int ROOT::Math::GSLMultiMinimizer::Set ; (; const ROOT::Math::IMultiGradFunction & ; func, . const double * ; x, . double ; stepSize, . double ; tol . ). inline . set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ; Definition at line 115 of file GSLMultiMinimizer.h. ◆ TestGradient() [1/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; const double * ; g, . double ; absTol . ); const. inline . test gradient (require a vector gradient) ; Definition at line 179 of file GSLMultiMinimizer.h. ◆ TestGradient() [2/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from minimizer gradient vector) ; Definition at line 172 of file GSLMultiMinimizer.h. ◆ X(). double * ROOT::Math::GSLMultiMinimizer::X ; (; ); const. inline . x values at the minimum ; Definition at line 146 of file GSLMultiMinimizer.h. Member Data Documentation. ◆ fFunc. GSLMultiMinDerivFunctionWrapper ROOT::Math::GSLMultiMinimizer::fFunc. private . Definition at line 191 of file GSLMultiMinimizer.h. ◆ fMinimizer. gsl_multimin_fdfminimizer* ROOT::Math::GSLMultiMinimizer::fMinimizer. private . Definition at line 190 of file GSLMultiMinimizer.h. ◆ fType. const gsl_multimin_fdfminimizer_type* ROOT::Math::GSLMultiMinimizer::fType. private . Definition at line 192 of file GSLMultiMinimizer.h. ◆ fVec. gsl_vector* ROOT::Math::GSLMultiMinimizer::fVec. mutableprivate . Definition at line 194 of file GSLMultiMinimizer.h. math/mathmore/src/GSLMultiMinimizer.h. ROOTMathGSLMultiMinimizer. ROOT master - Reference Guide Generated on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:4525,Test,TestGradient,4525,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,1,['Test'],['TestGradient']
Testability,"::GSLRandomEngine >::GaussianTail ; (; double ; a, . double ; sigma = 1 . ). inline . Gaussian Tail distribution. ; Definition at line 89 of file GSLRandomFunctions.h. ◆ GausZig(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::GausZig ; (; double ; mean, . double ; sigma . ). inline . Definition at line 57 of file GSLRandomFunctions.h. ◆ Landau(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Landau ; (; double ; mean = 0, . double ; sigma = 1 . ). inline . Landau distribution. ; Definition at line 127 of file GSLRandomFunctions.h. ◆ Logistic(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Logistic ; (; double ; a). inline . Logistic distribution. ; Definition at line 182 of file GSLRandomFunctions.h. ◆ LogNormal(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::LogNormal ; (; double ; zeta, . double ; sigma . ). inline . Log Normal distribution. ; Definition at line 148 of file GSLRandomFunctions.h. ◆ Multinomial(). template<class EngineType > . std::vector< unsigned int > ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Multinomial ; (; unsigned int ; ntot, . const std::vector< double > & ; p . ). inline . Multinomial distribution. ; Definition at line 238 of file GSLRandomFunctions.h. ◆ NegativeBinomial(). template<class EngineType > . unsigned int ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::NegativeBinomial ; (; double ; n, . double ; prob . ). inline . Negative Binomial distribution First parameter is n, second is probability To be consistent with Random::Binomial. ; Definition at line 231 of file GSLRandomFunctions.h. ◆ Pareto(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Pareto ; (; double ; a, . d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html:11511,Log,LogNormal,11511,doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,1,['Log'],['LogNormal']
Testability,"::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngMTGSLRngMT(); ROOT::Math::GSLRngMTGSLRngMT(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMTGSLRngMT(ROOT::Math::GSLRngMT&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngMT&operator=(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMT&operator=(ROOT::Math::GSLRngMT&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLRngMT.html:2523,Log,LogNormal,2523,root/html602/ROOT__Math__GSLRngMT.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLRngMT.html,2,['Log'],['LogNormal']
Testability,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(ROOT::Math::GSLRngRanLuxD1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD1&operator=(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1&operator=(ROOT::Math::GSLRngRanLuxD1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxD1.html:2595,Log,LogNormal,2595,root/html602/ROOT__Math__GSLRngRanLuxD1.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxD1.html,2,['Log'],['LogNormal']
Testability,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(ROOT::Math::GSLRngRanLuxD2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD2&operator=(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2&operator=(ROOT::Math::GSLRngRanLuxD2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxD2.html:2595,Log,LogNormal,2595,root/html602/ROOT__Math__GSLRngRanLuxD2.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxD2.html,2,['Log'],['LogNormal']
Testability,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(ROOT::Math::GSLRngRanLuxS1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS1&operator=(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1&operator=(ROOT::Math::GSLRngRanLuxS1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxS1.html:2595,Log,LogNormal,2595,root/html602/ROOT__Math__GSLRngRanLuxS1.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxS1.html,2,['Log'],['LogNormal']
Testability,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(ROOT::Math::GSLRngRanLuxS2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS2&operator=(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2&operator=(ROOT::Math::GSLRngRanLuxS2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxS2.html:2595,Log,LogNormal,2595,root/html602/ROOT__Math__GSLRngRanLuxS2.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLRngRanLuxS2.html,2,['Log'],['LogNormal']
Testability,"::GetBuildCompilervirtual const char * GetBuildCompiler() constReturn the build compiler.Definition TSystem.cxx:3883; TSystem::CloseConnectionvirtual void CloseConnection(int sock, Bool_t force=kFALSE)Close socket connection.Definition TSystem.cxx:2390; TSystem::GetLibrariesvirtual const char * GetLibraries(const char *regexp="""", const char *option="""", Bool_t isRegexp=kTRUE)Return a space separated list of loaded shared libraries.Definition TSystem.cxx:2136; TSystem::fBuildDirTString fBuildDirDefinition TSystem.h:307; TSystem::SetErrorStrvoid SetErrorStr(const char *errstr)Set the system error string.Definition TSystem.cxx:245; TSystem::RemoveSignalHandlervirtual TSignalHandler * RemoveSignalHandler(TSignalHandler *sh)Remove a signal handler from list of signal handlers.Definition TSystem.cxx:542; TSystem::SetSoExtvirtual void SetSoExt(const char *soExt)Set shared library extension, should be either .so, .sl, .a, .dll, etc.Definition TSystem.cxx:4236; TSystem::Closelogvirtual void Closelog()Close connection to system log daemon.Definition TSystem.cxx:1694; TSystem::fBuildCompilerTString fBuildCompilerDefinition TSystem.h:303; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TSystem::GetBuildArchvirtual const char * GetBuildArch() constReturn the build architecture.Definition TSystem.cxx:3875; TSystem::Linkvirtual int Link(const char *from, const char *to)Create a link from file1 to file2.Definition TSystem.cxx:1359; TSystem::SigAlarmInterruptsSyscallsvirtual void SigAlarmInterruptsSyscalls(Bool_t)Definition TSystem.h:330; TSystem::HomeDirectoryvirtual const char * HomeDirectory(const char *userName=nullptr)Return the user's home directory.Definition TSystem.cxx:887; TSystem::SetLinkedLibsvirtual void SetLinkedLibs(const char *linkedLibs)LinkedLibs should contain the library directory and list of libraries needed to recreate the current ...Definition TSystem.cxx:4205; TSystem::GetWorkingDirec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:191718,log,log,191718,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['log'],['log']
Testability,"::GetExpFormula(Option_t* option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; static voidTFormula::GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); virtual Double_tGetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tGetMaximumStored() const; virtual Double_tGetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*GetMethodCall() const; virtual Double_tGetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tGetMinimumStored() const; virtual Double_tGetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tGetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tGetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tGetNumberFitPoints() const; virtual Int_tGetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:9406,log,logx,9406,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,1,['log'],['logx']
Testability,"::GetLastInt_t GetLast() const overrideReturn index of last object in array.Definition TObjArray.cxx:577; TObjArray::LowerBoundInt_t LowerBound() constDefinition TObjArray.h:91; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjLink::NextTObjLink * Next()Definition TList.h:151; TObjStringCollectable string class.Definition TObjString.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetObjectStatstatic void SetObjectStat(Bool_t stat)Turn on/off tracking of objects in the TObjectTable.Definition TObject.cxx:1068; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:439; TObject::Browsevirtual void Browse(TBrowser *b)Browse object. May be overridden for another default action.Definition TObject.cxx:198; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:888; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:973; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:403; TObject::Classstatic TClass * Class(); TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:780; TObject::GetObjectStatstatic Bool_t GetObjectStat()Get status of object stat flag.Definition TObject.cxx:1061; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:360549,Test,TestBit,360549,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,"::GetLastInt_t GetLast() const overrideReturn index of last object in array.Definition TObjArray.cxx:577; TObjArray::LowerBoundInt_t LowerBound() constDefinition TObjArray.h:91; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjLinkWrapper around a TObject so it can be stored in a TList.Definition TList.h:123; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjLink::NextTObjLink * Next()Definition TList.h:151; TObjStringCollectable string class.Definition TObjString.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetObjectStatstatic void SetObjectStat(Bool_t stat)Turn on/off tracking of objects in the TObjectTable.Definition TObject.cxx:1074; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::Browsevirtual void Browse(TBrowser *b)Browse object. May be overridden for another default action.Definition TObject.cxx:204; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Classstatic TClass * Class(); TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::GetObjectStatstatic Bool_t GetObjectStat()Get status of object stat flag.Definition TObject.cxx:1067; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:363187,Test,TestBit,363187,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Test'],['TestBit']
Testability,"::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTF1::GetNdim() const; virtual Int_tTF1::GetNpar() const; virtual Int_tTF1::GetNpx() const; virtual Int_tTF1::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*TF1::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tTF1::GetParameter(Int_t ipar) const; virtual Double_tTF1::GetParameter(const TString& name) const; virtual Double_t*TF1::GetParameters() const; virtual voidTF1::GetParameters(Double_t* params); TObject*TF1::GetParent() const; virtual Double_tTF1::GetParError(Int_t ipar) const; virtual const Double_t*TF1::GetParErrors() const; virtual voidTF1::GetParLimits(Int_t ipar, Double_t& parmin, Double_t& parmax) const; virtual const char*TF1::GetParName(Int_t ipar) const; virtual Int_tTF1::GetParNumber(const char* name) const; virtual Double_tTF1::GetProb() const; virtual Int_tTF1::GetQuantiles(Int_t nprobSum, Double_t* q, const Double_t* probSum); virtual Double_tTF1::GetRandom(); virtual Double_tTF1::GetRandom(Double_t xmin, Double_t xmax); virtual voidTF1::GetRange(Double_t& xmin, Double_t& xmax) const; virtual voidTF1::GetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTF1::GetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; virtual Double_tTF1::GetSave(const Double_t* x); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tTF1::GetVariable(const TString& name); virtual Double_tTF1::GetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; TAxis*TF1::GetXax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF12.html:4740,log,logx,4740,root/html604/TF12.html,https://root.cern,https://root.cern/root/html604/TF12.html,1,['log'],['logx']
Testability,"::GetParNumber(const char* name) const; virtual Double_tTF1::GetProb() const; virtual Int_tTF1::GetQuantiles(Int_t nprobSum, Double_t* q, const Double_t* probSum); virtual Double_tGetRandom(); virtual Double_tGetRandom(Double_t xmin, Double_t xmax); virtual voidGetRandom2(Double_t& xrandom, Double_t& yrandom); virtual voidGetRange(Double_t& xmin, Double_t& xmax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; virtual Double_tGetSave(const Double_t* x); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tTF1::GetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TAxis*TF1::GetXaxis() const; virtual Double_tTF1::GetXmax() const; virtual Double_tTF1::GetXmin() const; TAxis*TF1::GetYaxis() const; virtual Double_tGetYmax() const; virtual Double_tGetYmin() const; TAxis*TF1::GetZaxis() const; virtual Double_tTF1::GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); virtual voidTF1::GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTF1::InitArgs(const Double_t* x, const Double_t* params); static voidTF1::InitStandardFunctions(); virtual voidTObject::Inspect() constMENU ; virtual Double_tIntegral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsil = 0.000001); virtual Double_tIntegral(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsil = 0.000001); virtual Double_tIntegral(Double_t ax, Double_t bx, Double_t ay, Double_t by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF2.html:8021,log,logx,8021,root/html530/TF2.html,https://root.cern,https://root.cern/root/html530/TF2.html,3,['log'],['logx']
Testability,"::GoFTest::fDistEDistribution fDistType of distribution.Definition GoFTest.h:238; ROOT::Math::GoFTest::Instantiatevoid Instantiate(const Double_t *sample, size_t sampleSize)Definition GoFTest.cxx:279; ROOT::Math::GoFTest::fCombinedSamplesstd::vector< Double_t > fCombinedSamplesThe combined data.Definition GoFTest.h:241; ROOT::Math::GoFTest::KolmogorovSmirnovTestvoid KolmogorovSmirnovTest(Double_t &pvalue, Double_t &testStat) constKolmogorov-Smirnov 1-Sample Test.Definition GoFTest.cxx:921; ROOT::Math::GoFTest::fParamsstd::vector< Double_t > fParamsThe distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian)Definition GoFTest.h:239; ROOT::Math::GoFTest::ETestTypeETestTypeGoodness of Fit test types for using with the class's unary functions as a shorthand for the in-built...Definition GoFTest.h:85; ROOT::Math::GoFTest::kKS@ kKSAnderson-Darling 2-Samples Test.Definition GoFTest.h:88; ROOT::Math::GoFTest::kAD@ kADDefinition GoFTest.h:86; ROOT::Math::GoFTest::kKS2s@ kKS2sKolmogorov-Smirnov Test.Definition GoFTest.h:89; ROOT::Math::GoFTest::kAD2s@ kAD2sAnderson-Darling Test. Default value.Definition GoFTest.h:87; ROOT::Math::GoFTest::SetSamplesvoid SetSamples(std::vector< const Double_t * > samples, const std::vector< size_t > samplesSizes)set a vector of samplesDefinition GoFTest.cxx:181; ROOT::Math::GoFTest::PValueADKSamplesstatic Double_t PValueADKSamples(size_t nsamples, Double_t A2)Computation of the K-Sample Anderson-Darling Test's p-value as described in (1)Definition GoFTest.cxx:353; ROOT::Math::GoFTest::LogSamplevoid LogSample()Applies the logarithm to the sample when the specified distribution to test is LogNormal.Definition GoFTest.cxx:303; ROOT::Math::GoFTest::~GoFTestvirtual ~GoFTest()Definition GoFTest.cxx:179; ROOT::Math::GoFTest::SetDistributionvoid SetDistribution(EDistribution dist, const std::vector< double > &distParams={})Sets the distribution for the predefined distribution types and optionally its parameters for 1-sampl...D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:40778,Test,Test,40778,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['Test'],['Test']
Testability,"::HistFactory::OverallSys,allocator<RooStats::HistFactory::OverallSys> >& systList, vector<std::string>& likelihoodTermNames, vector<std::string>& totSystTermNames); add variables for all the relative overall uncertainties we expect; range is set using defined macro (see top of the page). void MakeTotalExpected(RooWorkspace* proto, string totName, vector<std::string>& syst_x_expectedPrefixNames, vector<std::string>& normByNames); for ith bin calculate totN_i = lumi * sum_j expected_j * syst_j. void AddPoissonTerms(RooWorkspace* proto, string prefix, string obsPrefix, string expPrefix, int lowBin, int highBin, vector<std::string>& likelihoodTermNames). Relate observables to expected for each bin; later modify variable named expPrefix_i to be product of terms. void SetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin). set observed to expected. void EditSyst(RooWorkspace* proto, const char* pdfNameChar, map<std::string,double> gammaSyst, map<std::string,double> uniformSyst, map<std::string,double> logNormSyst, map<std::string,double> noSyst). void PrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); Change-> Now a static utility. RooWorkspace* MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel). void ConfigureHistFactoryDataset(RooDataSet* obsData, TH1* nominal, RooWorkspace* proto, vector<std::string> obsNameVec); Take a RooDataSet and fill it with the entries; from a TH1*, using the observable names to; determine the columns. void GuessObsNameVec(TH1* hist). RooWorkspace* MakeCombinedModel(vector<std::string> , vector<RooWorkspace*> ). RooDataSet* MergeDataSets(RooWorkspace* combined, vector<RooWorkspace*> wspace_vec, vector<std::string> channel_names, string dataSetName, RooArgList obsList, RooCategory* channelCat); Create the total dataset. TH1* MakeAbsolUncertaintyHist(const string& Name, const TH1* Hist). TH1* MakeScaledUncert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:11430,log,logNormSyst,11430,root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,1,['log'],['logNormSyst']
Testability,"::HypoTestCalculatorGeneric::fAltToysSeedto have same toys for alternate ; const RooArgSet*fConditionalMLEsAlt; const RooArgSet*fConditionalMLEsNull; const RooAbsData*RooStats::HypoTestCalculatorGeneric::fData; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fDefaultSampler; RooStats::TestStatistic*RooStats::HypoTestCalculatorGeneric::fDefaultTestStat; intfNToysAlt; intfNToysAltTail; intfNToysNull; intfNToysNullTail; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::fNullModel; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::fTestStatSampler. private:. RooArgSet*fFitInfo; boolfStoreFitInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void PreHook() const. void PostHook() const. int PreNullHook(RooArgSet* parameterPoint, double obsTestStat) const. int PreAltHook(RooArgSet* parameterPoint, double obsTestStat) const. FrequentistCalculator(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0). ~FrequentistCalculator(). void SetToys(int toysNull, int toysAlt); set number of toys. { fNToysNull = toysNull; fNToysAlt = toysAlt; }. void SetNToysInTails(int toysNull, int toysAlt); set least number of toys in tails. { fNToysNullTail = toysNull; fNToysAltTail = toysAlt; }. void SetConditionalMLEsNull(const RooArgSet* c); set given nuisance parameters to a specific value that will be used instead of their; profiled value for Null toys. void SetConditionalMLEsAlt(const RooArgSet* c); set given nuisance parameters to a specific value that will be used instead of their; profiled value for Alternate toys. void StoreFitInfo(bool val = true). const RooArgSet* GetFitInfo() const. » Author: Sven Kreiss, Kyle Cranmer Nov 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: FrequentistCalculator.h 37084 2010-11-29 21:37:13Z moneta $ » Last generated: 2015-03-10 17",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__FrequentistCalculator.html:4027,Test,TestStatSampler,4027,root/html534/RooStats__FrequentistCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__FrequentistCalculator.html,1,['Test'],['TestStatSampler']
Testability,"::IMultiGenFunction * chi2func) {; 837 // perform the minimization initializing the minimizer starting from a given obj function; 838 fFitType = objFunc->Type();; 839 fExtObjFunction = nullptr;; 840 fObjFunction = std::move(objFunc);; 841 if (!DoInitMinimizer()) return false;; 842 return DoMinimization(chi2func);; 843}; 844template<class ObjFunc_t>; 845bool Fitter::DoWeightMinimization(std::unique_ptr<ObjFunc_t> objFunc, const ROOT::Math::IMultiGenFunction * chi2func) {; 846 // perform the minimization initializing the minimizer starting from a given obj function; 847 // and apply afterwards the correction for weights. This applies only for logL fitting; 848 this->fFitType = objFunc->Type();; 849 fExtObjFunction = nullptr;; 850 // need to use a temporary shared pointer to the objective function since we cannot use the unique pointer when it has been moved; 851 std::shared_ptr<ObjFunc_t> sObjFunc{ std::move(objFunc)};; 852 fObjFunction = sObjFunc;; 853 if (!DoInitMinimizer()) return false;; 854 if (!DoMinimization(chi2func)) return false;; 855 sObjFunc->UseSumOfWeightSquare();; 856 return ApplyWeightCorrection(*sObjFunc);; 857}; 858 ; 859 ; 860void Fitter::DoUpdateFitConfig() {; 861 // update the fit configuration after a fit using the obtained result; 862 if (fResult->IsEmpty() || !fResult->IsValid() ) return;; 863 for (unsigned int i = 0; i < fConfig.NPar(); ++i) {; 864 ParameterSettings & par = fConfig.ParSettings(i);; 865 par.SetValue( fResult->Value(i) );; 866 if (fResult->Error(i) > 0) par.SetStepSize( fResult->Error(i) );; 867 }; 868}; 869 ; 870int Fitter::GetNCallsFromFCN() {; 871 // retrieve ncalls from the fit method functions; 872 // this function is called when minimizer does not provide a way of returning the number of function calls; 873 int ncalls = 0;; 874 if (!fUseGradient) {; 875 const ROOT::Math::FitMethodFunction * fcn = dynamic_cast<const ROOT::Math::FitMethodFunction *>(fObjFunction.get());; 876 if (fcn) ncalls = fcn->NCalls();; 877 }; 878 else ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:32961,log,logL,32961,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['log'],['logL']
Testability,"::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressInfo&operator=(const TProofProgressInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressInfo(const TProofProgressInfo&); TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressInfo.html:4545,Test,TestBit,4545,root/html602/TProofProgressInfo.html,https://root.cern,https://root.cern/root/html602/TProofProgressInfo.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::IsFolder() const; virtual Bool_tisFundamental() const; virtual Bool_tRooAbsRealLValue::isJacobianOK(const RooArgSet& depList) const; virtual Bool_tRooAbsRealLValue::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tRooAbsRealLValue::isValidReal(Double_t value, Bool_t printError = kFALSE) const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; virtual Double_tRooAbsRealLValue::jacobian() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); virtual Int_tRooAbsRealLValue::numBins(const char* rangeName = 0) const; virtual Int_tRooAbsRealLValue::numBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooErrorVar.html:19377,log,logEvalError,19377,root/html526/RooErrorVar.html,https://root.cern,https://root.cern/root/html526/RooErrorVar.html,6,['log'],['logEvalError']
Testability,"::IsOnHeap() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooThreshEntry&operator=(const RooThreshEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tthresh() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooThreshEntry.html:4368,Test,TestBit,4368,root/html528/RooThreshEntry.html,https://root.cern,https://root.cern/root/html528/RooThreshEntry.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSplinePoly3&operator=(TSplinePoly3 const& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_t&TSplinePoly::X(); Double_t&TSplinePoly::Y().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSplinePoly3.html:4569,Test,TestBit,4569,root/html528/TSplinePoly3.html,https://root.cern,https://root.cern/root/html528/TSplinePoly3.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSplinePoly5&operator=(TSplinePoly5 const& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_t&TSplinePoly::X(); Double_t&TSplinePoly::Y().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSplinePoly5.html:4621,Test,TestBit,4621,root/html528/TSplinePoly5.html,https://root.cern,https://root.cern/root/html528/TSplinePoly5.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TCondorSlave&operator=(const TCondorSlave&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCondorSlave.html:4471,Test,TestBit,4471,root/html530/TCondorSlave.html,https://root.cern,https://root.cern/root/html530/TCondorSlave.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TZIPMember&operator=(const TZIPMember& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPMember.html:7049,Test,TestBit,7049,root/html530/TZIPMember.html,https://root.cern,https://root.cern/root/html530/TZIPMember.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofCondor&operator=(const TProofCondor&); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tTProof::Process(const char* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tTProof::Process(TSelector* selector, Long64_t nentries, Option_t* option = """"); virtual Long64_tTProof::Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tTProof::Process(TFileCollection* fc, const char* selector, Option_t* opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:12626,log,loglevel,12626,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,2,['log'],['loglevel']
Testability,"::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofSuperMaster&operator=(const TProofSuperMaster&); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tProcess(const char* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TSelector* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofSuperMaster.html:12657,log,loglevel,12657,root/html602/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofSuperMaster.html,2,['log'],['loglevel']
Testability,"::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLRow&operator=(const TSQLRow&); const char*operator[](Int_t field); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLRow.html:4692,Test,TestBit,4692,root/html530/TSQLRow.html,https://root.cern,https://root.cern/root/html530/TSQLRow.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const char*URL() const; virtual voidTObject::UseCurrentStyle(); const char*Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLDocument.html:4447,Test,TestBit,4447,root/html534/TXMLDocument.html,https://root.cern,https://root.cern/root/html534/TXMLDocument.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Log ; (; ); const. inlineprivate . Definition at line 93 of file Results.h. ◆ operator[](). virtual const std::vector< Float_t > & TMVA::Results::operator[] ; (; Int_t ; ievt); const. pure virtual . Implemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ SetTreeType(). void TMVA::Results::SetTreeType ; (; Types::ETreeType ; type). inline . Definition at line 66 of file Results.h. ◆ Store(). void TMVA::Results::Store ; (; TObject * ; obj, . const char * ; alias = nullptr . ). Definition at line 86 of file Results.cxx. ◆ Streamer(). void TMVA::Results::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ StreamerNVirtual(). void TMVA::Results::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file Results.h. Member Data Documentation. ◆ fDsi. const DataSetInfo* TMVA::Results::fDsi. private . -> a pointer to the datasetinfo-object ; Definition at line 89 of file Results.h. ◆ fHistAlias. std::map<TString, TObject *>* TMVA::Results::fHistAlias. private . -> internal map for quick access to stored histograms ; Definition at line 91 of file Results.h. ◆ fLogger. MsgLogger* TMVA::Results::fLogger. mutableprivate . ! message logger ; Definition at line 92 of file Results.h. ◆ fStorage. TList* TMVA::Results::fStorage. private . -> stores all the result-histograms ; Definition at line 90 of file Results.h. ◆ fTreeType. Types::ETreeType TMVA::Results::fTreeType. private . tree type for this result ; Definition at line 88 of file Results.h. Libraries for TMVA::Results:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Results.h; tmva/tmva/src/Results.cxx. TMVAResults. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:15812,log,logger,15812,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,1,['log'],['logger']
Testability,"::Math::GSLRngRanLuxS1. ROOT::Math::GSLRngRanLuxS2. ROOT::Math::GSLRngTaus. ROOT::Math::GSLRootFinder←. ROOT::Math::Roots::Bisection. ROOT::Math::Roots::Brent. ROOT::Math::Roots::FalsePos. ROOT::Math::GSLRootFinderDeriv←. ROOT::Math::Roots::Newton. ROOT::Math::Roots::Secant. ROOT::Math::Roots::Steffenson. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::GaussIntegrator←. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::GenAlgoOptions. ROOT::Math::GeneticMinimizer. ROOT::Math::GradFunctor. ROOT::Math::GradFunctor1D. ROOT::Math::IGradientFunctionMultiDim←. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>; ←. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>; ←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::GradFunctor. ROOT::Math::LSResidualFunc. ROOT::Math::MinimTransformFunction. TPyMultiGradFunction. ROOT::Math::IGradientFunctionOneDim←. ROOT::Math::GradFunctor1D. ROOT::Math::IParametricFunctionMultiDim←. ROOT::Math::IParametricGradFunctionMultiDim; ←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricFunctionOneDim←. ROOT::Math::IParametricGradFunctionOneDim; ←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::VavilovAccurateCdf. ROOT::Math::VavilovAccuratePdf. ROOT::Math::VavilovAccurateQuantile. ROOT::Math::IParametricGradFunctionMultiDim←. ROOT::Math::WrappedMultiTF1. ROOT::Math::IParametricGradFunctionOneDim←. ROOT::Math::ParamFunction<ROOT::Math::IParametricGradFunctionOneDim>; ←. ROOT::Math::Polynomial. ROOT::Math::WrappedTF1. ROOT::Math::IntegratorMultiDimOptions. ROOT::Math::IntegratorOneDimOptions. ROOT::Math::LSResidualFunc. ROOT::Math::MinimT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassHierarchy.html:3799,Log,LogLikelihoodFCN,3799,root/html604/ClassHierarchy.html,https://root.cern,https://root.cern/root/html604/ClassHierarchy.html,1,['Log'],['LogLikelihoodFCN']
Testability,"::Max(0, Length()-1)); }. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* cs); { return Replace(pos, n, cs, cs ? strlen(cs) : 0); }. TString & Replace(Ssiz_t pos, Ssiz_t n, const TString& s); { return Replace(pos, n, s.Data(), s.Length()); }. TString & Replace(Ssiz_t pos, Ssiz_t n1, const TString& s, Ssiz_t n2); { return Replace(pos, n1, s.Data(), TMath::Min(s.Length(), n2)); }. TString & ReplaceAll(const TString& s1, const TString& s2); { return ReplaceAll(s1.Data(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. char & operator()(Ssiz_t i); { Cow(); return fData[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return fData[i]; }. char operator()(Ssiz_t i) const; { return fData[i]; }. Ssiz_t Length() const; { return fNchars; }. Ssiz_t Capacity() const; { return fCapacity; }. char * Data() const; { return (char*)(this+1); }. Ssiz_t First(char c) const. Ssiz_t First(const char* cs) const. Ssiz_t Last(char c) const. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. TString(const char* a1, Ssiz_t n1, const char* a2, Ssiz_t n2); Special concatenation constructor. TStringRef * Pref() const; { return (((TStringRef*) fData) - 1); }. TString(). TString * ReadString(TBuffer& b, const TClass* clReq). Bool_t Gets(FILE* fp, Bool_t chop = kTRUE); C I/O interface. void Puts(FILE* fp). operator const char*() const; Type conversion. { return fData; }. char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. Ssiz_t Index(const char* s, Ssiz_t i = 0, TString::ECaseCompare cmp = kExact) const. Ssi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TString.html:21208,Assert,AssertElement,21208,root/html528/TString.html,https://root.cern,https://root.cern/root/html528/TString.html,1,['Assert'],['AssertElement']
Testability,"::MayNotUse(const char* method) const; const char*name() const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(double x, double y, double z, bool w) const; RooCFunction4Ref<double,double,double,double,bool>&operator=(const RooCFunction4Ref<double,double,double,double,bool>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction4Ref_double_double_double_double_bool_.html:5449,Test,TestBit,5449,root/html526/RooCFunction4Ref_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html526/RooCFunction4Ref_double_double_double_double_bool_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; const char*name() const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(unsigned int x, double y, double z) const; RooCFunction3Ref<double,unsigned int,double,double>&operator=(const RooCFunction3Ref<double,unsigned int,double,double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction3Ref_double_unsigned_int_double_double_.html:5449,Test,TestBit,5449,root/html526/RooCFunction3Ref_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction3Ref_double_unsigned_int_double_double_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSharedPropertiesList&operator=(const RooSharedPropertiesList&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooSharedProperties*registerProperties(RooSharedProperties*, Bool_t canDeleteIncoming = kTRUE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidunregisterProperties(RooSharedProperties*); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSharedPropertiesList.html:4566,Test,TestBit,4566,root/html526/RooSharedPropertiesList.html,https://root.cern,https://root.cern/root/html526/RooSharedPropertiesList.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TThreadImp&operator=(const TThreadImp&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Int_tRun(TThread* th); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Long_tSelfId(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tSetCancelAsynchronous(); virtual Int_tSetCancelDeferred(); virtual Int_tSetCancelOff(); virtual Int_tSetCancelOn(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TThreadImp.html:5004,Test,TestBit,5004,root/html528/TThreadImp.html,https://root.cern,https://root.cern/root/html528/TThreadImp.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEventIterObj&operator=(const TEventIterObj&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPreProcessEvent(Long64_t); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTEventIter::StopProcess(Bool_t abort); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEventIterObj.html:4978,Test,TestBit,4978,root/html534/TEventIterObj.html,https://root.cern,https://root.cern/root/html534/TEventIterObj.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGLayoutManager::SetDefaultHeight(UInt_t); virtual voidTGLayoutManager::SetDefaultWidth(UInt_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutManager::SetModified(Bool_t flag = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGColumnLayout.html:5530,Test,TestBit,5530,root/html530/TGColumnLayout.html,https://root.cern,https://root.cern/root/html530/TGColumnLayout.html,28,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveRecTrackT<double>&operator=(const TEveRecTrackT<double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Float_tPt(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveRecTrackT<double>(); TEveRecTrackT<double>(const TEveRecTrackT<double>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveRecTrackT_double_.html:4397,Test,TestBit,4397,root/html602/TEveRecTrackT_double_.html,https://root.cern,https://root.cern/root/html602/TEveRecTrackT_double_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMatrixTLazy<double>(); TMatrixTLazy<double>(Int_t nrows, Int_t ncols); TMatrixTLazy<double>(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTLazy_double_.html:4578,Test,TestBit,4578,root/html602/TMatrixTLazy_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTLazy_double_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::MayNotUse(const char* method) const; virtual boolMerge(TCollection* in); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TParameter<bool>&operator=(const TParameter<bool>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVal(const bool& val); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParameter_bool_.html:4687,Test,TestBit,4687,root/html534/TParameter_bool_.html,https://root.cern,https://root.cern/root/html534/TParameter_bool_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::MethodBase* GetThisBase(); return a pointer the base class of this method. void ResetThisBase(); reset required for RootFinder. Double_t GetKSTrainingVsTest(Char_t SorB, TString opt = ""X""). const TMVA::Event* GetEvent(const TMVA::Event* ev) const. const TMVA::Event* GetEvent() const. const TMVA::Event* GetEvent(Long64_t ievt) const. const TMVA::Event* GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const. const TMVA::Event* GetTrainingEvent(Long64_t ievt) const. const TMVA::Event* GetTestingEvent(Long64_t ievt) const. MethodBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitle, TMVA::DataSetInfo& dsi, const TString& theOption = """", TDirectory* theBaseDir = 0); default constructur. void Train(). void SetTrainTime(Double_t trainTime); store and retrieve time used for training. { fTrainTime = trainTime; }. Double_t GetTrainTime() const; { return fTrainTime; }. void SetTestTime(Double_t testTime); store and retrieve time used for testing. { fTestTime = testTime; }. Double_t GetTestTime() const; { return fTestTime; }. void Init(); options treatment. void DeclareOptions(). void ProcessOptions(). void Reset(); reset the Method --> As if it was not yet trained, just instantiated; virtual void Reset() = 0;; for the moment, I provide a dummy (that would not work) default, just to make; compilation/running w/o parameter optimisation still possible. {return;}. Double_t GetMvaValue(Double_t* errLower = 0, Double_t* errUpper = 0); classifier response:; some methods may return a per-event error estimate; error calculation is skipped if err==0. const std::vector<Float_t>& GetRegressionValues(const TMVA::Event*const ev); regression response. const std::vector<Float_t>& GetRegressionValues(). const std::vector<Float_t>& GetMulticlassValues(); multiclass classification response. const Ranking* CreateRanking(); create ranking. void AddWeightsXMLTo(void* parent) const; the actual ""weights"". void ReadWeightsFromXML(void* wghtnode). void ReadWeightsFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBase.html:32959,test,testTime,32959,root/html602/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBase.html,2,['test'],['testTime']
Testability,"::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetSignalReferenceCutOrientation(Double_t cutOrientation); voidSetTestSignalEfficiency(Double_t effS); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidWriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodCuts.html:14137,Test,TestBit,14137,root/html530/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodCuts.html,8,['Test'],"['TestBit', 'TestBits', 'TestMulticlass', 'TestRegression']"
Testability,"::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGlobal&operator=(const TGlobal&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGlobal.html:4904,Test,TestBit,4904,root/html528/TGlobal.html,https://root.cern,https://root.cern/root/html528/TGlobal.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tprintEvalCounter() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tsetLimits(Double_t*, Double_t*); virtual Bool_tsetLimits(Double_t xmin, Double_t xmax); static voidTObject::SetObjectStat(Bool_t stat); voidsetPrintEvalCounter(Bool_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Bool_tsetUseIntegrandLimits(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsIntegrator.html:5190,Test,TestBit,5190,root/html526/RooAbsIntegrator.html,https://root.cern,https://root.cern/root/html526/RooAbsIntegrator.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTVirtualPacketizer::SetFailedPackets(TList* list); virtual voidTVirtualPacketizer::SetInitTime(); static voidTObject::SetObjectStat(Bool_t stat); voidTVirtualPacketizer::SetProgressStatus(TProofProgressStatus* st); voidTVirtualPacketizer::SetTotalEntries(Long64_t ent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTVirtualPacketizer::StopProcess(Bool_t abort); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPacketizer.html:6049,Test,TestBit,6049,root/html528/TPacketizer.html,https://root.cern,https://root.cern/root/html528/TPacketizer.html,8,['Test'],"['TestBit', 'TestBits']"
Testability,"::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReflect(Bool_t flag = kTRUE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDivIndex(Int_t index); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNext(Int_t index); static voidTObject::SetObjectStat(Bool_t stat); voidSetRange(Double_t start, Double_t step, Int_t ndivisions); voidSetSpacedOut(Bool_t flag); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVolume(TGeoVolume* vol); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPatternFinder.html:6048,Test,TestBit,6048,root/html530/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html530/TGeoPatternFinder.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemoveHandler(const char* base, const char* regexp = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPluginManager(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWritePluginMacros(const char* dir, const char* plugin = 0) const; Int_tWritePluginRecords(const char* envFile, const char* plugin = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPluginManager.html:7717,Test,TestBit,7717,root/html602/TPluginManager.html,https://root.cern,https://root.cern/root/html602/TPluginManager.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); memstat::TMemStatMng&operator=(const memstat::TMemStatMng&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBufferSize(Int_t buffersize); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMaxCalls(Int_t maxcalls); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseGNUBuiltinBacktrace(Bool_t newVal); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; memstat::TMemStatMngTMemStatMng(const memstat::TMemStatMng&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/memstat__TMemStatMng.html:4471,Test,TestBit,4471,root/html530/memstat__TMemStatMng.html,https://root.cern,https://root.cern/root/html530/memstat__TMemStatMng.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRemoveRootProxy(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDragPixmap(Pixmap_t pic, Pixmap_t mask, Int_t hot_x, Int_t hot_y); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMainFrame(TGFrame* main); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRootProxy(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); Bool_tStartDrag(TGFrame* src, Int_t x_root, Int_t y_root, Window_t grabWin = kNone); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGDNDManager.html:5486,Test,TestBit,5486,root/html530/TGDNDManager.html,https://root.cern,https://root.cern/root/html530/TGDNDManager.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterMatrix(TGeoMatrix* matrix); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); TGeoVolume*Volume(const char* name, const char* shape, Int_t nmed, Float_t* upar, Int_t npar = 0); TGeoVolume*Volume(const char* name, const char* shape, Int_t nmed, Double_t* upar, Int_t npar = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoBuilder.html:8656,Test,TestBit,8656,root/html530/TGeoBuilder.html,https://root.cern,https://root.cern/root/html530/TGeoBuilder.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::PDEFoam::MakeAlpha(); voidTObject::MakeZombie(); voidTMVA::PDEFoam::OutputGrow(Bool_t finished = false); TMVA::PDEFoamTMVA::PDEFoam::PDEFoam(const TMVA::PDEFoam&); TMVA::PDEFoamEventPDEFoamEvent(const TMVA::PDEFoamEvent&); Long_tTMVA::PDEFoam::PeekMax(); voidTMVA::PDEFoam::SetCellElement(TMVA::PDEFoamCell* cell, UInt_t i, Double_t value); voidTMVA::PDEFoam::Varedu(Double_t*, Int_t&, Double_t&, Double_t&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamEvent.html:9743,log,logic,9743,root/html530/TMVA__PDEFoamEvent.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamEvent.html,3,['log'],['logic']
Testability,"::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long64_tProcess(const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0)MENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tRemove(TDSetElement* elem, Bool_t deleteElem = kTRUE); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDirectory(const char* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEntryList(TObject* aList); voidSetLookedUp(); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetObjName(const char* objname); voidSetSrvMaps(TList* srvmaps = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWriteV3(Bool_t on = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStartViewer()MENU ; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidate(); voidValidate(TDSet* dset); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:7210,Test,TestBit,7210,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTCollection::Print(Option_t* option = """") const; virtual voidTCollection::Print(Option_t* option, Int_t recurse) const; virtual voidTCollection::Print(Option_t* option, const char* wildcard, Int_t recurse = 1) const; virtual voidTCollection::Print(Option_t* option, TPRegexp& regexp, Int_t recurse = 1) const; virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); voidRehash(Int_t newCapacity, Bool_t checkObjValidity = kTRUE); virtual TObject*Remove(TObject* obj); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); TObject*RemoveSlow(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); voidSetRehashLevel(Int_t rehash); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashTable.html:6762,Test,TestBit,6762,root/html534/THashTable.html,https://root.cern,https://root.cern/root/html534/THashTable.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefreshPhysicalNodes(); voidTObject::ResetBit(UInt_t f); Double_tSafety(Double_t[3] point, Double_t safmax = 1.0E+30); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoParallelWorld(); TGeoParallelWorld(const char* name, TGeoManager* mgr); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TGeoParallelWorld&operator=(const TGeoParallelWorld&); TGeoParallelWorld(const TGeoParallelWorld&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoParallelWorld.html:5469,Test,TestBit,5469,root/html602/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html602/TGeoParallelWorld.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Pop(); virtual voidPrint(Option_t* option = """") const; voidROOT::Fit::FitResult::PrintCovMatrix(ostream& os) const; doubleROOT::Fit::FitResult::Prob() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidROOT::Fit::FitResult::SetMinosError(unsigned int i, double elow, double eup); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; intROOT::Fit::FitResult::Status() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFitResult(int status = 0); TFitResult(const ROOT::Fit::FitResult& f); TFitResult(const TFitResult&); boolROOT::Fit::FitResult::Update(const ROOT::Math::Minimizer& min, bool isValid, unsigned int ncalls = 0); doubleROOT::Fit::FitResult::UpperError(unsigned int i) const; virtual voidTObject::UseCurrentStyle(); doubleROOT::Fit::FitResult::Value(unsigned int i) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitResult.html:7554,Test,TestBit,7554,root/html602/TFitResult.html,https://root.cern,https://root.cern/root/html602/TFitResult.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Bool_tRooAbsMCStudyModule::processAfterFit(Int_t); virtual Bool_tprocessBeforeGen(Int_t); virtual Bool_tRooAbsMCStudyModule::processBetweenGenAndFit(Int_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooRandomizeParamMCSModule(); RooRandomizeParamMCSModule(const RooRandomizeParamMCSModule& other); voidsampleGaussian(RooRealVar& param, Double_t mean, Double_t sigma); voidsampleSumGauss(const RooArgSet& paramSet, Double_t lo, Double_t hi); voidsampleSumUniform(const RooArgSet& paramSet, Double_t lo, Double_t hi); voidsampleUniform(RooRealVar& param, Double_t lo, Double_t hi); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRandomizeParamMCSModule.html:6102,Test,TestBit,6102,root/html602/RooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/root/html602/RooRandomizeParamMCSModule.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidSetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigma, Bool_t fixSigma, const Float_t* positionInit, const Bool_t* fixPosition, const Float_t* ampInit, const Bool_t* fixAmp); voidSetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:6390,Test,TestBit,6390,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidProcessMessage(const char* mess, const TObject* obj); static Int_tProjectAitoff2xy(Double_t l, Double_t b, Double_t& Al, Double_t& Ab); static Int_tProjectMercator2xy(Double_t l, Double_t b, Double_t& Al, Double_t& Ab); static Int_tProjectParabolic2xy(Double_t l, Double_t b, Double_t& Al, Double_t& Ab); static Int_tProjectSinusoidal2xy(Double_t l, Double_t b, Double_t& Al, Double_t& Ab); virtual Int_tTObject::Read(const char* name); virtual voidRecalculateRange(); virtual voidRecursiveRemove(TObject*); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetHistogram(TH1* h); static voidTObject::SetObjectStat(Bool_t stat); static voidTVirtualHistPainter::SetPainter(const char* painter); virtual voidSetShowProjection(const char* option, Int_t nbins); virtual voidSetStack(TList* stack); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowProjection3(Int_t px, Int_t py); virtual voidShowProjectionX(Int_t px, Int_t py); virtual voidShowProjectionY(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTableInit(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THistPainter.html:81863,Test,TestBit,81863,root/html530/THistPainter.html,https://root.cern,https://root.cern/root/html530/THistPainter.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; ROOT::TBranchProxyClassDescriptorTBranchProxyClassDescriptor(const char* branchname); ROOT::TBranchProxyClassDescriptorTBranchProxyClassDescriptor(const char* type, TVirtualStreamerInfo* info, const char* branchname, ROOT::TBranchProxyClassDescriptor::ELocation isclones, UInt_t splitlevel, const TString& containerName); ROOT::TBranchProxyClassDescriptorTBranchProxyClassDescriptor(const char* type, TVirtualStreamerInfo* info, const char* branchname, const char* branchPrefix, ROOT::TBranchProxyClassDescriptor::ELocation isclones, UInt_t splitlevel, const TString& containerName); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__TBranchProxyClassDescriptor.html:5964,Test,TestBit,5964,root/html534/ROOT__TBranchProxyClassDescriptor.html,https://root.cern,https://root.cern/root/html534/ROOT__TBranchProxyClassDescriptor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidTApplication::ShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidTApplication::Streamer(TBuffer&); voidTApplication::StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTApplication::Terminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQApplication(const TQApplication&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQApplication.html:9697,Test,TestBit,9697,root/html602/TQApplication.html,https://root.cern,https://root.cern/root/html602/TQApplication.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) for object managed by users. ; Definition at line 69 of file LogLikelihoodFCN.h. ◆ ~LogLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 81 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; f). inline . Copy constructor. ; Definition at line 86 of file LogLikelihoodFCN.h. Member Function Documentation. ◆ Clone(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual BaseFunction * ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Clone ; (; ); const. inlinevirtual . clone the function (need to return Base for Windows) ; Definition at line 112 of file LogLikelihoodFCN.h. ◆ DataElement(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g, . double * ; h = nullptr, . bool ; fullHessian = false . ); const. inlinevirtual . i-th likelihood contribution and its gradient ; Implements ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 121 of file LogLikelihoodFCN.h. ◆ DoDerivative(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DoDerivative ; (; const double * ; x, . unsigned int ; icoord . ); const. inlineprivatevirtual . Definition at line 161 of file LogLikelihoodFCN.h. ◆ Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:9781,Log,LogLikelihoodFCN,9781,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tReleaseCache(const char* dset); Int_tRemoveDataSet(const char* dset); voidTObject::ResetBit(UInt_t f); Int_tRunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Int_tRunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Int_tRunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Int_tRunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCPUPar(const char* par); voidSetCPUSel(const char* sel); voidSetDataGetPar(const char* par); voidSetDataGetSel(const char* sel); voidSetDataPar(const char* par); voidSetDataSel(const char* sel); voidSetDebug(Bool_t debug = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHistType(TPBHistType* histtype); voidSetNHist(Int_t nh); voidSetNTries(Int_t nt); static voidTObject::SetObjectStat(Bool_t stat); Int_tSetOutFile(const char* outfile, Bool_t verbose = kTRUE); voidSetProofDS(TProof* p); voidSetReadType(TPBReadType* readtype); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:5795,Test,TestBit,5795,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefresh(); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetIsVolAtt(Bool_t flag = kTRUE); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidSetMatrixOrig(const TGeoMatrix* local); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVisibility(Bool_t flag = kTRUE); voidSetVisibleFull(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPhysicalNode.html:7599,Test,TestBit,7599,root/html534/TGeoPhysicalNode.html,https://root.cern,https://root.cern/root/html534/TGeoPhysicalNode.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); TVectorT<double>&ResizeTo(Int_t n); TVectorT<double>&ResizeTo(const TVectorT<double>& v); TVectorT<double>&ResizeTo(Int_t lwb, Int_t upb); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); TVectorT<double>&SelectNonZeros(const TVectorT<double>& select); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetElements(const double* elements); static voidTObject::SetObjectStat(Bool_t stat); TVectorT<double>&SetSub(Int_t row_lwb, const TVectorT<double>& source); virtual voidTObject::SetUniqueID(UInt_t uid); TVectorT<double>&Shift(Int_t row_shift); virtual voidShowMembers(TMemberInspector& insp); Bool_tSomePositive(const TVectorT<double>& select); TVectorT<double>&Sqr(); TVectorT<double>&Sqrt(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); doubleSum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TVectorT<double>&Use(TVectorT<double>& v); const TVectorT<double>&Use(const TVectorT<double>& v) const; TVectorT<double>&Use(Int_t n, double* data); const TVectorT<double>&Use(Int_t n, const double* data) const; TVectorT<double>&Use(Int_t lwb, Int_t upb, double* data); const TVectorT<double>&Use(Int_t lwb, Int_t upb, const double* data) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; TVectorT<double>&Zero().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_double_.html:8132,Test,TestBit,8132,root/html528/TVectorT_double_.html,https://root.cern,https://root.cern/root/html528/TVectorT_double_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); boolRunAutoScan(double xMin, double xMax, double target, double epsilon = 0.005, unsigned int numAlgorithm = 0); boolRunFixedScan(int nBins, double xMin, double xMax); boolRunOnePoint(double thisX); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Double_tSize() const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidCreateResults(). Data Members; publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverter.html:6482,Test,TestBit,6482,root/html526/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); boolRunAutoScan(double xMin, double xMax, double target, double epsilon = 0.0050000000000000001, unsigned int numAlgorithm = 0); boolRunFixedScan(int nBins, double xMin, double xMax); boolRunOnePoint(double thisX); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Double_tSize() const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUseCLs(bool on = true); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidCreateResults(). Data Members; publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterOriginal.html:6918,Test,TestBit,6918,root/html602/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterOriginal.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp); voidSetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrumFit(); TSpectrumFit(Int_t numberPeaks); TSpectrumFit(const TSpectrumFit&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumFit.html:6409,Test,TestBit,6409,root/html602/TSpectrumFit.html,https://root.cern,https://root.cern/root/html602/TSpectrumFit.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::RecursiveRemove(TObject* obj); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual Int_tSetNextPoint(Double_t x, Double_t y, Double_t z)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual voidSetPoint(Int_t point, Double_t x, Double_t y, Double_t z)MENU ; virtual voidSetPolyLine(Int_t n, Option_t* option = """"); virtual voidSetPolyLine(Int_t n, Float_t* p, Option_t* option = """"); virtual voidSetPolyLine(Int_t n, Double_t* p, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSize() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPolyLine3D.html:7244,Test,TestBit,7244,root/html534/TPolyLine3D.html,https://root.cern,https://root.cern/root/html534/TPolyLine3D.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBorderMode(Short_t bordermode)MENU ; virtual voidSetBorderSize(Short_t bordersize)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBox::SetX1(Double_t x1); virtual voidTBox::SetX2(Double_t x2); virtual voidTBox::SetY1(Double_t y1); virtual voidTBox::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWbox.html:6661,Test,TestBit,6661,root/html528/TWbox.html,https://root.cern,https://root.cern/root/html528/TWbox.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"::ResetBit(UInt_t f); RooStats::SamplingDistributionSamplingDistribution(); RooStats::SamplingDistributionSamplingDistribution(const RooStats::SamplingDistribution&); RooStats::SamplingDistributionSamplingDistribution(const char* name, const char* title, const char* varName = 0); RooStats::SamplingDistributionSamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const char* varName = 0); RooStats::SamplingDistributionSamplingDistribution(const char* name, const char* title, RooDataSet& dataSet, const char* varName = 0); RooStats::SamplingDistributionSamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, vector<Double_t>& sampleWeights, const char* varName = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SamplingDistribution.html:6010,Test,TestBit,6010,root/html528/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html528/RooStats__SamplingDistribution.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAlternateModel(const RooStats::ModelConfig&); virtual voidSetAlternateParameters(const RooArgSet&); virtual voidSetAlternatePdf(RooAbsPdf& pdf); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetCommonPdf(RooAbsPdf& pdf); virtual voidSetData(RooAbsData& data); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGenerateBinned(bool on = true); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNuisanceParameters(const RooArgSet& params); voidSetNuisancePdf(RooAbsPdf& prior_pdf); virtual voidSetNullModel(const RooStats::ModelConfig&); virtual voidSetNullParameters(const RooArgSet&); virtual voidSetNullPdf(RooAbsPdf& pdf); voidSetNumberOfToys(unsigned int ntoys); static voidTObject::SetObjectStat(Bool_t stat); voidSetTestStatistic(int index); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidUseNuisance(bool on = true); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HybridCalculatorOriginal.html:8978,Test,TestBit,8978,root/html602/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html602/RooStats__HybridCalculatorOriginal.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::ResetCellElements(); voidTMVA::PDEFoam::RootPlot2dim(const TString& filename, TString opt, Bool_t createCanvas = kTRUE, Bool_t colors = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoam::SetDensity(TMVA::PDEFoamDensityBase* dens); voidTMVA::PDEFoam::SetDim(Int_t kDim); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::PDEFoam::SetEvPerBin(Int_t EvPerBin); voidTMVA::PDEFoam::SetInhiDiv(Int_t, Int_t); voidTMVA::PDEFoam::SetMaxDepth(UInt_t maxdepth); voidTMVA::PDEFoam::SetnBin(Int_t nBin); voidTMVA::PDEFoam::SetnCells(Long_t nCells); voidTMVA::PDEFoam::SetNmin(UInt_t val); voidTMVA::PDEFoam::SetnSampl(Long_t nSampl); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::PDEFoam::SetXmax(Int_t idim, Double_t wmax); voidTMVA::PDEFoam::SetXmin(Int_t idim, Double_t wmin); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); vector<Float_t>TMVA::PDEFoam::VarTransform(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransform(Int_t idim, Float_t x) const; vector<Float_t>TMVA::PDEFoam::VarTransformInvers(const vector<Float_t>& invec) const; Float_tTMVA::PDEFoam::VarTransformInvers(Int_t idim, Float_t x) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamDecisionTree.html:7668,Test,TestBit,7668,root/html534/TMVA__PDEFoamDecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamDecisionTree.html,10,['Test'],"['TestBit', 'TestBits']"
Testability,"::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetE(Double_t a); static voidTObject::SetObjectStat(Bool_t stat); voidSetPerp(Double_t r); voidSetPhi(Double_t phi); voidSetPtEtaPhiE(Double_t pt, Double_t eta, Double_t phi, Double_t e); voidSetPtEtaPhiM(Double_t pt, Double_t eta, Double_t phi, Double_t m); voidSetPx(Double_t a); voidSetPxPyPzE(Double_t px, Double_t py, Double_t pz, Double_t e); voidSetPy(Double_t a); voidSetPz(Double_t a); voidSetRho(Double_t rho); voidSetT(Double_t a); voidSetTheta(Double_t th); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVect(const TVector3& p); voidSetVectM(const TVector3& spatial, Double_t mass); voidSetVectMag(const TVector3& spatial, Double_t magnitude); voidSetX(Double_t a); voidSetXYZM(Double_t x, Double_t y, Double_t z, Double_t m); voidSetXYZT(Double_t x, Double_t y, Double_t z, Double_t t); voidSetY(Double_t a); voidSetZ(Double_t a); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Double_tT() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tTheta() const; TLorentzVector&Transform(const TRotation& m); TLorentzVector&Transform(const TLorentzRotation&); virtual voidTObject::UseCurrentStyle(); TVector3Vect() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tX() const; Double_tY() const; Double_tZ() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLorentzVector.html:13702,Test,TestBit,13702,root/html528/TLorentzVector.html,https://root.cern,https://root.cern/root/html528/TLorentzVector.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTSpline::SetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetPointCoeff(Int_t i, Double_t b, Double_t c, Double_t d); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static voidTest(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpline3.html:7605,Test,TestBit,7605,root/html528/TSpline3.html,https://root.cern,https://root.cern/root/html528/TSpline3.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofMgr::SendMsgToUsers(const char*, const char* = 0); virtual voidTProofMgr::SetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofMgr::SetInvalid(); virtual voidTProofMgr::SetMssUrl(const char* mss); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTProofMgr::SetROOTVersion(const char*); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTProofMgr::SetTXProofMgrHook(TProofMgr_t pmh); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTProofMgr::ShowROOTVersions(); virtual voidTProofMgr::ShowWorkers(); virtual voidTProofMgr::ShutdownSession(Int_t id); virtual voidTProofMgr::ShutdownSession(TProof* p); virtual Int_tTNamed::Sizeof() const; virtual Int_tTProofMgr::Stat(const char*, FileStat_t&, const char* = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTProofMgr::Tail(const char*, const char* = 0, const char* = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TFileCollection*TProofMgr::UploadFiles(TList* src, const char* mss, const char* dest = 0); static TFileCollection*TProofMgr::UploadFiles(const char* txtfile, const char* mss, const char* dest = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofMgrLite.html:7529,Test,TestBit,7529,root/html534/TProofMgrLite.html,https://root.cern,https://root.cern/root/html534/TProofMgrLite.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetBit(UInt_t f, Bool_t set); virtual voidTGFrame::SetCleanup(Int_t = kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetText(TGString* new_text); virtual voidSetTitle(const char* text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGLBEntry::Toggle(); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(TGLBEntry* e); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextLBEntry.html:13670,Test,TestBit,13670,root/html528/TGTextLBEntry.html,https://root.cern,https://root.cern/root/html528/TGTextLBEntry.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetNDC(Bool_t isNDC = kTRUE); virtual Int_tSetNextPoint(Double_t x, Double_t y)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual voidSetPoint(Int_t point, Double_t x, Double_t y)MENU ; virtual voidSetPolyLine(Int_t n); virtual voidSetPolyLine(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); virtual voidSetPolyLine(Int_t n, Double_t* x, Double_t* y3, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPolyLine(); TPolyLine(const TPolyLine& polyline); TPolyLine(Int_t n, Option_t* option = """"); TPolyLine(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); TPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPolyLine.html:6624,Test,TestBit,6624,root/html602/TPolyLine.html,https://root.cern,https://root.cern/root/html602/TPolyLine.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); voidTGeoTube::SetTubeDimensions(Double_t rmin, Double_t rmax, Double_t dz); voidSetTubsDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTubeSeg.html:10845,Test,TestBit,10845,root/html528/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html528/TGeoTubeSeg.html,12,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"::SetCurrentPoint(Double_t x, Double_t y, Double_t z)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoNode::SetInvisible()MENU ; voidSetMatrix(const TGeoMatrix* matrix); voidTGeoNode::SetMotherVolume(TGeoVolume* mother); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTGeoNode::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoAtt::SetOptimization(Option_t* option); voidTGeoNode::SetOverlapping(Bool_t flag = kTRUE); voidTGeoNode::SetOverlaps(Int_t* ovlp, Int_t novlp); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTGeoNode::SetVirtual(); voidTGeoAtt::SetVisBranch(); virtual voidTGeoAtt::SetVisContainers(Bool_t flag = kTRUE); voidTGeoAtt::SetVisDaughters(Bool_t vis = kTRUE); virtual voidTGeoNode::SetVisibility(Bool_t vis = kTRUE)MENU ; virtual voidTGeoAtt::SetVisLeaves(Bool_t flag = kTRUE); virtual voidTGeoAtt::SetVisOnly(Bool_t flag = kTRUE); voidTGeoAtt::SetVisRaytrace(Bool_t flag = kTRUE); voidTGeoAtt::SetVisStreamed(Bool_t vis = kTRUE); voidTGeoAtt::SetVisTouched(Bool_t vis = kTRUE); voidTGeoNode::SetVolume(TGeoVolume* volume); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTGeoAtt::TestAttBit(UInt_t f) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidTGeoNode::VisibleDaughters(Bool_t vis = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeMatrix.html:7944,Test,TestAttBit,7944,root/html528/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html528/TGeoNodeMatrix.html,9,['Test'],"['TestAttBit', 'TestBit', 'TestBits']"
Testability,"::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPicture(const TGPicture* pic = 0); virtual voidTGFrame::SetSize(const TGDimension& s); voidTGTextLBEntry::SetText(TGString* new_text); virtual voidTGTextLBEntry::SetTitle(const char* text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGLBEntry::Toggle(); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(TGLBEntry* e); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGIconLBEntry.html:13969,Test,TestBit,13969,root/html534/TGIconLBEntry.html,https://root.cern,https://root.cern/root/html534/TGIconLBEntry.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfDataSets(); voidUpdatePackages(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionFrame.html:14960,Test,TestBit,14960,root/html534/TSessionFrame.html,https://root.cern,https://root.cern/root/html534/TSessionFrame.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetDtorOnly(void* obj); static voidTFormula::SetMaxima(Int_t maxop = 1000, Int_t maxpar = 1000, Int_t maxconst = 1000); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTFormula::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFormula::SetParameter(const char* name, Double_t parvalue); virtual voidTFormula::SetParameter(Int_t ipar, Double_t parvalue); virtual voidTFormula::SetParameters(const Double_t* params); virtual voidTFormula::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidTFormula::SetParName(Int_t ipar, const char* name); virtual voidTFormula::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; voidSetQuickLoad(Bool_t quick); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTFormula::Update(); virtual voidUpdateFormulaLeaves(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeFormula.html:8976,Test,TestBit,8976,root/html528/TTreeFormula.html,https://root.cern,https://root.cern/root/html528/TTreeFormula.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void* p) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int val) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t* tinfo) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; virtual voidTypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; virtual boolTypedefInfo_IsValid(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Name(TypedefInfo_t* tinfo) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t* tinfo) const; virtual intTypedefInfo_Size(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Title(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; virtual voidTypeInfo_Delete(TypeInfo_t* tinfo) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; virtual boolTypeInfo_IsValid(TypeInfo_t* tin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCint.html:15946,Test,TestBits,15946,root/html530/TCint.html,https://root.cern,https://root.cern/root/html530/TCint.html,2,['Test'],['TestBits']
Testability,"::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValuesON(Bool_t on); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaveStatsEditor.html:15051,Test,TestBit,15051,root/html528/TPaveStatsEditor.html,https://root.cern,https://root.cern/root/html528/TPaveStatsEditor.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseSplitters(Bool_t x); voidSetVertical(Bool_t x); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPack(TGClient* c, Window_t id, const TGWindow* parent = 0); TGPack(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPack.html:14424,Test,TestBit,14424,root/html602/TGPack.html,https://root.cern,https://root.cern/root/html602/TGPack.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionFrame(const TSessionFrame&); TSessionFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfDataSets(); voidUpdatePackages(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionFrame.html:14926,Test,TestBit,14926,root/html602/TSessionFrame.html,https://root.cern,https://root.cern/root/html602/TSessionFrame.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetPassedEvents(Int_t bin, Int_t events); Bool_tSetPassedHistogram(const TH1& rPassed, Option_t* opt); voidSetPosteriorAverage(Bool_t on = true); voidSetPosteriorMode(Bool_t on = true); voidSetShortestInterval(Bool_t on = true); voidSetStatisticOption(TEfficiency::EStatOption option); virtual voidSetTitle(const char* title); Bool_tSetTotalEvents(Int_t bin, Int_t events); Bool_tSetTotalHistogram(const TH1& rTotal, Option_t* opt); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWeight(Double_t weight); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); Bool_tUsesBayesianStat() const; Bool_tUsesCentralInterval() const; Bool_tUsesPosteriorAverage() const; Bool_tUsesPosteriorMode() const; Bool_tUsesShortestInterval() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; static Double_tWilson(Int_t total, Int_t passed, Double_t level, Bool_t bUpper); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:29497,Test,TestBit,29497,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TF1Editor(const TF1Editor&); TF1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1Editor.html:14793,Test,TestBit,14793,root/html602/TF1Editor.html,https://root.cern,https://root.cern/root/html602/TF1Editor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TH1Editor(const TH1Editor&); TH1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1Editor.html:19234,Test,TestBit,19234,root/html602/TH1Editor.html,https://root.cern,https://root.cern/root/html602/TH1Editor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TH2Editor(const TH2Editor&); TH2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2Editor.html:19453,Test,TestBit,19453,root/html602/TH2Editor.html,https://root.cern,https://root.cern/root/html602/TH2Editor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetInsertMode(TGTextEntry::EInsertMode mode = kInsert); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidSetMaxLength(Int_t maxlen)MENU ; virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetState(Bool_t state); virtual voidSetText(const char* text, Bool_t emit = kTRUE)MENU ; virtual voidSetTextColor(Pixel_t color, Bool_t local = kTRUE); virtual voidSetTextColor(TColor* color, Bool_t local = kTRUE); virtual voidSetTitle(const char* label); virtual voidSetToolTipText(const char* text, Long_t delayms = 500)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShiftTabPressed()SIGNAL ; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTabPressed()SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTextChanged(const char* text = 0)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextEntry.html:19592,Test,TestBit,19592,root/html534/TGTextEntry.html,https://root.cern,https://root.cern/root/html534/TGTextEntry.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetHeaderBackground(Pixel_t pixel); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGTable::SetOddRowBackground(Pixel_t pixel); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTable::Show(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGSimpleTable(const TGSimpleTable&); TGSimpleTable(TGWindow* p, Int_t id, Double_t** data, UInt_t nrows, UInt_t ncolumns); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGTable::Update(); virtual voidTGTable::UpdateView(); virtual voidTObject::UseCurrentStyle(); virtual voidTGTable::UserRangeChange(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSimpleTable.html:16524,Test,TestBit,16524,root/html602/TGSimpleTable.html,https://root.cern,https://root.cern/root/html602/TGSimpleTable.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTEveCompositeFrame::SetShowTitleBar(Bool_t show); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); static voidTEveCompositeFrame::SetupFrameMarkup(TEveCompositeFrame::IconBarCreator_foo creator, UInt_t top_frame_height = 14, UInt_t mini_bar_height = 4, Bool_t allow_top_collapse = kTRUE); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTEveCompositeFrame::ShowNormalDecorations(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveCompositeFrameInTab(TGCompositeFrame* parent, TEveWindow* eve_parent, TGTab* tab); voidTEveCompositeFrame::TitleBarClicked(); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidWindowNameChanged(const TString& name); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCompositeFrameInTab.html:14854,Test,TestBit,14854,root/html602/TEveCompositeFrameInTab.html,https://root.cern,https://root.cern/root/html602/TEveCompositeFrameInTab.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); voidSetMomentum(const TLorentzVector& p); voidSetMomentum(Double_t px, Double_t py, Double_t pz, Double_t e); voidSetMother(int i, int code); static voidTObject::SetObjectStat(Bool_t stat); voidSetPdgCode(Int_t pdg); voidSetPolarisation(const TVector3& v); voidSetPolarisation(Double_t polx, Double_t poly, Double_t polz); voidSetProductionVertex(const TLorentzVector& v); voidSetProductionVertex(Double_t vx, Double_t vy, Double_t vz, Double_t t); voidSetStatusCode(int status); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWeight(Float_t weight = 1); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSizeof3D() const; Int_tStrangeness() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Double_tT() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tTheta() const; TParticle(); TParticle(const TParticle& part); TParticle(Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, const TLorentzVector& p, const TLorentzVector& v); TParticle(Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, Double_t px, Double_t py, Double_t pz, Double_t etot, Double_t vx, Double_t vy, Double_t vz, Double_t time); virtual voidTObject::UseCurrentStyle(); Double_tVx() const; Double_tVy() const; Double_tVz() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tY() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParticle.html:7423,Test,TestBit,7423,root/html602/TParticle.html,https://root.cern,https://root.cern/root/html602/TParticle.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetTextColor(Pixel_t color, Bool_t local = kTRUE); virtual voidSetTextFont(const char* fontName, Bool_t local = kTRUE); virtual voidSetTextFont(FontStruct_t font, Bool_t local = kTRUE); virtual voidSetTitle(TGString* title); virtual voidSetTitle(const char* title); virtual voidSetTitlePos(TGGroupFrame::ETitlePos pos = kLeft); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGGroupFrame(const TGWindow* p, TGString* title, UInt_t options = kVerticalFrame, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), Pixel_t back = GetDefaultFrameBackground()); TGGroupFrame(const TGWindow* p = 0, const char* title = 0, UInt_t options = kVerticalFrame, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), Pixel_t back = GetDefaultFrameBackground()); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGGroupFrame.html:15609,Test,TestBit,15609,root/html602/TGGroupFrame.html,https://root.cern,https://root.cern/root/html602/TGGroupFrame.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTObjectSet::SetObject(TObject* obj); virtual TObject*TObjectSet::SetObject(TObject* obj, Bool_t makeOwner); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVisibility(Int_t vis = 1)MENU ; virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TVolumeView(); TVolumeView(TVolumeView* viewNode, TVolumePosition* nodePosition = 0); TVolumeView(TVolumeView* viewNode, TVolumeView* topNode); TVolumeView(TVolume* thisNode, TVolumePosition* nodePosition); TVolumeView(TVolumeView* viewNode, const Char_t* NodeName1, const Char_t* NodeName2 = 0); TVolumeView(TVolumeView* viewNode, const TVolumeView* node1, const TVolumeView* node2); TVolumeView(TVolume& pattern, Int_t maxDepLevel = 0, const TVolumePosition* nodePosition = 0, TDataSet::EDataSetPass iopt = kMarked, TVolumeView* root = 0); TVolumeView(Double_t* translate, Double_t* rotate, UInt_t positionId, TVolume* thisNode, const Char_t* thisNodePath, const Char_t* matrixName = 0, Int_t matrixType = 0); voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTDataSet::Update(); virtual voidTDataSet::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVolumeView.html:8754,Test,TestBits,8754,root/html602/TVolumeView.html,https://root.cern,https://root.cern/root/html602/TVolumeView.html,2,['Test'],['TestBits']
Testability,"::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumberOfDivisions(Int_t p); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); voidSetSphDimensions(Double_t rmin, Double_t rmax, Double_t theta1, Double_t theta2, Double_t phi1, Double_t phi2); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; TGeoSphere(); TGeoSphere(const TGeoSphere&); TGeoSphere(Double_t* param, Int_t nparam = 6); TGeoSphere(Double_t rmin, Double_t rmax, Double_t theta1 = 0, Double_t theta2 = 180, Double_t phi1 = 0, Double_t phi2 = 360); TGeoSphere(const char* name, Double_t rmin, Double_t rmax, Double_t theta1 = 0, Double_t theta2 = 180, Double_t phi1 = 0, Double_t phi2 = 360); static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoSphere.html:10720,Test,TestBit,10720,root/html602/TGeoSphere.html,https://root.cern,https://root.cern/root/html602/TGeoSphere.html,8,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability,"::SetNameTitle(const char* name, const char* title); voidSetNew(ROOT::NewFunc_t newFunc); voidSetNewArray(ROOT::NewArrFunc_t newArrayFunc); static voidTObject::SetObjectStat(Bool_t stat); voidSetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); voidSetStreamerFunc(ClassStreamerFunc_t strm); TVirtualStreamerInfo*SetStreamerInfo(Int_t version, const char* info = """"); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUnloaded(); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSize() const; virtual Int_tTNamed::Sizeof() const; voidStore(TBuffer& b) const; virtual voidStreamer(TBuffer&); voidStreamer(void* obj, TBuffer& b, const TClass* onfile_class = 0) const; voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TClass(); TClass(const char* name, Bool_t silent = kFALSE); TClass(const char* name, Version_t cversion, Bool_t silent = kFALSE); TClass(const char* name, Version_t cversion, TClass::EState theState, Bool_t silent = kFALSE); TClass(ClassInfo_t* info, Version_t cversion, const char* dfil, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); TClass(const char* name, Version_t cversion, const char* dfil, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); TClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent = kFALSE); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, void* pointer, const char* info = """").",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:14313,Test,TestBit,14313,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetRnrSelf(Bool_t rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveTrackList(TEveTrackPropagator* prop = 0); TEveTrackList(const char* name, TEveTrackPropagator* prop = 0); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrackList.html:17821,Test,TestBit,17821,root/html602/TEveTrackList.html,https://root.cern,https://root.cern/root/html602/TEveTrackList.html,6,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"::SetSelectViaFrame(Bool_t sf); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidTEveDigitSet::SetTooltipCBFoo(TEveDigitSet::TooltipCB_foo f); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTest(Int_t nboxes); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveBoxSet(const char* n = ""TEveBoxSet"", const char* t = """"); virtual voidTEveDigitSet::UnHighlighted(); virtual voidTEveDigitSet::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveDigitSet::UseSingleColor(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBoxSet.html:21267,Test,TestBit,21267,root/html602/TEveBoxSet.html,https://root.cern,https://root.cern/root/html602/TEveBoxSet.html,6,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability,"::SetSize(const TGDimension& s); voidbasic_ios<char,char_traits<char> >::setstate(ios_base::iostate state); virtual voidTGTextView::SetText(TGText* text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGView::SetVisibleStart(Int_t newTop, Int_t direction); virtual voidTGTextView::SetVsbPosition(Long_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGTextView::ShowBottom(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidTGTextView::ShowTop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); boolios_base::sync_with_stdio(bool sync = true); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; basic_ostream<char,char_traits<char> >::pos_typebasic_ostream<char,char_traits<char> >::tellp(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie() const; basic_ostream<char,char_traits<char> >*basic_ios<char,char_traits<char> >::tie(basic_ostream<char,char_traits<char> >* tie_arg); virtual Long_tTGTextView::ToObjXCoord(Long_t xCoord, Long_t line); virtual Long_tTGTextView::ToObjYCoord(Long_t yCoord); TGLongPositionTGView::ToPhysical(TGLongPosition coord) const; virtual Long_tTGTextView::ToScrXCoord(Long_t xCoord, Long_t line); virtual Long_tTGTextView::ToScrYCoord(Long_t yCoord); TGLongPositionTGView::ToVirtual(TGLongPosition coord) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); voidios_base::unsetf(ios_base::fmtflags mask); virtual voidTGTextView::Update(); virtual voidTGView::UpdateBackgroundStart(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewostream.html:19863,Test,TestBit,19863,root/html534/TGTextViewostream.html,https://root.cern,https://root.cern/root/html534/TGTextViewostream.html,1,['Test'],['TestBit']
Testability,"::SetTitleOffset(Float_t offset = 1, Option_t* axis = ""X""); virtual voidTH1::SetTitleSize(Float_t size = 0.02, Option_t* axis = ""X""); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTH1::SetXTitle(const char* title); virtual voidTH1::SetYTitle(const char* title); virtual voidTH1::SetZTitle(const char* title); virtual TH1*TH1::ShowBackground(Int_t niter = 20, Option_t* option = ""same"")MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTH1::ShowPeaks(Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.05)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidTH1::Smooth(Int_t ntimes = 1, Option_t* option = """")MENU ; static voidTH1::SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); static voidTH1::StatOverflows(Bool_t flag = kTRUE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTH1::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TH1*TH1::TransformHisto(TVirtualFFT* fft, TH1* h_output, Option_t* option); virtual voidTH1::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TH3(); TH3(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins, Int_t nbinsz, const Float_t* zbins); TH3(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins); TH3(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup); virtual Int_tBufferFill(Double_t, Double_t); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3.html:19913,Test,TestBit,19913,root/html528/TH3.html,https://root.cern,https://root.cern/root/html528/TH3.html,6,['Test'],"['TestBit', 'TestBits']"
Testability,"::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); voidTCanvas::SetWindowPosition(Int_t x, Int_t y); voidTCanvas::SetWindowSize(UInt_t ww, UInt_t wh); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); voidTCanvas::Show(); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTCanvas::Size(Float_t xsizeuser = 0, Float_t ysizeuser = 0); virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static Bool_tTCanvas::SupportAlpha(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TInspectCanvas(); TInspectCanvas(const TInspectCanvas&); TInspectCanvas(UInt_t ww, UInt_t wh); virtual voidTCanvas::ToggleAutoExec(); virtual voidTCanvas::ToggleEditor(); virtual voidTCanvas::ToggleEventStatus(); virtual voidTCanvas::ToggleToolBar(); virtual voidTCanvas::ToggleToolTips(); virtual voidTCanvas::Update(); virtual voidTCanvas::UseCurrentStyle()MENU ; Bool_tTCanvas::UseGL() const; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInspectCanvas.html:25195,Test,TestBit,25195,root/html602/TInspectCanvas.html,https://root.cern,https://root.cern/root/html602/TInspectCanvas.html,2,['Test'],['TestBit']
Testability,"::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(); virtual voidProcessOptions(). Data Members; public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kROOT; static TObject::(anonymous)TObject::kSingleKey; static TMVA::MethodBase::EWeightFileTypeTMVA::MethodBase::kTEXT; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBayesClassifier.html:15521,test,testing,15521,root/html602/TMVA__MethodBayesClassifier.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBayesClassifier.html,2,['test'],['testing']
Testability,"::TGradientDescent< Architecture_t >::Train ; (; const Data_t & ; trainingData, . size_t ; nTrainingSamples, . const Data_t & ; testData, . size_t ; nTestSamples, . Net_t & ; net, . size_t ; nThreads . ); -> Scalar_t. Definition at line 196 of file Minimizers.h. ◆ Train() [2/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::Train ; (; const Data_t & ; TrainingDataIn, . size_t ; nTrainingSamples, . const Data_t & ; TestDataIn, . size_t ; nTestSamples, . Net_t & ; net, . size_t ; nThreads = 1 . ). Train the given net using the given training input data (events), training output data (labels), test input data (events), test output data (labels). . ◆ TrainMomentum() [1/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . auto TMVA::DNN::TGradientDescent< Architecture_t >::TrainMomentum ; (; const Data_t & ; trainingData, . size_t ; nTrainingSamples, . const Data_t & ; testData, . size_t ; nTestSamples, . Net_t & ; net, . Scalar_t ; momentum, . size_t ; nThreads . ); -> Scalar_t. Definition at line 259 of file Minimizers.h. ◆ TrainMomentum() [2/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::TrainMomentum ; (; const Data_t & ; TrainingDataIn, . size_t ; nTrainingSamples, . const Data_t & ; TestDataIn, . size_t ; nTestSamples, . Net_t & ; net, . Scalar_t ; momentum, . size_t ; nThreads = 1 . ). Same as Train(...) but uses the given momentum. . Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fBatchSize. private . Batch size to use for the training. ; Definition at line 62 of file Minimizers.h. ◆ fConvergenceCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceCount. private . Current number of training epochs without.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:13998,test,testData,13998,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['test'],['testData']
Testability,"::TestCSCBits(UChar_t f) const; TEveTriangleSet(Int_t nv, Int_t nt, Bool_t norms = kFALSE, Bool_t cols = kFALSE); Int_t*Triangle(Int_t i); UChar_t*TriangleColor(Int_t i); Float_t*TriangleNormal(Int_t i); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); Float_t*Vertex(Int_t i); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var). protected:. virtual voidTEveElement::AnnihilateRecursively(); voidTAttBBox::AssertBBoxExtents(Float_t epsilon = 0.0050000000000000001); voidTAttBBox::BBoxCheckPoint(const Float_t* p); voidTAttBBox::BBoxCheckPoint(Float_t x, Float_t y, Float_t z); voidTAttBBox::BBoxClear(); voidTAttBBox::BBoxInit(Float_t infinity = 1.0E+6); voidTAttBBox::BBoxZero(Float_t epsilon = 0, Float_t x = 0, Float_t y = 0, Float_t z = 0); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); virtual voidTEveElement::PreDeleteElement(); virtual voidTEveElement::RemoveElementsInternal(); static const char*TEveElement::ToString(Bool_t b). private:. TEveTriangleSet&operator=(const TEveTriangleSet&); TEveTriangleSet(const TEveTriangleSet&). Data Members; public:. static const TGPicture*TEveElement::fgListTreeIcons[9]; static const TGPicture*TEveElement::fgRnrIcons[4]; static TObject::(anonymous)TObject::kBitMask; static TEveElement::EChangeBitsTEveElement::kCBColorSelection; static TEveElement::EChangeBitsTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTriangleSet.html:17285,Assert,AssertBBoxExtents,17285,root/html602/TEveTriangleSet.html,https://root.cern,https://root.cern/root/html602/TEveTriangleSet.html,2,['Assert'],['AssertBBoxExtents']
Testability,"::UnWrap( ); 744 {; 745 assert( fWrapped );; 746 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 747 kAsymError == fErrorType || kNoError == fErrorType );; 748 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 749 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 750 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 751 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 752 ; 753 assert( fData.empty() );; 754 assert( fDataPtr );; 755 ; 756 unsigned vectorPadding = FitData::VectorPadding(fNPoints);; 757 fData.resize(fNPoints + vectorPadding);; 758 std::copy( fDataPtr, fDataPtr + fNPoints, fData.begin() );; 759 fDataPtr = fData.empty() ? nullptr : &fData.front();; 760 ; 761 for ( unsigned int i=0; i < fDim; i++ ); 762 {; 763 assert( fCoordErrorsPtr[i] );; 764 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 765 }; 766 ; 767 if( kValueError == fErrorType || kCoordError == fErrorType ); 768 {; 769 assert( fDataError.empty() );; 770 assert( fDataErrorPtr );; 771 ; 772 fDataError.resize(fNPoints + vectorPadding);; 773 std::copy(fDataErrorPtr, fDataErrorPtr + fNPoints + vectorPadding, fDataError.begin());; 774 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 775 }; 776 ; 777 if ( kValueError == fErrorType ); 778 {; 779 for ( unsigned int i=0; i < fNPoints; i++ ); 780 {; 781 fDataError[i] = 1.0 / fDataError[i];; 782 }; 783 }; 784 ; 785 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 786 {; 787 fCoordErrors.resize( fDim );; 788 for( unsigned int i=0; i < fDim; i++ ); 789 {; 790 assert( fCoordErrorsPtr[i] );; 791 fCoordErrors[i].resize(fNPoints + vectorPadding);; 792 std::copy(fCoordErrorsPtr[i], fCoordErrorsPtr[i] + fNPoints + vectorPadding, fCoordErrors[i].begin());; 793 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 794 }; 795 ; 796 if( kAsymError == fErrorType",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:23539,assert,assert,23539,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability,"::VariableInfo>&TMVA::VariableTransformBase::Spectators(); vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Targets(); vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Variables(). private:. voidCleanUpCumulativeArrays(TString opt = ""ALL""); voidGetCumulativeDist(const vector<TMVA::Event*,allocator<TMVA::Event*> >&); Double_tOldCumulant(Float_t x, TH1* h) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::DataSetInfo*TMVA::VariableTransformBase::fDsiOutput; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fGetget variables/targets/spectators; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::VariableTransformBase::VectorOfCharAndIntTMVA::VariableTransformBase::fPutput variables/targets/spectators; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. private:. vector<std::vector<TH1F*> >fCumulativeDist! The Cummulative distributions ; vector<std::vector<PDF*> >fCumulativePDFThe cumulative PDF; UInt_tfElementsperbinav number of events stored per bin in cum dist; Bool_tfFlatNotGauss; Int_tfPdfMaxSmooth; Int_tfPdfMinSmooth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableGaussTransform(TMVA::DataSetInfo& dsi, TString strcor = """"); constructor; can only be applied one after the other when they are created. But in order to; determine the Gauss transformation. ~VariableGaussTransform( void ); destructor. void Initialize(). Bool_t PrepareTransformation(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableGaussTransform.html:9052,log,logger,9052,root/html530/TMVA__VariableGaussTransform.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableGaussTransform.html,3,['log'],['logger']
Testability,"::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfCPUParList of par files to be loaded for CPU benchmarks; TStringfCPUSelSelector to be used for CPU benchmarks; TProofBenchDataSet*fDSInstance to handle datasets operations; TStringfDataGenParList of par files to be loaded to generate data for benchmarks; TStringfDataGenSelSelector to be used for generate data for benchmarks; TStringfDataParList of par files to be loaded for data benchmarks; TStringfDataSelSelector to be used for data benchmarks; TStringfDataSetName of the dataset; Bool_tfDebugDebug switch; TPBHistType*fHistTypeType of histograms for CPU runs; Int_tfNHistNumber of histograms to be created in default CPU runs; Int_tfNtriesNumber of times a measurement is repeated; TFile*fOutFileOutput file; TStringfOutFileNameName of the output file; TProof*fProofProof; TProof*fProofDSProof to be used for dataset actions; TPBReadType*fReadTypeType of read (partial, full); TProofBenchRunCPU*fRunCPUInstance to run CPU scans; TProofBenchRunDataRead*fRunDSInstance to run data-read scans. private:. Bool_tfUnlinkOutfileWhether to remove empty output files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); Constructor: check PROOF and load selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:6636,benchmark,benchmarks,6636,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,6,['benchmark'],['benchmarks']
Testability,"::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofMgrLite(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the Lite environment. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new session. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v | SvcMsg"", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read 'len' bytes from offset 'ofs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofMgrLite.html:9097,log,logs,9097,root/html530/TProofMgrLite.html,https://root.cern,https://root.cern/root/html530/TProofMgrLite.html,4,['log'],"['log', 'logs']"
Testability,"::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooDataSet*_dataSummary dataset to store results; RooRealVar*_dll0hContainer variable for delta NLL ; RooRealVar*_nll0hContainer variable for NLL result on null hypothesis; Double_t_nullValueNumeric value of Nsignal parameter representing the null hypothesis; string_parNameName of Nsignal parameter; RooRealVar*_sig0hContainer variable for NLL result with signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDLLSignificanceMCSModule(const RooRealVar& param, Double_t nullHypoValue); Constructor of module with parameter to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const char* parName, Double_t nullHypoValue); Constructor of module with parameter name to be interpreted as nSignal and the value of the; null hypothesis for nSignal (usually zero). RooDLLSignificanceMCSModule(const RooDLLSignificanceMCSModule& other); Copy constructor. Bool_t initializeInstance(); Initialize module after attachment to RooMCStudy object. Bool_t initializeRun(Int_t ); Initialize module at beginning of RooCMStudy run. RooDataSet* finalizeRun(); Return auxiliary dataset with results of delta(-log(L)); calculations of this module so that it is merged with; RooMCStudy::fitParDataSet() by RooMCStudy. Bool_t processAfterFit(Int_t ); Save likelihood from nominal fit, fix chosen parameter to its; null hypothesis value and rerun fit Save difference in likelihood; and associated Gaussian significance in auxilary dataset. virtual ~RooDLLSignificanceMCSModule(). » Last changed: Mon Dec 7 13:47:18 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html:8771,log,log,8771,root/html526/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html526/RooDLLSignificanceMCSModule.html,1,['log'],['log']
Testability,"::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; RooListProxy_set1Set of constraint terms; TIterator*_setIter1! do not persist; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooConstraintSum(); Default constructor. RooConstraintSum(const char* name, const char* title, const RooArgSet& constraintSet, const RooArgSet& paramSet); Constructor with set of constraint p.d.f.s. All elements in constraintSet must inherit from RooAbsPdf. RooConstraintSum(const RooConstraintSum& other, const char* name = 0); Copy constructor. ~RooConstraintSum(); Destructor. Double_t evaluate() const; Return sum of -log of constraint p.d.f.s. TObject* clone(const char* newname) const; { return new RooConstraintSum(*this, newname); }. » Last changed: Tue Dec 8 17:03:16 2009 » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooConstraintSum.html:33065,log,log,33065,root/html526/RooConstraintSum.html,https://root.cern,https://root.cern/root/html526/RooConstraintSum.html,1,['log'],['log']
Testability,"::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsOptTestStatistic(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE, Bool_t cloneInputData = kTRUE); Constructor taking function (real), a dataset (data), a set of projected observables (projSet). If; rangeName is not null, only events in the dataset inside the range will be used in the test; statistic calculation. If addCoefRangeName is not null, all RooAddPdf component of 'real' will be; instructed to fix their fraction definitions to the given named range. If nCPU is greater than; 1 the test statistic calculation will be paralellized over multiple processes. By default the data; is split with 'bulk' partitioning (each process calculates a contigious block of fraction 1/nCPU; of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; in each processing block many vary greatly thereby distributing the workload rather unevenly.; If interleave is set to true, the interleave partitioning strategy is used where each partition; i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; If splitCutRange is true, a different rangeName constructed as rangeName_{catName} will be used; as range definition for each index state of a RooSimultaneous. RooAbsOptTestStatistic(const RooAbsOptTestStatistic& other, const char* name = 0); Copy constructor. void initSlave(RooAbsReal& real, RooAbsData& indata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName). ~RooAbsOptTestStatistic(); Destructor. Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsOptTestStatistic.html:44222,test,test,44222,root/html602/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsOptTestStatistic.html,2,['test'],['test']
Testability,"::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsString.html:2920,test,testArg,2920,root/html526/RooAbsString.html,https://root.cern,https://root.cern/root/html526/RooAbsString.html,3,['test'],['testArg']
Testability,"::cout << ""- doing optimizer update \n"";; 1515 ; 1516 // increment optimizer step that is used in some algorithms (e.g. ADAM); 1517 optimizer->IncrementGlobalStep();; 1518 optimizer->Step();; 1519 ; 1520#ifdef DEBUG; 1521 std::cout << ""minmimizer step - momentum "" << settings.momentum << "" learning rate "" << optimizer->GetLearningRate() << std::endl;; 1522 for (size_t l = 0; l < nlayers; ++l) {; 1523 if (deepNet.GetLayerAt(l)->GetWeights().size() > 0) {; 1524 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightsAt(0),TString::Format(""weights after step layer %d"",l).Data());; 1525 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightGradientsAt(0),""weight gradients"");; 1526 }; 1527 }; 1528#endif; 1529 ; 1530 }; 1531 ; 1532 if (debugFirstEpoch) std::cout << ""\n End batch loop - compute validation loss \n"";; 1533 //}; 1534 debugFirstEpoch = false;; 1535 if ((nTrainEpochs % settings.testInterval) == 0) {; 1536 ; 1537 std::chrono::time_point<std::chrono::system_clock> t1,t2;; 1538 ; 1539 t1 = std::chrono::system_clock::now();; 1540 ; 1541 // Compute validation error.; 1542 ; 1543 ; 1544 Double_t valError = 0.0;; 1545 bool inTraining = false;; 1546 for (auto batch : validationData) {; 1547 auto inputTensor = batch.GetInput();; 1548 auto outputMatrix = batch.GetOutput();; 1549 auto weights = batch.GetWeights();; 1550 // should we apply droput to the loss ??; 1551 valError += deepNet.Loss(inputTensor, outputMatrix, weights, inTraining, includeRegularization);; 1552 }; 1553 // normalize loss to number of batches and add regularization term; 1554 Double_t regTerm = (includeRegularization) ? deepNet.RegularizationTerm() : 0.0;; 1555 valError /= (Double_t)(nValidationSamples / settings.batchSize);; 1556 valError += regTerm;; 1557 ; 1558 //Log the loss value; 1559 fTrainHistory.AddValue(""valError"",nTrainEpochs,valError);; 1560 ; 1561 t2 = std::chrono::system_clock::now();; 1562 ; 1563 // checking for convergence; 1564 if (valError < minValError) {; 1565 convergenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:61007,test,testInterval,61007,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['test'],['testInterval']
Testability,"::endl;; 726 ; 727 A2 = adk[0]; ; 728 ; 729 // compute the normalized test statistic ; 730 ; 731 std::vector<size_t> ns(fSamples.size());; 732 for (unsigned int k = 0; k < ns.size(); ++k) ns[k] = fSamples[k].size();; 733 Double_t sigmaN = GetSigmaN(ns, N);; 734 A2 -= fSamples.size() - 1;; 735 A2 /= sigmaN; // standardized test statistic; 736 ; 737 pvalue = PValueADKSamples(2,A2); ; 738 testStat = A2;; 739 return;; 740 }; 741 ; 742 ; 743/*; 744 Compute Anderson Darling test for two binned data set. ; 745 A binned data set can be seen as many identical observation happening at the center of the bin; 746 In this way it is trivial to apply the formula (6) in the paper of W. Scholz, M. Stephens, ""K-Sample Anderson-Darling Tests""; 747 to the case of histograms. See also http://arxiv.org/pdf/0804.0380v1.pdf paragraph 3.3.5; 748 It is important that empty bins are not present ; 749*/; 750 void GoFTest::AndersonDarling2SamplesTest(const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData & data2, Double_t& pvalue, Double_t& testStat) {; 751 pvalue = -1;; 752 testStat = -1;; 753 // ; 754 // compute cumulative sum of bin counts ; 755 // std::vector<double> sum1(data1.Size() ); ; 756 // std::vector<double> sum2(data2.Size() ); ; 757 // std::vector<double> sumAll(data1.Size() + data2.Size() ); ; 758 ; 759 if (data1.NDim() != 1 && data2.NDim() != 1) {; 760 MATH_ERROR_MSG(""AndersonDarling2SamplesTest"", ""Bin Data set must be one-dimensional "");; 761 return;; 762 }; 763 unsigned int n1 = data1.Size(); ; 764 unsigned int n2 = data2.Size(); ; 765 double ntot1 = 0; ; 766 double ntot2 = 0;; 767 ; 768 ; 769 // make a combined data set and sort it ; 770 std::vector<double> xdata(n1+n2); ; 771 for (unsigned int i = 0; i < n1; ++i) {; 772 double value = 0; ; 773 const double * x = data1.GetPoint(i, value);; 774 xdata[i] = *x; ; 775 ntot1 += value; ; 776 }; 777 for (unsigned int i = 0; i < n2; ++i) {; 778 double value = 0;; 779 const double * x = data2.GetPoint(i, value);; 780 xdata[n1+i] = *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:27412,test,testStat,27412,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,2,['test'],['testStat']
Testability,"::fENDFLG. private . End flag of fit. ; Definition at line 24 of file TFumili.h. ◆ fEPS. Double_t TFumili::fEPS. private . fEPS - required precision of parameters. If fEPS<0 then ; Definition at line 58 of file TFumili.h. ◆ fEXDA. Double_t* TFumili::fEXDA. private . [fNED12] experimental data poInt_ter ; Definition at line 41 of file TFumili.h. ◆ fGr. Double_t* TFumili::fGr. private . [fMaxParam] Gradients of objective function ; Definition at line 38 of file TFumili.h. ◆ fGRAD. Bool_t TFumili::fGRAD. private . user calculated gradients ; Definition at line 28 of file TFumili.h. ◆ fGT. Double_t TFumili::fGT. private . Expected function change in next iteration. ; Definition at line 61 of file TFumili.h. ◆ fINDFLG. Int_t TFumili::fINDFLG[5]. private . internal flags; ; Definition at line 25 of file TFumili.h. ◆ fLastFixed. Int_t TFumili::fLastFixed. private . Last fixed parameter number. ; Definition at line 23 of file TFumili.h. ◆ fLogLike. Bool_t TFumili::fLogLike. private . LogLikelihood flag. ; Definition at line 31 of file TFumili.h. ◆ fMaxParam. Int_t TFumili::fMaxParam. private . Definition at line 13 of file TFumili.h. ◆ fNED1. Int_t TFumili::fNED1. private . Number of experimental vectors X=(x1,x2,...xK) ; Definition at line 16 of file TFumili.h. ◆ fNED12. Int_t TFumili::fNED12. private . fNED1+fNED2 ; Definition at line 18 of file TFumili.h. ◆ fNED2. Int_t TFumili::fNED2. private . K - Length of vector X plus 2 (for chi2) ; Definition at line 17 of file TFumili.h. ◆ fNfcn. Int_t TFumili::fNfcn. private . Number of FCN calls;. ; Definition at line 15 of file TFumili.h. ◆ fNlimMul. Int_t TFumili::fNlimMul. private . fNlimMul - after fNlimMul successful iterations permits four-fold increasing of fPL ; Definition at line 21 of file TFumili.h. ◆ fNlog. Int_t TFumili::fNlog. private . Definition at line 14 of file TFumili.h. ◆ fNmaxIter. Int_t TFumili::fNmaxIter. private . fNmaxIter - maximum number of iterations ; Definition at line 22 of file TFumili.h. ◆ fNpar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:41549,Log,LogLikelihood,41549,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['Log'],['LogLikelihood']
Testability,"::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tTQCommand::fState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tTQCommand::fStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←; TQUndoManager. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:19732,log,logging,19732,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,2,['log'],['logging']
Testability,"::fTitleobject title; Double_t*fZ[fNz] pointer to array of Z planes positions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPcon(); dummy ctor. TGeoPcon(Double_t phi, Double_t dphi, Int_t nz); Default constructor. TGeoPcon(const char* name, Double_t phi, Double_t dphi, Int_t nz); Default constructor. TGeoPcon(Double_t* params); Default constructor in GEANT3 style; param[0] = phi1; param[1] = dphi; param[2] = nz. param[3] = z1; param[4] = Rmin1; param[5] = Rmax1. TGeoPcon(const TGeoPcon& ); copy constructor. TGeoPcon& operator=(const TGeoPcon& ); assignment operator. ~TGeoPcon(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the pcon; Check if the sections are in increasing Z order. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this shape; check total z range. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the polycone. Double_t DistToSegZ(const Double_t* point, const Double_t* dir, Int_t& iz) const; compute distance to a pcon Z slice. Segment iz must be valid. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube. void DefineSection(Int_t snum, Double_t z, Double_t rmin, Double_t rmax); Defines z position of a section plane, rmin and rmax at this z. Sections; should be defined in increasing or decreasing Z order and the last section; HAS to be snum = fNz-1. Int_t GetNsegments() const; Returns n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPcon.html:15958,test,test,15958,root/html602/TGeoPcon.html,https://root.cern,https://root.cern/root/html602/TGeoPcon.html,2,['test'],['test']
Testability,::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fApplyLogLevelapply log level button; TGTextButton*fApplyParallelapply parallel nodes button; TGTextButton*fBtnAddadd package button; TGTextButton*fBtnClearclear all packages button; TGTextButton*fBtnDisabledisable packages button; TGTextButton*fBtnDownmove package down button; TGTextButton*fBtnEnableenable packages button; TGTextButton*fBtnGetQueriesget entries button; TGTextButton*fBtnNewQuerynew query button; TGTextButton*fBtnRefreshrefresh list button; TGTextButton*fBtnRemoveremove package button; TGTextButton*fBtnRemoveDSetremove dataset button; TGTextButton*fBtnShowshow packages button; TGTextButton*fBtnShowEnabledshow enabled packages button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionFrame.html:20319,log,log,20319,root/html602/TSessionFrame.html,https://root.cern,https://root.cern/root/html602/TSessionFrame.html,4,['log'],['log']
Testability,"::integral_constant<bool,; 65 std::is_integral<T>::value && std::is_signed<T>::value; 66> {};; 67 ; 68template<class T>; 69struct is_unsigned_numeral : std::integral_constant<bool,; 70 std::is_integral<T>::value && !std::is_signed<T>::value; 71> {};; 72 ; 73template<class T>; 74using is_float_numeral = std::is_floating_point<T>;; 75*/; 76 ; 77//////////////////////////////////////////////////////////////////////////; 78// //; 79// TSubString //; 80// //; 81// The TSubString class allows selected elements to be addressed. //; 82// There are no public constructors. //; 83// //; 84//////////////////////////////////////////////////////////////////////////; 85class TSubString {; 86 ; 87friend class TStringLong;; 88friend class TString;; 89 ; 90friend Bool_t operator==(const TSubString &s1, const TSubString &s2);; 91friend Bool_t operator==(const TSubString &s1, const TString &s2);; 92friend Bool_t operator==(const TSubString &s1, const char *s2);; 93 ; 94private:; 95 TString &fStr; // Referenced string; 96 Ssiz_t fBegin; // Index of starting character; 97 Ssiz_t fExtent; // Length of TSubString; 98 ; 99 // NB: the only constructor is private; 100 TSubString(const TString &s, Ssiz_t start, Ssiz_t len);; 101 ; 102protected:; 103 void SubStringError(Ssiz_t, Ssiz_t, Ssiz_t) const;; 104 void AssertElement(Ssiz_t i) const; // Verifies i is valid index; 105 ; 106public:; 107 TSubString(const TSubString &s); 108 : fStr(s.fStr), fBegin(s.fBegin), fExtent(s.fExtent) { }; 109 ; 110 TSubString &operator=(const char *s); // Assignment from a char*; 111 TSubString &operator=(const TString &s); // Assignment from a TString; 112 TSubString &operator=(const TSubString &s); // Assignment from a TSubString; 113 char &operator()(Ssiz_t i); // Index with optional bounds checking; 114 char &operator[](Ssiz_t i); // Index with bounds checking; 115 char operator()(Ssiz_t i) const; // Index with optional bounds checking; 116 char operator[](Ssiz_t i) const; // Index with bounds checking; 117 ; 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8h_source.html:3428,Assert,AssertElement,3428,doc/master/TString_8h_source.html,https://root.cern,https://root.cern/doc/master/TString_8h_source.html,1,['Assert'],['AssertElement']
Testability,"::kPtrScalarFreeFcn@ kPtrScalarFreeFcnPointer to scalar free function,.Definition TF1.h:256; TF1::kTemplScalar@ kTemplScalarTemplScalar functors evaluating on scalar parameters.Definition TF1.h:259; TF1::kTemplVec@ kTemplVecVectorized free functions or TemplScalar functors evaluating on vectorized parameters,...Definition TF1.h:258; TF1::kInterpreted@ kInterpretedInterpreted functions constructed by name,.Definition TF1.h:257; TF1::SetSavedPointvirtual void SetSavedPoint(Int_t point, Double_t value)Restore value of function saved at point.Definition TF1.cxx:3542; TF1::FixParametervirtual void FixParameter(Int_t ipar, Double_t value)Fix the value of a parameter for a fit operation The specified value will be used in the fit and the ...Definition TF1.cxx:1557; TF1::fXmaxDouble_t fXmaxUpper bounds for the range.Definition TF1.h:264; TF1::GetMaximumXvirtual Double_t GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the X value corresponding to the maximum value of the function.Definition TF1.cxx:1655; TF1::IsATClass * IsA() const overrideDefinition TF1.h:755; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TF1::GetXminvirtual Double_t GetXmin() constDefinition TF1.h:580; TF1::AddToGlobalListvirtual Bool_t AddToGlobalList(Bool_t on=kTRUE)Add to global list of functions (gROOT->GetListOfFunctions() ) return previous status (true if the fu...Definition TF1.cxx:847; TF1::IntegralOneDimvirtual Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t &err)Return Integral of function between a and b using the given parameter values and relative and absolut...Definition TF1.cxx:2621; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540; TF1::GetParNumbervirtual Int_t GetParNumber(const char *name) constDefinition TF1.h:561; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:191436,log,logx,191436,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['logx']
Testability,"::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TMVA::PDEFoam::fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**TMVA::PDEFoam::fCells[fNCells] Array of ALL cells; UInt_tfClasssignal class; TMVA::EDTSeparationTMVA::PDEFoam::fDTSeparationBACKWARDS COMPATIBILITY: split cells according to decision tree logic; Int_tTMVA::PDEFoam::fDimDimension of the integration/simulation space; TMVA::PDEFoamDensityBase*TMVA::PDEFoam::fDistr! distribution of training events; Int_tTMVA::PDEFoam::fEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tTMVA::PDEFoam::fFillFoamWithOrigWeightsBACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights; TMVA::EFoamTypeTMVA::PDEFoam::fFoamTypeBACKWARDS COMPATIBILITY: type of foam; TObjArray*TMVA::PDEFoam::fHistEdgHistograms of wt, one for each cell edge; Int_t*TMVA::PDEFoam::fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tTMVA::PDEFoam::fLastCeIndex of the last cell; TMVA::MsgLogger*TMVA::PDEFoam::fLogger! message logger; Int_t*TMVA::PDEFoam::fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tTMVA::PDEFoam::fMaxDepthmaximum depth of cell tree; Int_tTMVA::PDEFoam::fNBinNo. of bins in the edge histogram for cell MC exploration; Int_tTMVA::PDEFoam::fNCellsMaximum number of cells; UInt_tTMVA::PDEFoam::fNElementsBACKWARDS COMPATIBILITY: number of variables in every cell; Int_tTMVA::PDEFoam::fNSamplNo. of MC events, when dividing (exploring) cell; TStringTMVA::PDEFoam::fNameName of a given instance of the FOAM class; UInt_tTMVA::PDEFoam::fNminminimal number of events in cell to split cell; Int_tTMVA::PDEFoam::fNoActNumber of active cells; Bool_tTMVA::PDEFoam::fPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; TRandom3*TMVA::PDEFoam::fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*TMVA::PDEFoam::fRvec[fDim] random number vector from r.n. generator fDim+1 m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html:10983,log,logger,10983,root/html602/TMVA__PDEFoamDiscriminant.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamDiscriminant.html,2,['log'],['logger']
Testability,"::kZombie. protected:. Bool_tfArchivedwhether the query has been archived; Long64_tfBytesnumber of bytes processed; Bool_tfDrawtrue if draw action query; TDatimefEndtime when processing ended; Long64_tfEntriesnumber of entries processed; Bool_tfFinalizedwhether Terminate has been run; Long64_tfFirstfirst entry processed; Float_tfInitTimeInitialization time (seconds) (millisec precision); TList*fInputListinput list; contains also data sets, entry list, ...; TStringfLibListblank-separated list of libs loaded at fStart; TMacro*fLogFilefile with log messages from the query; Float_tfMergeTimeMerging time (seconds) (millisec precision); TStringTNamed::fNameobject identifier; Int_tfNumMergersNumber of submergers; Int_tfNumWrksNumber of workers at start; TStringfOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*fOutputListoutput list; TStringfParListcolon-separated list of PAR loaded at fStart; Float_tfPrepTimePrepare time (seconds) (millisec precision); Float_tfProcTimeProcessing time (seconds) (millisec precision); Float_tfRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringfResultFileURL of the file where results have been archived; TMacro*fSelecHdrselector header file; TMacro*fSelecImpselector implementation file; Int_tfSeqNumquery unique sequential number; TDatimefStarttime when processing started; TQueryResult::EQueryStatusfStatusquery status; Float_tfTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tfUsedCPUreal CPU time used (seconds). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TQueryResult. ←. TProofQueryResult. Function documentation; TQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, const char* selec); Main constructor. ~TQueryResult(); Destructor. TQueryResult * CloneInfo(); Return an instance of TQueryResult containing only the local; info fields, i.e. no outputlist, liblist, dset, selectors, etc..; Used for fast retrieve of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQueryResult.html:8334,log,log,8334,root/html604/TQueryResult.html,https://root.cern,https://root.cern/root/html604/TQueryResult.html,1,['log'],['log']
Testability,"::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualMutex&operator=(const TVirtualMutex&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tRelease(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTryLock(); virtual Int_tUnLock(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualMutex.html:5012,Test,TestBit,5012,root/html530/TVirtualMutex.html,https://root.cern,https://root.cern/root/html530/TVirtualMutex.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); const RooArgList&paramList() const; virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooJeffreysPrior.html:21641,test,testArg,21641,root/html528/RooJeffreysPrior.html,https://root.cern,https://root.cern/root/html528/RooJeffreysPrior.html,1,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooArgusBG&operator=(const RooArgusBG&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgusBG.html:23090,test,testArg,23090,root/html602/RooArgusBG.html,https://root.cern,https://root.cern/root/html602/RooArgusBG.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCBShape&operator=(const RooCBShape&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCBShape.html:23035,test,testArg,23035,root/html602/RooCBShape.html,https://root.cern,https://root.cern/root/html602/RooCBShape.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooDstD0BG&operator=(const RooDstD0BG&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDstD0BG.html:23112,test,testArg,23112,root/html602/RooDstD0BG.html,https://root.cern,https://root.cern/root/html602/RooDstD0BG.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooEffProd&operator=(const RooEffProd&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEffProd.html:23500,test,testArg,23500,root/html602/RooEffProd.html,https://root.cern,https://root.cern/root/html602/RooEffProd.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooHistPdf&operator=(const RooHistPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistPdf.html:23293,test,testArg,23293,root/html602/RooHistPdf.html,https://root.cern,https://root.cern/root/html602/RooHistPdf.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooKeysPdf&operator=(const RooKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooKeysPdf.html:23755,test,testArg,23755,root/html602/RooKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooKeysPdf.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooPoisson&operator=(const RooPoisson&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooPoisson.html:22990,test,testArg,22990,root/html602/RooPoisson.html,https://root.cern,https://root.cern/root/html602/RooPoisson.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooProdPdf&operator=(const RooProdPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:23922,test,testArg,23922,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooUniform&operator=(const RooUniform&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooUniform.html:23017,test,testArg,23017,root/html602/RooUniform.html,https://root.cern,https://root.cern/root/html602/RooUniform.html,2,['test'],['testArg']
Testability,"::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,unsigned int,double,double>&operator=(const RooCFunction3PdfBinding<double,unsigned int,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html:23836,test,testArg,23836,root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_unsigned_int_double_double_.html,2,['test'],['testArg']
Testability,"::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamEventDensity&operator=(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamEventDensityPDEFoamEventDensity(); TMVA::PDEFoamEventDensityPDEFoamEventDensity(vector<Double_t> box); TMVA::PDEFoamEventDensityPDEFoamEventDensity(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamEventDensity.html:4985,Test,TestBit,4985,root/html534/TMVA__PDEFoamEventDensity.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamEventDensity.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; intProcessCard(const char* filename); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HLFactory.html:5266,Test,TestBit,5266,root/html526/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__HLFactory.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReady(TSocket* sock)SIGNAL ; virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(TSocket* sock); virtual voidRemoveAll(); voidTObject::ResetBit(UInt_t f); voidResetInterrupt(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TSocket*Select(); TSocket*Select(Long_t timeout); Int_tSelect(TList* rdready, TList* wrready, Long_t timeout); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInterest(TSocket* sock, Int_t interest = kRead); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonitor.html:8080,Test,TestBit,8080,root/html530/TMonitor.html,https://root.cern,https://root.cern/root/html530/TMonitor.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSize() const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TDataType(TypedefInfo_t* info = 0); TDataType(const char* typenam); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataType.html:5365,Test,TestBit,5365,root/html602/TDataType.html,https://root.cern,https://root.cern/root/html602/TDataType.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNameReg&operator=(const RooNameReg&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; static const TNamed*ptr(const char* stringPtr); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; static const char*str(const TNamed* ptr); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNameReg.html:4917,Test,TestBit,4917,root/html526/RooNameReg.html,https://root.cern,https://root.cern/root/html526/RooNameReg.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TBrowserPlugin&operator=(const TBrowserPlugin&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCommand(const char* cmd); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetSubTab(Int_t sub); voidSetTab(Int_t tab); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBrowserPlugin.html:4729,Test,TestBit,4729,root/html526/TBrowserPlugin.html,https://root.cern,https://root.cern/root/html526/TBrowserPlugin.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THostAuth&operator=(const THostAuth&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; voidPrintEstablished() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemoveMethod(Int_t level); voidReOrder(Int_t nmet, Int_t* fmet); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDetails(Int_t level, const char* details); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEstablished(TList* nl); voidSetFirst(Int_t level); voidSetHost(const char* host); voidSetLast(Int_t level); static voidTObject::SetObjectStat(Bool_t stat); voidSetServer(Int_t server); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUser(const char* user); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdate(THostAuth* ha); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THostAuth.html:5980,Test,TestBit,5980,root/html530/THostAuth.html,https://root.cern,https://root.cern/root/html530/THostAuth.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooBinningCategory&operator=(const RooBinningCategory&); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinningCategory.html:11400,test,testArg,11400,root/html602/RooBinningCategory.html,https://root.cern,https://root.cern/root/html602/RooBinningCategory.html,2,['test'],['testArg']
Testability,"::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetStep(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCharge(Int_t charge); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetField(Double_t bx, Double_t by, Double_t bz, Bool_t is_normalized = kTRUE); voidSetHelixStep(Double_t hstep); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXYcurvature(Double_t curvature); virtual voidShowMembers(TMemberInspector& insp) const; voidStep(Double_t step); Double_tStepToPlane(Double_t* point, Double_t* norm); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoHelix(); TGeoHelix(Double_t curvature, Double_t step, Int_t charge = 1); voidUpdateHelix(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHelix.html:6051,Test,TestBit,6051,root/html602/TGeoHelix.html,https://root.cern,https://root.cern/root/html602/TGeoHelix.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStudyPackage&operator=(const RooStudyPackage&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; static voidprocessFile(const char* infile, Int_t nexp); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidrun(Int_t nExperiments); voidrunOne(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); list<RooAbsStudy*>&studies(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; RooWorkspace&wspace().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStudyPackage.html:4940,Test,TestBit,4940,root/html528/RooStudyPackage.html,https://root.cern,https://root.cern/root/html528/RooStudyPackage.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDecompSparse&operator=(const TDecompSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMatrix(const TMatrixDSparse& a); static voidTObject::SetObjectStat(Bool_t stat); Double_tTDecompBase::SetTol(Double_t newTol); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVerbose(Int_t v); virtual voidShowMembers(TMemberInspector&); virtual Bool_tSolve(TVectorD& b); virtual Bool_tSolve(TMatrixDColumn&); virtual TVectorDSolve(const TVectorD& b, Bool_t& ok); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTransSolve(TVectorD& b); virtual Bool_tTransSolve(TMatrixDColumn&); virtual TVectorDTransSolve(const TVectorD& b, Bool_t& ok); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDecompSparse.html:5443,Test,TestBit,5443,root/html534/TDecompSparse.html,https://root.cern,https://root.cern/root/html534/TDecompSparse.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLServer&operator=(const TSQLServer&); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tPing(); virtual Bool_tPingVerify(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TSQLResult*Query(const char* sql); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReload(); voidTObject::ResetBit(UInt_t f); virtual Bool_tRollback(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelectDataBase(const char* dbname); virtual const char*ServerInfo(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetFloatFormat(const char* fmt = ""%e""); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tShutdown(); virtual Bool_tStartTransaction(); virtual TSQLStatement*Statement(const char*, Int_t = 100); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLServer.html:6573,Test,TestBit,6573,root/html534/TSQLServer.html,https://root.cern,https://root.cern/root/html534/TSQLServer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::MarkovChain&operator=(const RooStats::MarkovChain&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParameters(RooArgSet& parameters); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSize() const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tWeight() const; virtual Double_tWeight(Int_t i) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MarkovChain.html:6659,Test,TestBit,6659,root/html602/RooStats__MarkovChain.html,https://root.cern,https://root.cern/root/html602/RooStats__MarkovChain.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMinuit&operator=(const RooMinuit&); voidoptimizeConst(Int_t flag); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooFitResult*save(const char* name = 0, const char* title = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tseek(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetEps(Double_t eps); voidsetErrorLevel(Double_t level); voidsetEvalErrorWall(Bool_t flag); Bool_tsetLogFile(const char* logfile = 0); voidsetMaxEvalMultiplier(Int_t n); voidsetNoWarn(); static voidTObject::SetObjectStat(Bool_t stat); voidsetPrintEvalErrors(Int_t numEvalErrors); Int_tsetPrintLevel(Int_t newLevel); voidsetProfile(Bool_t flag = kTRUE); voidsetStrategy(Int_t strat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag = kTRUE); Int_tsetWarnLevel(Int_t newLevel); virtual voidShowMembers(TMemberInspector& insp); Int_tsimplex(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidzeroEvalCount().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:5414,log,logfile,5414,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,3,"['Test', 'log']","['TestBit', 'TestBits', 'logfile']"
Testability,"::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::PointSetInterval&operator=(const RooStats::PointSetInterval&); virtual voidTObject::Paint(Option_t* option = """"); RooStats::PointSetIntervalPointSetInterval(const char* name = 0); RooStats::PointSetIntervalPointSetInterval(const RooStats::PointSetInterval&); RooStats::PointSetIntervalPointSetInterval(const char* name, RooAbsData&); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tUpperLimit(RooRealVar& param); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__PointSetInterval.html:5535,Test,TestBit,5535,root/html530/RooStats__PointSetInterval.html,https://root.cern,https://root.cern/root/html530/RooStats__PointSetInterval.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* options = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDataSet(const char* dataset); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Long64_t ent); voidSetEntryList(TObject* aList, Long64_t first = -1, Long64_t num = -1); voidSetFirst(Long64_t first); voidSetLookedUp(); voidSetMaxProcTime(Float_t mpt); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNum(Long64_t num); static voidTObject::SetObjectStat(Bool_t stat); voidSetTDSetOffset(Long64_t offset); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValid(); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidate(Bool_t isTree); voidValidate(TDSetElement* elem); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDSetElement.html:6616,Test,TestBit,6616,root/html534/TDSetElement.html,https://root.cern,https://root.cern/root/html534/TDSetElement.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoSubtraction&operator=(const TGeoSubtraction&); virtual voidPaint(Option_t* option); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoBoolNode::RegisterMatrices(); Bool_tTGeoBoolNode::ReplaceMatrix(TGeoMatrix* mat, TGeoMatrix* newmat); voidTObject::ResetBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGeoBoolNode::SetPoints(Double_t* points) const; virtual voidTGeoBoolNode::SetPoints(Float_t* points) const; voidTGeoBoolNode::SetSelected(Int_t sel); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoSubtraction(); TGeoSubtraction(const TGeoSubtraction&); TGeoSubtraction(const char* expr1, const char* expr2); TGeoSubtraction(TGeoShape* left, TGeoShape* right, TGeoMatrix* lmat = 0, TGeoMatrix* rmat = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoSubtraction.html:6563,Test,TestBit,6563,root/html602/TGeoSubtraction.html,https://root.cern,https://root.cern/root/html602/TGeoSubtraction.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = 0) const; voidPrt(const char* what, Bool_t newline = kTRUE); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); Int_tRetrieve(const char* ord = ""*"", TProofLog::ERetrieveOpt opt = TProofLog::kTrailing, const char* fname = 0, const char* pattern = 0); Int_tSave(const char* ord = ""*"", const char* fname = 0, Option_t* opt = ""w""); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLogToBox(Bool_t lgbox = kFALSE); static voidSetMaxTransferSize(Long64_t maxsz); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; TDatimeStartTime(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLog.html:7897,Test,TestBit,7897,root/html534/TProofLog.html,https://root.cern,https://root.cern/root/html534/TProofLog.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofBenchRunCPU&operator=(const TProofBenchRunCPU&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidRun(Long64_t nevents, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t draw); virtual voidRun(const char*, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDebug(Int_t debug); voidSetDirProofBench(TDirectory* dir); voidSetDraw(Int_t draw); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHistType(TPBHistType* histtype); voidSetNEvents(Long64_t nevents); voidSetNHists(Int_t nhists); voidSetNTries(Int_t ntries); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofBenchRun::SetParList(const char* pars); virtual voidTProofBenchRun::SetSelName(const char* sel); voidSetStart(Int_t start); voidSetStep(Int_t step); voidSetStop(Int_t stop); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBenchRunCPU.html:5780,Test,TestBit,5780,root/html530/TProofBenchRunCPU.html,https://root.cern,https://root.cern/root/html530/TProofBenchRunCPU.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoPatternFinder::Reflect(Bool_t flag = kTRUE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoPatternFinder::SetDivIndex(Int_t index); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoPatternFinder::SetNext(Int_t index); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoPatternFinder::SetRange(Double_t start, Double_t step, Int_t ndivisions); voidTGeoPatternFinder::SetSpacedOut(Bool_t flag); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGeoPatternFinder::SetVolume(TGeoVolume* vol); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoPatternCylPhi(); TGeoPatternCylPhi(TGeoVolume* vol, Int_t ndivisions); TGeoPatternCylPhi(TGeoVolume* vol, Int_t ndivisions, Double_t step); TGeoPatternCylPhi(TGeoVolume* vol, Int_t ndivisions, Double_t start, Double_t end); virtual voidUpdateMatrix(Int_t idiv, TGeoHMatrix& matrix) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPatternCylPhi.html:6603,Test,TestBit,6603,root/html602/TGeoPatternCylPhi.html,https://root.cern,https://root.cern/root/html602/TGeoPatternCylPhi.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoPatternFinder::Reflect(Bool_t flag = kTRUE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoPatternFinder::SetDivIndex(Int_t index); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoPatternFinder::SetNext(Int_t index); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoPatternFinder::SetRange(Double_t start, Double_t step, Int_t ndivisions); voidTGeoPatternFinder::SetSpacedOut(Bool_t flag); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGeoPatternFinder::SetVolume(TGeoVolume* vol); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoPatternSphPhi(); TGeoPatternSphPhi(TGeoVolume* vol, Int_t ndivisions); TGeoPatternSphPhi(TGeoVolume* vol, Int_t ndivisions, Double_t step); TGeoPatternSphPhi(TGeoVolume* vol, Int_t ndivisions, Double_t start, Double_t end); virtual voidUpdateMatrix(Int_t idiv, TGeoHMatrix& matrix) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPatternSphPhi.html:6603,Test,TestBit,6603,root/html602/TGeoPatternSphPhi.html,https://root.cern,https://root.cern/root/html602/TGeoPatternSphPhi.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new[](size_t sz, void* vp); TGrid&operator=(const TGrid&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TGridJobStatusList*Ps(const char*, Bool_t = kTRUE); virtual const char*Pwd(Bool_t = kFALSE); virtual TGridResult*Query(const char*, const char*, const char* = """", const char* = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRegister(const char*, const char*, Long_t = -1, const char* = 0, const char* = 0, Bool_t = kFALSE); voidTObject::ResetBit(UInt_t f); virtual Bool_tResubmit(TGridJob* gridjob); virtual Bool_tResubmitById(TString); virtual Bool_tRm(const char*, Option_t* = """", Bool_t = kFALSE); virtual Bool_tRmdir(const char* = """", Option_t* = """", Bool_t = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShell(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStderr(); virtual voidStdout(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual TGridJob*Submit(const char*); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGrid.html:6140,Test,TestBit,6140,root/html528/TGrid.html,https://root.cern,https://root.cern/root/html528/TGrid.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNewClass(TClass* cl); virtual voidSetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset); virtual voidSetSize(Int_t dsize); virtual voidSetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTObjectOffset(Int_t tobjoffset); virtual voidSetType(Int_t dtype); virtual voidSetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStreamerElement.html:5859,Test,TestBit,5859,root/html530/TStreamerElement.html,https://root.cern,https://root.cern/root/html530/TStreamerElement.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,"::ostream &out, Option_t *="""") overrideSave a main frame widget as a C++ statement(s) on output stream out.Definition TStyle.cxx:2027; TStyle::fCandleScaledBool_t fCandleScaledCandle plot, shall the box-width be scaled to each other by the integral of a box?Definition TStyle.h:143; TStyle::GetTitleHFloat_t GetTitleH() constDefinition TStyle.h:283; TStyle::GetStatStyleStyle_t GetStatStyle() constDefinition TStyle.h:262; TStyle::fStatFontSizeFloat_t fStatFontSizeFont size in pixels for fonts with precision type 3.Definition TStyle.h:110; TStyle::fCanvasPreferGLBool_t fCanvasPreferGLIf true, rendering in canvas is with GL.Definition TStyle.h:84; TStyle::fLegoInnerRFloat_t fLegoInnerRInner radius for cylindrical legos.Definition TStyle.h:129; TStyle::GetHistLineWidthWidth_t GetHistLineWidth() constDefinition TStyle.h:236; TStyle::EPaperSizeEPaperSizeDefinition TStyle.h:153; TStyle::kA4@ kA4Definition TStyle.h:153; TStyle::kUSLetter@ kUSLetterDefinition TStyle.h:153; TStyle::fOptLogyInt_t fOptLogyTrue if log scale in y.Definition TStyle.h:40; TStyle::fAxisMaxDigitsInt_t fAxisMaxDigitsNumber of digits above which the 10^N notation is used for axis.Definition TStyle.h:149; TStyle::GetFrameLineStyleStyle_t GetFrameLineStyle() constDefinition TStyle.h:228; TStyle::SetIsReadingvoid SetIsReading(Bool_t reading=kTRUE)Sets the fIsReading member to reading (default=kTRUE).Definition TStyle.cxx:1374; TStyle::GetStatWFloat_t GetStatW() constDefinition TStyle.h:266; TStyle::fGridStyleStyle_t fGridStyleGrid line style.Definition TStyle.h:61; TStyle::fHistFillColorColor_t fHistFillColorHistogram fill color.Definition TStyle.h:77; TStyle::GetDateYFloat_t GetDateY() constDefinition TStyle.h:198; TStyle::GetFitFormatconst char * GetFitFormat() constDefinition TStyle.h:199; TStyle::fCanvasDefHInt_t fCanvasDefHDefault canvas height.Definition TStyle.h:88; TStyle::GetCanvasBorderModeInt_t GetCanvasBorderMode() constDefinition TStyle.h:190; TStyle::GetPadBorderModeInt_t GetPadBorderMode() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8cxx_source.html:123040,log,log,123040,doc/master/TStyle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8cxx_source.html,1,['log'],['log']
Testability,"::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsBinning::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsBinning::printValue(ostream& os) const; virtual Int_tRooAbsBinning::rawBinNumber(Double_t x) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidremoveHook(RooAbsRealLValue&) const; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidRooAbsBinning::setMax(Double_t xhi); virtual voidRooAbsBinning::setMin(Double_t xlo); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidsetRange(Double_t xlo, Double_t xhi); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooParamBinning.html:7135,Test,TestBit,7135,root/html528/RooParamBinning.html,https://root.cern,https://root.cern/root/html528/RooParamBinning.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,"::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidsetRange(const char* rangeName, const char* stateNameList); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; TIterator*RooAbsCategory::typeIterator() const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tRooAbsCategoryLValue::volume(const char* rangeName) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCategory.html:17130,Test,TestBits,17130,root/html602/RooCategory.html,https://root.cern,https://root.cern/root/html602/RooCategory.html,2,['Test'],['TestBits']
Testability,"::setPalette(const QPalette&, const char* className = 0); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); static voidQApplication::setQuitOnLastWindowClosed(bool quit); static voidQApplication::setStartDragDistance(int l); static voidQApplication::setStartDragTime(int ms); static voidQApplication::setStyle(QStyle*); static QStyle*QApplication::setStyle(const QString&); voidQApplication::setStyleSheet(const QString& sheet); voidQObject::setUserData(uint id, QObjectUserData* data); static voidQApplication::setWheelScrollLines(int); static voidQApplication::setWindowIcon(const QIcon& icon); boolQObject::signalsBlocked() const; static intQApplication::startDragDistance(); static intQApplication::startDragTime(); static boolQCoreApplication::startingUp(); intQObject::startTimer(int interval); static QStyle*QApplication::style(); QStringQApplication::styleSheet() const; static voidQApplication::syncX(); static boolQCoreApplication::testAttribute(Qt::ApplicationAttribute attribute); QThread*QObject::thread() const; static QWidget*QApplication::topLevelAt(const QPoint& p); static QWidget*QApplication::topLevelAt(int x, int y); static QWidgetListQApplication::topLevelWidgets(); static QStringQApplication::tr(const char* s, const char* c = 0); static QStringQApplication::tr(const char* s, const char* c, int n); static QStringQCoreApplication::translate(const char* context, const char* key, const char* disambiguation = 0, QCoreApplication::Encoding encoding = CodecForTr); static QStringQCoreApplication::translate(const char* context, const char* key, const char* disambiguation, QCoreApplication::Encoding encoding, int n); static QStringQApplication::trUtf8(const char* s, const char* c = 0); static QStringQApplication::trUtf8(const char* s, const char* c, int n); static QApplication::TypeQApplication::type(); QObjectUserData*QObject::userData(uint id) const; static voidQCoreApplication::watchUnixSignal(int signal, bool watch)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQRootApplication.html:8727,test,testAttribute,8727,root/html602/TQRootApplication.html,https://root.cern,https://root.cern/root/html602/TQRootApplication.html,2,['test'],['testAttribute']
Testability,"::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ost",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:30865,Test,TestBit,30865,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,4,['Test'],['TestBit']
Testability,"::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:31801,Test,TestBit,31801,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['Test'],['TestBit']
Testability,"::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; RooRealVar&var() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:32076,Test,TestBit,32076,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['Test'],['TestBit']
Testability,"::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:30378,Test,TestBit,30378,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,57,['Test'],['TestBit']
Testability,"::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsAnaConvPdf.html:31946,Test,TestBit,31946,root/html532/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsAnaConvPdf.html,9,['Test'],['TestBit']
Testability,"::shared_ptr< IModelFunction > &func);  Constructor from data set and model function. ;  ; virtual ~BasicFCN ();  Destructor (no operations) ;  ; void SetData (const std::shared_ptr< DataType > &data);  Set the data pointer. ;  ; void SetModelFunction (const std::shared_ptr< IModelFunction > &func);  Set the function pointer. ;  ;  Protected Attributes inherited from ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >; std::shared_ptr< DataType > fData;  ; std::shared_ptr< IModelFunction > fFunc;  . #include <Fit/LogLikelihoodFCN.h>. Inheritance diagram for ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFCN. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BasicFCN<DerivFunType,ModelFunType,UnBinData> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFCN. Definition at line 45 of file LogLikelihoodFCN.h. ◆ BaseFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::BaseFunction ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseFunction. Definition at line 48 of file LogLikelihoodFCN.h. ◆ BaseObjFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseObjFunction. Definition at line 47 of file LogLikelihoodFCN.h. ◆ IModelFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::IParamMultiFunctionTempl<T> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 50 of file LogLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:6512,Log,LogLikelihoodFCN,6512,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability,"::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:35228,Test,Test,35228,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,45,['Test'],['Test']
Testability,"::string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentation. ◆ SetTop(). void ROOT::RGeoItem::SetTop ; (; bool ; on = true). inline . Definition at line 115 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeoItem::color. protected . color ; Definition at line 96 of file RGeomData.hxx. ◆ id. int ROOT::RGeoItem::id {0}. protected . node id ; Definition at line 95 of file RGeomData.hxx. ◆ material. std::string ROOT::RGeoItem::material. protected . material ; Definition at line 97 of file RGeomData.hxx. ◆ pvis. int ROOT::RGeoItem::pvis {0}. protected . visibility of physical node ; Definition at line 99 of file RGeomData.hxx. ◆ top. bool ROOT::RGeoItem::top {false}. protected . indicates if node selected as top ; Definition at line 100 of file RGeomData.hxx. ◆ vis. int ROOT::RGeoItem::vis {0}. protected . visibility of logical node ; Definition at line 98 of file RGeomData.hxx. Libraries for ROOT::RGeoItem:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeoItem. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html:3680,log,logical,3680,doc/v632/classROOT_1_1RGeoItem.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html,1,['log'],['logical']
Testability,"::vector< double > &testStat_sb_vals, const std::vector< double > &testStat_b_vals, bool sumLargerValues=true);  Constructor for HybridResult. ;  ;  HybridResult (const char *name=nullptr);  Default constructor. ;  ;  ~HybridResult () override;  Destructor of HybridResult. ;  ; void Add (HybridResult *other);  add additional toy-MC experiments to the current results use the data test statistics of the added object if none is already present (otherwise, ignore the new one) ;  ; double AlternatePValue () const override;  Returns \(CL_{s+b}\) : the S+B p-value. ;  ; double CLbError () const;  The error on the ""confidence level"" of the null hypothesis. ;  ; double CLsError () const;  The error on the ratio \(CL_{s+b}/CL_{b}\). ;  ; double CLsplusbError () const;  The error on the ""confidence level"" of the alternative hypothesis. ;  ; HybridPlot * GetPlot (const char *name, const char *title, int n_bins);  prepare a plot showing a result and return a pointer to a HybridPlot object the needed arguments are: an object name, a title and the number of bins in the plot ;  ; std::vector< double > GetTestStat_b ();  Get test statistics values for the b model. ;  ; double GetTestStat_data ();  Get test statistics value for data. ;  ; std::vector< double > GetTestStat_sb ();  Get test statistics values for the sb model. ;  ; TClass * IsA () const override;  ; double NullPValue () const override;  Returns \(1 - CL_{b}\) : the B p-value. ;  ; void PrintMore (const char *options);  Print out some information about the results. ;  ; void SetDataTestStatistics (double testStat_data_val);  set the value of the test statistics on data ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::HypoTestResult;  HypoTestResult (const char *name, double nullp, double altp);  constructor from name, null and alternate p values ;  ;  HypoTestResult (const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:2075,test,test,2075,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,1,['test'],['test']
Testability,"::vector<Double_t> ROC(range);; 2271 ROC[0] = 0.5;; 2272 for (int i = 0; i < nbits; i++); 2273 importances[i] = 0;; 2274 ; 2275 Double_t SROC, SSROC; // computed ROC value; 2276 for (x = 1; x < range; x++) {; 2277 ; 2278 std::bitset<VIBITS> xbitset(x);; 2279 if (x == 0); 2280 continue; // data loader need at least one variable; 2281 ; 2282 // creating loader for seed; 2283 TMVA::DataLoader *seedloader = new TMVA::DataLoader(xbitset.to_string());; 2284 ; 2285 // adding variables from seed; 2286 for (int index = 0; index < nbits; index++) {; 2287 if (xbitset[index]); 2288 seedloader->AddVariable(varNames[index], 'F');; 2289 }; 2290 ; 2291 DataLoaderCopy(seedloader, loader);; 2292 seedloader->PrepareTrainingAndTestTree(loader->GetDataSetInfo().GetCut(""Signal""),; 2293 loader->GetDataSetInfo().GetCut(""Background""),; 2294 loader->GetDataSetInfo().GetSplitOptions());; 2295 ; 2296 // Booking Seed; 2297 BookMethod(seedloader, theMethod, methodTitle, theOption);; 2298 ; 2299 // Train/Test/Evaluation; 2300 TrainAllMethods();; 2301 TestAllMethods();; 2302 EvaluateAllMethods();; 2303 ; 2304 // getting ROC; 2305 ROC[x] = GetROCIntegral(xbitset.to_string(), methodTitle);; 2306 ; 2307 // cleaning information to process sub-seeds; 2308 TMVA::MethodBase *smethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[xbitset.to_string().c_str()][0][0]);; 2309 TMVA::ResultsClassification *sresults = (TMVA::ResultsClassification *)smethod->Data()->GetResults(; 2310 smethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2311 delete sresults;; 2312 delete seedloader;; 2313 this->DeleteAllMethods();; 2314 ; 2315 fMethodsMap.clear();; 2316 // removing global result because it is requiring a lot of RAM for all seeds; 2317 }; 2318 ; 2319 for (x = 0; x < range; x++) {; 2320 SROC = ROC[x];; 2321 for (uint32_t i = 0; i < VIBITS; ++i) {; 2322 if (x & (uint64_t(1) << i)) {; 2323 y = x & ~(1 << i);; 2324 std::bitset<VIBITS> ybitset(y);; 2325 // need at least one variable; 2326 // NOTE: if sub-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:96695,Test,Test,96695,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Test'],"['Test', 'TestAllMethods']"
Testability,"::~TMLPAnalyzer ; (; ). override . Destructor. ; Definition at line 45 of file TMLPAnalyzer.cxx. Member Function Documentation. ◆ CheckNetwork(). void TMLPAnalyzer::CheckNetwork ; (; ). Gives some information about the network in the terminal. ; Definition at line 146 of file TMLPAnalyzer.cxx. ◆ Class(). static TClass * TMLPAnalyzer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMLPAnalyzer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMLPAnalyzer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DeclFileName(). static const char * TMLPAnalyzer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:13761,test,test,13761,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,1,['test'],['test']
Testability,":; : ------------------------; : var1 var2; : var1: +1.000 +0.006; : var2: +0.006 +1.000; : ------------------------; DataSetFactory : [datasetreg] : ; : ; Factory : Booking method: ␛[1mKNN␛[0m; : ; Factory : Booking method: ␛[1mLD␛[0m; : ; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=SUMOFSQUARES:VarTransform=G:WeightInitialization=XAVIERUNIFORM:Architecture=CPU:Layout=TANH|50,TANH|50,TANH|50,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=SUMOFSQUARES:VarTransform=G:WeightInitialization=XAVIERUNIFORM:Architecture=CPU:Layout=TANH|50,TANH|50,TANH|50,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|50,TANH|50,TANH|50,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""SUMOFSQUARES"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.3,Conve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:2828,Test,TestRepetitions,2828,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['TestRepetitions']
Testability,":; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes do not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLogicalShape.html:962,log,logical,962,root/html532/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html532/TGLLogicalShape.html,4,['log'],['logical']
Testability,":; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TGLLogicalShape. class TGLLogicalShape. Abstract logical shape - a GL 'drawable' - base for all shapes -; faceset sphere etc. Logical shapes are a unique piece of geometry,; described in it's local frame - e.g if we have three spheres in :; Sphere A - Radius r1, center v1; Sphere B - Radius r2, center v2; Sphere C - Radius r1, center v3. Spheres A and C can share a common logical sphere of radius r1 - and; place them with two physicals with translations of v1 & v2. Sphere B; requires a different logical (radius r2), placed with physical with; translation v2. Physical shapes know about and can share logicals. Logicals do not; about (aside from reference counting) physicals or share them. This sharing of logical shapes greatly reduces memory consumption and; scene (re)build times in typical detector geometries which have many; repeated objects placements. TGLLogicalShapes have reference counting, performed by the client; physical shapes which are using it. Display list information is also stored here, possibly per LOD; level. Most classes does not support LOD (only sphere and tube) and; therefore reasonable defaults are encoded in the following virtual; functions:. * ELODAxes SupportedLODAxes() { return kLODAxesNone; }; * Int_t DLCacheSize() { return 1; }; * UInt_t DLOffset(lod); // Transform lod into DL offset.; * Short_t QuantizeShapeLOD(); // Quantize lod. Classes that have per-LOD display-lists than override these functions.; 'UShort_t fDLValid' is used as a bit-field determining validity of; each quantized LOD-level; hopefully one will not have more than 16; LOD levels per class.; See also: TGLPhysicalShape::CalculateShapeLOD() where LOD is calculated. See base/src/TVirtualViewer3D for description of common external 3D; viewer architecture and how",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLogicalShape.html:962,log,logical,962,root/html528/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html528/TGLLogicalShape.html,2,['log'],['logical']
Testability,":; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::Ranking. class TMVA::Ranking. Ranking for variables in method (implementation). Function Members (Methods); public:. virtual~Ranking(); virtual voidAddRank(const TMVA::Rank& rank); static TClass*Class(); virtual TClass*IsA() const; TMVA::Ranking&operator=(const TMVA::Ranking&); virtual voidPrint() const; TMVA::RankingRanking(); TMVA::RankingRanking(const TMVA::Ranking&); TMVA::RankingRanking(const TString& context, const TString& rankingDiscriminatorName); voidSetContext(const TString& context); voidSetDiscrName(const TString& discrName); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. TStringfContextthe ranking context; TMVA::MsgLogger*fLogger! message logger; vector<TMVA::Rank>fRankingvector of ranks; TStringfRankingDiscriminatorNamethe name of the ranking discriminator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Ranking(); default constructor. Ranking(const TString& context, const TString& rankingDiscriminatorName); constructor. ~Ranking(); destructor. void SetContext(const TString& context). void AddRank(const TMVA::Rank& rank); Add a new rank; take ownership of it. void Print() const; get maximum length of variable names. Ranking(). void SetDiscrName(const TString& discrName); { fRankingDiscriminatorName = discrName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Ranking.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__Ranking.html:1040,log,logger,1040,root/html532/TMVA__Ranking.html,https://root.cern,https://root.cern/root/html532/TMVA__Ranking.html,1,['log'],['logger']
Testability,":AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); Bool_tTEveCaloViz::AssertCellIdCache() const; TEveRGBAPalette*TEveCaloViz::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tTEveCaloViz::CellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidCellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveEleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCalo2D.html:1491,Assert,AssertCellIdCache,1491,root/html528/TEveCalo2D.html,https://root.cern,https://root.cern/root/html528/TEveCalo2D.html,6,['Assert'],['AssertCellIdCache']
Testability,":AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); Bool_tTEveCaloViz::AssertCellIdCache() const; TEveRGBAPalette*TEveCaloViz::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tTEveCaloViz::CellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidTEveCaloViz::CellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCalo3D.html:1492,Assert,AssertCellIdCache,1492,root/html528/TEveCalo3D.html,https://root.cern,https://root.cern/root/html528/TEveCalo3D.html,12,['Assert'],['AssertCellIdCache']
Testability,":AbstractMethod(const char* method) const; virtual Bool_tTEveElementList::AcceptElement(TEveElement* el); Int_tAddCone(Float_t eta, Float_t phi, Float_t cone_r, Float_t length = 0); virtual voidTEveElement::AddElement(TEveElement* el); Int_tAddEllipticCone(Float_t eta, Float_t phi, Float_t reta, Float_t rphi, Float_t length = 0); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveJetCone.html:2135,Assert,AssertBBox,2135,root/html528/TEveJetCone.html,https://root.cern,https://root.cern/root/html528/TEveJetCone.html,1,['Assert'],['AssertBBox']
Testability,":BetaDistI functions ;  mathcoreCDF.C Example describing how to use the different cumulative distribution functions in ROOT ;  mathcoreGenVector.C Example macro testing available methods and operation of the GenVector classes ;  mathcoreSpecFunc.C Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  mathmoreIntegration.C Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  mathStudent.C Tutorial illustrating the use of the Student and F distributions ;  multidimSampling.C Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  normalDist.C Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  permute.C Tutorial illustrating the use of TMath::Permute can be run with: ;  principal.C Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:131268,Log,LogNormal,131268,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Log'],['LogNormal']
Testability,":BinData::Valuedouble Value(unsigned int ipoint) constreturn the value for the given fit pointDefinition BinData.h:220; ROOT::Fit::FitData::Sizeunsigned int Size() constreturn number of fit pointsDefinition FitData.h:293; ROOT::Fit::FitData::NDimunsigned int NDim() constreturn coordinate data dimensionDefinition FitData.h:301; ROOT::Math::GoFTest::GetSigmaNstatic Double_t GetSigmaN(const std::vector< size_t > &ns, size_t N)Computation of sigma_N as described in (1)Definition GoFTest.cxx:311; ROOT::Math::GoFTest::SetCDFvoid SetCDF()Definition GoFTest.cxx:244; ROOT::Math::GoFTest::operator()void operator()(ETestType test, Double_t &pvalue, Double_t &testStat) constThe class's unary functions performing the gif test according to the ETestType provided.Definition GoFTest.cxx:208; ROOT::Math::GoFTest::SetDistributionFunctionvoid SetDistributionFunction(const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax)Definition GoFTest.cxx:267; ROOT::Math::GoFTest::fCDFstd::unique_ptr< IGenFunction > fCDFPointer to CDF used in 1-sample test.Definition GoFTest.h:235; ROOT::Math::GoFTest::fTestSampleFromH0Bool_t fTestSampleFromH0Definition GoFTest.h:245; ROOT::Math::GoFTest::EDistributionEDistributionH0 distributions for using only with 1-sample tests.Definition GoFTest.h:70; ROOT::Math::GoFTest::kLogNormal@ kLogNormalGaussian distribution with default mean=0, sigma=1.Definition GoFTest.h:74; ROOT::Math::GoFTest::kExponential@ kExponentialLognormal distribution with default meanlog=0, sigmalog=1.Definition GoFTest.h:75; ROOT::Math::GoFTest::kGaussian@ kGaussianFor internal use only within the class's template constructor.Definition GoFTest.h:73; ROOT::Math::GoFTest::kUserDefined@ kUserDefinedDefault value for non templated 1-sample test. Set with SetDistribution.Definition GoFTest.h:72; ROOT::Math::GoFTest::kUndefined@ kUndefinedDefinition GoFTest.h:71; ROOT::Math::GoFTest::fDistEDistribution fDistType of distribution.Definition GoFTest.h:238; ROOT::Math::GoFTest::Instant",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:38909,test,test,38909,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['test']
Testability,:Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. virtual~Config(); TMVA::ConfigConfig(); TMVA::ConfigConfig(const TMVA::Config&); TMVA::MsgLogger&Log() const; TMVA::Config&operator=(const TMVA::Config&). Data Members; public:. IONamesfIONamesCustomisable weight file properties; VariablePlottingfVariablePlottingCustomisable plotting properties. private:. atomic<Bool_t>fDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; atomic<Bool_t>fSilentno output at all; atomic<Bool_t>fUseColoredConsolecoloured standard output; atomic<Bool_t>fWriteOptionsReferenceif set true: Configurable objects write file with option reference; static atomic<TMVA::Config*>fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. ~Config(); destructor. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); { fSilent = s; }. Bool_t WriteOptionsReference() const; { return fWriteOptionsReference; }. void SetWriteOptionsReference(Bool_t w); { fWriteOptionsReference = w; }. Bool_t DrawProgressBar() const; { return fDrawProgressBar; }. void SetDrawProgressBar(Bool_t d); { fDrawProgressBar = d; }. VariablePlotting& GetVariablePlotting(); { return fVariable,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Config.html:1331,log,logger,1331,root/html602/TMVA__Config.html,https://root.cern,https://root.cern/root/html602/TMVA__Config.html,2,['log'],['logger']
Testability,":ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetPlayer(TVirtualProofPlayer* player); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidValidateDSet(TDSet* dset).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofSuperMaster.html:20414,log,loglevel,20414,root/html530/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html530/TProofSuperMaster.html,2,['log'],['loglevel']
Testability,":Copy((TF1 &)obj);; 1011 TAttFill::Copy((TF1 &)obj);; 1012 TAttMarker::Copy((TF1 &)obj);; 1013 ((TF1 &)obj).fXmin = fXmin;; 1014 ((TF1 &)obj).fXmax = fXmax;; 1015 ((TF1 &)obj).fNpx = fNpx;; 1016 ((TF1 &)obj).fNpar = fNpar;; 1017 ((TF1 &)obj).fNdim = fNdim;; 1018 ((TF1 &)obj).fType = fType;; 1019 ((TF1 &)obj).fChisquare = fChisquare;; 1020 ((TF1 &)obj).fNpfits = fNpfits;; 1021 ((TF1 &)obj).fNDF = fNDF;; 1022 ((TF1 &)obj).fMinimum = fMinimum;; 1023 ((TF1 &)obj).fMaximum = fMaximum;; 1024 ; 1025 ((TF1 &)obj).fParErrors = fParErrors;; 1026 ((TF1 &)obj).fParMin = fParMin;; 1027 ((TF1 &)obj).fParMax = fParMax;; 1028 ((TF1 &)obj).fParent = fParent;; 1029 ((TF1 &)obj).fSave = fSave;; 1030 ((TF1 &)obj).fHistogram = nullptr;; 1031 ((TF1 &)obj).fMethodCall = nullptr;; 1032 ((TF1 &)obj).fNormalized = fNormalized;; 1033 ((TF1 &)obj).fNormIntegral = fNormIntegral;; 1034 ((TF1 &)obj).fFormula = nullptr;; 1035 ; 1036 if (fFormula) assert(fFormula->GetNpar() == fNpar);; 1037 ; 1038 // use copy-constructor of TMethodCall; 1039 TMethodCall *m = (fMethodCall) ? new TMethodCall(*fMethodCall) : nullptr;; 1040 ((TF1 &)obj).fMethodCall.reset(m);; 1041 ; 1042 TFormula *formulaToCopy = (fFormula) ? new TFormula(*fFormula) : nullptr;; 1043 ((TF1 &)obj).fFormula.reset(formulaToCopy);; 1044 ; 1045 TF1Parameters *paramsToCopy = (fParams) ? new TF1Parameters(*fParams) : nullptr;; 1046 ((TF1 &)obj).fParams.reset(paramsToCopy);; 1047 ; 1048 TF1FunctorPointer *functorToCopy = (fFunctor) ? fFunctor->Clone() : nullptr;; 1049 ((TF1 &)obj).fFunctor.reset(functorToCopy);; 1050 ; 1051 TF1AbsComposition *comp = nullptr;; 1052 if (fComposition) {; 1053 comp = (TF1AbsComposition *)fComposition->IsA()->New();; 1054 fComposition->Copy(*comp);; 1055 }; 1056 ((TF1 &)obj).fComposition.reset(comp);; 1057}; 1058 ; 1059 ; 1060////////////////////////////////////////////////////////////////////////////////; 1061/// Make a complete copy of the underlying object. If 'newname' is set,; 1062/// the copy's name will be se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:36615,assert,assert,36615,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['assert'],['assert']
Testability,":EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. private . Definition at line 100 of file TIOFeatures.hxx. ◆ kIOFeatureCount. constexpr int ROOT::TIOFeatures::kIOFeatureCount = 1. staticconstexpr . Definition at line 89 of file TIOFeatures.hxx. Libraries for ROOT::TIOFeatures:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/ROOT/TIO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:6698,test,test,6698,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['test'],['test']
Testability,":EMVA, TString)Definition Factory.h:102; TMVA::Factory::TrainAllMethodsForRegressionvoid TrainAllMethodsForRegression(void)Definition Factory.h:116; TMVA::Factory::EvaluateImportanceAllTH1F * EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, const char *theOption="""")Definition Factory.cxx:2246; TMVA::Factory::SetVerbosevoid SetVerbose(Bool_t v=kTRUE)Definition Factory.cxx:343; TMVA::Factory::fgTargetFileTFile * fgTargetFile! ROOT output fileDefinition Factory.h:205; TMVA::Factory::fDefaultTrfsstd::vector< TMVA::VariableTransformBase * > fDefaultTrfs! list of transformations on default DataSetDefinition Factory.h:208; TMVA::Factory::GetMethodIMethod * GetMethod(const TString &datasetname, const TString &title) constReturns pointer to MVA that corresponds to given method title.Definition Factory.cxx:566; TMVA::Factory::DeleteAllMethodsvoid DeleteAllMethods(void)Delete methods.Definition Factory.cxx:324; TMVA::Factory::fTransformationsTString fTransformations! list of transformations to testDefinition Factory.h:212; TMVA::Factory::Greetingsvoid Greetings()Print welcome message.Definition Factory.cxx:295; TMVA::IMethodInterface for all concrete MVA method implementations.Definition IMethod.h:53; TMVA::MethodBaseVirtual base Class for all MVA method.Definition MethodBase.h:111; TMVA::ROCCurveDefinition ROCCurve.h:46; TMVA::Types::EMVAEMVADefinition Types.h:76; TMVA::Types::EAnalysisTypeEAnalysisTypeDefinition Types.h:126; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kTesting@ kTestingDefinition Types.h:144; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TStringBasic string class.Definition TString.h:139; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; v@ vDefinition rootcling_impl.cxx:3699; Types.h. tmvatmvaincTMVAFactory.h. ROOT master - Reference Guide Generated on T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:19301,test,testDefinition,19301,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['test'],['testDefinition']
Testability,":FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:2745,Log,LogLikelihoodFCN,2745,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,":Fit::BasicFCN::ModelFunctionvirtual const IModelFunction & ModelFunction() constaccess to const reference to the model functionDefinition BasicFCN.h:78; ROOT::Fit::LogLikelihoodFCNLogLikelihoodFCN class for likelihood fits.Definition LogLikelihoodFCN.h:40; ROOT::Fit::LogLikelihoodFCN::BaseFunctionBaseObjFunction::BaseFunction BaseFunctionDefinition LogLikelihoodFCN.h:48; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf) for object managed by users.Definition LogLikelihoodFCN.h:69; ROOT::Fit::LogLikelihoodFCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition LogLikelihoodFCN.h:134; ROOT::Fit::LogLikelihoodFCN::operator=LogLikelihoodFCN & operator=(const LogLikelihoodFCN &rhs)Assignment operator.Definition LogLikelihoodFCN.h:99; ROOT::Fit::LogLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition LogLikelihoodFCN.h:161; ROOT::Fit::LogLikelihoodFCN::IModelFunction::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunctionDefinition LogLikelihoodFCN.h:50; ROOT::Fit::LogLikelihoodFCN::fWeightint fWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0)Definition LogLikelihoodFCN.h:169; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const LogLikelihoodFCN &f)Copy constructor.Definition LogLikelihoodFCN.h:86; ROOT::Fit::LogLikelihoodFCN::BaseFCNBasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCNDefinition LogLikelihoodFCN.h:45; ROOT::Fit::LogLikelihoodFCN::TModelFunType::BackendType TDefinition LogLikelihoodFCN.h:44; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:9089,Log,LogLikelihoodFCN,9089,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,1,['Log'],['LogLikelihoodFCN']
Testability,":GetAlternateModel() const; const RooArgSet&GetBestFitParams() const; const RooArgSet&GetBestFitPoi() const; const RooAbsData*RooStats::HypoTestCalculatorGeneric::GetData() const; static doubleGetExpectedPValues(double pnull, double palt, double nsigma, bool usecls, bool oneSided = true); virtual const RooArgSet*RooStats::HypoTestCalculatorGeneric::GetFitInfo() const; virtual RooStats::HypoTestResult*GetHypoTest() const; const RooRealVar*GetMuHat() const; const RooStats::ModelConfig*RooStats::HypoTestCalculatorGeneric::GetNullModel() const; RooStats::TestStatSampler*RooStats::HypoTestCalculatorGeneric::GetTestStatSampler() const; RooStats::HypoTestCalculatorGenericRooStats::HypoTestCalculatorGeneric::HypoTestCalculatorGeneric(const RooStats::HypoTestCalculatorGeneric&); RooStats::HypoTestCalculatorGenericRooStats::HypoTestCalculatorGeneric::HypoTestCalculatorGeneric(const RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, RooStats::TestStatSampler* sampler = 0); virtual TClass*IsA() const; boolIsOneSidedDiscovery() const; boolIsTwoSided() const; static RooAbsData*MakeAsimovData(const RooStats::ModelConfig& model, const RooArgSet& allParamValues, RooArgSet& globObs); static RooAbsData*MakeAsimovData(RooAbsData& data, const RooStats::ModelConfig& model, const RooArgSet& poiValues, RooArgSet& globObs, const RooArgSet* genPoiValues = 0); RooStats::HypoTestCalculator&RooStats::HypoTestCalculator::operator=(const RooStats::HypoTestCalculator&); virtual voidRooStats::HypoTestCalculatorGeneric::SetAlternateModel(const RooStats::ModelConfig& altModel); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidRooStats::HypoTestCalculatorGeneric::SetData(RooAbsData& data); virtual voidRooStats::HypoTestCalculatorGeneric::SetNullModel(const RooStats::ModelConfig& nullModel); voidSetOneSided(bool on); voidSetOneSidedDiscovery(bool on); static voidSetPrintLevel(int level); voidSetQTilde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html:1891,Test,TestStatSampler,1891,root/html534/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html,1,['Test'],['TestStatSampler']
Testability,":HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTGWidget::HasFocus() const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidIncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tIsEditable() const; Bool_tTGWidget::IsEnabled() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tIsLogStep() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntry.html:12074,log,logstep,12074,root/html528/TGNumberEntry.html,https://root.cern,https://root.cern/root/html528/TGNumberEntry.html,6,['log'],['logstep']
Testability,":IGradientFunctionMultiDim>::UpdateNCalls() const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; unsigned intfNEffPointsnumber of effective points used in the fit . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: LogLikelihoodFCN.h 37232 2010-12-03 18:09:43Z moneta $ » Last generated: 2010-12-03 21:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3538,Log,LogLikelihoodFCN,3538,root/html528/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,2,['Log'],['LogLikelihoodFCN']
Testability,":IGradientFunctionMultiDim>::UpdateNCalls() const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; unsigned intfNEffPointsnumber of effective points used in the fit . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: LogLikelihoodFCN.h 37232 2010-12-03 18:09:43Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3540,Log,LogLikelihoodFCN,3540,root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,2,['Log'],['LogLikelihoodFCN']
Testability,":Interval; Double_t fMax;  the constraints of the Interval ;  ; Double_t fMin;  ; Int_t fNbins;  when >0 : number of bins (discrete interval); when ==0 continuous interval ;  . #include <TMVA/LogInterval.h>. Inheritance diagram for TMVA::LogInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LogInterval() [1/2]. TMVA::LogInterval::LogInterval ; (; Double_t ; min, . Double_t ; max, . Int_t ; nbins = 0 . ). Definition at line 89 of file LogInterval.cxx. ◆ LogInterval() [2/2]. TMVA::LogInterval::LogInterval ; (; const LogInterval & ; other). Definition at line 95 of file LogInterval.cxx. ◆ ~LogInterval(). TMVA::LogInterval::~LogInterval ; (; ). virtual . destructor ; Definition at line 103 of file LogInterval.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::LogInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::LogInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::LogInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 106 of file LogInterval.h. ◆ DeclFileName(). static const char * TMVA::LogInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file LogInterval.h. ◆ GetElement(). Double_t TMVA::LogInterval::GetElement ; (; Int_t ; bin); const. virtual . calculates the value of the ""number"" bin in a discrete interval. ; Parameters:; Double_t position . Reimplemented from TMVA::Interval.; Definition at line 113 of file LogInterval.cxx. ◆ GetMax(). virtual Double_t TMVA::LogInterval::GetMax ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 93 of file LogInterval.h. ◆ GetMean(). Double_t TMVA::LogInterval::GetMean ; (; ); const. virtual . Reimplemented from TMVA::Interv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:4064,Log,LogInterval,4064,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Log'],['LogInterval']
Testability,":IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooArgList&list() const; const RooArgList&list1() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddition.html:16974,log,logEvalError,16974,root/html532/RooAddition.html,https://root.cern,https://root.cern/root/html532/RooAddition.html,1,['log'],['logEvalError']
Testability,":IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tisFundamental() const; virtual Bool_tisLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tisShapeDirty() const; Bool_tisShapeServer(const RooAbsArg& arg) const; Bool_tisShapeServer(const char* name) const; virtual Bool_tIsSortable() const; Bool_tisValueDirty() const; Bool_tisValueDirtyAndClear() const; Bool_tisValueOrShapeDirtyAndClear() const; Bool_tisValueServer(const RooAbsArg& arg) const; Bool_tisValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidleafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumCaches() const; Bool_tobservableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tobservableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeoperMode() const; virtual voidoptimizeCacheMode(const RooArgSet& observables); virtual voidoptimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_toverlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*ownedCompon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:8594,test,testArg,8594,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['test'],['testArg']
Testability,":IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tisValid() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealIntegral.html:17299,log,logEvalError,17299,root/html534/RooRealIntegral.html,https://root.cern,https://root.cern/root/html534/RooRealIntegral.html,3,['log'],['logEvalError']
Testability,":IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooTFoamBinding&operator=(const RooTFoamBinding&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTFoamBinding.html:4472,Test,TestBit,4472,root/html526/RooTFoamBinding.html,https://root.cern,https://root.cern/root/html526/RooTFoamBinding.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassGenerator&operator=(const TClassGenerator&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassGenerator.html:4807,Test,TestBit,4807,root/html526/TClassGenerator.html,https://root.cern,https://root.cern/root/html526/TClassGenerator.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGUnknownWindowHandler&operator=(const TGUnknownWindowHandler&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGUnknownWindowHandler.html:4439,Test,TestBit,4439,root/html528/TGUnknownWindowHandler.html,https://root.cern,https://root.cern/root/html528/TGUnknownWindowHandler.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTGObject::SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGResourcePool.html:6084,Test,TestBit,6084,root/html530/TGResourcePool.html,https://root.cern,https://root.cern/root/html530/TGResourcePool.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,":IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual TSQLRow*Next(); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLResult&operator=(const TSQLResult&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLResult.html:4644,Test,TestBit,4644,root/html528/TSQLResult.html,https://root.cern,https://root.cern/root/html528/TSQLResult.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TKSocket&operator=(const TKSocket&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TKSocket.html:4433,Test,TestBit,4433,root/html530/TKSocket.html,https://root.cern,https://root.cern/root/html530/TKSocket.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,":IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long64_tProcess(const char* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long64_tProcess(TFileCollection* fc, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long64_tProcess(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:11719,log,loglevel,11719,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['log'],['loglevel']
Testability,":IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long64_tProcess(const char* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TSelector* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long64_tProcess(TFileCollection* fc, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long64_tProcess(TDSet* dset, TSelector* sel, Option_t* o = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:12585,log,loglevel,12585,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,1,['log'],['loglevel']
Testability,":IsZombie() const; TObject*Key() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValue(TObject* val); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); TObject*Value() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPair.html:4566,Test,TestBit,4566,root/html530/TPair.html,https://root.cern,https://root.cern/root/html530/TPair.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,":IsZombie() const; const char*Key() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TXMLAttr(const char* key, const char* value); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLAttr.html:4366,Test,TestBit,4366,root/html602/TXMLAttr.html,https://root.cern,https://root.cern/root/html602/TXMLAttr.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,":IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static char*Next(); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassTable&operator=(const TClassTable&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; static voidPrintTable(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); static voidRemove(const char* cname); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClassTable.html:4919,Test,TestBit,4919,root/html528/TClassTable.html,https://root.cern,https://root.cern/root/html528/TClassTable.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::ProposalFunction&operator=(const RooStats::ProposalFunction&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPropose(RooArgSet& xPrime, RooArgSet& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProposalFunction.html:5161,Test,TestBit,5161,root/html526/RooStats__ProposalFunction.html,https://root.cern,https://root.cern/root/html526/RooStats__ProposalFunction.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TArchiveMember&operator=(const TArchiveMember& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TArchiveMember.html:4713,Test,TestBit,4713,root/html534/TArchiveMember.html,https://root.cern,https://root.cern/root/html534/TArchiveMember.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRobustEstimator&operator=(const TRobustEstimator&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRobustEstimator.html:9605,Test,TestBit,9605,root/html534/TRobustEstimator.html,https://root.cern,https://root.cern/root/html534/TRobustEstimator.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidoperator delete(void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); void*OrgAddress(void* addr) const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); TObject*Remove(TObject* obj); TObject*Remove(const char* name); voidRemoveAll(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetMapAddress(Long_t addr); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdate(TObject* obj = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; static TMapFile*WhichMapFile(void* addr); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMapFile.html:6837,Test,TestBit,6837,root/html528/TMapFile.html,https://root.cern,https://root.cern/root/html528/TMapFile.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; TIterator*MakeIterator() const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); virtual Int_tRooAbsCategoryLValue::numBins(const char* rangeName) const; Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooAbsArg&RooAbsCategoryLValue::operator=(int index); RooAbsArg&RooAbsCategoryLValue::operator=(const char* label); RooAbsArg&RooAbsCategoryLValue::operator=(const RooAbsCategory& other); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSuperCategory.html:10374,test,testArg,10374,root/html526/RooSuperCategory.html,https://root.cern,https://root.cern/root/html526/RooSuperCategory.html,2,['test'],['testArg']
Testability,":IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; TIterator*MakeIterator() const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); virtual Int_tRooAbsCategoryLValue::numBins(const char* rangeName) const; Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooAbsArg&RooAbsCategoryLValue::operator=(int index); RooAbsArg&RooAbsCategoryLValue::operator=(const char* label); RooAbsArg&RooAbsCategoryLValue::operator=(const RooAbsCategory& other); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::oper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooSuperCategory.html:10542,test,testArg,10542,root/html530/RooSuperCategory.html,https://root.cern,https://root.cern/root/html530/RooSuperCategory.html,2,['test'],['testArg']
Testability,":LorentzVector::LorentzVectorconstexpr LorentzVector(const ForeignLorentzVector &v)Construct from a foreign 4D vector type, for example, HepLorentzVector Precondition: v must implement...Definition LorentzVector.h:105; ROOT::Math::LorentzVector::LorentzVectorLorentzVector(const Scalar &a, const Scalar &b, const Scalar &c, const Scalar &d)generic constructors from four scalar values.Definition LorentzVector.h:82; ROOT::Math::LorentzVector::isLightlikebool isLightlike(Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) constDetermine if momentum-energy can represent a massless particle.Definition LorentzVector.h:535; ROOT::Math::LorentzVector::Vect::ROOT::Math::DisplacementVector3D< Cartesian3D< Scalar > > Vect() constget the spatial components of the Vector in a DisplacementVector based on Cartesian CoordinatesDefinition LorentzVector.h:371; ROOT::Math::LorentzVector::ColinearRapidityScalar ColinearRapidity() constRapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)].Definition LorentzVector.h:516; ROOT::Math::LorentzVector::eScalar e() constDefinition LorentzVector.h:649; ROOT::Math::LorentzVector::PzScalar Pz() constspatial Z componentDefinition LorentzVector.h:289; ROOT::Math::LorentzVector::operator-LorentzVector operator-() constNegative of a LorentzVector (q = - v )Definition LorentzVector.h:489; ROOT::Math::LorentzVector::fDimensionstatic constexpr unsigned int fDimensionDefinition LorentzVector.h:686; ROOT::Math::LorentzVector::SetPtLorentzVector< CoordSystem > & SetPt(Scalar a)Definition LorentzVector.h:678; ROOT::Math::LorentzVector::operator+LorentzVector operator+() constDefinition LorentzVector.h:494; ROOT::Math::LorentzVector::Coordinatesconst CoordSystem & Coordinates() constRetrieve a const reference to the coordinates object.Definition LorentzVector.h:170; ROOT::Math::LorentzVector::pyScalar py() constDefinition LorentzVector.h:647; ROOT::Math::LorentzVector::perp2Scalar perp2() constDefinition LorentzVector.h:656; ROOT::M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:31748,log,log,31748,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['log'],['log']
Testability,":MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*fLoggermessage logger; Int_tfNparsnumber of parameters; const vector<TMVA::Interval*>fRangesallowed intervals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); constructor. Double_t Run(); estimator function interface for fitting. Double_t EstimatorFunction(vector<Double_t>& parameters); estimator function interface for fitting. FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); {}. Double_t Run(). IFitterTarget& GetFitterTarget() const; { return fFitterTarget; }. Int_t GetNpars() const; accessor. { return fNpars; }. const char* GetName() const; remove namespace in name. { return fClassName; }. void DeclareOptions(); need to implement option declaration. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss » Copyri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__FitterBase.html:7580,log,logger,7580,root/html602/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html602/TMVA__FitterBase.html,2,['log'],['logger']
Testability,":Math::BrentRootFinderBrentRootFinder(); ROOT::Math::BrentRootFinderBrentRootFinder(const ROOT::Math::BrentRootFinder&); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::IRootFinderMethod::Iterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::BrentRootFinder&operator=(const ROOT::Math::BrentRootFinder&); virtual doubleRoot() const; static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket root with initial grid (def is 100); doublefRootCurrent stimation of the function root.; intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BrentRootFinder.html:2428,log,log,2428,root/html602/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BrentRootFinder.html,2,['log'],['log']
Testability,":Math::GoFTest::GetSigmaN ; (; const std::vector< size_t > & ; ns, . size_t ; N . ). staticprivate . Computation of sigma_N as described in (1) ; Definition at line 311 of file GoFTest.cxx. ◆ Instantiate(). void ROOT::Math::GoFTest::Instantiate ; (; const Double_t * ; sample, . size_t ; sampleSize . ). private . Definition at line 279 of file GoFTest.cxx. ◆ InterpolatePValues(). static Double_t ROOT::Math::GoFTest::InterpolatePValues ; (; int ; nsamples, . Double_t ; A2 . ). staticprivate . Linear interpolation used in GoFTest::PValueAD2Samples. . ◆ KolmogorovSmirnov2SamplesTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 2-Samples Test. ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:14683,test,testStat,14683,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['testStat']
Testability,":Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>; ←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>; ←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BasicMinimizer←. ROOT::Math::GSLMinimizer. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLSimAnMinimizer. ROOT::Math::BrentMinimizer1D. ROOT::Math::BrentRootFinder. ROOT::Math::Functor. ROOT::Math::Functor1D. ROOT::Math::GSLIntegrator. ROOT::Math::GSLMCIntegrator. ROOT::Math::GSLMinimizer. ROOT::Math::GSLMinimizer1D. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLQRngNiederreiter2. ROOT::Math::GSLQRngSobol. ROOT::Math::GSLRngGFSR4. ROOT::Math::GSLRngMT. ROOT::Math::GSLRngRanLux. ROOT::Math::GSLRngRanLuxD1. ROOT::Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassHierarchy.html:1777,Log,LogLikelihoodFCN,1777,root/html604/ClassHierarchy.html,https://root.cern,https://root.cern/root/html604/ClassHierarchy.html,1,['Log'],['LogLikelihoodFCN']
Testability,":Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&ModelFunction() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:2601,Log,LogLikelihoodFCN,2601,root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,":Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3545,Log,LogLikelihoodFCN,3545,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability,":MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tnumBins(const char* rangeName = 0) const; virtual Int_tnumBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual RooAbsArg&operator=(const RooAbsReal& other); virtual RooAbsArg&operator=(Double_t newValue); virtual RooAbsArg&operator=(Int_t ival); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsRealLValue.html:22024,test,testArg,22024,root/html534/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsRealLValue.html,1,['test'],['testArg']
Testability,":MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tnumBins(const char* rangeName = 0) const; virtual Int_tnumBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual RooAbsArg&operator=(const RooAbsReal& other); virtual RooAbsArg&operator=(Double_t newValue); virtual RooAbsArg&operator=(Int_t ival); RooAbsRealLValue&operator=(const RooAbsRealLValue&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsRealLValue.html:22022,test,testArg,22022,root/html602/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html602/RooAbsRealLValue.html,2,['test'],['testArg']
Testability,":MayNotUse(const char* method) const; const char*name() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(int x) const; RooCFunction1Ref<double,int>&operator=(const RooCFunction1Ref<double,int>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1Ref_double_int_.html:5224,Test,TestBit,5224,root/html534/RooCFunction1Ref_double_int_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1Ref_double_int_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCategorySharedProperties&operator=(const RooCategorySharedProperties&); Bool_tRooSharedProperties::operator==(const RooSharedProperties& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooSharedProperties::Print(Option_t* opts = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCategorySharedProperties.html:4887,Test,TestBit,4887,root/html530/RooCategorySharedProperties.html,https://root.cern,https://root.cern/root/html530/RooCategorySharedProperties.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,":MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(const Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNodeType(TProofNodeInfo::ENodeType nt); voidSetNWrks(Int_t nw); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofNodeInfo(); TProofNodeInfo(const char* str); TProofNodeInfo(const TProofNodeInfo& nodeInfo); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofNodeInfo.html:4939,Test,TestBit,4939,root/html602/TProofNodeInfo.html,https://root.cern,https://root.cern/root/html602/TProofNodeInfo.html,4,['Test'],"['TestBit', 'TestBits']"
Testability,":MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* in); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TParameter<long>&operator=(const TParameter<long>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVal(const long& val); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParameter_long_.html:4688,Test,TestBit,4688,root/html534/TParameter_long_.html,https://root.cern,https://root.cern/root/html534/TParameter_long_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability,":Merge(TCollection* /* list */, TFileMergeInfo *); 1926{; 1927 Error(""Merge"", ""not implemented"");; 1928 return -1;; 1929}; 1930 ; 1931////////////////////////////////////////////////////////////////////////////////; 1932/// Merge all the entries in the chain into a new tree in the current file.; 1933///; 1934/// Note: The ""file"" parameter is *not* the file where the new; 1935/// tree will be inserted. The new tree is inserted into; 1936/// gDirectory, which is usually the most recently opened; 1937/// file, or the directory most recently cd()'d to.; 1938///; 1939/// If option = ""C"" is given, the compression level for all branches; 1940/// in the new Tree is set to the file compression level. By default,; 1941/// the compression level of all branches is the original compression; 1942/// level in the old trees.; 1943///; 1944/// If basketsize > 1000, the basket size for all branches of the; 1945/// new tree will be set to basketsize.; 1946///; 1947/// Example using the file generated in $ROOTSYS/test/Event; 1948/// merge two copies of Event.root; 1949/// ~~~ {.cpp}; 1950/// gSystem.Load(""libEvent"");; 1951/// TChain ch(""T"");; 1952/// ch.Add(""Event1.root"");; 1953/// ch.Add(""Event2.root"");; 1954/// ch.Merge(""all.root"");; 1955/// ~~~; 1956/// If the chain is expecting the input tree inside a directory,; 1957/// this directory is NOT created by this routine.; 1958///; 1959/// So if you do:; 1960/// ~~~ {.cpp}; 1961/// TChain ch(""mydir/mytree"");; 1962/// ch.Merge(""newfile.root"");; 1963/// ~~~; 1964/// The resulting file will not have subdirectories. In order to; 1965/// preserve the directory structure do the following instead:; 1966/// ~~~ {.cpp}; 1967/// TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; 1968/// file->mkdir(""mydir"")->cd();; 1969/// ch.Merge(file, 0);; 1970/// ~~~; 1971/// If 'option' contains the word 'fast' the merge will be done without; 1972/// unzipping or unstreaming the baskets (i.e., a direct copy of the raw; 1973/// bytes on disk).; 1974///; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:69476,test,test,69476,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['test'],['test']
Testability,":MethodBase.; Definition at line 541 of file MethodDT.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodDT::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . Implements TMVA::MethodBase.; Definition at line 531 of file MethodDT.cxx. ◆ SetMinNodeSize() [1/2]. void TMVA::MethodDT::SetMinNodeSize ; (; Double_t ; sizeInPercent). Definition at line 320 of file MethodDT.cxx. ◆ SetMinNodeSize() [2/2]. void TMVA::MethodDT::SetMinNodeSize ; (; TString ; sizeInPercent). Definition at line 331 of file MethodDT.cxx. ◆ Streamer(). virtual void TMVA::MethodDT::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodDT::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file MethodDT.h. ◆ TestTreeQuality(). Double_t TMVA::MethodDT::TestTreeQuality ; (; DecisionTree * ; dt). Definition at line 506 of file MethodDT.cxx. ◆ Train(). void TMVA::MethodDT::Train ; (; void ; ). virtual . Implements TMVA::MethodBase.; Definition at line 375 of file MethodDT.cxx. Member Data Documentation. ◆ fAutomatic. Bool_t TMVA::MethodDT::fAutomatic. private . use user given prune strength or automatically determined one using a validation sample ; Definition at line 126 of file MethodDT.h. ◆ fDeltaPruneStrength. Double_t TMVA::MethodDT::fDeltaPruneStrength. private . step size in pruning, is adjusted according to experience of previous trees ; Definition at line 132 of file MethodDT.h. ◆ fErrorFraction. Double_t TMVA::MethodDT::fErrorFraction. private . ntuple var: misclassification error fraction ; Definition at line 122 of file MethodDT.h. ◆ fEventSample. std::vector<Event*> TMVA::MethodDT::fEventSample. private . the training events ; Definition at line 106 of file MethodDT.h. ◆ fgDebugLevel. con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:39292,Test,TestTreeQuality,39292,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['Test'],['TestTreeQuality']
