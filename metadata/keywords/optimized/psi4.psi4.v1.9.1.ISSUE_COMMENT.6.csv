quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,"I've got no `@CXX@` anywhere, so I'd check your versions again. Maybe a fresh clone-and-build in case something lingered. Actually, now I'm seeing your edited skeleton/CM* post and that's all wrong. Should look like https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/basic/CMakeLists.txt.template",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271964672:273,plugin,plugin,273,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271964672,1,['plugin'],['plugin']
Modifiability,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:273,variab,variables,273,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,3,['variab'],"['variable', 'variables']"
Modifiability,"I've hit another issue. [sointegral.cc](https://github.com/psi4/psi4public/blob/master/src/lib/libmints/sointegral.cc#L409-L410) seems to assume that their are as many `TwoBodyAOInt` as threads. At least in the `sointegrals` plugin, this is not the case and you get a segfault. The easy fix is to limit to one thread but there should be a better solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74#issuecomment-76747218:225,plugin,plugin,225,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76747218,1,['plugin'],['plugin']
Modifiability,"I've just tested the following:; * cloned to `/external_disk/gits/psi4`; * from there, configured to `/tmp` via `cmake -S. ... -DCMAKE_INSTALL_PREFIX=/home/auser/installs/psi4 -B/tmp/compile-psi4`; * build in `/tmp/compile-psi4` via `cmake --build .`; * test internal install via `/tmp/compile-psi4/stage/bin/psi4 --test`; * install via `cmake --build . --target install` to `/home/auser/installs/psi4`; * test external install via `/home/auser/installs/psi4/bin/psi4 --test`. That spans an external disk, an account home, and `/tmp/`, and I don't observe the mis-installed quadratures files you report. You are using CMake variables, not environment variables to configure this, right? Do you have a link to the recipe you're using? This is what I use for conda, if that's any help. https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/build.sh#L120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867:87,config,configured,87,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867,4,"['config', 'variab']","['configure', 'configured', 'variables']"
Modifiability,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:481,Config,ConfigVersion,481,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,2,['Config'],['ConfigVersion']
Modifiability,"I've seen similar errors when Python versions are mixed. Use which python and which python-config to check your shell versions. Use ldd bin/psi4 to check the linked version. Boost also could have been built against a diff Python. If there's any mismatch identified or possible, try passing --python to setup (setup --help for details) and letting psi4 build the packaged boost. No turning off Python for psi4, I'm afraid. It's integral to the executable. . Sent from my iPhone. > On May 11, 2015, at 12:11 AM, Vladimir notifications@github.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94#issuecomment-100760375:91,config,config,91,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375,1,['config'],['config']
Modifiability,"Ideally, I suppose, the variables should become `size_t` from the start. As already touched upon here https://github.com/psi4/psi4/issues/1764#issuecomment-562739051",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212144203:24,variab,variables,24,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212144203,1,['variab'],['variables']
Modifiability,"If anyone else is having issues here, we've just configured the `ddx` interface to Psi4 and now solvent is working again on our systems—unfortunately there are no analytical gradients w/ the current interface, but I think this will change in the future (see discussion in #2767). The interface is documented nicely [here](https://psicode.org/psi4manual/master/ddx.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661:49,config,configured,49,https://psicode.org,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661,1,['config'],['configured']
Modifiability,"If something is meant to be part of the output, I would argue that the correct way to do this is to print to the outfile instance (which is set to stdout if the user wants that). I claim responsibility for this glitch, and any like it; they resulted from trying to be flexible in my automated changes by supporting the old, non-uniform, way of printing. I've made the necessary changes in both the public and private branches to this file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/71#issuecomment-76407683:268,flexible,flexible,268,https://psicode.org,https://github.com/psi4/psi4/pull/71#issuecomment-76407683,1,['flexible'],['flexible']
Modifiability,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279088836:28,Config,ConfigMath,28,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836,4,['Config'],['ConfigMath']
Modifiability,"If the libxc upstream cmake support isn't ready, what's the problem with using their pkg-config? I know that is not cmake-native, but isn't the `find_package()` support for that as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450762330:89,config,config,89,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450762330,1,['config'],['config']
Modifiability,"If there is something bad about this, I could always duplicate those blas files in my plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218417480:86,plugin,plugin,86,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218417480,1,['plugin'],['plugin']
Modifiability,"If we expand this issue to best practices, then a few lessons from #736 ; * Add as many headers as you like during development, but before making the PR, explicitly check if they're needed, and if so, move to source, not convenience header to minimize build impact.; * Avoid including any `py::` in `<top-lvl>/psi4/src/psi4` for the sake of build time. Instead, extend class (can't use private member data) in accompanying `<top-lvl>/psi4/src/export_<cls>.cc`. If you feel you need a `py::` in `<top-lvl>/psi4/src/psi4`, contact the core-devs to see if a work-around can be devised.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752#issuecomment-312340409:362,extend,extend,362,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312340409,1,['extend'],['extend']
Modifiability,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230762763:228,plugin,plugins,228,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763,1,['plugin'],['plugins']
Modifiability,"Immediate questions:; @davpoolechem - Is JK stable enough for this PR, or do you need a hold on this while refactoring?; @jturney - Does this sound more like a new library of its own, or something that belongs in `libmints`?; @andyj10224 - Can you comment on what the difference is between `libffm` and `fmm tree`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208366769:107,refactor,refactoring,107,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208366769,1,['refactor'],['refactoring']
Modifiability,"In `sapt_jk_terms.py` we build the following variables:. ```python; ret[""Ind20,u (A<-B)""] = unc_ind_ab; ret[""Ind20,u (A->B)""] = unc_ind_ba; ret[""Ind20,u""] = unc_ind_ab + unc_ind_ba; ret[""Exch-Ind20,u (A<-B)""] = unc_indexch_ab; ret[""Exch-Ind20,u (A->B)""] = unc_indexch_ba; ret[""Exch-Ind20,u""] = unc_indexch_ba + unc_indexch_ab; ```. There are also the associated `r` terms as well. Hmm, SAPT8 passes on my laptop with current master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364674066:45,variab,variables,45,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364674066,1,['variab'],['variables']
Modifiability,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218519582:884,plugin,plugins,884,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582,2,['plugin'],['plugins']
Modifiability,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:219,variab,variable,219,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,1,['variab'],['variable']
Modifiability,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:31,variab,variables,31,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355,5,['variab'],['variables']
Modifiability,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238061055:455,CONFIG,CONFIG,455,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055,1,['CONFIG'],['CONFIG']
Modifiability,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345317385:964,plugin,plugins-base,964,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385,1,['plugin'],['plugins-base']
Modifiability,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:296,config,configuration,296,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['config'],['configuration']
Modifiability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:265,plugin,plugins,265,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,1,['plugin'],['plugins']
Modifiability,It doesn't appear to be honoring the ```MRCC_OMP_NUM_THREADS``` keyword or family. Looks like how the environment variables being passed to mrcc was changed but not all the settings made the trip.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-287884835:114,variab,variables,114,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-287884835,1,['variab'],['variables']
Modifiability,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:296,sandbox,sandbox,296,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['sandbox'],['sandbox']
Modifiability,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:462,adapt,adapted,462,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,1,['adapt'],['adapted']
Modifiability,It is running on my system as I write this. One thing to note is that the error can occur very early on on our system. With a fairly high variability. So I do not think it is memory creeping up. It looks more like a memory allocation amount that is overwritten by a wrong pointer operation or something like that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673:138,variab,variability,138,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673,1,['variab'],['variability']
Modifiability,It looks like Psi is providing wrappers for `dtzrqf` but not actually using the function (unless some downstream plugins are using it). So shouldn't be too hard. Thanks for the notice!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547:113,plugin,plugins,113,https://psicode.org,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547,1,['plugin'],['plugins']
Modifiability,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304529137:36,config,configurations,36,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137,1,['config'],['configurations']
Modifiability,"It looks like those changes did the trick. The tests passed fairly quickly on travis, but i'm not sure what the timings were like before so i don't know how much impact the header refactoring had. When you think this one's good, could you ping us on Slack, please? The seg fault seems to be hitting a few people so it would be good to get it in quickly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885:180,refactor,refactoring,180,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885,1,['refactor'],['refactoring']
Modifiability,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259561352:23,extend,extending,23,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352,1,['extend'],['extending']
Modifiability,"It should have them linked in. You can remove it if you like. The idea was ALL external projects should; be fully functioning builds, which requires a project. I have no idea why all the directories would be under /psi4/psi4_main. Is; that a typo?. Yes, for any project we built the config file is found in that path. This; went back to namespace protecting them from the rest of the system and; build. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 7, 2016 2:55 PM, ""Lori A. Burns"" notifications@github.com wrote:. > - So the psi4.so produced isn't as fully featured as the psi4 exe, as; > it doesn't have the add-ons linked in? It's more of a psi4_main.so?; > - What's with project(psi4) being declared in cmake at two different; > levels? It's not like that in pulsar.; > - If /psi4/psi4_main/ still has all the sibling dirs (e.g.,; > libsapt_solver & detci) linked in (which is awkward with cmake), why not; > move those up to /psi4?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238100943, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi3RmNYWusza0ZhSEG2AgxhxLoZUMks5qdioYgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238219955:283,config,config,283,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238219955,1,['config'],['config']
Modifiability,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237716768:903,Config,Config,903,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768,1,['Config'],['Config']
Modifiability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:130,plugin,pluginintegrales,130,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,7,['plugin'],['pluginintegrales']
Modifiability,"It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631:44,config,configuration,44,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631,1,['config'],['configuration']
Modifiability,"It's always going to write at least one file (the parameters file) to $HOME b/c that's where dftd3 wants to read it; ```; >>> dftd3 -help; dftd3 <coord filename> [-options]; ...; variable parameters can be read from <current-directory>/.dftd3par.local; or ; variable parameters read from ~/.dftd3par.<hostname>; ```. Looks like https://github.com/loriab/psi4/blob/libint2/psi4/driver/procrouting/empirical_dispersion.py#L209 ought to have `local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}` as an extra argument to put the dftd3 scratch in `$PSI_SCRATCH`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1724#issuecomment-534721360:179,variab,variable,179,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534721360,2,['variab'],['variable']
Modifiability,"It's not an exported variable. Not sure where you got it from, but internally it is:; `psi4_io = psi4.core.IOManager.shared_object()`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2668#issuecomment-1209139255:21,variab,variable,21,https://psicode.org,https://github.com/psi4/psi4/issues/2668#issuecomment-1209139255,1,['variab'],['variable']
Modifiability,"It's not necessary to use the conda `gcc`– just that makes for a predictable `Makefile`. I'll investigate `nc-config`. It always helps to know use cases, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172279516:110,config,config,110,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172279516,1,['config'],['config']
Modifiability,It's probably wishful thinking but can you try setting the OMP_NUM_THREADS environment variable to 1 before you run?. `export OMP_NUM_THREADS=1`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404651884:87,variab,variable,87,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404651884,1,['variab'],['variable']
Modifiability,"Just be super careful if there are any subtractions; the result of subtracting two unsigned quantities is itself unsigned and, if negative, it'll wrap around and give garbage. Therefore things like `if (A - B > tol)` should be `if (A > B + tol)`. Probably not relevant for this case, but keep in mind that OpenMP loop iteration variables must be signed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830:328,variab,variables,328,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830,1,['variab'],['variables']
Modifiability,"Just noticed [this](https://github.com/raimis/htmd/blob/a43918d2642585e61882f1f22d4502809611374c/htmd/qm/psi4.py#L226). I don't recall if it's merged to master yet, but I changed it and others https://github.com/psi4/psi4/blob/scfitertopy/psi4/src/psi4/libmints/oeprop.cc#L1355 . You may prefer to grab stuff from psi variables `psi4.print_variables()` if you've only the output file to work from.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356791472:318,variab,variables,318,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356791472,1,['variab'],['variables']
Modifiability,"Just to give some context for this PR, I'm removing an unused class member variable and constructor argument. Aside from a simpler constructor, there is no behavior change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2659#issuecomment-1208156516:75,variab,variable,75,https://psicode.org,https://github.com/psi4/psi4/pull/2659#issuecomment-1208156516,1,['variab'],['variable']
Modifiability,"Just to make sure I understand the issues here:; The first one is clear. A segfault occurs if `num_frozen_docc` is ""too large."" What exactly ""too large"" means is unclear, but more frozen docc pairs than electron pairs is sufficient.; The second one is less clear. Obviously, the QC variables controlling the HF energy are getting grabbed incorrectly, but are these two geometries supposed to be different?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933:282,variab,variables,282,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933,1,['variab'],['variables']
Modifiability,"LGTM. The plan is to wait for the ""cmake rewrite"" to be finalized and merged before we do this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453#issuecomment-238563788:41,rewrite,rewrite,41,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-238563788,1,['rewrite'],['rewrite']
Modifiability,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:349,layers,layers,349,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,1,['layers'],['layers']
Modifiability,"Looks like the plugin didn't get the infrastructure changes update. If you change the signature and return according to http://forum.psicode.org/t/wavefunction-passing-update/139 , does that fix it? @SebWouters, did your latest changes cover the plugin signature change?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185841947:15,plugin,plugin,15,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185841947,2,['plugin'],['plugin']
Modifiability,"Looks ok. > Regarding the frequency calculations, will the results be affected by a lower level of theory Hessian in the beginning? Or will the final results still be of desired level of theory?. The final results are not affected by the lower theory Hessian[*].; In fact, the default initial Hessian is based on an extremely simple force-field so a DFT hessian is certainly an improvement. :-). [* For most practical purposes. For large and flexible molecules with many close-lying minima one could, in principle, find different minima with different settings for the optimizer.]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778:442,flexible,flexible,442,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778,1,['flexible'],['flexible']
Modifiability,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276161205:488,extend,extend,488,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205,1,['extend'],['extend']
Modifiability,"MBIS is Georgia Tech's department, so obligatory @loriab ping - I'm not sure who has taken over MBIS now that Jeff has left. Is there a legitimate reason for us not to support MBIS for iodine? It looks to me like we just need to extend the `get_mbis_params` table one more row of the periodic table and then update the `mA` setting. If so, this is an easy project for one of your developers who is still learning Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053:229,extend,extend,229,https://psicode.org,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053,1,['extend'],['extend']
Modifiability,"MRCC has multiple modes for parallelism. Some methods can use OpenMP, some can use MPI, a few can use both. I do not know how this is hooked up on the Psi4-side. When I use MRCC, I usually run it either standalone or through Molpro, and in both cases I generally control how many OpenMP threads MRCC uses through the `OMP_NUM_THREADS` environmental variable. I have never tried to run MRCC multithreaded through Psi4, nor have I tried the MPI parallelism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165#issuecomment-2136264073:349,variab,variable,349,https://psicode.org,https://github.com/psi4/psi4/issues/3165#issuecomment-2136264073,1,['variab'],['variable']
Modifiability,MakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: mi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4738,plugin,plugins,4738,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,Maybe duplicate the test so that it tests `P::e.globals` and `Wfn.variables`. Or leave it as-is. It was a handy check that the globals was missing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/697#issuecomment-300801278:66,variab,variables,66,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300801278,1,['variab'],['variables']
Modifiability,Maybe we could set `-DENABLE_simint=OFF` automatically in cmake when AM>7 is requested?; Is that a reasonable cmake configuration goal @loriab ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-869457099:116,config,configuration,116,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-869457099,1,['config'],['configuration']
Modifiability,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232716913:384,config,configure,384,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913,1,['config'],['configure']
Modifiability,"My current leaning is that they should be IMPORTED rather than INTERFACE (http://stackoverflow.com/a/36649194). IMPORTED is also what they were before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake), though certainly we want to abandon the Find modules where we can (any project we can influence) and replace with Config. I'm working on the ExternalProjects exporting their targets, so I'll report if I get anywhere.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237704967:404,Config,Config,404,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237704967,1,['Config'],['Config']
Modifiability,My fix is more of a hack. Probably a better approach is to rewrite `H_zero_block`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2258#issuecomment-885263338:59,rewrite,rewrite,59,https://psicode.org,https://github.com/psi4/psi4/issues/2258#issuecomment-885263338,1,['rewrite'],['rewrite']
Modifiability,"My guess is that pybind11 didn't update in your build directory. Were you reusing a build directory from pre ```git pull```? If so, that's the issue, create a new build directory, configure, and make and it should work. I just built psi4 in a clean build directory with gcc 5.4. If not, then we'll look into it more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273460491:180,config,configure,180,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273460491,1,['config'],['configure']
Modifiability,"My issue was trying to use a `psi4` executable built inside a container from the `psi4` python client from my host machine--i.e., to treat the `psi4` executable as an external executable I could call from `python`; however, the `psi4` python client requires close coupling to the executable (access to shared files) so this separation was not possible because the client has to access files shared with the executable, which are only available inside the container :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267:264,coupling,coupling,264,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267,1,['coupling'],['coupling']
Modifiability,"My latest fix raises yet another problem: if the user requests `set scf perturb_h true`, the variable is invisible to `findif`, while `set perturb_h true` is just fine. Perhaps we should strongly suggest that people don't scope their options in future?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668#issuecomment-290245019:93,variab,variable,93,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290245019,1,['variab'],['variable']
Modifiability,My one request is that variables that are obviously used for indexing/lengths be `size_t`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212096767:23,variab,variables,23,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212096767,1,['variab'],['variables']
Modifiability,"My original issue was for a mac, but I see the same error on linux with intel18 compilers:. deprince_root@ed7:~/does_jk_work$ psi4; Attention! This SCF may be density-fitted.; /usr/bin/python3: symbol lookup error: /edfs/users/deprince/does_jk_work/does_jk_work.so: undefined symbol: _ZN3psi4PKJKC1ESt10shared_ptrINS_8BasisSetEERNS_7OptionsE. I don't understand what is going on. For previously functioning plugins, symbols are missing for only certain classes. I've noticed this for PK/DFJK and VBase so far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384319120:407,plugin,plugins,407,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384319120,1,['plugin'],['plugins']
Modifiability,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271932154:21,plugin,plugins,21,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Neither overall chg/mult nor fragment chg/mult will effect Mol.Z(at); all that info is stored separately. BasisSets are associated with each atom in Mol, so it does make some, though not a lot of, sense that ECPs should affect Z(at). Once upon a time there were true/false/large/small choices for `freeze_core`. They got dropped. I don't remember why, but I'd venture b/c they caused more confusion than convenience. But a lot more was handled c-side then. I expect a more flexible interface (that also takes frozen_docc into account) would have support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385871335:473,flexible,flexible,473,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385871335,1,['flexible'],['flexible']
Modifiability,"New compilation breakdown:. ```; psi4 3874.3 100.0%; ---------------------------------------; dfocc 356.2 9.2%; ccdensity 319.7 8.3%; core 295.5 7.6%; mints 260.3 6.7%; dpd 241.1 6.2%; psimrcc 233.7 6.0%; occ 183.1 4.7%; ccenergy 182.1 4.7%; cclambda 129.3 3.3%; dcft 122.7 3.2%; cceom 121.1 3.1%; fock 116.9 3.0%; optking 108.0 2.8%; sapt_solver 104.7 2.7%; ccresponse 102.0 2.6%; detci 92.6 2.4%; cchbar 75.1 1.9%; mcscf 72.9 1.9%; cctriples 70.1 1.8%; iwl 64.9 1.7%; fnocc 53.3 1.4%; functional 52.1 1.3%; scf_solver 48.8 1.3%; trans 42.1 1.1%; cctransort 39.5 1.0%; psio 39.4 1.0%; qt 38.0 1.0%; fisapt 33.0 0.9%; ciomr 28.5 0.7%; adc 28.1 0.7%; 3index 26.7 0.7%; scfgrad 26.1 0.7%; findif 23.5 0.6%; moinfo 20.3 0.5%; parallel 18.0 0.5%; thce 17.0 0.4%; dfmp2 15.9 0.4%; options 12.1 0.3%; psi4util 8.7 0.2%; plugin 8.6 0.2%; cubeprop 8.2 0.2%; efp_solver 8.2 0.2%; diis 5.8 0.2%; mrcc 5.4 0.1%; disp 3.3 0.1%; sapt 3.1 0.1%; thermo 2.9 0.1%; efp_interface 2.4 0.1%; filesystem 2.2 0.1%; dmrg 0.0 0.0%; gdma_interface 0.0 0.0%; ```. Script to analyze the `time-icpc` output; ```; import re; import operator. timeicpc = 'timeresults.txt'. with open(timeicpc, 'r') as handle:; lines = handle.readlines(). target = re.compile(""""""CMakeFiles/(\w+).dir""""""); timeit = re.compile(""""""real\s+(\d+)m(\d.+)s""""""); bigdict = {}. module = ''; for ln in lines:; lln = ln.strip(); mobj = target.search(lln); if mobj:; module = mobj.group(1); if module not in bigdict:; bigdict[module] = []. mobj = timeit.search(lln); if mobj:; seconds = 60.0 * float(mobj.group(1)) + float(mobj.group(2)); bigdict[module].append(seconds). total = 0.0; for mod in bigdict:; modtotal = sum(bigdict[mod]); bigdict[mod] = modtotal; total += modtotal. sorted_x = sorted(bigdict.items(), key=operator.itemgetter(1), reverse=True). print """"""{:20} {:8.1f} {:8.1f}%"""""".format('psi4', total, 100.0); print """"""---------------------------------------""""""; for mod in sorted_x:; print """"""{:20} {:8.1f} {:8.1f}%"""""".format(mod[0], mod[1], 100 * ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-266143805:814,plugin,plugin,814,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-266143805,1,['plugin'],['plugin']
Modifiability,"Nice! If you're allowing general use, that might even cross off the lingering 'add RESP to psi4' ticket (https://github.com/psi4/psi4/issues/20). I've added a `bin/psi4-config` script to the installation, final contents (for the binary) below. Binary nightly build is off for the moment, because I'm working on it for other reasons, but you can see if something like the below is what you'd like. I'm concerned that it's got a lot of full paths and binary-specific (static) flags and libraries, but perhaps it can be made useful with some modifications. ``` py; #!/usr/bin/env python; # vim:ft=python. import sys; from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172395303:169,config,config,169,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303,1,['config'],['config']
Modifiability,"No errors building with ambit enabled when I add those two lines to external/upstream/ambit/CMakeLists.txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/down",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:350,config,configure,350,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['config'],['configure']
Modifiability,"No problem, this is a simple enough hack that we can apply locally for now. Perhaps the PR will evolve into a better solution once we investigate more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722:96,evolve,evolve,96,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722,1,['evolve'],['evolve']
Modifiability,"No, I didn’t specify --python at configure time. No need to rush … my fork works!. On May 12, 2016, at 11:45 AM, Lori A. Burns notifications@github.com wrote:. > Sure. Those two are usually the same– for curiosity, is your setup where you're not passing setup --python=sldfjsl to the psi4 build?; > ; > Will merge after the travis build, unless you're trying to test it right away, in which case I'm glad to accept immediately, since that line can't hurt anything.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/378#issuecomment-218800184:33,config,configure,33,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218800184,1,['config'],['configure']
Modifiability,"No, I have to refactor the code such that the PE stuff is Python-side only (see ToDo list above).; In the meantime, I'll hopefully a) have a first ""release"" of `cppe` ready that can be pinned in the `ExternalProject` and b) have the PR with performance improvements for electric field integrals done. Is there a deadline for the Psi4 1.4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769:14,refactor,refactor,14,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769,1,['refactor'],['refactor']
Modifiability,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78#issuecomment-83015983:154,plugin,plugins,154,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983,4,['plugin'],['plugins']
Modifiability,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261729566:313,CONFIG,CONFIG,313,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566,1,['CONFIG'],['CONFIG']
Modifiability,"No, this isn't only printing. This is a Psi variable that can't be defined due to the exceptional circumstance of having zero electrons. I defer to @loriab for deciding what to do about this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156#issuecomment-2067073173:44,variab,variable,44,https://psicode.org,https://github.com/psi4/psi4/issues/3156#issuecomment-2067073173,1,['variab'],['variable']
Modifiability,"None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = ou",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:6081,extend,extend,6081,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['extend'],['extend']
Modifiability,"Not a fluke. Note l. 93 of the configure build step reports that a suitable `adcc` could not be found, despite its inclusion in the build environment step. Sorry Lori, but I'm relying on you to solve this one. I have no idea how to isolate the dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069:31,config,configure,31,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069,1,['config'],['configure']
Modifiability,"Not currently. The plan is to move all internal variables to the [`variables` dictionary](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L547) on the Wavefunction which is exposed to Python. For DFMP2 this is rather straight forward, you could find and replace all `energy_` variables with `variables_` and pop the `energy_` dictionary from the MP2 header. Other classes are more difficult which is why this is on the TODO list, but feel free to do this one if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642#issuecomment-284878288:48,variab,variables,48,https://psicode.org,https://github.com/psi4/psi4/issues/642#issuecomment-284878288,3,['variab'],['variables']
Modifiability,"Not that I'm aware of. There are three reasons somebody might be tempted to use a manual `compute_gradient` call.; 1. _Method developer reason_. You are a plugin developer and don't know you can edit `proc_table` to tell `gradient` how to run for your new method. Not a good reason because you actually can.; 2. _Method developer reason_. You are writing a gradient method and want your gradient function to enter the C-code to do your energy, return to the driver, then re-enter the C-code to do your gradient. This is the best reason I've come up with, and while I'm sympathetic, I just don't think it's worth the danger of exposing this function to completely general Python use. The gradient machinery should only ever be called after your energy computation finishes.; 3. _User reason_. You want to run some additional commands between your energy and your gradient computation. I just can't imagine a use case for this _other than_ bypassing some sanity check. There isn't a case where separating the calls saves times. Even if there were, shoving intermediates onto a `wfn` only works for SCF (not sure about general DFT functionals). Even MP2 gradient theory needs intermediates too large to store on the `wfn`. The best I've come up with is that you're doing SCF, serialize the wavefunction for later analysis, and then decide you want a gradient after that later analysis. But even in that case, the serialized wavefunction has the converged orbitals, so just use `gradient`. I would expect minor computational overhead for the energy step. (I suppose there is the cost of re-building the TEI?). Since this would affect Forte and heads off a possible bug in relativistic computations, it's probably worth asking @fevangelista for input on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209:155,plugin,plugin,155,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209,1,['plugin'],['plugin']
Modifiability,"Note that I have no doubt Mol was thoroughly tested for all these things in its development and was in pristine working order. But we didn't have the notion of preserving those unit tests for a future refactoring. So I'm just trying to convey that downstream may rely on the inconsistency and changes that in class development may have been a ""fix"" are now a ""refactoring"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363476390:201,refactor,refactoring,201,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363476390,2,['refactor'],['refactoring']
Modifiability,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235927654:276,config,configure,276,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654,1,['config'],['configure']
Modifiability,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:240,config,configured,240,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,1,['config'],['configured']
Modifiability,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:162,variab,variables,162,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000,1,['variab'],['variables']
Modifiability,"Now I have removed the variable set from Library. Unfortunately, didn't help. When I remove the catch-unconfigured checks (https://github.com/psi4/psi4/pull/1543/commits/f00ca3d63871c22411989a744ffbfbd33664eed7), it looks like the vars are defined and running in [this azure log](https://dev.azure.com/psi4/psi4/_build/results?buildId=554), so maybe there's just syntax trouble there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464954810:23,variab,variable,23,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464954810,1,['variab'],['variable']
Modifiability,"Now I see, thanks. No, this is not possible with the current version of trexio which is tightly coupled to the corresponding format defined in `trex.json`. There is no way to write an arbitrary variable until it's defined in the format (we have internal consistency checks for the sizes of the matrices for example in order to prevent inconsistent data). . @scemama We could probably add a functionality allowing to write an arbitrary variable in e.g. ""external"" group via generic `trexio_write|read_(file, variable-str, datatype-str, size-max)`. I can implement it easily for the HDF5 back end but TEXT one is more tricky.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003:194,variab,variable,194,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003,3,['variab'],"['variable', 'variable-str']"
Modifiability,"Now that seminumerical exchange is in, it would make more sense for me to refactor that code into this framework as well. Waiting on density screening refactor would also be helpful @davpoolechem",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1129658643:74,refactor,refactor,74,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1129658643,2,['refactor'],['refactor']
Modifiability,"OEProp isn't given a name when it's called, so it assigns no name at all to its variables. Hence `<name> DIPOLE` becomes `DIPOLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-867924282:80,variab,variables,80,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-867924282,1,['variab'],['variables']
Modifiability,"OK, I nuked all references to ConfigVersion because, as I understand, gitversion.py replaces it. The code is building now, but we should make sure it all links properly before merging. Also, I'd like @loriab to confirm that I haven't done something stupid, before we accept the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187457866:30,Config,ConfigVersion,30,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187457866,1,['Config'],['ConfigVersion']
Modifiability,"OK, now it's such that one of the three test cases uses `Wfn.variables` while the other two still use `P::e.globals`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/697#issuecomment-300808824:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300808824,1,['variab'],['variables']
Modifiability,"OK, this should be working 100% now. The output looks correct on all the systems I've run so far, and I've added tests. I initially tried to use H2O, but it seems there's something weird going on with the CI wave functions there. Namely, when the CI wave function appears to flip its overall sign between the computed and the reference wave function, there are some configurations that *do not* flip their sign. I guess this must be some weird thing to do with symmetry, in that the wave function can individually flip signs within symmetry subblocks...?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301282245:366,config,configurations,366,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301282245,1,['config'],['configurations']
Modifiability,"OK. About the brown-paperbag, I've now looked it up in the hacker dictionary, and I didn't mean it in that sense, sorry. I use it in the sense of ""maintainer successfully built and tested on their machine, but it's obviously broken on a different configuration they did not test"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-178169351:247,config,configuration,247,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178169351,1,['config'],['configuration']
Modifiability,"OK... I managed to get gpu_dfcc built as a separate tree using gcc/g++ 5.5.0 by adding; `-DCMAKE_PREFIX_PATH` (pointing at `psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK`); and; `-DOpenMP_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin` ; to the do-configure script. (I'm not sure how that would translate into building it within the psi4 build.). gcc/g++-4.9 gave me compile errors about missing symbols and gcc/g++-6 triggers a known bug with the version of CUDA I have on Debian (9.1.85). (If I had gcc/g++-6 installed and told it to use 4.9, cmake still tried to pull in a load of headers from V6!). It's built, installed into my installed psi4 tree and the gpu_dfcc test jobs run happily with reasonable looking bits about the GPU in the output file. I suspect I'll need to try a bigger job to see what it's really doing, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333:303,config,configure,303,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333,1,['config'],['configure']
Modifiability,"ON file is read by a Python script to generate C functions and headers, and the Fortran and Python interfaces. The names of the functions are `trexio_<group>_write_<attribute>`. So you can edit the trex.org file to add extra info to the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically generate the JSON code from the data of the table and put it in the file, similarly to what happens when you are using a Jupyter Notebook and you evaluate a cell. Note: the `last=1` argument handles the presence/absence of a comma in the gen",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:1159,Variab,Variable,1159,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918,1,['Variab'],['Variable']
Modifiability,ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012:144,adapt,adapt,144,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012,1,['adapt'],['adapt']
Modifiability,"Of the dozen or so headers on my computer by that name, only the ones supplied by the conda clang compilers (which I'm not using) have that set. So error makes some sense. Only thing I can think of is I haven't done a simint build on this machine since the default switched from `sse` to `avx`, though, as that happened 9 months ago, shows that I've been _really_ linux or mac-psinet bound of late. ##### psi4 cmake; ```; -- Setting (unspecified) option SIMINT_VECTOR: avx; ```. ##### simint cmake; ```; -- Maximum AM: 6; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=native; -- CMAKE_CXX_FLAGS: -stdlib=libc++ -march=native; -- SIMINT_C_INCLUDES: /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-mavx; -- SIMINT_LINK_FLAGS: ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356761851:974,variab,variable,974,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356761851,1,['variab'],['variable']
Modifiability,"Oh yea, this need to have a double split so that original line breaks are kept.; ```python; lines = []; for x in msg.splitlines():; lines.extend(wrap(x, linewidth).splitlines()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334:138,extend,extend,138,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334,1,['extend'],['extend']
Modifiability,"Oh, I see. Is there another variable I should be checking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409#issuecomment-444989115:28,variab,variable,28,https://psicode.org,https://github.com/psi4/psi4/pull/1409#issuecomment-444989115,1,['variab'],['variable']
Modifiability,"Ok fixed up the plugins, modernized the SCF plugin example, and a few other odds and ends. This should be ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-346231339:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346231339,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:68,config,configure,68,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611,2,['config'],['configure']
Modifiability,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249699749:454,variab,variables,454,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749,2,"['config', 'variab']","['config', 'variables']"
Modifiability,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:685,variab,variables,685,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,"['CONFIG', 'variab']","['CONFIG', 'variables']"
Modifiability,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:557,config,configure,557,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['config'],['configure']
Modifiability,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273811816:254,rewrite,rewrite,254,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816,1,['rewrite'],['rewrite']
Modifiability,"Ok, if one installs into a conda env the packages `psi4` (from us), `gcc`, and `openblas` (from default/anaconda channel), check out a new plugin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172256746:139,plugin,plugin,139,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746,1,['plugin'],['plugin']
Modifiability,"Ok, so in the `ijij` case I see this difference between s390 and amd64 when parsing the third character, also note the different length and content of `labels`:. amd64:. ```; Breakpoint 3, get_combined_dims_view (labels=0x7fffffffcd20 ""ij\376\376"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114	 int label = (signed char)labels[idim];; (gdb) n; 2116	 if (label < 0) {; (gdb) p label; $43 = -2; (gdb) p idim; $44 = 3; (gdb) p labels[idim]; $45 = -2 '\376'; (gdb) p labels; $46 = 0x7fffffffcd20 ""ij\376\376""; ```. s390x:. ```; Breakpoint 7, get_combined_dims_view (labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114 int label = (signed char)labels[idim];; (gdb) n; 2116 if (label < 0) {; (gdb) p label; $278 = -1; (gdb) p idim; $279 = 3; (gdb) p labels[idim]; $280 = 255 '\377'; (gdb) p labels ; $281 = 0x3ffffffcdf8 ""ij\376\377\375\377\061\340""; ```. If I then go on on s390 by mangling the `label` variable, it exits fine. ```; (gdb) set variable label = -2; (gdb) c; Continuing.; 47.048397425357216; [Inferior 1 (process 26977) exited normally]; ```. So I guess the `int label = (signed char)labels[idim];` is to fault here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263:1012,variab,variable,1012,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263,2,['variab'],['variable']
Modifiability,"Ok, so this is the issue. When you compute matrix elements of the effective Hamiltonian, <Psi_nu | Hbar(mu)|Psi_mu>, if the two determinants Psi_mu and Psi_nu differ by more than a double excitation you need the higher moments of the CC equations. These are not implemented in psimrcc. That's the reason for the warning in the CC code. In the PT2 code, everything is truncated at the second-order, and the matrix elements <Psi_nu | Hbar(mu)^(2) |Psi_mu> exist up to difference in three electron substitutions. So, I checked the paper and the code. The paper shows the formulas for the three-body couplings and some of these terms are coded in `psiumrcc/idmrpt2_Heff.cc` but are never called! So, the same warning should apply to PT2. My guess is that we were in the process of implementing them but then stopped (cannot remember why). So the following functions are dead code:; ```; void build_Heff_ijkabc();; void build_Heff_ijKabC();; void build_Heff_iJKaBC();; void build_Heff_IJKABC();; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-621283302:596,coupling,couplings,596,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-621283302,1,['coupling'],['couplings']
Modifiability,"Ok, that looks fine for psi4 in its own right. Jupyter must be in a separate environment. That can also work, but it'll need a little configuration -- I'm not surprised the initial jupy couldn't find it. Pretty much `export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/` or `sys.path.append(<same>)` from the jupy env should make the connection. `psi4 --psiapi` gives the exact values. https://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation may also be helpful (do set scratch if running anything non-trivial).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195262024:134,config,configuration,134,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195262024,1,['config'],['configuration']
Modifiability,"Ok, the example plugins build automatically again and are incorporated into the testing system. The `-DENABLE_PLUGINS` option, btw, only controls whether these example plugins are built automatically, as opposed to in earlier build schemes where it actually controlled whether `-fpic` was used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78#issuecomment-86676981:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-86676981,2,['plugin'],['plugins']
Modifiability,"Ok, the only non-invasive way I see around this is the below in the main CM file (change primary language as needed):. ```; if(CMAKE_CXX_COMPILER_ID MATCHES Intel); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); else(); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-march=native"" ""-xHost"" ""/arch:AVX2""); endif(); ```. For Intel, `-march=native` might be a near approximation to `-xHost`, but I'd rather use the latter official flag.; Do you want to try this out for Libxc, @susilehtola?. I observed another problem that when conda compilers are present and `-DCMAKE_CXX_COMPILER=icpc` passed, that the `-fno-plt` set in the envvar `CXXFLAGS` by conda env activation was unsupported by Intel and so triggered all three `ENABLE_XHOST` options to fail unless `CXXFLAGS=` explicitly cleared/set beforehand. I had deliberately _not_ made psi4 CMake dependent on envvars, but it looks like CMake started doing that in 3.10, hmpf. https://cmake.org/cmake/help/v3.10/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854:1163,variab,variables,1163,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854,2,['variab'],['variables']
Modifiability,"Ok, the problem arises because in `psivardefs.py` the `SAPT0 IND ENERGY` variable is always defined in terms of coupled induction. I remember we had discussions about that at the time. Since usapt0.cc does not put uncoupled induction in the coupled induction variables, the `SAPT0 IND ENERGY` is not defined properly any more. Possible solution: define uncoupled variants of the variables in `psivardefs.py`, and when we create `SAPT IND ENERGY` (in `proc.py`) we copy `SAPT0 IND,U ENERGY` value if `SAPT0 IND ENERGY` is not defined. ; - Would that work ?; - Is there a way to check whether a Psivar is defined other than checking if it is exactly 0 ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364679625:73,variab,variable,73,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364679625,3,['variab'],"['variable', 'variables']"
Modifiability,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/49#issuecomment-215210776:218,plugin,plugin,218,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776,5,['plugin'],"['plugin', 'plugin-makefile', 'plugin-using-a-conda-pre-compiled-binary', 'plugins']"
Modifiability,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:63,plugin,plugins,63,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Okay, I'm not a fan of that. I do not install anything, psi4 or anything else, until I know that the tests pass, irregardless of what Travis CI says. Plus, I spend most of my time C-side or work in plugins that also require changes to C-side. I'll give it some thought and see what I can do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235910224:198,plugin,plugins,198,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235910224,1,['plugin'],['plugins']
Modifiability,"Okay, so I guess we can link against the pre-built conda one.; I still tested the gcc you suggested, and after giving the proper gcc-ar and gcc-ranlib to the CMake variables, it complains it cannot find liblto_plugin.so; I checked and the new gcc has only liblto_plugin.a and not the .so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288459669:164,variab,variables,164,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288459669,1,['variab'],['variables']
Modifiability,"Okay, so there are three different issues here:; 1. A segfault occurs if `num_frozen_docc` is ""too large."" What exactly ""too large"" means is unclear, but more frozen docc pairs than electron pairs is sufficient.; 2. Under certain conditions, `num_frozen_docc` causes very bad HF energies in the SAPT printout. The mechanism for this is unclear, but the individual HF computations themselves seem fine.; 3. The handling of frozen core orbitals is not flexible enough for your purposes. #2667 fixes this issue but not the other two. Do I have all that right? Any other issues I've missed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209917224:450,flexible,flexible,450,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209917224,1,['flexible'],['flexible']
Modifiability,"On ""How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere."", I'd say:; * in some fn (doesn't much matter where at this point), define each of the fields the metadata dict can or could include very carefully. e.g., https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_arrays.py#L216-L251; * choose a unique name for the variable that effectively signals its type, e.g., `findifrec`; * Use `findifrec` (or whatever you choose) as if it was a proper type when functions take or return the object. e.g., https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py#L64-L67",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-431687920:421,variab,variable,421,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-431687920,1,['variab'],['variable']
Modifiability,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-344288297:136,variab,variable,136,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297,1,['variab'],['variable']
Modifiability,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185260019:943,plugin,plugin,943,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019,12,['plugin'],['plugin']
Modifiability,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139102907:32,config,configuration,32,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907,1,['config'],['configuration']
Modifiability,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234668387:1040,flexible,flexible,1040,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387,1,['flexible'],['flexible']
Modifiability,"One smart feature would be to check whether the energy decreases when changing configurations. This could be a configurable setting in the solver. That is, when the Aufbau principle would lead to changing the configuration, the program should check whether the new occupations lead to a lower energy with the current orbitals than the old occupations with the same orbitals. Although this requires one additional energy evaluation, it probably saves quite a bit of iterations by preventing switches to less-good occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-879347426:79,config,configurations,79,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-879347426,3,['config'],"['configurable', 'configuration', 'configurations']"
Modifiability,"Only a year after the ticket, and I've finally reviewed the keywords. @SebWouters, @dgasmith, @kannon92, please find below an options mapping between the two versions of chemps2 embedded in psi4, the chemps2 plugin for psi4, and the chemps2 executable. Column [E] is what I would have named the options had this been an intrinsic psi4 module. My current philosophy wrt options of add-on modules in psi4 is to leave them exactly as they are in the add-on program (so that users of e.g., CheMPS2 in psi4 and pyscf control CheMPS2 with exactly the same set of options) then let a layer above the psi4 driver handle mappings of identical-intent keywords into the psi4-consistent set (so that users of psi4 can `set detci diis true` and `set dmrg diis false`). So, I propose that we go entirely with [D] if that's the official CheMPS2 options set or entirely with [E] as those are the psi4-like versions. I don't see much point in maintaining _three_ options sets. Thoughts?. ``` text; Various of the dmrg options map nicely in meaning onto psi4's; e/d/r_convergence options. But in dmrg, e/r_convergence must be; arrays of floats, not floats, so they need the dmrg_ prefix for; differentiation. So, d_convergence may as well match with dmrg_. ------------- ------------- --------------- ----------- --------------; [A] [B] [C] [D] [E]; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like; ------------- ------------- --------------- ----------- --------------; --> GLOBAL frozen_docc frozen_docc nocc frozen_docc; --> GLOBAL active active nact active; dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep/group/symmetry wfn_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states ArrayType; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence ArrayType; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps ArrayT",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-223864136:208,plugin,plugin,208,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223864136,1,['plugin'],['plugin']
Modifiability,"Oops, I ran the tests when I submitted this one, but didn't check the plugins. Thanks a lot for dealing with that, @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-346345543:70,plugin,plugins,70,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346345543,1,['plugin'],['plugins']
Modifiability,"PR #370 also hit various of these points, particularly moving from Makefile, Makefile.conda, Makefile.macconda into configuring at cmake-time. All in at least provisionally working order, so closing out. Thanks, @fevangelista.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-215206861:116,config,configuring,116,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-215206861,1,['config'],['configuring']
Modifiability,PR with my fix is merged. Leaving this open until our cmake pulls the new plugin version @loriab,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009#issuecomment-697169118:74,plugin,plugin,74,https://psicode.org,https://github.com/psi4/psi4/issues/2009#issuecomment-697169118,1,['plugin'],['plugin']
Modifiability,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:131,config,config,131,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915,1,['config'],['config']
Modifiability,"Pipeline variables now configured. With respect to your other questions, yes, max_am_eri=8 will be plenty high enough. That matches what we distribute for linux now (Mac is 6). And don't worry about py3.5 -- there were enough oddities that we dropped it, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328:9,variab,variables,9,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,"Please review the LinK code first, and tell me what you think of the new variable names before I make any changes to the DirectJK build algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-998999113:73,variab,variable,73,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-998999113,1,['variab'],['variable']
Modifiability,"Please supply the git hash of your Psi4 version, plugins have changed a lot lately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271911191:49,plugin,plugins,49,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271911191,1,['plugin'],['plugins']
Modifiability,"Plugin wish list:. - [ ] allow compiled `pluginname.so` to have a name other than matching `import pluginname`, so that python import system can't mistake the `.so` for the actual module. (see https://github.com/edeprince3/gpu_dfcc/issues/2#issuecomment-397649361)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-397656501:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-397656501,3,"['Plugin', 'plugin']","['Plugin', 'pluginname']"
Modifiability,"Pretty easy answer, if you look at the results you see pure nonsense in the molecule geometry. Each time you update a variable the molecule geometry is updated, since you do not have `no_com` set the molecule is moving around on you quite a bit and you're not building the geometry you think you are building. If you set `no_com`, everything works fine. This kind of variable setting really only should be used with a z-matrix. I wonder if we should enforce this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759#issuecomment-313982153:118,variab,variable,118,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313982153,2,['variab'],['variable']
Modifiability,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178853828:216,config,configures,216,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828,1,['config'],['configures']
Modifiability,Probably a patch or two needed to the plugin templates to satisfy Travis.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-343331298:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-343331298,1,['plugin'],['plugin']
Modifiability,"Probably what's happening is that psi4 is packaged only with MKL (except for Apple Silicon) and OpenFF is flexible in BLAS, but conda-forge defaults to OpenBLAS. So one needs to install both together or install psi4 and then openff, as you worked out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544:106,flexible,flexible,106,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544,1,['flexible'],['flexible']
Modifiability,"Props4 does have both labels (my bad), so I'll fix that, @loriab. I _think_ I found a workaround for the Travis problems. The bjam system uses predefined setups to build. When it calls `clang`, it's really getting clang 3.4 (which is broken); loading the clang 3.8 module defines `clang-3.8` in addition to the existing `clang`. I forced bjam to use `clang-3.8` instead by dumping a `user-config.bjam` file to ${HOME}. This is done by a script because YAML has a terrible time with : in environmental variables. That's about an hour of my life I'll never get back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235179414:389,config,config,389,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235179414,2,"['config', 'variab']","['config', 'variables']"
Modifiability,"Psi and TREXIO use the word ""file"" differently, so let me reword. Right now, a user can do the equivalent of saying to save a matrix as a variable in a group, as long as the _group_ is pre-defined. The user can create a completely new variable in an existing group if they so choose. Is there a way for us to retain that functionality with TREXIO?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515:138,variab,variable,138,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515,2,['variab'],['variable']
Modifiability,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1789,variab,variables,1789,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,1,['variab'],['variables']
Modifiability,"Question: Is it worth refactoring `adcc` ctests to pytest? I will need to touch *every* `adcc` test to accommodate for new variables (previously all excitation energies were just stored in a single array, so that we could use `compare_arrays`) anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513#issuecomment-1084625953:22,refactor,refactoring,22,https://psicode.org,https://github.com/psi4/psi4/pull/2513#issuecomment-1084625953,2,"['refactor', 'variab']","['refactoring', 'variables']"
Modifiability,"Quick notes on timer.dat; * the file is cummulative so run each calc in separate directory so you can match an input file with a timer.dat entry; * timer.dat is mostly for developers so it has just enough info to identify things but not much description; * if you're willing to compile the code (for c-side entries) or edit the installation (for py-side entries), adding more subdivisions to timer.dat is easy; * py-side, have matching labels like https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L196-L198; * c-side, have matching entries like https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L219-L221; * for a single run, timer.dat shows the same info two ways -- ; * one is sorted cummulative time spent w/i each label marker; * other is nested so you can see what label markers contain others; * so the hardest part is finding/adding appropriate marks that you want to measure the time over; * you can get the number of scf iterations from `psi4.variable(""SCF ITERATIONS"")` at the end of a calc. Hope this is broadly helpful. Feel free to ask questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2601#issuecomment-1152763335:1011,variab,variable,1011,https://psicode.org,https://github.com/psi4/psi4/issues/2601#issuecomment-1152763335,1,['variab'],['variable']
Modifiability,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-226000498:362,plugin,plugins,362,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"R_SPIN_FLIP', 'CFOUR_SPIN_ORBIT', 'CFOUR_SPIN_SCAL', 'CFOUR_SUBGROUP', 'CFOUR_SYMMETRY', 'CFOUR_SYM_CHECK', 'CFOUR_T3_EXTRAPOL', 'CFOUR_TAMP_SUM', 'CFOUR_THERMOCHEMISTRY', 'CFOUR_TRANS_INV', 'CFOUR_TREAT_PERT', 'CFOUR_UIJ_THRESHOLD', 'CFOUR_UNITS', 'CFOUR_UPDATE_HESSIAN', 'CFOUR_VIBRATION', 'CFOUR_VTRAN', 'CFOUR_XFIELD', 'CFOUR_XFORM_TOL', 'CFOUR_YFIELD', 'CFOUR_ZFIELD', 'CHOLESKY', 'CHOLESKY_TOLERANCE', 'CIBLKS_PRINT', 'CI_DIIS', 'CI_FILE_START', 'CI_MAXITER', 'CI_NUM_THREADS', 'CI_TYPE', 'COLLAPSE_SIZE', 'COLLAPSE_WITH_LAST', 'COLLAPSE_WITH_LAST_CC3', 'COMPLEX_TOLERANCE', 'COMPUTE_MP4_TRIPLES', 'COMPUTE_TRIPLES', 'COMPUT_S2', 'CONSECUTIVE_BACKSTEPS', 'CORR_ANSATZ', 'CORR_CCSD_T', 'CORR_CHARGE', 'CORR_MULTP', 'CORR_WFN', 'COSX_BASIS_TOLERANCE', 'COSX_DENSITY_TOLERANCE', 'COSX_INTS_TOLERANCE', 'COSX_OVERLAP_FITTING', 'COSX_PRUNING_SCHEME', 'COSX_RADIAL_POINTS_FINAL', 'COSX_RADIAL_POINTS_INITIAL', 'COSX_SPHERICAL_POINTS_FINAL', 'COSX_SPHERICAL_POINTS_INITIAL', 'COUPLED_INDUCTION', 'COUPLING', 'COUPLING_TERMS', 'COVALENT_CONNECT', 'CPHF_MEM_SAFETY_FACTOR', 'CPHF_TASKS', 'CUBEPROP_BASIS_FUNCTIONS', 'CUBEPROP_FILEPATH', 'CUBEPROP_ISOCONTOUR_THRESHOLD', 'CUBEPROP_ORBITALS', 'CUBEPROP_TASKS', 'CUBIC_BASIS_TOLERANCE', 'CUBIC_BLOCK_MAX_POINTS', 'CUBIC_GRID_OVERAGE', 'CUBIC_GRID_SPACING', 'CUTOFF', 'CUTOFF_AMPS_PRINT', 'DAMPING_CONVERGENCE', 'DAMPING_FACTOR_INDUCED', 'DAMPING_FACTOR_MULTIPOLE', 'DAMPING_PERCENTAGE', 'DAMP_INDUCED', 'DAMP_MULTIPOLE', 'DCT_FUNCTIONAL', 'DCT_GUESS', 'DCT_TYPE', 'DDX', 'DDX_DIIS_MAX_VECS', 'DDX_ETA', 'DDX_FMM', 'DDX_FMM_LOCAL_LMAX', 'DDX_FMM_MULTIPOLE_LMAX', 'DDX_INCORE', 'DDX_LMAX', 'DDX_LOGFILE', 'DDX_MAXITER', 'DDX_MODEL', 'DDX_N_LEBEDEV', 'DDX_RADII', 'DDX_RADII_SCALING', 'DDX_RADII_SET', 'DDX_SHIFT', 'DDX_SOLUTE_RADIAL_POINTS', 'DDX_SOLUTE_SPHERICAL_POINTS', 'DDX_SOLVATION_CONVERGENCE', 'DDX_SOLVENT', 'DDX_SOLVENT_EPSILON', 'DDX_SOLVENT_EPSILON_OPTICAL', 'DDX_SOLVENT_KAPPA', 'DEBUG', 'DELETE_TEI', 'DENOMINATOR_ALGORITHM', 'DENOMINATOR_DELTA'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:10897,COUPLING,COUPLING,10897,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['COUPLING'],['COUPLING']
Modifiability,"Ran these under memory/cpu profilers (4 cores) and found the following:. B3LYP with MemJK (8.3 GB max, 3 SCF iterations):; ![b3lyp_memjk](https://user-images.githubusercontent.com/1769841/55844039-7d81c280-5b09-11e9-8fd5-c2dc04d71d23.png). wB97X with MemJK (7.1 GB max, 1 SCF iteration):; ![wb97x_diskjk](https://user-images.githubusercontent.com/1769841/55844045-82467680-5b09-11e9-9e20-78204926df8e.png). I could not run these for their full extend on my laptop, but overall it looks like they are staying relatively in-bounds. I can fix the 4% overages on the B3LYP run, I see where that occurs now. A thought is that they slowly leak over time, can you check which optimization iteration these are failing on?. I sadly do not have any local hardware I can run things on these days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169:444,extend,extend,444,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169,1,['extend'],['extend']
Modifiability,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:703,refactor,refactoring,703,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715,2,['refactor'],['refactoring']
Modifiability,"STATIC, SHARED, MODULE . SHARED is the usual linux `.so` for linking, while MODULE is the dl_open style of a Py module. Up until this merged PR we were doing SHARED. ### SHARED; * links `libpython.so` into psi4's `core.*.so` -- this is new in the revamped pb11 add_pybind11_module that calls [Python_add_library](https://gitlab.kitware.com/cmake/cmake/-/blob/master/Modules/FindPython/Support.cmake#L3306-3313); * sets `DT_SONAME` on the `core.*.so`. This shows up as `Library soname` below in `readelf -d` of core.*.so. *This is important* b/c w/o this set, the full path to `core.*.so` gets linked into consumers like plugins, rather than just the library name. [trouble](https://stackoverflow.com/questions/27261288/cmake-linking-shared-c-object-from-externalproject-produces-binaries-with-rel); * designed for ordinary library linking like how the plugins are using symbols from psi4. The https://github.com/psi4/psi4/blob/master/psi4/psi4Config.cmake.in#L141 does the linking of core.*.so to the plugins. ### MODULE; * does *not* link `libpython.so` into psi4; * does *not* set `DT_SONAME` on psi4. that's ok for the local plugins where the full path that's baked in is the same as the RPATH+SONAME resolved through `ld`, but this breaks down during the v2rdm conda build. I've been unable to force a `DT_SONAME` entry onto a `MODULE` library; * one can perhaps get away with it (no errors; current state of `master`), but it's [advised not to link to a MODULE](https://stackoverflow.com/a/4968940). ### printouts from SHARED; ```; >>> readelf -d stage/lib/psi4/core.cpython-39-x86_64-linux-gnu.so . Dynamic section at offset 0x21a4aa0 contains 40 entries:; Tag Type Name/Value; 0x0000000000000001 (NEEDED) Shared library: [libpython3.9.so.1.0]; 0x0000000000000001 (NEEDED) Shared library: [libgg.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libxc.so.9]; 0x0000000000000001 (NEEDED) Shared library: [libint2.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libdl.so.2]; 0x0000000000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188:1091,plugin,plugins,1091,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188,1,['plugin'],['plugins']
Modifiability,S_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/fi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2703,Config,ConfigMath,2703,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,"Sebastian, my apologies for the forthcoming long response, which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:630,adapt,adapt,630,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['adapt'],['adapt']
Modifiability,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010043:809,plugin,plugin,809,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043,1,['plugin'],['plugin']
Modifiability,Seems to be used to define `PSI_VERSION` in `cmake/ConfigVersion.cmake` @loriab is `PSI_VERSION` redefined somewhere else afterwards or is that an unused variable?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/271#issuecomment-187426230:51,Config,ConfigVersion,51,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187426230,2,"['Config', 'variab']","['ConfigVersion', 'variable']"
Modifiability,"Setting TargetLAPACK_DIR (as you suggested) didn't seem to help: it still couldn't find MathOpenMP. However, adding; `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:766,config,configuration,766,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,1,['config'],['configuration']
Modifiability,Should I be concerned about and fix these:; ```; c:\projects\psi4\psi4\src\psi4\ccdensity\ael.cc(90): warning C4700: uninitialized local variable 'k' used [C:\projects\psi4\build\psi4-core-prefix\src\psi4-core-build\src\psi4\ccdensity\ccdensity.vcxproj] [C:\projects\psi4\build\psi4-core.vcxproj]; c:\projects\psi4\psi4\src\psi4\ccenergy\ccenergy.cc(314): warning C4700: uninitialized local variable 'last_energy' used [C:\projects\psi4\build\psi4-core-prefix\src\psi4-core-build\src\psi4\ccenergy\ccenergy.vcxproj] [C:\projects\psi4\build\psi4-core.vcxproj]; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-403474232:137,variab,variable,137,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-403474232,2,['variab'],['variable']
Modifiability,"Should be doable: in ERKALE I run an eigendecomposition of a 100x100 random matrix in sequential mode and repeat the calculation in a parallel OpenMP section. If the decompositions of the individual threads don’t match the sequential one, then LAPACK is not thread safe. Susi Lehtola; Sent from my phone so excuse my brevity. On 20 Jan 2019, at 15.03, Michael Banck <notifications@github.com<mailto:notifications@github.com>> wrote:. Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1461#issuecomment-455864865>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJ2QSkRaIyanSHwFBRQyrKH2-9W1_ks5vFGkggaJpZM4ZxGFP>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306:454,config,configure-time,454,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306,1,['config'],['configure-time']
Modifiability,"Since `cppe` has its own Python interface now (which it did not when I started this PR), I guess there is no reason to interface with psi4 on the C++ layer?. I guess it would be much simpler wrt maintenance of the code to refactor everything and use the `cppe` Python interface directly. What do you think, @loriab, @dgasmith, @robertodr ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596:222,refactor,refactor,222,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596,1,['refactor'],['refactor']
Modifiability,"Since nobody answered this yet, let me do so and bump this thread... You are right Lori, at present the s^2 variants are always computed, and the s^inf variants are computed in addition if the respective variables are True. As the new addition makes it possible to run complete SAPT0 without the s^2 approximation, it definitely makes sense to create a route that does exactly that, skipping the s^2 calculations altogether. However, it probably needs a new name (`energy('sapt0-sinf')` or similar) so the meaning of the standard and widely used `energy('sapt0')` is unchanged. It might also make sense to define new optional routes for higher-order SAPT that combine SAPT0-level s^inf exchange corrections with higher-level s^2 exchange corrections. I don't have a good name for such routes though: `energy('sapt2-sinf')` is not a good idea because it's not _all_ s^inf.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052:204,variab,variables,204,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052,1,['variab'],['variables']
Modifiability,"So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152700048:212,extend,extend,212,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152700048,1,['extend'],['extend']
Modifiability,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:587,variab,variable,587,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,1,['variab'],['variable']
Modifiability,"So I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think ht",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:313,flexible,flexible,313,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,2,"['Config', 'flexible']","['Config', 'flexible']"
Modifiability,So if I'm understanding you correctly basically the only thing you want from this PR is the `CMakeLists.txt` factorization and the (then) one-line change of ensuring `CMAKE_PREFIX_PATH` is passed to the plugins?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563#issuecomment-274523303:203,plugin,plugins,203,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274523303,1,['plugin'],['plugins']
Modifiability,"So it probably is something from my refactoring, which is strange because I didn't touch any of the parallelization lines... I'll look into this, but it might take me some time to get set up on the new cluster.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2192#issuecomment-861465776:36,refactor,refactoring,36,https://psicode.org,https://github.com/psi4/psi4/issues/2192#issuecomment-861465776,1,['refactor'],['refactoring']
Modifiability,So the closest thing we have to precedent on this is the csx4psi plugin (which has nothing to do with dmrg) https://anaconda.org/psi4/csx4psi . More later.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-176961114:65,plugin,plugin,65,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176961114,1,['plugin'],['plugin']
Modifiability,"So the dump file just contains the CI vector coefficients and bitstrings. The problem is that due to finite numerical precision the ordering of the vectors may change, as several configurations may have the same coefficient. I can probably write a check for that but it'll easily be O(N^2) so I'll have to restrict to rather small calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301224703:179,config,configurations,179,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301224703,1,['config'],['configurations']
Modifiability,"So the main control for finding non-distributed things (basis sets, plugins, etc.) in psi4 is the `PSIPATH` environment variable (http://psicode.org/psi4manual/master/external.html#envvar-PSIPATH) that (for python things) internally prepends to `sys.path`. How to handle user-enabled non-distributed things in a certain place (as conda needs) without `PSIPATH` (or with that dir standardly appended to `PSIPATH`) hasn't really been thought through. (Though now is the time, for you and others that are non-standard at present.) I don't think `share/psi4` is right because that dir is supposed to be platform independent, so `.so` not suitable. Hence I tentatively selected `psi4aux`. I've done a little internet searching but not much inspection of unpacked conda packages seeking a precedent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-176983588:68,plugin,plugins,68,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176983588,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:624,config,config,624,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684,2,"['Config', 'config']","['Configuring', 'config']"
Modifiability,"Some ""general direction"" comments:. 1. I can't identify what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contrib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:412,plugin,plugins,412,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,1,['plugin'],['plugins']
Modifiability,"Some comments for posterity:; * The Coulomb terms also come from the derivatives of two-electron integrals. You can (and for efficiency should) contract the TEI derivatives against the 1RDM to get the Coulomb terms. Conceptually, this is the interaction of an orbital with the mean field of all orbitals. It's not a pure one-electron interaction, but it's close enough.; * For purposes of thinking about the implementation, this issue is two very different ones: (1) exposing the existing pieces of the SCF gradient and (2) further decomposing those pieces into per-orbital contributions, where applicable. (1) is as easy as setting array variables on the wavefunction. Per-orbital contributions aren't even computed, as they shouldn't be in an efficient code, so (2) is non-trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091:639,variab,variables,639,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091,1,['variab'],['variables']
Modifiability,"Sometimes ultimate convergence is more important than any maxiter variable; - particularly for speedy methods or initial optimizations. If an; optimization fails in internal coordinates, then one might want the; optimizer to try Cartesians, automatically. The idea of a 'dynamic level'; (whatever its final name or design) is that a user could easily elect the; degree to which the optimizer should try different things to reach; convergence. On Tue, Nov 6, 2018 at 4:47 PM Lori A. Burns <notifications@github.com>; wrote:. > PRs psi-rking/optking#24 <https://github.com/psi-rking/optking/pull/24>; > and #1335 <https://github.com/psi4/psi4/pull/1335> are a pair. Together,; > they get most optimizations working for Psi. In particular have working:; >; > - ordinary, opt-is-full job optimizations; > - collecting all the psivars so psi can read them in. basically,; > collecting enough to generate a skeleton (mol, basis, psivars) that can be; > passed back from psi4.optimize(..., return_wfn=True); > - inlining optking's logging output into the psi4 output file; > - resetting psi4's options on either side of the; > optking.run_json_dict() call. The trouble was that the psi4-s imported; > by optking were clearing and setting options (as is proper for indep json; > runs) such that the calling psi4 didn't have its original options in; > globals upon optking termination; > - starting to catch optking errors (str in json) and re-raising them; > as psi4 errors.; >; > Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped; > me for a while b/c I only got the final error (""dynamic level exceeded""); > and I thought it was behaving differently btwn direct optking and psi4; > initiated runs. To me it seems clear that if geom_maxiter is exceeded, then; > optimizer quits directly (though perhaps that's clearer when geom_maxiter=2; > than =200).; >; > @psi-rking <https://github.com/psi-rking> @AlexHeide; > <https://github.com/AlexHeide>; >; > —; > You are receiving this becau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061:66,variab,variable,66,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061,1,['variab'],['variable']
Modifiability,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225993854:590,plugin,plugins,590,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854,2,['plugin'],['plugins']
Modifiability,"Sorry, I don't have the bandwidth to build it right now, but I think [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2264) could be responsible for the bad memory estimate and, perhaps, that's causing problems later on. The variables `aocc2AA` and `nvir2AA` are declared `int`, so their product will be computed as an `int`, overflow, and then that overflowed entity is cast to `double`. A quick fix for that would be to declare the various dimensioning variables as `size_t`. Hopefully that'll fix the issue 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561262601:261,variab,variables,261,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561262601,2,['variab'],['variables']
Modifiability,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:536,variab,variable,536,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761,1,['variab'],['variable']
Modifiability,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:946,variab,variables,946,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331,1,['variab'],['variables']
Modifiability,"Stepping through, it seems it crashes in `DFHelper::transform()` when calling in `identify_order()`, in particular in this line:. ```; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; ```. segfault seems to happen in C++ standard lib at. ```; /usr/include/c++/8/bits/stl_tree.h:1888; 1888		if (!_M_impl._M_key_compare(_S_key(__x), __k)); ```. This is C++ 8.2.0-13 (the -13 being Debian's revision). Will try to dig deeper. It seems the iterator `itr` gets bogus after the `itr--` on line 1537:. ```; 1536	 needs.erase(itr);; (gdb) ; 1537	 itr--;; (gdb) p itr; $124 = ""Aaa""; (gdb) n; 1519	 for (itr = needs.begin(), end = needs.end(); itr != end; ++itr) {; (gdb) p itr; $125 = <error: Cannot access memory at address 0x701040707070707>; (gdb) n; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; (gdb) p itr; $126 = <error reading variable: Cannot access memory at address 0x207070007060505>; (gdb) n. Program received signal SIGSEGV, Segmentation fault.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059:865,variab,variable,865,https://psicode.org,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059,1,['variab'],['variable']
Modifiability,Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420:54,variab,variable,54,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420,1,['variab'],['variable']
Modifiability,"Still works:. ```; psi4: timer_on: 0 thread; psi4: timer_on: 1 thread; psi4: timer_on: 2 thread; psi4: timer_on: 3 thread; Hello World from thread = 0; Hello World from thread = 1; Hello World from thread = 2; Hello World from thread = 3; Number of threads = 4; psi4: timer_on: 2 thread; psi4: timer_on: 1 thread; psi4: timer_on: 3 thread; psi4: timer_on: 0 thread; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 3; Hello World from thread = 0; Number of threads = 4; ```. Plugin:; ```; extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {; std::string timer_name = ""play "" + std::to_string(a);; timer_on(timer_name.c_str());. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; //timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }. timer_off(timer_name.c_str());. } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. Change to `timer_on` timer.cc in libqt with corresponding `#include <omp.h>`:; ```; printf(""psi4: timer_on: %d thread\n"", omp_get_thread_num());; ```. Then executed with `psi4 -n 4`. Not sure what's going on with your system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308824500:510,Plugin,Plugin,510,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308824500,2,"['Plugin', 'variab']","['Plugin', 'variables']"
Modifiability,"Sure, here is the script:. ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad; }. with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046:1255,variab,variable,1255,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046,1,['variab'],['variable']
Modifiability,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394#issuecomment-222842020:201,extend,extended,201,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020,1,['extend'],['extended']
Modifiability,"Sure. When you do a complex Psi4 job with multiple computations and one global variable space, there's nothing preventing a fci/sto-3g followed by a hf/cc-pvqz from getting a value from `get_variable('FCI TOTAL ENERGY')` or a `DISPERSION CORRECTION` after a CC job. Whereas for `P::e.globals` you'd have to deliberately `clean_variables()`, variable attached to a wavefunction are more likely rationally related. (Though not always. We still have to delete `MP2 TOTAL ENERGY` after a double-hybrid DFT job.). Whereas the psi4 driver operates a lot with ""wavefunction passing"" with `return_wfn` and most useful info (primary return val, psivars, basisset, orbital info, mol) stored on it, the analogy with generic objects (e.g., no `psi4.core.Matrix`) is a QCSchema dictionary being passed around via `return_json` holding psivars (or ""qcvars"" to be generic). Multiple json/wfn structures can be organized into a CBS dict record to describe extrapolations or a findif dict record as you have done. This ""dict passing"" is how qcdb works. So `P::e.globals` --> `Wfn.variables_` gets quantities localized onto calculations. Then `Wfn.variables_` --> QCSchema `psi4:variables` gets quantities generic and serializable. Let me know if anything needs elaboration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136:79,variab,variable,79,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136,3,['variab'],"['variable', 'variables']"
Modifiability,"Surprising that the low memory algorithm is faster! . I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/lowmemory_triples.cc#L72; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L659-L661; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L780",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556:96,adapt,adapted,96,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556,1,['adapt'],['adapted']
Modifiability,Switch from B/C --> F imminent. ```; ------------- ------------- --------------- ----------- -------------- -----------------; [A] [B] [C] [D] [E] [F]; Apr2015–Apr2016 May–Jun2016 late Jun 2016; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like psi4 1.0 dmrg 1.7; ------------- ------------- --------------- ----------- -------------- -----------------; --> GLOBAL frozen_docc frozen_docc nocc restricted_docc (edit) GLOBAL restricted_docc; --> GLOBAL active active nact active GLOBAL active (n/c); dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp dmrg_multiplicity; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep (edit) wfn_irrep dmrg_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states [] dmrg_sweep_states; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence [] dmrg_sweep_energy_conv; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence dmrg_scf_grad_thr; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps [] dmrg_sweep_max_sweeps; --> dmrg_noiseprefactors dmrg_noiseprefactors sweep_noise_prefac dmrg_noise_magnitude [] dmrg_sweep_noise_prefac; (none) dmrg_dvdson_rtol dmrg_dvdson_rtol sweep_dvdson_rtol dmrg_r_convergence [] dmrg_sweep_dvdson_rtol; --> dmrg_print_corr dmrg_print_corr print_corr dmrg_corr_print dmrg_print_corr (n/c); --> dmrg_chkpt dmrg_chkpt dmrg_mps_write dmrg_mps_write; --> dmrg_store_unit dmrg_store_unit dmrg_unitary_write dmrg_unitary_write; --> dmrg_do_diis dmrg_do_diis dmrg_diis dmrg_diis; --> dmrg_diis_branch dmrg_diis_branch scf_diis_thr dmrg_diis_start_convergence dmrg_scf_diis_thr; --> dmrg_store_diis dmrg_store_diis dmrg_diis_write dmrg_diis_write; dmrg_maxiter dmrg_max_iter dmrg_max_iter scf_max_iter dmrg_maxiter dmrg_scf_max_iter; --> dmrg_which_root dmrg_which_root excitation (offset-1) dmrg_follow_root dmrg_excitation; dmrg_avg_states dmrg_state_avg dmrg_state_avg scf_state_avg dmrg_avg_states dmrg_scf_state_avg; --> dmrg_active_space dmrg_activ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-228951911:231,plugin,plugins,231,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-228951911,1,['plugin'],['plugins']
Modifiability,"TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2156,variab,variable,2156,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,"Taking another look at this PR, the IncFock used here, uses a large number of matrix variables - separate matrices for the previous, current, and difference matrices for all of D, J, K, and wK. This particular IncFock formalism was replaced in the PR line of https://github.com/psi4/psi4/pull/2792, https://github.com/psi4/psi4/pull/2808, and https://github.com/psi4/psi4/pull/2816. So before this PR gets merged in, the IncFock formalism moved into the JK class in this PR needs to be updated to match.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1503230492:85,variab,variables,85,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1503230492,1,['variab'],['variables']
Modifiability,"Tests would definitely be good. I have a plugin that uses these integrals (and works), so I at least know nothing is broken. Actually, I wonder why we aren't computing the pseudospectral integrals with libint2 now. They're closely related to standard one electron potential integrals that we use in Psi4. . For semi-numerical exchange, I use the `PseudospectralInt` class to compute integrals of the form:; ```<m|1 /(r-r_p) |n>```; where `r_p` is a DFT grid point. This is identical to the nuclear integrals here:; https://github.com/evaleev/libint/wiki/using-modern-CPlusPlus-API#create-an-integral-engine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520:41,plugin,plugin,41,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520,1,['plugin'],['plugin']
Modifiability,"Thank @jturney !; However, `omp_get_thread_num()` always return 0 in this code when I call `timer_on()` from `forte` plugin. I don't understand why. Maybe because `forte` and psi4 are different libraries so that when psi4 is called by `forte`, it cannot figure out which thread it is on. Just my guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308605290:117,plugin,plugin,117,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308605290,1,['plugin'],['plugin']
Modifiability,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195957592:66,plugin,plugin,66,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592,4,['plugin'],['plugin']
Modifiability,"Thank you dgasmith. I've just seen that loriab fixed some plugins including the one I need (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so thank you very much again loriab. I will try this new version soon, when I have access to my office PC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195050556:58,plugin,plugins,58,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195050556,1,['plugin'],['plugins']
Modifiability,"Thank you for answer. ; ""Or are you generating a plugin from the conda binary?"". I am unsure about that but I bet no. I get the plug-in from https://github.com/psi4/psi4/tree/master/plugins/mointegrals , my psi4 version is packaged in the official Ubuntu repository (in a .deb file).; The command `psi4 --new-plugin myplugin +mointegrals` created the new directory. This is the new directory where I tried the `make` command without success.; For clarity it is the complete steps please see this PasteBin link http://pastebin.com/qMSc8yq4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194606794:49,plugin,plugin,49,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194606794,4,"['plug-in', 'plugin']","['plug-in', 'plugin', 'plugins']"
Modifiability,"Thank you for posting your very useful code snippets, Sebastian. Another plugin that may be useful is the MOIntegrals plugin that comes with Psi4. The command:. ```; ints.transform_tei(MOSpace::all, MOSpace::all, MOSpace::all, MOSpace::all);; ```. can be replaced with:. ```; ints.transform_tei(MOSpace::occ, MOSpace::occ, MOSpace::occ, MOSpace::occ);; ```. to generate only the occupied space integrals instead of the full set. By default the integral transformation object will neglect frozen orbitals. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105227460:73,plugin,plugin,73,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105227460,2,['plugin'],['plugin']
Modifiability,"Thank you for this PR! I greatly appreciate it!. The cleanup is quite nice, and pretty necessary honestly. Aside from a few small doc wording suggestions, my biggest thought is regarding coupling the regeneration of the reference matrices to construction of the full Fock matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3111#issuecomment-1863016457:187,coupling,coupling,187,https://psicode.org,https://github.com/psi4/psi4/pull/3111#issuecomment-1863016457,1,['coupling'],['coupling']
Modifiability,"Thank you very much for looking into this, @raimis - especially the detailed benchmarks. If my memories from way back (circa 2010) are correct, @robparrish and I were trying to write a prototype DF gradient code and hit a very strange error. The finite difference tests we did for hybrids all looked good, but for range-separated functionals we were getting quite large noise. The direct range-separated code worked fine, confirming that the derivative integrals were correct, and pointing the fact that we somehow messed up the chain rule in our haste. Since then Rob did a complete rewrite of the entire SCF machinery and made it infinitely better so, inspired by your detailed comments, I decided to revisit. This input. ```; memory 6Gb. molecule C4NH4 {; -1 1; C 0.00000000 0.00000000 2.13868804; N 0.00000000 0.00000000 4.42197911; C 0.00000000 0.00000000 -0.46134192; C -1.47758582 0.00000000 -2.82593059; C 1.47758582 0.00000000 -2.82593059; H -2.41269553 -1.74021190 -3.52915989; H -2.41269553 1.74021190 -3.52915989; H 2.41269553 1.74021190 -3.52915989; H 2.41269553 -1.74021190 -3.52915989; units bohr; }. set {; basis 6-31G; d_convergence 11; points 5; }. anl = gradient('scf', df_functional='wB97X-D', dertype=1); num = gradient('scf', df_functional='wB97X-D', dertype=0). anl.print_out(); num.print_out(); ```. Yields the following analytic/numerical grads for B3LYP:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 0.01448961501491; 2 0.00000000000000 0.00000000000000 0.00650495770571; 3 0.00000000000000 -0.00000000000000 -0.01465457276700; 4 -0.00257733094550 -0.00000000000000 -0.00299790291405; 5 0.00257733094550 0.00000000000000 -0.00299790291405; 6 -0.00015263631139 -0.00478910772840 -0.00008555938077; 7 -0.00015263631139 0.00478910772840 -0.00008555938077; 8 0.00015263631139 0.00478910772840 -0.00008555938077; 9 0.00015263631139 -0.00478910772840 -0.00008555938077. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351148891:584,rewrite,rewrite,584,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891,1,['rewrite'],['rewrite']
Modifiability,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40186517:106,config,configure,106,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517,1,['config'],['configure']
Modifiability,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:544,variab,variable,544,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145,5,['variab'],['variable']
Modifiability,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185833831:279,plugin,plugin,279,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831,3,['plugin'],['plugin']
Modifiability,"Thanks again @edeprince3. I now get this compilation error when trying to get the skeleton example plugin built:; ```; [ 75%] Build skeleton example plugin; Traceback (most recent call last):; File ""../../../stage/usr/local/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: dgeev; ```; Has anybody encountered this before?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355344822:99,plugin,plugin,99,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355344822,2,['plugin'],['plugin']
Modifiability,"Thanks all for the feedback. I'll split this one in three: i) Vector/Matrix polish ii) C++14 constructs for pybind11 iii) Actual xtensor stuff (CI doesn't seem very happy about those :weary:) . @fevangelista xtensor is used only in the test for the `doublet`. I initially intended to swap the storage in `Vector` and `Matrix` to use xtensor, but that turned out to be quite hard (due to the extensive use of `pointer` basically everywhere in the code) The strategy now is to rewrite the storage object (I think that's largely done, though copy CTORs, assignment etc are missing) and the symmetry-aware operations (multiplies, diagonalization, etc) unit testing them on the way. The latter will take a bit of time, but it's also something that more people can work on concurrently, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931:475,rewrite,rewrite,475,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931,1,['rewrite'],['rewrite']
Modifiability,"Thanks for all the tips with `-v`. I try to keep most of the complexity; inside the plugins, so normally psithon is fine. On Wed, Mar 15, 2017 at 7:40 PM, Daniel Smith <notifications@github.com>; wrote:. > You can always go around the ""psithon"" input. For example:; >; > mol = psi4.geometry(""""""; > He; > """""",; > name=""mol_name ~^*""); >; > Where ""mol"" is the actual Molecule object and its name is an arbitrary; > string. If you are doing complex things within Psi4 I would recommend not; > using the psithon API and use the straight python API. To help, you can run; > any input file through psi4 -v input.dat to see the psithon -> python; > conversion.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/650#issuecomment-286913919>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_q1BdQKzU8EJUn1qDBWQN3mJ_mDQks5rmHbXgaJpZM4MeWtv>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286957966:84,plugin,plugins,84,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286957966,1,['plugin'],['plugins']
Modifiability,"Thanks for helping with that, Lori. I think the CMake and libmints integration tasks are pretty well separated at this point. The stuff I added to external was mostly placeholder so please overwrite at will - you have write access to my branch. It looks like some upstream changes to the CMake config file naming scheme might be needed, so I just decided to build a standalone lib and worry about integration later - therefore you won't be interfering with anything if you feel like changing the CMake stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421:294,config,config,294,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421,1,['config'],['config']
Modifiability,"Thanks for looking into this! I now have a better understanding of the original error. . First, a note about the SCF restart technology: when you use the `wfn.to_file()` function in the first file, psi4 saves (1) the name of the basis set and (2) the matrix of orbital coefficients. The numbers contained in the orbital matrix aren't useful without knowing which basis they correspond to. In the second file, psi4 reconstructs the basis set using both the saved name and orbital coefficients. When a `basis` object is defined without a name, psi4 gives that object a [randomly generated name](https://github.com/psi4/psi4/blob/master/psi4/driver/inputparser.py#L273). This is a problem when you want to use the same `basis` object in a new file, since the same object defined in different files will receive different, random names. In the error you posted, the bit about `ANONYMOUS5AA41DFC` refers to the randomly generated name of the basis. Psi4 has no way of knowing what this basis set is. Your solution of using `basis this_basis { ... }` and `set basis this_basis` certainly works, but you actually don't even need the second line; all you need is `basis this_basis { ... }`. You asked about a more flexible syntax for reading SCF guesses. What about the current syntax is limiting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120579737:1206,flexible,flexible,1206,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120579737,1,['flexible'],['flexible']
Modifiability,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-345242566:143,plugin,plugin,143,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566,1,['plugin'],['plugin']
Modifiability,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:624,coupling,coupling,624,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462,2,['coupling'],['coupling']
Modifiability,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:170,plugin,plugin,170,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['plugin'],['plugin']
Modifiability,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:737,plugin,plugin,737,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071,1,['plugin'],['plugin']
Modifiability,"Thanks for testing!. The `No such TARGET` messages are nothing to worry about. I have it printing every language, but only the active/requested langs become part of `tgt::MathOpenMP`. Whoops on ambit. I must have been building with intel again. If you would, try adding https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L50 and https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L55 lines to https://github.com/psi4/psi4/blob/master/external/upstream/ambit/CMakeLists.txt . Unfortunately, the only way to test it running is to build the ambit template plugin. But just compiling is a start. For gpu_dfcc, I've built it with gcc54 and the rest of psi with gcc72. But there's no reason a pure gcc54 build shouldn't work. Fortunately, conda supplies both. I'm glad to tweak gpudfcc openmp if need be. I can only build, not run, so the setup may be lacking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712:615,plugin,plugin,615,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712,1,['plugin'],['plugin']
Modifiability,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:70,adapt,adapts,70,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058,1,['adapt'],['adapts']
Modifiability,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35465591:248,config,configure,248,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591,2,['config'],['configure']
Modifiability,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220698751:193,variab,variables,193,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751,1,['variab'],['variables']
Modifiability,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:97,plugin,plugin,97,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,4,"['adapt', 'plugin']","['adapt', 'plugin']"
Modifiability,"Thanks for the report. I have been warned about a numpy version issue on Mac. If you haven't already, do try a `conda install numpy=1.22` in your environment and try Psi4 again. I'd have to rebuild the Psiv 1.6.1 packages or rewrite their metadata to fix this at `conda create -n p4env psi4 -c psi4` -time. Hopefully, SciPy and Numpy will have reconciled before I get around to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661#issuecomment-1207143526:225,rewrite,rewrite,225,https://psicode.org,https://github.com/psi4/psi4/issues/2661#issuecomment-1207143526,1,['rewrite'],['rewrite']
Modifiability,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:663,plugin,plugins,663,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270,1,['plugin'],['plugins']
Modifiability,"Thanks for the report. The command for MP2 dipoles is `E, wfn = properties('mp2/6-311G**', properties=['dipole'],return_wfn=True)`. However it appears the global variable for the basis set is not set through this and the new fchk writer complains.; As a workaround you can do it like this:; ```; set basis 6-311G**; E, wfn = properties('mp2, properties=['dipole'] ,return_wfn=True); fchk(wfn, ""test4-dma.fchk""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177#issuecomment-837218726:162,variab,variable,162,https://psicode.org,https://github.com/psi4/psi4/issues/2177#issuecomment-837218726,1,['variab'],['variable']
Modifiability,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:653,flexible,flexible,653,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,2,['flexible'],['flexible']
Modifiability,Thanks for the review!. > Just want to check that the TODO in `ccdensity/Params.h` wasn't really intended for this PR. Confirmed. A refactor of the fundamental data structures used in the `ccdensity` module is outside the scope of this PR. This PR just _motivates_ such a refactor.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2514#issuecomment-1083215686:132,refactor,refactor,132,https://psicode.org,https://github.com/psi4/psi4/pull/2514#issuecomment-1083215686,2,['refactor'],['refactor']
Modifiability,"Thanks for trying out Psi4 and the Psi4/Cfour interface, @tobirolinew. I can probably fix your immediate problem, but please read on. :-). There's three ways of running a Cfour calc through a more flexible front-end right now:; * QCEngine (already present in a Psi4 installation. takes a dictionary as input. geometry must be in Cartesians.); * QCDB (extra install. depends on QCEngine. inputs look much like Psi4/Cfour only `psi4.` becomes `qcdb.`. can use Z-Matrices.); * Psi4/Cfour (the first in time of these three. what you're trying now.). I'm trying to deprecate this last one in favor of the better maintained first ones. Your job would look something like the below through QCEngine (code below not tested). ```; import psi4; import qcengine as qcng. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; """"""). atomicinput = {; ""driver"": ""energy"",; ""molecule"": h2o.to_schema(dtype=2),; ""model"": {; ""method"": ""ccsd(t)"",; ""basis"": ""aug-pvqz"",; },; ""keywords"": {; ""SCF_CONV"": 12,; ""CC_CONV"": 12,; },; }. atomicresult = qcng.compute(atomicinput, ""cfour""). import pprint; pprint.pprint(atomic_result.dict()); ```. What types of calcs are you ultimately looking to run? How would you like to proceed: the QCEngine or Psi4/Cfour route? Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883:197,flexible,flexible,197,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883,1,['flexible'],['flexible']
Modifiability,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227#issuecomment-175470082:548,plugin,plugin,548,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082,1,['plugin'],['plugin']
Modifiability,"Thanks for your reply! I was just using`cmake` with no options. Using `psi4 --plugin-compile` I can build my plugin now. However in previous versions, just` cmake .` used to work as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775#issuecomment-320454022:78,plugin,plugin-compile,78,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320454022,2,['plugin'],"['plugin', 'plugin-compile']"
Modifiability,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:595,variab,variables,595,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759,1,['variab'],['variables']
Modifiability,"Thanks so much for the quick response, @philipmnel! This does indeed make the install work; however, `psi4` does not work, appearantly due to issues with pydantic v1 vs v2. Is there a fix for this? Does psi4 v1.8 support pydantic v2?. ```sh; ~ ❯ conda activate psi4-2  base; ~ ❯ psi4 --version  psi4-2; Valid config keys have changed in V2:; * 'allow_mutation' has been removed; Traceback (most recent call last):; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:311,config,config,311,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880,1,['config'],['config']
Modifiability,"Thanks very much -- I wouldn't have found that soon. I believe the variables are set up now. Rebuilding still not happy.; <img width=""1408"" alt=""screen shot 2019-02-15 at 1 23 41 pm"" src=""https://user-images.githubusercontent.com/2314730/52876417-2a9d1780-3125-11e9-84e7-71d1c651459f.png"">; <img width=""1134"" alt=""screen shot 2019-02-15 at 1 24 39 pm"" src=""https://user-images.githubusercontent.com/2314730/52876429-3092f880-3125-11e9-8a05-6a6aff25ab6d.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464151463:67,variab,variables,67,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464151463,1,['variab'],['variables']
Modifiability,"Thanks! It looks like naming the basis (`basis this_basis { ... }`) and then using `set basis this_basis` also works. That being said, I don't I understand why this would be an issue. The way I have requested the basis set is not unusual. Although I'm using the syntax for a mixed/custom basis set, it's the first example presented on that page of the documentation. It's also a valid way to request a basis set - the first job worked after all. The documentation says that `basis { assign ... }` statements can be used to request a basis set and replace `set basis X`. It looks like mixed basis sets also work... as long as you use `basis this_basis { ... }` and `set basis this_basis`. I've used that syntax to apply def2-SVP to C and O, and STO-3G to H, and then restarted the SCF successfully. . Is there another syntax for reading an SCF guess that is more flexible? For the application I have in mind, I'd be using it for gradients rather than single-point energies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120488692:862,flexible,flexible,862,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120488692,1,['flexible'],['flexible']
Modifiability,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297866382:247,plugin,plugins,247,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382,1,['plugin'],['plugins']
Modifiability,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344708105:89,plugin,plugins,89,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105,2,['plugin'],['plugins']
Modifiability,"Thanks, I indeed forgot to change this variable, I just changed the one for the cluster and not for psi4... I've set it to 16GB now. But the problem persists. It is indeed certainly related to memory. For such a large CAS do you have any idea of the amount of memory required ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660352855:39,variab,variable,39,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660352855,1,['variab'],['variable']
Modifiability,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316433585:153,Config,Configuring,153,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585,2,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:207,plugin,plugins,207,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286,1,['plugin'],['plugins']
Modifiability,"Thanks. It honestly _isn't_ my intention to scupper all your PRs, @ryanmrichard. It's just that the `mkl_rt.so` or nothing approach doesn't work with the binary build (and that libefp ref is very far behind). I've been working on a replacement scheme that gets the valuable mkl_rt for most and works with libefp and CheMPS2, too. If you wanted to do a separate or modified PR with all the plugin stuff, that'd be great. Also, it looks like the pybind 2.0 commit is still caught in this PR, so may need a rebase. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563#issuecomment-274517219:389,plugin,plugin,389,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274517219,1,['plugin'],['plugin']
Modifiability,"Thanks. The detci module is undergoing C++ modernization and the addition of many new features. Your issue https://github.com/psi4/psi4public/issues/92 for instance is fixed in the rewrite. Detci's file management is getting re-aligned with Psi4's too. We'll definitely check that your problem isn't present in the new version (the elimination of global (to detci) variables helps for these multiple invokation cases). And if @CDSherrill confirms that the OPDM and `rsp` don't mix, will add to docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-137552779:181,rewrite,rewrite,181,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-137552779,2,"['rewrite', 'variab']","['rewrite', 'variables']"
Modifiability,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258681166:65,plugin,plugin,65,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166,2,['plugin'],['plugin']
Modifiability,"That sounds about right, @kannon92, plugins haven't made the CMR-KTB-INV leap. The writing thereof will be converted to py-side, and the building thereof will be converted to CMake. But neither done yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254675379:36,plugin,plugins,36,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254675379,1,['plugin'],['plugins']
Modifiability,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:730,extend,extend,730,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['extend'],['extend']
Modifiability,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:1100,config,configurations,1100,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936,1,['config'],['configurations']
Modifiability,"That would be an improvement? I'd need to look at `libdisp` to see if we can remove it more aggressively, but I know for sure that taking it out of `dfmp2` is a fairly simple refactor. And of course, I can rearrange `dct`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870588844:175,refactor,refactor,175,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870588844,1,['refactor'],['refactor']
Modifiability,"That's a good idea, @mbanck, but I think it could be quite a lot of work. We only use Travis to run quick tests on each new PR (which will all use the new CMake infrastructure). Older builds can be tested more extensively on a separate nightly build server, which can be configured to build with higher angular momentum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232783460:271,config,configured,271,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783460,1,['config'],['configured']
Modifiability,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-130121457:76,plugin,plugin,76,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:294,adapt,adapted,294,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,1,['adapt'],['adapted']
Modifiability,"That's just our finicky travis config. It builds and passes all tests, then segfaults sometimes. Just request a restart on GH or slack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-417521002:31,config,config,31,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-417521002,1,['config'],['config']
Modifiability,"That's much clearer, thank you. The syntax seems good to me, but I vote for single access / multi storage. That prevents the syntax from getting unwieldy if we decide we need variables of types other than float and array. My main reason is that having different accessors feels like a clunky interface to me, especially for PsiAPI. Variable getting in PsiAPI should treat types like Python does, not C++.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485:175,variab,variables,175,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485,2,"['Variab', 'variab']","['Variable', 'variables']"
Modifiability,"That's using `cmake` beyond my experience, as I blow away the objdir if changing cmake variables. @robertodr will have to comment if what you describe is intended behavior. Dial down angular momentum to 4 if you're rebuilding a lot. My thanks to whoever, years ago, fixed the parallel integrals build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130123186:87,variab,variables,87,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130123186,1,['variab'],['variables']
Modifiability,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288525890:10,variab,variables,10,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890,1,['variab'],['variables']
Modifiability,"The DGEMM-killing Boost is a Continuum/default channel conda package 1.57 that had been serving me well for months. It can be found in the lib subdir of the metapackage-dir in the setup line below. (metapackage-dir specifies location of python, boost, chemps2, pcmsolver, zlib, hdf5, gsl.). ```; ../setup --cc icc --cxx icpc --fc ifort --type release --plugins on --prefix $INSTALL --max-am-eri 5 --metapackage-dir /theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv --cmake /theoryfs2/ds/cdsgroup/miniconda/bin/cmake -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv #-DENABLE_XHOST=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-199547946:353,plugin,plugins,353,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199547946,1,['plugin'],['plugins']
Modifiability,"The DHDF analytic gradients are not implemented and thus the relaxed density is not readily available.; A scaled MP2 density from kohn-sham orbitals could perhaps be constructed through `psi4numpy` means, as an approximation. The contributions from the additional xc-coupling terms arising in DHDF gradient theory should be very small.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1236#issuecomment-420568298:267,coupling,coupling,267,https://psicode.org,https://github.com/psi4/psi4/issues/1236#issuecomment-420568298,1,['coupling'],['coupling']
Modifiability,"The DSYEV problems might be due to the machine generated code in libxc returning NaNs. I still think it would be a good idea to clean these up within Psi4 if they arise, since not all functionals are well-behaving and ""fixing"" the functional amounts to using larger density / gradient thresholds. The B5050LYP issue boggles me. I did rewrite the routine to accept external parameters in October, but as far as I can see the resulting definition is exactly the same as before. The underlying functionals may have been regenerated, but that also should not affect anything. Could this be just an issue within Psi4, e.g. changes in the density-fitting routines or the fitting basis? One could just run the calculations with conventional integrals, since (h2o)2 is still small.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298:334,rewrite,rewrite,334,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298,1,['rewrite'],['rewrite']
Modifiability,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282102859:497,adapt,adapted,497,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859,1,['adapt'],['adapted']
Modifiability,"The Mac Eco error is probably a fluke -- I don't see any recent changes to dftd4-python. What do you think of defaulting this to OFF for the protection of plugins? I don't quite understand how they're behaving now with this. See below that it's warning but not erroring. I do think the cmake is slightly in error in that i'm not setting CXX_EXTENSIONS=OFF in the inner psi4/CMakeLists.txt. ```; 2024-03-25T14:45:09.8381208Z [67/68] Building Fortran object CMakeFiles/v2rdm_casscf.dir/focas_interface.F90.o; 2024-03-25T14:45:09.8382362Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:274:53:; 2024-03-25T14:45:09.8383299Z ; 2024-03-25T14:45:09.8383512Z 274 | max_dim = max(size(integrals_1,dim=1),nnz_d1,maxval(nnz_int)); 2024-03-25T14:45:09.8383966Z | 1; 2024-03-25T14:45:09.8384366Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8385389Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:161:46:; 2024-03-25T14:45:09.8386144Z ; 2024-03-25T14:45:09.8386330Z 161 | max_dim = max(size(integrals_1,dim=1),maxval(nnz_int)); 2024-03-25T14:45:09.8386747Z | 1; 2024-03-25T14:45:09.8387135Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8387546Z [68/68] Linking CXX shared module v2rdm_casscf.so; 2024-03-25T14:45:09.8404861Z [17/19] Performing install step for 'v2rdm_casscf_external'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447:155,plugin,plugins,155,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447,1,['plugin'],['plugins']
Modifiability,"The OpenMP configuration for Linux looks convoluted and fragile. So for Windows, I just made conditional branch, not to break something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348#issuecomment-437586788:11,config,configuration,11,https://psicode.org,https://github.com/psi4/psi4/pull/1348#issuecomment-437586788,1,['config'],['configuration']
Modifiability,"The PR also implements damping for UKS, because UKS should inherit the UHF damp_update() method.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-227951470:59,inherit,inherit,59,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-227951470,1,['inherit'],['inherit']
Modifiability,The [qcschema test](https://github.com/psi4/psi4/blob/master/tests/pytests/test_psi4_qcschema.py) should probably be extended to check for this functionality.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-790250152:117,extend,extended,117,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-790250152,1,['extend'],['extended']
Modifiability,"The `__END_NAMESPACE_STD` errors were caused by the presence of an intel compiler whose variables were sourced in Josja's `~/.bashrc` file. (So, if the recipe above does not work for you, try from scratch with a virgin `~/.bashrc`.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-438674406:88,variab,variables,88,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-438674406,1,['variab'],['variables']
Modifiability,"The `frequency()` call is already checked in `cbs-xtpl-freq` with `dertype=1`; the handling was just moved from driver to cbs_driver in this PR. For the `properties()`, I think it'd be easier to extend one of the `props[1-4]` tests; I've extended the `props4` call to compare the already-computed V-values from SCF with global cc-pVDZ basis with ones from an explicit SCF/cc-pVDZ calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379855166:195,extend,extend,195,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379855166,2,['extend'],"['extend', 'extended']"
Modifiability,"The actual error is somewhere in the ellipses, so we will need more info. The fact that make is reporting that the error occurred in `src/lib/libpsipcm` suggests to me that it may be a problem with finding the PCM repo on GitHub, but I need more info to be sure. Can you run:. ```; export VERBOSE=1; ```. (in Bash) or:. ```; setenv VERBOSE 1; ```. (in TCSH)? ; Rerun the build command and then post the full output here. If you are curious, `VERBOSE` is the environment variable that tells CMake to spit out more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183#issuecomment-144069231:470,variab,variable,470,https://psicode.org,https://github.com/psi4/psi4/issues/183#issuecomment-144069231,1,['variab'],['variable']
Modifiability,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:332,config,configuration,332,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073,1,['config'],['configuration']
Modifiability,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:1020,plugin,plugin,1020,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,1,['plugin'],['plugin']
Modifiability,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232996171:748,refactor,refactoring,748,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171,2,"['adapt', 'refactor']","['adapted', 'refactoring']"
Modifiability,"The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand _why_ the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520:261,variab,variables,261,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520,1,['variab'],['variables']
Modifiability,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:56,extend,extended,56,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,1,['extend'],['extended']
Modifiability,"The default scratch directory is `/tmp/`, which is often limited in size (few Gib) and large calculation will crash because the ""disk is full"". Set either the env variable `PSI_SCRATCH` or use the python command `psi4.core.IOManager.shared_object().set_default_path('/path/')` and specify, in the best case, a local disk on the HPC node.; Slow network directories can stall I/O and also crash calculations. Unclear how much you will need in terms of size, I am not familiar with the implementation details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661110834:163,variab,variable,163,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661110834,1,['variab'],['variable']
Modifiability,"The diffs come up clean for every section of variable printing in OCEPA, CEPA, OMP2, OMP3, OMP2.5, MP3, MP2.5, MP2... Numbers vary, unsurprisingly. There's no printing difference depending on closed vs open-shell except for ROHF-MP2. I can't find an ROHF-MP2 test anywhere, so I compared a UHF-MP2 and an ROHF-MP2 calculation. After fixing one silly mistake (see last commit), the diff was exactly what I expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766:45,variab,variable,45,https://psicode.org,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766,1,['variab'],['variable']
Modifiability,The dispersion refactoring apparently changes the way I need to turn of VV10 from libxc. Will need to track down the changes to make it work again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-434339694:15,refactor,refactoring,15,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-434339694,1,['refactor'],['refactoring']
Modifiability,"The easy thing to do is what we do [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L319) and create an integral computer for each thread in [the offending function](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/potentialint.h#L66-L195). We could get some very easy speed up this way, but it's not perfect. For better scalability, we need to do exactly what you suggest: rewrite the OS recursion code (which is quite ugly, old code that we inherited) and also make sure that the integral object has buffers for each thread, so that we don't have to duplicate them. If you want to pursue that, I think you'll find there's a lot of performance to be gained and I think you're very well suited to the task, given your recent foray into DFT threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355:422,rewrite,rewrite,422,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355,2,"['inherit', 'rewrite']","['inherited', 'rewrite']"
Modifiability,"The first two we've got the the inner `psi4-core` project (psi4 itself). The third I tried to get some opinions on (copied below for general interest). The compiler checks at least give a warning people understand better than C++ standards and do it before all the addons (which often don't require c++11) get built. _And_ for the crazy Intel/gnu situation, it's a nice place to check the underlying compiler version. So I'm all for solving the EXTENSIONS warnings and for revamping when we decide to require cmake 3.6. How do we feel about -std=c++11 vs. -std=gnu++11 via [CXX_EXTENSION](https://cmake.org/cmake/help/v3.4/prop_tgt/CXX_EXTENSIONS.html)?; I can fix the `icpc: command line warning #10121: overriding '-std=c++11' with '-std=gnu++11’` by (a) turning that cmake variable off (its default is on); (b) when omp is enabled, have our cmake add the gnu++ instead of the c++ flag; or (c) suppressing that icpc warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281120816:776,variab,variable,776,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281120816,1,['variab'],['variable']
Modifiability,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281118096:230,Config,Configuration,230,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096,1,['Config'],['Configuration']
Modifiability,"The functions weren't exposed to plugins or Python, so the only downstreams we could possibly break are using locally modified Psi. I'm not worried about them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511:33,plugin,plugins,33,https://psicode.org,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511,1,['plugin'],['plugins']
Modifiability,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254947891:12,rewrite,rewrite,12,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891,1,['rewrite'],['rewrite']
Modifiability,"The issue has been reported to the MRCC forum. It is broken even with Molpro 2022.; Perhaps it would be more maintainable to teach QCEngine how to run standalone MRCC calculations, rather than trying to pass SCF wavefunctions via a fragile interface that keeps being broken?. PS: [MRCC forum topic](https://www.mrcc.hu/index.php/forum/running-mrcc/287-molpro-w-mrcc-keywd-errror)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283:109,maintainab,maintainable,109,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283,1,['maintainab'],['maintainable']
Modifiability,The libmints stuff should be easy to resolve. Maybe we can look to move the create plugin code to Python.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235353986:83,plugin,plugin,83,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235353986,1,['plugin'],['plugin']
Modifiability,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-17312112:385,adapt,adapted,385,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112,1,['adapt'],['adapted']
Modifiability,"The not recognizing template brackets is a language feature, not part of; the library like the tuple. I bet if you print the compile command the; flag Andy told you to add is missing. Assuming that is the case, the; million dollar question is why? I have guesses from insight learned in the; CMake rewrite. Assuming it is one of those guesses, the problem should go; away with the rewrite. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 15, 2016 12:14 AM, ""Andy Simmonett"" notifications@github.com wrote:. > How about adding -std=c++11 to the --extra-cxx-flags argument to setup; > (or -DEXTRA_CXX_FLAGS if you're calling CMake directly)?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/444#issuecomment-232855963, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiztFqbgAKeEx-gdWJsatSyH76QzWks5qVwkfgaJpZM4JL6Xl; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232946325:298,rewrite,rewrite,298,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232946325,2,['rewrite'],['rewrite']
Modifiability,"The numbers printed by the sointegral plugin are not the symmetry blocked; indices but the absolute indices (non-symmetry blocked). The order of the; absolute indices come directly from the basis set. For your input file the; the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; A1 (1s on carbon), so by symmetry this integral does not exist. The; transformation matrix for obtaining symmetry blocked integrals is obtained; with:. // prints the transformation matrix.; soBasis->petite_list()->sotoao()->print();. What you probably want to look into is printing the {p,q,r,s}irrep and; {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; post-symmetry-blocking-transformation. You're right, the difference between absolute and symmetry blocked indices; could be better explained. With respect to two-electron integrals, Psi; never reports integrals of value zero to prevent wasting CPU cycles, again; this could be made clearer. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com wrote:. > OK, found it. The overlap is zero for those orbitals.; > ; > But I was under the impression that sointegrals gave me all unique; > integrals because of symmetry, including those that are zero due to the; > overlap. This should be made clearer in the docs.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68#issuecomment-73899555:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73899555,2,['plugin'],['plugin']
Modifiability,The original issue is still valid. Translating the instructions given in the documentation (https://psicode.org/psi4manual/master/build_planning.html#how-to-configure-code-to-use-high-angular-momentum-basis-sets) into a series of commands that actually work is not trivial. (The comments made JosjaVanBever were due to a local misconfiguration of his system and are not related.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-869392246:157,config,configure-code-to-use-high-angular-momentum-basis-sets,157,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-869392246,1,['config'],['configure-code-to-use-high-angular-momentum-basis-sets']
Modifiability,"The overhead from density fitting can actually become detrimental for extended systems, especially for the exchange part.; (Newer DF algorithms improve here, but some also introduce larger errors). Direct conventional integrals or RI-J plus exact exchange work well extended systems. COSX is okay screening wise, too, and also coming to PSI4. Direct conventional integrals in PSI4; ```; scf_type direct; df_scf_guess false; ```. Our direct SCF is not the fastest (improvements also coming here) and `ints_tolerance 1e-12` and `d_convergence 1e-6` are also both conservative and can be tweaked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913:70,extend,extended,70,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913,2,['extend'],['extended']
Modifiability,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249122702:252,config,configuration,252,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702,2,['config'],"['configuration', 'configure']"
Modifiability,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:570,Config,ConfigMath,570,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,4,['Config'],['ConfigMath']
Modifiability,"The question is not whether Psi4's current machinery adequate or not. It's about the sensible default. If I put out a `$TMPDIR` variable, I expect programs to obey it. Most Unix/Linux programs will do so, it's even part of the Unix specification. There is no reason why Psi4 should do something different.; Heck, with all the recent evolutions in the Linux world (systemd), it's even mandatory. Per user containers and ditto `/tmp` are coming to the HPC world. ; I really see no reason why there should be hardcoded default for this. I also disagree with your C++11 sentiment. I think this is an excellent example why C++11 is long overdue. If something as trivial as fetching a environment variable is not guaranteed thread safe...; There are now more than enough compilers that support it: Clang since 3.4, GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the largest part of C++14. If you are using old compilers for calculations, you're wasting computational time and money IMHO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105040869:128,variab,variable,128,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105040869,2,['variab'],['variable']
Modifiability,The remaining problem would be that `H` is recalculated manually by directly calling [so_potential](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1261) that only knows about DKH and not X2C. ; That means X2C is only included in the SCF energy and not in the Fock matrix in DF/CD-(FNO)-CC.; X2C did not crash the calculation. Either `H` is taken from the SCF wavefunction object like done elsewhere (e.g in [dfocc](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/get_moinfo.cc#L367) or the X2C potential needs to be added somehow. Direct use of `so_potential` is done here (as far as I could find):; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/frozen_natural_orbitals.cc#L1039; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714. The other occurrence I found is in the SCF template: https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/scf/scf.cc.template,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788:929,plugin,plugin,929,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788,1,['plugin'],['plugin']
Modifiability,"The short answer is that there's not a built-in way to do this. However, it shouldn't be too hard to backtransform the TPDM for some small case. The default backtransform in plugins/backtrans/ is not smart enough to know about the CI ordering of the MO's, so it won't work as-is. Perhaps if someone on the team has a little time on their hands they might look into this more. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/67#issuecomment-122116635:174,plugin,plugins,174,https://psicode.org,https://github.com/psi4/psi4/issues/67#issuecomment-122116635,1,['plugin'],['plugins']
Modifiability,"The two installs are https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L354-L355 and https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L315-L316 . The former copies the quadrature files into `<objdir>/stage/share/` and the latter copies the whole `<objdir>/stage/` into `CMAKE_INSTALL_PREFIX`. From the `find` output you posted and an earlier issue, I think your CMake build setup or the FreeBSD layout is doing something unexpected at the install. Short of understanding where that's happening, adapting your recipe to remove the extra dirs may be your best bet. ```; >>> objdir_py310_gcc: (sdftd3) find . -name ""1_xk01_1E1""; ./stage/share/psi4/quadratures/1_x/1_xk01_1E1; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085:513,adapt,adapting,513,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085,1,['adapt'],['adapting']
Modifiability,There are still some issues with option handling in the plugin itself that we're working on. I just wanted to get this PR in today with the hopes it could be accepted for 1.2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-385835525:56,plugin,plugin,56,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-385835525,1,['plugin'],['plugin']
Modifiability,There is now a note in the [docs](http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-blas-lapack-for-building-psi4) suggesting to use openBLAS or the like over ATLAS due to the above issues. Not sure there is anything else for us to do here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-301264467:98,config,configure-blas-lapack-for-building-,98,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-301264467,1,['config'],['configure-blas-lapack-for-building-']
Modifiability,There should not be any issue with this. We can just tar up an install and make sure to tell people to set PSIDATADIR/PSI4DATADIR to the correct location. Macs in the wild have a standard set of libraries. At one point I was working on getting Psi4 to automatically determine the value of PSIDATADIR based on the location of the psi4 binary but I can't seem to find it in the code. Maybe we should get someone to work on it and then we don't need to require end users to set this variable if we just distribute binaries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/49#issuecomment-37945473:480,variab,variable,480,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-37945473,1,['variab'],['variable']
Modifiability,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:134,adapt,adaptation,134,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941,2,['adapt'],['adaptation']
Modifiability,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:635,Config,Configuring,635,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491,1,['Config'],['Configuring']
Modifiability,"There's currently a build documentation rewrite underway (to reflect the; cmake build system). I suspect that a section on using Psi4 with Easybuild; could be added as well, particularly since it sounds like no code work on; our end. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 11:34 AM, ""wpoely86"" notifications@github.com wrote:. > No, Easybuild has support for Psi4. Maybe mentioning it in the; > documentation would be nice? Next to the manual install?; > ; > The point I'm trying to make here is that users should use (or tell their; > sysadmins to) a module system. It's no problem than to use old and new; > compilers and to support C++11/14/17.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105252795.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105262783:40,rewrite,rewrite,40,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105262783,1,['rewrite'],['rewrite']
Modifiability,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:735,plugin,plugins,735,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,1,['plugin'],['plugins']
Modifiability,"These flags are set by the compiler packages, I think. They are to enable building your own conda packages IIRC.; But I also had cases where I wasn't aware of this and it severely messed up compilation of some unrelated programs that use plain Makefiles. I think cmake will largely ignore those flags for psi4. There are (de)activate scripts in `/env/<name>/etc/conda/(de)activate.d` responsible for setting these env. variables.; Not sure there are flags that turn them off, the last resort is to remove them. FWIW, building psi4 is also simple without the `psi4-dev` package. It's advantage is that it ensures compatible compilers, tooling and a couple of cmake flags. If you are knowledgable you can set them yourself. To compile against conda-provided mkl, libint2, etc the `psi4-dev` is not needed. The normal `psi4` package is enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684:419,variab,variables,419,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684,1,['variab'],['variables']
Modifiability,"Thirding the enthusiasm for this. A couple notes:; * As discussed on conference call, `scfgrad` is just fine on its own and shouldn't be affected by the gradient refactoring elsewhere; * Let me know if you continue investigating noise in the FD. I have a lot of experience testing that code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502144293:162,refactor,refactoring,162,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502144293,1,['refactor'],['refactoring']
Modifiability,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:53,refactor,refactoring,53,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877,1,['refactor'],['refactoring']
Modifiability,"This PR will have a merge conflict with my #2247. I wasn't comfortable touching the SCF code this close to 1.4 _then_, and I'm still not comfortable with it now. My vote is to keep this as a 1.5 target. I would prefer a dedicated option or keyword argument to `energy` for the short-circuit. Yes, this is a _reasonable_ behavior, but:. 1. Explicit is better than implicit.; 2. The SCF code is too complicated as-it-is due to overloading of the meaning of the `iterations_` variable. It was reasonable in one or two places, but becomes a mess as different parts of the code use it slightly differently. I'm paranoid of variable overloading, and having a special case of `maxiter = 0` is too close to that for comfort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352:473,variab,variable,473,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352,2,['variab'],['variable']
Modifiability,"This has another annoying consequence, noted on a [forum topic](http://forum.psicode.org/t/problems-with-geometry-convergence-in-dihedral-scan/1808). When attempting the basis guess, it will attempt to read previous orbitals but not find them. The following appears in the output file.; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```; The use of core may be a very terrible choice indeed, which caused the issues in the forum topic. Here's a simplified example:; ```; molecule phenol {; 0 1; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. set {; basis cc-pvdz; }. set scf {; basis_guess true; maxiter 300 ; fail_on_maxiter false; }. dihedrals = [i for i in range(0,185, 5)] ; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking geom_maxiter = 250 ; set opking opt_coordinates = cartesian; set optking fixed_dihedral = $my_string; print(phi); try:; E = optimize('scf'); print(E); PES.append((phi, E)) ; except SCFConvergenceError:; continue ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732:382,config,configured,382,https://psicode.org,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732,1,['config'],['configured']
Modifiability,"This is great. All of my plugin compilation stuff is working now with the latest conda release, so I'm going to close this. Thanks for all the hard work!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-176947331:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-176947331,1,['plugin'],['plugin']
Modifiability,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:814,adapt,adapted,814,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['adapt'],['adapted']
Modifiability,This is ready to be merged and after the pipeline has to be configured: https://dev.azure.com/psi4/psi4/_build,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368#issuecomment-441602062:60,config,configured,60,https://psicode.org,https://github.com/psi4/psi4/pull/1368#issuecomment-441602062,1,['config'],['configured']
Modifiability,"This is the variable to vary? https://github.com/ddsolvation/ddX/blob/main/tests/matrix_derivatives.f90#L129. I'm having problems getting an editable pyddx build working with psi, so I'm inclined to merge this as-is. This PR against c-f 0.4.1 is clean against psi4 current master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695:12,variab,variable,12,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695,1,['variab'],['variable']
Modifiability,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20548249:430,plugin,plugins,430,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249,1,['plugin'],['plugins']
Modifiability,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:542,plugin,plugins,542,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317,1,['plugin'],['plugins']
Modifiability,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:116,variab,variable,116,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661,2,['variab'],['variable']
Modifiability,"This looks great. It's good to have the large monolithic chunks of driver code split into smaller parts, printing functions tucked away and not scattered across calculations. Counterpoise-corrected CBS is something I wanted to do for a while!. One point I'd like to make quite early in this PR: the whole pydantic validation mechanism is rather obscure. I understand that each `Computer` inherits from the base class, but I am not 100% sure how things fit together and launching what will get me where. The two tests are currently only of little help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-437622451:388,inherit,inherits,388,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-437622451,1,['inherit'],['inherits']
Modifiability,This may have been me. I am in the process of updating the variable types for the irreducible representations. The change in #780 passed all the tests but looks like we missed this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786#issuecomment-323517419:59,variab,variable,59,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323517419,1,['variab'],['variable']
Modifiability,This pull request **fixes 1 alert** when merging 14f8917fd7f7086609f5b3f16c096fdba1558e18 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7ce9ad1516a72c19bd8c9f3dccdc4c10d2f2880f). **fixed alerts:**. * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-552686361:272,Variab,Variable,272,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-552686361,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 1 alert** when merging 4ceb1dad366138ee31cd7e3cfbcda9d385cc1ad7 into ccd3033072fbb113ab72d073e42948f2b57ab157 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-91582455a25ce78977159664203c6cce127d1ae2). **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111#issuecomment-777691236:285,variab,variable,285,https://psicode.org,https://github.com/psi4/psi4/pull/2111#issuecomment-777691236,1,['variab'],['variable']
Modifiability,This pull request **fixes 1 alert** when merging fa0a259cc408f2b473d2078ccbca856bc1f6af97 into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a1a7e445016a2966513d5d5982975bad6e664678). **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-811784769:285,variab,variable,285,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-811784769,1,['variab'],['variable']
Modifiability,This pull request **fixes 2 alerts** when merging 0c7c1fac7addb707ee4a5377b4569d72c5433145 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c4636a47f18e76e7507c38b881d971f59e32bc32). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-553844970:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-553844970,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 2 alerts** when merging 57c132298328a72eef35634a996cdb391c51b350 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-804b02d86e041886a0308dcd78db933e7b298ff7). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-554131598:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-554131598,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 2 alerts** when merging c65585fee126e64677a15c3a38c26550dec7292e into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-343491ae750ff9b0b0ef14efed537510da6a064c). **fixed alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949#issuecomment-656733658:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1949#issuecomment-656733658,1,['variab'],['variable']
Modifiability,This pull request **fixes 2 alerts** when merging dd11d065a8e546d329885b6d196becbb2595e491 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a50b6a440403124d5c5a57a263ce623facece106). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-554441584:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-554441584,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 2 alerts** when merging ec0f3fd9697bbafd42b2b8ef50b33fd1ffb816eb into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af1e537e49679515080ad072a7355de53c587cd1). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-554630526:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-554630526,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 051af5c7b7a04c85e918d1bab780e0e1be8b8427 into 966d1bd4ed698b2a92f19244a9dc3cf0589ffaa4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f96fa45ea0b772b7a326b82d0e03a5e54e35892a). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-833310946:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-833310946,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 1a33c699a94b219ac1f78677ff7c7d1d2ae9633a into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f3dd5c800cedc9857a22d2e053adf844947bfde2). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-843700280:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-843700280,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 1e663e4405d0ee6e817ea04c19e27ebdefe5f06f into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-bd0002e1530fab34586f933b3c3700ccd8646470). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-808696898:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-808696898,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 446c9cda06c5b10c35de59720f1668093869e65e into d9d8477034143442930324f572b94359866facfe - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-22e72078e2905a1856f7a0201ceb63f627f89bf8). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-840026837:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-840026837,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 5c8449111d5395b7681bdf87e854fe4fe08c4632 into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8e369df073a3f0d6460b21134d06f46209346a56). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-843818784:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-843818784,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 6e22cbaa74043ff09b0f8f4021c564ba6176205c into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-449dabd78dc596e8015ffaa2cd3f8d9f92ce9ee1). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-844793571:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-844793571,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 70cbf92b6086317a9bc1b27addb35dc01e013aeb into d9d8477034143442930324f572b94359866facfe - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-18a2331a53e059d4efb3d8e5771d1a81cb9cf842). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-840626641:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-840626641,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 79d458251b577a631127908d61425763699a9a2e into 59d998d3009553deb6db1981258cb6cba738ef03 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b3848b1769ade689d2094b8b4262e0caeb908599). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-808092025:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-808092025,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 97583a2fe157ac72e92ca1da2516987a835dc80d into d9d8477034143442930324f572b94359866facfe - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-863fee0b4deeeadc1f46d7853d0b5f1c927a10f7). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-839930313:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-839930313,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging aa52f722e36f304750019757639204d0cb98da0a into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-75cba35cdb7174276f3d428cb5ca1f16d25c0140). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-844455243:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-844455243,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging d1fdb12e1be807d87963825d4f4b4b0297732689 into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-1018b07a742c71c8b1b0466674ffc29f35f097fe). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-845548975:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-845548975,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging f1483ae96341a60d4427b16c6642b889aa841b8c into b4a272f74b73df8cf0edc4096081a250c495d55e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-887d4808c201ef9676ddb743953f6cb317b6f602). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-835513611:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-835513611,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 0ef7299dbeb1df436942434fc1a7410e7de1aa9b into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-38e66840c1a14b4f9cf960945cc7ce4d28b8e36c). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-600390806:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-600390806,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 16b8eee6e73e047222ca1f72552a3decb7a440d4 into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c001c1b601b28c10f5d50bb7c7219af804572bd4). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-612656089:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-612656089,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 36bb8de592ebf59f111f71ec04d06c3ed8a637ed into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9b2357882c5dced37991df9ddc57ba7371b38743). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-632336456:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-632336456,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 42ee16830479f5bce0088efea93e053816fe2dee into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-03162bd6f15fc285eb50ea38e0a73ecdc8426b5b). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-599174263:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-599174263,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 6f7418559659b04073f96db593285d84f38eaceb into ea89228d15e136b9f53f715bc1c68ce6af7cdaf0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-aa972eb7c7ac05dd263020d65dc050c19fbd5145). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-634260559:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-634260559,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 986ee14fa09da4640dba114297992ef5950f83f4 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-40494d669d4a6a920a495ff49494a878aa48907f). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-632027218:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-632027218,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging bb6048a7245774247e865986c2b66c1bb20ab0ab into 8fd25f21722fddc8dd2e581bc16b464f85a9bd51 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e06bd6afcbc71e36203aa520bc6c4a13f8c6b368). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-601357038:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-601357038,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging cb9c21e49b5ae908e13ba89f857d67c10e5e0d1c into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e1e85132dd6db98d5a4c8d2d53ef4aaf04a9d6e5). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-612577737:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-612577737,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging d779ba448f11caa8905811497633b61202262d61 into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f562be3788d603b60e1dd0b8cf7052235f764b03). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-601064236:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-601064236,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 1** when merging 3fcedd3f9511a1260c42f81d337b0d8b46388222 into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b638bf7c7812745154de26eb19cd87fe2aed03a5). **new alerts:**. * 1 for Suspicious unused loop iteration variable. **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-810914206:324,variab,variable,324,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-810914206,2,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:304,variab,variable,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 1** when merging f63958fae589068d71c8f307a99b082d5d26256b into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-86af60515246bd222294eb56b35524fd4f0b2e5d). **new alerts:**. * 1 for Suspicious unused loop iteration variable. **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-810725516:324,variab,variable,324,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-810725516,2,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 0f88f10af7b332323ba7c8a2c4335d41ef4e92cf into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-91cfe09575cc1f1b31e33577597b4baa4fa06582). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-503308310:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503308310,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 2e38ebcf81ab131bc2942150691f3fd6c5b92138 into 1b13841c90d8a46e462c590b281b32350a27c64d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-18faade50f7d08e03578791ba3741680033bd9c5). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-500503632:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500503632,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 306a4dde3470d89fbb884124d6c7cb03143de2cd into d6b9d6a117c1ed468eb966597a9c8a9b3e8589b4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ac6877b616efbf0e16df18aea94dfb053ac18b0c). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-500709663:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500709663,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 46722a8a81eafc40dcc11622236cd5be13900087 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3ef0ea64f89e698bd2fd600a3a05b5b6b2e22676). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-503022082:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503022082,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 6a41d7180671e5037ee2fd306cc186a80aa4defd into a1f7bb34db8c37c399b3ecb216a5952d14fb0ef7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8a7c3d52e76a9d71521f3149d806ac16512fcb58). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-500280898:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500280898,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:304,variab,variable,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449,2,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging 2fafbe8f061e78de4feaab61311b37015861312b into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-65a9a415d19b0acbc64b5fe7aa372a539f1a7768). **new alerts:**. * 1 for Wrong type of arguments to formatting function. **fixed alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949#issuecomment-656281507:379,variab,variable,379,https://psicode.org,https://github.com/psi4/psi4/pull/1949#issuecomment-656281507,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging 7c8a11e8026796d6beb1437a7a6ae831d41b75d8 into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5db3262e4803037cc6c2295e50baa99c3de7fa5b). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060:345,variab,variable,345,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging ee3a8859e70fc6da96a6e2af833b11956aa85a97 into e0b780daa5e75cb07e1b44c47db560a3f4c6474c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-268701b010d44f775457db29bf9e88aa6e935f53). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825:345,variab,variable,345,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 03f69233c7523a809370c09bec2c0ab400af3891 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b77f01ac3336f3839419bf53a65220d201c3522c). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546115895:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546115895,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 26e917c7a077bbeb3a0b1a6a9a9638bd7fb36085 into 67a0d7049241b30ceb2b52e44c58b6de579966bc - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c75027329aef2bf8b32c48204dfa2ee900cde029). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-759761559:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-759761559,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 31b39e6f26f185606903f9aa632a1f8f7faca92b into 72b7e7af4e36db8129703a928bf058df488cdbe9 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-447b1db3dd6eadf6dfcd0b72c9193cefc13acd8c). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546334091:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546334091,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 548c06f8dda703250f2f5bfad640db79224f9be6 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-736e1a902ade644e4713ea247bdfd134a3bef328). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546937916:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546937916,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 56acf61f2bd87cb63c3e571c442d654df98bce06 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-20e724d037e3b6ab7e50b98d889f2781ab29af3b). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-545883188:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-545883188,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 610f79689c947e79b82279a42d16ef27aa8652b4 into 72b7e7af4e36db8129703a928bf058df488cdbe9 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-94fced0c4ca01a5bc4f2c7b1d96eac27512125b8). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546439335:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546439335,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 696e48483fb0f8071fea8fa08723613895118cb9 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6eed8a438f76b9a59c6ea08c3e3a03a2e14e4089). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-547042246:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-547042246,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 75a7bc1f8a12ce675887411f772bdd322a0f3b6e into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b6e154412d771ec5c0cca4f6786c2bc1558b00ff). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-547980650:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-547980650,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 75bb44987062976730a9d980d2e5b2749b290041 into 9f91304977b6c0c927f026b7c9f364fd06fa76f9 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-25480fc54901b46fc5e0f7c802f4f362835c60dd). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-539588869:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-539588869,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 7ef3afe3a4fd65bfa17d1a6469c6d0fd6cf598d5 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-258cf70f6b65715d48e16f0cf07581248d74151a). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-545696776:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-545696776,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 91204720408c8a105aa4338a26cd98bb8c6232f8 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-df77e9e5bbe2ac17a47387ed377e7f49ed402630). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546029121:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546029121,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 95c129ec2eefb971145191216c10a512b532b54d into b603cfcd0fd6317e6ad5e25bc58d7a828e4d310a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-94cbcc8552c02017ae85bb4926515b57ef69858b). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-693289853:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-693289853,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging a4b23a383e0bcd37c11ff72179c5b61ce8901240 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fb08fd9a133f35b5b091c952cc74b61aaf9cecbc). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-628319430:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-628319430,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging b9b1d6d30ae5b198befb1924d52d4c6823b2ccf9 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ceb5dc77fae429cab619deabd0e5713f04dfc4cb). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-545629902:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-545629902,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging db35b35e1c134e07f155e8c83ed04f38874b69e0 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8d3afc145a9d9d7f0972f65597f5d9f88d9cb989). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-547638762:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-547638762,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging f52133376a0076c8edc09f85e9db2a2c2b8a847c into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fc9ceaac588977494a374d507ce944c017e9f232). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-799920380:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-799920380,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** and **fixes 13** when merging 9365dbd41720e192dbe03ab0e9474902891183bd into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b55a2cb86c8654bc9e7edabc9f99d1cf47a6fac9). **new alerts:**. * 6 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-553714229:307,variab,variable,307,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-553714229,2,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging 002ac0ffb1e4253318ec733a8a40841e05cc406d into 8fd25f21722fddc8dd2e581bc16b464f85a9bd51 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-400c8d57e92c4839a4a478564d3fe12553269794). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601554795:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601554795,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging 245513e671918d56c2a7f3e0bcc55080050a0d8b into 6348e1fc0e33052e17e12a5797206dc3efd3c238 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3280146c88e1ad7dd6d7bf830bcd4a88e3ce22df). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755841029:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755841029,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging b8bcf3626546f794fe9635385b2460321ec076e0 into e25656e204ca4dcfa6b7ec853d75f35e01aa893f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f70b2b80c2189a0d7844155485cc7943744eeb8d). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619603507:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619603507,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging e6039d4ff38684ddf9cbd6080a82a0855858a6d1 into 6348e1fc0e33052e17e12a5797206dc3efd3c238 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-502f1869f9d84137860bc068c6d29245790b806f). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755154080:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755154080,1,['variab'],['variable']
Modifiability,This pull request **introduces 12 alerts** when merging 465ae9977d4e8ff3e80a5524281a86a511c557e7 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a7d23a248c3d380e084dd2fe8fbc059049ccf9b4). **new alerts:**. * 7 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-548146279:327,variab,variable,327,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548146279,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 13 alerts** and **fixes 13** when merging 5e2c48cd569e99f6d69c602d505bcf0c22d0a38d into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-038c4af8cc842894db7a66841ed9c33b811a8944). **new alerts:**. * 7 for Unused local variable; * 3 for Unused import; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-552755151:307,variab,variable,307,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-552755151,2,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** and **fixes 15** when merging 89b187c27049a5003cd2ee96ef8b033cbdc7fdf7 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bcf3c5063e4ac5f4424caaff170d255cf469b66). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-502315227:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-502315227,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 2 alerts** when merging 0396e5257e382baab1f21d9bcd6546e9fb885746 into 2938fc2bba0678b9eb0648733e5bf70ecb7f802e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35f8b01b00c2f77a9e8ea7b61224b53a71387c72). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-641645864:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-641645864,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 1bf69ab8306df4171b54c921964ba73d30cd5a78 into 31219187caa9e8736b3323b078324f85d8c9cd6f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6cd6a417b2dccc930d2d41fcecbb1f78c3420d0d). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588025649:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588025649,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 2b6259a36ec2951ffffaa15e2bcc1fee6d22823b into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fb98758eedce030b6cda905e8e1e1d11543b6c39). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-631811738:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-631811738,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 50c2467ce25914cb7838436a756935a96db02e9a into a850d66cbd570794038b312ba953bf573261ffca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d5fb51690ee5f37820b44158e33c095a355daed5). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-506013570:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-506013570,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 7f8117aaddecbcd3cebf1cc3d8505d580212fe9e into 4a03175edbda6213e73e429eca4908872876bfb6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-67df4c7a1685c696e0af1bbb3ccbcd977f92a80e). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1786#issuecomment-576896216:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1786#issuecomment-576896216,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 9a5829a54f6430372a5dec58fc132f359f214c1d into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ad75de685a2ba03f144f640d03db617b0431da4e). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-628941877:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-628941877,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging c4b3d0aca90660a8b3cf72d57fa42d09afd02ed5 into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6bea4a183024546bf0bb7f8e21d19b32df083b14). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-642392742:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-642392742,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging cf970f9c056b2301b26ab4f2d0dec4fe0ab170e5 into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d5621577d9751acca1a16ecf450013ef3f8b194b). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1926#issuecomment-642215451:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642215451,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging fd321e839e4597d8b7939a531d36d332da26eb3d into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-84f4c3fde4b63efdb7c9e03652bf7abd06bd4e70). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1926#issuecomment-642394107:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642394107,1,['variab'],['variable']
Modifiability,This pull request **introduces 22 alerts** and **fixes 1** when merging 9c6c5e6967f69d1cf17a07839a760690e1bff79a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9e24558892c638b73f9f7c59570f9eb5b0a0d000). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-550089235:393,variab,variable,393,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550089235,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 22 alerts** and **fixes 1** when merging aaec62d7e05aaad883b18c2555f95e8404bf1b8a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-195cf8d9dd510bb3ff8072cd0ae955f21a3aad9a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-550268345:393,variab,variable,393,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550268345,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 23 alerts** and **fixes 1** when merging 162b23e599a016e505a48cb9c594b3726b952da8 into 2c00b358d646316d054f3f0104014662228e7989 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e0184b00477bf5fab6aae54aba5a6e79041c40a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Unused import; * 2 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-549067705:344,variab,variable,344,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549067705,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 23 alerts** and **fixes 1** when merging 2fcb1ca56e703e93db407d86f6e5d4fccb33106a into c876a45b706b0fe5e27993bec4c5dcd5ed812cd7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cedd7a7f58b1ec2f563d8e0f6f10f27cfe09aac8). **new alerts:**. * 16 for Module\-level cyclic import; * 3 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unnecessary pass; * 1 for Unused import. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-548622226:344,variab,variable,344,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548622226,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 23 alerts** and **fixes 14** when merging 5c73c7429782f5bd5c917a5f5a3a6c13d4135db8 into 2edf6b752ba5f8052af7cc2347052e681e16a7ab - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f3e6464c14983b28d46a1154ee3932155223883e). **new alerts:**. * 14 for Unused import; * 7 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;. ---. *Comment posted by [LGTM.com](https://lgtm.com)*,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-495811312:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-495811312,2,['variab'],['variable']
Modifiability,This pull request **introduces 23 alerts** and **fixes 14** when merging e11bb214d47c01c61b0b73aa4e50471b82fa9ca4 into d4681c9689cd58006f656c083401283a539a61f4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0953359b6cba1590b435ecea0707064602a0dc59). **new alerts:**. * 14 for Unused import; * 7 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-505652250:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-505652250,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging 7483ceb56b8da355509dba28c43cb8a3e41786fe into d7529df57c2815cfb43a88d9b739c94c3a2322c4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-11c2650bf34ba516f9ddee5a91923598ad4a617e). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-525543922:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-525543922,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging 8c0afe6ba300b94768102920f9a57dfefb496186 into 6e6752949022c5cc61953a9cff384220ae80feda - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-28eeb05962093199f3c0e2dae6e3773b48edb740). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-512959967:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-512959967,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging ad8546ed1e2e7385542e9c2f32ab37f7fe8ae5de into d7529df57c2815cfb43a88d9b739c94c3a2322c4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2f047dc32def206d8265b7cfe1f8042f534899c). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-524469488:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-524469488,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging d31ce07cd88b218a003bb4bd62feb27e8fdb5d6c into b789aa3986441f7f0875f39ace6618e54437a4aa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-86ce69b1d0cf35d95348cc61bfb35da2158b42ed). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-520681717:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-520681717,2,['variab'],['variable']
Modifiability,This pull request **introduces 27 alerts** and **fixes 2** when merging 33955a1371c34d5c26dff3335dae83b0c5e1d3df into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7c127454f4dccfaa2c65a8a9690ab6c385a1ed1f). **new alerts:**. * 24 for Wrong type of arguments to formatting function; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for FIXME comment. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-578793813:466,Variab,Variable,466,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-578793813,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 27 alerts** and **fixes 2** when merging cbd061d81397d3c7a7d01412b34125fbd139e782 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-1bf136a18c1a8c801788ded61ff202cff0105f8d). **new alerts:**. * 24 for Wrong type of arguments to formatting function; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for FIXME comment. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-555113195:466,Variab,Variable,466,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-555113195,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 28 alerts** and **fixes 13** when merging bc9009a38f14c7bf07d3954c8e6733996c7183cc into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b8ef5304b94a59fe306f4bb821fe5bb601aecefc). **new alerts:**. * 17 for Unused import; * 8 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-552054076:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-552054076,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 1** when merging c220287c13d731bb2961e2982bb2bf39da770076 into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4be40b854a58f17bfa7e7b77368b6aae9c79fb39). **new alerts:**. * 2 for Testing equality to None; * 1 for Suspicious unused loop iteration variable. **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-801032115:359,variab,variable,359,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-801032115,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging 20f48b8d33dad83c118a2ab0e4796b49f3c313ad into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-70ab444cf98c4ab1d7d9d6bf0216415ce2a0e4f4). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-578484770:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-578484770,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging 25d9b3d97898b6b8cc707cae58e0f496fbc8584f into b3df9b2303c1ed298ca991c6599464320353cb11 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-42e62e7fc80f30da7ecab7788ae868452aeb730c). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-585438542:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-585438542,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging 3ee87897e94e00d5cb6f9bfeb0a1748e74d58fdf into acad43051cdeadf0b8045026c6ff99a74463db93 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-012714c2c5fedc8c3b4cf9b210559f8e8209393c). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-582984783:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-582984783,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging ac0cd27470ae1dabf00f37473c9a8dcd74fd368a into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8ecc74f66b989c6efcf61524e36abcaa87723813). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-580960577:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-580960577,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging b76b8a924e1632f428b5969f6dc20a1e522de6a7 into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-38c56e79dd2f5afc386d4844eb469af10d2b1c4d). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-578899470:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-578899470,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging d99c5db490c03afaa54497c038754098037f2ef0 into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-df5c4e0f9e943bbf149b7cda8583e218316f396a). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-578392487:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-578392487,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 30cc17161cb0ff03ac8e3c23a1879643fe72d681 into 50752dfccd077d76d36ac9d4bc0b4bb5ae550696 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f98c930183f719938c746356022f4fd857f64d35). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-639343272:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-639343272,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 36e7bdc977976c0978b00b637e66bdfb05ef12e9 into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d6ffafbd9f9e7a5e682144fd8cd7e54abfea2abf). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-634616346:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-634616346,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 5581b34d5cfe0d5b1bb0f9492f77dced1e076bf7 into 58d3bc0ae55d3affca9c75c80126be08d610915c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d9c9640fba621c30298d00a2548247b5c6c04b9f). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-638216713:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-638216713,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 7133769ce16b1793c183c6c0e86122ee9523f0b4 into ac109c99d2154bb8d998cbcde43dfca9f453cbce - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cabe7fe4086bf98925c79d01e313b04e85104f2d). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-637560895:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-637560895,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 934f312badac1bd7530816b31a728b621d10e178 into 1662c5d7669e80eb32864e62e73df41d929621eb - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c7f122fcfab3ba0263d2cdece4036046a46c1647). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-598205600:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-598205600,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging a44a9d5475b3bd0ddf8d4aa4f0fb591861ef0b77 into 2cb1154aee025a8cf0253911ef8c6b3206886da3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-640e617afdc3cbee5fbbe8aef3b3c622951e5906). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-625201343:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-625201343,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging a90a35056b0223a6e5cb13874b2d1e76ace87f9c into e273d32b99324de175afa6e63a779eb99768590c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8a505b29ef048079ee78490691fa98111b30ed07). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-663430987:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-663430987,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging bfae8905fa8f6eabc3ff0434709ccda712c123a3 into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9e18129016b986212e7550b8580a794e9d14b16b). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-635280878:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-635280878,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging bfe0ca93beae45c31ea55d57e585ed973dbfbdb3 into 50752dfccd077d76d36ac9d4bc0b4bb5ae550696 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-083829e867c817a3c4250522922ec0c417c358e2). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-638996018:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-638996018,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging e3ba5c2409ff7e223470b7ec566426a7990ebace into 1662c5d7669e80eb32864e62e73df41d929621eb - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af529eb66f935be9e4e94ef6a39b3609a520d1af). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-598776490:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-598776490,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 35** when merging 5cdb0aac52477b199271a52a1e269fd1bc7587ba into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a92e22e7909909388abb7b6c40655cb128965e2e). **new alerts:**. * 1 for Unused local variable; * 1 for Syntax error; * 1 for Variable defined multiple times. **fixed alerts:**. * 29 for Module\-level cyclic import; * 4 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 3 alerts** when merging 1d783c29d5f414abf8164be05ad52cef54c2ee72 into 5f017bd3dbcc07b9b854e23e32ef285ab73b7916 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-26252004d1d4cb621e9e2b41af3cf7263833e87d). **new alerts:**. * 2 for Unused local variable; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-684170548:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-684170548,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging 1f3386888ecd01eb5e6fc077cbbee2c7901b391f into d7335d5ddb64071c10f72b320ab253c79ede91b7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0f7ac36ab9adb2e8c9b5ebda16627b17f34217ec). **new alerts:**. * 2 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1786#issuecomment-582452220:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1786#issuecomment-582452220,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging 536387c880270ca4fe776de392f68fbbccf0a85c into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6f4307d6aaa9e7d8b0240a08640cd7a428620f2d). **new alerts:**. * 2 for Variable defined multiple times; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-546681392:276,Variab,Variable,276,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-546681392,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 3 alerts** when merging a186991a7dc68db863a84bf759ff892565c72996 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2fd4ea9718d1feb9bc8608d90bca575a6cdf1b10). **new alerts:**. * 1 for Unnecessary pass; * 1 for Unused import; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552121356:325,Variab,Variable,325,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552121356,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** when merging aabc56bc7dea931923051a71869c61a307a378fc into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-1e86035bc1a97349519dd611e05008e910588cff). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1790#issuecomment-579879121:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1790#issuecomment-579879121,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging c14c00323f180fe7ff5c3f23e6c65a46537adca8 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-185d41b9eddf87bd1348a081ae083b24a201f9ac). **new alerts:**. * 3 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-631396705:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631396705,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging c5de1fc1d7e7f04cb4cb2e4d428f69fe7ded2912 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a4adf33dc27a26a38747d55b56206af1a411325a). **new alerts:**. * 3 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-630952798:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630952798,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 1** when merging 49e8af0c80836006292b53bf12bfbe57ceecf905 into a4741e36b93331901dabcd2028c2013d5b5acc07 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7b05c8c751e9f2ffd4ac904a77166a836ea99410). **new alerts:**. * 3 for Multiplication result converted to larger type; * 1 for Unused local variable. **fixed alerts:**. * 1 for Multiplication result converted to larger type,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-756530827:361,variab,variable,361,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-756530827,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 11** when merging 5039d23165a7ce04649dfa95620e47347b9c7176 into f7f037de73b8bc0a808803d52333218e774b91e3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7d698b437e0ad9f314a84512fde34d3e999bd08c). **new alerts:**. * 2 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-568807035:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-568807035,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 11** when merging 7b2e74f8c24b80b4c005b9aa049e2c1c147aaa45 into ef844869a5f5b2e2fa4ae946e604ff31fa409f0c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-341d23207c951a40eaeb0adc3559e9623e2f5912). **new alerts:**. * 2 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-573239252:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-573239252,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 11** when merging e3b22093ffafe97519aec0c4e2b8a58b259e3bb1 into f7f037de73b8bc0a808803d52333218e774b91e3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a08cc303d011d1dbb49eec257251ca60aa52477a). **new alerts:**. * 2 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-568821997:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-568821997,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 12** when merging 6e36f6b66cc64d38c95216d8893a6d2e204e9fc2 into 7d35d148f39ca18075547f73b93198ce94ba11af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e7444fd0d619ef7102300dddcc8a9bfd6e833f17). **new alerts:**. * 2 for Unused import; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-690116852:329,variab,variable,329,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-690116852,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 079713754ba1bea52958d5ae051c110d66aad4c0 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ccf27b30dc1cde3841ea61e115ee6ea17b1b6962). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565668634:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565668634,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 3f44f26065b607a11b59752c6aa75a728983e1e9 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-09189b6f38daf16b3d19b91cfa42540df2c87ad1). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556940111:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556940111,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 510ffb12356a90c20c40095e1825c0d2417ce48a into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e8e53c6a12f721f07019f8d8807397848b17e183). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556468532:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556468532,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 541118f85c6de69318c6d69dab97c6fe6b33e6c5 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3d3b5f159a7cf84416a30ddf0e4adb8f963fb49e). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566045322:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566045322,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 5ef316e99d35fb201d64d8cafdf8e1b89c7ad1b3 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f5c2513aa7e0109b3faa0fd1710bc759b30973df). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565868980:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565868980,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 5f20f7c0f99ea4fe89892aca1e1f6cfc1b5b8aae into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-070f5ed99b121820cfcbad1c600f61e49f5a51c3). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-557379531:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-557379531,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 97263dcf4d1c37b0cffac76321b0f89d28e8ada1 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-80a81ff67f598b9106331cdf03cbc5ca0daa53d9). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565842567:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565842567,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging bfbc7a55ba07fc0d09177988a8b3cde45001af39 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5b8e0e5be109138b62bee49d348217be2a41e695). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-557205930:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-557205930,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 0857fe9d025f8e4bdb811a0f5379dc601b1e9152 into 262e3454d7015466d3f8059333518a7abbf2bd09 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5231efc5643e5ec1fecb933907f54a27b68007b3). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-765095335:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-765095335,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 177748e12cac9f63db658b12db353f6b591800ab into 38c9807851929c1eff2803a58938b37c9625083f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-726f1fd30a94087c2217dd411c4951f21b0dae5a). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-816309479:340,variab,variable,340,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-816309479,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 2c4ec5b6cb0c617c8130b03e375d8525c4134eb0 into 766c1e760db0de3b1e685fa0313cb2f2d6d9b146 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d46382fbc2f5d7f6061716623d9462a311d08688). **new alerts:**. * 2 for Resource not released in destructor; * 1 for Unused local variable; * 1 for Multiplication result converted to larger type,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039#issuecomment-731606599:334,variab,variable,334,https://psicode.org,https://github.com/psi4/psi4/pull/2039#issuecomment-731606599,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 41d3b9b8967ab05c039db5135be30175abbe22af into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bfe80c352dc8898d78c279194915abf035e5956). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-650816427:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-650816427,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 5098d2ef8c93363494f4be32a573818e7ad0b73a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-bb04ac9a3fb4ebb9247885570aea5cb8fe5442db). **new alerts:**. * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552046581:325,Variab,Variable,325,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552046581,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 4 alerts** when merging 73a65b9b52d5ed9ab52af985db8156908a9f9d7c into 262e3454d7015466d3f8059333518a7abbf2bd09 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-516b6f785cb0d45d05ef0a1ac42c57feef3db0bc). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-763160144:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-763160144,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 9887dbda80fd3b579dfe441ce6e814ed9988673b into 6348e1fc0e33052e17e12a5797206dc3efd3c238 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-63f7ef92256979a5f14e1752ffe58f0b345193c8). **new alerts:**. * 4 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755936286:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755936286,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging a52ef0da92bdd7d425be15388b6c682c54cabfbc into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-bc0d0fdca6432030f1ed1f69714daa27a348e444). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-803061303:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-803061303,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging a56640b5a045264511ce8e82b7e0fef2403e6d6c into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7da129324ddc35619bc8bcd5bb9095f3a440365e). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-802406528:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-802406528,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging a683f02ef658be7294a9235beaa6f5740454cf29 into 40062658067b2f929720bf7a8d0abb7f3a57e9a7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-925536a63860cc0f2b79983d367dad8867583430). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791674199:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791674199,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging b0500c6ad3f55f789c0da51ecabeca013ac0b0c0 into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-680c8472422602cdbf5ba69982d626c003486fc9). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-650670910:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-650670910,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging bc41e77019c914a43d3bd1d821dbba782dc05b40 into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-968f96e8ce526778b006e6018f90d92893bf6698). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-613168315:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613168315,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging d643a954d37f3bc7f1eb77c3c4e5749b9d0300fd into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-69d5ef3136f1c28c9fc08c5b9d04ef9d4c46df19). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-652733970:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-652733970,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging d652e7e1ab0ca3666a1603f4e8602acd4d998790 into 262e3454d7015466d3f8059333518a7abbf2bd09 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3a134619b3de04c27860b8e216f68111aa577e8b). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-761284563:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-761284563,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging d930c8d097a2d33c2a512ff320a23305610a57e1 into 6e6752949022c5cc61953a9cff384220ae80feda - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8eb6d86d35a3c2dd6eba5f480ad322baeff507a0). **new alerts:**. * 2 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-510713898:350,Variab,Variable,350,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510713898,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 4 alerts** when merging f1cb0d945d1dc12c23275fbd8936306b3de66965 into ac109c99d2154bb8d998cbcde43dfca9f453cbce - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ec4775af2bd36fbe9e93df241e758eda63de222b). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-637251576:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-637251576,1,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 1** when merging 45869c0b40107b7055cfb5275da227dd06575d88 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c245d356f39c7bbcaf02271f9d0b0bbf55f11efd). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1753#issuecomment-554525628:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554525628,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 5 alerts** and **fixes 1** when merging 81f7c98a543690025cd912fc41faa15fcc5e13c1 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-11e88e66d853d73faecbc137d4cf4605b3437e15). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1753#issuecomment-554453362:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554453362,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 5 alerts** and **fixes 12** when merging 318800d717bef8cd10a1004c2b78b33b6719c2bf into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4f1670e425c58663a7c73ca28d45824d4411807e). **new alerts:**. * 3 for Unused import; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-635088776:329,variab,variable,329,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-635088776,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 0a8cf8bea7a5b64c7c5de9f1f130a8e7d7e08233 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2b65dc92e25fb18ef5b4e365b6f0582ec8db392f). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566297630:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566297630,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 324bd969bf69170c4983693ea82883cbbcc9c9d7 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0a791152ab53f3b656ffb2ec8d71822021a63831). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566876000:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566876000,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 45f19943f3b7b98ba0e75d13e417b22802220502 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7fc19e6a1deeabc659c9a784e6ad3d09a50c570d). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567273376:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567273376,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 56def841cb756b5b8491722bf01e151ae3fad3f9 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3bf89b9ceb2797cd0fee9e548f4b3a06fedc0f1a). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567069654:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567069654,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 61fa6f4ec5198b93be03e537b86cccbce12fe4f8 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35141f06d7ab9bc69dab347f0f36d8e50fa5e040). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566354046:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566354046,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 646483f880e1b74d4c81ddd451d7ff913fd5b607 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d502d1e834edd3b680de16233a9dd8167ec070e5). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566848867:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566848867,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 6c6fab442411f922ddd3e3dcdeb58e74ee5b5742 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-192dfec46bd41967ba8208516e1a61a4c038ba5c). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567153929:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567153929,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 741a531854eb567bbe06b664979bd0e7a139e8af into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-eba4b70f38cb6e74ef599f35aa11e7dceb5ce69e). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566797894:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566797894,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 7a9386b6a37aceb5ae41eb98dd85d41bed1f4164 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d1fd0455c7fe0a2642848c7f142c9c5468716a01). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567759589:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567759589,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 7cf1d6742cf4a9aca2fa1de828f4993e8b8d331d into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2e1756429a66f786987d4b6b63826bfb4904e665). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566425536:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566425536,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 89f07b89989685cfa258db7c81b3bcccb58e57ec into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4af42a016ee83f37da910b36571de45eaeec254f). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567281883:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567281883,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging c050e6c2615a139510bebad5602d21b1c87655a7 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-369b730fc0dd348d910e30e2b7d9ceaebfbaae89). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567340678:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567340678,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging c118c3c4bc2648a145776ef2591e0a099f36b48d into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-30533b536131e08a97135b0ba71eed277a0899a3). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566213689:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566213689,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 16** when merging 8cc38895c22c9fe4d55646e6325e40383f584846 into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e32c95b76b52e41dc3ef542a619a221fa4aaab70). **new alerts:**. * 3 for Unused import; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-596256713:329,variab,variable,329,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-596256713,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging 191806f6d27d12f06fd89a8c52af3c4ead5a871d into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-77ccb9f40e6a31f328e861cfc76b37d10ce80715). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-596232207:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-596232207,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging 5bb16c409022b63f627d1b64180ae727386a1535 into 1662c5d7669e80eb32864e62e73df41d929621eb - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e43d69a6073d855ff662e161ba83e6b1911fa10). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-597919789:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-597919789,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging 6b2f619db30760e9951008045172b8c1735909ec into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9f4fd1ca4a37ea2301b09c7a48028ea1cf6bf8e7). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-596769002:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-596769002,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging e13218bef97055f18b4182ab9b7e0fde7a7da3b3 into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9ffeab424a5b32992b18c1eae23836e7dcdd0ef2). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-597336918:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-597336918,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 6 alerts** when merging 045b406c1297b920491547ea16f4d74d9297ecc3 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4b13d0b588cee328bfe8367e2e961021cc099959). **new alerts:**. * 3 for Unused local variable; * 2 for Wrong number of arguments in a call; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-630179716:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630179716,1,['variab'],['variable']
Modifiability,This pull request **introduces 6 alerts** when merging 488a04e374e0b719f8e2ab52eeb30abb8f61f422 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e37292bb2c83649313b4a9650424fbee07599d25). **new alerts:**. * 3 for Unused local variable; * 2 for Wrong number of arguments in a call; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-630353814:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630353814,1,['variab'],['variable']
Modifiability,This pull request **introduces 7 alerts** and **fixes 11** when merging fc05b531996cee853800099c798cfdd39a8dee6a into f7f037de73b8bc0a808803d52333218e774b91e3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0c91c193c15ba0f2f07f25589a60565db06c01b4). **new alerts:**. * 4 for Unused local variable; * 2 for Unused import; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-568169117:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-568169117,2,['variab'],['variable']
Modifiability,This pull request **introduces 8 alerts** and **fixes 13** when merging 0738f376f41981e12d7e5dd7c0d27b5975e607bc into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b08dc1a4d799c67b2ee234db2e6c3aa98cfe55a1). **new alerts:**. * 4 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-554120132:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-554120132,2,['variab'],['variable']
Modifiability,This pull request **introduces 8 alerts** and **fixes 13** when merging affe266aee566fd56755c634c48aae6fa38f02bf into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9b52a4fc96a47dee0570700aa866c21662334088). **new alerts:**. * 4 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556252967:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556252967,2,['variab'],['variable']
Modifiability,This pull request **introduces 9 alerts** and **fixes 11** when merging 936843c9a5439d51ad129b8bd92b097aafc72f30 into e05f07a78ea15c925df69265f2e16b1698d4a49f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9c53e8e2181e4c2923790a68db1dd75f500b3422). **new alerts:**. * 4 for Unused local variable; * 4 for Unused import; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567908861:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567908861,2,['variab'],['variable']
Modifiability,This pull request **introduces 9 alerts** and **fixes 11** when merging cede7d9634ae85c98c6cee65c3b93099db8a9fed into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-880a6829848a1a2ca91770f7d8496c482d5e7683). **new alerts:**. * 4 for Unused local variable; * 4 for Unused import; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567829592:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567829592,2,['variab'],['variable']
Modifiability,This pull request **introduces 9 alerts** and **fixes 13** when merging 350a7109410f4f0dfab6888f83d5a4d93a8829d2 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-75650ec2427c70a4f54c63b915f8ac152a63fc6f). **new alerts:**. * 5 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-553093319:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-553093319,2,['variab'],['variable']
Modifiability,"This should be marked bug fix rather than enhancement. There are transition states that I cannot get an IRC for, without that fix. Also, corrected a comment per @andysim's observation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1663#issuecomment-500833979:42,enhance,enhancement,42,https://psicode.org,https://github.com/psi4/psi4/pull/1663#issuecomment-500833979,1,['enhance'],['enhancement']
Modifiability,"This sounds nice! Python accessibility of amplitudes would be a great new feature. And cleanup from C structs towards Wavefunction object would also be welcome. The proposed layer of abstraction between DPD and libpsio is perhaps worth some discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:996,Rewrite,Rewrite,996,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['Rewrite'],['Rewrite']
Modifiability,This sounds similar to the issue I ran into with the first version of the SAD guess rewrite: CH4 switched symmetry and the program crashed due to memory errors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474#issuecomment-453868040:84,rewrite,rewrite,84,https://psicode.org,https://github.com/psi4/psi4/issues/1474#issuecomment-453868040,1,['rewrite'],['rewrite']
Modifiability,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:217,variab,variable,217,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,2,"['Config', 'variab']","['Configuration', 'variable']"
Modifiability,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:194,plugin,plugin,194,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492,1,['plugin'],['plugin']
Modifiability,"Those `Exit Status: infile ( -11 );` are segfaults (`SIGSEGV` is 11), I've pasted the backtrace here: http://paste.debian.net/1058664 The `output.dat` (`fsapt2` testcase) is here: http://paste.debian.net/1058665. Do I need to maybe setup some environment variables, e.g. for scratch space in order to run the tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451527924:255,variab,variables,255,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451527924,1,['variab'],['variables']
Modifiability,"Those are the troubling lines for sure, extended them should work as long as the CI Vector is present (`n < num_roots`). I mimicked the transition behavior from @cdsgroup original code. Might get him to weigh in here on the API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1890#issuecomment-627947384:40,extend,extended,40,https://psicode.org,https://github.com/psi4/psi4/issues/1890#issuecomment-627947384,1,['extend'],['extended']
Modifiability,"Three hours and nine minutes, according to the timestamps I have for relevant events. I _believe_ the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433:711,config,configuration,711,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433,1,['config'],['configuration']
Modifiability,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:1004,variab,variables,1004,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,2,['variab'],['variables']
Modifiability,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:232,plugin,plugin,232,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598,2,['plugin'],['plugin']
Modifiability,"To say anything I need to debug it. However, I do not have that much memory to run the input. I guess the situation may be related int variables, which should be defined as long int for such large molecules. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679#issuecomment-511841966:135,variab,variables,135,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511841966,1,['variab'],['variables']
Modifiability,"Uggh, never seen or though about that problem before. What would you simlink to if local gcc doesn't have plugin support either? You could try [this gcc instead](https://anaconda.org/msarahan/gcc_linux-64_linux-cos5-64/files), though I haven't particular hopes. Could you link against the prebuilt chemps2 conda package or do you really need to compile it yourself.?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288418891:106,plugin,plugin,106,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288418891,1,['plugin'],['plugin']
Modifiability,"Unfortunately, I was right. Commenting out [this line I added in #1108 ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372) fixes the issue. That particular line ensures that when cloning a CoordEntry as part of cloning a molecule, the clone of a ZMAT coordinate inherits the computed Cartesians of the original atom, if any. That change was vital to prevent a bug where basis sets wouldn't be centered on atoms after cloning, and I believe that needs to be kept. I know Peter said he planned to hack on this, but I'm tempted to take this myself. This is holding me up from helping a user on the forum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-439575958:295,inherit,inherits,295,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-439575958,1,['inherit'],['inherits']
Modifiability,"Unless adding it will force you to rewrite a large amount of code, or not adding it will make your results incorrect, I'm going to request you leave that to a separate PR. It's difficult enough finding people to review this, and adding more code will only make it worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-933763993:35,rewrite,rewrite,35,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-933763993,1,['rewrite'],['rewrite']
Modifiability,Update: `-fvisibility=hidden` is indeed active in 2.2.1 and quite breaking plugins. Shelving this PR and recommending that symbols/c-layer-/py-layer-plugin-interfacing be a topic at WWDC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-333604954:75,plugin,plugins,75,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-333604954,2,['plugin'],"['plugin-interfacing', 'plugins']"
Modifiability,"Update:; * There'll be another commit to this to fix some docs. Today, there's 1.2 libint in the conda channels, so we'll be able to look at travis/distelli built on that rather than the internal builds that the above reflects.; * Thanks for the config params, @susilehtola. The CMake ties libderiv AM to libint AM, so you may not have hit some of the problems. What I'm seeing now is that psi4/libint allows an AM=8 build (libderiv AM = libint AM - 1), but evaleev/libint/v1 segfaults in the libderiv generator execution. So I'm investigating the differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300573061:246,config,config,246,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300573061,1,['config'],['config']
Modifiability,"Very easily. ```; wfn, grad = psi4.gradient(method, return_wfn=True); en = wfn.variable(""CURRENT ENERGY""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211:79,variab,variable,79,https://psicode.org,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211,1,['variab'],['variable']
Modifiability,"Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least. Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300589507:266,rewrite,rewrite,266,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300589507,1,['rewrite'],['rewrite']
Modifiability,"Very true on exposing more symbols later, @dgasmith. I haven't even attempted v2rdm. @edeprince3, FYI, this affects you. There's a discussion in https://github.com/psi4/psi4/pull/814 if you want the details, but the tl;dr is that Psi4's `core.so` built with this PR will not have all the symbols exposed like a normal Linux `.so` for a plugin's use. If there's extra classes or functions that v2rdm needs, they'll need a `PSI_API` added to the (psi) source code. If you get to the v2rdm/psi reconciliation process before me, please ping with any trouble. I'm updating and rebuilding all the conda packages now, but v2rdm is always last, having psi as a dep. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950#issuecomment-380192190:336,plugin,plugin,336,https://psicode.org,https://github.com/psi4/psi4/pull/950#issuecomment-380192190,1,['plugin'],['plugin']
Modifiability,"We have DF-CCSD(T) analytic gradients, so we _have_ the densities. What I _think_ you mean is ""to have density fitted coupled cluster densities _on the wavefunction object_."" I haven't checked whether these are on the wavefunction or not, but I'd believe that they are not. I'll get that there as part of the DF gradient refactor. Further progress on that is blocked by the integral changes in #1721.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1952#issuecomment-656906496:321,refactor,refactor,321,https://psicode.org,https://github.com/psi4/psi4/issues/1952#issuecomment-656906496,1,['refactor'],['refactor']
Modifiability,"We have a problem resulting from this PR. There's three ways to `add_library` in CMake -- STATIC, SHARED, MODULE . SHARED is the usual linux `.so` for linking, while MODULE is the dl_open style of a Py module. Up until this merged PR we were doing SHARED. ### SHARED; * links `libpython.so` into psi4's `core.*.so` -- this is new in the revamped pb11 add_pybind11_module that calls [Python_add_library](https://gitlab.kitware.com/cmake/cmake/-/blob/master/Modules/FindPython/Support.cmake#L3306-3313); * sets `DT_SONAME` on the `core.*.so`. This shows up as `Library soname` below in `readelf -d` of core.*.so. *This is important* b/c w/o this set, the full path to `core.*.so` gets linked into consumers like plugins, rather than just the library name. [trouble](https://stackoverflow.com/questions/27261288/cmake-linking-shared-c-object-from-externalproject-produces-binaries-with-rel); * designed for ordinary library linking like how the plugins are using symbols from psi4. The https://github.com/psi4/psi4/blob/master/psi4/psi4Config.cmake.in#L141 does the linking of core.*.so to the plugins. ### MODULE; * does *not* link `libpython.so` into psi4; * does *not* set `DT_SONAME` on psi4. that's ok for the local plugins where the full path that's baked in is the same as the RPATH+SONAME resolved through `ld`, but this breaks down during the v2rdm conda build. I've been unable to force a `DT_SONAME` entry onto a `MODULE` library; * one can perhaps get away with it (no errors; current state of `master`), but it's [advised not to link to a MODULE](https://stackoverflow.com/a/4968940). ### printouts from SHARED; ```; >>> readelf -d stage/lib/psi4/core.cpython-39-x86_64-linux-gnu.so . Dynamic section at offset 0x21a4aa0 contains 40 entries:; Tag Type Name/Value; 0x0000000000000001 (NEEDED) Shared library: [libpython3.9.so.1.0]; 0x0000000000000001 (NEEDED) Shared library: [libgg.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libxc.so.9]; 0x0000000000000001 (NEEDED) Shared library: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188:710,plugin,plugins,710,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188,2,['plugin'],['plugins']
Modifiability,"We have not coded explicitly the spin-adapted triplet states arising from; the EOM-CC equations starting from a singlet ground state. However, you; might be able to obtain the desired states by changing your reference to; UHF and still selecting a multiplicity of 1. The Hartree-Fock reference; should still be the same singlet state as you get from the corresponding; RHF calculation, and the EOM-CC _should_ yield both singlets and triplets.; You'll be able to sort out which is which (and make sure that everything is; running correctly) by comparing the results to the corresponding RHF-EOM-CC; calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Nov 20, 2016 at 8:51 PM, lucamontana notifications@github.com; wrote:. > one further question :; > ; > i like to calculate the eom-ccsd triplet states starting from the; > Hartree-Fock singlet ground state.; > However i do not manage to set up an input file for such calculation.; > ; > with multiplicity 3, PSI4 starts from a triplet ground state that i do not; > want.; > Any idea how to start from the HF singlet state but calculate triplet; > excited state energies in eom-CCSD?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/523#issuecomment-261824508, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ACtz7VgMGDHWFRa604RIVjYHaS0a3kseks5rAPk-gaJpZM4K3iYW; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523#issuecomment-261831203:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261831203,1,['adapt'],['adapted']
Modifiability,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:55,adapt,adapt,55,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614,2,"['adapt', 'plugin']","['adapt', 'plugins']"
Modifiability,"We tried when we extended our build to py38 and py36 some time ago there were a couple of unforeseen problems with py38, so it's unfortunately not a simple thing of just amending the config. For the moment we have put it on hold, sorry. How pressing is it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565:17,extend,extended,17,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565,2,"['config', 'extend']","['config', 'extended']"
Modifiability,"Welcome to psi4 and thanks for the PR. Could you add a regression test with your example? http://psicode.org/psi4manual/master/add_tests.html; E.g. a third `extern` version would do. If anything is unclear, please ask here or join us on slacks. edit: I forgot. Please rebase your fork to fix the CI. ---. I am wondering. In principle `mol.set_nuclear_charge(0,7.05)` should work to modify Z. However, the C molecule object doesn't get the changes only the python one. ```; molecule mol {; N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; 0 1; }. set basis 6-31G; set reference rhf. mol.set_nuclear_charge(0,7.05); print(mol.Z(0),mol.Z(1)); nn = mol.nuclear_repulsion_energy(); mol.update_geometry(); e, wfn = energy('scf',return_wfn=True); print(nn); print(wfn.variable('NUCLEAR REPULSION ENERGY')); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777:770,variab,variable,770,https://psicode.org,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777,1,['variab'],['variable']
Modifiability,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:422,variab,variable,422,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,1,['variab'],['variable']
Modifiability,"Well, https://github.com/dgasmith/psi4public/blob/wavefunction_pass/cmake/ConfigPCMSolver.cmake#L78 needs `lib` --> `share` for one thing. Can you do that, then tell me what your next error is? Both @dgasmith and I have been using pcmsolver from metapackage and so may have evaded a few issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183823400:74,Config,ConfigPCMSolver,74,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183823400,1,['Config'],['ConfigPCMSolver']
Modifiability,"When I passed OpenMP_CXX_LIBRARY_DIRS (correctly!) to cmake, it found libiomp5.so fine during the cmake step but then the build failed in the step configuring psi4-core where, presumably, the lapack detection cmake routines run again. At that point, OpenMP_CXX_LIBRARY_DIRS isn't set and it fails to find iomp5. I got past that point of the build by physically adding the relevant path into the HINTS list that includes ${OpenMP_CXX_LIBRARY_DIRS} in FindMathOpenMP.cmake (not exactly a portable solution but hopefully helps locate the problem). ```; $ ldd core.so ; linux-vdso.so.1 (0x00007ffc19d77000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x000014c592535000); libmkl_rt.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_rt.so (0x000014c591e88000); libiomp5.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64/libiomp5.so (0x000014c591aad000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x000014c59188f000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x000014c59150e000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x000014c59117b000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x000014c590f63000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x000014c590ba9000); /lib64/ld-linux-x86-64.so.2 (0x000014c595e3e000); ```. No dependence on libgomp.so and ""make test"" has passed 408/411 tests (2 longs ones still running, and cubeprop-esp failed due to a slight difference in the ESP cubes, although I've seen that fail before).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271:147,config,configuring,147,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271,2,"['config', 'portab']","['configuring', 'portable']"
Modifiability,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:172,Config,Configuration,172,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139,1,['Config'],['Configuration']
Modifiability,Where can I find the plugin cache?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271928177:21,plugin,plugin,21,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271928177,1,['plugin'],['plugin']
Modifiability,"Where was/is the check for the PSI_SCRATCH environmental variable? I'm okay with supporting the standard TMPDIR and family of variables, but I'd also like to see PSI_SCRATCH checked as not to break things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105554198:57,variab,variable,57,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105554198,2,['variab'],"['variable', 'variables']"
Modifiability,"Whew, I'd be alarmed if the hint variable wasn't doing its job. The cmake isn't set up to use $MKLROOT (I might have tried but that mkl and iomp5 aren't in the same place in a typical intel installation, as you noted). The complication is that this has to work even for `ExternalProject`s or across different computers and the purpose of TargetLAPACK is to provide a single entity to hand to subprojects without duplicating all the math detection machinery and all the cmake and envvars that influence it. I'm not sure current reworking is optimized, but I can live with one cmake hint var. The iomp5 detection works with GNU in conda b/c all the libs are gathered together so the second `find_library()` w/o `NO_DEFAULT_PATH` catches it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319:33,variab,variable,33,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319,1,['variab'],['variable']
Modifiability,While I agree raw ASCII isn't particularly a good way to go for information transfer as you noted it does seem to be in many places already. Does FCIDUMP become all that large? It would be hard to justify HDF5 for just a few megabytes of data when there are other formats like JSON/MsgPack/etc that are much more portable. Microsoft Quantum has a way of passing FCIDUMP like data using YAML with NWChem: https://docs.microsoft.com/en-us/quantum/libraries/chemistry/schema/spec?view=qsharp-preview. However that representation is pretty horrible in terms of data density.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449644430:313,portab,portable,313,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449644430,1,['portab'],['portable']
Modifiability,While im thinking of it could you replace all the `type` and `file` variable names to something else so they are not Python reserved objects/types? LGTM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532#issuecomment-263686733:68,variab,variable,68,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-263686733,1,['variab'],['variable']
Modifiability,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:176,variab,variable,176,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875,1,['variab'],['variable']
Modifiability,"Working Notes:. PSI4: Git: Rev {master} ad9c3d9; Config: RHEL/icpc/MKL/Debug; Hardware: i7x6, 64GB, 2TB. Running with GDB:. 30 GB/12 threads - passes, max memory ~27 GB, ~25 mins; 40 GB/12 threads - Segfault! . Source:. Program received signal SIGSEGV, Segmentation fault.; 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; (gdb) bt; #0 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; #2 0x0000000001bc54f7 in psi::dfmp2::RDFMP2::form_L (this=0xeb31d30); at /theoryfs2/ds/parrish/psi4public/src/bin/dfmp2/mp2.cc:1912. mp2.cc:1912 zeros Gmn, a three-center tensor which is currently 1896 x 1086^2 = 2236134816, which as we all know is just above 2^31 - 1 = 2147483647. So I suspect:. frame 1; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; 1002 memset(&(matrix_[h][0][0]), 0, size);; (gdb) print size; $1 = 18446744057257762112. Yep, matrix zero is FUBAR. The offending line is matrix.cc:999:. ```; size = rowspi_[h] * colspi_[h^symmetry_] * sizeof(double);; ```. Changed to:. ```; size = rowspi_[h] * ((size_t) colspi_[h^symmetry_]) * sizeof(double);; ```. Ed and I once worked out that casting to size_t works properly if the left-most element in a chain of integer multiplies is size_t. But I don't completely trust that, and so often do all work in size_t. I'll close if working in another half hour.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/119#issuecomment-130852343:49,Config,Config,49,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130852343,1,['Config'],['Config']
Modifiability,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344706017:39,plugin,plugin,39,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017,2,['plugin'],"['plugin', 'plugins']"
Modifiability,Would there be tests (names/descriptions) that need to be adapted?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139:58,adapt,adapted,58,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634844139,1,['adapt'],['adapted']
Modifiability,Yay! Should the headers be removed from the ambit plugin template?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/735#issuecomment-307127282:50,plugin,plugin,50,https://psicode.org,https://github.com/psi4/psi4/pull/735#issuecomment-307127282,1,['plugin'],['plugin']
Modifiability,"Yea, I realized that `HD_KAVE` only delays this result to about 50 angstroms, so I had removed that suggestion. The FCI Hamiltonian of your supplied geometry is diagonal so your eigenvectors are unit vectors (hence the `1`'s). The warnings are, in perhaps an obscure way, telling you that the wrong symmetry is found in the H0 block eigenvectors. The overlap between the Gaussian basis functions is a hard zero after about 45 angstroms, so no coupling can occur. For what its worth MOLPRO returns the same result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/561#issuecomment-271910877:443,coupling,coupling,443,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271910877,1,['coupling'],['coupling']
Modifiability,"Yea, I really need to learn that you guys do a lot of work in a few weeks and that usually requires me to clone-and-build rather than just do git pull. I do have a small problem now. I am not able to call psi4. This happens if I just run psi4 in the stage/bin directory. . File ""../../stage/home/kannon/src/psi4_cmake/Install_Debug/bin/psi4"", line 140, in <module>; import psi4; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/__init__.py"", line 72, in <module>; from .driver import endorsed_plugins; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/__init__.py"", line 35, in <module>; from psi4.driver.plugin import *; File ""/home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/lib//psi4/driver/plugin.py"", line 91, in <module>; for dir in os.listdir(plugin_path):; OSError: [Errno 2] No such file or directory: '/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271969458:719,plugin,plugin,719,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271969458,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Yeah I can't reproduce with 16.0.2 either. What version of gcc is the Intel compiler using?. > On Jul 14, 2016, at 12:24 PM, Ryan Richard notifications@github.com wrote:; > ; > My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232734584:561,config,configure,561,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232734584,1,['config'],['configure']
Modifiability,"Yeah the not defined option is best. The extra printing looks good. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 29, 2016 5:11 AM, ""Lori A. Burns"" notifications@github.com wrote:. > I like the options-processing macros, @ryanmrichard; > https://github.com/ryanmrichard.; > ; > Here you meant AND, yes? Or even better, if(NOT DEFINED ${variable})?; > https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11; > ; > You may want to copy Psi4Macros from libint back over to psi4 (diff here:; > loriab/libint1@e992700; > https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff); > as I fixed that processing problem, expanded to bool options, elaborated; > printing, and tested a range of input values/specification routes.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-236132448, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi4KbNA_LZ9m3xza9XqeG7EkicSaDks5qacPBgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236171587:368,variab,variable,368,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236171587,1,['variab'],['variable']
Modifiability,"Yeah, CheMPS2 and Psi4 have to use gnu on the same side of 5.1 b/c GCC changed their std::string compatibility. The conda CheMPS2 is def. built against the gcc5.2 in that faq. Usually you have to have the gcc5.2 environment active during configuration and build _or_ pass extra args to the compilers, as below. Doesn't hurt to do both. But you're getting past the compiler checks. I've heard of problems with 2016.1 Intel compiler set. 2016.3 is known good. Actually, @amjames, was this the error you were seeing with early 2016 compilers?. ```; PFXC=/theoryfs2/ds/cdsgroup/miniconda/envs/text35; ; ${PFXC}/bin/cmake -H. -Bobjdir53 \; -DCMAKE_C_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icc \; -DCMAKE_CXX_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc \; -DCMAKE_Fortran_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${PFXC}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288535859:238,config,configuration,238,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288535859,1,['config'],['configuration']
Modifiability,"Yeah, I think the allocation at osrecur.cc:998 was a ""let's get a version working and I'll refactor later"" and later never occurred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276352793:91,refactor,refactor,91,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276352793,1,['refactor'],['refactor']
Modifiability,"Yeah, for a general RASCI, ""occupied"" and ""virtual"" become unimportant, and what's important is frozen docc, RAS1, RAS2, RAS3, RAS4, frozen uocc. Other multi-reference correlated methods may also need more flexible orbital spaces than merely frozen-docc, active-docc, socc, active uocc, and frozen uocc. I agree that DETCI shouldn't need the Fock matrix.... anything it needs it should rebuild. It will require a Fock matrix for arbitrary-order perturbation theory computations... test ci-multi should check the MBPT capabilities (which I think use an internally-built Fock matrix), and test case zaptn-nh2 should test ZAPT. . If all the DETCI tests pass, I think it's fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454632313:206,flexible,flexible,206,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454632313,1,['flexible'],['flexible']
Modifiability,"Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:. 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; 2. Move this improved incremental Fock to the parent `JK` class. [this PR]. In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838:196,maintainab,maintainable,196,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838,1,['maintainab'],['maintainable']
Modifiability,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:370,variab,variables,370,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160,1,['variab'],['variables']
Modifiability,"Yeah, the recomp is annoying, but that `gitversion.py` takes care of at least:; - defining of `GIT_VERSION` and `PSI_VERSION` compile definitions including computing a sortable version from `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239050499:896,config,config,896,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499,1,['config'],['config']
Modifiability,"Yes @andysim, I'm definitely responsible for the crazy path that EFPs take through psi4. Without the boost registration restrictions on the efp class and the general c-side focus, perhaps I can find a better way. I'll take on the efp and filesystem aspects of The Inversion. I agree @jturney on moving plugin-writing to python. In fact, that may get done in the CMake rewrite, just to avoid having to get things working again _twice_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235360382:302,plugin,plugin-writing,302,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235360382,2,"['plugin', 'rewrite']","['plugin-writing', 'rewrite']"
Modifiability,"Yes in most cases size_t would be better. However, we need to investigate all int variables in DFOCC whether they can have negative values or not, may be some of them are signed ints. Hence, the safest solution could be changing int to long long it. Overall, size_t is okay if we sure that we are not breaking any other part of the code, if we are not sure then long long int is a good solution. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051:82,variab,variables,82,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051,1,['variab'],['variables']
Modifiability,"Yes on the first two items with a few tweaks. We can add you as an endorsed plugin [here](https://github.com/psi4/psi4/blob/fbb2ff444490bf6b43cb6e027637d8fd857adcee/psi4/driver/endorsed_plugins.py). I wouldn't write a new python module just for the binding, as long as the API is stable we could consider adding it directly to the endorsed plugin file. You could also consider reverse hooks where you have a method like `adcc.register_psi4()` which would hook into Psi4, but be called from the endorsed plugin file. . A few ways to do it, if your API is still in a bit of flux then it probably makes more sense for the code to live in your current repo. Yes to the third item :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547908018:76,plugin,plugin,76,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547908018,3,['plugin'],['plugin']
Modifiability,"Yes, I think I'll refactor all the `adcc` tests using `pytest`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513#issuecomment-1084636181:18,refactor,refactor,18,https://psicode.org,https://github.com/psi4/psi4/pull/2513#issuecomment-1084636181,1,['refactor'],['refactor']
Modifiability,"Yes, I was using Intel 2018 and GCC 5.2 and 7.2, so those are all fully C++11 compliant. If you'd like to prevent OpenBLAS from building with unsatisfactory compilers, you're welcome to adapt https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658:186,adapt,adapt,186,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-392261658,1,['adapt'],['adapt']
Modifiability,"Yes, most likely the DMRG code is not adapted to use density fitting, so it; has to go off and compute all the usual 2-electron integrals before it; starts up. On Tue, Nov 24, 2015 at 6:58 PM, Lori A. Burns notifications@github.com; wrote:. > I can't say exactly, but we usually put in that flag if the scf has been; > done DF, but the subsequent post-SCF needs for 2e- integrals.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/194#issuecomment-159443070.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/194#issuecomment-159447131:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/194#issuecomment-159447131,1,['adapt'],['adapted']
Modifiability,"Yes, see [comment](https://github.com/psi4/psi4/issues/580#issuecomment-273803591). If you absolutely must build 1.0, I can see about getting you access to a proper codebase. But because of the history rewrite, building 1.0 from main repo is impossible. Because of all the other changes, you don't even want 1.0 because you can't move forward from it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581#issuecomment-273805880:202,rewrite,rewrite,202,https://psicode.org,https://github.com/psi4/psi4/issues/581#issuecomment-273805880,1,['rewrite'],['rewrite']
Modifiability,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195054956:164,plugin,plugin,164,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956,2,['plugin'],['plugin']
Modifiability,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276091624:384,Config,ConfigMath,384,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624,1,['Config'],['ConfigMath']
Modifiability,"Yes, that is exactly the contents of the above location. This plugin is just the basic psi4 plugins. All of them fail to compile/install. If I search for @CXX, this shows up in every CMakeLists.txt in the Build/psi4 plugins directory. . No, I have never used `--inplace`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271956386:62,plugin,plugin,62,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271956386,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Yes, that's just what we needed. We made some changes in 1.6 (finally delivering on the driver refactor we promised in the 1.4 paper) with a very high likelihood of causing bugs in how Psi4 passes information around, which is what your error appears to be. ""Check the interface to CFOUR works"" may have slipped through the cracks of things we tested. Lori would know for sure. I unfortunately don't have CFOUR so can't test this myself, but I'll agitate to get a hold of one of the developers who does.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225:95,refactor,refactor,95,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155154225,1,['refactor'],['refactor']
Modifiability,"Yes, that’s exactly how to fix that error. The API changed in Nov. (couple weeks ago for the public mirror), but stray cases like you found are still popping up. Thanks for the catch. Lori. > On Mar 1, 2015, at 3:53 PM, wpoely86 notifications@github.com wrote:; > ; > I was trying the sointegrals plugin with 14c78ea https://github.com/psi4/psi4public/commit/14c78eabdca86f8e094576890518d93d300d2500 but I got a exception:; > ; > RuntimeError: CoordEntry::basisset: Basisset not set for H and type of BASIS; > GDB show this as the traceback:; > ; > #0 __cxa_throw () at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:62; > #1 0x0000000001967124 in psi::CoordEntry::basisset (this=0x3fcde30, type=...) at src/lib/libmints/coordentry.cc:125; > #2 0x0000000001883551 in psi::BasisSet::construct (parser=..., mol=..., type=...) at src/lib/libmints/basisset.cc:718; > #3 0x00002aaab8f93f66 in sointegrals () from ./sointegrals.so; > Has something in the API changed that needs changing in the plugin?; > Replacing the line; > ; > shared_ptr<BasisSet> aoBasis = BasisSet::construct(parser, molecule, ""BASIS"");; > with; > ; > shared_ptr<BasisSet> aoBasis= BasisSet::pyconstruct_orbital(molecule, ""BASIS"", options.get_str(""BASIS""));; > seems to help. Is this the correct way of handling this?; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/74.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74#issuecomment-76630641:297,plugin,plugin,297,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76630641,2,['plugin'],['plugin']
Modifiability,"Yes, the 1 electron integral routines are getting a very significant rewrite after that pull request is in; they will use libint2, and will be screened for overlap. The original 1e integral code was really written with the standard core hamiltonian in mind, where performance is never an issue. Parallelization of that rewritten code should be relatively easy. I haven't quite decided the best order to reconcile the changes to the integral engine with #1946 yet, but we'll get that merged as soon as we can. Thanks for posting this issue so that we can all coordinate - hopefully everything will be much easier when all of the old integral code is ripped out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528:69,rewrite,rewrite,69,https://psicode.org,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528,1,['rewrite'],['rewrite']
Modifiability,"Yes, the HF subclasses are fine. More general wavefunctions are not. We stumbled across it by trying to take a CASSCF wavefunction, convert it to c1, and feed that the de-symmetrized orbitals into an orbital localizer. This is a different use case than passing a reference!. I would think that the `hf.cc` class can figure out what it needs to do, based on checking `same_a_b_orbs` and `same_a_b_dens`. Other subclasses should only need to extend if it needs anything more sophisticated than that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2777#issuecomment-1317600770:440,extend,extend,440,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317600770,1,['extend'],['extend']
Modifiability,"Yes, the `copy_if_different` was what used to work (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2). One of the psi4/psi4-config --version wasn't responding properly so I just clobbered it with `copy`. I'd prefer to go back to it, but there may be subtle unworkingness. The make fast trick is neat. I don't think it had spread to GaTech.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239053251:160,config,config,160,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239053251,1,['config'],['config']
Modifiability,"Yes, the integrals are recomputed every time a new DiskJK is built. There; is presently no way to avoid this. If you are being hamstrung by the AO; integrals, I recommend a DFJK object or perhaps a DirectJK object. Best,. -Rob. On Wed, Feb 4, 2015 at 1:59 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > I'm using DiskJK in a plugin:; > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292; > . Does it reuse the existing disk AO integrals or does it recompute them?; > In case of the latter: How do I avoid this? Is there a way to fetch the JK; > from the wavefunction object or the environment?; > ; > Thank you for your time and answer!; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/65.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65#issuecomment-72927187:347,plugin,plugin,347,https://psicode.org,https://github.com/psi4/psi4/issues/65#issuecomment-72927187,1,['plugin'],['plugin']
Modifiability,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172147949:9,plugin,plugin,9,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Yes, the shortcoming of (T) on non-equilibrium structures is know.; PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735:318,plugin,plugin,318,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611923735,1,['plugin'],['plugin']
Modifiability,"Yes, the symmetrize call is nice and should help cleanup any inevitable; small numerical noise. Would be great if it could be extended to; non-Abelian point groups! But the noise @wardence is seeing looks a bit; more serious than just roundoff error. (Sorry to tease an issue before it; gets posted.). On Tue, Dec 12, 2017 at 3:17 PM, Andy Simmonett <notifications@github.com>; wrote:. > I think that a little noise in the gradients is inevitable with so many; > moving parts; that's why we have calls like this; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275>; > for all (I think) gradients throughout the code. It sounds like we just; > need to consider non-Abelian symmetry in this routine to fix the issue; > you're describing; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351180986>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdgWeF2gB7_UhJZNjJt2DDz91wdahks5s_t9IgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351195906:126,extend,extended,126,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351195906,1,['extend'],['extended']
Modifiability,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258681365:295,plugin,plugin,295,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365,2,['plugin'],['plugin']
Modifiability,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343777115:173,plugin,plugins,173,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115,6,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,"Yes. For py-side development, can probably get away setting PSIDATADIR and running driver on source. But, on the whole, I'm resigned. We did have cases, e.g., plugins, where psi4 was supporting running from source in preference to running from installed; it'll be simpler supporting just the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235905609:159,plugin,plugins,159,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235905609,1,['plugin'],['plugins']
Modifiability,You also need to put the 2nd layer into the molecule section to have it enter the calculation.; Adding surrounding point charges in place of Na Cl atoms from missing layers/edges is a common way to do slabs in molecular codes (point charge embedding). Stabilises the electrostatics and reduces edge effects. Should help to converge the SCF as well. I'd suggest trying def2-SVP and a (meta)GGA and first see if you can converge the SCF before doing a geometry optimisation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209:166,layers,layers,166,https://psicode.org,https://github.com/psi4/psi4/issues/2709#issuecomment-1232961209,1,['layers'],['layers']
Modifiability,You also wouldn't have the problem if the loop variables weren't declared globally :wink:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2077#issuecomment-755482830:47,variab,variables,47,https://psicode.org,https://github.com/psi4/psi4/pull/2077#issuecomment-755482830,1,['variab'],['variables']
Modifiability,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:606,config,config,606,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,1,['config'],['config']
Modifiability,"You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py. This is a bit complex compared to what you wish to do, but it may give a better product. Here is everything unwound:. ```python; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:359,config,config,359,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['config'],['config']
Modifiability,"You're right about the potential for plugins. My vote is to ping @fevangelista to see if any of these are needed in Forte. If not, I suggest we remove them and encourage plugin writers to file issues for missing bindings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433449526:37,plugin,plugins,37,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433449526,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:340,variab,variable,340,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887,2,['variab'],['variable']
Modifiability,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:267,extend,extend,267,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,2,"['extend', 'plugin']","['extend', 'plugins']"
Modifiability,[Here](http://psicode.org/psi4manual/master/external.html#environment-variables) maybe (compiled)? Can edit it directly with the pencil icon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/671#issuecomment-305372235:70,variab,variables,70,https://psicode.org,https://github.com/psi4/psi4/issues/671#issuecomment-305372235,1,['variab'],['variables']
Modifiability,"_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:3049,variab,variable,3049,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,`CMakeCache`:. ```; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=Boost_PYTHON_LIBRARY_DEBUG-NOTFOUND; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=Boost_PYTHON_LIBRARY_RELEASE-NOTFOUND; PYTHON_EXECUTABLE:FILEPATH=/Users/loriab/anaconda/bin/python; PYTHON_INCLUDE_DIR:PATH=/Users/loriab/anaconda/include/python2.7; PYTHON_INTERPRETER:UNINITIALIZED=/Users/loriab/anaconda/bin/python; PYTHON_LIBRARY:FILEPATH=/Users/loriab/anaconda/lib/libpython2.7.dylib; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_DEBUG; Boost_PYTHON_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_RELEASE; Boost_PYTHON_LIBRARY_RELEASE-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_EXECUTABLE; PYTHON_EXECUTABLE-ADVANCED:INTERNAL=0; //ADVANCED property for variable: PYTHON_INCLUDE_DIR; PYTHON_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_LIBRARY; PYTHON_LIBRARY-ADVANCED:INTERNAL=1; ```. setup output:. ```; -- The CXX compiler identification is AppleClang 6.1.0.6020053; -- The C compiler identification is AppleClang 6.1.0.6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:461,variab,variable,461,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,5,['variab'],['variable']
Modifiability,"`CheMPS2_DIR` is the right approach, but it wants the dir with the `CheMPS2Config.cmake`, not the root dir. [here D for details](http://psicode.org/psi4manual/master/chemps2.html#how-to-configure-chemps2-for-building-psi4). Blame CMake, not me, for that one. I think that's the problem. But if that fails, remove the version from [here](https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L2) and [here](https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L59).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288503545:186,config,configure-,186,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288503545,1,['config'],['configure-']
Modifiability,"`DESTDIR` hasn't been part of Psi4 cmake for a few years since it was updated for Windows compatibility. Looking through some docs, I see it can have influence if set as an environment variable. That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186:185,variab,variable,185,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186,1,['variab'],['variable']
Modifiability,"`LLVM` compatibility with `MSVC` ABI is not yet complete (http://clang.llvm.org/docs/MSVCCompatibility.html), so compiling with `LLVM` and linking with the C++ library from `MSVC`, might give some problems. I got just one linkage problem! It happens when trying to create `psi::PsiOutStream` with `std::make_shared`, while passing `mode` argument:; ```c++; auto printer = std::make_shared<psi::PsiOutStream>(""filename"", std::ostream::trunc);. error LNK2001: unresolved external symbol ""__declspec(dllimport) public: static enum std::_Iosb<int>::_Openmode const std::_Iosb<int>::trunc"" (__imp_?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B); ```; but it works, in such cases:; ```c++; // Creating std::share_ptr explicitly; auto printer = std::shared_ptr(new psi::PsiOutStream(""filename"", std::ostream::trunc));. // Using the argument default value (mode = std::ostream::trunc); auto printer = std::make_shared<psi::PsiOutStream>(""filename"");. // Using a temporary variable; auto mode = std::ostream::trunc;; auto printer = std::make_shared<psi::PsiOutStream>(""filename"", mode);; ```; I use the last case to fix the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425938802:957,variab,variable,957,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425938802,1,['variab'],['variable']
Modifiability,"`NO_RESPONSE` is only for SAPT0, that's right. The open-shell SAPT0 uses a different implementation and a different variable (I think it's `COUPLED_INDUCTION`) that already issues the proper warning, so I thought it would be more consistent to have closed-shell SAPT0 do the same. Currently, when induction is uncoupled, the induction energy gets put in both an UNCOUPLED and a COUPLED induction Psivar, with a warning in the output file. Would you rather have us not set the COUPLED variables ? We could then delete the warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-362872366:116,variab,variable,116,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-362872366,2,['variab'],"['variable', 'variables']"
Modifiability,`PYTHON_INTERPRETER` is specific to our `setup` script and `ConfigPython`. The `cmake` value is `PYTHON_EXECUTABLE`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/378#issuecomment-218800322:60,Config,ConfigPython,60,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218800322,1,['Config'],['ConfigPython']
Modifiability,"```; $ ctest -R cubeprop-esp -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp ...................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:127,Config,Config,127,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,2,['Config'],['Config']
Modifiability,"```; $ ctest -R json-schema_0_properties -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:139,Config,Config,139,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,2,['Config'],['Config']
Modifiability,"```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simintConfig.cmake:set(simint_VECTOR sse); ./external/upstream/simint/simint_external-prefix/tmp/simint_external-cfgcmd.txt:cmd='/Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake;-DCMAKE_INSTALL_PREFIX=/usr/local/psi4;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_C_COMPILER=/usr/bin/clang;-DCMAKE_CXX_COMPILER=/usr/bin/clang++;-DCMAKE_INSTALL_LIBDIR=lib;-DCMAKE_INSTALL_INCLUDEDIR=include;-DBUILD_SHARED_LIBS=OFF;-DCMAKE_POSITION_INDEPENDENT_CODE=ON;-DSIMINT_STANDALONE=OFF;-DENABLE_TESTS=OFF;-DSIMINT_VECTOR=sse;-DSIMINT_MAXAM=6;-C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-$<CONFIG>.cmake;-GUnix Makefiles;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external'; ./stage/usr/local/psi4/share/cmake/simint/simintConfig.cmake:set(simint_VECTOR sse); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:2642,CONFIG,CONFIG,2642,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['CONFIG'],['CONFIG']
Modifiability,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:801,CONFIG,CONFIG,801,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705,1,['CONFIG'],['CONFIG']
Modifiability,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:1453,config,config,1453,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561,3,['config'],['config']
Modifiability,"`dfmp2-4` and `opt-irc-2` are currently failing as well. `dfmp2-4` just needs to adapt to syntax from PR #1789 and is easily fixed. `opt-irc-2` fails because the last IRC point does not have the expected energy. I suspect #1804 instigated this, but the true culprit is that optking cannot accurately say when the IRC converged. The IRC report when I run the test is. ```; @IRC ----------------------------------------------; @IRC **** IRC Report **** ; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -92.810710767266 -92.810710767266; @IRC 1 -92.811778450261 -0.001067682995; @IRC 2 -92.814803984808 -0.003025534547; @IRC 3 -92.819270546903 -0.004466562095; @IRC 4 -92.824389153679 -0.005118606776; @IRC 5 -92.829383508727 -0.004994355049; @IRC 6 -92.833903705977 -0.004520197249; @IRC 7 -92.838018066774 -0.004114360797; @IRC 8 -92.841889747803 -0.003871681030; @IRC 9 -92.845625951635 -0.003736203832; @IRC 10 -92.849260395757 -0.003634444122; @IRC 11 -92.852777598444 -0.003517202687; @IRC 12 -92.856140015989 -0.003362417545; @IRC 13 -92.859308223013 -0.003168207024; @IRC 14 -92.862250220465 -0.002941997452; @IRC 15 -92.864943075409 -0.002692854944; @IRC 16 -92.867368006399 -0.002424930990; @IRC 17 -92.869505711996 -0.002137705597; @IRC 18 -92.871329201900 -0.001823489904; @IRC 19 -92.872798961306 -0.001469759406; @IRC 20 -92.873862613736 -0.001063652429; @IRC 21 -92.874464128325 -0.000601514589; @IRC 22 -92.874561860949 -0.000097732624; @IRC 23 -92.874559174537 0.000002686412; @IRC 24 -92.874584188151 -0.000025013614; @IRC 25 -92.874518478044 0.000065710108; @IRC 26 -92.874584083068 -0.000065605025; @IRC 27 -92.874584016106 0.000000066962; @IRC ----------------------------------------------; ```. Compared to the reference from 2017, the first step has an energy difference on the order of 1e-4, and the energy difference remains at or below 1e-4 up to step 22. If I had to guess, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226:81,adapt,adapt,81,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-592806226,1,['adapt'],['adapt']
Modifiability,"`mp2_test.py` changed by no longer looking for custom spin variables when custom spin wasn't set, but that was all. Now that this is in, time for the Big One...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-582496652:59,variab,variables,59,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-582496652,1,['variab'],['variables']
Modifiability,"`omp_get_thread_num()` will work even in a plugin:. ```; void timer_on(); {; printf(""timer thread rank: %d\n"", omp_get_thread_num());; }. extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }; } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. You must call `psi4 -n 4` or some other number because psi4 tells OpenMP to use 1 thread by default. ```; Attention! This SCF may be density-fitted.; Hello World from thread = 0; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; timer thread rank: 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; Number of threads = 4; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; timer thread rank: 0; Number of threads = 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308702663:43,plugin,plugin,43,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308702663,2,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"a-forge; python 3.8.13 hcf16a7b_0_cpython conda-forge; python_abi 3.8 2_cp38 conda-forge; pyyaml 6.0 py38h294d835_4 conda-forge; qcelemental 0.17.0 py_0 psi4; qcengine 0.19.0 pyhd8ed1ab_0 psi4; scipy 1.8.1 py38h9bf8e03_0 conda-forge; setuptools 61.2.0 py38haa95532_0; sqlite 3.38.3 h2bbff1b_0; tk 8.6.12 h8ffe710_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; vc 14.2 h21ff451_1; vs2015_runtime 14.27.29016 h5e58377_2; wheel 0.37.1 pyhd3eb1b0_0; wincertstore 0.2 py38haa95532_2; xz 5.2.5 h62dcd97_1 conda-forge; yaml 0.2.5 h8ffe710_2 conda-forge; zipp 3.8.0 pyhd8ed1ab_0 conda-forge; ```. Manually updating pydantic with `pip install -U pydantic`, installs version 1.9.1 and then running `psi4 --test` gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:2869,config,configfile,2869,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['config'],['configfile']
Modifiability,"a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Le",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4663,config,config,4663,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['config'],['config']
Modifiability,"ably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.52915989; > H 2.41269553 -1.74021190 -3.52915989; > units bohr; > }; >; > set {; > basis 6-31G; > d_convergence 11; > points 5; > }; >; > anl = gradient('scf', df_functional='wB97X-D', dertype=1); > num = gradient('scf', df_functional='wB97X-D', dertype=0); >; > anl.print_out(); > num.print_out(); >; > Yields the following analytic/numerical grads for B3LYP:; >; > ## Total Gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 -0.00000000000000 0.01448961501491; > 2 0.00000000000000 0.00000000000000 0.00650495770571",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351166112:1502,rewrite,rewrite,1502,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112,1,['rewrite'],['rewrite']
Modifiability,acke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2810,Config,ConfigMath,2810,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4605,plugin,plugin,4605,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661#issuecomment-288652354:52,variab,variable,52,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354,4,"['config', 'variab']","['configuration', 'configure', 'variable']"
Modifiability,"al_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1162,config,configfile,1162,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['config'],['configfile']
Modifiability,an/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4681,plugin,plugins,4681,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1760,plugin,plugin,1760,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugin']
Modifiability,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271921477:17,plugin,plugins,17,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1017,adapt,adapted,1017,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,2,"['adapt', 'config']","['adapted', 'configurational']"
Modifiability,"ata: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); opa_plot = plot_spectrum(opa_spectrum,; title=""OPA (Gaussian broadening)"",; x_title=(""λ"", ""nm"")). ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""); ecd_plot = plot_spectrum(ecd_spectrum,; title=""ECD (Gaussian broadening)"",; x_title=(""λ"", ""nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:2972,layers,layers,2972,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['layers'],['layers']
Modifiability,"ather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78""; > ; > ALL THE BEST; > LUCA; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/98#issuecomment-105341330. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:2450,variab,variables,2450,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['variab'],['variables']
Modifiability,"b/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:1049,CONFIG,CONFIG,1049,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['CONFIG'],['CONFIG']
Modifiability,"bject would also be welcome. The proposed layer of abstraction between DPD and libpsio is perhaps worth some discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:1118,rewrite,rewrite,1118,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['rewrite'],['rewrite']
Modifiability,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:1045,config,config,1045,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,1,['config'],['config']
Modifiability,"c. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE_CXX_API=ON \; -D REQUIRE_CXX_API_COMPILED=OFF \; -D BUILD_TESTING=ON \; -D CMAKE_PREFIX_PATH=""/psi/toolchainconda/envs/singleboost;/psi/toolchainconda/envs/singlegmp;/psi/toolchainconda/envs/singleeigen"" \; -D ENABLE_MPFR=OFF \; -D LIBINT_LOCAL_EIGEN3_INSTALL=OFF \; -D CMAKE_CXX_COMPILER=$CXX \; -D CMAKE_C_COMPILER=$CC \; -D ENABLE_FORTRAN=OFF \; -D LIBINT2_SHGAUSS_ORDERING=standard \; -D ERI3_PURE_SH=OFF \; -D ERI2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:2132,config,configures,2132,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['config'],['configures']
Modifiability,"can't run the pytest tests locally?; * `cd <objdir>`; * adjust PATH for psiapi http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-paths-for-psiapi via `<objdir>/bin/psi --psiapi-path`; * get pytest via `conda install pytest` or `pip install pytest`; * `pytest ../tests/pytest -k methane-H_analytic`; the pytest tests can also be run via `psi4.test()`, `psi4 --test`, or `make pytest` but the above has more control. Yes, confirmed non-deterministic, so above was a red herring, sorry. But something has made it much less stable than before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452372272:143,config,configure-paths-for-psiapi,143,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452372272,1,['config'],['configure-paths-for-psiapi']
Modifiability,"cause ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of targ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:1263,config,configuration,1263,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,1,['config'],['configuration']
Modifiability,"ch is fine (https://clang.llvm.org/docs/UsersManual.html#clang-cl).; > Yes, indeed. The code in clang/lib/Driver/ToolChains/Arch/X86.cpp makes that –march is always parsed, leaving out /arch unused, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2494,variab,variable,2494,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['variab'],['variable']
Modifiability,"characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"";",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:1549,plugin,plugin,1549,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['plugin'],['plugin']
Modifiability,"class, it is important that the implementation be as efficient and maintainable as possible. In that respect, I think there are some general improvements to be made:; > ; > The way you've structured incremental Fock keeps eight lists of matrices attached to each `JK` object: copies of the previous `J`, `K`, `wK`, and `D` matrices, and differences between the last two iterations `J`, `K`, `wK`, `D`. In the interest of efficiency, I think it would be best to not store these matrices. Incremental Fock as implemented in the `DFJCOSK` class is a little better about this. That code adds the difference in `J`/`K`/`wK` to the appropriate buffer, which is not zeroed out between SCF iterations. This requires keeping only one list of matrices, the previous iteration `D`, which in my opinion is cleaner. (I have some thoughts on getting around storing the previous `D` matrix too.); > ; > Speaking more broadly about the design of the `JK` class, one valuable aspect of the `JK` class is that it is stateless and decoupled from the SCF procedure. `JK` classes have a well-defined [interface](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L175-L209). The variables like `incfock_count_` that you've proposed adding to the `JK` class break this statelessness, and my opinion that kind of logic should be in the SCF driver, not the `JK` object.; > ; > Let me know if any of these thoughts are unclear. I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. The scope of this PR is to fix the numerical instabilities of `incfock` in COSX. Per @davpoolechem, using `incfock` on COSX indeed leads to significant time savings on larger systems, even if it is always OFF by default for the last iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623:1391,variab,variables,1391,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623,2,"['refactor', 'variab']","['refactor', 'variables']"
Modifiability,"clude; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; I'll have a poke about to see if I can get it to build, either within the main psi4 build or stand alone (happy to submit this as a new issue, if that would be preferable).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:2088,config,configure,2088,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,2,['config'],['configure']
Modifiability,cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5049,plugin,plugins,5049,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"cmake is the barrier to libxc 3. it's not been proven impossible, but I'm not eager to try find_package to pkg-config. a tag (first point of https://gitlab.com/libxc/libxc/issues/61) is the major barrier to libxc 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450762992:111,config,config,111,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450762992,1,['config'],['config']
Modifiability,cmake var `Libxc_DIR` can likely help https://psicode.org/psi4manual/master/libxc.html?highlight=libxc_dir#how-to-configure-libxc-for-building-psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2676#issuecomment-1212508760:114,config,configure-libxc-for-building-,114,https://psicode.org,https://github.com/psi4/psi4/issues/2676#issuecomment-1212508760,1,['config'],['configure-libxc-for-building-']
Modifiability,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1497,config,config,1497,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['config'],['config']
Modifiability,"ct pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5030,config,config,5030,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['config'],['config']
Modifiability,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1807,adapt,adapted,1807,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,2,['adapt'],['adapted']
Modifiability,"d, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract444.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract444.cc; ```. I should probably turn off verbose compile in general, then this PR is rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2805,variab,variable,2805,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['variab'],['variable']
Modifiability,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1261,Config,Configuring,1261,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Config'],['Configuring']
Modifiability,d8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2.1.3 pyhd8ed1ab_0 conda-forge; flask-jwt-extended 4.5.2 pyhd8ed1ab_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; font-ttf-dejavu-sans-mono 2.37 hab24e00_0 conda-forge; font-ttf-inconsolata 3.000 h77eed37_0 conda-forge; font-ttf-source-code-pro 2.038 h77eed37_0 conda-forge; font-ttf-ubuntu 0.83 hab24e00_0 conda-forge; fontconfig 2.14.2 h82840c6_0 conda-forge; fonts-conda-ecosystem 1 0 conda-forge; fonts-conda-forge 1 0 conda-forge; fonttools 4.33.3 py39h9eb174b_0 conda-forge; freetype 2.12.1 hd633e50_1 conda-forge; frozenlist 1.4.0 py39h0f82c59_1 conda-forge; gau2grid 2.0.7 h1a8c8d9_2 conda-forge; geoip2 4.7.0 pyhd8ed1ab_0 conda-forge; geometric 1.0 pyhd8ed1ab_1 conda-forge; gettext 0.21.1 h0186832_0 conda-forge; gflags 2.2.2 hc88da5d_1004 conda-forge; giflib 5.2.1 h27ca646_2 conda-forge; globus-sdk 3.28.0 pyhd8ed1ab_0 conda-forge; glog 0.6.0 h6da1cb0_0 conda-forge; greenlet 1.1.2 py39h0ef5a74_2 conda-forge; grpc-cpp 1.51.1 h44b9a77_1 conda-forge; gtest 1.14.0 h1995070_1 conda-forge; gunicorn 21.2.0 py3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:2966,extend,extended,2966,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['extend'],['extended']
Modifiability,"ding by :py:func:`~psi4.driver.p4util.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(curren",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:1429,plugin,plugin,1429,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['plugin'],['plugin']
Modifiability,"e really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict anymore. . Objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1817,variab,variables,1817,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050,4,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,adapt,adapter,1081,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapter']
Modifiability,"e-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/build.make:106: recipe for target 'external/upstream/ambit/ambit_external-prefix/src/ambit_external-stamp/ambit_external-configure' failed; make[2]: *** [external/upstream/ambit/ambit_external-prefix/src/ambit_external-stamp/ambit_external-configure] Error 1; CMakeFiles/Makefile2:1220: recipe for target 'external/upstream/ambit/CMakeFiles/ambit_external.dir/all' failed; make[1]: *** [external/upstream/ambit/CMakeFiles/ambit_external.dir/all] Error 2. ```; Later on, I'll also try building against CUDA to see if gpu_dfcc now builds (it had the OpenMPMath error when I tried the other day), although that also involves fighting g++ versions, etc...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:1628,Config,Configuring,1628,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,3,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"ec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1216,adapt,adapted,1216,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['adapt'],['adapted']
Modifiability,"ecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2. ```; (I'm not convinced that uncommenting the cmake_print_properties bit at the end of FindMathOpenMP.cmake produced much more in the way of output.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:4858,Config,Configuring,4858,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,3,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"ers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2593,plugin,plugin,2593,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugin']
Modifiability,esp. 16 & 20 seemed close enough (docs & test McGibbon's resp plugin) to be tickets in their own right. but feel free to edit.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/508#issuecomment-259291901:62,plugin,plugin,62,https://psicode.org,https://github.com/psi4/psi4/issues/508#issuecomment-259291901,1,['plugin'],['plugin']
Modifiability,"except for the last they all give the same error with not finding cdefs.h; ```; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ```. last one gives:; icpc --sysroot=$CONDAENV/x86_64-conda_cos6-linux-gnu/sysroot -Qlocation,ld,$CONDAENV/x86_64-conda_cos6-linux-gnu/bin hello.cc -o hello && ./hello; ```; In file included from hello.cc(1):; /usr/include/c++/5/iostream(38): catastrophic error: cannot open source file ""bits/c++config.h""; #include <bits/c++config.h>; ```; file exist here: /usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386733869:490,config,config,490,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386733869,3,['config'],['config']
Modifiability,"external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3788,Config,Config,3788,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['Config'],['Config']
Modifiability,fchk in Psi4 is mainly data transfer for gdma (for which we had a few fchk from the code you allude to). The fchk enhancements are good for psi4/psi4#402 and maybe as a starter project for our developers workshop this week.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708#issuecomment-301914256:114,enhance,enhancements,114,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301914256,1,['enhance'],['enhancements']
Modifiability,"fwiw, I don't anticipate GT having problems if GCC min boosted. alternately, can do alternate defs of the enum with preprocessor variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-767309054:129,variab,variables,129,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-767309054,1,['variab'],['variables']
Modifiability,"g is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2783,plugin,plugin,2783,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugin']
Modifiability,"g not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4512,config,config,4512,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['config'],['config']
Modifiability,g/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4785,plugin,plugins,4785,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2143,adapt,adapting,2143,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['adapt'],['adapting']
Modifiability,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1253,plugin,plugin,1253,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746,3,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,gins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > C,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5668,plugin,plugins,5668,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a depreca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:3595,rewrite,rewrite,3595,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['rewrite'],['rewrite']
Modifiability,"globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1291; #423 0x000055ff90740523 in run_mod (mod=mod@entry=0x55ff952b55d8, filename=filename@entry=0x7fac0e29b2d0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0, ; flags=flags@entry=0x7fff1128dce8, arena=arena@entry=0x7fac0e303b90) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1312; #424 0x000055ff905d76f5 in pyrun_file (fp=fp@entry=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, start=start@entry=257, globals=globals@entry=0x7fac0e241bc0, ; locals=locals@entry=0x7fac0e241bc0, closeit=closeit@entry=1, flags=0x7fff1128dce8) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1208; #425 0x000055ff9073a9fe in _PyRun_SimpleFileObject (fp=0x55ff95162c40, filename=0x7fac0e29b2d0, closeit=1, flags=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:456; #426 0x000055ff9073a594 in _PyRun_AnyFileObject (fp=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, closeit=closeit@entry=1, flags=flags@entry=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:90; #427 0x000055ff9073778b in pymain_run_file_obj (skip_source_first_line=0, filename=0x7fac0e29b2d0, program_name=0x7fac0e299d10) at /usr/local/src/conda/python-3.10.14/Modules/main.c:357; #428 pymain_run_file (config=0x55ff95142180) at /usr/local/src/conda/python-3.10.14/Modules/main.c:376; #429 pymain_run_python (exitcode=0x7fff1128dce4) at /usr/local/src/conda/python-3.10.14/Modules/main.c:591; #430 Py_RunMain () at /usr/local/src/conda/python-3.10.14/Modules/main.c:670; #431 0x000055ff907081f7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>) at /usr/local/src/conda/python-3.10.14/Modules/main.c:1090; #432 0x00007fac1bfc1088 in __libc_start_call_main () from /lib64/libc.so.6; #433 0x00007fac1bfc114b in __libc_start_main_impl () from /lib64/libc.so.6; #434 0x000055ff907080f1 in _start (); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:88853,config,config,88853,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['config'],['config']
Modifiability,"he user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.; > ; > ## ; > ; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/56; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:2187,variab,variable,2187,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,1,['variab'],['variable']
Modifiability,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:146,adapt,adapted,146,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['adapt'],['adapted']
Modifiability,"i4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be valid until the wavefunction is destroyed. The same would need to be done for the cclambda wavefunction as well. . The constructing the dpd object is far from trival as it allocates memory for and computes index translations for all possible pairs and quartets of the orbital subspaces provided, since this is only done once at the beginning of each module using a DPD I haven't looked into how significan the overhead is but it may be an issue for the first option. The second option is better for code quality, and I once played around with this idea in a plugin years ago, but I never got to the point where I could test if there were any unforeseen consequences down the pipeline (subsequent calls to other CC* modules).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:2556,plugin,plugin,2556,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,1,['plugin'],['plugin']
Modifiability,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3195,plugin,plugin,3195,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,7,['plugin'],"['plugin', 'plugins']"
Modifiability,"ian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'cc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:1412,config,config,1412,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['config'],['config']
Modifiability,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1239,adapt,adapt,1239,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['adapt'],['adapt']
Modifiability,"ift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Scaling Factor: 0.707. SAPT(DFT) Results; ---------------------------------------------------------------------------------------------------------; Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2729,variab,variable,2729,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,"il.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(current_module); return flat_options; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:1531,rewrite,rewrite,1531,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['rewrite'],['rewrite']
Modifiability,"ine 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __init__\n self._execute_child(args, executable, preexec_fn, close_fds,\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 1251, in _execute_child\n args = list2cmdline(args)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 553, in list2cmdline\n for arg in map(os.fsdecode, seq):",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:2124,config,config,2124,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['config'],['config']
Modifiability,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1600,plugin,pluginintegrales,1600,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,6,['plugin'],['pluginintegrales']
Modifiability,issing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5501,plugin,plugins,5501,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,ists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5199,plugin,plugins,5199,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"ix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; > 	lda is the number of columns of matrix A; > 	ldb is the number of columns of matrix B; > 	ldc is the number of columns of matrix C; > 	do the actual matrix multiplication; > ```; > ; > BLAS savants will notice that I simplified the explanation of `lda`, `ldb`, and `ldc` because we can assume contiguous memory. Thanks for the explanation. I edited the program to check for each symmetry block. I'm not entirely sure how the symmetry_ variable works (and the xor involvement), but I mimicked how it was used in other parts of the method.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:2452,variab,variable,2452,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,1,['variab'],['variable']
Modifiability,"l = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_geo, return_wfn=True); density_mat_0iters = wfn_sad.Da().to_array(). np.isclose(sad_guess_manual, density_mat_0iters, atol=1e-5).sum() / (density_mat_0iters.shape[0] ** 2); >> 0.08549818 # should be close to 1.00 but no :/ ; ```. i think this must mean that even setting `maxiter = 0` already evolves the initial guess",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:2293,evolve,evolves,2293,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['evolve'],['evolves']
Modifiability,"lassify.cc; src/psi4/ccdensity/densgrid_RHF.cc; src/psi4/ccdensity/distribute.cc; src/psi4/ccdensity/file_build.cc; src/psi4/ccdensity/get_frozen.cc; src/psi4/ccdensity/idx_error.cc; src/psi4/ccdensity/idx_permute.cc; src/psi4/ccdensity/resort_gamma.cc; src/psi4/ccdensity/resort_tei.cc; src/psi4/ccdensity/x_xi_check.cc; src/psi4/ccenergy/cc2_WabijT2.cc; src/psi4/cceom/check_sum.cc; src/psi4/cceom/hbar_norms.cc; src/psi4/cceom/norm_HC1.cc; src/psi4/cceom/sigmaCC3_RHF.cc; src/psi4/cceom/sort_amps.cc; src/psi4/cchbar/Wabei_RHF_FT2_a.cc; src/psi4/cclambda/overlap_LAMPS.cc; src/psi4/cclambda/BL2_AO.cc; src/psi4/cclambda/Lmag.cc; src/psi4/cclambda/WabeiL1.cc; src/psi4/cclambda/check_sum.cc; src/psi4/cclambda/halftrans.cc; src/psi4/cclambda/spinad_amps.cc; src/psi4/ccresponse/print_X.cc; src/psi4/cctriples/ET_AAA.cc; src/psi4/cctriples/ET_AAB.cc; src/psi4/cctriples/ET_ABB.cc; src/psi4/cctriples/ET_BBB.cc; src/psi4/cctriples/test_abc_loops.cc; src/psi4/detci/import_vector.cc; src/psi4/dfocc/arrays.cc; src/psi4/dfocc/combine_ref_sep_tpdm.cc; src/psi4/dfocc/conv_mo_tei.cc; src/psi4/dfocc/conv_mo_tei_ref.cc; src/psi4/dfocc/fock_so.cc; src/psi4/dfocc/olddf.cc; src/psi4/dfocc/ref_grad.cc; src/psi4/dfocc/t2_1st_scs_gen.cc; src/psi4/dfocc/t2_1st_scs_sc.cc; src/psi4/dfocc/z_vector_cg.cc; src/psi4/mcscf/algebra_interface.cc; src/psi4/psimrcc/blas_resorting.cc; src/psi4/psimrcc/matrix_iterator.cc; src/psi4/psimrcc/mrcc_mkccsd.cc; src/psi4/psimrcc/mrcc_mp3.cc; src/psi4/psimrcc/sort_in_core.cc; src/psi4/psimrcc/updater_sr.cc; ```. This list is already cleaned of IWL, Transqt2, and CCSort. It may be worth cleaning out some of the deprecated libciomr/libqt things. It could probably be argued that they shouldnt be called anymore. There is a good bit of lib3index/libfock that Rob wrote as toy code which may be better to live in plugins as well. We may be able to clean up some of the other files as well. Overall I agree with @andysim, another pass through the headers is probably worthwhile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262124158:2985,plugin,plugins,2985,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262124158,1,['plugin'],['plugins']
Modifiability,"led with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, 21 deselected in 80.60 seconds =============; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3990,plugin,plugin,3990,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,7,['plugin'],['plugin']
Modifiability,"less, a strategy is:; * clone and switch branches to https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:1724,Config,Configure,1724,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['Config'],['Configure']
Modifiability,"libcubeprop will also be getting some I/O refactoring soon, so feel free to chime in if there's anything relevant you see going wrong or right with your planned uses.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116#issuecomment-410095742:42,refactor,refactoring,42,https://psicode.org,https://github.com/psi4/psi4/issues/1116#issuecomment-410095742,1,['refactor'],['refactoring']
Modifiability,"ll those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH rel",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2788,Plugin,Plugins,2788,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['Plugin'],['Plugins']
Modifiability,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239050499:1229,config,config,1229,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499,1,['config'],['config']
Modifiability,"m scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1208,config,config,1208,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['config'],['config']
Modifiability,"ma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; > v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; > #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); > at /psi/gits/libxc/src/gga.c:126; > #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; > #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; > #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; > #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; > #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; > #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; > ```; > ; > Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks. Yes, it turns out that the hotfix branch was still a work-in-progress by the time I was forced to go on holidays. I hope to get the remaining issues in the Python frontend fixed today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:3280,variab,variable,3280,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['variab'],['variable']
Modifiability,"make configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push fixes step 7, also the MAX_AMs now start with WITH_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:3044,config,config,3044,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,1,['config'],['config']
Modifiability,"make; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ----------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2238,plugin,plugins,2238,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['plugin'],['plugins']
Modifiability,"mentation_2018/en/debugger//gdb-igfx/info/; CC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-cc; XDG_RUNTIME_DIR=/run/user/1000; READELF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-readelf; GCC_AR=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gcc-ar; OBJDUMP=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-objdump; LESSCLOSE=/usr/bin/lesspipe %s %s; GPROF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10023,variab,variable,10023,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['variab'],['variable']
Modifiability,"metry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1446,variab,variable,1446,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['variab'],['variable']
Modifiability,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6687,Config,Configuring,6687,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Config'],['Configuring']
Modifiability,ng/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5314,plugin,plugins,5314,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,ng/bakerjcc93/CMakeLists.txt; > - 31. optking/beran: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4506,plugin,plugins,4506,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"no idea where to do this : . A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; PsiReturnType skeleton(Options& options); to:; SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185847048:74,plugin,plugins,74,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185847048,1,['plugin'],['plugins']
Modifiability,nv/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4386,plugin,plugin,4386,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"ocal/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2524,config,configuration,2524,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['config'],['configuration']
Modifiability,"of a determinant depends on the ordering of the; spin orbitals. In this code, all alpha spin orbitals come first, and then; all beta spin orbitals (this winds up being an easier rule to state and; maintain than alternatives like ""order by spatial orbital, and then alpha; first and beta second within spatial orbital numbering""). With that ordering, the signs given are correct. (See, for example,; equation 2.260 of Szabo and Ostlund). Best,; David. On Wed, Sep 16, 2020 at 2:04 PM saadyalouz <notifications@github.com> wrote:. > Dear developers,; >; > I am currently running SA-CASSCF calculations on the formaldimine; > molecule. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1261,variab,variables,1261,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['variab'],['variables']
Modifiability,"ollected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2150,variab,variable,2150,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['variab'],['variable']
Modifiability,"op='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3309,variab,variable,3309,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,['variab'],['variable']
Modifiability,optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4848,plugin,plugins,4848,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmak,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5457,plugin,plugins,5457,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-pac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1342,variab,variable,1342,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['variab'],['variable']
Modifiability,"orr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; EdmistonRuedenberg::Optimize : Cost function at start = 11.6978759080747; Cost function at stop = 39.88912832949; Gradient norm = 1.14176119927824e-09 after 14 iterations.; EdmistonRuedenberg::FiedlerExchange : Cost function at start = 855.317140538854; EdmistonRuedenberg::FiedlerExchange : Cost function at end = 13.7691914991716; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2269,variab,variables,2269,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097,1,['variab'],['variables']
Modifiability,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3347,variab,variables,3347,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,"['Refactor', 'variab']","['Refactor', 'variables']"
Modifiability,"ow what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2678,plugin,plugins,2678,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['plugin'],['plugins']
Modifiability,"plugins on windows could be pursued, but they're not in demand. presently failing on OpenMP detection in plugin cmake configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229:0,plugin,plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229,3,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,possibly related to https://github.com/psi4/psi4/issues/1679. Although it should fit in the `int` variable raised in that issue. (i think). Is there any other output? `stderr` captured by slurm?; What is the last content of `timer.dat`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-560861573:98,variab,variable,98,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-560861573,1,['variab'],['variable']
Modifiability,"psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libefp | no | psi4 | psi4 | --- | | C; resp | no | | | | psi4 | Py; snsmp2 | no | | | | psi4 | Py; v2rdm_casscf | no | psi4 | psi4 | --- | | C++, Fortran. * openfermion is better housed on c-f anyways. devs are willing (I have an open issue on this with them). only issue is that they have several optional dependencies, and their test suite fails rather than skipping the tests that need these.; * pycppe also on c-f already; * pylibefp and libefp built together; * v2rdm_casscf is a psi4 plugin and has no meaningful pinning to psi4 itself as it often needs rebuilding when psi4 innards change",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:2486,plugin,plugin,2486,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['plugin'],['plugin']
Modifiability,put.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory reg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5558,plugin,plugins,5558,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"python.so` into psi4's `core.*.so` -- this is new in the revamped pb11 add_pybind11_module that calls [Python_add_library](https://gitlab.kitware.com/cmake/cmake/-/blob/master/Modules/FindPython/Support.cmake#L3306-3313); * sets `DT_SONAME` on the `core.*.so`. This shows up as `Library soname` below in `readelf -d` of core.*.so. *This is important* b/c w/o this set, the full path to `core.*.so` gets linked into consumers like plugins, rather than just the library name. [trouble](https://stackoverflow.com/questions/27261288/cmake-linking-shared-c-object-from-externalproject-produces-binaries-with-rel); * designed for ordinary library linking like how the plugins are using symbols from psi4. The https://github.com/psi4/psi4/blob/master/psi4/psi4Config.cmake.in#L141 does the linking of core.*.so to the plugins. ### MODULE; * does *not* link `libpython.so` into psi4; * does *not* set `DT_SONAME` on psi4. that's ok for the local plugins where the full path that's baked in is the same as the RPATH+SONAME resolved through `ld`, but this breaks down during the v2rdm conda build. I've been unable to force a `DT_SONAME` entry onto a `MODULE` library; * one can perhaps get away with it (no errors; current state of `master`), but it's [advised not to link to a MODULE](https://stackoverflow.com/a/4968940). ### printouts from SHARED; ```; >>> readelf -d stage/lib/psi4/core.cpython-39-x86_64-linux-gnu.so . Dynamic section at offset 0x21a4aa0 contains 40 entries:; Tag Type Name/Value; 0x0000000000000001 (NEEDED) Shared library: [libpython3.9.so.1.0]; 0x0000000000000001 (NEEDED) Shared library: [libgg.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libxc.so.9]; 0x0000000000000001 (NEEDED) Shared library: [libint2.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libdl.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libmkl_rt.so]; 0x0000000000000001 (NEEDED) Shared library: [libiomp5.so]; 0x0000000000000001 (NEEDED) Shared library: [libpthread.so.0]; 0x0000000000000001 (NEE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188:1218,plugin,plugins,1218,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188,1,['plugin'],['plugins']
Modifiability,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3259,config,configure,3259,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['config'],['configure']
Modifiability,"re, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:1669,variab,variable,1669,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,1,['variab'],['variable']
Modifiability,"reformat and disable/enable if you like for `config.h`, @JonathonMisiewicz, but that particular loss of alignment doesn't bother me. the nice thing (for me, b/c I enjoy formatting too much) is that yapf/c-f put a slight barrier to opt-ing in to hand formatting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415881613:45,config,config,45,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415881613,1,['config'],['config']
Modifiability,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355307312:93,plugin,plugin,93,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312,1,['plugin'],['plugin']
Modifiability,"rking CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing config",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2246,Config,Configuring,2246,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Config'],['Configuring']
Modifiability,"rminants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1996,variab,variable,1996,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['variab'],['variable']
Modifiability,"rs thoughts?. I hope you know what you're asking for. Storage of ground-state densities is lawless, let alone excited-state densities. For excited-state densities...; * ADC won't export densities of any sort.; * TD-DFT will save left and right eigenvectors. From my (very shaky) knowledge of TD-DFT theory, those are left and right transition densities.; * EOM-CC creates but will not save its left and right transition densities. Before this PR, it would write excited state densities to the wavefunction. (In the current version of the PR, it still does). For ground-state densities...; * For fully variational methods (including in orbitals), the density of the correlated method is unambiguous and saved to the wavefunction.; * For methods that are not fully variational, you have orbital-relaxed and orbital-unrelaxed densities. If orbital relaxation is not needed, this density may or may not get saved to the wavefunction. If it is not saved, the density is probably still the SCF density.; * Some methods have it even worse. For example, ODC-12 with perturbative lambda has _three conceivable densities_. ODC-12 density, ODC-12 density + perturbative lambda, and ODC-12 + perturbative lambda + orbital relaxtion.; * CAS-DMRG-PT2 through the `dmrg` module saves the DMRG density to the wavefunction, which is not the DMRGPT2 density.; * If the user requests a spin-scaled density, the standard densities need to be further monkeyed with to be correct in gradients. I don't know if this is actually done. I suspect it is not. And to represent all that, the current tools we have are `Da`, `Db`, and the pool of psivars. I'm in favor of deprecating `Da` and `Db` for anything other than internal SCF use and creating a new wavefunction member to store all the densities, _with proper labeling_. This will of course be a lot of code refactoring, but that is quite literally the entire point of me doing all this `cc` PRs. And of course, somebody will need to tell `dfocc` about this API change. 🙂",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094422746:2016,refactor,refactoring,2016,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094422746,1,['refactor'],['refactoring']
Modifiability,s comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4900,plugin,plugins,4900,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"s that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105040869.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:2261,variab,variable,2261,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,1,['variab'],['variable']
Modifiability,s/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and; > pytest (long;cart). vi snsmp2/cc-cc/CMakeLists.txt; > snsmp2/cc-cc/test_input.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5826,plugin,plugins,5826,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,s/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and; > pytest (long;cart). vi snsmp2/cc-cc/CMakeLists.txt; > snsmp2/cc-cc/test_input.py; > - 66. snsmp2/cf-o: mismatched marks ctest (snsmp;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5890,plugin,plugins,5890,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,s: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5363,plugin,plugins,5363,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:5325,CONFIG,CONFIG,5325,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,3,"['CONFIG', 'config']","['CONFIG', 'config', 'configs']"
Modifiability,"set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAPT(DFT) Results; > ---------------------------------------------------------------------------------------------------------; > Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2891,variab,variable,2891,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['variab'],['variable']
Modifiability,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010136:591,plugin,plugin,591,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136,1,['plugin'],['plugin']
Modifiability,si4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom ==,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4365,plugin,plugin,4365,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"sition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1936,variab,variable,1936,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['variab'],['variable']
Modifiability,"so I've changed the `cc46` test case to grab `EOM-CC2` variables for all ground-state quantities. Excited state quantities are set by the EOM code and so still follow `CC XPROPERTYX`. I think this is a reasonable move, considering anyone wanting to use these variables will need to check their names to get the syntax right in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716213255:55,variab,variables,55,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716213255,2,['variab'],['variables']
Modifiability,"sointegrals plugin works smoothly now, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/369#issuecomment-215009614:12,plugin,plugin,12,https://psicode.org,https://github.com/psi4/psi4/pull/369#issuecomment-215009614,1,['plugin'],['plugin']
Modifiability,"sort will use 2.02 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.01 seconds = 0.00 minutes; 	system time = 0.03 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.46 seconds = 0.01 minutes; 	system time = 0.09 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:9940,Config,Configuration,9940,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Config'],['Configuration']
Modifiability,"starting with conda psi4 `0.3.491`, you should be getting all the headers (though not namespace protected) and the basic `psi4-config` script.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172949103:127,config,config,127,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172949103,1,['config'],['config']
Modifiability,"t threading itself automatically. If we roll back to 1.1 does the issue become better?. -Daniel Smith; Sent from my iPhone. . > On Jun 6, 2018, at 04:29, Peter Kraus <notifications@github.com> wrote:; > ; > To add to Lori's table from here, I've compiled the 1.2-rc2 tag against various blas/lapack combinations, and ran the dft-bench-ionisation test (wB97X-D, revTPSS, PW6B95, TPSS, PWB6K only):; > ; > 	N=1	N=4	N=1	N=4; > Psi4/1.2-rc2-acml-5.3.1	FAIL	 	 	 ; > Psi4/1.2-rc2-lapack-3.8.0	395.944	299.438	1.00	1.32; > Psi4/1.2-rc2 (1.2rc2.dev35)	268.523	223.574	1.47	1.77; > Psi4/1.2-rc2-blis-0.3.2	356.723	262.964	1.11	1.51; > Psi4/1.2-rc2-openblas-0.2.20	FAIL	 	 	 ; > Psi4/1.2-rc2-openblas-0.3.0	FAIL	 	 	 ; > All compiled with gcc-7.1.0, cmake-3.8.2, dftd3-3.2-r0.; > ; > ACML-5.3.1 is a binary.; > ; > Netlib's BLAS and lapack (3.8.0) compiled with -O3 -march=barcelona -fPIC and -O3 -frecursive -march=barcelona -fPIC respectively, including deprecated functions. I had to add -DENABLE_dkh=ON to the psi4 build options, otherwise the fortran compiler wouldn't get picked up.; > ; > The 1.2rc2.dev35 is a binary that was available in conda, compiled against mkl 2018.0.2, intel-openmp 2018.0.0.; > ; > Flame's blis-0.3.2 was compiled into netlib's lapack-3.8.0, with ./configure auto; lapack compiled as above.; > ; > OpenBLAS-0.2.20 was compiled with USE_THREAD=0 USE_OPENMP=0 TARGET=BARCELONA. OpenBLAS-0.3.0 was compiled with both make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 and make TARGET=BARCELONA BINARY=64 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=32 CFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" FFLAGS=""-fPIC -fopenmp -fstack-protector-strong"" and linked using the .so and .a; it doesn't pass at all even with psi4 -n 1.; > ; > The node I used is a 2 x Quad-Core AMD Opteron(tm) Processor 2352, running up-to-date Debian 8.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290:1346,config,configure,1346,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-395091290,1,['config'],['configure']
Modifiability,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:2167,variab,variable,2167,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122,1,['variab'],['variable']
Modifiability,t; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). v,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5095,plugin,plugins,5095,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"t>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existing CIWavefunction class to overtake the whole implementation of the CC functionality.; * The class will manage MOInfo,Params, DPD as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; * The class will contain the various steps in a CC calculation as methods.; * Move from tstart-tstop to the new timers timer_on-timer_off. DPD Library. * Remove use of static global machinery from DPD member functions.; * Implement proper copy/move assign/construct for the DPD object.; * Implement internal structs with proper constructors as needed.; * Replace c-style arrays/raw pointers with appropriate smart pointer/containers; * Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s).; * Note: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; * Insert a layer of abstraction between DPD and psio. (slated for deprecation/replacement). For visibility: @lothian<https://github.com/lothian> @CDSherrill<https://github.com/CDSherrill> @andysim<https://github.com/andysim> @jturney<https://github.com/jturney> @fevangelista<https://github.com/fevangelista> @dgasmith<https://github.com/dgasmith>. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9Qdt-9Cic7AcHOMo2bMq1iF3Nyc5FZks5uc6dJgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:2828,Refactor,Refactor,2828,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['Refactor'],['Refactor']
Modifiability,"tates 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1733,variab,variable,1733,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,1,['variab'],['variable']
Modifiability,"th pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1136,plugin,plugins,1136,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['plugin'],['plugins']
Modifiability,"th the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4367,Config,Config,4367,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['Config'],['Config']
Modifiability,tion. vi; > optking/CMakeLists.txt; > - 32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4588,plugin,plugins,4588,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"triplet B2 (qchem example), def2-SVP; ```; QCHEM_HF -0.0923 -0.3325; PSI4_HF -0.04614 -0.1663 # factor of 2! --> -0.09228 -0.3326; QCHEM_SVWN3 0.0406 0.0406 -0.0364; ```. ```; molecule bb {; 0 3; b; b 1 R; R = 1.587553; symmetry c1; }. set {; reference uhf; basis def2-svp; STABILITY_ANALYSIS check; SOLVER_N_GUESS 4; solver_n_root 2; scf_type pk; }. energy('hf'); # energy('svwn') ; ev=variable('SCF STABILITY EIGENVALUES').np; print_out(f""All eigenvalues: {ev} \n""); print(f""All eigenvalues: {ev} \n""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239:387,variab,variable,387,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239,1,['variab'],['variable']
Modifiability,ts/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4026,plugin,plugin,4026,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1239,plugin,plugin,1239,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,2,['plugin'],['plugin']
Modifiability,"u weren't linked in with this thread. Unfortunately, the situation at the moment isn't much better than this issue reflects. Between branch and API updates (see #2442), the specific requirements of psi (see https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L26), and the quirk that I can't yet myself get past a symbol limit with larger AM and the Intel linker to build a big-AM L2 conda package, building bigger Libint2's hasn't been something we recommend casually. As far as I know, it can be done with gcc, though. Any generation or build step will take hours in parallel. I don't suggest you do this, esp. if you're most accustomed to single-line builds. Nevertheless, a strategy is:; * clone and switch branches to https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:1044,config,configure,1044,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['config'],['configure']
Modifiability,"undError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <modul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1186,plugin,plugins,1186,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,1,['plugin'],['plugins']
Modifiability,"utput_file('output.dat', False); psi4.core.set_num_threads(2). mol = psi4.geometry(""""""; O; H 1 1.1; H 1 1.1 2 104; symmetry c1; """"""). psi4.core.set_active_molecule(mol). options = {'BASIS':'STO-3G', 'SCF_TYPE':'PK',; 'E_CONVERGENCE':1e-10,; 'D_CONVERGENCE':1e-10; }. psi4.set_options(options). rhf_e, wfn = psi4.energy('SCF', return_wfn=True); ```. Debug traceback shows hang is in SAD guess at `DFHelper::contract_metric_AO_core_symm`. ```; (p4dev36) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-qcdb/objdir-gnu36: ((detached from matt/SYMM_JK)) gdb --args python ../tests/psi4numpy/rhf-hessian/input.py ; GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-94.el7; Copyright (C) 2013 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python3.6...done.; (gdb) run; Starting program: /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python ../tests/psi4numpy/rhf-hessian/input.py; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Missing separate debuginfo for /home/psilocaluser/toolchainconda/envs/p4dev36/lib/python3.6/site-packages/numpy/../../../libiomp5.so; Detaching after fork from child process 16215.; Detaching after fork from child process 16216.; Detaching after fork from child process 16217.; Detaching after fork from child process 16218.; Detaching after fork from child process 16219.; Threads set to 2 by Python driver. *** tstart() called on psinet; *** at Wed Apr 25 23:55:59 2018. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:1480,config,configured,1480,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,1,['config'],['configured']
Modifiability,"v2rdm strikes again! :-). fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196:97,plugin,plugin,97,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196,1,['plugin'],['plugin']
Modifiability,"v37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1612,config,configuration,1612,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['config'],['configuration']
Modifiability,"version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occurred!; See also ""/media/BIGdisk/psi4/objdir/CMakeFiles/CMakeOutput.log"".; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ cmake --version; cmake version 3.9.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ git describe; v1.2rc1. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:5351,Config,Configuring,5351,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['Config'],['Configuring']
Modifiability,vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. pytho,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5152,plugin,plugins,5152,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"vided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Stat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:1079,extend,extended,1079,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,1,['extend'],['extended']
Modifiability,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332296506:87,variab,variable,87,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506,1,['variab'],['variable']
Modifiability,"when you use the driver function `psi4.geometry()` the `psi4.core.Molecule` object that is returned has not been completely initialized yet. To complete the initialization of the molecule you can call the the `update_geometry` method of the `psi4.core.Molecule` instance that is returned. . In your case:. ```python; >>> import psi4; >>> mol = psi4.geometry('H 0.0 0.0 0.0\nH 1.5 0.0 0.0'); >>> atoms = mol.geometry().to_array(); >>> atoms; array([], shape=(0, 3), dtype=float64). >>> mol.update_geometry(); >>> atoms2 = mol.geometry().to_array(); >>> atoms2 ; array([[ -1.41729460e+00, -2.16960662e-17, 0.00000000e+00],; [ 1.41729460e+00, 2.16960662e-17, 0.00000000e+00]]). ```. While the docstring for `psi4.geometry()` might not make this clear, and perhaps it should? The docstring for `psi4.core.Molecule.update_geometry()` does:. ```python; >>> import psi4; >>> print(psi4.core.Molecule.update_geometry.__doc__); update_geometry(self: psi4.core.Molecule) -> None. Reevaluates the geometry with current variable values, orientation directives, etc. ; Must be called after initial Molecule definition by string.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316060861:1008,variab,variable,1008,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316060861,1,['variab'],['variable']
Modifiability,"whoa, quite a lot of details to handle DFT xtpl -- thanks for working it all out!. > Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?. I'd do a minimum of cleanup here and save it for ddd in 1.5. > The fact that the DFT VV10 ENERGY contribution is included in DFT FUNCTIONAL TOTAL ENERGY is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Having VV10 follow the empirical dispersion pattern feels more natural to me. Can add a message warning that usage has changed whenever the var is called for a spell like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L624-L628",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952:587,variab,variables,587,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952,1,['variab'],['variables']
Modifiability,"x000056022aa64bd0 in pyrun_file (fp=fp@entry=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; start=start@entry=257, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900, ; closeit=closeit@entry=1, flags=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1643; #37 0x000056022aa6420e in _PyRun_SimpleFileObject (fp=0x560259cb7470, filename=0x7f21abe2c090, closeit=1, ; flags=0x7ffc67b36bd0) at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:433; #38 0x000056022aa63ee4 in _PyRun_AnyFileObject (fp=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; closeit=closeit@entry=1, flags=flags@entry=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:78; #39 0x000056022aa5cf42 in pymain_run_file_obj (skip_source_first_line=0, filename=0x7f21abe2c090, ; program_name=0x7f21abe2c270) at /usr/local/src/conda/python-3.12.5/Modules/main.c:360; --Type <RET> for more, q to quit, c to continue without paging--; #40 pymain_run_file (config=0x56022ada5c38 <_PyRuntime+77720>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:379; #41 pymain_run_python (exitcode=0x7ffc67b36ba4) at /usr/local/src/conda/python-3.12.5/Modules/main.c:633; #42 Py_RunMain () at /usr/local/src/conda/python-3.12.5/Modules/main.c:713; #43 0x000056022aa147e7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:767; #44 0x00007f21b9bd3088 in __libc_start_call_main (main=main@entry=0x56022aa14720 <main>, argc=argc@entry=6, ; argv=argv@entry=0x7ffc67b36e38) at ../sysdeps/nptl/libc_start_call_main.h:58; #45 0x00007f21b9bd314b in __libc_start_main_impl (main=0x56022aa14720 <main>, argc=6, argv=0x7ffc67b36e38, ; init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7ffc67b36e28); at ../csu/libc-start.c:360; #46 0x000056022aa14681 in _start (); (gdb) ; ```; which corresponds to; https://github.com/psi4/psi4/blob/3484122eaaec9e185bc33581c6cdef4669f2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:9849,config,config,9849,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['config'],['config']
Modifiability,yhd3eb1b0_0 ; boost 1.73.0 py39h06a4308_11 ; bzip2 1.0.8 h7b6447c_0 ; ca-certificates 2021.7.5 h06a4308_1 ; certifi 2021.5.30 py39h06a4308_0 ; cffi 1.14.5 py39h261ae71_0 ; click 7.1.2 pyhd3eb1b0_0 ; cmake 3.19.6 h973ab73_0 ; dataclasses 0.8 pyhc8e2a94_1 conda-forge; dbus 1.13.18 hb2f20db_0 ; decorator 4.4.2 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd3eb1b0_0 ; dftd3 3.2.1 h84218bc_2 psi4/label/dev; dftd4 v3.3.0 py39h1d74c00_0 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; eigen 3.3.7 hfd86e86_0 ; entrypoints 0.3 py39h06a4308_0 ; execnet 1.8.0 pyhd3eb1b0_0 ; expat 2.2.10 he6710b0_2 ; fontconfig 2.13.1 h6c09931_0 ; freetype 2.10.4 h5ab3b9f_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4/label/dev; gcc_impl_linux-64 7.3.0 habb00fd_1 ; gcc_linux-64 7.3.0 h553295d_15 ; gcp 2.0.2 he991be0_2 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; geometric 0.9.7.2 py_0 conda-forge; gfortran_impl_linux-64 7.3.0 hdf63c60_1 ; gfortran_linux-64 7.3.0 h553295d_15 ; glib 2.68.2 h36276a3_0 ; gmp 6.2.1 h2531618_2 ; gst-plugins-base 1.14.0 h8213a91_2 ; gstreamer 1.14.0 h28cd5cc_2 ; gxx_impl_linux-64 7.3.0 hdf63c60_1 ; gxx_linux-64 7.3.0 h553295d_15 ; hdf5 1.10.6 hb1b8bf9_0 ; icu 58.2 he6710b0_3 ; importlib-metadata 3.7.3 py39h06a4308_1 ; importlib_metadata 3.7.3 hd3eb1b0_1 ; importlib_resources 5.1.2 py39h06a4308_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.3.0 h06a4308_3350 ; ipykernel 5.3.4 py39hb070fc8_0 ; ipython 7.22.0 py39hb070fc8_0 ; ipython_genutils 0.2.0 pyhd3eb1b0_1 ; ipywidgets 7.6.3 pyhd3eb1b0_1 ; isort 5.8.0 pyhd3eb1b0_0 ; jedi 0.17.2 py39h06a4308_1 ; jinja2 3.0.0 pyhd3eb1b0_0 ; jpeg 9b h024ee3a_2 ; jsonschema 3.2.0 py_2 ; jupyter 1.0.0 py39h06a4308_7 ; jupyter_client 6.1.12 pyhd3eb1b0_0 ; jupyter_console 6.4.0 pyhd3eb1b0_0 ; jupyter_core 4.7.1 py39h06a4308_0 ; jupyterlab_pygments 0.1.2 py_0 ; jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 ; krb5 1.18.2 h173b8e3_0 ; ld_impl_linux-64 2.33.1 h53a641e_7 ; libblas 3.9.0 1_h6e990d7_netlib conda-forge; libboost 1.73.0 h3ff78a5_11 ; libcurl 7.7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:1570,plugin,plugins-base,1570,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127,1,['plugin'],['plugins-base']
Modifiability,"ython=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2405,config,configure,2405,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['config'],['configure']
Performance," (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2310,load,load,2310,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29947,optimiz,optimized,29947,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36207,optimiz,optimized,36207,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37544,optimiz,optimized,37544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45207,optimiz,optimized,45207,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46544,optimiz,optimized,46544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47881,optimiz,optimized,47881,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53205,optimiz,optimized,53205,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60868,optimiz,optimized,60868,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62205,optimiz,optimized,62205,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72320,optimiz,optimized,72320,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73657,optimiz,optimized,73657,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81320,optimiz,optimized,81320,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82657,optimiz,optimized,82657,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83994,optimiz,optimized,83994,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance," // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-121322945:1199,Perform,Perform,1199,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945,1,['Perform'],['Perform']
Performance," /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43433,optimiz,optimized,43433,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3206,optimiz,optimize,3206,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimize']
Performance," CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2537,Optimiz,Optimizer,2537,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['Optimiz'],['Optimizer']
Performance," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2163,CACHE,CACHE,2163,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,2,['CACHE'],['CACHE']
Performance, Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2404,Perform,Performing,2404,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance," Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.0547599541743",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:7872,optimiz,optimization,7872,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimization']
Performance," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:918,optimiz,optimizer,918,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['optimiz'],['optimizer']
Performance, OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4790,Perform,Performing,4790,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xope,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4749,Perform,Performing,4749,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2445,Perform,Performing,2445,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance," Sebastian,. Which version of Psi is this, beta5? We have been having a little trouble; reproducing the problem. Also, do you have a .psi4rc file, and if so, what's in it?. Thanks,; David. On Wed, Feb 4, 2015 at 5:47 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > The input file for the problem described below:; > ; > molecule C6H6 {; > 0 1; > C 0.0 1.855 0.0; > C 0.0 -1.855 0.0; > C 1.6064771240201337 0.9275 0.0; > C 1.6064771240201337 -0.9275 0.0; > C -1.6064771240201337 0.9275 0.0; > C -1.6064771240201337 -0.9275 0.0; > H 0.0 3.289 0.0; > H 0.0 -3.289 0.0; > H 2.848357553047019 1.6445 0.0; > H 2.848357553047019 -1.6445 0.0; > H -2.848357553047019 1.6445 0.0; > H -2.848357553047019 -1.6445 0.0; > units au; > }; > ; > set basis cc-pVDZ; > set reference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.850111145",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73061426:880,optimiz,optimize,880,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426,2,['optimiz'],"['optimization', 'optimize']"
Performance, Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FL,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4911,Perform,Performing,4911,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5295,Perform,Performing,5295,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag =,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4870,Perform,Performing,4870,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance, Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5254,Perform,Performing,5254,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance," There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 2 Threads, 500 MiB Core; ---------------------------------------------------------. ... ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 7 7 0 0 0 0; -------------------------------------------------------; Total 7 7 5 5 5 0; -------------------------------------------------------. [New Thread 0x7fffd6116780 (LWP 16220)]; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 5; Number of primitives: 15; Number of atomic orbitals: 7; Number of basis functions: 7. Integral cutoff 1.00e-12; Number of threads: 2. Performing in-core PK; Using 812 doubles for integral storage.; We computed 133 shell quartets total.; Whereas there are 120 unique shell quartets.; 10.83 percent of shell quartets recomputed by reordering.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 2; Minimum eigenvalue in the overlap matrix is 4.3422219878E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ^C; Program received signal SIGINT, Interrupt.; 0x00007fffe3ca696f in psi::DFHelper::contract_metric_AO_core_symm(double*, double*, unsigned long, unsigned long) [clone ._omp_fn.16] (); from /home/psilocaluser/gits/hrw-qcdb/objdir-gnu36/stage/usr/local/psi4/lib/psi4/core.so; Missing separate debuginfos, use: debuginfo-install glibc-2.17-157.el7_3.1.x86_64 libuuid-2.23.2-33.el7.x86_64; (gdb) bt; #0 0x00007fffe3ca696f in psi::DFHelper::contract_metric_AO_core_symm(double*, double*, unsigned long, unsigne",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:3704,Perform,Performing,3704,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,1,['Perform'],['Performing']
Performance," ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1732,optimiz,optimize,1732,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance," args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38747,optimiz,optimized,38747,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59331,optimiz,optimized,59331,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:49084,optimiz,optimized,49084,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:54408,optimiz,optimized,54408,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42671,optimiz,optimized,42671,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:56995,optimiz,optimized,56995,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:78784,optimiz,optimized,78784,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python3.6...done.; (gdb) run; Starting program: /home/psilocaluser/toolchainconda/envs/p4dev36/bin/python ../tests/psi4numpy/rhf-hessian/input.py; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Missing separate debuginfo for /home/psilocaluser/toolchainconda/envs/p4dev36/lib/python3.6/site-packages/numpy/../../../libiomp5.so; Detaching after fork from child process 16215.; Detaching after fork from child process 16216.; Detaching after fork from child process 16217.; Detaching after fork from child process 16218.; Detaching after fork from child process 16219.; Threads set to 2 by Python driver. *** tstart() called on psinet; *** at Wed Apr 25 23:55:59 2018. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /home/psilocaluser/gits/hrw-qcdb/objdir-gnu36/stage/usr/local/psi4/share/psi4/basis/sto-3g.gbs ; atoms 2-3 entry H line 19 file /home/psilocaluser/gits/hrw-qcdb/objdir-gnu36/stage/usr/local/psi4/share/psi4/basis/sto-3g.gbs . There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 2 Threads, 500 MiB Core; ---------------------------------------------------------. ... ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 7 7 0 0 0 0; -------------------------------------------------------; Total 7 7 5 5 5 0; -------------------------------------------------------. [New Thread 0x7ff",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384510030:2414,Load,Loading,2414,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384510030,1,['Load'],['Loading']
Performance," covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:958,optimiz,optimization,958,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,2,['optimiz'],"['optimization', 'optimized']"
Performance, does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1722,load,load,1722,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance," doesn't have any beta spin electrons. More; generally, an MP2 calculation doesn't make any sense for systems with only; one electron. Your method is a ""double hybrid"" that includes MP2 as a part; of it. Also, it's impossible to ""optimize"" (like you are trying to do) the; geometry of an atom. It has no internal degrees of freedom to optimize. These computational chemistry programs require a little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > -------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:1255,optimiz,optimize,1255,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['optimiz'],['optimize']
Performance," ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have flipped signs, concludes we are near a gradient, and says we are in the range of a minimum - which we are - to trigger the convergence machinery. I will want to test this hypothesis some more, but I suspect the fix will be simply to move the lines I mentioned to inside the size > 3 clause a few lines below.; EDIT2: That fixed the bug. Going to do some testing to trace the bug to this source. I've verified that when the bug does not appear, u_f_q_0 has a consistent direction. The direction changes in the bug cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:1978,optimiz,optimizer,1978,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,1,['optimiz'],['optimizer']
Performance," eye but still plausible geometry, oddz; > ; > molecule oddz {; > C; > H 1 1.792; > H 1 1.792 2 59.4; > H 1 1.089 2 136.7 3 -127.3; > F 1 2.089 2 101.7 4 -135.9; > }; > ; > # reference start NRE, E, G for this geometry; > ; > odd_nre_start = 25.7790014493 # Q-Chem; > odd_e_start = -139.1749807824 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:7411,optimiz,optimized,7411,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimized']
Performance," f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25000,optimiz,optimized,25000,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," for TARGET blas:; blas.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; blas.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; blas.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;... ```. Building then fails with:; ```; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:3107,Perform,Performing,3107,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance, for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2320,Perform,Performing,2320,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1545,optimiz,optimizer,1545,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,3,['optimiz'],"['optimization', 'optimizer']"
Performance," into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1098,load,load,1098,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance," kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43670,optimiz,optimized,43670,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > --------------------------------------------------------; > CLASS FOCC OCC AOCC AVIR VIR FVIR; > ALPHA 0 1 1 45 45 0; > BETA 0 0 0 46 46 0; > --------------------------------------------------------; >; >; > Traceback (most recent call last):; > File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/home/username/miniconda/lib//pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:1445,optimiz,optimize,1445,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,2,"['Load', 'optimiz']","['Loading', 'optimize']"
Performance," make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Fine to choose your own env name. Activate environment, `source activate p4deps`. Go to where you've cloned psi4. Execute `psi4-path-advisor`. It gives you a basic cmake command covering python, sphinx, link-time qc addons, and run-time qc addons. There's a help menu `-h` that gives more info. There's other options that will also pre-configure compilers. For example, at GaTech `psi4-path-advisor --intel` works. On Macs with XCode, `psi4-path-advisor --clang` works. Just read the help. For DGAS, there's an ""--disable"""", but I don't encourage it. It gives you a fully functional cmake command, but those are just setting up CMake cache - like the plugins you can always add your own CMake variables to the command. Plugins from a conda Psi4; -------------------------. Works on Linux. I need to adjust at least cache_pybind11_DIR on Mac. How to bump a version; ---------------------. * 0. **ACTION** Check everything in. * 1. **OBSERVE** Current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master up-to-date with upstream (including tags!!!) and with upstream as remote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:2703,cache,cache,2703,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['cache'],['cache']
Performance," nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59094,optimiz,optimized,59094,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance," on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1028,optimiz,optimizeGeometry,1028,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['optimiz'],['optimizeGeometry']
Performance," out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e1aede0, name=0x7fac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:68142,optimiz,optimized,68142,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2483,Optimiz,Optimized,2483,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['Optimiz'],['Optimized']
Performance," the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; > wrote:; > ; > > Also confirming here, also on yahoo/bing. Can someone make sure we still; > > have control of the domain name? Whois is still showing it registered to; > > David Sherrill, and it still shows it going to godaddy, but it w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2941,load,load,2941,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance," this decontracts _everything_, that is orbital/fitting alike unless you explicitly specify them all.; - [x] 2. also, rename rel_basis. only proximity to other dkh/relativisitc keywords indicates that that's what it means.; - [x] 3. show how to build your own _named_ basis for orbital or fitting roles a la mints9; - [x] 4. prove that a `basis mybas {...}` -defined basis can work for a `db()` calc, that is, the basis isn't anonymous and can be reapplied to multiple molcules. fitting, too.; - [x] 5. see if any of the times moldules call pyconstruct_aux if they want to forcibly apply the puream of the orbital to the aux basis. i think scf does this but nowhere else.; - [x] 6. the python side of pyconstruct generates a nice compact summary of where basis functions are loaded from (like below). this would be very handle to print in output once per basis. problem is modules read basis sets over and over. so either that needs curtailing or pass a printornot flag to pyconstruct. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: CC-PVDZ; atoms 1 entry C line 130 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-189541354:1692,Load,Loading,1692,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354,1,['Load'],['Loading']
Performance," v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportError: No module named psi4; ```; If I use the full path i get `Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.` instead. But maybe PR https://github.com/psi4/psi4/pull/563 will fix these things for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:4779,load,load,4779,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['load'],['load']
Performance,"!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2697,optimiz,optimize,2697,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance,"""Rather fragile"" is about right. (And if anybody reading this needs help freezing two distances in PsiAPI, at time of writing, they need to be on the same line, like `1 2 1 3`.). I'll leave it to the core devs to decide whether this is worth fixing now, or whether it's worth waiting until @psi-rking brings the optimization code Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385417768:312,optimiz,optimization,312,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385417768,1,['optimiz'],['optimization']
Performance,"# Known bugs; - PCM-ROHF is broken. See #999; # Library updates; - PCMSolver is updated to its latest version (1.2.1) This new release of PCMSolver is a maintenance release and no new features were added to Psi4 through this upgrade. However, more tests were added for PCM used in conjunction with ERI algorithms other than PK. A test was also added for geometry optimizations with PCM run using finite differences. See the [library's changelog](https://github.com/PCMSolver/pcmsolver/blob/release/1.2/CHANGELOG.md) for more information on what changed in the library itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386064898:363,optimiz,optimizations,363,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386064898,1,['optimiz'],['optimizations']
Performance,"## Small benchmark. The following timings were obtained for H2O from 3 ""takes"", where in each take, the; integral is repeatedly evaluated 15x. The result shown here is that of the fastest take, divided by the number of repeats (i.e., 15 here). The performance of M-D is actually quite nice -- of course one could tweak it a little bit here and there, but that's not needed right now IMHO. The code snippet from my benchmark script looks sth like:; ```Python; takes = 3; repeat = 15; for b in bas:; for m in [1, 4, 8, 16, 24, 36]:; basis = psi4.core.BasisSet.build(mol, 'orbital', b); mints = psi4.core.MintsHelper(basis); key = f""{b}/m = {m}""; keys.append(key); print(key); for _ in tqdm(range(takes)):; with timer.record(key):; for i in range(repeat):; M = mints.ao_multipoles(order=m, origin=[1.0, 2.0, 3.0]); for k in keys:; best = timer.best(k) / repeat; print(f""{k:<15} | {best * 1000:8.2f} ms""); ```. ### Results. | basis set | order | M-D | OS |; |-----------|-------|------------|------------|; | cc-pvdz | 1 | 0.11 ms | 0.20 ms |; | | 4 | 0.46 ms | 0.73 ms |; | | 8 | 1.87 ms | 2.19 ms |; | | 16 | 11.25 ms | 10.88 ms |; | | 24 | 47.11 ms | 43.30 ms |; | | 36 | 193.20 ms | 177.40 ms |; | cc-pvtz | 1 | 0.27 ms | 0.52 ms |; | | 4 | 1.34 ms | 2.19 ms |; | | 8 | 5.97 ms | 7.36 ms |; | | 16 | 46.39 ms | 47.05 ms |; | | 24 | 172.76 ms | 170.22 ms |; | | 36 | 742.18 ms | 725.64 ms |; | cc-pvqz | 1 | 0.81 ms | 1.53 ms |; | | 4 | 4.16 ms | 7.12 ms |; | | 8 | 20.47 ms | 26.56 ms |; | | 16 | 153.60 ms | 168.69 ms |; | | 24 | 543.86 ms | 579.47 ms |; | | 36 | 2327.06 ms | 2436.51 ms |; | cc-pv5z | 1 | 2.09 ms | 4.37 ms |; | | 4 | 12.59 ms | 22.29 ms |; | | 8 | 63.34 ms | 84.20 ms |; | | 16 | 457.24 ms | 522.29 ms |; | | 24 | 1634.66 ms | 1807.03 ms |; | | 36 | 6654.10 ms | 7198.05 ms |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1078476272:248,perform,performance,248,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1078476272,1,['perform'],['performance']
Performance,"## Small benchmark; The performance issues are resolved. :tada: As in #2496, only for small basis set angular momentum, the old code is faster than M-D, but for larger basis set/angmom, M-D outperforms the OS code. Performed as in #2496. Here, the molecule is para-nitroaniline (typical example for EFP/PE :smile:). ### Results; | basis | order | M-D [ms] | OS [ms] | ratio M-D/OS |; |----------------------|-------|----------|---------|-------------|; | cc-pvdz (nbf = 170) | 0 | 5.75 | 5.45 | 1.05 |; | | 1 | 9.55 | 7.72 | 1.24 |; | | 2 | 17.69 | 12.06 | 1.47 |; | | 3 | 30.41 | 19.61 | 1.55 |; | cc-pvtz (nbf = 384) | 0 | 14.2 | 14.02 | 1.01 |; | | 1 | 27.75 | 25.62 | 1.08 |; | | 2 | 55.37 | 50.41 | 1.1 |; | | 3 | 99.74 | 89.52 | 1.1 |; | cc-pvqz (nbf = 730) | 0 | 43.66 | 45.69 | 0.96 |; | | 1 | 94.84 | 101.92 | 0.93 |; | | 2 | 197.61 | 222.04 | 0.89 |; | | 3 | 366.13 | 428.15 | 0.85 |; | cc-pv5z (nbf = 1240) | 0 | 132.84 | 160.85 | 0.83 |; | | 1 | 323.07 | 406.33 | 0.8 |; | | 2 | 694.14 | 942.28 | 0.74 |; | | 3 | 1291.59 | 2011.75 | 0.64 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504#issuecomment-1081633908:24,perform,performance,24,https://psicode.org,https://github.com/psi4/psi4/pull/2504#issuecomment-1081633908,2,"['Perform', 'perform']","['Performed', 'performance']"
Performance,"### Storing data on `Wavefunction` instances. #### Choices (dipole gradient used as example). - (a) store in dedicated slot, `wfn.dipole_gradient_`. access through `wfn.dipole_gradient()`; - (b) store in `wfn.arrays_`. access through `wfn.variable('CURRENT DIPOLE GRADIENT')` or `wfn.variable('MTD DIPOLE GRADIENT')`; - (c) do (b) but also accessible through `wfn.dipole_gradient()` which just performs `wfn.arrays_` lookup; - (d) store in both `wfn.dipole_gradient_` and `wfn.arrays_` (memory-independent copies). access through `wfn.dipole_gradient()` (former) or `wfn.variable('CURRENT DIPOLE GRADIENT')` (latter) or `wfn.variable('MTD DIPOLE GRADIENT')` (latter). #### Present; - E/G/H are (d) and both, either, or neither may be set or consistent. even for energies, these haven’t been thoroughly rolled out past SCF.; - non-E/G/H are (b). #### Future; - E/G/H; - first (v1.4) work on getting data set in both places (reserved slot (e.g., `energy_`) and map (i.e., `variables_`)); - next cycle (v.1.5) do (c); - next next cycle (v1.6) do (b); - non-E/G/H, do (c)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-449694968:394,perform,performs,394,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-449694968,1,['perform'],['performs']
Performance,#1096 fixes the gradients. optimization should follow.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1094#issuecomment-405747170:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/issues/1094#issuecomment-405747170,1,['optimiz'],['optimization']
Performance,"(1) do other conda packages like NumPy work for you?; Yes, I just opened pycharm using conda as the interpreter, import numpy and converted a list to a np array. (2) can/did you do the Windows equivalent of log out then log back in?; I just restarted my computer, error still persists . (3) what exactly was your ""added the directory to my path"" command?; I went system properties --> environment manager --> Path ; then added the following code in ""C:\Users\erikc\psi4conda"". (4) what does psi4 --version say?; C:\Users\erikc>psi4 --version; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088:706,load,load,706,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875053088,2,['load'],['load']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79717,optimiz,optimized,79717,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34670,optimiz,optimized,34670,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57928,optimiz,optimized,57928,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"(func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70783,optimiz,optimized,70783,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,") at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:69607,optimiz,optimized,69607,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"* Case A, the MKL trio; * NumPy from defaults linked to the MKL trio; * Psi4 forced to linked to MKL trio dynamically; * Result: n before p threads, p before n doesn't thread. p before n never loads libmkl_avx2.so. ```; (p4dev36) objdir-conda >>> ldd stage/usr/local/psi4/lib/psi4/core.so | grep mkl; 	libmkl_intel_lp64.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so (0x00007f1379f68000); 	libmkl_intel_thread.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so (0x00007f1378503000); 	libmkl_core.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_core.so (0x00007f1376a0b000). (p4dev36) >>> ldd ~/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/multiarray.cpython-36m-x86_64-linux-gnu.so | grep mkl; 	libmkl_intel_lp64.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_intel_lp64.so (0x00007fb96e623000); 	libmkl_intel_thread.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_intel_thread.so (0x00007fb96cbbe000); 	libmkl_core.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_core.so (0x00007fb96b0c5000). (p4dev36) >>> head -13 thread.py ; import os; import time. # none for psithon. # good psiapi; import numpy as np; import psi4. # bad psiapi; #import psi4; #import numpy as np. (p4dev36) >>> PYTHONPATH=/home/psilocaluser/gits/hrw-lab/objdir-conda/stage/usr/local/psi4/lib python thread.py; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000772 NumPy: 0.000621; Time for threads 1, size 500: Psi4: 0.008650 NumPy: 0.009042; Time for threads 1, size 2000: Psi4: 0.839143 NumPy: 0.508247; Time for threads 1, size 4000: Psi4: 3.970799 NumPy: 4.251713; Threads set to 20 by Python driver.; Time for threads 20, size 200: Psi4: 0.000180 NumPy: 0.000201; Time for threads 20, size 500: Psi4: 0.001111 NumPy: 0.001470; Time for ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-313016394:193,load,loads,193,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394,1,['load'],['loads']
Performance,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:443,load,loaded,443,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['load'],['loaded']
Performance,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:550,perform,performance,550,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['perform'],['performance']
Performance,*Psi4* debugging is almost finished on *Windows*!. The remaining tasks:; - [x] Streamline testing. A specific *Azure* pipeline can be triggered to run all the tests before release and after significant changes. -- #1527 ; - [x] Production level builds. A specific *Azure* pipeline can be triggered to build optimized binaries with a big `MAX_AM_ERI`. -- #1539 ; - [x] Conda package. A specific *Azure* pipeline can be triggered to create a conda package and publish it on *Azure* artefacts. -- #1560,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-461430448:307,optimiz,optimized,307,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-461430448,1,['optimiz'],['optimized']
Performance,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-200900928:827,Optimiz,Optimization,827,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928,4,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimize']"
Performance,", CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2435,optimiz,optimizer,2435,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimizer']
Performance,", H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); --------------------------------------------------------------------------. *** tstart() called on molmod00.ugent.be; *** at Mon Apr 29 19:36:44 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM dis",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:2244,Load,Loading,2244,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['Load'],['Loading']
Performance,", H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algori",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:2065,Load,Loading,2065,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Load'],['Loading']
Performance,", argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10739,optimiz,optimized,10739,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19693,optimiz,optimized,19693,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1572,load,load,1572,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,", constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2755,optimiz,optimize,2755,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance,", kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x55ff908c17e0 <_Py_NoneStruct>, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #417 0x000055ff9067536b in import_name (level=0x7fac0e3000d0, fromlist=0x55ff908c17e0 <_Py_NoneStruct>, name=0x7fac0e1341f0, f=0x7fac0e329a40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #418 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e329a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #419 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e329a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #420 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128db00, locals=locals@entry=0x7fac0e241bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #421 0x000055ff90714ba7 in PyEval_E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:86143,optimiz,optimized,86143,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,", trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38947,optimiz,optimized,38947,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43870,optimiz,optimized,43870,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59531,optimiz,optimized,59531,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75060,optimiz,optimized,75060,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd887f290, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #65 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd887f290, name=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:18091,optimiz,optimized,18091,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,", wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang = geom * 0.529; ​; xyzs = [None]; for mod in range(ndof):; nmode = datum_x[mod].reshape((-1, 3)); print(nmode); smode = [str(nat), f""vib mode {mod+1}""]; for iat, (atg, atd) in enumerate(zip(geom_ang, nmode)):; atln = [*atg, *atd]; atln = "" "".join([str(at) if abs(at)>1.e-8 else ""0.0"" for at in atln]); atln = vibs[""molecule""][""elem""][iat] + "" "" + atln; smode.append(atln",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1923,load,load,1923,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,2,['load'],['load']
Performance,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:360,optimiz,optimized,360,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,1,['optimiz'],['optimized']
Performance,- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5032,Perform,Performing,5032,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETEC,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3062,Perform,Performing,3062,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4991,Perform,Performing,4991,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3021,Perform,Performing,3021,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"- [ ] API-like loading of basis sets. If one has the coef and the exp, shouldn't have to write them out to a .gbs, should be a constructor to take them directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-286672049:15,load,loading,15,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-286672049,1,['load'],['loading']
Performance,"- [ ] Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible.; - [ ] Investigate the possibility of building everything with LTO. Possible benefits: smaller binary sizes, performance improvement, unused functions are automatically stripped.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965:100,optimiz,optimization,100,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228529965,3,"['optimiz', 'perform']","['optimization', 'optimizations', 'performance']"
Performance,"- [ ] Implement O2 method, i.e. orbital-optimized scaled opposite-spin MP2 [R. C. Lochan and M. Head-Gordon, J. Chem. Phys. 126, 164101 (2007)]. (Looks like there is a scaled opposite-spin MP2 method in dfocc?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-304083131:40,optimiz,optimized,40,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-304083131,1,['optimiz'],['optimized']
Performance,- [ ] Matt Schieber has info on KMP affinity and thread binding schemes that hurt and help performance. See if the one that helps can be encoded at runtime (knowing some /proc/cpuinfo) or otherwise advise in docs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-301541037:91,perform,performance,91,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-301541037,1,['perform'],['performance']
Performance,- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Per,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2697,Perform,Performing,2697,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,-- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2571,Perform,Performing,2571,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.; ------------------------------------------------------------; Spin-Free X2C Integrals at the One-Electron Level (SFX2C-1e); by Prakash Verma and Francesco A. Evangelista; ------------------------------------------------------------. ==> X2C Options <==. Computational Basis: ANO-RCC; X2C Basis: (ANO-RCC AUX); The X2C Hamiltonian will be computed in the X2C Basis. Comparing only 15 out of 17 elements of H_Dirac. The 1-norm of |H_X2C - H_Dirac| is: 9.762433630521. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5079,Perform,Performing,5079,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Perform'],['Performing']
Performance,"---. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_RELATIVISTIC; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs func decontract. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 15 15 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 1 1 0 0 0 0; B1u 7 7 0 0 0 0; B2u 7 7 0 0 0 0; B3u 7 7 0 0 0 0; -------------------------------------------------------; Total 46 46 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.; ------------------------------------------------------------; Spin-Free X2C Integrals at the One-Electron Level (SFX2C-1e); by Prakash Verma and Francesco A. Evangelista; ------------------------------------------------------------. ==> X2C Opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:3468,Load,Loading,3468,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Load'],['Loading']
Performance,"-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy from the first sigma build is way off. I actually wonder how the old vector remains to be a good guess during the MCSCF orbital optimization procedure. There is a subtle issue using H0BLOCK for the final CASCI. The MCSCF sets CI max iteration to 12 by default, which is probably not enough to converge a large CI problem. This could be overwritten by the keyword `CI_MAXITER`. However, doing so will also increase the CI iterations during the MCSCF orbital optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:4933,optimiz,optimization,4933,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785,2,['optimiz'],['optimization']
Performance,-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2.1.3 pyhd8ed1ab_0 conda-forge; flask-jwt-extended 4.5.2 pyhd8ed1ab_0 conda-forge; flit-core,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:2023,cache,cachetools,2023,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['cache'],['cachetools']
Performance,". Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:2722,Load,Loading,2722,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,... the huge thing being that both ADIIS and GDM are especially useful for density functional theory. You get very good convergence without the complications of true second-order optimization. You only need Fock matrices to implement it; this means the method works also for meta-GGA functionals etc for which the second-order machinery is very involved.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874480678:179,optimiz,optimization,179,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874480678,1,['optimiz'],['optimization']
Performance,".........PASSED; int value: 10 2.3283823492e-01...............................................PASSED; float value: 10 2.3283823492e-01.............................................PASSED; int value: 11 2.8055889891e-01...............................................PASSED; float value: 11 2.8055889891e-01.............................................PASSED; int value: 12 1.2367881234e-01...............................................PASSED; float value: 12 1.2367881234e-01.............................................PASSED; text line: Sym= B2...................................................................FAILED. E psi4.driver.p4util.exceptions.TestComparisonError: 	text line: Sym= B2: computed value (B2) does not match (B1) by difference ((n/a)).; ```. ```; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Sun Aug 1 18:19:38 2021									 |	*** at Sun Aug 1 18:26:41 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: DZ												 Name: DZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry O line 107 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:7809,Load,Loading,7809,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,2,['Load'],['Loading']
Performance,".0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 2014; > ; > ---; > - TRANSQT2: Program to transform integrals from *; > - the SO basis to the MO basis. *; > - *; > - Daniel, David, & Justin *; > **************************************************; > ; > ## Input parameters:; > ; > Wave function = DETCI; > Backtransform = No; > Print Level = 1; > Print TEIs = No; > Reference wfn = RHF; > Derivative = None; > Delete TEI File = Yes; > Memory (Mbytes) = 5000.0; > Cache Level = 2; > Cache Type = LRU; > ; > ## Chkpt Parameters:; > ; > Number of irreps = 1; > Number of SOs = 246; > Number of MOs = 246; > Number of active MOs = 232; > ; > Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ; > ---; > ; > A 246 14 33 0 199 0; > ; > Nuclear Rep. energy (chkpt) = 697.11317829643781; > SCF energy (chkpt) = -535.97469065986820; > ; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (pq,rs) nbuckets = 2; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/61.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:16801,Cache,Cache,16801,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,2,['Cache'],['Cache']
Performance,.129476941194 15.994914619560; 401: H 0.000000000000 -1.494187339480 1.027446507924 1.007825032070; 401: H -0.000000000000 1.494187339480 1.027446507924 1.007825032070; 401: ; 401: Running in c2v symmetry.; 401: ; 401: Rotational constants: A = 25.12553 B = 13.37732 C = 8.72954 [cm^-1]; 401: Rotational constants: A = 753244.47204 B = 401041.84791 C = 261705.04646 [MHz]; 401: Nuclear repulsion = 8.801462060629429; 401: ; 401: Charge = 0; 401: Multiplicity = 1; 401: Electrons = 10; 401: Nalpha = 5; 401: Nbeta = 5; 401: ; 401: ==> Algorithm <==; 401: ; 401: SCF Algorithm Type is DF.; 401: DIIS enabled.; 401: MOM disabled.; 401: Fractional occupation disabled.; 401: Guess Type is SAD.; 401: Energy threshold = 1.00e-06; 401: Density threshold = 1.00e-06; 401: Integral threshold = 0.00e+00; 401: ; 401: ==> Primary Basis <==; 401: ; 401: Basis Set: 6-31G; 401: Blend: 6-31G; 401: Number of shells: 9; 401: Number of basis function: 13; 401: Number of Cartesian functions: 13; 401: Spherical Harmonics?: false; 401: Max angular momentum: 1; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: (6-31G AUX); 401: Role: JKFIT; 401: Keyword: DF_BASIS_SCF; 401: atoms 1 entry O line 221 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: atoms 2-3 entry H line 51 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: ; 401: ==> Pre-Iterations <==; 401: ; 401: -------------------------------------------------------; 401: Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; 401: -------------------------------------------------------; 401: A1 7 7 0 0 0 0; 401: A2 0 0 0 0 0 0; 401: B1 2 2 0 0 0 0; 401: B2 4 4 0 0 0 0; 401: -------------------------------------------------------; 401: Total 13 13 5 5 5 0; 401: -------------------------------------------------------; 401: ; 401: ==> Integral Setup <==; 401: ; 401: ==> DiskDFJK: Density-Fitted J/K Matrices <==; 401: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:3452,Load,Loading,3452,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Load'],['Loading']
Performance,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11021,CACHE,CACHE,11021,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['CACHE'],['CACHE']
Performance,".Any constrained optimization example where ""no_com"" and/or ""no_reorient""; isn't in the molecule input section and the geometry isn't in the standard; nuclear orientation. The job won't fail, but the constrained coordinates; will not be identical to their original values in the final output. -Trent. On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; wrote:. > @tparker36 https://github.com/tparker36 Can I get test case where this; > dies horribly?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/179#issuecomment-212570814. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-212574454:17,optimiz,optimization,17,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212574454,1,['optimiz'],['optimization']
Performance,".lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:1179,Load,Loading,1179,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,"/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3589,optimiz,optimized,3589,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,2,['optimiz'],['optimized']
Performance,"/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51105,optimiz,optimized,51105,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65429,optimiz,optimized,65429,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70104,optimiz,optimized,70104,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70220,optimiz,optimized,70220,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT mod",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1223,Perform,Performace,1223,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Perform'],['Performace']
Performance,"0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5994,optimiz,optimized,5994,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,3,['optimiz'],['optimized']
Performance,"0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bce",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:9056,optimiz,optimized,9056,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13384,optimiz,optimized,13384,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14714,optimiz,optimized,14714,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16044,optimiz,optimized,16044,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23668,optimiz,optimized,23668,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20942,optimiz,optimized,20942,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27068,optimiz,optimized,27068,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50392,optimiz,optimized,50392,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"00 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:8774,Cache,Cache,8774,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,2,['Cache'],['Cache']
Performance,"0012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2564,optimiz,optimized,2564,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"04 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our corre",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2455,load,load,2455,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,04 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this prob,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2011,load,load,2011,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"05 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_inf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:26695,optimiz,optimized,26695,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:56752,optimiz,optimized,56752,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"0>, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8, arena=arena@entry=0x7f215015b370); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #26 0x000056022aa3ccb2 in PyRun_StringFlags (; str=str@entry=0x56025a2d4098 ""\nimport psi4\nfrom psi4 import *\nfrom psi4.core import *\nfrom psi4.driver.diatomic import anharmonicity\nfrom psi4.driver.gaussian_n import *\nfrom psi4.driver.frac import ip_fitting, frac_traverse\nfrom ""..., start=start@entry=257, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1618; #27 0x000056022aa47f97 in builtin_exec_impl (module=<optimized out>, closure=<optimized out>, ; locals=0x7f21abff9900, globals=0x7f21abff9900, source=0x56025a2d4070); at /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to quit, c to continue without paging--; #32 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9020, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #33 0x000056022a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:7018,optimiz,optimized,7018,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,4,['optimiz'],['optimized']
Performance,"0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e1aede0, name=0x7fac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue withou",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:68544,optimiz,optimized,68544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwfla",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:26873,optimiz,optimized,26873,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50197,optimiz,optimized,50197,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45584,optimiz,optimized,45584,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44247,optimiz,optimized,44247,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30324,optimiz,optimized,30324,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28987,optimiz,optimized,28987,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35247,optimiz,optimized,35247,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48258,optimiz,optimized,48258,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39324,optimiz,optimized,39324,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62582,optimiz,optimized,62582,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36584,optimiz,optimized,36584,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46921,optimiz,optimized,46921,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58505,optimiz,optimized,58505,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61245,optimiz,optimized,61245,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52245,optimiz,optimized,52245,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74034,optimiz,optimized,74034,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71360,optimiz,optimized,71360,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81697,optimiz,optimized,81697,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53582,optimiz,optimized,53582,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84371,optimiz,optimized,84371,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66569,optimiz,optimized,66569,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83034,optimiz,optimized,83034,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72697,optimiz,optimized,72697,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:36,optimiz,optimization,36,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056,3,['optimiz'],['optimization']
Performance,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-149031508:1916,Optimiz,Optimization,1916,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508,3,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"1.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pytho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7554,optimiz,optimized,7554,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"14; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25760,optimiz,optimized,25760,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29747,optimiz,optimized,29747,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:31084,optimiz,optimized,31084,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36007,optimiz,optimized,36007,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37344,optimiz,optimized,37344,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:40084,optimiz,optimized,40084,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45007,optimiz,optimized,45007,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46344,optimiz,optimized,46344,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47681,optimiz,optimized,47681,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53005,optimiz,optimized,53005,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60668,optimiz,optimized,60668,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62005,optimiz,optimized,62005,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:63342,optimiz,optimized,63342,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:67329,optimiz,optimized,67329,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72120,optimiz,optimized,72120,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73457,optimiz,optimized,73457,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:76197,optimiz,optimized,76197,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81120,optimiz,optimized,81120,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82457,optimiz,optimized,82457,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83794,optimiz,optimized,83794,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"14; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:85131,optimiz,optimized,85131,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:78541,optimiz,optimized,78541,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1285,perform,performance,1285,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['perform'],['performance']
Performance,"24 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1234,Optimiz,Optimizations,1234,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Optimiz'],['Optimizations']
Performance,"25 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50019,optimiz,optimized,50019,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:4961,optimiz,optimized,4961,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,3,['optimiz'],['optimized']
Performance,"3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33494,optimiz,optimized,33494,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"3975_0 psi4/label/dev; mkl 2018.0.2 1; mkl-devel 2018.0.1 h470d631_5; mkl-include 2017.0.3 intel_8 psi4/label/dev; mkl_fft 1.0.1 py35h3010b51_0; mkl_random 1.0.1 py35h629b387_0; more-itertools 4.1.0 py35_0; ncurses 6.0 h9df7e31_2; networkx 2.1 py35_0; numpy 1.14.2 py35hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.2.1 py35hce75f6e_0 psi4/label/dev; pip 10.0.1 py35_0; pluggy 0.6.0 py35hb428803_0; psi4-dev 1.2a1.dev8 py35h45acd66_0 psi4/label/dev; py 1.5.3 py35_0; pybind11 2.2.3 py35_0 psi4/label/dev; pytest 3.5.1 py35_0; python 3.5.5 hc3d631a_3; readline 7.0 ha6073c6_4; rhash 1.3.5 hbf7ad62_1; setuptools 39.1.0 py35_0; six 1.11.0 py35h423b573_1; sqlite 3.23.1 he433501_0; tk 8.6.7 hc745277_3; wheel 0.31.0 py35_0; xz 5.2.3 h5e939de_4; zlib 1.2.11 ha838bed_2. ```; gcc --version; `gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609`. $CC --version; `x86_64-conda_cos6-linux-gnu-cc (crosstool-NG fa8859cb) 7.2.0`. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008:2309,cache,cache,2309,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008,8,"['CACHE', 'cache']","['CACHE', 'cache']"
Performance,"3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it failed in the grad computation of the second geometry optimization cycle with a ""Bus error"" after/during ```==> DFJKGrad: Density-Fitted SCF Gradients <==```. Thanks for looking into this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:1747,optimiz,optimization,1747,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,3,['optimiz'],['optimization']
Performance,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1404,Optimiz,Optimize,1404,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Optimiz'],['Optimize']
Performance,"50835 -3.209375; --; C 1.762137 -1.702272 3.907327; N 1.008514 -0.826933 3.073959; C -0.255272 -1.171286 2.659701; O -0.889107 -2.139983 3.059359; C -0.900138 -0.137125 1.727920; C -1.956427 0.697535 2.386933; C -1.122652 1.840978 2.981496; C -0.096631 2.090501 1.911054; N 0.182391 0.804731 1.237639; C 0.606984 0.675148 -0.082718; O 0.481731 -0.301961 -0.785930; C 1.235157 1.958654 -0.650979; H 1.353383 -1.743533 4.930961; H 2.767495 -1.250368 3.947910; H 1.854613 -2.732246 3.523648; H 1.430423 0.082809 2.871745; H -1.239078 -0.581913 0.770233; H -2.471298 0.066853 3.136998; H -2.719629 1.061761 1.672573; H -0.610350 1.606676 3.934438; H -1.798872 2.698054 3.164789; H -0.408884 2.958700 1.299354; H 0.836907 2.367926 2.437353; H 0.405581 2.645117 -0.890106; H 1.847741 1.817925 -1.557370; H 1.862150 2.422724 0.128846; no_reorient; no_com; symmetry c1; """"""); psi4.set_module_options(""optking"", {""frag_mode"": ""multi"", ""freeze_intrafrag"": True}); psi4.optimize('SCF/STO-3G', molecule=dimer, bsse_type='cp', freeze_intrafrag=True); ```. I get the following backtrace:; ```; #0 0x00007fffe074edf3 in opt::INTERFRAG::orient_fragment () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #1 0x00007fffe06ec4e1 in opt::MOLECULE::rfo_step () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #2 0x00007fffe064e7f7 in opt::optking(psi::Options&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #3 0x00007fffdf472f9f in py_psi_optking() () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #4 0x00007fffdf48fe51 in void pybind11::cpp_function::initialize<int (*&)(), int, , pybind11::name, pybind11::scope, pybind11::sibling, char [58]>(int (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:1560,optimiz,optimize,1560,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,1,['optimiz'],['optimize']
Performance,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1451,Perform,Performing,1451,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,6,['Perform'],['Performing']
Performance,"663418; S 1 1.00; 1.04455407 1.0000000; S 1 1.00; 0.30382295 1.0000000; S 1 1.00; 0.07271795 1.0000000; P 4 1.00; 34.75998468 0.0199871; 7.80757529 0.1258380; 2.29096903 0.3939784; 0.71677956 0.6260029; P 1 1.00; 0.21323853 1.0000000; P 1 1.00; 0.05887653 1.0000000; D 1 1.00; 1.25011953 1.0000000; D 1 1.00; 0.34100653 1.0000000; ****; I 0; S 8 1.00; 5464702.08060097 0.0001093; 849942.52168504 0.0007913; 207458.86762606 0.0036900; 64929.86485391 0.0131833; 23909.80880875 0.0395406; 9850.71275593 0.1040723; 4222.34623514 0.2741166; 1781.76403452 0.6488818; S 2 1.00; 749.21394356 -0.5595941; 318.75246448 -0.4728234; S 1 1.00; 118.02205930 -1.0000000; S 2 1.00; 59.88344918 -0.7200351; 29.50227605 -0.2987074; S 2 1.00; 12.24593624 -0.5061450; 6.20345391 -0.5148945; S 2 1.00; 2.43764323 0.5412411; 1.14985168 0.4841938; S 1 1.00; 0.30638210 -1.0000000; S 1 1.00; 0.11926836 -1.0000000; S 1 1.00; 0.03719760 1.0000000; P 7 1.00; 20182.20166081 0.0004988; 4999.21100888 0.0038641; 1768.53795847 0.0174910; 734.77528080 0.0632147; 317.51165410 0.1951982; 139.60118455 0.4117047; 63.12833732 0.4496355; P 1 1.00; 28.34086632 1.0000000; P 2 1.00; 13.45203045 -0.6861431; 6.52579989 -0.3486363; P 3 1.00; 3.02467901 0.5601269; 1.38040546 0.4313665; 0.52669045 0.0821826; P 1 1.00; 0.22217820 1.0000000; P 1 1.00; 0.08328104 1.0000000; P 1 1.00; 0.04062406 1.0000000; D 6 1.00; 565.98837950 0.0067496; 168.69681731 0.0529920; 63.14306896 0.2071444; 26.10306850 0.4270744; 11.24530421 0.4189456; 4.63907320 0.1167256; D 1 1.00; 1.91572411 1.0000000; D 1 1.00; 0.72024616 1.0000000; D 1 1.00; 0.07663996 1.0000000; F 1 1.00; 2.20029999 1.0000000; F 1 1.00; 0.52320000 1.0000000; ****; }. set basis jorge; set {; 	memory 16GB; 	freeze_core false; 	reference RHF; 	scf_type PK; 	ints_tolerance 1.0E-14; 	E_CONVERGENCE 1.0E-10; 	D_CONVERGENCE 1.0E-10; 	#maxiter 250; #STABILITY_ANALYSIS check; 	#FAIL_ON_MAXITER False; 	#cachelevel 0; }; #scf_e, scf_wfn = energy('scf', return_wfn=True); energy('BCCD'). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293:3282,cache,cachelevel,3282,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226040293,1,['cache'],['cachelevel']
Performance,"726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.9; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.9; [sfux@euler04 ~]$ module purge; [sfux@euler04 ~]$ module load new python/2.7.12; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.12; [sfux@euler04 ~]$; ```. Best regards and thank you again for your help",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:2448,load,loading,2448,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,4,['load'],"['load', 'loading']"
Performance,"73000-7efc99c74000 r--p 0081f000 fd:02 251997410 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_lp64.so; 7efc99c74000-7efc99c85000 rw-p 00820000 fd:02 251997410 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_lp64.so; 7efc99c8b000-7efc9b367000 r-xp 00000000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b367000-7efc9b566000 ---p 016dc000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b566000-7efc9b569000 r--p 016db000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b569000-7efc9b749000 rw-p 016de000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b750000-7efc9d003000 r-xp 00000000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d003000-7efc9d202000 ---p 018b3000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d202000-7efc9d20a000 r--p 018b2000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d20a000-7efc9d22b000 rw-p 018ba000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efca5e25000-7efca621d000 r-xp 00000000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca621d000-7efca641d000 ---p 003f8000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca641d000-7efca6423000 r--p 003f8000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca6423000-7efca6424000 rw-p 003fe000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; ```. * Conclusions; * If we don't want to enforce a loading order of numpy and psi4, must use intel channel numpy; * When I was only using MKL headers from intel channel, lack of py36 didn't matter. But NumPy has to be compiled for a certain py version; * Ordinary psi4 core.so 37 MB. One compiled for avx2, avx, w/default sse4.1 is 53 MB. Not bad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-313016394:14809,load,loading,14809,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394,1,['load'],['loading']
Performance,"74 1.007825032230; H -2.751482207601 3.525725481575 0.978750254628 1.007825032230; H -5.041124717719 0.143747881126 2.985491874213 1.007825032230; H -1.897047410743 -1.511749253062 -0.052863913919 1.007825032230; H -0.075772329213 1.770882773042 -0.598697666704 1.007825032230; Gh(C) 0.474241568549 -1.806355440989 -3.081314925013 12.000000000000; Gh(C) 0.648397096782 -0.635430651446 -4.412834530975 12.000000000000; Gh(O) 1.808983940470 0.135808630731 -4.689016685298 15.994914619570; Gh(O) -0.601792270472 -0.580730799038 -5.346002144161 15.994914619570; Gh(C) 1.842013051412 -1.750538066582 -1.877436731479 12.000000000000; Gh(C) 1.748380277776 -3.125392178990 -0.682540886187 12.000000000000; Gh(C) 0.551428575668 -3.079126453237 0.382902937848 12.000000000000; Gh(O) -0.772123362553 -3.017893882098 0.005326940643 15.994914619570; Gh(O) 1.164188263699 -2.773183751061 1.753201347751 15.994914619570; Gh(C) 1.956475179932 -0.293321161210 -1.099031580479 12.000000000000; Gh(O) 0.992725973388 0.559110742214 -1.297006473496 15.994914619570; Gh(O) 3.130049422860 -0.154233046346 -0.072768016824 15.994914619570; Gh(O) 3.196147367497 -1.811177694362 -2.579148566611 15.994914619570; Gh(H) 0.331210026589 -2.880972115219 -3.515800481502 1.007825032230; Gh(H) -0.568593016142 -1.679247170680 -2.603980470596 1.007825032230; Gh(H) -0.337129028344 0.137702882174 -6.101596488384 1.007825032230; Gh(H) 2.839165670708 -3.170793868693 -0.034525947893 1.007825032230; Gh(H) 1.503523685805 -4.153371056510 -1.238801035107 1.007825032230; Gh(H) 0.381496756170 -2.300443540051 2.173560639006 1.007825032230; Gh(H) 2.908852211708 0.661916839703 0.492311211561 1.007825032230; Gh(H) 3.261181481570 -0.956120691787 -3.343640597980 1.007825032230. Running in c1 symmetry. Rotational constants: A = 0.00767 B = 0.00407 C = 0.00370 [cm^-1]; Rotational constants: A = 230.03247 B = 122.05678 C = 110.97094 [MHz]; ```; I misunderstood you on my first reply, this is the geometry prior to the final failed optimization",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952851437:3648,optimiz,optimization,3648,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952851437,1,['optimiz'],['optimization']
Performance,"7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79917,optimiz,optimized,79917,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"7m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3912,optimiz,optimized,3912,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,4,['optimiz'],['optimized']
Performance,"8771 0.8345349 2.4380471; H 3.4723294 0.2985395 2.1138258; C 4.8833315 0.8242594 3.8339865; H 4.2106066 0.7640545 4.7169315; C 5.1352600 1.7388308 0.2154605; C 5.9367201 2.7180065 -0.4070459; H 6.5906010 3.3693857 0.1542320; C 5.8968481 2.8895370 -1.7876785; H 6.5102956 3.6525267 -2.2492787; C 5.0705595 2.0801358 -2.5660919; H 5.0459052 2.2150282 -3.6371008; C 4.2801843 1.0988215 -1.9619599; H 3.6456490 0.4646484 -2.5633688; C 4.3069360 0.9308698 -0.5777838; H 3.6946764 0.1590780 -0.1340784; Pd 4.9767091 -2.9156010 -0.8306564; Cl 3.4192488 -2.6431143 0.8822123; Cl 6.4966175 -3.2589661 -2.5675971; N 6.4035839 -3.3735495 0.5030511; N 6.1871875 -3.2211030 1.8618602; H 5.4954819 -2.5263042 2.2125460; N 3.5021334 -2.4381912 -2.1211903; N 3.5243915 -2.9396423 -3.4027689; H 4.3679055 -3.2478427 -3.8957127; C 7.4771967 -3.3701598 2.4264557; C 8.4189802 -3.8527379 1.4233890; H 9.4577596 -4.1288843 1.5525635; C 7.7219966 -3.8195570 0.2409887; H 8.1357666 -4.0945974 -0.7185031; C 7.7241254 -3.1038209 3.8339410; C 7.0325411 -2.0594134 4.4713758; H 6.3311040 -1.4377552 3.9310874; C 7.2755769 -1.7799172 5.8117697; H 6.7608347 -0.9578992 6.2880679; C 8.1817498 -2.5631263 6.5292546; H 8.3679609 -2.3509248 7.5705948; C 8.8458639 -3.6232926 5.9024611; H 9.5290436 -4.2449953 6.4602769; C 8.6312106 -3.8829756 4.5501667; H 9.1416492 -4.7076088 4.0686112; C 2.3148570 -2.6412247 -4.0406367; C 1.4430496 -2.1324266 -3.1729914; H 0.4299045 -1.8152948 -3.3765456; C 2.0956876 -2.1771295 -1.8399026; H 1.6924807 -1.8147056 -0.8735104; C 2.0987775 -2.8804341 -5.4680291; C 2.8176217 -3.9063691 -6.1045465; H 3.5215126 -4.5219624 -5.5560126; C 2.6007752 -4.1791261 -7.4518988; H 3.1399962 -4.9858220 -7.9301448; C 1.6833592 -3.4165632 -8.1761041; H 1.5175424 -3.6305460 -9.2208342; C 0.9806544 -2.3809082 -7.5519679; H 0.2780607 -1.7849973 -8.1154290; C 1.1799022 -2.1166497 -6.1970657; H 0.6369442 -1.3079212 -5.7230613; }; m06_wfn= optimize('M06', return_wfn=True); molden(m06_wfn, 'm06_orbitals.molden')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640050708:3211,optimiz,optimize,3211,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640050708,1,['optimiz'],['optimize']
Performance,8_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1929,cache,cached-property,1929,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['cache'],['cached-property']
Performance,"8ed1ab_0 conda-forge; pytest 7.1.2 py38haa244fe_0 conda-forge; python 3.8.13 hcf16a7b_0_cpython conda-forge; python_abi 3.8 2_cp38 conda-forge; pyyaml 6.0 py38h294d835_4 conda-forge; qcelemental 0.17.0 py_0 psi4; qcengine 0.19.0 pyhd8ed1ab_0 psi4; scipy 1.8.1 py38h9bf8e03_0 conda-forge; setuptools 61.2.0 py38haa95532_0; sqlite 3.38.3 h2bbff1b_0; tk 8.6.12 h8ffe710_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; vc 14.2 h21ff451_1; vs2015_runtime 14.27.29016 h5e58377_2; wheel 0.37.1 pyhd3eb1b0_0; wincertstore 0.2 py38haa95532_2; xz 5.2.5 h62dcd97_1 conda-forge; yaml 0.2.5 h8ffe710_2 conda-forge; zipp 3.8.0 pyhd8ed1ab_0 conda-forge; ```. Manually updating pydantic with `pip install -U pydantic`, installs version 1.9.1 and then running `psi4 --test` gives:; ```; ================================================= test session starts =================================================; platform win32 -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0 -- Path\psi4conda\envs\psi16\python.exe; cachedir: .pytest_cache; rootdir: Path\psi4conda\envs\psi16\lib\site-packages\psi4, configfile: pytest.ini; collected 4042 items / 1 error / 3950 deselected / 92 selected. ======================================================= ERRORS ========================================================; _______________________________ ERROR collecting tests/test_qcel_molparse_to_string.py ________________________________; psi4conda\envs\psi16\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:2785,cache,cachedir,2785,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['cache'],['cachedir']
Performance,": share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2699,Perform,Performing,2699,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,2,['Perform'],['Performing']
Performance,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:2325,load,loading,2325,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597,1,['load'],['loading']
Performance,":1743; #26 0x000056022aa3ccb2 in PyRun_StringFlags (; str=str@entry=0x56025a2d4098 ""\nimport psi4\nfrom psi4 import *\nfrom psi4.core import *\nfrom psi4.driver.diatomic import anharmonicity\nfrom psi4.driver.gaussian_n import *\nfrom psi4.driver.frac import ip_fitting, frac_traverse\nfrom ""..., start=start@entry=257, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1618; #27 0x000056022aa47f97 in builtin_exec_impl (module=<optimized out>, closure=<optimized out>, ; locals=0x7f21abff9900, globals=0x7f21abff9900, source=0x56025a2d4070); at /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to quit, c to continue without paging--; #32 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9020, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #33 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x560259e3fbd0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #34 0x000056022",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:7251,optimiz,optimized,7251,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,"::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=...) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7139,optimiz,optimized,7139,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:3542,optimiz,optimized,3542,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,":function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5346,optimiz,optimized,5346,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2667,perform,performing,2667,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['perform'],['performing']
Performance,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6889,optimiz,optimized,6889,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,5,['optimiz'],['optimized']
Performance,= NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap matrix is 1.1340153394E-01.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Core (One-Electron) Hamiltonian.								 SCF Guess: Core (One-Electron) Hamiltonian. -------------------------------------------------------						 -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc						 Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------						 -------------------------------------------------------; Ag 5 5 2 2 2 0						 Ag 5 5 2 2 2 0; B1g 1 1 0 0 0 0						 B1g 1 1 0 0 0 0; B2g 1 1 0 0 0 0						 B2g 1 1 0 0 0 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6847,Cache,Cached,6847,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Cache'],['Cached']
Performance,= TREUTLER								 Radial Scheme = TREUTLER; Pruning Scheme = NONE								 Pruning Scheme = NONE; Nuclear Scheme = TREUTLER								 Nuclear Scheme = TREUTLER. BS radius alpha = 1								 BS radius alpha = 1; Pruning alpha = 1								 Pruning alpha = 1; Radial Points = 99							 |	 Radial Points = 75; Spherical Points = 770								 Spherical Points = 770; Total Points = 69300							 |	 Total Points = 53130; Total Blocks = 570							 |	 Total Blocks = 475; Max Points = 256							 |	 Max Points = 255; Max Functions = 14								 Max Functions = 14; Weights Tolerance = 1.00E-15								 Weights Tolerance = 1.00E-15. ==> Integral Setup <==										 ==> Integral Setup <==. ==> DirectJK: Integral-Direct J/K Matrices <==							 ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: No									 K tasked: No; wK tasked: No									 wK tasked: No; Integrals threads: 1									 Integrals threads: 1; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. Cached 100.0% of DFT collocation blocks in 0.028 [GiB].					 |	 Cached 100.0% of DFT collocation blocks in 0.021 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.						 Minimum eigenvalue in the overlap matrix is 1.9330486283E-01.; Reciprocal condition number of the overlap matrix is 1.1340153394E-01.				 Reciprocal condition number of the overlap matrix is 1.1340153394E-01.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Iterations <==										 ==> Pre-Iterations <==. SCF Guess: Core (One-Electron) Hamiltonian.								 SCF Guess: Core (One-Electron) Hamiltonian. -------------------------------------------------------						 -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc						 Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------						 -------------------------------------------------------; Ag 5 5 2 2 2 0						 Ag 5 5 2 2 2 0; B1g 1 1 0 0 0 0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:6783,Cache,Cached,6783,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Cache'],['Cached']
Performance,"=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10433,CACHE,CACHE,10433,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,3,['CACHE'],['CACHE']
Performance,"=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:2610,optimiz,optimized,2610,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,6,['optimiz'],['optimized']
Performance,"=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2464,optimiz,optimized,2464,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12574,optimiz,optimized,12574,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19019,optimiz,optimized,19019,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22858,optimiz,optimized,22858,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"> * Beyond just debug/release CMake build type, have a ""profiling"" build where both debugging and optimization are enabled. This is required if one wants to run perf/Vtune and get meaningful results. With modern compilers the debugging symbols contain enough information that compiler optimizations do not make debugging/profiling impossible. Before making a custom option, perhaps `RelWithDebInfo` is enough?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374:98,optimiz,optimization,98,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1228536374,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:1116,optimiz,optimized,1116,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231,2,['optimiz'],['optimized']
Performance,> 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. I am in no way qualified to comment on the C++ pointer stuff. But I had a Intel VTune setup for this PR and [the profiling](https://github.com/psi4/psi4/files/4687387/result.txt) looks sufficiently clean.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-634505041:102,perform,performance,102,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634505041,1,['perform'],['performance']
Performance,"> ; > ; > I hope that changes or that at least people can find workarounds. Apple's advertising seems mostly geared towards video editors and photographers, but the chips have great potential for certain scientific computing workloads. I was somewhat interested in the new M1 Max, due to the very high memory BW (~8 channels of DDR4), but that was soon tempered by the discovery that the CPU cores cannot use more than [half of the total BW](https://www.anandtech.com/show/17024/apple-m1-max-performance-review/2) due to some, yet again undocumented, internal bus bottleneck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455:492,perform,performance-review,492,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956443455,2,"['bottleneck', 'perform']","['bottleneck', 'performance-review']"
Performance,"> ; > ; > Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?. Thanks for your reply. I followed the instructions in your reference but it still doesnt work. Now I see the option to change the kernel in the Notebook to `p4env`, but when trying to import psi4 in that environment I get another error; `ImportError: DLL load failed while importing core`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342:327,load,loading,327,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947965342,2,['load'],"['load', 'loading']"
Performance,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:1377,perform,perform,1377,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876,1,['perform'],['perform']
Performance,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:107,optimiz,optimizer,107,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"> ; > This conventional HF example is also a kind of worst-case scenario, since integral calculation is not the rate-limiting step in most Psi4 calculations (like anything with DF). I think it wouldn't hurt to tighten (or completely turn off) primitive screening, although there could be other systems or basis sets for which primitive screening leads to larger performance gains. Maybe the ANO basis set family would suffer from this? While I do not use them, IIRC they are notorious for having an extremely high number of primitives, and for slowing many integral packages to a glacial pace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783409559:362,perform,performance,362,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783409559,1,['perform'],['performance']
Performance,"> > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed.; > ; > MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. This is completely correct. The lone OLCCD algorithm in `occ` does not compute LCCD with the input orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739:689,optimiz,optimized,689,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739,1,['optimiz'],['optimized']
Performance,"> > > An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?; > ; > > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.; > ; > I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. OK, you changed my hasty mind on that. What concerns me is that the user may, in some instances, not realize that the default active molecule is the one that optking is acting on and changing. But the upside convenience wins, I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584:120,optimiz,optimization,120,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584,2,['optimiz'],['optimization']
Performance,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:498,cache,cache,498,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,5,['cache'],['cache']
Performance,"> > So now that this PR and #2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc.; > ; > Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow. Yeah, I don't think we've had an actual merge conflict from the merge queue yet (at least not that I have seen), so it can be an experiment to see what happens in that case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839:82,queue,queue,82,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839,3,['queue'],['queue']
Performance,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:146,perform,perform,146,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129,3,['perform'],"['perform', 'performance', 'performed']"
Performance,"> > Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > > ; > ; > > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > ; > > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > > ; > ; > > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).; > ; > ; > ; > Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR. I could also do both 1 and 2 in this PR, if that makes things easier. Which do y'all prefer (2 then 1, or 1 and 2) @zachglick @JonathonMisiewicz ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035:311,cache,cached,311,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035,3,['cache'],['cached']
Performance,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:489,cache,cache,489,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,5,['cache'],['cache']
Performance,"> Added Cholesky-decomposition MP2 and optimized-orbital MP2. That should be ""orbital-optimized MP2"" instead I think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-221834969:39,optimiz,optimized-orbital,39,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-221834969,2,['optimiz'],"['optimized', 'optimized-orbital']"
Performance,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:61,optimiz,optimization,61,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['optimiz'],['optimization']
Performance,"> Bumping this - the [C7g](https://aws.amazon.com/ec2/instance-types/c7g/) ARM-based Amazon EC2 instances are probably the most cost-effective choice for high-performance CPU computing in the cloud right now. Not trying to derail this conversation, but I am not convinced that is true, at least if one plans to run close to 100% utilization for extended periods of time.; Something like a c7gd.12xlarge (48 vCPU, 96 GiB RAM, NVME SSD in the node) costs 590 USD per month, if the cheapest Amazon region (Mumbai, India) is used and 1 year is paid for in advance.; From a different provider one can rent a bare metal Ampere Altra Q80-30 server (80 cores, 128 GiB RAM, NVME SSD in the node), for 185 USD per month + $85 setup fee.; Even a 48 core latest-gen AMD EPYC, which will quite likely be faster than the Graviton 3 instance, costs only $218/month, and it comes with 256 GiB of RAM. Both of these options are cheaper per hour than Amazon's spot pricing (!!) for c7gd.12xlarge. So unless there are complications like funding agencies not allowing grant funds to be spent at arbitrary server providers, I think one can get more bulk compute for less money, compared to Amazon. Of course on-demand EC2 is very good for doing short bursts of compute, but for job marathons I don't think Amazon is all that competitive, not even with their own ARM CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263:159,perform,performance,159,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263,1,['perform'],['performance']
Performance,"> Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?. I poorly worded my explanation. I was attempting to say that the geometries are virtually the same but not numerically, they are both well converged. I assumed the discrepancy was just a numeric difference and there have been various tweaks as well over the last few years to the algorithm. There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. > Is .log where all the optking detailed output goes now? I guess we ought to start collecting them. output.log, perhaps. But this can also be deferred to a grand regenerate-the-refs script and PR. Yes optking's detailed output goes to `.log` but it isn't strictly speaking necessary for the user to see the detailed logs I would say. However, if the test is failing it might be nice to have a more detailed optimization record to compare against if the optimizer is at fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435:1236,optimiz,optimization,1236,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"> Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications?. For M1 and successor? Not that I am aware. Most of the bottlenecks are usually BLAS/LAPACK (and I/O but let's ignore that) so it often is enough to test the linear algebra library.; Among programs there are algorithmic choices/limitations that often make comparisons difficult if not pointless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354:166,perform,performance,166,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354,2,"['bottleneck', 'perform']","['bottlenecks', 'performance']"
Performance,"> First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting start_angle = 181.0. > I also added symmetry c1 to the molecule definition section, to make sure weird things don't happen as the symmetry changes. I had done both of these things too (Sorry, I probably should've posted that too) and while the optimizations did converge (although not for all structures), the structures were still of very high energy when compared to the molecular mechanics energy of the optimized structure. When I generated the starting structures outside of psi4, the molecular mechanics energies were much closer to the QM energies (as it should be since the parameters were fit to reproduce this scan). [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf) is a figure comparing the QM and MM energies from structures generated with psi4; [Here](https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf) is one comparing QM and MM energies from structures generated outside of psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288896856:403,optimiz,optimizations,403,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288896856,2,['optimiz'],"['optimizations', 'optimized']"
Performance,"> For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information. It sort of sounds like the code should do a Gram-Schmidt to reorthogonalize the orbitals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869301276:74,optimiz,optimizations,74,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869301276,1,['optimiz'],['optimizations']
Performance,"> For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information. That also means that the first energy is non-variational...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869305662:74,optimiz,optimizations,74,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869305662,1,['optimiz'],['optimizations']
Performance,"> Have you thought about emitting a warning for cases which converge to within `1e-3` but not within `1e-6`?. In my experience, it's not worth warning about. > Also, if `1e-3` is deemed good enough to go on, why bother converging to `1e-6` in the first place?. My reasons are primarily aesthetic. This is a very cheap optimization, so while there's no practical benefit, there is also no practical cost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2445#issuecomment-1043181522:318,optimiz,optimization,318,https://psicode.org,https://github.com/psi4/psi4/pull/2445#issuecomment-1043181522,1,['optimiz'],['optimization']
Performance,"> Hey all, I have updated the code to account for the two density matrices present in UHF.; > ; > I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance.; > ; > I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz). Link to my tests:. https://docs.google.com/spreadsheets/d/1PDt8LPHo_kWV-ukY3Zm24qJUc-QLf5Cv7CXCKkYzFvs/edit?usp=sharing",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847:214,perform,performance,214,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847,1,['perform'],['performance']
Performance,"> Hi Yi,; > ; > Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:236,optimiz,optimization,236,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['optimiz'],['optimization']
Performance,"> However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. No, these are plots of the same structure. That's why I'm not sure what is going on. ; > If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. Could it be that given these structures differ slightly from the ones that the forcefield was parameterized with that the MM energies are so much higher? In the second plot that I linked, I generated my own initial guesses and with those structures the MM energies are closer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-289561812:333,optimiz,optimization,333,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-289561812,1,['optimiz'],['optimization']
Performance,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1091,optimiz,optimization,1091,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470,1,['optimiz'],['optimization']
Performance,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:542,perform,performant,542,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,3,"['optimiz', 'perform']","['optimized', 'performant']"
Performance,"> I looked into this. I believe that this method is responsible for the lack of scaling:; > ; > ; > ; > psi4/psi4/src/psi4/libmints/potentialint.h; > ; > ; > Line 66; > in; > fe246a0; > ; > ; > ; > ; > ; > ; > ; > void PCMPotentialInt::compute(PCMPotentialIntFunctor &functor) { ; > ; > ; > ; > ; > ; > Unfortunately, it won't be trivial to parallelize. This is because of the ObaraSaika-Recurrence object that's touched deep within the nested operations:; > ; > ; > ; > psi4/psi4/src/psi4/libmints/potentialint.h; > ; > ; > Line 147; > in; > fe246a0; > ; > ; > ; > ; > ; > ; > ; > potential_recur_->compute(PA, PB, PC, gamma, am1, am2); ; > ; > ; > ; > ; > ; > The entire method shares this one object, so this line must be executed sequentially, meaning any parallelization must occur in an even more nested region than this one (which would be too nested to improve performance).; > I can think of two possible solutions to this problem:; > ; > Allow the creation of one ObaraSaika-Recurrence object per thread. This would be the simplest to implement, but it would increase the memory cost of the calculation (by a factor of at most num_threads).; > Parallelize the compute method of the ObaraSaika-Recurrence object itself. This could make the ObaraSaika code a little uglier since some of the loops might have to be unrolled, but it wouldn't require significantly more memory.; > ; > I'd be happy to work on this, but I'd like to know if anyone else had any opinions or suggestions. I tried to add openmp parallelism by the first method. Although it did run faster, it consum much more memory. so sad...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-511102993:869,perform,performance,869,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-511102993,1,['perform'],['performance']
Performance,"> I may not be following this right. I'd say the state of the psi4 active mol during an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on should be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. I want to make sure that the active molecule behavior is as expected. Whatever molecule the driver uses will be updated. This will be either the active molecule OR the passed molecule. If the molecule is passed the active molecule is not updated in any way. All the asserts pass here. ```python; import math. molecule h2o {; pubchem:water; }. molecule h2o2 {; pubchem:hydrogen peroxide; }. # quick comparison. h2o2 is active molecule; h2o2_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_nre, active_nre). # optimize h2o2 (active molecule) expect repulsion energy to match; E = optimize(""scf/sto-3g""); h2o2_opt_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre). # optimize h2o. nuclear repulsion does not match. active molecule is still h2o2; # Currently (next commit will fix) h2o2 would be optimized by this call. (optking side issue); E = optimize(""scf/sto-3g"", molecule=h2o); h2o_opt_nre = h2o.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre); ```; The whole wrong molecule being optimized thing is an optking side issue that is fixed on optking/master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555:88,optimiz,optimization,88,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555,7,['optimiz'],"['optimization', 'optimize', 'optimized']"
Performance,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:641,perform,performance,641,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,2,"['load', 'perform']","['loaded', 'performance']"
Performance,"> I think it adds `-g` currently, but allows the compiler to use its default optimization (usually `-O2`), which often trips up debuggers. I can confirm this. I've been passing the `-O0` flag manually when trying to figure this bug out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822605460:77,optimiz,optimization,77,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822605460,1,['optimiz'],['optimization']
Performance,"> I would keep the ""COSX"" for recognition. That's a good point; ""COSX"" is a fairly well-known algorithm. For consistency throughout the psi4's `libfock` library, I think it would be good to call it ""COSK"" over ""COSX""; all reference to the exchange matrix use the variable ""K"". > This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. Yes, the SCF is first converged on a small grid (specified by `COSK_RADIAL_POINTS` and `COSK_SPHERICAL_POINTS`). Afterwards, a single iteration is performed on a larger grid (specified by `COSK_RADIAL_POINTS_FINAL` and `COSK_SPHERICAL_POINTS_FINAL`). A good future mini-optimization would be to add a third medium grid, which would be used to converge the SCF after the small grid but before the final grid evaluation. > I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though. Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one. After we gain experience with the psi4 COSX we can make a couple useful defaults. I agree, it would be nice to have named quadrature grids. For now, I'll update the manual with some recommended spherical/radial point values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160:523,perform,performed,523,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"> I'd like some confidence that these changes really are essential preparation for work-in-progress in the CDS group that you expect to be submtited soon. Both of these changes are necessary for semi-numerical exchange, which I plan to submit in the next week or two. Because these changes touch important parts of the SCF/JK code but shouldn't change any existing behavior, I thought it would be best to submit them separately. > Can you give me an outline, or a draft PR, of how this responsibility transfer simplifies Incremeental Fock?. Sure, I'll do my best to explain. As you probably know, `JK` objects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:884,perform,performs,884,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,1,['perform'],['performs']
Performance,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:830,optimiz,optimization,830,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966,1,['optimiz'],['optimization']
Performance,"> IIRC speedups of seminumerical methods increase with larger basis sets, so you may want to benchmark those as well... You’re totally right. I have DZ timings, which agree with your statement. I need to run QZ eventually. Side note: the integral bound used in this PR is looser for higher angular momentum. I expect future improvements to this integral bound to make the performance of higher angular momentum basis sets even better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120037065:372,perform,performance,372,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120037065,1,['perform'],['performance']
Performance,"> In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. > Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. General guidance to for ref values to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:544,optimiz,optimized,544,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,2,['optimiz'],"['optimized', 'optimizer']"
Performance,> Interesting idea to drop the duplicate shells. We generally consider that the total drop is pretty small and haven't worried about optimizing for this case much. For example coronene aug-cc-pVTZ duplication is only about 15% which is a pretty extreme case. Do you have example where very large numbers of AO's are dropped?. See the paper on arXiv. I think the usual use case would be multiply augmented basis sets that are needed for special applications. But the current implementation will go a long way to make sure the program works even for these pathological cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-562826868:133,optimiz,optimizing,133,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-562826868,1,['optimiz'],['optimizing']
Performance,"> Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. The way the dynamic linker's lookups work on linux, this shouldn't happen on Linux unless the extensions were loaded with RTLD_GLOBAL. But mac could be different. On Linux, two python extensions can definitely have symbols with the same name and things work fine (more detail than one could ever want is in https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311738003:64,load,loading,64,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738003,2,['load'],"['loaded', 'loading']"
Performance,"> One question, to all core developers, IMHO, we should change the default value for `df_scf_guess` from true to false, since optimized direct algorithms would be faster than density fitting for large systems. What do y'all think?. But that's only true for small basis sets. If you run small to moderate sized molecules with triple-zeta basis sets, DF is very fast.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937512242:126,optimiz,optimized,126,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937512242,1,['optimiz'],['optimized']
Performance,"> One question, to all core developers, IMHO, we should change the default value for `df_scf_guess` from true to false, since optimized direct algorithms would be faster than density fitting for large systems. What do y'all think?. The only way you will convince me is with a thorough timings benchmark across a variety of system sizes. _That said_, such a change is outside the scope of this PR anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937738887:126,optimiz,optimized,126,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937738887,1,['optimiz'],['optimized']
Performance,"> So now that this PR and https://github.com/psi4/psi4/pull/2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc. Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847:113,queue,queue,113,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847,2,['queue'],['queue']
Performance,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:740,Perform,Performing,740,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,1,['Perform'],['Performing']
Performance,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:146,perform,perform,146,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381,1,['perform'],['perform']
Performance,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:941,optimiz,optimization,941,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718,1,['optimiz'],['optimization']
Performance,"> The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule.; > ; > This is the call. `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`; > ; > optking takes the molecule here in the driver and uses a default fallback instead: ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`; > ; > The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655:333,optimiz,optimize,333,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655,2,['optimiz'],"['optimization', 'optimize']"
Performance,"> This is fantastic Max! I really like the generalized `MultipoleInt` class. I'm good with options (b) and (c). I think that `DipoleInt` and `QuadrupoleInt` classes which function as light wrappers around `MultipoleInt` are more user-friendly than requiring users to pluck the appropriate integrals out of the `MultipoleInt` return.; > ; > Have you done any performance comparisons between the new MD code and the old OS code? I don't know if one is expected to be faster than the other. It would be good to do some simple timings (maybe one low angmom system and one high angmom system?) before completely ditching the OS code. @maxscheurer If you want, I can test CFMM with your new code to see if the multipole calculations are indeed faster. Just let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935:358,perform,performance,358,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935,1,['perform'],['performance']
Performance,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344762514:79,optimiz,optimization,79,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514,2,['optimiz'],['optimization']
Performance,"> Unless your molecule has a couple hundred atoms, that does sound slow. The molecule is big, but not that big -- about 50 atoms (mostly C and H). . > You're setting PSI_SCRATCH to a local disk, not a network disk?. I started running on a remote machine, and even though I have `PSI_SCRATCH` set on my local machine, I don't have it set on the remote machine (probably didn't re-source `~/.bashrc` after installing `psi4`. However, it should be writing to local disks. I can see `psi...clean` files in the local directory, are those scratch files?. > Go ahead and run this to make sure you're getting threading. Based on the script you sent, it does appear that threading is working (see below), however, I have noticed that during my geometry optimization and single point energy that most of the time `psi4` is running with a single thread according to `top`. I ran `psi4` using `psi4 input -o output -n 12`, is that correct?. ```; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000708 NumPy: 0.000670; Time for threads 1, size 500: Psi4: 0.009402 NumPy: 0.009941; Time for threads 1, size 2000: Psi4: 1.583517 NumPy: 0.586573; Time for threads 1, size 4000: Psi4: 4.562361 NumPy: 4.587518; Threads set to 6 by Python driver.; Time for threads 6, size 200: Psi4: 0.000143 NumPy: 0.000212; Time for threads 6, size 500: Psi4: 0.001804 NumPy: 0.002355; Time for threads 6, size 2000: Psi4: 0.105539 NumPy: 0.108854; Time for threads 6, size 4000: Psi4: 0.839776 NumPy: 0.858277; NumPy@n6 : Psi4@n6 ratio (want ~1): 1.02; Psi4@n1 : Psi4@n6 ratio (want ~6): 5.43; 7fc910341000-7fc91244e000 r-xp 00000000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91244e000-7fc91264e000 ---p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91264e000-7fc912653000 r--p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc912653000-7fc91265b000 rw-p 02112000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91265b000-7fc9126",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347904720:744,optimiz,optimization,744,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347904720,1,['optimiz'],['optimization']
Performance,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:979,perform,perform,979,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908,2,['perform'],"['perform', 'performance']"
Performance,"> Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Please update `.ref` files. Probably not worth adding `.log` files, but that's a @loriab question. > There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. . Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318:637,optimiz,optimizers,637,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318,1,['optimiz'],['optimizers']
Performance,"> Yeah, for larger / more diffuse basis functions, it's often hard to converge w/ incremental fock. I've already mentioned this in the [docs](https://psicode.org/psi4manual/master/scf.html#cosx-exchange).; > ; > In general, incremental fock gets you only a very small speedup with COSX. This is because the last SCF iteration (performed on a large grid) is much more expensive than the other iterations (performed on a small grid), and the last iteration can't be done with a difference density matrix. For this reason, I generally set the `COSX_INCFOCK` option to `FALSE` when I use the JK algorithm, and I had meant to make this the default behavior. In his timings of `COSX`, @davpoolechem found discrepancies between timings (on larger systems) for doing incfock every iteration (current policy in COSX) and not doing incfock every iteration (this PR), so I believe that `incfock` being ON vs OFF would lead to significant speedups, at least for larger systems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1215706579:327,perform,performed,327,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1215706579,2,['perform'],['performed']
Performance,"> Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object). Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406:297,cache,cached,297,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406,3,['cache'],['cached']
Performance,"> should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference?. I just implemented these suggested changes. Makes the code a bit nicer since calls; to `mints.ao_efp_multipole_potential` can be left as they are at the moment, and the re-mapping is not spilled over to EFP code. The following files could be removed now:; - `efpmultipolepotential.hh`; - `efpmultipolepotential.cc`. These files are used in:; - `integral.cc`. Before proceeding, I need an OK/suggestions from you guys, @loriab, @andysim, @jturney.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-500113924:102,perform,performs,102,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-500113924,1,['perform'],['performs']
Performance,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:984,queue,queue,984,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,1,['queue'],['queue']
Performance,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:200,load,load,200,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,1,['load'],['load']
Performance,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:63,perform,perform,63,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826,2,['perform'],"['perform', 'performed']"
Performance,">> An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way. I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808:117,optimiz,optimization,117,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808,2,['optimiz'],['optimization']
Performance,">> the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). > Is this going to be a long-term state of affairs? I'd love to add more analytic hessians. It's likely to be semi-permanent for Windows. (Resolution would involve partitioning the 2nd deriv ERIs to a separate build group with lower optimization (as JMT does) and some good luck that they still compile quicker. Or petitioning to upload a hand-built package instead of relying on their CI build services, and I wouldn't like to do that before the L2 code is properly upstream.). But none of this is a block to new analytic hessians. Linux and Mac or anyone building L2 from source (with proper settings) is able to take adv of anal. H. And any new ones won't need extra work-around code, only a label for their tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150:480,optimiz,optimization,480,https://psicode.org,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150,1,['optimiz'],['optimization']
Performance,">>> sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. >> MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that occ does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. > This is completely correct. The lone OLCCD algorithm in occ does not compute LCCD with the input orbitals. Great, thanks. `oremp2` is in good shape, then, and I'll add negative assertions for `olccd`. Here's the summary of what gets checked (details are at QCEngine): https://github.com/psi4/psi4/pull/2653/files#diff-e2cf14f98c8e885f5abc7385ca737bfeba9f2f62caead630129e6d7cd9678e71R193-R203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770:681,optimiz,optimized,681,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770,1,['optimiz'],['optimized']
Performance,"@JonathonMisiewicz After successfully completing one step, it appears to be switching from using SAD, to using previous orbitals despite my having set guess to sad. ```; Successfully symmetrized geometry. ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria o 4.50e-04 * 3.00e-04 * 1.80e-03 * 1.20e-03 * ~; --------------------------------------------------------------------------------------------- ~; 1 -1520.83247764 -1.52e+03 o 2.87e-02 6.52e-03 1.12e+00 2.74e-01 ~; ---------------------------------------------------------------------------------------------. Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.3082647324 2.3190588090 2.4662144199; C 1.2994401676 1.9841371839 2.6252591212; O 1.9613330035 1.5293126579 1.6982686350; O 1.9487730658 2.2253118158 3.9589994443; C -1.2637575308 1.7972383826 1.0887300503; C -2.8394127991 2.3213315802 1.0116494590; C -3.7509980721 1.6807278062 2.2931752326; O -3.8504096207 2.3153516037 3.3633546508; O -4.5178176253 0.3904174599 2.0757387449; C -1.3759292896 0.0921611935 1.1005734307; O -0.8241227821 -0.7339800728 2.0937447856; O -2.0658921497 -0.3998131349 -0.1385874282; O -0.6219920417 2.4852394292 -0.1951904942; H -0.3231747331 3.5031540765 2.4416857576; H -0.7901754068 1.8479833570 3.4773721250; H 2.9672568222 1.9953691785 3.9096102485; H -3.4471447933 2.0212696600 -0.0256899111; H -2.7529115441 3.5237308050 0.9794914513; H -5.0374668500 0.1438676436 2.9887272170; H -1.8948356360 -1.5118861166 -0.0506847242; H -0.0777476573 1.7695454328 -0.5991466202; C 0.4741700051 -1.8080097129 -3.0796",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:963,optimiz,optimization,963,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914,1,['optimiz'],['optimization']
Performance,"@JonathonMisiewicz I'm not using conda at all, as described above, i started from a clean directory, cloned the source, ran cmake and make. The libint is the one that is automatically downloaded if no libint was found:; ```; -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; ```; in the cmake step and; ```; [ 10%] Performing download step (download, verify and extract) for 'libint2_external'; [ 12%] Performing download step (download, verify and extract) for 'pybind11_external'; -- Downloading...; dst='/scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; timeout='none'; inactivity timeout='none'; -- Using src='https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; -- Downloading...; ``` ; in the make step. @loriab Thanks for the quick reply, i will try and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944:346,Perform,Performing,346,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944,2,['Perform'],['Performing']
Performance,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:830,optimiz,optimize,830,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262,2,['optimiz'],"['optimize', 'optimized']"
Performance,"@JonathonMisiewicz can you send an example input?. Also, you might want to run a valence-only orbital optimization followed by a full single-point calculation, since it's well known that OO-CC does not reproduce full CI, and the optimization should be much better conditioned within the valence space in analogy to MRCI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1371#issuecomment-441470665:102,optimiz,optimization,102,https://psicode.org,https://github.com/psi4/psi4/issues/1371#issuecomment-441470665,2,['optimiz'],['optimization']
Performance,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:282,optimiz,optimization,282,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,5,['optimiz'],"['optimization', 'optimizations', 'optimize', 'optimizer']"
Performance,"@TermeHansen so you are furthermore running a geometry optimization, not just SCF..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432294556:55,optimiz,optimization,55,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432294556,1,['optimiz'],['optimization']
Performance,"@TiborGY That's a good idea! False sharing is a reasonable thing to think about. From what I've just now read, it sounds like false sharing occurs when two threads repeatedly write to nearby array elements, invalidating cached values of those elements. In this minimal test case, the threads aren't writing to any shared data, so I don't think false sharing applies here. However, it's something I'll look out for in the actual semi-numerical exchange implementation. @jturney I haven't gotten desperate enough to learn VTune yet, but I'm getting close. @hokru Thank you! The changelog entry would perfectly explain this strange behavior. I'll wait for #2413 before doing any more investigation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869:220,cache,cached,220,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869,1,['cache'],['cached']
Performance,"@amjames Is this ""smaller"" dimension by dimension?. I'm lost on what ""shared state"" has to do with this problem. Because the relevant codes are orbital-optimized, the integrals in file61 when the bug occurs are transformed into the orbitals optimal for MP2. The DCT code starts from a different set of orbitals. (The NSOs of MP2, as I recall?) The orbital state of OMP2 is not supposed to be shared. As for Lori's comment, _is_ there a row/column convention? I had assumed there was.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435206500:152,optimiz,optimized,152,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435206500,1,['optimiz'],['optimized']
Performance,"@andysim I have add the print statement and made *Azure* to run the test. It produces, the following output:; ```; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; DIMENSIONS 2 4; ```. The same output I get on *Linux* with GCC 7.3.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310:115,Perform,Performing,115,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310,1,['Perform'],['Performing']
Performance,"@ashutoshvt I believe this will only be used in experimental code as you likely should contract the integrals on the fly for efficient code. Nothing really stands out at me as coded in a way that would take a lot of extra time, what kind of performance improvements are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757#issuecomment-349813447:241,perform,performance,241,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-349813447,1,['perform'],['performance']
Performance,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198786718:472,optimiz,optimization,472,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718,1,['optimiz'],['optimization']
Performance,"@bennybp I used this [gist](https://gist.github.com/dgasmith/876687198a62d1af417ab7f0622b48fb) to time the integrals. . If you have the output for a large `ao_potential` I would be curious to see what is taking time in `compute_shell` for 4+ threads. Im guessing its an IOPS thing as well. Well, at least we should have the dcopy bottleneck removed in Psi4 1.2. Before then we could write you a dense DFJK if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276106444:330,bottleneck,bottleneck,330,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276106444,1,['bottleneck'],['bottleneck']
Performance,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192822036:845,Perform,Performing,845,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036,3,['Perform'],['Performing']
Performance,"@dgasmith a proper implementation of double hybrid functionals would also consider the MP2 contribution in the orbital optimization like OO-MP2, but nobody does this in practice. So, I think that double hybrid densities are given just by the KS part i.e. they don't include the MP2 response density. Because this method is inconsistent, weird things can be expected to happen if you push the theory too far. For instance, Hait and Head-Gordon have demonstrated dipole moments and polarizabilities of double hybrid functionals going haywire at non-chemical geometries, since MP2 goes unstable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1333#issuecomment-436044159:119,optimiz,optimization,119,https://psicode.org,https://github.com/psi4/psi4/issues/1333#issuecomment-436044159,1,['optimiz'],['optimization']
Performance,"@dgasmith: psimrcc does not compute NOs or change orbitals/integrals/etc so I am fine with both solutions. I prefer to pass back the RHF wfn or whatever alternative solution that does not to break the ability to do numerical optimization, since we actually use this feature. I'll be glad to work on psimrcc once we settle on a solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-192482520:225,optimiz,optimization,225,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-192482520,1,['optimiz'],['optimization']
Performance,"@fevangelista reports another variation. `Weird symmetry issue (Unrecognized point group bits: 118)`; ```; import psi4; psi4.geometry(""""""; C 0.0000000338 -0.0000000615 0.0000000000; H 0.5543428106 0.3093570276 0.8977720468; H 0.5543428106 0.3093570276 -0.8977720468; H -0.9918391174 0.4746024041 0.0000000000; H -0.1168469058 -1.0933157267 0.0000000000; symmetry c1; """"""); psi4.optimize('scf/def2-SVP'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-948069284:378,optimiz,optimize,378,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-948069284,1,['optimiz'],['optimize']
Performance,"@hokru, thanks for the reference. It would seem based on that paper that we should:; - allow the `roos-ano-[dt]z` basis sets into CBS as well; - are the `pcseg-[0-4]` basis sets (double- to six-zeta, I believe) the segmented versions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVX",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:931,perform,perform,931,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['perform'],['perform']
Performance,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182953987:247,queue,queue,247,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987,2,['queue'],['queue']
Performance,"@jturney, @andysim, should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference? That `mints.ao_efp_multipole_potential` call is in psi4numpy, the pylibefp tests as well as here in the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732:120,perform,performs,120,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732,1,['perform'],['performs']
Performance,"@kis-gergely-dzsi . > I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing import psi4, and then calling psi4.set_options()), the input options are not yet available when psi4_python_module_initialize() is called (from which brianAPIInit() had been called until now). > As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (py_psi_set_global_option_int()), or I add it to every high-level computation function (like energy() and optimize()) that could potentially use BrianQC. Which way would be better in your opinion?. Sorry, I only noticed the docs query and not this one. Looking through the code you've added I think I understand your difficulty. It looks like right now, initialization brianAPIInit() sets briancookie boolean, and that setting governs in the SCF code and otherwise whether brianqc is used or bypassed. So in the course of an input file with several togglings of brianqc on/off, then brianqc gets initiated and torn down multiple times. Is this correct? And is the multiple teardowns wanted? It's fine to add a hook to each of the major fns like energy/gradient/hessian/properties. But could there instead be a single initiation, then checking the option `options.get_bool(""brianqc"");` as needed in the scf, grid, etc.?. ```; import psi4 # brianqc init happens alongside psi4 init. psi4.geometry(A). psi4.set_options({'brianqc': False}). energy('b3lyp/cc-pvdz') # runs all CPU. psi4.set_options({'brianqc': True}). energy('b3lyp/cc-pvdz') # runs w/GPU; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975:662,perform,performing,662,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-659131975,2,"['optimiz', 'perform']","['optimize', 'performing']"
Performance,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:319,optimiz,optimize,319,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,1,['optimiz'],['optimize']
Performance,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:781,queue,queue,781,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214,1,['queue'],['queue']
Performance,"@loriab @fevangelista @kannon92 Yes, I have been working on building both static **and** shared libraries for the PCM module and that's the root of your troubles.; @loriab commit psi4/psi4@f798b4f1b should fix your problem.; @fevangelista what is the output of `nm interfaces/lib/libpcm.so | grep Getkw`? Are you doing a fresh build? I suspect the Makefiles generated by CMake might be stale and try to link against the static `libpcm.a` which doesn't have Getkw or Zlib linked in. You might try to clean up your cache or better still, re-run the setup script and re-build from scratch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170844312:513,cache,cache,513,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170844312,1,['cache'],['cache']
Performance,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:551,perform,performance,551,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['perform'],['performance']
Performance,"@loriab Correct: I believe there's a symmetrization step missing. I forget exactly where it was done before, but things like benzene are commonly retrieved with coords that are effectively C1. There's (molecule?) member function somewhere that allows symmetrization to a given tolerance (something really sleazy like 0.01A is needed, IIRC) so it's just a case of calling that. A simple STO-3G optimization could be a good followup step, but that's not essential.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965#issuecomment-382854005:393,optimiz,optimization,393,https://psicode.org,https://github.com/psi4/psi4/pull/965#issuecomment-382854005,1,['optimiz'],['optimization']
Performance,"@loriab I am pretty sure that switching OpenBLAS to OMP threading does squash the built in pthreads mechanism, BUT that may be acceptable. I think the OMP version can do everything the pthreads version can, but it is slower. So AFAIK, there is a performance impact, but not a functionality impact. So it probably would not break other projects, but some people might get pissed due to the performance hit.; My suggestion would be to create a separate OpenBLAS_OMP conda package, and just make a new numpy package as well, compiled with OpenBLAS_OMP. I am not familiar with how conda works, so that might not be feasible, but that would probably be the cleanest and most consistent solution. @martin-frbg any comments regarding this situation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390266813:246,perform,performance,246,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390266813,2,['perform'],['performance']
Performance,"@loriab I am re-creating the broken build now and I will look at what `ldd -v psi4` gives me, but I did try modifying the `LD_LIBRARY_PATH` to fix the `GLIBCXX_X.X.XX` runtime error with no luck. Actually loading the GCC_5.2 module would modify it for me, but I removed /usr/lib64 from it just to be sure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249681177:205,load,loading,205,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249681177,1,['load'],['loading']
Performance,"@loriab I have looked into your suggestion about enabling and disabling BrianQC with an input file option instead of (or in addition to) an env var, and I think there is a minor issue here. Normally, BrianQC's initialization should happen once, preferably during Psi4's own initialization. But, due to the way Psi4 is normally used from Python (first doing `import psi4`, and then calling `psi4.set_options()`), the input options are not yet available when `psi4_python_module_initialize()` is called (from which `brianAPIInit()` had been called until now). As far as I could tell, there is no function that normally runs between setting the options and performing a calculation. So, to enable BrianQC through an input option, I have two choices: either I add the check-and-initialize to the options setter method itself (`py_psi_set_global_option_int()`), or I add it to every high-level computation function (like `energy()` and `optimize()`) that could potentially use BrianQC. Which way would be better in your opinion?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045:654,perform,performing,654,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-654282045,2,"['optimiz', 'perform']","['optimize', 'performing']"
Performance,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249690183:201,load,loaded,201,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183,1,['load'],['loaded']
Performance,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:612,Perform,Performing,612,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-278449042:678,optimiz,optimization,678,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042,1,['optimiz'],['optimization']
Performance,"@loriab Travis is running on a few branches, so we have topped our 5 (free!) concurrent tasks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-260035077:77,concurren,concurrent,77,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-260035077,1,['concurren'],['concurrent']
Performance,"@loriab `v1.2.1` tagged. With all necessary fixes this time, at least from my testing. I've updated docs and tests. The DALTON inputs and output files for the geometry optimization test are also included.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-386082337:168,optimiz,optimization,168,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-386082337,1,['optimiz'],['optimization']
Performance,"@loriab can discuss this more, but the largest issue is if NumPy and Psi4 have different OMP runtimes via BLAS. GOMP and IOMP do not play well together. So naively you would either need to use GCC as this is likely what NumPy's BLAS is linked against or build your own NumPy and link it against the same Intel BLAS you plan to use with Psi4. At this point I think we highly recommend using a conda environment or our [binaries](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). Both are ICC compiled with MKL and are optimized for multiple architectures from SSE2 (?) to AVX-512. If you really want to compile Psi4 yourself we recommend using the p4dev environment with the built in path-manager, see [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier) to help avoid these conflicts. Lots of fun intricacies to make something like Python really work with large C++ backends :). LAB EDIT: the 1.1 binaries use statically linked MKL in psi4 and are potentially susceptible to the problems mentioned. binaries after mid-July 2017 are safe (provided numpy is MKL RT)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100:530,optimiz,optimized,530,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100,1,['optimiz'],['optimized']
Performance,"@loriab one more note about AMD Ryzen performance: AVX is fully supported (except AVX-512), but internally the floating point units are only 128 bit wide, so any 256 bit wide AVX/AVX2 instructions are split in half to be executed. This means that for current Ryzen/EPYC chips, using AVX is unlikely to offer the significant performance benefit seen for Intel chips, unless it can alleviate some specific bottleneck. But AFAIK there is no separate ""AVX-mode"" like Intel, and running AVX code (i.e. complied for Haswell) is often harmless and does not cause a performance degradation. ; Really the only mayor weak points of Zen CPUs is memory latency and the communication latency between CCX-es (acts kinda like NUMA-on-a-chip). Especially EPYC CPUs are NUMA-like, you should even be able to toggle the NUMA mode in EFI/BIOS between full-on NUMA and try-to-act-like UMA. But really, core-to-core synchronization latency wise a single socket EPYC system acts more like a quad or octa socket, depending on how you look at it.; EPYC is great if you are looking into using multiple GPUs or NVMe drives, it has absolutely massive amounts of PCI-E lanes.; Hope this helps!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877:38,perform,performance,38,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877,7,"['bottleneck', 'latency', 'perform']","['bottleneck', 'latency', 'performance']"
Performance,"@loriab the problem with the pytests, that when they run concurrently, they share the same directory and create/delete the same files, which cause problems. Last your commit just hides that. So for the moment the pytests on Windows will be serial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445765918:57,concurren,concurrently,57,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445765918,1,['concurren'],['concurrently']
Performance,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-306291837:591,optimiz,optimized,591,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837,1,['optimiz'],['optimized']
Performance,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267239879:608,cache,cache,608,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879,4,['cache'],"['cache', 'cachelevel']"
Performance,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344761262:1101,optimiz,optimization,1101,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262,1,['optimiz'],['optimization']
Performance,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:49,load,loaded,49,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783,4,"['load', 'optimiz', 'perform']","['loaded', 'optimize', 'optimizer', 'performs']"
Performance,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:915,optimiz,optimizations,915,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,1,['optimiz'],['optimizations']
Performance,"@psi-rking Ah, thats disturbing it appears to be non-deterministic. I find failures between iteration 7 and 35 or the optimization stopping at iteration 50 between separate DF-SCF runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203491619:118,optimiz,optimization,118,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203491619,1,['optimiz'],['optimization']
Performance,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:781,tune,tune,781,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['tune'],['tune']
Performance,"@raimis I think you are correct about this, although I suspect the performance tradeoff is likely trivial compared to other things. I believe this switch would be better practice in Psi4, but let @dgasmith decide on this one. Good catch!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1200#issuecomment-419107766:67,perform,performance,67,https://psicode.org,https://github.com/psi4/psi4/pull/1200#issuecomment-419107766,1,['perform'],['performance']
Performance,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:218,load,loaded,218,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,1,['load'],['loaded']
Performance,"@rmcgibbo thanks for the info - I wasn't aware of those fine details of dynamic loading. So it seems the input to the SVD call is subtly different then, if both paths end up in MKL routines. This is quite a mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311739442:80,load,loading,80,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311739442,1,['load'],['loading']
Performance,"@salarfaji My workaround was to call `set opt_coordinates cartesian` before calling `optimize()`. It seems like something goes wrong with using internal coordinates, but Cartesian have worked for me. (You could also try different coordinate options, as `set opt_coordinates both` also avoided this crash.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559:85,optimiz,optimize,85,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559,1,['optimiz'],['optimize']
Performance,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-178215766:508,perform,perform,508,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766,1,['perform'],['perform']
Performance,"@sunqm; @dgasmith . Perhaps one last comment:. There are advantages with the irrep ordering of psi4, chemps2 and pyscf, which Qiming told me. You can use bitwise XOR for performing the group operation. So I thoroughly agree that the convention is better. I guess that trying to amend the FCIDUMP format, also in openMolcas and Molpro, will yield significant compatibility and backwards compatibility issues, so this is not an option. But perhaps it wouldn't be bad to establish an own integral dump standard anno 2019, some 30 years of development having occurred since the FCIDUMP file (Comp. Phys. Commun. 54 75 (1989)). I know that openMolcas is also investing time and effort in hdf5, so perhaps something can be done in that direction? Perhaps reach out to them? It doesn't make sense to represent one double with some 20-ish 8-bit characters in a text format. The best arguments in favor of FCIDUMP are readability and manual adjustment, at least the former of which seems not to hold up against hdf5. Best regards,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1431#issuecomment-449622007:170,perform,performing,170,https://psicode.org,https://github.com/psi4/psi4/issues/1431#issuecomment-449622007,1,['perform'],['performing']
Performance,"@susilehtola ; You're talking about a different orbital-optimization algorithm. I can organize the code so that it's relatively easy to reuse the ""key pieces"", including DIIS, for different algorithms, but new OCC algorithms are outside the scope of this project. Maybe after I get frozen core energies/gradients working.; I'll also add that the orbital-optimization code isn't centralized, so active space calculations aren't handled by OCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575762496:56,optimiz,optimization,56,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575762496,2,['optimiz'],['optimization']
Performance,"@susilehtola You should not have to explicitly provide the function template in the example you gave. In roberto's example, the function call will deduce that `T` is double from the arguments, and the return value will be cast to `float`. In your example the template parameter is not needed as with the arguments `1.0f`, and `2.0f` the compiler will deduce that `T` is float. . If you wanted to be able to mix types, the function template would have two parameters, and you would either need to use some template-fu to decide if the return type should be one or the other, or if any of the arguments should be cast. Or you could just let the compiler do all of it for you with a lambda (c++14+ only). . ```c++; auto add = [](auto a, auto b) {return a+b;};; ```. Class templates on the other hand would *always* need to have their template arguments fully specified even if instantiations of the template have been declared. Prior to c++17, there is no template parameter deduction performed on class templates, only function templates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261#issuecomment-433140820:982,perform,performed,982,https://psicode.org,https://github.com/psi4/psi4/pull/1261#issuecomment-433140820,1,['perform'],['performed']
Performance,@xiexr151e you should install the BLAS/LAPACK development package using your linux distribution's package manager. (Note that you should install an optimized implementation such as ATLAS or OpenBLAS instead of the reference BLAS/LAPACK implementation.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380550429:148,optimiz,optimized,148,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380550429,1,['optimiz'],['optimized']
Performance,"A (much overdue) update! There is a very significant update to libecpint coming early next week (99% already available on libecpint/readecp branch) with: . - analytical 1st and 2nd derivatives; - general performance improvements; - much better API; - more robust testing. I will have a look at @andysim previous attempts and see if I can get it working, but I will probably need help hooking in the derivatives to Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609:204,perform,performance,204,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609,1,['perform'],['performance']
Performance,"A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > * 5 0.015212 ( 1, 1) 7AX 9AX; >; > * 6 0.000000 ( 1, 0) 7AX 8AB 9AA; >; > * 7 0.000000 ( 0, 1) 7AX 8AA 9AB; >; > * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX; >; > * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX; >; >; > ------------------------------; > ------------------------------; >; > As you can see, there is typically the same kind of sign for some; > determinants sharing a similar coefficient. For example, for the; > groundstate we have : -0.691216 ( 0, 1) 7AX 8AA 9AB and -0.691216 ( 1, 0); > 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these; > determinants should present opposite signs. To check this, I used a; > personal code to build up from scratch the frozen core Hamiltonian; > associated to the (4,3) active space. I used for this the resulting; > Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this; > Hamiltonian gives the following two lowest states expressed in the active; > space :; > | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; > | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩; > - 0.887|111100⟩; > (NB : the HF determinant is |111100⟩ ); >; > With this diagonalization, we clearly find same coefficients but with; > opposite signs. As a double check, I also computed the energy of these; > states and obtained :; > E_0 = -93.93144865003578 Ha; > E_1 = -93.90255033754423 Ha; >; > Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do; > you have a clue why such a pb arises in the Psi4 output ?; >; > Thanks a lot for you answer; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2008>, or unsubscribe; > <https://github.com/notificati",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:3891,Optimiz,Optimized,3891,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['Optimiz'],['Optimized']
Performance,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311869326:120,load,loaded,120,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326,6,['load'],['loaded']
Performance,"A few preliminaries:; 1. Does the optimization succeed if you don't use finite differences?; 2. Does the same error occur if you don't freeze the com and prevent rotation? I don't know if the automatically generated displacement coordinates make sense with these restrictions applied.; 3. What is at the bottom of the output file, e.g., were any optimization steps taken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124775223:34,optimiz,optimization,34,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124775223,2,['optimiz'],['optimization']
Performance,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:461,load,load,461,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,1,['load'],['load']
Performance,"A single service is nice. But Azure is both much faster and provides more concurrent resources. We originally didn't dive too much into Azure due to its relative complexity, but switching over only took an afternoon of trying.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1776#issuecomment-572037458:74,concurren,concurrent,74,https://psicode.org,https://github.com/psi4/psi4/pull/1776#issuecomment-572037458,1,['concurren'],['concurrent']
Performance,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/168#issuecomment-157541405:422,Perform,Performing,422,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405,2,['Perform'],['Performing']
Performance,"ALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11414,optimiz,optimized,11414,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20368,optimiz,optimized,20368,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"AN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f95c5081b 100644; --- a/cmake/psi4OptionsTools.cmake; +++ b/cmake/psi4OptionsTools.cmake; @@ -74,7 +74,7 @@ endmacro(); include(CheckCCompilerFlag); include(CheckCXXCompilerFlag); if(CMAKE_Fortran_COMPILER); - include(CheckFortranCompilerFlag) # CMake >= 3.3, so local copy in cmake/; + include(CheckFortranCompilerFlag); endif(); ; #The guts of the next two functions, use the wrappers please; @@ -95,6 +95,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); break(); endif(); unset(test_option CACHE); + set(CMAKE_REQUIRED_FLAGS ""${flag_i}""); if(${is_C} EQUAL 0); CHECK_C_COMPILER_FLAG(""${flag_i}"" test_option); set(description_to_print CMAKE_C_FLAGS); @@ -117,6 +118,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); message(STATUS ""${msg_base} Failed""); endif(); endif(); + unset(CMAKE_REQUIRED_FLAGS); endforeach(); set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE}); endmacro(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:5149,CACHE,CACHE,5149,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,1,['CACHE'],['CACHE']
Performance,"ARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think https://github.com/eruffaldi/cmakego/blob/master/cmakego.cmake is a rather nice pattern, and I've emulated it a bit in the external/common/TargetLAPACK. * Targets make all the external projects we link to in psi4 look fairly clean. Below are all the CMakeLists.txt interactions. ```; >>> grep -r '::' psi4/ | grep CMakeList; psi4/CMakeLists.txt: get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libefp::efp PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET erd::erd PRO",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:1644,optimiz,optimizes,1644,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,1,['optimiz'],['optimizes']
Performance,"Actually, it sounds like there might be an issue in the code, although I am not sure if I fully understand stability analysis. > The instability analysis gave us the first two terms of the Taylor expansion, analytically. If you have minimized a second-order Taylor expansion, this means that you've solved the Newton-Raphson equations. Thus, in addition to having the *direction* of the instability vector, you should also have its **length**. That is, one should not have any user fed in length for the step!. Doing a line search in the direction of the instability is exactly what an orbital rotation optimizer can do. Unfortunately, I'm again pegged down by other projects...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961:603,optimiz,optimizer,603,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961,1,['optimiz'],['optimizer']
Performance,"Actually, there are more failures; ```; (gdb) bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0); at pthread_kill.c:44; #1 0x00007f21b9c426d3 in __pthread_kill_internal (threadid=<optimized out>, signo=6) at pthread_kill.c:78; #2 0x00007f21b9be9c4e in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007f21b9bd1902 in __GI_abort () at abort.c:79; #4 0x00007f21862e80af in std::__glibcxx_assert_fail (file=<optimized out>, line=<optimized out>, ; function=<optimized out>, condition=<optimized out>); at ../../../../../libstdc++-v3/src/c++11/assert_fail.cc:41; #5 0x00007f21aa275614 in std::vector<double const*, libint2::detail::ext_stack_allocator<double const*, 121ul> >::operator[] (this=0x56025b76c988, __n=6) at /usr/include/c++/14/bits/stl_vector.h:1149; #6 0x00007f21aa2a709b in psi::Libint2TwoElectronInt::compute_shell_deriv1 (this=0x56025b7bb980, s1=0, s2=0, ; s3=0, s4=0) at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/eribase.cc:3245; #7 0x00007f21a9f71d73 in _ZN3psi11MintsHelper11metric_gradERSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_6MatrixEESt4lessIS7_ESaISt4pairIKS7_SA_EEERSE_._omp_fn.0(void) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:94,optimiz,optimized,94,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,6,['optimiz'],['optimized']
Performance,"Admittedly I can't support this (I see what Andy sees), but I think there are many cases where the coefficients change between optimized and unoptimized general contractions. Also, Distelli just doesn't acknowledge this PR. It's built others recently, so I don't know what its problem is. Can override again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307928747:127,optimiz,optimized,127,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307928747,1,['optimiz'],['optimized']
Performance,"After further investigation, I've learned a few things. First, I was mistaken about the PCG convergence guarantees. Each iteration guarantees that you are closer to the correct solution vector. It does _not_ guarantee that your residual RMS is smaller. For a simple model, just think of z=500x^2+y^2. (1, 0) is closer to the minimum than (0, 10), but (0, 10) gives a smaller value of `z`. In this particular case, you are indeed getting close to the right `x` value, even as your residual increases. Second, when I throw exact MO hessian diagonalization at the problem, they aren't converging well either. The problem is that the MO hessian often has small, negative eigenvalues along the optimization path, causing steps that can be large and energy increasing. While I think this points out a need for more robust convergence algorithms, the behavior I'm seeing does not need an implementation error to be explained. As such, I'm inclined to close this issue and mark an item on the developer wishlist. #2183 is worth separate investigation. @susilehtola, any objections?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790:689,optimiz,optimization,689,https://psicode.org,https://github.com/psi4/psi4/issues/2204#issuecomment-869014790,1,['optimiz'],['optimization']
Performance,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:146,optimiz,optimizer,146,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787,1,['optimiz'],['optimizer']
Performance,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:69,optimiz,optimization,69,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,1,['optimiz'],['optimization']
Performance,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196005999:95,optimiz,optimize,95,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999,3,['optimiz'],"['optimize', 'optimized', 'optimizer']"
Performance,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:60,perform,performance,60,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124,1,['perform'],['performance']
Performance,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184220315:335,perform,performing,335,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315,2,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,"Ah, I see, you're running out of time in the queue. If there is more demand for this, we can revisit the question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-37977917:45,queue,queue,45,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-37977917,1,['queue'],['queue']
Performance,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:1053,load,loads,1053,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,1,['load'],['loads']
Performance,"All converge in about 8 iterations with `set guess sad`. SAD is generally the best guess. Were it not for awkward performance issues with really large basis sets, it would be the default. Someday we'll fix those performance issues and make it the default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/340#issuecomment-209218271:114,perform,performance,114,https://psicode.org,https://github.com/psi4/psi4/issues/340#issuecomment-209218271,2,['perform'],['performance']
Performance,"Allenes, yeah, 'too linear' and like to make trouble.; The backtransform broke the molecule, look at most of the `Change` values. They are huge!. I tried a few things and typical solutions like `set DYNAMIC_LEVEL 1` or `opt_coordinates delocalized` do not work well.; Also geomeTRIC is behaving oddly. Tested with pw6b95 instead of pwpb95. If you want something more reliable I can recommend cartesian coordinates and a computed initial hessian.; Optimisation with cartesian coordinates is usually slow, but actually OK with a decent initial hessian.; `set opt_coordinates cartesian `. Automatic initial hessian at a different (cheaper) level is easily done:; ```; set FULL_HESS_EVERY 0; optimize('pwpb95-d3bj',hessian_with='pbe0-d3bj/def2-SV(P)'); ```; usually no need to go beyond the above level, even PBE would be OK I think. Also this hessian will be numerical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091:688,optimiz,optimize,688,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091,1,['optimiz'],['optimize']
Performance,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:176,queue,queue,176,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318,1,['queue'],['queue']
Performance,"Alrighty, I've figured it out; I was missing yet another pesky CPKS term. After running this test, all looks great:; ```; molecule {; O 0.000000000000 0.000000000000 -0.076532381406; H 0.000000000000 -0.769857650400 0.607312215449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:573,optimiz,optimize,573,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914,1,['optimiz'],['optimize']
Performance,"Also, regarding cache types, LOW is only the default for `ccenergy`, because it's the only code for which I built statistics on how frequently specific data were accessed. Otherwise, LRU is used for all other CC codes. The docs are misleading on this point.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734:16,cache,cache,16,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734,1,['cache'],['cache']
Performance,"Ambitious to hand-format read_options :-). What's wrong with the c-f of it, though? I can see that things like the below might need adjustment, but at a glance, it looked pretty respectful. line-break formatting isn't conveyed to the manual anyways. ```; options.add_str(""CFOUR_BASIS"", ""SPECIAL"",; ""STO-3G 3-21G 4-31G 6-31G 6-31G* 6-31G** 6-311G 6-311G* 6-311G** DZ DZP TZ TZP TZ2P PVDZ PVTZ ""; ""PVQZ PV5Z PV6Z PCVDZ PCVTZ PCVQZ PCV5Z PCV6Z AUG-PVDZ AUG-PVTZ AUG-PVTZ AUG-PVQZ AUG-PV5Z ""; ""AUG-PV6Z D-AUG-PVDZ D-AUG-PVTZ D-AUG-PVQZ D-AUG-PV5Z D-AUG-PV6Z cc-pVDZ cc-pVTZ cc-pVQZ ""; ""cc-pV5Z cc-pV6Z cc-pCVDZ cc-pCVTZ cc-pCVQZ cc-pCV5Z cc-pCV6Z PWCVDZ PWCVTZ PWCVQZ PWCV5Z ""; ""PWCV6Z PwCVDZ PwCVTZ PwCVQZ PwCV5Z PwCV6Z svp dzp tzp tzp2p qz2p pz3d2f 13s9p4d3f WMR ANO0 ""; ""ANO1 ANO2 EVEN_TEMPERED SPECIAL"");; ```. ```; if (name == ""FINDIF"" || options.read_globals()) {; /*- MODULEDESCRIPTION Performs finite difference computations of energy derivative, with respect to nuclear; displacements; for geometry optimizations and vibrational frequency analyses, where the required analytical derivatives are; not; available. -*/; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812:889,Perform,Performs,889,https://psicode.org,https://github.com/psi4/psi4/pull/1192#issuecomment-417061812,2,"['Perform', 'optimiz']","['Performs', 'optimizations']"
Performance,"An input deck would be nice. I'm sure Ed Hohenstein could probably answer; in more detail, but the SAPT codes in PSI4 are designed for SMP parallelism; on a single node, using a mix of OpenMP and threaded BLAS. Moreover, with; high-level SAPT jobs (2+3, etc), there is a non-trivial amount of I/O to be; performed (certainly much less than without DF, but still non-trivial).; Using a build with icpc/MKL, a dedicated scratch array, 64 GB of memory,; and 6 or 8 cores (a single i7 or two quad-core Xeons), we are able to run; SAPT2+3(CCD) jobs with up to 1100 nbf/30 atoms (in an aTZ basis) in about a; week of wall time. Much larger than this and the memory will certainly; become rate limiting. Are you guys trying to run this over a pNFS or something? What BLAS are you; linking against?. -Rob. On Mon, Apr 28, 2014 at 8:03 PM, rxk900 notifications@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:304,perform,performed,304,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,1,['perform'],['performed']
Performance,"And regarding the shared state issue. I did not realize that we were looking at orbital optimized methods so the example of avoiding work by intentionally sharing state here is a bad one. but the issue is still related. . The error arises when you run the modules one after the other, because the `DCFT` module is making some assumptions, probably unintentionally about the state of various psio files. However the `OMP2` module has modified that state and the assumptions `DCFT` is making are no longer valid. In this case the assumption is that the `MO Ints (OO|OV)` entry either does not exist, or if it exists it is the correct size to hold `O,O,O,V`. This is not a case of sloppy programing by the authors of either module, it is a consequence of DPD creating global state in a difficult to predict way (due to a lack of documentation), and not providing the means to program defensively around it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365:88,optimiz,optimized,88,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365,1,['optimiz'],['optimized']
Performance,"Another, presumably similar, case from @fevangelista . ```; molecule {; O 0.611390115614 -0.000006716468 0.000000000000; C -0.613209884386 -0.000006716468 0.000000000000; H -1.200909884386 0.242593283532 -0.899800000000; H -1.200909884386 -0.242406716468 0.899800000000; symmetry c1; }; optimize('b3lyp/def2-SVP'); ```. ""fixed"" by using `opt_coordinates both`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-689488825:287,optimiz,optimize,287,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-689488825,1,['optimiz'],['optimize']
Performance,Anyhow MP2 orbital-optimization works (I compared it with ORCA OO-MP2).; It would be interesting to find out the date of df-ocepa release. Vladimir.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152804235:19,optimiz,optimization,19,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152804235,1,['optimiz'],['optimization']
Performance,"As Lori mentioned an alternate way with qcengine, psi4, torsiondrive and geometric combo is as follows: . ```; from qcelemental.models import Molecule, DriverEnum; from qcelemental.models.common_models import Model; from qcelemental.models.procedures import OptimizationSpecification, QCInputSpecification, TDKeywords, TorsionDriveInput; from qcengine import compute_procedure; from matplotlib import pyplot as plt. def return_td_result(qcmol, dihedrals, method, program, basis):; result = compute_procedure(; input_data=TorsionDriveInput(; keywords={; ""dihedrals"": [dihedrals],; ""grid_spacing"": [20]; },; input_specification=QCInputSpecification(; driver=DriverEnum.gradient,; model=Model(method=method, basis=basis); ),; initial_molecule=[qcmol,],; optimization_spec=OptimizationSpecification(; procedure=""geomeTRIC"",; keywords={; ""coordsys"": ""dlc"",; ""maxiter"": 300,; ""program"": program,; }; ); ),; local_options={""ncores"": 8, ""jobs_per_node"":1, ""scratch_directory"":""/tmp/""},; procedure=""torsiondrive""; ); energies = list(result.final_energies.values()); min_ener = min(energies); energies = [(it-min_ener) * 627.5094740630558 for it in energies]; angles = list(result.final_energies.keys()); angles = [int(it) for it in angles]; angles, energies = zip(*sorted(zip(angles, energies))); return result, angles, energies. def main():; qcmol = Molecule.from_data(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """"""). print(qcmol); dihedrals = [0,1,2,3]; result, angles, energies = return_td_result(method='SCF', qcmol=qcmol, dihedrals=dihedrals, program='psi4', basis='cc-pvdz'). plt.figure(figsize=(12,8)); plt.plot(angles, energies, label=""SCF""); plt.xlabel(""Angles in degrees""); plt.ylabel(""energies in kcal/mol""); plt.legend(); plt.title('TD profile'); plt.savefig(f'torsion_profile.png', bbox_inches='tight'); #plt.show(). if __name_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478:258,Optimiz,OptimizationSpecification,258,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478,2,['Optimiz'],['OptimizationSpecification']
Performance,"At first read-through, that looks reasonable. What are your goals, though? I ask because all the `hessian` ... `print_vibs` section can accomplished by replacing the `hessian()` call with a `frequency()` call. IR intensities are absent because `dipole_derivatives=None`. `frequency()` will pass the data around behind the scenes. Also, there's good physical reasons to do the optimization and frequency at exactly the same level of theory (mtd + basis). Hessian is more expensive than opt, so if anything, the freq is the cheaper level of theory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226646111:376,optimiz,optimization,376,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226646111,1,['optimiz'],['optimization']
Performance,Awesome. Does turning off XHOST and compiler optimization help?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198592985:45,optimiz,optimization,45,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198592985,1,['optimiz'],['optimization']
Performance,"Bad luck -- opt13 hits memory problems. It passes the ""in-core AOs"" check with 200 kb to spare (14042044 and 14074472 below are need and supplied in ints), then runs out of memory for AO blocking. The result of the print statement in second snippet is `AAAA 1: 14176380 > 14074472 || 3 == 65`. Should we put padding back or go another route?. ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.104621 GiB; user supplied 0.104863 GiB. 14042044 14074472; Using in-core AOs. Traceback (most recent call last):; File ""stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:713,optimiz,optimize,713,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,1,['optimiz'],['optimize']
Performance,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:846,queue,queue,846,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['queue'],['queue']
Performance,"Because this would be a very lengthy digression in the eventual PR, I'll include this here:; One of the hard parts of implementing this PR is accounting for reorientation. Consider the following input:; ```; molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a1 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; d1 = 180 ; }. set {; basis cc-pvdz; reference uhf ; }. energy('scf'); clean(). molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a1 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; d1 = 178 ; }. energy('scf'); clean(). molecule {; noreorient; nocom; 0 2; N; C 1 r1; H 2 r2 1 a1 ; H 2 r2 1 a2 3 d1. r1 = 1.0 ; r2 = 1.0 ; a1 = 120 ; a2 = 118 ; d1 = 180 ; }. energy('scf'); ```. Although these molecules only differ by two degrees, Psi puts them in different coordinate systems. Molecule 2 swaps the y and z axes compared to Molecule 1. The y axis of Molecule 1 becomes the -x axis of Molecule 3. Accordingly, correlation tables will fail to correlate the point groups properly. Both molecules have reflection across the z-axis as a symmetry element. Those correlate to y-reflection and x-reflection respectively for Molecule 1, which has no z-reflection. Findif displacements preserve orientation because `fix_orientation` is applied to a clone of the reference molecule in `driver.py` before the displaced geometry is loaded, and the geometries loaded are Cartesian. ZMAT geometries are automatically reoriented in `reinterpret_coordinates`. So in the easily forseeable cases that a user wants to use a displaced ZMAT, or the molecule reading orbitals isn't a geometry-shifted clone of the molecule the guess came from, reorientation must be explicitly accounted for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1297#issuecomment-443296950:1347,load,loaded,1347,https://psicode.org,https://github.com/psi4/psi4/issues/1297#issuecomment-443296950,2,['load'],['loaded']
Performance,Blend: DZ												 Blend: DZ; Number of shells: 8											 Number of shells: 8; Number of basis functions: 12									 Number of basis functions: 12; Number of Cartesian functions: 12									 Number of Cartesian functions: 12; Spherical Harmonics?: false										 Spherical Harmonics?: false; Max angular momentum: 1										 Max angular momentum: 1. ==> Integral Setup <==										 ==> Integral Setup <==. Using in-core PK algorithm.										 Using in-core PK algorithm.; Calculation information:										 Calculation information:; Number of atoms: 2								 Number of atoms: 2; Number of AO shells: 8								 Number of AO shells: 8; Number of primitives: 18								 Number of primitives: 18; Number of atomic orbitals: 12								 Number of atomic orbitals: 12; Number of basis functions: 12								 Number of basis functions: 12. Integral cutoff 1.00e-12								 Integral cutoff 1.00e-12; Number of threads: 1								 Number of threads: 1. Performing in-core PK											 Performing in-core PK; Using 6162 doubles for integral storage.								 Using 6162 doubles for integral storage.; We computed 666 shell quartets total.									 We computed 666 shell quartets total.; Whereas there are 666 unique shell quartets.								 Whereas there are 666 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==								 ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes									 J tasked: Yes; K tasked: Yes									 K tasked: Yes; wK tasked: No									 wK tasked: No; Memory [MiB]: 375									 Memory [MiB]: 375; Schwarz Cutoff: 1E-12									 Schwarz Cutoff: 1E-12. OpenMP threads: 1									 OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.						 Minimum eigenvalue in the overlap matrix is 6.5615359192E-02.; Reciprocal condition number of the overlap matrix is 2.1736231954E-02.				 Reciprocal condition number of the overlap matrix is 2.1736231954E-02.; Using symmetric orthogonalization.									 Using symmetric orthogonalization. ==> Pre-Ite,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:11798,Perform,Performing,11798,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,2,['Perform'],['Performing']
Performance,"Btw, is there concurrence on killing of `property()` in favor of `properties()`? I like the former better, but using a python syntax word makes me nervous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/934#issuecomment-371658386:14,concurren,concurrence,14,https://psicode.org,https://github.com/psi4/psi4/issues/934#issuecomment-371658386,1,['concurren'],['concurrence']
Performance,"Building from ToT in conda at home, I can confirm that `initialize_lebedev` in fact is never called... it's optimized straight out of the code! (I couldn't find anywhere where it got called, so I am not surprised). ```; (base) liz@Gaston:~/Development/psi4/objdir/stage/tests$ nm ../lib/psi4/core.cpython-38-x86_64-linux-gnu.so | grep lebedev; 00000000020dbe80 b _ZN3psi13SphericalGrid16lebedev_mapping_E; ```. Doing the same breakpoint tests using the line-numbers in ToT cubature.cc, I can also see that `initialize_lebedev` is never called, and `lebedev_mapping_` ends up with no entries in it when it's first accessed. Will work on a patch now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371:108,optimiz,optimized,108,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371,1,['optimiz'],['optimized']
Performance,"Bumping this - the [C7g](https://aws.amazon.com/ec2/instance-types/c7g/) ARM-based Amazon EC2 instances are probably the most cost-effective choice for high-performance CPU computing in the cloud right now, and being able to run Psi4 here would be very useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2285238805:157,perform,performance,157,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2285238805,1,['perform'],['performance']
Performance,"By the way, MKL/Intel compiler performance is actually reasonably good on recent AMD Ryzen/Epyc CPUs, the only thing that may need to be done, is to patch the binaries with [this tool](https://github.com/jimenezrick/patch-AuthenticAMD). What it does, is look for CPU detection checks, and disable the ""cripple_AMD()"" paths that MKL, and Intel compilers often tend to insert. When this is done, AMD CPUs will get to run the same, optimized/vectorized code paths that an Intel CPU would run, instead of the unoptimized/less optimized path that is intended to be run by non-Intel CPUs. This is just fine, since Ryzen CPUs are actually very happy to run code optimized for Haswell, in fact IIRC for a long time the best --march= flag to use with GCC on Ryzen has been ironically --march=haswell.; So using MKL and Intel compiled binaries are just fine on Ryzen systems, just make sure to patch the MKL and compiled binaries. PS: we are in the process of acquiring some Ryzen systems, so in a couple months I will be able to provide actual test results",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853:31,perform,performance,31,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853,4,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"C_build (name=..., unpolarized=<optimized out>, tweakers_=...); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/basic_string.tcc:242; #3 0x00007fac0b82e3cf in pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&>::call_impl<std::shared_ptr<psi::SuperFunctional>, std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), 0ul, 1ul, 2ul, pybind11::detail::void_type>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::integer_sequence<unsigned long, 0ul, 1ul, 2ul>, pybind11::detail::void_type&&) && (f=<optimized out>, this=0x7fff11285af0); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/char_traits.h:350; #4 pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:2283,optimiz,optimized,2283,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I think the trouble is in predicting the next geom step, so may be of interest to @psi-rking . ```; molecule { ; 0 1; C -0.167039 -0.712374 -0.022325; O 0.119573 0.677072 0.056530; H -0.453842 -0.989160 -1.036819; H -0.997038 -0.962046 0.638968; H 0.691232 -1.312038 0.284396; H 0.775814 0.817745 0.757350; }. set optking { ; frozen_dihedral = (""; 5 1 2 6; 4 1 2 6; 3 1 2 6; ""); }; #set {; # geom_maxiter 2; # g_convergence GAU_LOOSE; #}; #memory 6GB; #set_num_threads(6); #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); #for _ in range(1):; # try:; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # break; # else:; # try:; # set opt_coordinates cartesian; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # pass; #clean(). optimize(""hf/3-21G"") # segfaults; #optimize(""hf/cc-pvdz"") # 4 iter; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679:680,optimiz,optimize,680,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679,6,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,"Can confirm `qcengine` uses the number of physical cores on a machine by default, as seen [here](https://github.com/MolSSI/QCEngine/blob/c171e80c51afc5bc08ac8a84971b526fd33671d3/qcengine/config.py#L43-L46). Running psi4 with `8` threads (I have 8 logical CPU cores) produces similar performance:. ```sh; time qcengine run psi4 caffeine.json > qcng_out.json ; qcengine run psi4 caffeine.json > qcng_out.json 45.94s user 1.78s system 578% cpu 8.249 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 67.32s user 1.73s system 680% cpu 10.142 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 53.52s user 1.06s system 701% cpu 7.781 total; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475:283,perform,performance,283,https://psicode.org,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475,1,['perform'],['performance']
Performance,"Can you clarify what was giving you trouble? A buf4_init() call shouldn't yield any data, because it doesn't attempt to allocate memory for the tensor data itself, just meta-data like row/column lookups. The underlying file4_init() call *can* be associated with data that's already in cache (in which case I wouldn't describe it as ""loading"", just assigning a pointer to data in memory). Sorry to be picky; I just want to the docs to match what's happening in the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267189874:285,cache,cache,285,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267189874,2,"['cache', 'load']","['cache', 'loading']"
Performance,"Certainly the flexibility of the optimizer oughtn't be reduced. In the absence of fixed/frozen keywords or user supplied/edited intco (do you need a keyword to signal do-read-intco instead of accepting any it finds?), it's probably reasonable to assume a full optimization is desired. Maybe `grep '~'` needs to catch a `gradient.rms()`, too, next to the optking-active rms gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196021110:33,optimiz,optimizer,33,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196021110,2,['optimiz'],"['optimization', 'optimizer']"
Performance,Confirmed on current master. Obligatory @psi-rking and @AlexHeide notification. The geometry optimizer is [being rewritten](https://github.com/psi-rking/optking). A fix for this will _probably_ wait until then.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947#issuecomment-655838181:93,optimiz,optimizer,93,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655838181,1,['optimiz'],['optimizer']
Performance,"Constrained optimizations are so often poorly (overly) interpreted and; erratic (dependent on initial guess, finite steps, ...) in their behavior; that I have never invested much time into them. It would not surprise me; if there were a problem with them in PSI4. However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. On Thu, Mar 23, 2017 at 7:06 PM, Chaya Stern <notifications@github.com>; wrote:. > First, your initial geometry has a dihedral of 180, but your initial step; > is 0, so that's an enormous perturbation to introduce through constraints;; > setting start_angle = 181.0; >; > I also added symmetry c1 to the molecule definition section, to make sure; > weird things don't happen as the symmetry changes.; >; > I had done both of these things too (Sorry, I probably should've posted; > that too) and while the optimizations did converge (although not for all; > structures), the structures were still of very high energy when compared to; > the molecular mechanics energy of the optimized structure. When I generated; > the starting structures outside of psi4, the molecular mechanics energies; > were much closer to the QM energies (as it should be since the parameters; > were fit to reproduce this scan); >; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Psi4_QM_MM_comparison.pdf>; > is a figure comparing the QM and MM energies from structures generated with; > psi4; > Here; > <https://github.com/ChayaSt/torsionfit/blob/ddg/examples/butane/torsion_scans/psi4_archive/Pymol_scan_comparison.pdf>; > is one comparing QM and MM energies from structures generated outside of; > psi4.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288896856>, or mute; > the thread; > <https://git",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288899031:12,optimiz,optimizations,12,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899031,3,['optimiz'],"['optimizations', 'optimized']"
Performance,"Cool, this should give us a base to start playing around with automatic rigid body optimizations. . Also note you can do `git pull --rebase upstream master` to rebase in the master branch of upstream. This will help cut down on the number of merges that happen. You can always fall back to merging if needed of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230565713:83,optimiz,optimizations,83,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230565713,1,['optimiz'],['optimizations']
Performance,Could you upload the full output? Best to know which modules are really called.; The optimizations were also done with ROHF?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632703873:85,optimiz,optimizations,85,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632703873,1,['optimiz'],['optimizations']
Performance,"Currently only SAPT(DFT) goes through `sapt_jk_terms.py`. I kind of hope that we can move more of the SAPT0 code over to something similar with Disp staying fully C++. We are going to gain a lot of SAPT0 capabilities soon like spin-flip SAPT, Sinf Exch-Ind and Exch-Disp, regularized SAPT, ISA Exch etc and the Python level interface should make it easier to handle without performance degradation. I think the proposed would work fine. You can use either of the following:; ```python; >>> psi4.core.get_variables() # Returns a dict of all variables; >>> psi4.core.has_variable(""CURRENT DIPOLE X"") # Returns a bool checking if the variable is set; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364689483:374,perform,performance,374,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364689483,1,['perform'],['performance']
Performance,"Dear @dgasmith: currently, optimisations with VV10, LC-VV10 and B97M-V fail due to the lack of the analytical gradients for VV10. This can be, of course, circumvented by passing `dertype=""energy""` to the optimize command. However, it's not necessary to do this for wB97M-V and wB97M-X - they do numerical gradients automatically. I was wondering if it's possible to set the default for VV10 etc. in the meantime?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/897#issuecomment-361602213:204,optimiz,optimize,204,https://psicode.org,https://github.com/psi4/psi4/pull/897#issuecomment-361602213,1,['optimiz'],['optimize']
Performance,"Dear Alfred,. Yeah, the problem is, as the code says, ""Fatal Error: There are no occupied; orbitals with beta spin."" In our program, you can't run an MP2 calculation; on an atom or molecule that doesn't have any beta spin electrons. More; generally, an MP2 calculation doesn't make any sense for systems with only; one electron. Your method is a ""double hybrid"" that includes MP2 as a part; of it. Also, it's impossible to ""optimize"" (like you are trying to do) the; geometry of an atom. It has no internal degrees of freedom to optimize. These computational chemistry programs require a little bit of training to; be able to use properly... they're not totally bulletproof black boxes. Best,; David. On Thu, Aug 27, 2020 at 12:07 PM Alfred Andersson <notifications@github.com>; wrote:. > Hi,; >; > I've been trying to calculate the energies of monoatomic compounds. All of; > the atoms ran successfully, except for hydrogen with multiplicity 2.; >; > My in-file:; >; > molecule mol_atomic_hydrogen_doublet {; > 0 2; > H 0.000000000 0.000000000 0.000000000; >; > units angstrom; > no_reorient; > }; >; > set globals {; > basis aug-cc-pVQZ; > dft_spherical_points 434; > dft_radial_points 85; > reference uhf; > }; >; > set_memory(100000000000); > try:; > optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > set guess read; > optimize('pwpb95-d3bj'); >; > The error I got (including previous lines):; >; > *** tstart() called on host; > *** at Fri Aug 21 16:21:36 2020; >; > => Loading Basis Set <=; >; > Name: (AUG-CC-PVQZ AUX); > Role: RIFIT; > Keyword: DF_BASIS_MP2; > atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenste",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:424,optimiz,optimize,424,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,2,['optimiz'],['optimize']
Performance,"Dear All,. 1) For analytic gradients, one may follow NCG or SCG formalisms, as explained in the DF-CCSD(T) paper [J. Chem. Phys., 147, 044104. DOI: 10.1063/1.4994918]. The NCG formalism is numerically more stable. As far as I remember, all grad codes in Psi4 rely on the NCG formalism. 2) The cost of NCG and SCG are the same for CCSD. But in the case of CCSD(T), SCG has a lower cost (by 25%). 3) For all methods in DFOCC, I use NCG, while for DF-CCSD(T) I replaced the earlier NCG code with the SCG code because of significant cost reduction. . 4) In SCG, frozen cores and virtuals are already included because of the structure of the formalism, while one should additionally consider frozen core/virtual terms for NCG. . 5) As far as I remember, in the beginning, I discussed it with David, and he told me that frozen cores are enough for us since we generally do not use frozen virtual. Of course, he is right. Hence, I have only implement NCG for MP2...CCSD. 6) Normally DFOCC has both formalisms now, but only one of them is activated in the module for any method. It was my TODO list for a while, to activate both SCG and NCG for all methods. But it should be performed very carefully, hence; I keep it waiting for an available time. . 7) I will try to include it in the next major revision of DFOCC. Presently, we are working on UHF based grads for CC methods. Once, we complete the UHF grads, then I can activate frozen virtuals via SCG. But, it may take a while (:. @jgonthier @JonathonMisiewicz @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342:1167,perform,performed,1167,https://psicode.org,https://github.com/psi4/psi4/issues/1912#issuecomment-636201342,1,['perform'],['performed']
Performance,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:51,optimiz,optimized,51,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532,1,['optimiz'],['optimized']
Performance,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105440640:430,perform,performing,430,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640,1,['perform'],['performing']
Performance,"Dear Sebastian, ; I think that the problem is rather related to PSI4 than dmrg. Just look at the example you provided for water molecule :. ```; Number of atoms: 3; Number of AO shells: 9; Number of SO shells: 7; Number of primitives: 22; Number of atomic orbitals: 13; Number of basis functions: 13. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 7 0 4 2 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 1270 non-zero two-electron integrals.; Stored in file 33.; ```. Calling plugin fcidump.so.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ## Created the file H2O.631G.FCIDUMP. As you see a full 2- electron integral calculation is performed for ALL basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; I would like to circumvent this heavy calculation for the case of larger molecules as i am only interested in HOMO-LUMO region. Any way i try your advice but may i know at which line of fcidump.cc i have to copy and paste ; 781-811 and 814-858 lines of dmrgscf.cc ?. Furthermore may i know what is the x matrix : ""Number of variables in the x-matrix = 1032""; and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"". ALL THE BEST; LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105341330:1092,perform,performed,1092,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105341330,1,['perform'],['performed']
Performance,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105182036:872,perform,performs,872,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036,1,['perform'],['performs']
Performance,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/186#issuecomment-152699151:44,optimiz,optimized,44,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8884,optimiz,optimized,8884,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13212,optimiz,optimized,13212,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14542,optimiz,optimized,14542,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15872,optimiz,optimized,15872,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24827,optimiz,optimized,24827,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23496,optimiz,optimized,23496,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20770,optimiz,optimized,20770,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Default (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22100,optimiz,optimized,22100,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1762,Perform,Performing,1762,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,4,['Perform'],['Performing']
Performance,Did I read right above that `make install` has to be performed before `ctest`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235903234:53,perform,performed,53,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235903234,1,['perform'],['performed']
Performance,"Does `/home/jacobson/bin/psi4_wb97xd3_def2tzvp.py` contain a `qcng.compute()` call? May I see that file?. I don't run much through queues, so I don't have a feel for what qcng/config.py can/should pick up from the environment or host setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399:131,queue,queues,131,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399,1,['queue'],['queues']
Performance,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:712,Optimiz,Optimizer,712,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,4,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"ET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7726,optimiz,optimized,7726,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,Easy to add a print statement stating which necessary criteria for convergence were met. This isn't the only case where something that looks like this can occur. Will add to the new optimizer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947#issuecomment-655841532:182,optimiz,optimizer,182,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655841532,1,['optimiz'],['optimizer']
Performance,"Everything tests clean except the ft97 on neon atom at the end of dft-custom-gga, which I can't persuade to converge with normal SCF devices, even with docc set. below is behavior of p4 master + xc 4.3.4 on the left and this PR + xc 5.1hotfix on the right. ""LibXC Density Thresholds"" is very different, and SCF convergence behavior is awful. Do I need to tighten libxc density thresholds from psi4? Or could there be a problem with the fctl?. ```; 												 >; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Tue Jan 5 23:59:27 2021									 |	*** at Wed Jan 6 00:14:26 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: CC-PVDZ											 Name: CC-PVDZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry NE line 258 file /psi/gits/hrw-tag/objdir39/stage/share/psi4/basis/c |	 atoms 1 entry NE line 258 file /psi/gits/hrw-demo/objdir39/stage/share/psi4/basis/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; RKS Reference								 RKS Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: d2h										 Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:						 Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:671,Load,Loading,671,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,2,['Load'],['Loading']
Performance,"Ex (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6269,optimiz,optimized,6269,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"Example attached. Thanks,. -Trent. On Wed, Apr 20, 2016 at 3:41 PM, Trent Parker <; trent.michael.parker@gmail.com> wrote:. > .Any constrained optimization example where ""no_com"" and/or ""no_reorient""; > isn't in the molecule input section and the geometry isn't in the standard; > nuclear orientation. The job won't fail, but the constrained coordinates; > will not be identical to their original values in the final output.; > ; > -Trent; > ; > On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > @tparker36 https://github.com/tparker36 Can I get test case where this; > > dies horribly?; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/179#issuecomment-212570814; > ; > ## ; > ; > Trent Parker; > Sherrill Research Group; > Georgia Institute of Technology; > ; > Center for Computational Molecular Science and Technology; > School of Chemistry and Biochemistry; > 4201 Molecular Science and Engineering Building; > ; > 901 Atlantic Drive NW; > Atlanta, GA 30332. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-212579530:143,optimiz,optimization,143,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212579530,1,['optimiz'],['optimization']
Performance,"Excellent, thanks for your tremendous effort.; Given that my test cases were not modified and still seem to work, i do not have any complaints. > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed.; No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089:824,optimiz,optimized,824,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089,1,['optimiz'],['optimized']
Performance,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202622738:484,optimiz,optimizations,484,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738,3,['optimiz'],"['optimizations', 'optimize', 'optimizer']"
Performance,"FOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4049,Perform,Performing,4049,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['Perform'],['Performing']
Performance,"FYI I tried 64 GB but still the same issue. I guess I will have to stick with a CAS(16,14) as my reference energy (without orbital optimization).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557:131,optimiz,optimization,131,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660888557,1,['optimiz'],['optimization']
Performance,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:439,perform,perform,439,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148,2,['perform'],"['perform', 'performed']"
Performance,"Final post for now, I cannot devote more time to debugging Psi4. Managed to get a stack trace with full debugging symbols:; ```; (gdb) bt full; #0 __GI_perror (s=0x7ffff6782dd8 ""LSEEK failed. Error description from the OS: "") at perror.c:48; errnum = <optimized out>; fp = <optimized out>; fd = <optimized out>; #1 0x00007ffff5ca4ee7 in psi::PSIO::wt_toclen (this=0x555555eb0a90, unit=102, len=1) at /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc:109; stream = -1; errcod = -1; #2 0x00007ffff5ca5cf6 in psi::PSIO::write (this=0x555555eb0a90, unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\305D\330xK\222\063?<c\272\337\366\242\342>k\343\316\350\062hF?\245\070\243\246\313\036\""\277B\006\n\333\317k!?\275\017\327t|c\021?[C+\334\036\063\034\277""..., size=13436928, start=..., end=0x7fffffffb520) at /home/gytibor/psi4/psi4/src/psi4/libpsio/write.cc:94; this_unit = 0x555555eb4810; this_entry = 0x55555a4df9e0; last_entry = 0x20; start_toc = {page = 0, offset = 8}; start_data = {page = 0, offset = 120}; end_data = {page = 205, offset = 2168}; tocentry_size = 112; dirty = 1; #3 0x00007ffff5ca5ff4 in psi::psio_write (unit=102, key=0x7fffffffb604 ""A <ij|kl>"",; buffer=0x55555b06ac10 ""8\236\312`\310]@@_~hӲ\232\021\300\341\333\312\364\252@\a\277\026%h\212J\026\f\277\227\325\302g;\267\v?\177\311R\341M/\375?\211\377\036\342\217\363\020?\rK\245\316\305\343\n\277\371m8\363\254\230\027?\341Z\003\250\254\031\337>\244\320_\210w\036\327>\263\001'\240j\003\343\276\030 c\355PR\336>\306\345e\034\324I\344>6Z\373\306\316\023\222\276#\026\201 [gɾ\353\357i\224\240=\352?\005L\a\226\273\301*?\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:252,optimiz,optimized,252,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277,3,['optimiz'],['optimized']
Performance,"Finally, I have built an experimental *Psi4* package for *Windows*: https://anaconda.org/raimis/psi4. Limitations/issues:; - Minimal functionality: no addons and plugins; - Slow: not optimized and with debugging instrumentation; - ~~Can be used as a *Python* package only (i.e. `psi4` command is not working)~~ -- #1420; - ~~`PSI_SCRATCH` has to be set, otherwise it will crash~~ -- #1413; - A few tests are failing:; - ~~`cbs-parser`~~ -- #1442; - ~~`ci-property`~~ -- #1440; - ~~`cc46`~~ -- #1422; - ~~`cc47`~~ -- #1422; - ~~`cc53`~~ -- #1438; - ~~`fci-tdm`~~ -- #1441; - ~~`fci-tdm-2`~~ -- #1441; - ~~`psimrcc-fd-freq2`~~ -- #1427; - ~~`psithon2`~~ -- #1410. If you are a *Windows* user, could you try and give feed back, please:; ```; > conda install -c raimis -c psi4 -c conda-forge psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-445293936:183,optimiz,optimized,183,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-445293936,1,['optimiz'],['optimized']
Performance,"For cacheing, keeping “ miniconda/packages” dir around is what I expect to be the key part. So long as the mkl dir or tarball is in there, making the conda env is trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444495440:4,cache,cacheing,4,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444495440,1,['cache'],['cacheing']
Performance,"For consistency's sake regarding Psi4 AddOns, I'd really like to keep `ENABLE_simint` as a boolean and have something like `SIMINT_TARGET_ARCH` as an optional variable. Would something like [this](https://github.com/tunabrain/tungsten/blob/master/cmake/OptimizeForArchitecture.cmake) allow selecting a good default for `SIMINT_TARGET_ARCH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533#issuecomment-275186110:253,Optimiz,OptimizeForArchitecture,253,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-275186110,1,['Optimiz'],['OptimizeForArchitecture']
Performance,"For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869295505:72,optimiz,optimizations,72,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869295505,1,['optimiz'],['optimizations']
Performance,"For the long-term we have the required Hessian-vector products. We need #886 would allow us to optimize them, planned for 1.3 when Python-SCF iterations go live. Please do make a PR for 1) and 2) as they are quite needed before 1.2 is released.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/973#issuecomment-383228055:95,optimiz,optimize,95,https://psicode.org,https://github.com/psi4/psi4/issues/973#issuecomment-383228055,1,['optimiz'],['optimize']
Performance,"From the cfour email chain today, it sounds like `CFOUR_NUM_CORES` is widespread. I'll add it to the whitelisted envvars. > export CFOUR_NUM_CORES=20; >; > From my experience I can say that using more than 4 processors will not increase performance and even sometimes the worse. Of course that depends also from the kind of computation (optimization, frequency, …).; > ; > Best regards,; > Alberto",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661#issuecomment-289809443:237,perform,performance,237,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-289809443,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"Full rework of SAD guess (#1451, #1452, #1456, #1458, #1477, #1479, #1481), fixing issues with fractional occupations, ECPs, and ghost atoms. Sad with spin-averaged fractional occupations is now the default guess in Psi4, yielding huge performance improvements. This is especially significant for unrestricted and restricted open-shell methods, for which the default guess was GWH which is even worse than CORE. Implemented the on-the-fly extended Huckel guess (#1498, #1529), which is based on the SAD solver. DIIS maximum absolute error criterion for SCF, instead of the default RMS error (#1460). Removed inconsistencies and bugs in formatted checkpoint files (#1475). Code assumes that the post-HF wave function contains a correlated density. Fixed inconsistencies in the passing of DF_FITTING_CONDITION; the default value is now 1e-10 in line with what was actually used by the code before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888:236,perform,performance,236,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888,1,['perform'],['performance']
Performance,"G09.D01 ""SOGGA11/cc-pVDZ 5D SP Int(Grid=99770)""; }. molecule ne {; 0 1; Ne; }. set df_scf_guess false; set basis cc-pvdz; set reference rks; set dft_radial_points 99; set dft_spherical_points 770; set scf_type direct. for func, val in ggaval.items():; edft = energy(func); label=func.upper(); compare_values(val, edft, 4, 'Ne: '+label) #TEST; clean(). # special flower BP86; low accuracy; # #G09 LDA-PW86; edft = energy('bp86'); compare_values(-128.903070321, edft, 3, 'Ne: BP86(PW)') #TEST; clean(). #=== from dft1 ===; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; print 2; basis sto-3g. guess core; scf_type direct; dft_spherical_points 302; dft_radial_points 99; reference rks; }. E15 = -75.2976775610; activate(h2o); edft=energy('scf', dft_functional=""b86bpbe""); compare_values(E15,edft, 4, ""H2O: B86BPBE "") #TEST. --------------------------------------------------------------------------. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:26 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DI",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:3592,Load,Loading,3592,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Load'],['Loading']
Performance,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:334,optimiz,optimize,334,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['optimiz'],['optimize']
Performance,"Given the reporter, the geometry they input is probably garbage. While I agree attempts to optimize from this are in vain, there should be a proper error message instead of just crashing with an obscure C error code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167:91,optimiz,optimize,91,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167,1,['optimiz'],['optimize']
Performance,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:150,optimiz,optimizations,150,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,1,['optimiz'],['optimizations']
Performance,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:303,optimiz,optimized,303,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249,6,['optimiz'],['optimized']
Performance,"Good catch. Although there could be multiple suggestions, one that I found the most effective is to choose a different set of starting (guess) orbitals. This can be done by either setting odc_guess to true or by feeding in other (non-HF) orbitals. Either one is fine with me. If you choose to go with the first option, the second line can be modified as ""If this does not converge, try ODC_GUESS=TRUE"" (this obviously only makes sense for orbital-optimized methods).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354#issuecomment-437644132:447,optimiz,optimized,447,https://psicode.org,https://github.com/psi4/psi4/issues/1354#issuecomment-437644132,1,['optimiz'],['optimized']
Performance,"Great to have test for this. . Shared pointers like [epot](https://github.com/psi4/psi4/pull/1900/files#diff-91bf9e90eb569eec33cd0e5edae2e2b4L1070) in this case are probably a bad idea in OpenMP.; Unfortunately I cannot test threading things on my mac. @timostrunk how important is threading here, performance wise? Is re-introducing openmp quickly crucial?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819:298,perform,performance,298,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819,1,['perform'],['performance']
Performance,"Guess I'll heed the aggressive `DeprecationWarning`. Anyways, confirmed that your conda setup looks good. Input also segfaults for me locally with a compiled copy, so it's a general psi issue and not isolated to the binary. Your trouble is that the input geometry isn't symmetric enough, so it's optimizing near-linear angles, which the optimizer DoesNotLike. When you clean up the geometry, it optimizes cleanly. ```; >>> cat i1265.in ; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }. PCl5.update_geometry(); PCl5.symmetrize(0.05). set basis def2-tzvp. optimize(""b3lyp""); ```. ```; >>> grep '~' i1265.out ; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -2642.57856550 -2.64e+03 8.58e-03 4.73e-03 o 3.65e-02 1.72e-02 o ~; 2 -2642.57939174 -8.26e-04 2.66e-03 1.41e-03 o 1.48e-02 7.24e-03 o ~; 3 -2642.57947730 -8.56e-05 4.34e-04 1.79e-04 o 1.87e-03 8.01e-04 o ~; 4 -2642.57947965 -2.35e-06 3.44e-04 1.27e-04 o 4.29e-03 1.56e-03 o ~; 5 -2642.57948325 -3.60e-06 1.41e-04 * 5.08e-05 o 2.69e-03 9.60e-04 o ~; 6 -2642.57948452 -1.27e-06 2.69e-05 * 1.27e-05 o 1.57e-04 * 6.33e-05 o ~; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -2642.578565499663 -2642.578565499663 0.00857526 0.00473269 0.03653776 0.0172",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424906851:296,optimiz,optimizing,296,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424906851,4,['optimiz'],"['optimize', 'optimizer', 'optimizes', 'optimizing']"
Performance,"H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs; >; > --------------------------------------------------------; > DF-MP2; > 2nd-Order Density-Fitted Moller-Plesset Theory; > UMP2 Wavefunction, 28 Threads; >; > Rob Parrish, Justin Turney, Andy Simmonett,; > Ed Hohenstein, and C. David Sherrill; > --------------------------------------------------------; >; > --------------------------------------------------------; > NBF = 46, NAUX = 80; > --------------------------------------------------------; > CLASS FOCC OCC AOCC AVIR VIR FVIR; > ALPHA 0 1 1 45 45 0; > BETA 0 0 0 46 46 0; > --------------------------------------------------------; >; >; > Traceback (most recent call last):; > File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; > G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; > **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; > derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; > dfmp2_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: There are no occupied orbitals with beta spin.; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; > The most recent 5 function calls were:; >; >; >; >; > Printing out the relevant line",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:2645,optimiz,optimize,2645,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,1,['optimiz'],['optimize']
Performance,"Here is `psi4 --test`:; (p4env) [henrique@dhcppc3 ~] $ psi4 --test; ================================================================ test session starts =================================================================; platform linux -- Python 3.6.6, pytest-3.8.0, py-1.6.0, pluggy-0.7.1 -- /home/henrique/bin/anaconda3/envs/p4env/bin/python; cachedir: .pytest_cache; rootdir: /home/henrique, inifile:; collected 22 items . bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 SKIPPED [ 18%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED [ 22%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_ad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:344,cache,cachedir,344,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['cache'],['cachedir']
Performance,"Here's same job with more ""normal"" input. ```; memory 2500 mb. molecule struct {; units angstrom; 0 1; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set basis 6-31G*; optimize('scf'); ```. and output. ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126177998:564,optimiz,optimize,564,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998,1,['optimiz'],['optimize']
Performance,Here's single-thread wB97X run with chrinide's input after two optimization cycles (it's still going). Max real 11 gb and virtual 12.4 gb. [bgobbi_wB97x_n1.log](https://github.com/psi4/psi4/files/3074059/bgobbi_wB97x_n1.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995:63,optimiz,optimization,63,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995,1,['optimiz'],['optimization']
Performance,"Here's the proposed patch copied over from Trac. @jturney , does this need further consideration, or do you want to close it out?. ```; --- psi4.0b4/src/lib/libmints/osrecur.cc.nuclear 2013-04-07 10:13:35.000000000 +0300; +++ psi4.0b4/src/lib/libmints/osrecur.cc 2013-04-22 14:52:27.921823318 +0300; @@ -637,22 +637,22 @@ void ObaraSaikaTwoCenterVIDerivRecursion; double tmp = sqrt(zeta) * M_2_SQRTPI;; // U from A21; double u = zeta * (PC[0] * PC[0] + PC[1] * PC[1] + PC[2] * PC[2]);; - double *F = new double[mmax+1];; + double *F = new double[mmax+2];. // Zero out F; - memset(F, 0, sizeof(double) * (mmax+1));; + memset(F, 0, sizeof(double) * (mmax+2));. // Form Fm(U) from A20; - calculate_f(F, mmax, u);; + calculate_f(F, mmax+1, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; - for (m=0; m<=mmax-1; ++m) {; - vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; - vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; - vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; + for (m=0; m<=mmax; ++m) {; + vx_[0][0][m] = 2.0*zeta*PC[0]*tmp*F[m+1];; + vy_[0][0][m] = 2.0*zeta*PC[1]*tmp*F[m+1];; + vz_[0][0][m] = 2.0*zeta*PC[2]*tmp*F[m+1];; }. // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-121322945:744,Perform,Perform,744,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945,1,['Perform'],['Perform']
Performance,"Hey all, I have updated the code to account for the two density matrices present in UHF. I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance. I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713:205,perform,performance,205,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713,1,['perform'],['performance']
Performance,"Hi @JonathonMisiewicz ; Thank you for your response. > Let us know if there are addons that you need but don't know how to get. (Examples: dftd4 for DFT dispersion corrections, cct3 for some exotic coupled cluster variants, cppe for polarizable embedding.). I am using psi4 through geomeTRIC to minimize the structures of small molecules.; The other dependencies which I had mentioned earlier was to generate the input file (.in file) for the minimization; `geometric-optimize --psi4 <input.in>`. I am able to do this as long as I provide the `input.in` file, i.e. psi4 is working just fine for me. So thanks a lot @loriab and @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714:468,optimiz,optimize,468,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1154722714,1,['optimiz'],['optimize']
Performance,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-305441942:208,load,loaded,208,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942,3,"['cache', 'load']","['cache', 'cachedir', 'loaded']"
Performance,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1014,optimiz,optimize,1014,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169,2,['optimiz'],['optimize']
Performance,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:788,perform,performance,788,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496,2,"['load', 'perform']","['load', 'performance']"
Performance,"Hi Dr. Lehtola,. Would you be able to post the output file as well? I was hoping to know exactly what code you're using because there have been a lot of revisions to JK algorithm selection based on memory lately. This would help me look at the code block that selected your algorithm and possibly help with your first bug. This bug usually shows up when the user selects an ""SCF_TYPE"" and then doesn't supply an amount of memory that warrants Disk/core. The second bug isn't so much a bug as a troublesome name. MemDFJK is a JK build package that is optimized to work in the case that there is enough core memory to hold the 3-index integral tensors, and DiskDFJK is a JK build package that we found performs better in the case where these tensors have to be read from disk. They were named after the cases in which they worked best for us not for their capabilities or limitations. . That being said, each of these packages has machinery to handle both in-core and disk-based integral handling. Psi4 chooses the package based on the value of the memory_ variable, and each package should then use the algorithm (""Disk"" or ""Core"") that best fits the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352:550,optimiz,optimized,550,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352,2,"['optimiz', 'perform']","['optimized', 'performs']"
Performance,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:143,perform,performing,143,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['perform'],['performing']
Performance,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:189,perform,perform,189,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,1,['perform'],['perform']
Performance,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-128100571:57,optimiz,optimizations,57,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571,3,['optimiz'],"['optimization', 'optimizations']"
Performance,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152814498:487,optimiz,optimized,487,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498,1,['optimiz'],['optimized']
Performance,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:228,optimiz,optimization,228,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['optimiz'],['optimization']
Performance,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:984,perform,performant,984,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327,1,['perform'],['performant']
Performance,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:49,perform,perform,49,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024,1,['perform'],['perform']
Performance,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:71,optimiz,optimization,71,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462,3,['optimiz'],"['optimization', 'optimizations']"
Performance,"Hi!; I am also a developer of TREXIO, and of the quantum package software. In quantum package, we have the ability to import/export data from TREXIO files, and we use it to export wave functions for QMC codes, one- and two-body RDMs to send them to the GammCor code to perform SAPT calculations, and we export integrals in TREXIO to perform FCIQMC calculations with NECI. It would be nice for us to also be able to exchange data with Psi4 (in the two directions).; I am also willing to help if needed!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044:269,perform,perform,269,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044,2,['perform'],['perform']
Performance,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:749,optimiz,optimize,749,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864,1,['optimiz'],['optimize']
Performance,"Hi, Rob. All ECP-related issues are marked with the `ecpint-needed` tag. There are currently five open ones. I'm going to go through them and attempt to reproduce them with the v1.6 release, so we can assess if ECPs are broken. You raise a good point: debugging ECP issues is going to be harder if we also change basis functions. @loriab, can we put a moratorium on #2537 until we've had more time to investigate the ECP issues and evaluate the performance of DDD ""in the wild""? While I would not expect DDD to introduce strange correctness errors like I would expect of integral convention swaps, I am too paranoid to neglect the possibility. Say hi to Nick Stair for me. I'll report back once I've finished my preliminary investigations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145:445,perform,performance,445,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145,1,['perform'],['performance']
Performance,"Hi, Ugur; I've been doing Quantum Monte Calro calculations in CASINO program https://vallico.net/casinoqmc/; It uses Diffusion Monte Carlo (DMC) method for solving for the ground state of the many-body Schrödinger equation. In principle for bosonic state the DMC method is exact, but fermionic system has nodes and consequently regions of positive and negative sign, thus several well-controlled approximations must be introduced for calculations to remain tractable.; The fixed-node approximation, is the simplest of them ; http://web.ornl.gov/~pk7/thesis/pkthnode21.html#SECTION00844000000000000000; CASINO program takes initial MO from external MOLDEN file usually from HF calculation (if single reference WFN is suitable). But I found that Orbital Optimized MO turns out better in this case.; I usually doing calculations in large bases up to cc-pV6Z and pV7Z.; I do not know whether it is possible to do such a calculation in psi4. with respect, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152818239:752,Optimiz,Optimized,752,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152818239,1,['Optimiz'],['Optimized']
Performance,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:157,optimiz,optimize,157,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687,1,['optimiz'],['optimize']
Performance,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:983,cache,cache,983,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761,1,['cache'],['cache']
Performance,"Hmm, Fransesco recently made some changes that rotate the MCSCF orbitals to a standard frame (either semicanonical or NO’s). The CI determinants are optimized and printed in this basis however. A quick pass shows that the MOLDEN writer should be picking everything up correctly; however, this doesn’t rule out something subtle. One check could be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331891537:149,optimiz,optimized,149,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537,1,['optimiz'],['optimized']
Performance,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:176,load,loads,176,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769,1,['load'],['loads']
Performance,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:535,Perform,Performing,535,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Perform'],['Performing']
Performance,"Hmm, do you think we would see anything else for another compiler like `clang`? Might be good to document this, get it in, and have it be disabled incase Ninja can find more optimizations in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/794#issuecomment-335230588:174,optimiz,optimizations,174,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-335230588,1,['optimiz'],['optimizations']
Performance,"Holy cow. I wonder if there's some problem with the passing of character; references between C++ and Fortran in the new compilers that could explain; why some DGEMM cases work and others don't. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Fri, Mar 18, 2016 at 8:26 PM, Daniel Smith notifications@github.com; wrote:. > Awesome. Does turning off XHOST and compiler optimization help?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/321#issuecomment-198592985",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198595581:374,optimiz,optimization,374,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198595581,1,['optimiz'],['optimization']
Performance,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:34,Perform,Perform,34,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277,1,['Perform'],['Perform']
Performance,"I added a whole load of printfs and compared the output produced on a couple of different processors. I put a fair bit about it on the [forum](http://forum.psicode.org/t/different-dft-grid-behaviour-on-different-machines-very-different-dft-enrgies/460/9?u=laz). The Iq matrix obtains these ""nearly zero"" off diagonals at ca. line 3400 of cubature.cc in OrientationMgr::OrientationMgr() where the summation involves products of x, y, and z coordinates. For some processors ""-a + a = 0"" but for others, not quite by the looks of it. Some of the cartesian coordinates are things like 10-17, so products become extremely small. I've not looked into whether they've already been transformed form the input coordinates or not but they must have been processed in some way to get that sort of value. Also, the value of center was essentially ""0.0, 0.0, 1e-17"" on one machine but ""1e-17, 1e-17, 1e-16"" on an i7-5960x. When this gets subtracted off (line 3414), it either has no effect or adds to the non-zero-ness of the matrix elements (although, subtraction from elements with a significant value, such as the diagonals, has a negligible effect). Should coordinates have values as small as 1e-17? How close to zero is zero?! That's something I don't really have a feel for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292620152:16,load,load,16,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292620152,1,['load'],['load']
Performance,"I added some experimental changes to `electricfield.{cc,h}` in order to compute; field integrals (for the induction operator) and electric field expectation values (needed to solve for induced moments) for multiple sites/coordinates at once. Even though I don't like the code I implemented, it gives massive performance improvements.; In my tests (Python code is uploaded [here](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade)), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. EFP would also benefit from these performance improvements. Since the code is rather ugly at the moment, I'm thankful for any suggestions on how to proceed from here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-502876555:308,perform,performance,308,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-502876555,2,['perform'],['performance']
Performance,"I agree @susilehtola , the problematic code is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L308-L310) and [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L883-L888). What's happening is this: the JKGrad code creates a `TwoBodyAOInt` object per thread, in serial. The extra overhead in creating 8 vs 1 of these objects far outweighs any parallelism gained in the use of additional threads. I suspect this performance issue was introduced by the libint2 ERI overhaul, which happened in psi4 v1.4. If I recall correctly, as part of the overhaul, the `TwoBodyAOInt` constructor was changed to automatically perform Schwarz/CSAM screening and store a list of significant shell pairs. Before the overhaul, such a list of significant shell pairs was determined outside of the `TwoBodyAOInt` object, using an `ERISieve` object. As a consequence of this overhaul, the `TwoBodyAOInt` constructor is now very expensive (because it computes all `(mn|mn)` shell quartets to do the screening), and `TwoBodyAOInt` objects should be initialized sparingly. When many identical `TwoBodyAOInt` objects are needed, we should instead construct a single object and clone the rest, as is done [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dlpno/mp2.cc#L635-L638) for example. Hopefully @andysim can confirm this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2559#issuecomment-1111277619:474,perform,performance,474,https://psicode.org,https://github.com/psi4/psi4/issues/2559#issuecomment-1111277619,2,['perform'],"['perform', 'performance']"
Performance,"I agree we should allow the user to drop the computation of monomer-basis calculation. However, total counterpoise-corrected energies are sometimes needed, e.g. when doing geometry optimization, and so they should be computed when needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-519261214:181,optimiz,optimization,181,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-519261214,1,['optimiz'],['optimization']
Performance,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182877975:623,optimiz,optimization,623,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975,1,['optimiz'],['optimization']
Performance,"I agree, but not going to debug this bizarre case in the C++ code. And if; you're going to catch the absurd geometry, then psi4 should never compute; the gradient. On Fri, Jul 8, 2022 at 12:24 PM Jonathon Misiewicz ***@***.***>; wrote:. > Given the reporter, the geometry they input is probably garbage.; >; > While I agree attempts to optimize from this are in vain, there should be; > a proper error message instead of just crashing with an obscure C error; > code.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2627#issuecomment-1179213167>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TAGYFNA3TVUXXSR7DLVTBP4VANCNFSM53A6YHNQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978:336,optimiz,optimize,336,https://psicode.org,https://github.com/psi4/psi4/issues/2627#issuecomment-1179416978,1,['optimiz'],['optimize']
Performance,"I also don't know exactly where the error array is coming from. The numbers in the README seem very few compared to the length of the error matrix. The ASCII way is still possible. But Rob was no fool when it came to optimizing the right parts. It only gets run once per SAPT, so I don't see the block of a text file, but I'm ready to believe he had a reason to go binary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357:217,optimiz,optimizing,217,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451997357,1,['optimiz'],['optimizing']
Performance,"I also tried reinstalling via executing the .exe file in my downloads directory and the same error pops up . ""C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721:301,load,load,301,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721,2,['load'],['load']
Performance,"I am actually more looking for advice than complaining or reporting a bug here. It's indeed more of a qcengine thing, but I was wondering whether psi4 had a way to perform the conversion. I spotted `psi4.schema_wrapper.driver._convert_wavefunction()` (https://github.com/psi4/psi4/blob/6260856e4002a8398cdba67c2ce2254d47c49d37/psi4/driver/schema_wrapper.py#L493) that can convert a `psi4_wfn` to a `qcschema_wfn` and I was wondering whether a function to perform the inverse operation exists somewhere (doing the `qcschema_wfn` to `psi4_wfn` conversion). I totally understand this is not strictly a psi4 issue here so I'll close if you think it's irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378:164,perform,perform,164,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378,2,['perform'],['perform']
Performance,"I am actually performing these calculations on Google Colab. (It is for a future workshop.) You can access a Colab notebook exemplifying the error [here](https://colab.research.google.com/drive/1uTsmVcFJY5xArRbo4sQ0RGgPiT406xdM?usp=sharing). Additionally, here is the output from `conda list`. . ```; # packages in environment at /usr/local:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 1_gnu conda-forge; alsa-lib 1.2.3 h516909a_0 conda-forge; ambit 0.5.1 hbe8a562_1 psi4; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py37h5e8e339_1 conda-forge; attrs 21.4.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; beautifulsoup4 4.10.0 pyha770c72_0 conda-forge; blas 1.0 mkl ; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; boost 1.74.0 py37h6dcda5c_3 conda-forge; boost-cpp 1.74.0 h312852a_4 conda-forge; bottleneck 1.3.4 py37hce1f21e_0 ; brotli 1.0.9 he6710b0_2 ; brotlipy 0.7.0 py37h5e8e339_1001 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.17.1 h7f98852_1 conda-forge; ca-certificates 2021.10.8 ha878542_0 conda-forge; cairo 1.16.0 hf32fb01_1 ; certifi 2021.10.8 py37h89c1867_1 conda-forge; cffi 1.15.0 py37h036bc23_0 conda-forge; chardet 4.0.0 py37h89c1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c099",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:14,perform,performing,14,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,2,"['bottleneck', 'perform']","['bottleneck', 'performing']"
Performance,"I am also being re-directed from search engines. The top site shows psicode.org but will redirect if I click on it. Typing psicode.org into a browser will bring me to the correct page, but I am noticing that the “manual” link is not working properly. I have that bookmarked and I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:406,load,loaded,406,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,4,['load'],"['load', 'loaded']"
Performance,"I am running expensive SAPT calculations and psi4 dies due to time limit.; My calculations reached upto "" CHF Iterations converged "" and then killed due to teh ; time limit of my queue system. It is possible to add restart option to sapt ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-174418021:179,queue,queue,179,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-174418021,1,['queue'],['queue']
Performance,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37134034:314,optimiz,optimization,314,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034,1,['optimiz'],['optimization']
Performance,"I can add this to my reviewing queue, but it will be behind the DLPNO PR, since I've already started on that one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2151#issuecomment-916174986:31,queue,queue,31,https://psicode.org,https://github.com/psi4/psi4/pull/2151#issuecomment-916174986,1,['queue'],['queue']
Performance,"I can certainly try it. The crash seems to be related to the LRU caching mechanism, and it fails when it tries to lseek() on a file that is not open. Maybe the logic that would open the file sees that there is enough memory to hold everything in RAM and skips the file open, but then later the the sort assumes that file has been opened.; This is also supported by the `cachelevel 0` workaround working fine, just slowly. The fact that an LRU caching related function is getting called is unexpected by itself, as the [CC docs](https://psicode.org/psi4manual/master/cc.html) claim that LRU is not the default caching algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451:370,cache,cachelevel,370,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451,1,['cache'],['cachelevel']
Performance,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:665,Perform,Performing,665,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479,1,['Perform'],['Performing']
Performance,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-197012335:18,optimiz,optimization,18,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335,3,['optimiz'],"['optimization', 'optimize']"
Performance,"I couldn't pull up the old psi4/psi4private#14 that @loriab mentioned, but; does CC have a follow_root equivalent? Can you optimize the 3rd EOM-CCSD; root? There seems to be a CC3_FOLLOW_ROOT (CCEOM) option, that is not; really documented (documentation doesn't explain what this does). Maybe; @lothian can shed some light on this. David. On Wed, Nov 16, 2016 at 10:58 AM, Lori A. Burns notifications@github.com; wrote:. > ## _@loriab_ commented on this pull request.; > ; > In psi4/share/psi4/fsapt/fsaptdiff.py; > https://github.com/psi4/psi4/pull/519:; > ; > > ```; > > printOrder2(stuffA['order2'], stuffA['fragkeys']); > > ```; > > - print ' => Reduced Analysis <=\n'; > > - print(' => Reduced Analysis <=\n'); > > printOrder2(stuffA['order2r'], stuffA['fragkeysr']); > ; > @amjames https://github.com/amjames , yeah, specifying the trio of; > INTERP, LIBS, and HEADERS is the only surefire way I know to get fully; > consistent python.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/519, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdsQnxkGJc8o-ke-GfW4Qg-6yWExXks5q-ygKgaJpZM4KzjCV; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519#issuecomment-260985515:123,optimiz,optimize,123,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-260985515,1,['optimiz'],['optimize']
Performance,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53036550:41,load,loading,41,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550,1,['load'],['loading']
Performance,"I don't get it, I ran another geom opt using B3LYP/6-31G* with the last coordinates of the previous attempt, and it converged 1st iteration. ```; **** Optimization is complete! (in 1 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -1520.121971894730 -1520.121971894730 0.00006927 0.00001834 0.00081821 0.00021391 ~; --------------------------------------------------------------------------------------------------------------- ~; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866:151,Optimiz,Optimization,151,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957945866,2,['Optimiz'],['Optimization']
Performance,"I don't have a chance to compile with icpc 18 right now, but we do have it; at NIH. One way to narrow this problem down is to wrap half of the; matrix.h functions in preprocessor pragmas to kill optimization (; https://software.intel.com/en-us/node/524550), leaving the rest compiled as; normal with -O2 or higher. By eliminating half of the functions'; optimization each time, it should be quite easy to figure out which; function is causing problems by bisection. On Mon, Feb 26, 2018 at 4:11 PM, Justin Turney <notifications@github.com>; wrote:. > I'm hitting a similar error message with dcft_gradient_UHF.cc but it; > reports that the error is in libmints/matrix.h. Reducing the optimization; > level was the only way I could get it to compile. Even compiling with -O2; > gives the error, -O1 is the only way to resolve it.; >; > I see no issue with the compiler- and file-specific flags for this.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/923#issuecomment-368651645>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAMUmdYwvJwuQd4BJz52tlrgzOg8dBWUks5tYx3YgaJpZM4SPiMy>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368659317:195,optimiz,optimization,195,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368659317,3,['optimiz'],['optimization']
Performance,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346373530:416,optimiz,optimizer,416,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530,3,['optimiz'],"['optimize', 'optimizer']"
Performance,"I don't think I understand what the difference in the program behavior would be if you chose one solution over the other, so I'm not sure. Unless the optimizer needs to get handed the total energies and gradients via a return of the N-body function that happens when return_total_data=True, in which case the first solution would seem to be easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869913964:150,optimiz,optimizer,150,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869913964,1,['optimiz'],['optimizer']
Performance,"I don't think this has anything to do with the projection; but rather the use of the second-order convergence acceleration scheme. Orca's `FMatrix` guess also misses the core electrons (since they don't exist in the orbitals), but the first diagonalization should reintroduce them. Of course, a question is, how is the projection implemented in Orca? You can either project the full Fock matrix, in which case the null space will be zero, or you could just project the XC part in which case the null space will essentially be the core Hamiltonian. The latter scheme would restore the core orbitals, but they wouldn't be screened at all; you might also introduce spurious valence states which will ruin the performance of the guess... Probably the best scheme would be to do the mixed-basis version in which you compute the Fock matrix in the new basis by the orbitals in the old basis without any projection operators. However, this method requires the capability to compute mixed-basis integrals which is not available in Psi4; see equation 2 in [Chem. Phys. Lett. 531, 229 (2012)](https://doi.org/10.1016/j.cplett.2012.02.012).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020:706,perform,performance,706,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664972020,1,['perform'],['performance']
Performance,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53050174:250,load,loaded,250,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174,1,['load'],['loaded']
Performance,"I guess it's an issue with the occupation code, but I think it gets corrected as the optimization proceeds (which changes dimensioning, which causes the psio problems we were observing). In the long term we should do a check for the occupation within the optimizer, and issue a `psiclean()` if it changes, so that DPD doesn't choke, but that's beyond the scope of what I have time for right now sadly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/538#issuecomment-265318359:85,optimiz,optimization,85,https://psicode.org,https://github.com/psi4/psi4/pull/538#issuecomment-265318359,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"I guess the problem is related to the bond very close to 180deg. Maybe some small perturbation of the central atom could be done in these case before giving up?. When I repeated with the coordinates after some Cartesian steps it worked fine to generate internal coordinates, so another approach could be to start with Cartesian only optimization for the first 5-10 steps and then try again to generate internal and so forth until reaching maxiter",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703#issuecomment-523825418:333,optimiz,optimization,333,https://psicode.org,https://github.com/psi4/psi4/issues/1703#issuecomment-523825418,1,['optimiz'],['optimization']
Performance,"I had a bit more of a look and here's what I'd propose:. 1) Introduce a new handler into `psi4.driver.dft_funcs.build_superfunctional` at line 175, that returns `sup = (func, False)` for non-dispersion funcs and `sup = (func, (""custom"", dispersion_type, dispersion_params))`. 2) The new handler should apply default parameters (alpha, beta, omega, references) from LibXC, unless overridden in the functional definition:; ```; func_dict[""PBE0""] = {; ""name"": ""PBE0"",; ""xc_functionals"": {""HYB_GGA_XC_PBEH"": {}}, # XC functional defined - all parameters should be in LibXC; }; func_dict[""MN15""] = {; ""name"": ""MN15"",; ""c_functionals"": {""MGGA_C_MN15"": {}},; ""x_functionals"": {""HYB_MGGA_X_MN15"": {}}, # HYB without alpha, parameter sourced from LibXC; }; func_dict[""B2PLYP""] = {; ""name"": ""B2PLYP"",; ""c_functionals"": {""GGA_C_LYP"": {""alpha"": 0.73}}, # C alpha implies C_MP2 = 1 - C_GGA; ""x_functionals"": {""GGA_X_B88"": {""alpha"": 0.47}}, # X alpha implies X_HF = 1 - X_GGA; ""citation"": ""..."",; }; func_dict[""DSD-BLYP-D2""] = {; ""name"": ""DSD-BLYP-D2"",; ""c_functionals"": {; ""GGA_C_LYP"": {""alpha"": 0.55}, ; ""C_MP2"": {""alpha"": 1.0, ""ss"": 0.43, ""os"": 0.46}, # SS and OS tuned for -D2; },; ""x_functionals"": {""GGA_X_B88"": {""alpha"": 0.29}},; ""citation"": ""..."",; ""dispersion"": {; ""type"": ""-D2"", ; ""params"": {""s6"": 0.35},; ""citation"": ""..."", ; },; }; ```; 3) The class `EmpiricalDispersion` will need to be adjusted to process the provided parameters accordingly. All possible parameters for the `dispersion_type` should be passed into `EmpiricalDispersion` from the handler above, so that `self.dash_params = dispersion_params`, with defaults already filled into `dispersion_params` for missing parameters (eg. `""s6"": 1.0, ""alpha6"": 14.0` for `-d3zero`). Perhaps using a switch (such as `alias == ""custom""` suggested above)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920#issuecomment-365856686:1153,tune,tuned,1153,https://psicode.org,https://github.com/psi4/psi4/issues/920#issuecomment-365856686,1,['tune'],['tuned']
Performance,"I have discovered that this crash actually happens when Psi4 is only given a small amount of memory.; The input from original report did not try to set the memory limit, while my input is not setting it correctly, so everything so far has been run with the default 500 MB. After a round of RTFM on my part, it looks like `set memory 16GB` is _not_ an acceptable way to, well, set the memory limit, and it is silently ignored by Psi4. If I correctly set the memory to 4GB or something big enough, this crash does not happen. There are still multiple bugs to be found _somewhere_:. 1. DPD/PSIO should realize that there is not enough memory and lower the cachelevel; 2. If the cachelevel is set too high compared to the amount of memory it should be an error exit with a meaningful error message, not an obscure PSIO error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331:653,cache,cachelevel,653,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1257167331,2,['cache'],['cachelevel']
Performance,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:674,optimiz,optimizer,674,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"I have fixed the problem. it is a little bit weird to me why the following breaks the gradient code. I just try to save optimized MOs to wfn. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; CmoA->to_shared_matrix(Ca);; SharedMatrix moA = Process::environment.wavefunction()->Ca();; moA->copy(Ca);; ```. where CmoA is the my MO coeff. matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-121683761:120,optimiz,optimized,120,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121683761,2,['optimiz'],['optimized']
Performance,"I have found a few cases (Cr2) where DF kills CD. For the most part, I found that CD takes more time (3-4x) compared to conventional integrals. For the most part, if you are dealing with transition metals, computing the integrals seems to take a large amount of time and CD requires you to randomly compute different integrals, so the code becomes pretty slow. If anybody has any ideas of how to speed up this process please tell me. Right now, I am trying to run a system with 340 basis functions and the cholesky procedure has been running for 70 hours already. There exists very few DF basis sets with large enough AM for Chromium so I am forced to use Cholesky. . I have a branch in my fork where I am trying to figure out the major bottlenecks of cholesky and speed it up. The simplest idea, which is already done, is to compute the cholesky integrals only once and read them from disk. I basically allow cholesky to read the df_ints_io keyword. Previously, the CDJK and lib3index do not interact with this keyword, so it would compute the cholesky integrals if choleskify was ever called. . I agree with @dgasmith to use conventional integrals for the SAD guess. Cholesky seems to slower than conventional integrals. Generation of the cholesky integrals is known to be a slow process as shown by Lindh and Aquilante in many of their papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224376772:737,bottleneck,bottlenecks,737,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224376772,1,['bottleneck'],['bottlenecks']
Performance,"I have no idea if this is the cause here, but there is a somewhat obscure effect called ""false sharing"" where CPU cache interference between threads can wreck parallel scaling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1075511627:114,cache,cache,114,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1075511627,1,['cache'],['cache']
Performance,"I have no problem with this, but there should be more distinction in the nocc setting. For example, frozen_docc in CHEMPS2 means that the orbitals are optimized in the CASSCF procedure and are correlated in CASPT2. This corresponds to restricted_docc through psi4 lingo. frozen_docc (in psi4) typically means that the orbitals are ""frozen"" and are taken to be RHF orbitals. . In all, I would say that CHEMPS2 should use nocc -> restricted_docc rather than frozen_core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-223876187:151,optimiz,optimized,151,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223876187,1,['optimiz'],['optimized']
Performance,"I have now run almost the _entire_ test suite with 100% pass rate. (DFT benchmarks and fsapt-1 excluded as they always time out and are not relevant to these changes.) If there are still concerns about the metadata, tell me sooner rather than later. Next step is documenting the metadata. Also, am I correct in assuming that we want the optimization sow/reap code ripped up as well? I assume that wouldn't be very useful, without the sow/reap code in hessian and gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-432227345:337,optimiz,optimization,337,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-432227345,1,['optimiz'],['optimization']
Performance,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157864804:401,optimiz,optimize,401,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804,1,['optimiz'],['optimize']
Performance,"I just checked and the Molden program does not impose a specific format for the floating point numbers. The attached molden file loads correctly. [molden_test.zip](https://github.com/psi4/psi4/files/2780369/molden_test.zip). Given this freedom, it would even be better to write all orbital coefficients, energies and occupation numbers in scientific notation with 15 digits after the comma.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1486#issuecomment-456186613:129,load,loads,129,https://psicode.org,https://github.com/psi4/psi4/issues/1486#issuecomment-456186613,1,['load'],['loads']
Performance,"I just ran . ```memory 8 Gb. molecule {; O; H 1 1.0; H 1 1.0 2 90.0; }. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']; E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); ```. and it correctly produced cube files. Are you running from a conda install or a compiled version? If the latter and you recompiled recently, try `touch`ing the `psi4/src/core.cc` and `psi4/src/export_*` files and re `make`ing. I suspect there's something odd going on with the pybind11 2.3.0 update and mixed versions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270:179,optimiz,optimize,179,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270,1,['optimiz'],['optimize']
Performance,"I just tested the code in this PR and works well for my purposes, i.e. loading the FCHK file into HORTON to perform a density partitioning. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-456190882:71,load,loading,71,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-456190882,2,"['load', 'perform']","['loading', 'perform']"
Performance,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:773,optimiz,optimize,773,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704,4,"['optimiz', 'perform']","['optimization', 'optimize', 'optimizer', 'performing']"
Performance,"I looked into this. I believe that this method is responsible for the lack of scaling:; https://github.com/psi4/psi4/blob/fe246a0bc35a16577193e23138781e12ba2c40ac/psi4/src/psi4/libmints/potentialint.h#L66; Unfortunately, it won't be trivial to parallelize. This is because of the ObaraSaika-Recurrence object that's touched deep within the nested operations:; https://github.com/psi4/psi4/blob/fe246a0bc35a16577193e23138781e12ba2c40ac/psi4/src/psi4/libmints/potentialint.h#L147; The entire method shares this one object, so this line must be executed sequentially, meaning any parallelization must occur in an even more nested region than this one (which would be too nested to improve performance). I can think of two possible solutions to this problem:. 1. Allow the creation of one ObaraSaika-Recurrence object per thread. This would be the simplest to implement, but it would increase the memory cost of the calculation (by a factor of at most num_threads).; 2. Parallelize the compute method of the ObaraSaika-Recurrence object itself. This could make the ObaraSaika code a little uglier since some of the loops might have to be unrolled, but it wouldn't require significantly more memory. I'd be happy to work on this, but I'd like to know if anyone else had any opinions or suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438022175:686,perform,performance,686,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438022175,1,['perform'],['performance']
Performance,"I officially opened up a PR for v2rdm_casscf, at https://github.com/loriab/v2rdm_casscf/pull/5, which removes ERISieve from v2rdm_casscf and replaces it with TwoBodyAOInt. Once that is added in, we can progress with this PR, as that is the current bottleneck preventing this PR from passing CI testing. Ideally, there's no fun surprises after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862:248,bottleneck,bottleneck,248,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862,1,['bottleneck'],['bottleneck']
Performance,"I opted to use std::string and ostringstream instead of just increasing the size of the static arrays, because this is not bottleneck code. I'm not sure why they were used in the original code, but that seemed to be over 20 years old, i.e. originally C code?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607#issuecomment-277851446:123,bottleneck,bottleneck,123,https://psicode.org,https://github.com/psi4/psi4/pull/607#issuecomment-277851446,1,['bottleneck'],['bottleneck']
Performance,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:436,optimiz,optimization,436,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,1,['optimiz'],['optimization']
Performance,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:579,Load,Loading,579,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,1,['Load'],['Loading']
Performance,"I ran ```conda create -n <p4env> psi4 -c psi4/label/dev -c conda-forge``` and it worked. makes sense since rdkit uses conda-forge as well. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:578,cache,cachedir,578,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['cache'],['cachedir']
Performance,"I ran a HF/aTZ calculation on decane with `scf_type direct` and `df_scf_guess false` (meaning the majority of the calculation is spent computing integrals). Here's the walltime (in seconds) of the JK step for different values of `engine_precision`:. | 0.0 <br /> (no screening) | ε * (max_nprim ^ -4.0) * 1.e-3 <br /> (proposed change) | ε * (max_nprim ^ -4.0) * 1.e-2 <br /> (current value) | ε <br /> (libint2 default) |; |:------------------:|-----------------------------------------------------------|------------------------------------------------------|-----------------------------|; | 3107 | 3031 | 3041 | 2843 |. Looks like there'd be a small but non-negligible performance hit if we used 0.0. The current precision setting already performs close to 0.0 (relative to the libint2 default). There's basically no change in performance if we tighten the current setting by a factor of 10. This conventional HF example is also a kind of worst-case scenario, since integral calculation is not the rate-limiting step in most Psi4 calculations (like anything with DF). I think it wouldn't hurt to tighten (or completely turn off) primitive screening, although there could be other systems or basis sets for which primitive screening leads to larger performance gains.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783404337:673,perform,performance,673,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783404337,4,['perform'],"['performance', 'performs']"
Performance,"I ran some tests to try to reproduce the error, and I found that the point where the error started _differed_ between runs. Sometimes, it ended after printing B(2, 1, 3), sometimes it printed *R(0,1) as infinity and said the optimization failed, sometimes it said it was generating an empirical Hessian for each fragment and failed after that... Is this what you're seeing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385065247:225,optimiz,optimization,225,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385065247,1,['optimiz'],['optimization']
Performance,"I successfully ran a large optimization (CC2, C1, 200GB, 322 bf) and runs fine now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2027#issuecomment-721901212:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/pull/2027#issuecomment-721901212,1,['optimiz'],['optimization']
Performance,"I suppose if anyone wants to check the merged `SCF_SUBTYPE` docstring, they can; else, I'll add this to the merge queue by the time I finish up today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527965147:114,queue,queue,114,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527965147,1,['queue'],['queue']
Performance,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:114,perform,performed,114,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938,1,['perform'],['performed']
Performance,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:165,load,loaded,165,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,2,['load'],['loaded']
Performance,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:27,Optimiz,OptimizationResult,27,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214,1,['Optimiz'],['OptimizationResult']
Performance,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:51,throughput,throughput,51,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119,2,"['Optimiz', 'throughput']","['OptimizationResult', 'throughput']"
Performance,"I think it should be possible, provided the optimizer cooperates. Have you hit any errors yet? If the molecule gives trouble, you can define it within the loop like https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883 so that each step is independent. You could also try the geomeTRIC optimizers instead of default optking. Also note that OpenFF runs oodles of psi4/geomeTRIC torsion scans through QCArchive, if you need to scale up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391:44,optimiz,optimizer,44,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391,2,['optimiz'],"['optimizer', 'optimizers']"
Performance,"I think it's worth mentioning that #1235 also adds the unique feature of doing composite calculations using arbitrary options (frozen core, relativistic effects) or basis sets - it's not just a developer interest PR. For performance, the grid work @zachglick in #1291 and obviously your DFT grid cache in #1233 (which you mention in the top section) are pretty huge. I don't know if you're planning to do any benchmarking, especially wrt. the discussion we had at PsiCon - even if it's just Psi4 1.2.1 vs Psi4 1.3a1 vs Psi4 1.3rc, it would be good to show how much improvement there actually is, especially on > 8 threaded jobs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-445236768:221,perform,performance,221,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-445236768,2,"['cache', 'perform']","['cache', 'performance']"
Performance,"I think the desire to change the name was to reflect that it can be used for other general-purpose (_i.e._ not only evaluated at nuclei) ESP routines, such as grid properties. IIRC, those integrals are just the regular potential ints, modified to allow arbitrary centers to be provided. At one point in time they were strictly Cartesian AO only, to avoid multiple transformations (contraction should be performed with backtransformed D matrices in that case), but I'm not certain that's true anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351194994:403,perform,performed,403,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351194994,1,['perform'],['performed']
Performance,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:117,optimiz,optimize,117,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965,1,['optimiz'],['optimize']
Performance,"I took a closer look at the system. You are beginning with a geometrical; torsion value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344476280:312,optimiz,optimization,312,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280,4,['optimiz'],['optimization']
Performance,"I tried freezing the cartesian coordinates of the dihedral atoms and it seems to work. The optimization converged within 10 iterations. I also used `consecutive_backsteps = 2`. However, since the bonds and angles can't relax, the energy of the converged structure is higher. I'll try your approach of first optimizing with a lower level of theory. . ```; frozen_string = """"""; 4 xyz; 10 xyz; 11 xyz; 6 xyz; """"""; set optking { opt_coordinates = cartesian; frozen_cartesian = $frozen_string; consecutive_backsteps = 2; geom_maxiter = 250; print_trajectory_xyz_file = True }. optimize('MP2/aug-cc-PVTZ'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344630452:91,optimiz,optimization,91,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344630452,3,['optimiz'],"['optimization', 'optimize', 'optimizing']"
Performance,"I tried my suggested fix using GCC and it didn't work. Neither did [this](https://gcc.gnu.org/onlinedocs/gcc-4.8.4/gcc/Function-Specific-Option-Pragmas.html) or [this](http://odellconnie.blogspot.com/2012/02/controlling-gcc-optimization-with.html) so I'd rather stick with zeroing out offending elements, as in this PR; portability is far more important than worrying about some arbitrary cutoff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-293473618:224,optimiz,optimization-with,224,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293473618,1,['optimiz'],['optimization-with']
Performance,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344334581:221,optimiz,optimization,221,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581,2,['optimiz'],['optimization']
Performance,"I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; 1gb of memory. Is that short enough? If so, I'll commit the change. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; wrote:. > I just removed opt10 from all ctest labels. Its still present, but will; > not run unless you specifically request it.; > ; > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > ; > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > that's what @dgasmith https://github.com/dgasmith has already done.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184413127:20,optimiz,optimization,20,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184413127,1,['optimiz'],['optimization']
Performance,I typed conda list into my Ubuntu terminal and got the following return(s):. ```; # packages in environment at /home/emkal/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_kmp_llvm conda-forge; adcc 0.15.17 py310hc6cd4ac_2 conda-forge; annotated-types 0.6.0 pyhd8ed1ab_0 conda-forge; archspec 0.2.3 pyhd8ed1ab_0 conda-forge; boltons 23.1.1 pyhd8ed1ab_0 conda-forge; brotli-python 1.1.0 py310hc6cd4ac_1 conda-forge; bzip2 1.0.8 hd590300_5 conda-forge; c-ares 1.26.0 hd590300_0 conda-forge; ca-certificates 2024.6.2 hbcca054_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; certifi 2024.6.2 pyhd8ed1ab_0 conda-forge; cffi 1.16.0 py310h2fee648_0 conda-forge; charset-normalizer 3.3.2 pyhd8ed1ab_0 conda-forge; colorama 0.4.6 pyhd8ed1ab_0 conda-forge; conda 24.5.0 py310hff52083_0 conda-forge; conda-libmamba-solver 24.1.0 pyhd8ed1ab_0 conda-forge; conda-package-handling 2.2.0 pyh38be061_0 conda-forge; conda-package-streaming 0.9.0 pyhd8ed1ab_0 conda-forge; cppe 0.3.1 py310h7c63755_9 conda-forge; dftd3-python 1.0.0 py310hdbe52f6_2 conda-forge; dftd4 3.6.0 hf49bc11_0 conda-forge; dftd4-python 3.6.0 py310hc409063_1 conda-forge; distro 1.9.0 pyhd8ed1ab_0 conda-forge; dkh 1.2 hd59d2e7_0 conda-forge; exceptiongroup 1.2.0 pyhd8ed1ab_2 conda-forge; execnet 2.0.2 pyhd8ed1ab_0 conda-forge; fmt 10.2.1 h00ab1b0_0 conda-forge; frozendict 2.4.4 py310hc51659f_0 conda-forge; gau2grid 2.0.7 h0b41bf4_2 conda-forge; gcp-correction 2.3.1 h1990efc_2 conda-forge; geometric 1.0 pyhd8ed1ab_1 conda-forge; gtest 1.14.0 h00ab1b0_1 conda-forge; h5py 3.11.0 nompi_py310hf054cd7_102 conda-forge; hdf5 1.14.3 nompi_h4f84152_100 conda-forge; icu 73.2 h59595ed_0 conda-forge; idna 3.6 pyhd8ed1ab_0 conda-forge; iniconfig 2.0.0 pyhd8ed1ab_0 conda-forge; jsonpatch 1.33 pyhd8ed1ab_0 conda-forge; jsonpointer 3.0.0 py310hff52083_0 conda-forge; keyutils 1.6.1 h166bdaf_0 conda-forge; krb5 1.21.3 h659f571_0 c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098:597,cache,cached-property,597,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195225098,1,['cache'],['cached-property']
Performance,"I usually find their packages to be of excellent quality. Which is your bug report? I remember a lightning talk, I think, at a recent SciPy about efforts to bring openblas up to snuff. Apparently even all their internal tests (or maybe it was numpy's tests) weren't passing for a long time. I agree that runtime processor detection is a build dimension to which conda has not expanded. That's why psi uses Intel compilers to add some multiarch optimizations. But why should cpu detection affect the numerical results?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709:444,optimiz,optimizations,444,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709,1,['optimiz'],['optimizations']
Performance,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:23,optimiz,optimization,23,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608,3,"['optimiz', 'perform']","['optimization', 'optimize', 'perform']"
Performance,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:79,load,loaded,79,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262,2,['load'],['loaded']
Performance,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:628,load,load,628,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544,1,['load'],['load']
Performance,"I will stick to the SCF issue and report the results once the B3LYP-D3/def2-tzvp geom opt is done. . I was noting that it seemed odd that one optimization did 50 iterations and petered out(using B3LYP/6-31G*), but upon restarting, it converged in one step. Different wavefunctions though, the SCF in the ""restart"" started from SAD guess, the 50th iteration of the first try was using previous orbitals as initial guesses, I turned off permanent SAD guess for it. In short, my apologies for muddying the water, I think just ignore, and I will report the results for the initial optimization problem once they finish. I have both `opt_coordinates both` as well as `opt_coordinates both` and `guess sad`; `guess_persist true` running.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957968163:142,optimiz,optimization,142,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957968163,2,['optimiz'],['optimization']
Performance,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:778,cache,cached,778,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169,1,['cache'],['cached']
Performance,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-250948669:459,perform,performs,459,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669,2,['perform'],['performs']
Performance,"I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:. <pre>; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.072955 0.170180; 17 -1.309315455352626 1.686e-07 0.019205 0.072955 0.072955 0.170180; 18 -1.309315454431369 8.202e-08 0.019205 0.072955 0.072955 0.170180; Iterations converged.; </pre>. Am I forgetting about some other restart keyword besides those I mentioned in my first post?. Cheers,; Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089484:123,perform,performs,123,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089484,1,['perform'],['performs']
Performance,"I'm going to update the branch and then add to merge queue, so heads-up that local != remote.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269:53,queue,queue,53,https://psicode.org,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269,1,['queue'],['queue']
Performance,"I'm hitting a similar error message with `dcft_gradient_UHF.cc` but it reports that the error is in `libmints/matrix.h`. Reducing the optimization level was the only way I could get it to compile. Even compiling with -O2 gives the error, -O1 is the only way to resolve it. I see no issue with the compiler- and file-specific flags for this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368651645:134,optimiz,optimization,134,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368651645,1,['optimiz'],['optimization']
Performance,"I'm looking for anharmonic modes of vibration of complexes. Good point on the optimization and frequency, for testing purposes I bring the level of theory down to hartree-fock just to make it go faster. On production code runs, the level of theory and basis set are consistent. . I have been playing around with both `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:78,optimiz,optimization,78,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,1,['optimiz'],['optimization']
Performance,"I'm not 100% certain my ""fix"" is not just a hack - my understanding of basis sets and contractions is rather limited. The way I understand it, we're not trusting user input and are normalising all of the normal shells, using both `self.normalise_shell()` and `self.erd_normalise_shell()`. For normal shells, the inputs are the exponent `eps` and the normalisation constant `N` in: ; `psi = N * exp (-r**2 * eps)`. For ECP's, the inputs on each line aren't the exponent + normalisation, but rather they should be the three variables (`n`, `z`, `d` columns in g09 input) in the `i`th component of the potential `v(r)`:; `v(r)_i = d_i * r**(n_i) * e**(-z_i * r**2)`; The third column (`d`, if I got the above right) is stored in `self.PYcoef` and `self.PYoriginal_coef`. If this coefficient is set to zero, the whole component of the potential should be 0 - it shouldn't be normalised. The first column `n` goes to `self.rpowers` for each shell. Finally, the `self.PYexp` contains the exponent `z`. My two questions therefore are:; - should we perform any normalisation at all (including `self.normalise_shell()`) on ECP shells? To me the answer seems no...; - I am assuming the only way to tell a shell is an ECP shell from within `ShellInfo` class is if `self.rpowers` is populated. Wouldn't it be better, if `ShellInfo` received `pt=""Normalized""` when processing an ECP shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376423459:1041,perform,perform,1041,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376423459,1,['perform'],['perform']
Performance,"I'm not sure what the problem is but this works fine, I'm happy to say :). set optking {. frozen_dihedral = ("". 5 1 2 6. 4 1 2 6. 3 1 2 6. ""). }. #optimize(""hf/3-21G""). import optking. set basis 3-21g. optking.optimize_psi4('hf'). On Fri, Jan 15, 2021 at 6:42 PM Lori A. Burns <notifications@github.com>; wrote:. > Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I; > think the trouble is in predicting the next geom step, so may be of; > interest to @psi-rking <https://github.com/psi-rking>; >; > molecule {; > 0 1; > C -0.167039 -0.712374 -0.022325; > O 0.119573 0.677072 0.056530; > H -0.453842 -0.989160 -1.036819; > H -0.997038 -0.962046 0.638968; > H 0.691232 -1.312038 0.284396; > H 0.775814 0.817745 0.757350; > }; >; > set optking {; > frozen_dihedral = (""; > 5 1 2 6; > 4 1 2 6; > 3 1 2 6; > ""); > }; > #set {; > # geom_maxiter 2; > # g_convergence GAU_LOOSE; > #}; > #memory 6GB; > #set_num_threads(6); > #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); > #for _ in range(1):; > # try:; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # break; > # else:; > # try:; > # set opt_coordinates cartesian; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # pass; > #clean(); >; > optimize(""hf/3-21G"") # segfaults; > #optimize(""hf/cc-pvdz"") # 4 iter; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2084#issuecomment-761275679>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBAEFTYTU5HYJQMMSDS2DOHPANCNFSM4WETR7OA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278:147,optimiz,optimize,147,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278,7,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,"I'm now resuming work on this. Something I had overlooked previously was that most of the memory being managed were of containers of numeric types. Lots of `int *`, `double **`, `double ***`, and so on. What's the ""right"" way to modernize those? I haven't seen smart pointers being used for this before. I'm inclined to convert to `std::vector` for things that are obviously not performance critical, but leave raw pointers otherwise. (_Especially_ for things that need to call BLAS.) Is this the right decision, or should I modernize differently?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-632730022:379,perform,performance,379,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-632730022,1,['perform'],['performance']
Performance,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893146:80,concurren,concurrent,80,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146,1,['concurren'],['concurrent']
Performance,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:431,optimiz,optimization,431,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,2,['optimiz'],['optimization']
Performance,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:65,perform,performing,65,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223,1,['perform'],['performing']
Performance,"I've just checked, and all the orbital and fitting basis sets have boron. Could you run with `set print 3`? That should trigger printing of exactly what basis sets are loaded and from where in lines like. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: STO-3G; atoms 1 entry O line 80 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; atoms 2-3 entry H line 18 file /home/dsmith/Gits/dgas_psi/share/basis/sto-3g.gbs; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-225937045:168,load,loaded,168,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225937045,2,"['Load', 'load']","['Loading', 'loaded']"
Performance,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202577523:74,optimiz,optimizations,74,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523,3,['optimiz'],"['optimizations', 'optimize', 'optimizer']"
Performance,"I've linked the Fedora package to a separately compiled libint package (also in the official Fedora repository) for which LIBINT_MAX_AM = 11, LIBINT_OPT_AM = 7, and it would seem that at least MP2 geometry optimization works with cc-pV6Z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139103808:206,optimiz,optimization,206,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139103808,1,['optimiz'],['optimization']
Performance,I've reuploaded a tarball that should have the fix. Hopefully it should work now. You may need to delete any cached versions of `simint-v0.7.tar.bz2` that you have in your build directory (or just delete your build directory and start from scratch).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-357065803:109,cache,cached,109,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-357065803,1,['cache'],['cached']
Performance,"I've run some timing tests. First, with DLPNO-MP2 on 1644 basis functions, the same job in triplicate:. | Before PR | After PR |; | --- | --- |; | 2:43:56.48 | 2:44:54.51 |; | 2:44:17.27 | 2:44:03.06 |; | 2:45:08.16 | 2:44:24.98 |. And now DF-DCT with 384 basis functions, this time in duplicate:; | Before PR | After PR |; | --- | --- |; | 1:03:58.53 | 1:03:52.70|; | 1:03:49.19 | 1:03:48.30 |. I can run additional tests if requested, but the PR has negligible impact on performance time, as expected. The PR is ready for more serious review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945:473,perform,performance,473,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945,1,['perform'],['performance']
Performance,"ILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:3846,Perform,Performing,3846,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,2,['Perform'],['Performing']
Performance,"ILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4145,Perform,Performing,4145,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,2,['Perform'],['Performing']
Performance,"Ideally, you should know what kind of basis set you're using, as you're presumably going to cite it in your work; the details about the number of core `e-`'s treated as effective potentials will be included there. There are also all-electron basis sets available for almost any element; some of them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP in the `=> Loading Basis Set <=` section, and the details are printed later on under `==> Primary Basis <==`. As for the question of 28 vs 36 electrons: the first 28 electrons are the 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell. The additional 8 electrons you're thinking about are from the 4th period shells, where the 4d10 part is in your 5th valence shell - so you don't really want to replace any of those with a potential. (At least that's my rather limited understanding.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178:382,Load,Loading,382,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412880178,1,['Load'],['Loading']
Performance,"If I am interpreting the data correctly, the new code has worse parallel scaling at high core counts if there are no external charges. (5.36 vs 4.24); And in general, the parallel scalings of the new code do not seem to follow Amdahl's law, note the drop in performance going from 8-->16 cores, then the sudden jump between 16 and 32. Even with charges, running on 16 cores only yields a 2.9x speedup, which is better than the old code, but much worse than using 8 cores.; My first guess would be either some sort of NUMA related issue, or false sharing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836:258,perform,performance,258,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656047836,1,['perform'],['performance']
Performance,"If I do a Yahoo search, I get redirected if I click the link to; www.psicode.org (top hit), www.psicode.org/labs.php (2nd hit), or; github.com/psi4/psi4 (3rd hit). It is really weird that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:849,load,loaded,849,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['loaded']
Performance,"If I guessed correctly, you're trying to go beyond simple electrostatic embedding, and compute the forces on the MM atoms due to the QM region? If that's the case, we don't currently support that directly (the QM/MM code is under active development and is quite experimental at this point). However, something like this _should_ get you what you need:; ```; molecule mol {; O 0.0000 0.0000 -0.0657; H -0.7590 0.0000 0.5219; H 0.7590 0.0000 0.5219; no_reorient; no_com; symmetry c1; }. # The mm charges, and positions; mm_qxyz = [; [ 1.3, 4.0, -5.3, 4.1],; [ 1.3, 4.0, 5.3, 4.1],; [-1.8,-3.2, 4.3,-3.3]; ]. Chrgfield = psi4.QMMM(); with open('grid.dat', 'w') as fp:; for qxyz in mm_qxyz:; Chrgfield.extern.addCharge(*qxyz); fp.write(""{} {} {}\n"".format(*qxyz[1:])). psi4.set_global_option_python('EXTERN', Chrgfield.extern). # Compute the energy with electrostatic embedding; e, wfn = psi4.energy('hf/dz', return_wfn=True). # Use the grid.dat file created above to define the mm positions at which we want; # to compute the electric field.; results are in grid_field.dat; oeprop(wfn, 'GRID_FIELD'). # Read in the fields that oeprop computed, and scale by each charge to get the force; fields = np.loadtxt('grid_field.dat'); mm_forces = np.zeros_like(fields); for atom, field in enumerate(fields):; q = mm_qxyz[atom][0]; mm_forces[atom,:] = q * field; print(mm_forces); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699:1196,load,loadtxt,1196,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879102699,1,['load'],['loadtxt']
Performance,"If I have time this weekend, I'm going to try making a small little pair of Python extension modules that are each linked to a separate copy of MKL and see if I can reproduce anything like this. I _think_ that must be the relevant difference between my test and yours. Weirdness about two simultaneous copies of BLAS libraries being loaded + threads seems to be involved in #748 as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312399904:333,load,loaded,333,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312399904,1,['load'],['loaded']
Performance,"If I'm remembering where I left off and performing the diffs correctly, there's no more changes to be made to those 4 array/tensor files in the dfocc saga. And none of the yet-to-be-PRd code uses `davidson`, `cdsyev`, `cdgesv`, `lineq_flin`, or `lineq_pople`. There is new code with `diagonalize`, though, listed below. If the changes in this PR don't interfere with the calls below, or we can work around them, I think we can release the hold and merge this. Thanks for your patience, @TiborGY. ```; # HciA is Tensor2d (or sharedptr to it); cis.cc: HciA->diagonalize(CciA, EciA, cutoff);. # G is Tensor2d; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);. # Gamma* and Fock* are Tensor2d; fno.cc: Gamma_->diagonalize(Tvv_, diag_n_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: GammaA_->diagonalize(TvvA_, diag_nA_, cutoff_, false);; fno.cc: GammaB_->diagonalize(TvvB_, diag_nB_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: FockfvB->diagonalize(UfvB, eigfvB, cutoff_);; fno.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff_);. # a_opdm, etc. are Matrix; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: b_opdm->diagonalize(bevecs, bevals, descending);. # FockooA, etc. are Tensor2d; semi_canonic.cc: FockooA->diagonalize(UooA, eigooA, cutoff);; semi_canonic.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff);; semi_canonic.cc: FockooB->diagonalize(UooB, eigooB, cutoff);; semi_canonic.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138:40,perform,performing,40,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138,1,['perform'],['performing']
Performance,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:94,optimiz,optimize-function-cbs-extrapolation-and-cfour,94,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062,1,['optimiz'],['optimize-function-cbs-extrapolation-and-cfour']
Performance,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343300716:396,CACHE,CACHE,396,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716,1,['CACHE'],['CACHE']
Performance,"If it's generated code, would something like the libint ExternalProject w/i ExternalProject work? Or is it processor-tuned generated code? But we should probably just talk in person someday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533#issuecomment-263735026:117,tune,tuned,117,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-263735026,1,['tune'],['tuned']
Performance,"If psi4 calls OpenBLAS from several concurrent threads, even with OpenMP you may be running into a problem that was (hopefully) fixed only two weeks ago on the ""develop"" branch. (https://github.com/xianyi/OpenBLAS/pull/1536).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391028478:36,concurren,concurrent,36,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391028478,1,['concurren'],['concurrent']
Performance,"If the table from @loriab is how the program is behaving, then yes, it would seem to be ok if optimize() defaulted to return_total_data True. However, shouldn't we also make this the default behavior with gradient(), just in case anyone did call it with cp? (or is that somehow not possible)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869935780:94,optimiz,optimize,94,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869935780,1,['optimiz'],['optimize']
Performance,"If this is only affecting CC wfn's then a full deep copy could be avoided. Instead, just deep copy the density in `ccdensity` before overwriting with the correlated density. . Note that the signature `psi::ccdensity::ccdensity(std::shared_ptr<Wavefunction> ref_wfn,...)` is misleading because at this point that function is passed the `psi::ccenergy::CCEnergyWavefunction`. That should work for a short term fix, however I agree that we have to come up with a better way to cache the SCF wavefunction quantities long term.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318:474,cache,cache,474,https://psicode.org,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318,1,['cache'],['cache']
Performance,"If we don't print the number of implied core electrons in the output; somewhere when using an ECP basis, it wouldn't be a bad idea to do so. On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; wrote:. > Ideally, you should know what kind of basis set you're using, as you're; > presumably going to cite it in your work; the details about the number of; > core e-'s treated as effective potentials will be included there. There; > are also all-electron basis sets available for almost any element; some of; > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an ECP; > in the => Loading Basis Set <= section, and the details are printed later; > on under ==> Primary Basis <==.; >; > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > The additional 8 electrons you're thinking about are from the 4th period; > shells, where the 4d10 part is in your 5th valence shell - so you don't; > really want to replace any of those with a potential. (At least that's my; > rather limited understanding.); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311:617,Load,Loading,617,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412881311,1,['Load'],['Loading']
Performance,"If you do end up working on it, we would love to incorporate your codes; however, for the time being we are going to close this issue as our resident SAPT code expert will not have a chance to improve the load balancing anytime soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-170066558:205,load,load,205,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-170066558,1,['load'],['load']
Performance,"In case anybody needs to refer back to this: the cause of the bug was that in one of the two ways of computing the energy, the SCF energy was added rather than the reference energy. These are different things in orbital optimized methods and afflicted all OMP2.5 and OMP3 computations. It was fixed by [this commit](https://github.com/psi4/psi4/pull/1772/commits/118f1967d348ec58265b6d3bb12b935730b5b8a6).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592:220,optimiz,optimized,220,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-571322592,1,['optimiz'],['optimized']
Performance,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-183702993:152,optimiz,optimized,152,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993,2,['optimiz'],"['optimize', 'optimized']"
Performance,"In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828:719,optimiz,optimizers,719,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828,2,['optimiz'],['optimizers']
Performance,"In general, I don't think this is broken for all Wavefunctions. It appears the specific issue is CCSD at the moment. Short term this can be fixed by creating deep copying the reference function rather than shallow copy. However, there is some thought that we would remove this entirely and we can cache the SCF wavefunction in other ways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1478#issuecomment-454804317:297,cache,cache,297,https://psicode.org,https://github.com/psi4/psi4/issues/1478#issuecomment-454804317,1,['cache'],['cache']
Performance,"In hindsight, I should have noticed this earlier:; OPTKING numbers atoms starting from 1, so the value in your options dict should be `1 2`, not `0 1`. Due to how the optimizer works, it will treat `1 2` and `1 3` as symmetry equivalent, so for actual code, you would need to manually specify Cs symmetry if you really wanted to fix only one bond. When I run the optimization with that change, it works just fine. I'm guessing that OPTKING doesn't know how to handle a request to process ""atom 0,"" which leads us to the choose-your-own-error-message adventure. This is definitely not the most graceful way to handle an invalid atom request, but I'll leave it to the core devs to decide what fix would be most appropriate, since OPTKING is scheduled to be replaced soon anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385130211:167,optimiz,optimizer,167,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385130211,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"Initial testing looks good– db2 and freq-e-sowreap pass for me, too. I just checked in minor tweaks (de024f86f0f978029cb2acaae5469636a3ecf6ab) for printing and so that `reap.py` can catch OPT file names, too. The problem with opt-sowreap that you quoted above is now fixed. Unfortunately, optimizations need multiple sow/reap passes (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-opt-sowreap/Makefile.in). If you hardwire `first_out = 'OPT-master.in'` in `reap.py` (otherwise it's looking for instructions in the wrong file), the job makes it through the first optimization cycle, so that's an improvement, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157884587:289,optimiz,optimizations,289,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157884587,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"Is the ""it"" you're trying the original input file you posted, or the one that Lori posted?. Your input file may or may not demonstrate the problem. Noise in the energy single points leads to noise in the computed gradient leads to noise in the optimization step leads to noise in whether or not you get a problematic geometry. Lori's input file should reproduce the bug 100% of the time. I've been exploring Psi's symmetry handling for an unrelated issue, and it looks like Psi's symmetry detection assumes the symmetry operations can be oriented along the x-, y-, z- axes. I'm not surprised to see problems with symmetry detection if you don't let Psi center-of-mass-adjust the molecule. The symmetry elements would need to be translated in space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442804174:244,optimiz,optimization,244,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442804174,1,['optimiz'],['optimization']
Performance,Is there a performance benefit over running the program in the command line? Nuclear forces / hessians i/o is inconsequential compared to the quantum chemistry part. Any savings would come from reusing checkpoint information for the Fock / density matrices... right?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584:11,perform,performance,11,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615084584,1,['perform'],['performance']
Performance,Is there a performance handicap in using `0.0`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783069692:11,perform,performance,11,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783069692,1,['perform'],['performance']
Performance,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:284,load,loading,284,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,1,['load'],['loading']
Performance,"It [looks like](https://pubs.acs.org/doi/pdf/10.1021/jp9802432) the MP2 part should have the core correlated (even though the basis set is ill suited to describing the core), with the single point energy being performed with a frozen core. If that's prescribed by the method, setting the `freeze_core` keyword doesn't really make sense. Perhaps we can catch if it's been set and print an error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339:210,perform,performed,210,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462816339,1,['perform'],['performed']
Performance,"It can a bit, Psi's startup time is ~0.4 seconds or so with all of Python loading in. In general QC will dwarf this time so it isn't much of an issue. Your right though with XTB and DFTB it gets more interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615224465:74,load,loading,74,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615224465,1,['load'],['loading']
Performance,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182597595:26,optimiz,optimization,26,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595,2,['optimiz'],['optimization']
Performance,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:42,optimiz,optimization,42,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['optimiz'],['optimization']
Performance,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:277,optimiz,optimization,277,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,1,['optimiz'],['optimization']
Performance,"It is printed... I know which basis set I use, but would just like upfront; to make my chargemol job-control file ready for my basis set choise. Thank; you all!. On Tue, 14 Aug 2018, 15.59 David Sherrill, <notifications@github.com> wrote:. > If we don't print the number of implied core electrons in the output; > somewhere when using an ECP basis, it wouldn't be a bad idea to do so.; >; > On Tue, Aug 14, 2018 at 9:56 AM Peter Kraus <notifications@github.com>; > wrote:; >; > > Ideally, you should know what kind of basis set you're using, as you're; > > presumably going to cite it in your work; the details about the number of; > > core e-'s treated as effective potentials will be included there. There; > > are also all-electron basis sets available for almost any element; some; > of; > > them are shipped with Psi4 (eg. 3-21g). Psi4 tells you the basis has an; > ECP; > > in the => Loading Basis Set <= section, and the details are printed later; > > on under ==> Primary Basis <==.; > >; > > As for the question of 28 vs 36 electrons: the first 28 electrons are the; > > 1s2 + 2s2, 2p6 + 3s2, 3p6, 3d10 shells - ie. full 1st, 2nd and 3rd shell.; > > The additional 8 electrons you're thinking about are from the 4th period; > > shells, where the 4d10 part is in your 5th valence shell - so you don't; > > really want to replace any of those with a potential. (At least that's my; > > rather limited understanding.); > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/1113#issuecomment-412880178>, or; > mute; > > the thread; > > <; > https://github.com/notifications/unsubscribe-auth/AC9Qdo2cyTQSSl9yOfKzl_lCPspYyi6jks5uQtbpgaJpZM4VoV4l; > >; > > .; > >; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1113#issuecomment-412881311>, or mute; > the thread; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315:890,Load,Loading,890,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412883315,1,['Load'],['Loading']
Performance,"It looks like an interesting optimization problem, and a memory error. I; will take a detailed look at it when I get back from vacation next week. On Thu, Jul 30, 2015 at 8:11 AM, Lori A. Burns notifications@github.com; wrote:. > Yes, I agree it looks messed up. Added the further info in last post for; > @psi-rking https://github.com/psi-rking; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-126342063.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-126509903:29,optimiz,optimization,29,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126509903,1,['optimiz'],['optimization']
Performance,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:49,optimiz,optimized,49,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,3,"['optimiz', 'perform']","['optimization', 'optimized', 'performance']"
Performance,"It seems that were it counts the correct python is used. Main CMake; ```; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:761,Perform,Performing,761,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Perform'],['Performing']
Performance,"It shouldn't: the JK object and HF object should have similar performance. I haven't benchmarked at all, but this is needed for DFT hessians",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856:62,perform,performance,62,https://psicode.org,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856,1,['perform'],['performance']
Performance,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343303520:149,CACHE,CACHE,149,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520,2,"['CACHE', 'cache']","['CACHE', 'cache']"
Performance,"It took me getting flu to find the time to look into this, and here's my initial finding. If I optimize the geometry and dump it into an input file; ```; molecule h2o {; O 0.000000000000 -0.000000000000 0.063771204693; H -0.000000000000 0.748825894352 -0.506047648051; H 0.000000000000 -0.748825894352 -0.506047648051; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; I get ; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.945 2519.217; 2 4142.103 5959.555; 3 4237.372 6096.625; ```; If I permute the first two rows of the geometry, per the bug report, I get:; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; This is clearly wrong, but it does at least mean that the hessian code is for the most part correct. I'm trying to figure out where the atom and/or basis function ordering issue is introduced and hope to have a patch soon. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901#issuecomment-360894371:95,optimiz,optimize,95,https://psicode.org,https://github.com/psi4/psi4/issues/901#issuecomment-360894371,1,['optimiz'],['optimize']
Performance,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-335970314:196,load,loaded,196,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314,1,['load'],['loaded']
Performance,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:543,Optimiz,Optimization,543,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,2,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:377,optimiz,optimizer,377,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821,3,['optimiz'],"['optimize', 'optimizer']"
Performance,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:317,load,loading,317,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624,1,['load'],['loading']
Performance,"Just watching Travis it looks like we get a mix of old and new nodes with a variety of computational loads. I kind of would like to do Python 3.5 across the board and then say gcc 4.9, Python 2.7. So that we can isolate between Python errors and compiler errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-259569411:101,load,loads,101,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259569411,1,['load'],['loads']
Performance,"Keep in mind that the optimizer (at least this one!) is not trying to; overcome any barriers except possibly one in the 'fixed coordinate'; direction. It's not an IRC computation or a global search. It's trying to; go downhill in all other directions, and it is subject to all the strange; behavior (discontinuities, etc.) present in scans by constrained; optimizations. If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. On Thu, Mar 23, 2017 at 7:25 PM, Andy Simmonett <notifications@github.com>; wrote:. > This <https://github.com/psi4/psi4/files/866534/torsion.pdf> is the sort; > of geometry I get, which is very reasonable looking. If you compare the; > 'good' and 'bad' geometries, is the different in the orientation of the; > methyl hydrogens? If so, it's likely that your starting guess has them; > oriented with steric clashes, but the barrier to rotation is too high for; > the optimizer to be able to overcome.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/647#issuecomment-288899587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTEGE7UVrDtnMjCBGDwRX1AuB-aYZks5row2IgaJpZM4Mbq9X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288900538:22,optimiz,optimizer,22,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288900538,4,['optimiz'],"['optimization', 'optimizations', 'optimizer']"
Performance,Left it overnight and still same place with full cpu load. Started H by G and yes finished soon after...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1145#issuecomment-414829587:53,load,load,53,https://psicode.org,https://github.com/psi4/psi4/issues/1145#issuecomment-414829587,1,['load'],['load']
Performance,"Let me be more explicit about why I find the ""multi-fragment optimizations"" section confusing. * The first sentence talks about ""the metric for connecting atoms"" without explaining what ""connecting atoms"" means. Even worse, the first sentence is not obviously about dimers.; * It isn't clear to me what a ""reference point"" signifies. While I can tell whether something is an acceptable reference point, what are these used for? It looks like these are atoms used to define intermolecular internal coordinates.; * I don't know what it means to talk about a linear combination of atoms, or how to interpret `[[3], [1], [2]], [[1, 2, 3, 4, 5, 6], [2], [6]]` in your first example. The third point is crucial - I can't follow your examples. I won't insist on a figure, but I do insist on examples I can understand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335924107:61,optimiz,optimizations,61,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335924107,1,['optimiz'],['optimizations']
Performance,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307915395:45,optimiz,optimization,45,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395,1,['optimiz'],['optimization']
Performance,Looks good to me. I'll let someone else perform the actual merge after they look it over again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444628214:40,perform,perform,40,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444628214,1,['perform'],['perform']
Performance,"Looks ok. > Regarding the frequency calculations, will the results be affected by a lower level of theory Hessian in the beginning? Or will the final results still be of desired level of theory?. The final results are not affected by the lower theory Hessian[*].; In fact, the default initial Hessian is based on an extremely simple force-field so a DFT hessian is certainly an improvement. :-). [* For most practical purposes. For large and flexible molecules with many close-lying minima one could, in principle, find different minima with different settings for the optimizer.]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778:569,optimiz,optimizer,569,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778,1,['optimiz'],['optimizer']
Performance,Many thanks to @JonathonMisiewicz and some very diligent forum members for pointing out the performance problem :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1805#issuecomment-583022833:92,perform,performance,92,https://psicode.org,https://github.com/psi4/psi4/pull/1805#issuecomment-583022833,1,['perform'],['performance']
Performance,"Many thanx Ugur, all works fine but sum of orbitals occupation in molden file is twice of electrons in RHF case.; Is there any plans to implement ""molden_write"" in Orbital optimized DCFT case?. Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152722428:172,optimiz,optimized,172,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152722428,1,['optimiz'],['optimized']
Performance,"Most repo's use travis CI as a full testing suite, which is great if your code is relatively light. However, Psi4 is a bit heavy for something like travis and a full build matrix could take days on a free account (assuming they don't send us a polite email). What I would like to see is a very light travis that does 5 builds (the maximum concurrent instances for a free travis account) with an option through Docker that will do full builds on local boxes. What this gives us is a cursory check in about an hour to make sure everything is going well before we either devote the resources for a full check or decide the change is trivial enough to not worry about (documentation, test suite additions, etc). Just would like to add that if we use travis, you basically _must_ let all test cases pass before merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182581290:339,concurren,concurrent,339,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182581290,1,['concurren'],['concurrent']
Performance,"Mostly. Holger also was unconvinced the `nan` checks were performance-negligible, so I need to check that as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1179307181:58,perform,performance-negligible,58,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1179307181,1,['perform'],['performance-negligible']
Performance,"Moving the finite-difference code into Python seems like a good idea. I'm sure it could be much cleaner. For geometry optimization purposes, one only ever really needs cartesian Hessian -> internal coordinate Hessian. This capability is in the C++ and also now in the Python optking - including the gradient.derivative B term (with the derivative-B matrix elements computed analytically). I think that the challenge I ran into (long ago) in the referenced commented-out code in generating a cartesian Hessian using a finite-difference derivative B matrix for this term was in the Sayvetz/Eckart conditions. The rotations/translations are projected out (now by cdsalc) for the original, undisplaced geometry - but then will not be exactly so at the displaced geometries. I don't recall if my motivation for using finite-difference derivative-B elements at the time was for reduced computational expense, because the analytic derivative-B elements were not yet coded, or to try to avoid discontinuity problems in the derivative formulas. The f-d option might be a good capability to have; I'm not sure offhand if it is worth doing. On the coordinate transformation of course Wesley Allen is the guru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-352449546:118,optimiz,optimization,118,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-352449546,1,['optimiz'],['optimization']
Performance,"My compilations pass the ion-test, but I too get no psiapi speedup. But after using (another) of my openblas binaries for a bit I am not exactly happy. The FNO-DF-CCSD iterations do not seem to thread correctly, or very poorly. (visually checking with `top`). The conda `1.2rc2` binary I just tried is sooo much faster and puts good load on all 16 cores. At this point I don't feel like pursuing an OpenBLAS solution anymore. Maybe if our lab buys AMD servers...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390898246:333,load,load,333,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390898246,1,['load'],['load']
Performance,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178826938:40,load,loads,40,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938,1,['load'],['loads']
Performance,"My guess is that the performance would be better with fewer threads, since too much parallellization can hurt performance. The 50 Hartree difference in energy suggests that the compilation on Summit is not good. Did you run the Psi4 test suite?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965:21,perform,performance,21,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2367489965,2,['perform'],['performance']
Performance,"My guess is that you are only allowing contributions when both basis functions are on the same center which removes the density where basis functions are on different centers. ```; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""cc-pVDZ"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-14}). method = ""PBE""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()); Ca = np.array(wfn.Ca()). # Grab objects; basis = wfn.basisset(); Vpot = wfn.V_potential(); points_func = Vpot.properties()[0]. center = 2. for center in range(3):; # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()); nlocal_basis = lpos.shape[0]. oncenter = np.array([basis.function_to_center(x) == center for x in lpos]); lpos = lpos[oncenter]. # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :nlocal_basis]; phi = phi[:, oncenter]. # Build a local density; localDa = Da[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(center, nelectrons); ```. ```; 0 7.59001168019781; 1 0.5717653447775689; 2 0.5717641193430182; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963:1467,optimiz,optimize,1467,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436430963,1,['optimiz'],['optimize']
Performance,"My input file basically just has the molecule definition and then:. ```; dih_string = ""17 4 2 5 0.001""; set optking fixed_dihedral = $dih_string. optimize('B3LYP/3-21G'); ```. ...so I don't think it should be doing anything fancy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347905172:146,optimiz,optimize,146,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347905172,1,['optimiz'],['optimize']
Performance,"NTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1077,load,loaded,1077,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['load'],['loaded']
Performance,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271932154:412,cache,cache,412,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154,16,"['CACHE', 'cache']","['CACHE', 'cache']"
Performance,"No errors building with ambit enabled when I add those two lines to external/upstream/ambit/CMakeLists.txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/down",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:339,Perform,Performing,339,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"No transition-state optimization algorithm always converges to the desired TS. This case is so expensive it is unwieldy to debug. I wonder what the issue is to be solved here. Is there a TS nearby to the input geometry, and is it known to be in Cs symmetry?. If the P-RFO eigenvector is asymmetric, do we want to follow it or not? If yes, then there is clearly a geometry symmetrization that will have to be omitted. If no, then it is hard to see how the algorithm could choose the best, nearest TS in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203056297:20,optimiz,optimization,20,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203056297,1,['optimiz'],['optimization']
Performance,"No, I have to refactor the code such that the PE stuff is Python-side only (see ToDo list above).; In the meantime, I'll hopefully a) have a first ""release"" of `cppe` ready that can be pinned in the `ExternalProject` and b) have the PR with performance improvements for electric field integrals done. Is there a deadline for the Psi4 1.4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769:241,perform,performance,241,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769,1,['perform'],['performance']
Performance,"No, guess=read is specifically disabled https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L451 . As to how to run the calc, there's ways to deposit and collect scratch files in a qcng.compute run, and that could be done with the npy file and the optimize() fn or the optking qcng procedure. Ultimately, the optking qcng procedure should set the orbitals protocol so that it collects orbitals from gradients and can reseed them for the next gradient. The barrier to that right now is that psi4 can write the QCSchema Wavefunction, but it can't reinitialize a psi4.Wfn from it. (It's a BasisSet coeff issue I noticed last summer but haven't been able to follow up on.). So this input is something we don't want to prevent, but it would need some hacking at the present, and it might hit some other problem along the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037:274,optimiz,optimize,274,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870754037,1,['optimiz'],['optimize']
Performance,"Not sure whether the group concerned are still working on this. I haven't looked at this since. However, I do remember it isn't IO as we took it through Darshan which is an IO profiler.; It did have a feel of load balancing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-122122695:209,load,load,209,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-122122695,1,['load'],['load']
Performance,"Not that I can tell. It's key to note that it did not re-use the T2 amplitudes, as those are far more important in the correlation procedure. I'm sorry for the trouble, but restarts are one of the trickiest parts of the code because, if not done correctly, they can make the convergence even slower. ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 8, 2013, at 11:20 AM, sbart76 notifications@github.com wrote:. > I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:; > ; > ```; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; > 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; > 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; > 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; > 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; > 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; > 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; > 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; > 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; > 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; > 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; > 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; > 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; > 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; > 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; > 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.07295",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-30089575:560,perform,performs,560,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089575,1,['perform'],['performs']
Performance,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235927654:140,tune,tuned,140,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654,1,['tune'],['tuned']
Performance,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:14,Optimiz,Optimizations,14,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,2,"['Optimiz', 'optimiz']","['Optimizations', 'optimizations']"
Performance,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:25,optimiz,optimized,25,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000,2,"['Queue', 'optimiz']","['Queue', 'optimized']"
Performance,"OK I've checked both energies and gradients. The returned quantities are what they should be, but the number of calcs was not - but it is with #2221. I am attaching the results below:. cmd | bsse_type | return_total_data | should perform | 1.4a2.dev923 | master + #2221; ---- | ---- | ---- | ---- | ---- | ---- |; energy | cp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp | false (default) | 3 ene, return CP IE | **5** | **3** |; energy | nocp | true | 3 ene, return tot E | 3 | 3 |; energy | nocp | false (default) | 3 ene, return IE | 3 | 3; energy | cp, nocp | true | 5 ene, return CP tot | 5 | 5 |; energy | cp, nocp | false (default) | 5 ene, return CP IE | 5 | 5 |; gradient | cp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp | false (default) | 3 grad, return CP IE G | **5** | **3** |; gradient | nocp | true | 3 grad, return tot G | 3 | 3 |; gradient | nocp | false (default) | 3 grad, return IE G | 3 | 3 |; gradient | cp, uncp | true | 5 grad, return CP tot G | 5 | 5 |; gradient | cp, uncp | false (default) | 5 grad, return CP IE G | 5 | 5 |. I am in favour of switching the default `return_total_data` from `False` to `True` when gradients or Hessians are requested from `nbody_gufunc`. I've checked that this also correctly propagates to finite difference gradients, meaning that:. ```; gradient( ..., return_total_data = True); gradient( ..., return_total_data = True, dertype = 0); gradient( ..., ); gradient( ..., dertype = 0); ```. all return the gradient of the total energy (CP-corrected, if requested). The interaction energy gradient can be asked for using `return_total_data = False`, and works also for `dertype=0`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772:230,perform,perform,230,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870398772,1,['perform'],['perform']
Performance,"OK, now it's; ```; DFHelper Memory: AOs need 4.030 GiB; user supplied 4.030 GiB. Using in-core AOs.; Cached 50.0% of DFT collocation blocks in 6.225 [GiB].; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1819#issuecomment-593636343:101,Cache,Cached,101,https://psicode.org,https://github.com/psi4/psi4/issues/1819#issuecomment-593636343,1,['Cache'],['Cached']
Performance,"OK, the results are here:. ```; missing = ['B1WC', 'B2GPPLYP', 'B2PLYP', 'B3LYPs', 'B86B95', 'B86BPBE', ; 'B96B95', 'B97-1p', 'B97-GGA1', 'BHandH', 'BHandHLYP', 'CAMY-B3LYP', ; 'CAMY-BLYP', 'CAP0', 'CORE-DSD-BLYP', 'DSD-BLYP', 'DSD-PBEB95', 'DSD-PBEP86', ; 'DSD-PBEPBE', 'HCTH407P', 'HCTHP14', 'HF', 'HJS-B97X', 'HJS-PBE', 'HJS-PBE-SOL',; 'HPBEINT', 'HSE03', 'HSE06', 'KSDT', 'KT2', 'LCY-BLYP', 'LCY-PBE', 'LRC-WPBE', ; 'MB3LYP-RC04', 'MN15', 'MOHLYP', 'MOHLYP2', 'OP-PBE', 'PBE0-13', 'PBE0-2', ; 'PBE0-DH', 'PBE1W', 'PBELYP1W', 'PTPSS', 'PW86B95', 'PW86PBE', 'PWPB95', ; 'RPBE', 'SB98-1a', 'SB98-1b', 'SB98-1c', 'SB98-2a', 'SB98-2b', 'SB98-2c', 'SVWN', ; 'TETER93', 'TH-FC', 'TH-FCFO', 'TH-FCO', 'TH-FL', 'TH1', 'TH2', 'TH3', 'TH4', ; 'TPSSLYP1W', 'TUNED-CAM-B3LYP', 'XLYP', 'ZLP', ; 'mPW1PW', 'mPW3LYP', 'mPW3PW', 'mPWLYP1', 'mPWLYP1M', ; 'mPWLYP1W', 'mPWPW', 'revB3LYP', 'wPBE', 'wPBE0', ""X1B95"", ""XB1K""]. skip = [""HCTHP76"", # scf fail; ""HJS-B88"", # C_DSYEV failed; ""FT97"", # C_DSYEV failed; ]; ```. The ""missing"" field are all non-dispersion corrected functionals currently in Psi4 master without a reference value. The ones in the ""skip"" array fail to run. I can not do much about some of them, as I don't have access to many other QC packages. The good part is, that with the exception of SOGGA (which fails against old Psi4), all other functionals currently pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424428280:750,TUNE,TUNED-CAM-,750,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424428280,1,['TUNE'],['TUNED-CAM-']
Performance,"OK... I managed to get gpu_dfcc built as a separate tree using gcc/g++ 5.5.0 by adding; `-DCMAKE_PREFIX_PATH` (pointing at `psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK`); and; `-DOpenMP_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin` ; to the do-configure script. (I'm not sure how that would translate into building it within the psi4 build.). gcc/g++-4.9 gave me compile errors about missing symbols and gcc/g++-6 triggers a known bug with the version of CUDA I have on Debian (9.1.85). (If I had gcc/g++-6 installed and told it to use 4.9, cmake still tried to pull in a load of headers from V6!). It's built, installed into my installed psi4 tree and the gpu_dfcc test jobs run happily with reasonable looking bits about the GPU in the output file. I suspect I'll need to try a bigger job to see what it's really doing, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333:631,load,load,631,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333,1,['load'],['load']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8246,optimiz,optimized,8246,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13904,optimiz,optimized,13904,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15234,optimiz,optimized,15234,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24188,optimiz,optimized,24188,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16564,optimiz,optimized,16564,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21462,optimiz,optimized,21462,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Of all the possible explanations I can think of, that makes the most sense to me. Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications? That might be interesting to see. It's a shame that most of the information regarding the performance of these machines is almost entirely in the context of non-scientific computing workloads.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956518612:246,perform,performance,246,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956518612,2,['perform'],['performance']
Performance,"Oh since I mentioned gradients in the title. When I was running some optimizations, gradient behavior did match that of the energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068:69,optimiz,optimizations,69,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068,1,['optimiz'],['optimizations']
Performance,"Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. If true, numpy is really calling the system BLAS instead of MKL, and perhaps the instability resides in there? Is there a way we can link psi4 to MKL in the conda build, to test this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311736829:62,load,loading,62,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311736829,1,['load'],['loading']
Performance,"Ok so I think we are reading garbage from `PSIDATADIR/quadratures/1_x/R_avail.bin`:. On amd64 (my notebook):. ```; 588	 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590	 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $8 = 2; ```. And on s390x:. ```; 588 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $21 = 3.1620201333839779e-322; ```. Not sure how this results in the exception (`indR` is optimized out), but there surely is a problem here. Is there anything odd with the way it is reading that? This looks a bit fragile to me:. ```; R_avail_file.read((char *)R_availp, nR * sizeof(double));; ```. OK, I guess the problem is that we are reading binary data, but there's no provision for big/little endian conversion, so it just gets garbage on other-endian architectures. Those two `*.bin` files in `quadratures/` are rather small, couldn't they be converted to text or what is their purpose?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801:582,optimiz,optimized,582,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801,1,['optimiz'],['optimized']
Performance,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-38125711:497,optimiz,optimization,497,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711,1,['optimiz'],['optimization']
Performance,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249699749:880,load,load,880,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749,1,['load'],['load']
Performance,"Ok, I didn't get the redirect on Chrome until I cleared the cache, but now it works nicely. Firefox, too. I think redirect 'latest' as well as 'master', then that bullet's done, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121372040:60,cache,cache,60,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121372040,1,['cache'],['cache']
Performance,"Ok, I think I understand things better now.; * pre #2377, the windows build seemed to be getting `-march=native`. clang-cl does seem to understand `march` (https://reviews.llvm.org/D51806) so it accepts the flag. But it probably doesn't understand `native` (https://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20150629/132028.html). Also see quote below from https://stackoverflow.com/a/62493711 . So we were probably getting lucky about building on AVX and supposedly fixing the Win conda binary compatibility problem. > And nothing in MSVC has any support for making binaries optimized to run on the computer you build them on. That makes sense, it's designed for a closed-source binary-distribution model of software development. * nevertheless, from an independent compile someone reported on the forum Win compatibility thread, it does seem that arch AVX, not AVX2, is the solution.; * enter #2377 that probably only changed the situation to me reading the code, not at all to the build product since the `ENABLE_XHOST` was picking up `march=native`.; * me adding `-DCMAKE_CXX_FLAGS=/arch:AVX` in the first commit of this PR led to the unused arg warning below (after also turning on printing for Ninja). I now believe the warning was triggered because clang-cl recognizes march (quote below from link above), doesn't act on it, but does drop arch. At one point, I thought the unused flag was because it was presented in the wrong format, but a section in the clang-cl manual gives a list, and arch is fine (https://clang.llvm.org/docs/UsersManual.html#clang-cl).; > Yes, indeed. The code in clang/lib/Driver/ToolChains/Arch/X86.cpp makes that –march is always parsed, leaving out /arch unused, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:583,optimiz,optimized,583,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['optimiz'],['optimized']
Performance,"Ok, I think this all goes back to the physconst update that introduced a discontinuity in the reference for two points: (wait for full load and jump) https://github.com/psi4/psi4/commit/64ea27fc1afc8fbcaf87eb03304eb8b40e99bf23#diff-4fd9a0a7922adf8bb30dbcc1278ab5d0R12 and following line (6.2 and 6.3 occ). Going to reset the reference unless @robparrish says nay. Also going to set non-zero for 6.5 occ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129#issuecomment-123487770:135,load,load,135,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-123487770,1,['load'],['load']
Performance,"Ok, I've had a chance to poke around a bit and I have found that I can reproduce the issue on an E5-2680 v3 chip, so your hunch that this affects all Haswells is likely correct. I found that putting `#pragma optimize("""", off )` immediately before `OrientationMgr::OrientationMgr(std::shared_ptr<Molecule> mol)` on 3389 and `#pragma optimize("""", on ) ` after that function on line 3418 fixes the issue. I have a very slight preference for this approach because it's unambiguous, but I'm also fine to go with zeroing offending elements out. Thoughts anybody? Either way, this is a very important fix, and we should either merge the current PR or my proposed solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-293376301:208,optimiz,optimize,208,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293376301,2,['optimiz'],['optimize']
Performance,"Ok, it looks like I didn't read the manual closely enough; the behavior is described on the 'Geometry Optimization' page. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947#issuecomment-655841373:102,Optimiz,Optimization,102,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655841373,1,['Optimiz'],['Optimization']
Performance,"Ok, so in the `ijij` case I see this difference between s390 and amd64 when parsing the third character, also note the different length and content of `labels`:. amd64:. ```; Breakpoint 3, get_combined_dims_view (labels=0x7fffffffcd20 ""ij\376\376"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114	 int label = (signed char)labels[idim];; (gdb) n; 2116	 if (label < 0) {; (gdb) p label; $43 = -2; (gdb) p idim; $44 = 3; (gdb) p labels[idim]; $45 = -2 '\376'; (gdb) p labels; $46 = 0x7fffffffcd20 ""ij\376\376""; ```. s390x:. ```; Breakpoint 7, get_combined_dims_view (labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114 int label = (signed char)labels[idim];; (gdb) n; 2116 if (label < 0) {; (gdb) p label; $278 = -1; (gdb) p idim; $279 = 3; (gdb) p labels[idim]; $280 = 255 '\377'; (gdb) p labels ; $281 = 0x3ffffffcdf8 ""ij\376\377\375\377\061\340""; ```. If I then go on on s390 by mangling the `label` variable, it exits fine. ```; (gdb) set variable label = -2; (gdb) c; Continuing.; 47.048397425357216; [Inferior 1 (process 26977) exited normally]; ```. So I guess the `int label = (signed char)labels[idim];` is to fault here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263:260,optimiz,optimized,260,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263,2,['optimiz'],['optimized']
Performance,"Ok, the only non-invasive way I see around this is the below in the main CM file (change primary language as needed):. ```; if(CMAKE_CXX_COMPILER_ID MATCHES Intel); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); else(); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-march=native"" ""-xHost"" ""/arch:AVX2""); endif(); ```. For Intel, `-march=native` might be a near approximation to `-xHost`, but I'd rather use the latter official flag.; Do you want to try this out for Libxc, @susilehtola?. I observed another problem that when conda compilers are present and `-DCMAKE_CXX_COMPILER=icpc` passed, that the `-fno-plt` set in the envvar `CXXFLAGS` by conda env activation was unsupported by Intel and so triggered all three `ENABLE_XHOST` options to fail unless `CXXFLAGS=` explicitly cleared/set beforehand. I had deliberately _not_ made psi4 CMake dependent on envvars, but it looks like CMake started doing that in 3.10, hmpf. https://cmake.org/cmake/help/v3.10/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854:224,optimiz,optimization,224,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854,2,['optimiz'],['optimization']
Performance,"Okay, @loriab: I have a pretty small fix for this that's much less invasive than a proper grammer. It will first section the input PSIthon script into two classes of segments: those which are preserved exactly (string literals and comments) and those in which substitutions can take place (everything else), and then only perform the PSIthon -> Python replacements on seconds in the second category. PR coming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/655#issuecomment-287840923:322,perform,perform,322,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287840923,1,['perform'],['perform']
Performance,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290#issuecomment-189916188:238,optimiz,optimization,238,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188,1,['optimiz'],['optimization']
Performance,"Okay, here are some other considerations that must be accounted for when constructing the correct DFJK object:. 1. PackedDFJK if do_wK_ else SymmDFJK; 2. SymmDFJK if SymmDFJK->AO_core() else PackedDFJK. Note that the above two will require knowledge of `do_wK_` and `doubles_` **in the JK constructor**. 3. PackedDFJK if procedure relies intrinsically on old DFJK else SymmDFJK. (3.) might be tricky. `DFJK` used `df_ints_io_` to prepare, save, and load the 3-center integrals. Some procedures in Psi4 intrinsically rely on being able to load files produced by DFJK. So not only will we need avoid using SymmDFJK in those procedures, but we might also need to do so in preemptive procedures (such as SCF) so that the files can be properly prepared for use later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382594587:449,load,load,449,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382594587,2,['load'],['load']
Performance,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185260019:123,optimiz,optimizer,123,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019,1,['optimiz'],['optimizer']
Performance,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139102907:146,optimiz,optimized,146,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907,1,['optimiz'],['optimized']
Performance,"One of the root causes for this that you might be able to clean up is that there are two different ""naming conventions"" for custom basis sets.; - The names used as keys in `qcdb.libmintsbasisset.basishorde` are `LOW` and `HIGH`.; - Once the basis set is instantiated, the `name()` of it in C++ is more like `file /path/to/sto-3g.gbs` or `file /path/to/cc-pvdz.gbs`. That's what's behind the trickiness here, because file 180 that we're loading back up contains the C++ name, but to retrive it from the horde, we need the other name. For built-in basis sets, this is done with [by just some fragile string manipulations](https://github.com/psi4/psi4/blob/9d1564e67837bbf7f348c1600aa2c353457671ec/psi4/driver/procrouting/proc.py#L1294-L1295), but this kind of trick doesn't work for custom basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719#issuecomment-303783502:436,load,loading,436,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303783502,1,['load'],['loading']
Performance,"One question, to all core developers, IMHO, we should change the default value for `df_scf_guess` from true to false, since optimized direct algorithms would be faster than density fitting for large systems. What do y'all think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937330224:124,optimiz,optimized,124,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937330224,1,['optimiz'],['optimized']
Performance,"One thing I found before I decided to drop looking into this personally:; Psi rotates the orbitals [pairwise](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/stability.cc#L269). My experience with orbital optimization says the correct thing to do here is multiply the coefficient matrices by a matrix exponential of the unstable vector, and that the current approach will lead to different orbitals depending on what order you apply the pairwise rotations in. It's probably worth reexamining why this pairwise approach is justified, or confirming that it isn't. This calls to mind the Givens rotation approach from the old Sherrill-Krylov paper. And now back to other projects for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909:226,optimiz,optimization,226,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909,1,['optimiz'],['optimization']
Performance,"OptM3 with GC is the Treutler-Ahlrichs M3 mapping with Gauss-Chebyschev (GC) quadrature. This is similar to what psi4 does.; However, the radial points in psi4 are fixed numbers while in ORCA they vary for each element and were optimized against some data set (hence `OptM3 with GC`). For benchmarking interaction energies one wants `defgrid3` in ORCA and ``590/99`` in psi4. . Changing the monomer orientation will also have some influence. Though ORCA has an optional feature that makes grid rotational invariant but I dont know how it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-928914815:228,optimiz,optimized,228,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928914815,1,['optimiz'],['optimized']
Performance,"Optimization flags come from [another source](https://github.com/AnacondaRecipes/aggregate/blob/master/ctng-compilers-activation-feedstock/recipe/conda_build_config.cos6.x86_64.yaml#L46), but yes, I see what you mean that they look to be clobbered. I can rebuild openblas locally to see if that helps. But I'd be surprised if there were fundamental accuracy errors in the openblas package that weren't noticed by the whole conda-forge-dependent community (where openblas is their default blas_impl) or conda defaults (which still has `nomkl` options)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840:0,Optimiz,Optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840,1,['Optimiz'],['Optimization']
Performance,"PRs psi-rking/optking#24 and psi4/psi4#1335 are a pair. Together, they get most optimizations working for Psi. In particular have working:. - [x] ordinary, opt-is-full job optimizations; - [x] collecting all the psivars so psi can read them in. basically, collecting enough to generate a skeleton (mol, basis, psivars) that can be passed back from `psi4.optimize(..., return_wfn=True)`; - [x] inlining optking's logging output into the psi4 output file; - [x] resetting psi4's options on either side of the `optking.run_json_dict()` call. The trouble was that the psi4-s imported by optking were clearing and setting options (as is proper for indep json runs) such that the calling psi4 didn't have its original options in globals upon optking termination; - [x] starting to catch optking errors (str in json) and re-raising them as psi4 errors. Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped me for a while b/c I only got the final error (""dynamic level exceeded"") and I thought it was behaving differently btwn direct optking and psi4 initiated runs. To me it seems clear that if geom_maxiter is exceeded, then optimizer quits directly (though perhaps that's clearer when geom_maxiter=2 than =200). @psi-rking @AlexHeide",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450:80,optimiz,optimizations,80,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450,4,['optimiz'],"['optimizations', 'optimize', 'optimizer']"
Performance,"Partially, I'm running these tests with `python psi4 --test`:; ```; 2018-12-05T15:54:19.2192346Z ============================= test session starts =============================; 2018-12-05T15:54:19.2192531Z platform win32 -- Python 3.6.6, pytest-4.0.1, py-1.7.0, pluggy-0.8.0 -- C:\tools\miniconda3\python.exe; 2018-12-05T15:54:19.2193957Z cachedir: .pytest_cache; 2018-12-05T15:54:19.2194153Z rootdir: D:\a\1\b\install, inifile:; 2018-12-05T15:54:19.5028575Z collecting ... collected 43 items / 21 deselected; 2018-12-05T15:54:19.5042204Z ; 2018-12-05T15:54:19.5056742Z ..\lib\psi4\tests\test_addons.py::test_gdma SKIPPED [ 4%]; 2018-12-05T15:54:19.5070445Z ..\lib\psi4\tests\test_addons.py::test_mrcc SKIPPED [ 9%]; 2018-12-05T15:54:19.5085682Z ..\lib\psi4\tests\test_addons.py::test_chemps2 SKIPPED [ 13%]; 2018-12-05T15:54:19.5098425Z ..\lib\psi4\tests\test_addons.py::test_dftd3 SKIPPED [ 18%]; 2018-12-05T15:54:19.5111431Z ..\lib\psi4\tests\test_addons.py::test_libefp SKIPPED [ 22%]; 2018-12-05T15:54:19.5124637Z ..\lib\psi4\tests\test_addons.py::test_pcmsolver SKIPPED [ 27%]; 2018-12-05T15:54:19.5137383Z ..\lib\psi4\tests\test_addons.py::test_erd SKIPPED [ 31%]; 2018-12-05T15:54:19.5159968Z ..\lib\psi4\tests\test_addons.py::test_simint SKIPPED [ 36%]; 2018-12-05T15:54:21.2422176Z ..\lib\psi4\tests\test_addons.py::test_json PASSED [ 40%]; 2018-12-05T15:54:21.2458012Z ..\lib\psi4\tests\test_addons.py::test_cfour SKIPPED [ 45%]; 2018-12-05T15:54:21.2473322Z ..\lib\psi4\tests\test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; 2018-12-05T15:54:21.2488441Z ..\lib\psi4\tests\test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; 2018-12-05T15:54:21.2503496Z ..\lib\psi4\tests\test_addons.py::test_grimme_3c SKIPPED [ 59%]; 2018-12-05T15:54:21.2517677Z ..\lib\psi4\tests\test_addons.py::test_dkh SKIPPED [ 63%]; 2018-12-05T15:54:21.2531717Z ..\lib\psi4\tests\test_addons.py::test_snsmp2 SKIPPED [ 68%]; 2018-12-05T15:54:21.2547307Z ..\lib\psi4\tests\test_addons.py::test_resp SKIPPED [ 72%]; 2018-12",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:340,cache,cachedir,340,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['cache'],['cachedir']
Performance,"Parts are arriving for an AMD server in our lab, so this may get more testing. But for now, OpenBLAS is going to go the way of Accelerate (on Mac) and just get a nice Use At Your Own Risk warning. I daresay Psi could use openblas directives better, but the stack of difficulties (wrong fctls, scaling, numpy compatibility, conda compatibility) is too high when there's a free, compatible, and working alternative in place. Glad to revisit periodically. P. S. There might be a further technical choice why the conda openblas package isn't building the Fortran/LAPACK code with optimizations (https://github.com/psi4/psi4/issues/1009#issuecomment-387075271), but an immediate technical reason is that conda gfortran 7.2.0 isn't distributing `omp_lib.[h|mod]`, so threading isn't avail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669:576,optimiz,optimizations,576,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669,1,['optimiz'],['optimizations']
Performance,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307880460:219,optimiz,optimized,219,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460,2,['optimiz'],"['optimize', 'optimized']"
Performance,"Please check the output for additional information or printouts from the optimizer for the 1-step optimization, or upload the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957965416:73,optimiz,optimizer,73,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957965416,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:482,cache,cachedir,482,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['cache'],['cachedir']
Performance,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:191,load,loaded,191,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,1,['load'],['loaded']
Performance,"Possibly we could try/catch the mol name as a Py identifier and thereby fine-tune the allowed names, rather than the current slight mismatch. I'm afraid that garden-variety Psi4 users won't get the block --> geometry idea, though maybe worth saying if the sentence starts ""For those acquainted with Python,"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286907884:77,tune,tune,77,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286907884,1,['tune'],['tune']
Performance,"Props4 does have both labels (my bad), so I'll fix that, @loriab. I _think_ I found a workaround for the Travis problems. The bjam system uses predefined setups to build. When it calls `clang`, it's really getting clang 3.4 (which is broken); loading the clang 3.8 module defines `clang-3.8` in addition to the existing `clang`. I forced bjam to use `clang-3.8` instead by dumping a `user-config.bjam` file to ${HOME}. This is done by a script because YAML has a terrible time with : in environmental variables. That's about an hour of my life I'll never get back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235179414:243,load,loading,243,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235179414,1,['load'],['loading']
Performance,"Psi4 is fine with cyclic mols, but the optimizer could benefit from a @psi-rking consult. We're in the middle of switching out optimizer implementations, btw. Are you able to post your input file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2599#issuecomment-1152532615:39,optimiz,optimizer,39,https://psicode.org,https://github.com/psi4/psi4/issues/2599#issuecomment-1152532615,2,['optimiz'],['optimizer']
Performance,"Ran these under memory/cpu profilers (4 cores) and found the following:. B3LYP with MemJK (8.3 GB max, 3 SCF iterations):; ![b3lyp_memjk](https://user-images.githubusercontent.com/1769841/55844039-7d81c280-5b09-11e9-8fd5-c2dc04d71d23.png). wB97X with MemJK (7.1 GB max, 1 SCF iteration):; ![wb97x_diskjk](https://user-images.githubusercontent.com/1769841/55844045-82467680-5b09-11e9-9e20-78204926df8e.png). I could not run these for their full extend on my laptop, but overall it looks like they are staying relatively in-bounds. I can fix the 4% overages on the B3LYP run, I see where that occurs now. A thought is that they slowly leak over time, can you check which optimization iteration these are failing on?. I sadly do not have any local hardware I can run things on these days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169:669,optimiz,optimization,669,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169,1,['optimiz'],['optimization']
Performance,"Reasonably, since this is more than 2 years old, you've deleted the dropbox files. Maybe @psi-rking has the inputs to test if any of the newfangled optimization modes work on these cases. Thanks for reporting, but I'm closing since we probably don't have the info to reconstruct the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18#issuecomment-182638550:148,optimiz,optimization,148,https://psicode.org,https://github.com/psi4/psi4/issues/18#issuecomment-182638550,1,['optimiz'],['optimization']
Performance,Renamed for upload; [output.txt](https://github.com/psi4/psi4/files/4668488/output.txt); Yes the gradients were also rohf. I can add an output for the optimization if desired.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632711349:151,optimiz,optimization,151,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632711349,1,['optimiz'],['optimization']
Performance,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:1845,optimiz,optimizer,1845,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955,1,['optimiz'],['optimizer']
Performance,"Right, the psi4 conda package is built to link to Mac native Accelerate blas/lapack, not MKL. The MKL is present in the conda env for numpy's benefit. The reason for this is that until very recently all the supporting language libraries and headers for MKL weren't available on conda – they seem to be now through packages on the Intel conda channel, but I haven't switched over. I was thinking that when psi4 is imported before numpy that the latter may be trying to match symbols in the already loaded Accelerate when it should instead be importing mkl.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311738398:497,load,loaded,497,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738398,1,['load'],['loaded']
Performance,"Same situation, sadly. GCC builds are much slower than Clang builds, and uploading the cache (unrelated to Ninja or Makefiles) really hurts. We might want to move one Linux pipeline to Azure or Circle CI, at some point...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231:87,cache,cache,87,https://psicode.org,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231,1,['cache'],['cache']
Performance,"See if you can check that a proper gcc is being loaded for `psi4/core.so`. That `cxx11::basic_string<char, std::char_traits` brings to mind the pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it all conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-335915587:48,load,loaded,48,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335915587,1,['load'],['loaded']
Performance,"Setting TargetLAPACK_DIR (as you suggested) didn't seem to help: it still couldn't find MathOpenMP. However, adding; `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:568,Perform,Performing,568,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,2,['Perform'],['Performing']
Performance,"Shot in the dark here, but what happens if you try `python -c “import numpy”`? That should also load IOMP5, it may or may not hit a OMP lock however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404810043:96,load,load,96,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404810043,1,['load'],['load']
Performance,Should there be an output in the zip? You might try first w/o altering cache settings.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913#issuecomment-1487557230:71,cache,cache,71,https://psicode.org,https://github.com/psi4/psi4/issues/2913#issuecomment-1487557230,1,['cache'],['cache']
Performance,Shouldn't the mismatch between the total gradient rms (0.04) and the gradient it's decided to consider (1e-7) signal to the optimizer that it doesn't have the full picture? Throw in some Cartesian steps or whatever others do?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195987054:124,optimiz,optimizer,124,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195987054,1,['optimiz'],['optimizer']
Performance,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:283,Optimiz,Optimizer,283,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,7,"['Optimiz', 'optimiz']","['Optimization', 'Optimizer', 'optimize']"
Performance,"Similar to pull request #497 but should fix all broken links, not only those to energy/optimize/frequency. Removed unnecessary line break.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/500#issuecomment-258539160:87,optimiz,optimize,87,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258539160,1,['optimiz'],['optimize']
Performance,"Since the optimization works in the upcoming version, I'm closing the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868866180:10,optimiz,optimization,10,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868866180,1,['optimiz'],['optimization']
Performance,"Since the problem is that CMake is not detecting the proper flags, this issue also affects all the other options; ```; option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798:178,optimiz,optimization,178,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798,1,['optimiz'],['optimization']
Performance,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224644390:1022,optimiz,optimization,1022,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390,1,['optimiz'],['optimization']
Performance,So now loading `core.so` never loads a potentially-conflicting BLAS. But it still causes numpy to return garbage.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311749561:7,load,loading,7,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749561,2,['load'],"['loading', 'loads']"
Performance,"So now that this PR and https://github.com/psi4/psi4/pull/2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the `SCF_SUBTYPE` docstring in scf_subtype.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527469285:111,queue,queue,111,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527469285,1,['queue'],['queue']
Performance,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276222956:5,bottleneck,bottlenecks,5,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956,1,['bottleneck'],['bottlenecks']
Performance,"Sometimes ultimate convergence is more important than any maxiter variable; - particularly for speedy methods or initial optimizations. If an; optimization fails in internal coordinates, then one might want the; optimizer to try Cartesians, automatically. The idea of a 'dynamic level'; (whatever its final name or design) is that a user could easily elect the; degree to which the optimizer should try different things to reach; convergence. On Tue, Nov 6, 2018 at 4:47 PM Lori A. Burns <notifications@github.com>; wrote:. > PRs psi-rking/optking#24 <https://github.com/psi-rking/optking/pull/24>; > and #1335 <https://github.com/psi4/psi4/pull/1335> are a pair. Together,; > they get most optimizations working for Psi. In particular have working:; >; > - ordinary, opt-is-full job optimizations; > - collecting all the psivars so psi can read them in. basically,; > collecting enough to generate a skeleton (mol, basis, psivars) that can be; > passed back from psi4.optimize(..., return_wfn=True); > - inlining optking's logging output into the psi4 output file; > - resetting psi4's options on either side of the; > optking.run_json_dict() call. The trouble was that the psi4-s imported; > by optking were clearing and setting options (as is proper for indep json; > runs) such that the calling psi4 didn't have its original options in; > globals upon optking termination; > - starting to catch optking errors (str in json) and re-raising them; > as psi4 errors.; >; > Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped; > me for a while b/c I only got the final error (""dynamic level exceeded""); > and I thought it was behaving differently btwn direct optking and psi4; > initiated runs. To me it seems clear that if geom_maxiter is exceeded, then; > optimizer quits directly (though perhaps that's clearer when geom_maxiter=2; > than =200).; >; > @psi-rking <https://github.com/psi-rking> @AlexHeide; > <https://github.com/AlexHeide>; >; > —; > You are receiving this becau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061:121,optimiz,optimizations,121,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061,7,['optimiz'],"['optimization', 'optimizations', 'optimize', 'optimizer']"
Performance,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190956405:447,Optimiz,Optimizer,447,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405,4,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"Sorry, I don't agree. I'll explain why you need the inverse. The following very similar formula is correct (but different):. `D_AO = C D_MO C^T`. In case of an SCF density matrix `D_MO` is diagonal with occupation numbers on the diagonal.; `C` is not unitary, so you need to perform a matrix inverse to get `D_MO` out of `D_AO`. ---. As I said, I don't like doing the inverse and there are better ways to deal with this, basically solve the following generalized eigenvalue problem:. `S D_AO S C_NO = S C_NO N_NO`. where `S` is the overlap matrix, `C_NO` are the natural orbital coefficients and `N_NO` are the natural occupation numbers. This way, you get the natural orbitals in one step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456146417:275,perform,perform,275,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456146417,1,['perform'],['perform']
Performance,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:1460,optimiz,optimize,1460,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,1,['optimiz'],['optimize']
Performance,"Sorry, busy week for me so I only just got a look at this problem. I got the scan to work with a few changes. First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting `start_angle = 181.0` sorts that out. I tried 180, but the optimizer seems to have problems when it gets too close to 180. I'm well out of my depth here, but I suspect [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/set_params.cc#L719-L732) mysterious constants play a role. What do you think, @psi-rking? I removed the `frozen_dihedral` command, but I don't know if that makes a difference or not. I also added `symmetry c1` to the molecule definition section, to make sure weird things don't happen as the symmetry changes. Your `geom_py` command didn't work, so I changed it to `print(c4h10.save_string_xyz())`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288886460:326,optimiz,optimizer,326,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288886460,1,['optimiz'],['optimizer']
Performance,"Still fails with the current HEAD (Feb 26, 2015). ```; attempted to find atom at; -2.764295 -2.721319 2.493509; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 2 steps) ****; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-189324724:218,Optimiz,Optimization,218,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-189324724,1,['Optimiz'],['Optimization']
Performance,"Suspicious thing: the crash happens when `dpd_block_matrix` is called to allocate a 2612*12544 (~250 MiB) matrix, and it tries to ""Delete cache entries until there's enough memory or no more cache"". But that should not happen to begin with, especially with 16 GB of memory!. This means that _somehow_ this condition `((dpd_main.memory - dpd_main.memused) < size)` is evaluating `true`, when it probably should not. I am not sure why `dpd_block_matrix` uses this expression to check the amount of free memory instead of calling `dpd_memfree`:; ```; extern long int dpd_memfree() {; return dpd_main.memory - (dpd_main.memused - dpd_main.memcache + dpd_main.memlocked);; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130:138,cache,cache,138,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130,2,['cache'],['cache']
Performance,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5381,Perform,Performing,5381,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,14,['Perform'],['Performing']
Performance,"TS optimization is possible, and following an excited state is possible. The main difficulty is psi4 is lacking cheap excited state methods with analytic gradients. So no CIS, and TDDFT would use finite-difference gradients. If it's EOM-CC2 or EOM-CCSD (or a well-characterized by docc/socc SCF), Psi can help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106#issuecomment-1856814920:3,optimiz,optimization,3,https://psicode.org,https://github.com/psi4/psi4/issues/3106#issuecomment-1856814920,1,['optimiz'],['optimization']
Performance,"Thank you for suggesting the dev version. It worked without any further errors or warnings. Cheers!. That is a good point, David. In this case we just wanted to optimize the energy, not the structure, and we already had scripts to do so for larger molecules. Thank you for the heads-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493:161,optimiz,optimize,161,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493,1,['optimiz'],['optimize']
Performance,"Thank you for the proposed changes! So the final code would look something like this?. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; opt_coordinates cartesian; full_hess_every 0; freeze_core true ; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj', hessian_with='pbe0-d3bj/def2-SV(P)'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj', hessian_with='pbe0-d3bj/def2-SV(P)'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. Regarding the frequency calculations, will the results be affected by a lower level of theory Hessian in the beginning? Or will the final results still be of desired level of theory?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712909670:749,optimiz,optimize,749,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712909670,2,['optimiz'],['optimize']
Performance,"Thank you! I see the confusion. In plane wave methods and DFT textbooks, the DIIS (also known as density mixing) is performed on electron density for faster convergence. But it seems that in quantum chemistry the DIIS is performed on the Hamiltonian, and thus the density mixing (or update damping you mentioned) becomes optional?. In this case, my definition makes little sense, and I might need some reconsideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520:116,perform,performed,116,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520,2,['perform'],['performed']
Performance,Thanks @andysim! The caching of conda is currently a bit idiotic: I am nuking `p4env` every time after a build succeeds. Probably we want to keep the conda environment in cache and just activate and update it. @loriab does that sound like a reasonable proposition? I'll tackle it in a subsequent PR.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444493550:171,cache,cache,171,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444493550,1,['cache'],['cache']
Performance,"Thanks @loriab for your detailed answer. In fact, I would like to do focal-point analyses for small molecules (including HF, MP2, CC, DBOC, and relativistic corrections) in a somewhat automated form. Psi4, which is able to execute MRCC and CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:497,optimiz,optimizations,497,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['optimiz'],['optimizations']
Performance,"Thanks all for the feedback. I'll split this one in three: i) Vector/Matrix polish ii) C++14 constructs for pybind11 iii) Actual xtensor stuff (CI doesn't seem very happy about those :weary:) . @fevangelista xtensor is used only in the test for the `doublet`. I initially intended to swap the storage in `Vector` and `Matrix` to use xtensor, but that turned out to be quite hard (due to the extensive use of `pointer` basically everywhere in the code) The strategy now is to rewrite the storage object (I think that's largely done, though copy CTORs, assignment etc are missing) and the symmetry-aware operations (multiplies, diagonalization, etc) unit testing them on the way. The latter will take a bit of time, but it's also something that more people can work on concurrently, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931:767,concurren,concurrently,767,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931,1,['concurren'],['concurrently']
Performance,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:462,perform,performance,462,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075,1,['perform'],['performance']
Performance,"Thanks for the clarification @amjames. I think the line at the docstring as you suggested might be better, but it would be even clearer if it explicitly mentions the possibility of non-zero data residing in the file/buffer?. The code I was looking at is here at [line 79-90](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccenergy/mp2_energy.cc). If I understand you though, this code would break if someone set `cachelevel = 0`? It makes no sense to take the dot product or direct product of zero arrays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267468232:421,cache,cachelevel,421,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267468232,1,['cache'],['cachelevel']
Performance,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:117,optimiz,optimization,117,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520,1,['optimiz'],['optimization']
Performance,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:687,optimiz,optimize,687,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,7,"['Optimiz', 'optimiz']","['Optimize', 'optimize', 'optimizeGeometry', 'optimizer']"
Performance,"Thanks for the information!; > ; > orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. I kinda thought you solved all the the DFOCC convergence issues recently, at great effort.; > ; > If you don't mind me asking, what are you trying to do?. I don't mind it at all, as long as you don't mind a long winded explanation. ;-) Also, I am mostly just poking around, trying to weigh my options.; Essentially I am looking for code that can do open-shell Brueckner coupled-cluster doubles with perturbative triples ( either RBCCD(T) or UBCCD(T) ), using an ROHF reference. We have recently published a [paper](https://doi.org/10.1039/C9CP07007A), where we found that the (T) contribution of BCCD(T) is much more stable than the (T) of CCSD(T) at geometries far from equilibrium, which is what we need a lot (about 1e+5 single point energies) of for our purposes. Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611917954:43,optimiz,optimized,43,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611917954,2,"['optimiz', 'perform']","['optimized', 'performant']"
Performance,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:392,perform,performance,392,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035,1,['perform'],['performance']
Performance,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:878,load,loaded,878,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['load'],['loaded']
Performance,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:348,perform,performance,348,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117,1,['perform'],['performance']
Performance,"Thanks for the quick update! I did try a new conda environment and ran into the same problem, but I had a hunch conda might be using cached packages and I couldn't remember the command to clear them, so I tried using `python=3.7` and that works fine!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270:133,cache,cached,133,https://psicode.org,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270,1,['cache'],['cached']
Performance,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:184,optimiz,optimizations,184,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909,6,['optimiz'],"['optimization', 'optimizations']"
Performance,"Thanks for the report. I've been able to reproduce the crash. (I observe a fifth decimal place disagreement in DF-RKS SAD energy and a third decimal place disagreement in all iteration energies.) There are two things that worry me here:. 1. The crash itself. I struggle to imagine why the ADIIS optimization problem is so difficult to solve here.; 2. The abhorrent SCF energies. The energy jumps 138 hartrees after the guess! If I remember correctly, the SAD energy isn't the energy corresponding to a particular set of orbitals, but this is still astounding. @susilehtola may have some insight on this. I can poke on this, but the first step will be to try and reproduce this with a smaller system. I don't have access to 14 threads, so I'll have trouble running this repeatedly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164:295,optimiz,optimization,295,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164,1,['optimiz'],['optimization']
Performance,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347710296:636,optimiz,optimization,636,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296,1,['optimiz'],['optimization']
Performance,"Thanks kannon92 . I'm actually employing x2c. However, all of my multi-reference (CASPT2, NEVPT2) and DFT results were done with DKH correction. Therefore I would like to use DKH correction for CCSD(T) calculations performed by PSI4 (easy to get scf convergence in comparison to others). Of course the report will be ....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-125218069:215,perform,performed,215,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-125218069,1,['perform'],['performed']
Performance,"Thanks loriab for your quick reply. I am working on a complex that contains Pd metal. It's a bit a large system. My input file looks like:. memory 2 GB; basis mybas{; assign 6-31+G**; assign Pd lanl2dz; }. set{; basis mybas; reference uhf; FREEZE_CORE True; maxiter 200; print_trajectory_xyz_file True; }. molecule {; 0 1; Here are my internal coordinates of the Pd-complex; }; m06_wfn= optimize('M06', return_wfn=True); molden(m06_wfn, 'm06_orbitals_opt.molden')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-639966320:387,optimiz,optimize,387,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-639966320,1,['optimiz'],['optimize']
Performance,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182875337:354,optimiz,optimization,354,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337,1,['optimiz'],['optimization']
Performance,"Thanks, will do in the future. Let me know if/when you hit snags using; this tool. It think it is far enough along that I should be able to solve; problems.; -Rollin. On Tue, Jul 5, 2016 at 1:42 PM, Daniel Smith notifications@github.com; wrote:. > Cool, this should give us a base to start playing around with automatic; > rigid body optimizations.; > ; > Also note you can do git pull --rebase upstream master to rebase in the; > master branch of upstream. This will help cut down on the number of merges; > that happen. You can always fall back to merging if needed of course.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/432#issuecomment-230565713, or mute; > the thread; > https://github.com/notifications/unsubscribe/ADguTBNCfxO8XJ3qFYJTy2GsyG5LBgPOks5qSqV4gaJpZM4JDw7x; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230573225:334,optimiz,optimizations,334,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230573225,1,['optimiz'],['optimizations']
Performance,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184429744:927,optimiz,optimization,927,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744,1,['optimiz'],['optimization']
Performance,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1379,bottleneck,bottleneck,1379,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448,1,['bottleneck'],['bottleneck']
Performance,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:823,optimiz,optimized,823,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,1,['optimiz'],['optimized']
Performance,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:350,bottleneck,bottleneck,350,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180,1,['bottleneck'],['bottleneck']
Performance,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:175,load,load,175,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610,1,['load'],['load']
Performance,"The Jensen _pc_ basis sets [1-7] are analogous to the Dunning _cc_ basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the _cc_ basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:605,optimiz,optimized,605,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['optimiz'],['optimized']
Performance,"The Mac Eco error is probably a fluke -- I don't see any recent changes to dftd4-python. What do you think of defaulting this to OFF for the protection of plugins? I don't quite understand how they're behaving now with this. See below that it's warning but not erroring. I do think the cmake is slightly in error in that i'm not setting CXX_EXTENSIONS=OFF in the inner psi4/CMakeLists.txt. ```; 2024-03-25T14:45:09.8381208Z [67/68] Building Fortran object CMakeFiles/v2rdm_casscf.dir/focas_interface.F90.o; 2024-03-25T14:45:09.8382362Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:274:53:; 2024-03-25T14:45:09.8383299Z ; 2024-03-25T14:45:09.8383512Z 274 | max_dim = max(size(integrals_1,dim=1),nnz_d1,maxval(nnz_int)); 2024-03-25T14:45:09.8383966Z | 1; 2024-03-25T14:45:09.8384366Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8385389Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:161:46:; 2024-03-25T14:45:09.8386144Z ; 2024-03-25T14:45:09.8386330Z 161 | max_dim = max(size(integrals_1,dim=1),maxval(nnz_int)); 2024-03-25T14:45:09.8386747Z | 1; 2024-03-25T14:45:09.8387135Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8387546Z [68/68] Linking CXX shared module v2rdm_casscf.so; 2024-03-25T14:45:09.8404861Z [17/19] Performing install step for 'v2rdm_casscf_external'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447:1469,Perform,Performing,1469,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447,1,['Perform'],['Performing']
Performance,"The MintsHelper function `ao_eri` returns through an internal function `ao_helper`, which does not have multi-thread support currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3071#issuecomment-1802567966:104,multi-thread,multi-thread,104,https://psicode.org,https://github.com/psi4/psi4/issues/3071#issuecomment-1802567966,1,['multi-thread'],['multi-thread']
Performance,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:781,perform,performance,781,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204,3,"['load', 'perform']","['loaded', 'performance']"
Performance,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:60,optimiz,optimizer,60,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257,3,['optimiz'],"['optimization', 'optimizer']"
Performance,"The atom vs shell loop structure is an open question of the PR:. > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992570345:138,perform,perform,138,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992570345,1,['perform'],['perform']
Performance,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29895339:901,Cache,Cache,901,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339,2,['Cache'],['Cache']
Performance,"The community feedback for the GH ""merge queue"" beta is strongly pushing for different sets of ""required"" checks btwn PR and merge-queue into master. Hopefully that gets enacted, then I think the latter would be an excellent occasion to run full tests on local-hosted resources.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434:41,queue,queue,41,https://psicode.org,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434,2,['queue'],['queue']
Performance,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184418683:395,optimiz,optimization,395,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683,1,['optimiz'],['optimization']
Performance,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:321,optimiz,optimizer,321,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"The direct link was initially problematic for me, but no longer. I suspect a DNS server got compromised, it was taken down, and now you're dealing with having to wait for the malicious information to clear out of all the various caches...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210019282:229,cache,caches,229,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210019282,1,['cache'],['caches']
Performance,"The easy thing to do is what we do [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L319) and create an integral computer for each thread in [the offending function](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/potentialint.h#L66-L195). We could get some very easy speed up this way, but it's not perfect. For better scalability, we need to do exactly what you suggest: rewrite the OS recursion code (which is quite ugly, old code that we inherited) and also make sure that the integral object has buffers for each thread, so that we don't have to duplicate them. If you want to pursue that, I think you'll find there's a lot of performance to be gained and I think you're very well suited to the task, given your recent foray into DFT threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355:369,scalab,scalability,369,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355,2,"['perform', 'scalab']","['performance', 'scalability']"
Performance,"The field integrals are not OMP parallel, no (we only ever evaluated them at nuclei before, so they were never a bottleneck). The easiest way to go is to make `buffer_` into a std::vector of buffers instead (one for each thread) and then use the appropriate one for each thread. That would probably be best done on a separate PR, but whatever is easiest for you is fine with me",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505033362:113,bottleneck,bottleneck,113,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505033362,1,['bottleneck'],['bottleneck']
Performance,"The key is to include `-Wp,-D_GLIBCXX_ASSERTIONS ` in the compile flags. The backtrace is not very informative; ```; (gdb) bt; #0 0x00007fabfd87cb22 in xc_func_init () from /home/susi/.conda/envs/p4env/lib/libxc.so.12; #1 0x00007fac0c8ce261 in psi::LibXCFunctional::LibXCFunctional (this=0x55ff95e75e20, xc_name=..., unpolarized=<optimized out>); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/unique_ptr.h:193; #2 0x00007fac0c8d632b in psi::SuperFunctional::XC_build (name=..., unpolarized=<optimized out>, tweakers_=...); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/basic_string.tcc:242; #3 0x00007fac0b82e3cf in pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&>::call_impl<std::shared_ptr<psi::SuperFunctional>, std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), 0ul, 1ul, 2ul, pybind11::detail::void_type>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:330,optimiz,optimized,330,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:439,perform,performed,439,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,2,['perform'],['performed']
Performance,"The occupations in the CC code are just fine; we were fooled by formatting. Here's what I get when I try Holger's input.; ```; IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 3 0 3 0 0 0 ; B1g 0 0 0 0 0 0 ; B2g 1 0 0 1 0 0 ; B3g 1 0 0 1 0 0 ; Au 0 0 0 0 0 0 ; B1u 3 0 2 0 1 0 ; B2u 1 0 1 0 0 0 ; B3u 1 0 1 0 0 0 ; ```. The formatting is a bit strange, but you can see that all the numbers check out. And comparing against Holger's original report, shift the labels one column right, and everything makes sense again. When I put this in the debugger, it gives me:; ```; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0); frame #0: 0x00000001031e2aa6 core.cpython-37m-darwin.so`psi::cchbar::WaBeI_UHF() at Wabei_BABA_UHF.cc:106:66; 103 	 int e = moinfo.bvir_off[Ge] + EE;; 104 	 global_dpd_->buf4_mat_irrep_rd_block(&B, Gef, B.row_offset[Gef][e], moinfo.avirtpi[Gf]);; 105 	 global_dpd_->buf4_mat_irrep_rd_block(&W, Gei, W.row_offset[Gei][e], moinfo.aoccpi[Gi]);; -> 106 	 C_DGEMM('n', 'n', nrows, ncols, nlinks, 1.0, T1.matrix[Gi][0], nlinks, B.matrix[Gef][0], ncols, 1.0,; 107 	 W.matrix[Gei][0], ncols);; 108 	 global_dpd_->buf4_mat_irrep_wrt_block(&W, Gei, W.row_offset[Gei][e], moinfo.aoccpi[Gi]);; 109 	 }; Target 0: (python) stopped.; ```. with the T1 highlighted. So if anybody wants to investigate further, there's a lead for you. Since the occupations are fine, I'm moving this off my to-do list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1966#issuecomment-661836134:633,queue,queue,633,https://psicode.org,https://github.com/psi4/psi4/issues/1966#issuecomment-661836134,1,['queue'],['queue']
Performance,"The only thing worth hanging onto might be the bakerjcc93. But if we've; got that database otherwise available, then deletion fine with me. On Fri, Apr 22, 2022 at 11:14 AM Lori A. Burns ***@***.***>; wrote:. > after #2549 <https://github.com/psi4/psi4/pull/2549>, the list from python; > tester.py looks like the below. Most of these are easily healed by; > figuring out if they're intended to be a test or not. Nots should be; > removed to an attic or deleted. Also related is #2234; > <https://github.com/psi4/psi4/issues/2234> . don't rely on the below --; > rerun tester.py as needed.; >; > @psi-rking <https://github.com/psi-rking>, do you prefer attic or; > deletion for the un-run optimizer tests?; > Complaints; >; > - 1. cc5: missing cmake directory registration. vi CMakeLists.txt; > - 2. cookbook/manual-sow-reap: missing cmake directory registration. vi; > cookbook/CMakeLists.txt; > - 3. cookbook/manual-sow-reap: missing CMakeLists. vi; > cookbook/manual-sow-reap/CMakeLists.txt; > - 4. dfmp2-freq1: missing cmake directory registration. vi; > CMakeLists.txt; > - 5. dfmp2-freq2: missing cmake directory registration. vi; > CMakeLists.txt; > - 6. dfomp2p5-1: missing ctest registration. vi; > dfomp2p5-1/CMakeLists.txt; > - 7. dfomp2p5-2: missing ctest registration. vi; > dfomp2p5-2/CMakeLists.txt; > - 8. dfomp2p5-grad1: missing ctest registration. vi; > dfomp2p5-grad1/CMakeLists.txt; > - 9. dfomp2p5-grad2: missing ctest registration. vi; > dfomp2p5-grad2/CMakeLists.txt; > - 10. dft-dldf: missing cmake directory registration. vi CMakeLists.txt; > - 11. dft-dsd: missing cmake directory registration. vi CMakeLists.txt; > - 12. dft-pbe0-2: missing cmake directory registration. vi; > CMakeLists.txt; > - 13. explicit-am-basis: mismatched directory (explicit-am-basis) and; > ctest registration name (explicit_am_basis). vi; > explicit-am-basis/CMakeLists.txt; > - 14. fsapt-diff1: missing cmake directory registration. vi; > CMakeLists.txt; > - 15. fsapt-diff1: missing CMakeLists.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:689,optimiz,optimizer,689,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['optimiz'],['optimizer']
Performance,"The optimizer is not creating covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.0064",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4,optimiz,optimizer,4,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,3,['optimiz'],"['optimization', 'optimizer']"
Performance,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226018652:297,optimiz,optimizations,297,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652,1,['optimiz'],['optimizations']
Performance,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/125#issuecomment-121739386:245,optimiz,optimizer,245,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386,1,['optimiz'],['optimizer']
