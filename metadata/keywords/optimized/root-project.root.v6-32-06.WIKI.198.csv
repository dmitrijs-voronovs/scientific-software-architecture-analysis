quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,eate new TKeys. ; Definition at line 41 of file TDirectoryFile.h. ◆ fDatimeC. TDatime TDirectoryFile::fDatimeC. protected . Date and time when directory is created. ; Definition at line 37 of file TDirectoryFile.h. ◆ fDatimeM. TDatime TDirectoryFile::fDatimeM. protected . Date and time of last modification. ; Definition at line 38 of file TDirectoryFile.h. ◆ fFile. TFile* TDirectoryFile::fFile {nullptr}. protected . Pointer to current file in memory. ; Definition at line 45 of file TDirectoryFile.h. ◆ fKeys. TList* TDirectoryFile::fKeys {nullptr}. protected . Pointer to keys list in memory. ; Definition at line 46 of file TDirectoryFile.h. ◆ fModified. Bool_t TDirectoryFile::fModified {kFALSE}. protected . True if directory has been modified. ; Definition at line 35 of file TDirectoryFile.h. ◆ fNbytesKeys. Int_t TDirectoryFile::fNbytesKeys {0}. protected . Number of bytes for the keys. ; Definition at line 39 of file TDirectoryFile.h. ◆ fNbytesName. Int_t TDirectoryFile::fNbytesName {0}. protected . Number of bytes in TNamed at creation time. ; Definition at line 40 of file TDirectoryFile.h. ◆ fSeekDir. Long64_t TDirectoryFile::fSeekDir {0}. protected . Location of directory on file. ; Definition at line 42 of file TDirectoryFile.h. ◆ fSeekKeys. Long64_t TDirectoryFile::fSeekKeys {0}. protected . Location of Keys record on file. ; Definition at line 44 of file TDirectoryFile.h. ◆ fSeekParent. Long64_t TDirectoryFile::fSeekParent {0}. protected . Location of parent directory on file. ; Definition at line 43 of file TDirectoryFile.h. ◆ fWritable. Bool_t TDirectoryFile::fWritable {kFALSE}. protected . True if directory is writable. ; Definition at line 36 of file TDirectoryFile.h. Libraries for TDirectoryFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TDirectoryFile.h; io/io/src/TDirectoryFile.cxx. TDirectoryFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:57075,Guid,Guide,57075,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['Guid'],['Guide']
Usability,"eates :; // - a one dimensional histogram; // - a two dimensional histogram; // - a profile histogram; // - a tree; //; // These objects are filled with some random numbers and saved on a file.; ; #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h""; ; //__________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");; ; // Create some histograms and a profile histogram; TH1F hpx(""hpx"",""This is the px distribution"",100,-4,4);; TH2F hpxpy(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile hprof(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; ; // Define some simple structures; typedef struct {Float_t x,y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; POINT point;; EVENTN eventn;; ; // Create a ROOT Tree; TTree tree(""T"",""An example of ROOT tree with a few branches"");; tree.Branch(""point"",&point,""x:y:z"");; tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);; ; Float_t px,py,pz;; ; // Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; const auto random = gRandom->::Rndm(1);; ; // Fill histograms; hpx.Fill(px);; hpxpy.Fill(px,py,1);; hprof.Fill(px,pz,1);; ; // Fill structures; point.x = 10*(random-1);; point.y = 5*random;; point.z = 20*random;; eventn.ntrack = Int_t(100*random);; eventn.nseg = Int_t(2*eventn.ntrack);; eventn.nvertex = 1;; eventn.flag = Int_t(random+0.5);; eventn.temperature = 20+random;; ; // Fill the tree. For each event, save ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:12629,simpl,simple,12629,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['simpl'],['simple']
Usability,"eation date, 3 - file modification date; utc - select timeZone to ‘UTC’; datex - X position of date; datey - Y position of date; optfile - plot file name on the canvas, 1 - file name, 2 - full file URL, 3 - object item name; opttitle - disable/enable drawing of object title in the canvas; nomenu - disable context menu; notouch - disable touch events handling; progress - switch progress display mode between ‘off’, ‘on’ and ‘modal’. For instance:. https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx;1; https://root.cern/js/latest/?file=../files/hsimple.root&nobrowser&item=hpxpy;1&opt=colz; https://root.cern/js/latest/?file=../files/hsimple.root&noselect&layout=grid2x2&item=hprof;1. Following layouts are supported:. simple - available space used for single object (default); flex - creates as many frames as necessary, each can be individually moved/enlarged; tabs - tabs for each object drawing; gridNxM - fixed-size grid with NxM frames; vertN - N frames sorted in vertical direction (like gridi1xN); horizN - N frames sorted in horizontal direction (like gridiNx1); vert121 - 3 frames sorted in vertical direction, second frame divided on two sub-frames; horiz32_12 - 2 horizontal frames with 3 and 2 subframes, and 1/3 and 2/3 as relative size. When specifying files, items or opts parameters, array of strings could be provided like files=['file1.root','file2.root']. One could skip quotes when specifying elements names items=[file1.root/hpx,file2.root/hpy] or opts=['',colz].; As item name, URL to existing image can be provided like item=img:http://server/image.png. Such image will be just inserted in the existing layout. One could specify option ""scale"" to automatically scale image to available space.; Many examples of URL string usage can be found on JSROOT API examples page.; One can very easy integrate JSROOT graphic into arbitrary HTML pages using a iframe tag:; <iframe width=""700"" height=""400""; src=""https://root.cern/js/latest/?nobrowser&file=https://root.cern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:4353,simpl,simple,4353,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['simpl'],['simple']
Usability,"eb.c. ◆ cryptolib_dll_handle. void* cryptolib_dll_handle. static . Definition at line 16019 of file civetweb.c. ◆ cryptolib_users. volatile ptrdiff_t cryptolib_users. static . Initial value:=; 0. Definition at line 16028 of file civetweb.c. ◆ default_port. unsigned default_port. Definition at line 17537 of file civetweb.c. ◆ ext_len. size_t ext_len. Definition at line 8026 of file civetweb.c. ◆ extension. const char* extension. Definition at line 8025 of file civetweb.c. ◆ global_lock_mutex. pthread_mutex_t global_lock_mutex. static . Definition at line 1086 of file civetweb.c. ◆ http_methods. const struct mg_http_method_info http_methods[]. static . Definition at line 10508 of file civetweb.c. ◆ mg_init_library_called. int mg_init_library_called = 0. static . Definition at line 1549 of file civetweb.c. ◆ mime_type. const char* mime_type. Definition at line 8027 of file civetweb.c. ◆ month_names. const char month_names[][4]. static . Initial value:= {""Jan"",; ""Feb"",; ""Mar"",; ""Apr"",; ""May"",; ""Jun"",; ""Jul"",; ""Aug"",; ""Sep"",; ""Oct"",; ""Nov"",; ""Dec""}. Definition at line 1806 of file civetweb.c. ◆ proto. const char* proto. Definition at line 17535 of file civetweb.c. ◆ proto_len. size_t proto_len. Definition at line 17536 of file civetweb.c. ◆ pthread_mutex_attr. pthread_mutexattr_t pthread_mutex_attr. static . Definition at line 1071 of file civetweb.c. ◆ ssl_mutexes. pthread_mutex_t* ssl_mutexes. static . Definition at line 15664 of file civetweb.c. ◆ ssllib_dll_handle. void* ssllib_dll_handle. static . Definition at line 16018 of file civetweb.c. ◆ static_assert_replacement. char static_assert_replacement. Definition at line 123 of file civetweb.c. ◆ sTlsKey. pthread_key_t sTlsKey. static . Definition at line 1572 of file civetweb.c. ◆ thread_idx_max. volatile ptrdiff_t thread_idx_max = 0. static . Definition at line 1573 of file civetweb.c. nethttpcivetwebcivetweb.c. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c.html:92790,Guid,Guide,92790,doc/master/civetweb_8c.html,https://root.cern,https://root.cern/doc/master/civetweb_8c.html,1,['Guid'],['Guide']
Usability,"ebSystem::GetPathInfo ; (; const char * ; path, . FileStat_t & ; buf . ). overridevirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 1522 of file TWebFile.cxx. ◆ IsA(). TClass * TWebSystem::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSystem.; Definition at line 118 of file TWebFile.h. ◆ MakeDirectory(). Int_t TWebSystem::MakeDirectory ; (; const char * ; name). overridevirtual . Make a directory via httpd. Not supported. ; Reimplemented from TSystem.; Definition at line 1469 of file TWebFile.cxx. ◆ OpenDirectory(). void * TWebSystem::OpenDirectory ; (; const char * ; name). overridevirtual . Open a directory via httpd. ; Returns an opaque pointer to a dir structure. Returns 0 in case of error. ; Reimplemented from TSystem.; Definition at line 1478 of file TWebFile.cxx. ◆ Streamer(). void TWebSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSystem. ◆ StreamerNVirtual(). void TWebSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file TWebFile.h. ◆ Unlink(). Int_t TWebSystem::Unlink ; (; const char * ; path). overridevirtual . Unlink, i.e. ; remove, a file or directory. Returns 0 when successful, -1 in case of failure. Not supported for httpd. ; Reimplemented from TSystem.; Definition at line 1565 of file TWebFile.cxx. Member Data Documentation. ◆ fDirp. void* TWebSystem::fDirp. private . Definition at line 102 of file TWebFile.h. Libraries for TWebSystem:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TWebFile.h; net/net/src/TWebFile.cxx. TWebSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebSystem.html:37324,Guid,Guide,37324,doc/master/classTWebSystem.html,https://root.cern,https://root.cern/doc/master/classTWebSystem.html,1,['Guid'],['Guide']
Usability,"ec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 1504~~~; 1505 ; 1506or directly the filename:; 1507 ; 1508~~~{.python}; 1509df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); 1510~~~; 1511 ; 1512An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; 1513provides a corresponding exemplary JSON file for the dataset specification.; 1514 ; 1515\anchor progressbar; 1516### Adding a progress bar ; 1517 ; 1518A progress bar showing the processed event statistics can be added to any RDataFrame program.; 1519The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; 1520and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; 1521n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. ; 1522 ; 1523ProgressBar is added after creating the dataframe object (df):; 1524~~~{.cpp}; 1525ROOT::RDataFrame df(""tree"", ""file.root"");; 1526ROOT::RDF::Experimental::AddProgressBar(df);; 1527~~~; 1528 ; 1529Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; 1530For example, it can be called at any computational node, such as Filter or Define, not only the head node,; 1531with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:85552,progress bar,progress bar,85552,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,2,['progress bar'],['progress bar']
Usability,"ec"": 1.5,; 1526 ""sample_category"" = ""MC_background""; 1527 }; 1528 }; 1529 }; 1530}; 1531~~~; 1532 ; 1533The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1534For example, to access luminosity information (stored as a double):; 1535 ; 1536~~~{.python}; 1537df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1538~~~; 1539 ; 1540or sample_category information (stored as a string):; 1541 ; 1542~~~{.python}; 1543df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 1544~~~; 1545 ; 1546or directly the filename:; 1547 ; 1548~~~{.python}; 1549df.DefinePerSample(""name"", ""rdfsampleinfo_.GetSampleName()""); 1550~~~; 1551 ; 1552An example implementation of the ""FromSpec"" method is available in tutorial: df106_HiggstoFourLeptons.py, which also; 1553provides a corresponding exemplary JSON file for the dataset specification.; 1554 ; 1555\anchor progressbar; 1556### Adding a progress bar ; 1557 ; 1558A progress bar showing the processed event statistics can be added to any RDataFrame program.; 1559The event statistics include elapsed time, currently processed file, currently processed events, the rate of event processing ; 1560and an estimated remaining time (per file being processed). It is recorded and printed in the terminal every m events and every ; 1561n seconds (by default m = 1000 and n = 1). The ProgressBar can be also added when the multithread (MT) mode is enabled. ; 1562 ; 1563ProgressBar is added after creating the dataframe object (df):; 1564~~~{.cpp}; 1565ROOT::RDataFrame df(""tree"", ""file.root"");; 1566ROOT::RDF::Experimental::AddProgressBar(df);; 1567~~~; 1568 ; 1569Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility ; 1570For example, it can be called at any computational node, such as Filter or Define, not only the head node,; 1571with no change to the ProgressBar function itself (please see the [Efficient analysis in Python](#python) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:87232,progress bar,progress bar,87232,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,2,['progress bar'],['progress bar']
Usability,"ec(""print1+1"");; 2. // create a TBrowser on the Python side, and transfer it back and forth; root[] TBrowser* b = (void*)TPython::Eval(""ROOT.TBrowser()"");; (class TObject*)0x8d1daa0; root[] TPython::Bind(b,""b"");. // builtin variables can cross-over (after the call i==2); root[] int i = TPython::Eval( ""1+1"" );; root[] i; (int)2; 19.1.4 Installation; There are several ways of obtaining PyROOT, and which is best depends on your specific situation. If you work at CERN, you can use the installation available on afs. Otherwise, you will want to build from source, as PyROOT is not build by default in the binaries distributed from the ROOT project site. If you download the ROOT binaries, take care to download and install the Python distribution from http://www.python.org/ against which they were built.; 19.1.4.1 Environment Settings; ROOT installations with the build of PyROOT enabled are available from the CERN afs cell /afs/cern.ch/sw/root/<version>/<platform>. To use them, simply modify your shell environment accordingly. For Unix:; export PATH=$ROOTSYS/bin:$PYTHONDIR/bin:$PATH; export LD_LIBRARY_PATH=$ROOTSYS/lib:$PYTHONDIR/lib:$LD_LIBRARY_PATH; export PYTHONPATH=$ROOTSYS/lib:$PYTHONPATH; For Windows:; set PATH=%ROOTSYS%/bin;%PYTHONDIR%/bin;%PATH%; set PYTHONPATH=%ROOTSYS%/bin;%PYTHONPATH%; where $ROOTSYS should be set to /afs/cern.ch/sw/root/<version>/<platform>, and PYTHONDIR to /afs/cern.ch/sw/lcg/external/Python/2.3.4/<platform> with <version> and <platform> as appropriate. Note that the latest version of Python is 2.4.1.; 19.1.4.2 Building from Source; The standard installation instructions for building ROOT from source apply, with the addition that the build of PyROOT needs to be enabled at the configuration step. First, follow the instructions for obtaining and unpacking the source, and setting up the build environment.; Then, use the following command to configure the build process (of course, feel free to add any additional flags you may need):; $ ./configure <a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1047078,simpl,simply,1047078,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"ec, Double_t scale_width=0.)Draw a poly line in a Latex formula Is scale_width parameter >=1, fill area will be drawn Otherwise l...Definition TLatex.cxx:1970; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLatex::fFactorSizeDouble_t fFactorSize! Relative size of subscripts and superscriptsDefinition TLatex.h:62; TLatex::fErrorconst Char_t * fError! error codeDefinition TLatex.h:65; TLatex::fItalicBool_t fItalic! Currently inside italic operatorDefinition TLatex.h:69; TLatex::Paintvoid Paint(Option_t *option="""") overridePaint.Definition TLatex.cxx:2092; TLatex::AnalyseTLatexFormSize Analyse(Double_t x, Double_t y, const TextSpec_t &spec, const Char_t *t, Int_t length)Analyse and paint the TLatex formula.Definition TLatex.cxx:522; TLatex::CheckLatexSyntaxInt_t CheckLatexSyntax(TString &text)Check if the Latex syntax is correct.Definition TLatex.cxx:2322; TLatex::Savefsvoid Savefs(TLatexFormSize *fs)Save fs values in array fTabSize.Definition TLatex.cxx:2703; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TTextBase class for several text objects.Definition TText.h:22; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; f1TF1 * f1Definition legend1.C:11; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TLatex::TextSpec_tTLatex helper struct holding the attributes of a piece of text.Definition TLatex.h:24; TLatex::TextSpec_t::fFontInt_t fFontDefinition TLatex.h:26; TLatex::TextSpec_t::fSizeDouble_t fSizeDefinition TLatex.h:25; TLatex::TextSpec_t::fAngleDouble_t fAngleDefinition TLatex.h:25; TLatex::TextSpec_t::fColorInt_t fColorDefinition TLatex.h:26. graf2dgrafincTLatex.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8h_source.html:14792,Guid,Guide,14792,doc/master/TLatex_8h_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8h_source.html,1,['Guid'],['Guide']
Usability,"ecay of the top elements composi...Definition TGeoMaterial.cxx:1312; TGeoMixture::AveragePropertiesvoid AverageProperties()Compute effective A/Z and radiation length.Definition TGeoMaterial.cxx:829; TGeoMixture::fNelementsInt_t fNelementsDefinition TGeoMaterial.h:162; TGeoMixture::Printvoid Print(const Option_t *option="""") const overrideprint characteristics of this materialDefinition TGeoMaterial.cxx:1190; TGeoMixture::GetWmixtDouble_t * GetWmixt() constDefinition TGeoMaterial.h:204; TGeoMixture::GetSpecificActivityDouble_t GetSpecificActivity(Int_t i=-1) const overrideGet specific activity (in Bq/gram) for the whole mixture (no argument) or for a given component.Definition TGeoMaterial.cxx:1141; TGeoMixture::fNatomsInt_t * fNatomsDefinition TGeoMaterial.h:166; TGeoMixture::SetAvoid SetA(Double_t a) overrideDefinition TGeoMaterial.h:212; TGeoMixture::fWeightsDouble_t * fWeightsDefinition TGeoMaterial.h:165; TGeoMixture::DefineElementvoid DefineElement(Int_t iel, Double_t a, Double_t z, Double_t weight)Definition TGeoMaterial.h:226; TGeoMixture::GetAmixtDouble_t * GetAmixt() constDefinition TGeoMaterial.h:203; TListA doubly linked list.Definition TList.h:38; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; bool; double; int. geomgeomincTGeoMaterial.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMaterial_8h_source.html:27262,Guid,Guide,27262,doc/master/TGeoMaterial_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMaterial_8h_source.html,1,['Guid'],['Guide']
Usability,"eceiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TTipDelayTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTipDelayTimer(). TTipDelayTimer::TTipDelayTimer ; (; TGToolTip * ; tip, . Long_t ; ms . ). inline . Definition at line 60 of file TGToolTip.cxx. Member Function Documentation. ◆ Notify(). Bool_t TTipDelayTimer::Notify ; (; ). overridevirtual . Notify when timer times out and reset the timer. ; Reimplemented from TTimer.; Definition at line 67 of file TGToolTip.cxx. Member Data Documentation. ◆ fTip. TGToolTip* TTipDelayTimer::fTip. private . Definition at line 58 of file TGToolTip.cxx. gui/gui/src/TGToolTip.cxx. TTipDelayTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTipDelayTimer.html:17778,Guid,Guide,17778,doc/master/classTTipDelayTimer.html,https://root.cern,https://root.cern/doc/master/classTTipDelayTimer.html,1,['Guid'],['Guide']
Usability,"ecifies the generator algorithm we will use. ; A code of zero indicates that we cannot generate any of the directVars (in this case, nothing should be added to generatedVars). Any non-zero codes will be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 534 of file RooGaussModel.cxx. ◆ IsA(). TClass * RooGaussModel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 71 of file RooGaussModel.h. ◆ Streamer(). void RooGaussModel::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooGaussModel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file RooGaussModel.h. Member Data Documentation. ◆ _asympInt. bool RooGaussModel::_asympInt = false. private . Definition at line 64 of file RooGaussModel.h. ◆ _flatSFInt. bool RooGaussModel::_flatSFInt = false. private . Definition at line 62 of file RooGaussModel.h. ◆ mean. RooRealProxy RooGaussModel::mean. private . Definition at line 66 of file RooGaussModel.h. ◆ msf. RooRealProxy RooGaussModel::msf. private . Definition at line 68 of file RooGaussModel.h. ◆ sigma. RooRealProxy RooGaussModel::sigma. private . Definition at line 67 of file RooGaussModel.h. ◆ ssf. RooRealProxy RooGaussModel::ssf. private . Definition at line 69 of file RooGaussModel.h. Libraries for RooGaussModel:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooGaussModel.h; roofit/roofit/src/RooGaussModel.cxx. RooGaussModel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:83440,Guid,Guide,83440,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,1,['Guid'],['Guide']
Usability,"eckShape() ; Definition at line 651 of file TGeoVolume.cxx. ◆ CheckShapes(). void TGeoVolume::CheckShapes ; (; ). check for negative parameters in shapes. ; Definition at line 676 of file TGeoVolume.cxx. ◆ Class(). static TClass * TGeoVolume::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoVolume::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoVolume::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 256 of file TGeoVolume.h. ◆ CleanAll(). void TGeoVolume::CleanAll ; (; ). Clean data of the volume. ; Definition at line 659 of file TGeoVolume.cxx. ◆ ClearNodes(). void TGeoVolume::ClearNodes ; (; ). inline . Definition at line 95 of file TGeoVolume.h. ◆ ClearShape(). void TGeoVolume::ClearShape ; (; ). Clear the shape of this volume from the list held by the current manager. ; Definition at line 668 of file TGeoVolume.cxx. ◆ ClearThreadData(). void TGeoVolume::ClearThreadData ; (; ); const. virtual . Reimplemented in TGeoVolumeAssembly.; Definition at line 425 of file TGeoVolume.cxx. ◆ CloneNodesAndConnect(). void TGeoVolume::CloneNodesAndConnect ; (; TGeoVolume * ; newmother); const. Clone the array of nodes. ; Definition at line 1880 of file TGeoVolume.cxx. ◆ CloneVolume(). TGeoVolume * TGeoVolume::CloneVolume ; (; ); const. virtual . Clone this volume. ; build a volume with same name, shape and medium ; Reimplemented in TGeoVolumeAssembly.; Definition at line 1831 of file TGeoVolume.cxx. ◆ Contains(). Bool_t TGeoVolume::Contains ; (; const Double_t * ; point); const. inline . Definition at line 104 of file TGeoVolume.h. ◆ CountNodes(). Int_t TGeoVolume::CountNodes ; (; Int_t ; nlevels = 1000, . Int_t ; option = 0 . ). Count total number of subnodes starting from this volume, nlevels down. . option = 0 (default) - count only once per volume; option = 1 - count every time; option = 2 - count volumes on visible br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:44547,Clear,ClearThreadData,44547,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['Clear'],['ClearThreadData']
Usability,"eckSumUInt_t GetCheckSum() const overrideDefinition TStreamerInfo.h:159; TStreamerInfo::BuildCheckvoid BuildCheck(TFile *file=nullptr, Bool_t load=kTRUE) overrideCheck if built and consistent with the class dictionary.Definition TStreamerInfo.cxx:729; TStreamerInfo::Classstatic TClass * Class(); TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::InsertTString & Insert(Ssiz_t pos, const char *s)Definition TString.h:661; TString::AtoiInt_t Atoi() constReturn integer value of string.Definition TString.cxx:1988; TString::EndsWithBool_t EndsWith(const char *pat, ECaseCompare cmp=kExact) constReturn true if string ends with the specified string.Definition TString.cxx:2244; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::Dataconst char * Data() constDefinition TString.h:376; TString::IsDigitBool_t IsDigit() constReturns true if all characters in string are digits (0-9) or white spaces, i.e.Definition TString.cxx:1830; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::kIgnoreCase@ kIgnoreCaseDefinition TString.h:277; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:244167,Clear,Clearvoid,244167,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,3,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ecksumVect->push_back( chksum );; 925 }; 926 return kTRUE;; 927}; 928 ; 929////////////////////////////////////////////////////////////////////////////////; 930/// Parse the checksum in the given string. Returns either the checksum or zero; 931/// if the string is not a hex or decimal number.; 932 ; 933UInt_t TSchemaRule::ParseChecksum(const char* checksum) const {; 934 std::istringstream converter(checksum);; 935 UInt_t chksum;; 936 converter >> std::hex >> chksum;; 937 if (converter.fail()) {; 938 converter.clear();; 939 converter.seekg(0);; 940 converter >> std::dec >> chksum;; 941 }; 942 ; 943 if( converter.fail() ) {; 944 return 0u;; 945 }; 946 ; 947 return chksum;; 948}; 949 ; 950////////////////////////////////////////////////////////////////////////////////; 951/// Split the list as a comma separated list into a TObjArray of TObjString.; 952 ; 953void TSchemaRule::ProcessList( TObjArray* array, const TString& list ); 954{; 955 std::list<std::string> elems;; 956 std::list<std::string>::iterator it;; 957 Internal::TSchemaRuleProcessor::SplitList( (const char*)list, elems );; 958 ; 959 array->Clear();; 960 ; 961 if( elems.empty() ); 962 return;; 963 ; 964 for( it = elems.begin(); it != elems.end(); ++it ) {; 965 TObjString *str = new TObjString;; 966 *str = it->c_str();; 967 array->Add( str );; 968 }; 969}; 970 ; 971////////////////////////////////////////////////////////////////////////////////; 972/// Split the list as a declaration into as a TObjArray of TNamed(name,type).; 973 ; 974void TSchemaRule::ProcessDeclaration( TObjArray* array, const TString& list ); 975{; 976 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> > elems;; 977 std::list<std::pair<ROOT::Internal::TSchemaType,std::string> >::iterator it;; 978 Internal::TSchemaRuleProcessor::SplitDeclaration( (const char*)list, elems );; 979 ; 980 array->Clear();; 981 ; 982 if( elems.empty() ); 983 return;; 984 ; 985 for( it = elems.begin(); it != elems.end(); ++it ) {; 986 TSources *type = new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:31233,Clear,Clear,31233,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Clear'],['Clear']
Usability,"eclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 52 of file TXMLPlayer.h. ◆ ElementGetter(). const char * TXMLPlayer::ElementGetter ; (; TClass * ; cl, . const char * ; membername, . int ; specials = 0 . ). protected . produce code to access member of given class. ; Parameter specials has following meaning: 0 - nothing special 1 - cast to data type 2 - produce pointer on given member 3 - skip casting when produce pointer by buf.P() function ; Definition at line 333 of file TXMLPlayer.cxx. ◆ ElementSetter(). const char * TXMLPlayer::ElementSetter ; (; TClass * ; cl, . const char * ; membername, . char * ; endch . ). protected . Produce code to set value to given data member. ; endch should be output after value is specified. ; Definition at line 392 of file TXMLPlayer.cxx. ◆ GetBasicTypeName(). TString TXMLPlayer::GetBasicTypeName ; (; TStreamerElement * ; el). protected . return simple data types for given TStreamerElement object ; Definition at line 260 of file TXMLPlayer.cxx. ◆ GetBasicTypeReaderMethodName(). TString TXMLPlayer::GetBasicTypeReaderMethodName ; (; Int_t ; type, . const char * ; realname . ). protected . return functions name to read simple data type from xml file ; Definition at line 293 of file TXMLPlayer.cxx. ◆ GetMemberTypeName(). TString TXMLPlayer::GetMemberTypeName ; (; TDataMember * ; member). protected . returns name of simple data type for given data member ; Definition at line 222 of file TXMLPlayer.cxx. ◆ GetStreamerName(). TString TXMLPlayer::GetStreamerName ; (; TClass * ; cl). protected . returns streamer function name for given class ; Definition at line 150 of file TXMLPlayer.cxx. ◆ IsA(). TClass * TXMLPlayer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 52 of file TXMLPlayer.h. ◆ ProduceCode(). Bool_t TXMLPlayer::ProduceCode ; (; TList * ; cllist, . const char * ; filename . ). Produ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLPlayer.html:13589,simpl,simple,13589,doc/master/classTXMLPlayer.html,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html,1,['simpl'],['simple']
Usability,"eclare tb...Definition EExecutionPolicy.hxx:4; ROOT::GetDelayedAddClassAlternatestd::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate()Definition TClassTable.cxx:254; ROOT::AddClassAlternateROOT::TClassAlt * AddClassAlternate(const char *normName, const char *alternate)Global function called by GenerateInitInstance.Definition TClassTable.cxx:918; ROOT::GetDelayedAddClassstd::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass()Definition TClassTable.cxx:248; ROOT::RemoveClassvoid RemoveClass(const char *cname, TClass *cl)Global function called by the dtor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:985; ROOT::AddClassvoid AddClass(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Global function called by the ctor of a class's init class (see the ClassImp macro).Definition TClassTable.cxx:896; ROOT::RegisterClassTemplateTNamed * RegisterClassTemplate(const char *name, const char *file, Int_t line)Global function to register the implementation file and line of a class template (i....Definition TClassTable.cxx:1005; ROOT::ClassTableHashstatic UInt_t ClassTableHash(const char *name, UInt_t size)Definition TClassTable.cxx:237; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472; ROOT::RemoveClassAlternatevoid RemoveClassAlternate(ROOT::TClassAlt *)Definition TClassTable.cxx:931; TClassEdit::IsStdClassbool IsStdClass(const char *type)return true if the class belongs to the std namespaceDefinition TClassEdit.cxx:1418; TClassEdit::GetNormalizedNamevoid GetNormalizedName(std::string &norm_name, std::string_view name)Return the normalized name.Definition TClassEdit.cxx:854. corecontsrcTClassTable.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClassTable_8cxx_source.html:50687,Guid,Guide,50687,doc/v632/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClassTable_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html:3355,Guid,Guide,3355,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,1,['Guid'],['Guide']
Usability,"ect 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofPlayerRemote.html:19364,feedback,feedback,19364,root/html532/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html532/TProofPlayerRemote.html,4,['feedback'],['feedback']
Usability,"ect () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo parameters. ;  ; virtual void SetName (const char *name);  Sets name of the command. ;  ; virtual void SetRedoArgs (Int_t nargs,...);  Set redo parameters. ;  ; virtual void SetTitle (const char *title);  Sets description of the command. ;  ; virtual void SetUndoArgs (Int_t nargs,...);  Set undo parameters. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void AddAfter (const TObject *after",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:3985,Undo,Undo,3985,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['Undo'],['Undo']
Usability,"ect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t MakeSelector (const char *selfile);  Create the selector object and save the relevant files and binary information in the cache so that the worker can pick it up. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayerRemote; TProof * GetProof () const;  ; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void SetupFeedback () override;  Setup reportin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:21109,feedback,feedback,21109,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['feedback'],['feedback']
Usability,"ect * ; obj, . const char * ; label = """", . Option_t * ; option = ""lpf"" . ). Add a new entry to this legend. ; ""obj"" is the object to be represented. ""label"" is the text you wish to associate with obj in the legend. If ""label"" is null or empty, the title of the object will be used.; Options are:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified . Definition at line 320 of file TLegend.cxx. ◆ Class(). static TClass * TLegend::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLegend::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLegend::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file TLegend.h. ◆ Clear(). void TLegend::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear all entries in this legend, including the header. ; Reimplemented from TObject.; Definition at line 379 of file TLegend.cxx. ◆ Copy(). void TLegend::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this legend into ""obj"". ; Reimplemented from TBox.; Definition at line 388 of file TLegend.cxx. ◆ DeclFileName(). static const char * TLegend::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 82 of file TLegend.h. ◆ DeleteEntry(). void TLegend::DeleteEntry ; (; ). virtual . Delete entry at the mouse position. ; Definition at line 413 of file TLegend.cxx. ◆ Draw(). void TLegend::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this legend with its current attributes. ; Reimplemented from TBox.; Definition at line 425 of file TLegend.cxx. ◆ EditEntryAttFill(). void TLegend::EditEntryAttFill ; (; ). virtual . Edit the fill attribu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:37530,Clear,Clear,37530,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['Clear'],['Clear']
Usability,"ect ; Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 175 of file TTreeCache.h. ◆ IsAutoCreated(). bool TTreeCache::IsAutoCreated ; (; ); const. inline . Definition at line 150 of file TTreeCache.h. ◆ IsEnabled(). virtual bool TTreeCache::IsEnabled ; (; ); const. inlinevirtual . Definition at line 151 of file TTreeCache.h. ◆ IsLearning(). bool TTreeCache::IsLearning ; (; ); const. inlineoverridevirtual . Reimplemented from TFileCacheRead.; Definition at line 152 of file TTreeCache.h. ◆ LearnBranch(). Int_t TTreeCache::LearnBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2250 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:43527,Learn,LearnPrefill,43527,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['Learn'],['LearnPrefill']
Usability,"ect ; Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 175 of file TTreeCache.h. ◆ IsAutoCreated(). bool TTreeCache::IsAutoCreated ; (; ); const. inline . Definition at line 150 of file TTreeCache.h. ◆ IsEnabled(). virtual bool TTreeCache::IsEnabled ; (; ); const. inlinevirtual . Definition at line 151 of file TTreeCache.h. ◆ IsLearning(). bool TTreeCache::IsLearning ; (; ); const. inlineoverridevirtual . Reimplemented from TFileCacheRead.; Definition at line 152 of file TTreeCache.h. ◆ LearnBranch(). Int_t TTreeCache::LearnBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2251 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:43531,Learn,LearnPrefill,43531,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['Learn'],['LearnPrefill']
Usability,"ect and applies a string filter; ROOT::RDF::RNode AddFilter(ROOT::RDF::RNode node, string_view filterStr); {; return node.Filter(filterStr);; }; ; void df025_RNode(); {; ROOT::RDataFrame df(8);; ; // Using the generic AddFilter helper function defined above: RNode in, RNode out; auto f1 = AddFilter(df, ""rdfentry_ > 0"");; auto f2 = f1.Filter([](ULong64_t e) { return e > 1; }, {""rdfentry_""});; ; // Conditionally applying a filter is simple with ROOT::RDF::RNode; bool someCondition = true;; auto maybe_filtered = ROOT::RDF::RNode(f2);; if (someCondition); maybe_filtered = maybe_filtered.Filter(""rdfentry_ > 3"");; ; // Adding new columns with Define in a loop is simple thanks to ROOT::RDF::RNode; auto with_columns = ROOT::RDF::RNode(maybe_filtered);; for (auto i = 0; i < 3; ++i); with_columns = with_columns.Define(""x"" + std::to_string(i), ""42"");; ; // RNodes can be used exactly like any other RDF object; std::cout << ""Entries passing the selection: "" << with_columns.Count().GetValue() << std::endl;; }; e#define e(i)Definition RSha256.hxx:103; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; f1TF1 * f1Definition legend1.C:11; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; ; Entries passing the selection: 4; DateJune 2020 ; AuthorsDanilo Piparo, Enrico Guiraud (CERN) ; Definition in file df025_RNode.C. tutorialsdataframedf025_RNode.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df025__RNode_8C.html:2565,Guid,Guide,2565,doc/master/df025__RNode_8C.html,https://root.cern,https://root.cern/doc/master/df025__RNode_8C.html,1,['Guid'],['Guide']
Usability,"ect can be requested and displayed in the web browser. There are many benefits of such approach:. standard http interface to ROOT application; no any temporary ROOT files to access data; user interface running in all browsers. 1.1 Starting the HTTP server; To start the http server, at any time, create an instance of the THttpServer class like:; serv = new THttpServer(""http:8080"");; This will start a civetweb-based http server on the port 8080. Then one should be able to open the address “http://localhost:8080” in any modern browser (IE9, Firefox, Chrome, Opera) and browse objects created in application. By default, the server can access files, canvases, and histograms via the gROOT pointer. All those objects can be displayed with JSROOT graphics.; There is a snapshot (frozen copy) of such server, running in tutorials/http/httpserver.C macro from ROOT tutorial.; <iframe width=“800” height=“500” src=“https://root.cern.ch/js/3.6/httpserver.C/?layout=simple&item=Canvases/c1”> ; One could specify several options when creating http server. They could be add as additional URL parameters to the constructor arguments like:; serv = new THttpServer(""http:8080?loopback&thrds=2"");; Following parameters are supported:. thrds=N - number of threads used by the civetweb (default is 5); top=name - configure top name, visible in the web browser; auth_file=filename - authentication file name, created with htdigets utility; auth_domain=domain - authentication domain; loopback - bind specified port to loopback 127.0.0.1 address; debug - enable debug mode, server always returns html page with request info. If necessary, one could bind http server to specific IP address like:; new THttpServer(""http:192.168.1.17:8080""); 1.2 Registering objects; At any time, one could register other objects with the command:; TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; One should specify sub-folder name, where objects will be registered. If sub-folder name does",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:1776,simpl,simple,1776,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,1,['simpl'],['simple']
Usability,"ect editor in a transient frame. Closing these transient frames will not delete, but just hide existing opened editors for later reuse. Their lifetime is determined by the canvas to which the manager editor is attached to, since these will be destroyed together. Editors for shapes, materials, media, matrices; For most editors, the functionalities Apply and Undo are provided.; For shapes, changing any of the shape parameters will activate the ""Apply"" button only if the check button ""Delayed draw"" is checked, otherwise the changes are immediately applied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The ""Undo"" button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the ""Undo"" does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable. Creation of New Objects; As described above, all geometry object creators are accessible within the geometry manager editor frame. Generally, if the new object that needs to be created does not depend on other objects, it will be built with a set of default parameters. This is the case for all shapes (except composite shapes) and matrices. For all the other objects the interface forces the selection of components b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:141323,undo,undoable,141323,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['undo'],['undoable']
Usability,"ect of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Terminate ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProofDriverSelector.html:3249,Clear,Clear,3249,doc/master/classRooProofDriverSelector.html,https://root.cern,https://root.cern/doc/master/classRooProofDriverSelector.html,1,['Clear'],['Clear']
Usability,"ect stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGMimeTypes.h>. Inheritance diagram for TGMime:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGMime(). TGMime::TGMime ; (; ). inline . Definition at line 42 of file TGMimeTypes.h. ◆ ~TGMime(). TGMime::~TGMime ; (; ). override . Delete mime object. ; Definition at line 336 of file TGMimeTypes.cxx. Friends And Related Symbol Documentation. ◆ TGMimeTypes. friend class TGMimeTypes. friend . Definition at line 31 of file TGMimeTypes.h. Member Data Documentation. ◆ fAction. TString TGMime::fAction. private . associated action ; Definition at line 36 of file TGMimeTypes.h. ◆ fIcon. TString TGMime::fIcon. private . associated icon (32x32) ; Definition at line 37 of file TGMimeTypes.h. ◆ fPattern. TString TGMime::fPattern. private . filename pattern ; Definition at line 35 of file TGMimeTypes.h. ◆ fReg. TRegexp* TGMime::fReg. private . pattern regular expression ; Definition at line 39 of file TGMimeTypes.h. ◆ fSIcon. TString TGMime::fSIcon. private . associated small icon (16x16) ; Definition at line 38 of file TGMimeTypes.h. ◆ fType. TString TGMime::fType. private . mime type ; Definition at line 34 of file TGMimeTypes.h. Libraries for TGMime:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMimeTypes.h; gui/gui/src/TGMimeTypes.cxx. TGMime. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMime.html:11337,Guid,Guide,11337,doc/master/classTGMime.html,https://root.cern,https://root.cern/doc/master/classTGMime.html,1,['Guid'],['Guide']
Usability,"ect to be managed by the user ;  ; virtual bool ReInit ()=0;  re-initialize an existing the workspace ;  ; virtual void SetOptions (const ROOT::Math::IOptions &)=0;  set options ;  ; virtual MCIntegration::Type Type () const =0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLMCIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMCIntegrationWorkspace(). ROOT::Math::GSLMCIntegrationWorkspace::GSLMCIntegrationWorkspace ; (; ). inline . Definition at line 53 of file GSLMCIntegrationWorkspace.h. ◆ ~GSLMCIntegrationWorkspace(). virtual ROOT::Math::GSLMCIntegrationWorkspace::~GSLMCIntegrationWorkspace ; (; ). inlinevirtual . Definition at line 55 of file GSLMCIntegrationWorkspace.h. Member Function Documentation. ◆ Clear(). virtual void ROOT::Math::GSLMCIntegrationWorkspace::Clear ; (; ). inlinevirtual . free the workspace deleting the GSL pointer ; Reimplemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace.; Definition at line 68 of file GSLMCIntegrationWorkspace.h. ◆ Init(). virtual bool ROOT::Math::GSLMCIntegrationWorkspace::Init ; (; size_t ; dim). pure virtual . initialize the workspace creating the GSL pointer if it is not there ; Implemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace. ◆ NDim(). virtual size_t ROOT::Math::GSLMCIntegrationWorkspace::NDim ; (; ); const. inlinevirtual . Reimplemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace.; Definition at line 59 of file GSLMCIntegrationWorkspace.h. ◆ Options(). virtual std::unique_ptr< ROOT::Math::IOptions > ROOT::Math:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html:1814,Clear,Clear,1814,doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html,1,['Clear'],['Clear']
Usability,"ect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix compu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:4764,learn,learning,4764,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,"ect&as_OBJ(UInt_t idx); static RooAbsPdf&as_PDF(UInt_t idx); static RooResolutionModel&as_RMODEL(UInt_t idx); static RooArgSetas_SET(UInt_t idx); static const char*as_STRING(UInt_t idx); static RooRealVar&as_VAR(UInt_t idx); static RooAbsRealLValue&as_VARLV(UInt_t idx); RooAbsArg&asARG(const char*); RooCategory&asCAT(const char*); RooAbsCategory&asCATFUNC(const char*); RooAbsCategoryLValue&asCATLV(const char*); RooAbsData&asDATA(const char*); RooDataHist&asDHIST(const char*); Double_tasDOUBLE(const char*); RooDataSet&asDSET(const char*); RooAbsReal&asFUNC(const char*); Int_tasINT(const char*); RooArgListasLIST(const char*); TObject&asOBJ(const char*); RooAbsPdf&asPDF(const char*); RooResolutionModel&asRMODEL(const char*); RooArgSetasSET(const char*); const char*asSTRING(const char*); RooRealVar&asVAR(const char*); RooAbsRealLValue&asVARLV(const char*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; RooAbsArg*createArg(const char* className, const char* objName, const char* varList); RooCategory*createCategory(const char* name, const char* stateNameList = 0); RooRealVar*createVariable(const char* name, Double_t xmin, Double_t xmax); vector<std::string>ctorArgs(const char* className); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:2592,Clear,Clear,2592,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,2,['Clear'],['Clear']
Usability,"ect's member function; TQRootGuiFactory Qt ROOT Gui factory; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQtApplication Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes ; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont < Create Qt QFont object based on ROOT TAttText attributes; TQtRootGuiFactory Factory for Qt-based ROOT GUI components; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TRFIOFile A ROOT file that reads/writes via a rfiod server; TRFIOSystem Directory handler for RFIO; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twistor; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:122559,Simpl,Simple,122559,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['Simpl'],['Simple']
Usability,"ect(name, tree);; if (tree) {; tree->Print();; return 0;; } else {; Error(""printTree()"", ""Cannot find tree %s!"", name);; return -1;; }; }. You can now run this as; .x printTree.C(file, ""MyTree"");. This is equivalent to; .L printTree.C; printTree(file, ""MyTree"");. Compiling; You can also have your code compiled into a shared library, simply by adding a ""+"" behind the file name:; .x printTree.C+(file, ""MyTree"");. In the above example this will fail: we need to add the #includes for he compiler to be able to understand the code, while the interpreter has a lot of contextual knowledge and can automatically include headers and load libraries.; Expressions; You saw that with "".x"", ROOT prints the result of running the function while when using "".L"" and calling th function it does not. The way to trigger the printing of expression results is by omitting the trailing semicolon:; TMath::Gaus(1., 1., 1.). will print; (Double_t) 1.000000e+00. Help!; For TMath::Gaus() as well as for any other ROOT class or function, please check ROOT's reference guide.; Try to find the documentation for TTree::Print()!; We have now covered the basics - let's look at the tree's data!; . ‹ 1. Extracting an object from a TFile; up; 4. Histogramming ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/2-running-code-root.html:3312,guid,guide,3312,d/2-running-code-root.html,https://root.cern,https://root.cern/d/2-running-code-root.html,1,['guid'],['guide']
Usability,"ect* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTObjArray::AddAt(TObject* obj, Int_t idx); virtual voidTObjArray::AddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tTObjArray::AddAtFree(TObject* obj); virtual voidTObjArray::AddBefore(const TObject* before, TObject* obj); virtual voidTObjArray::AddFirst(TObject* obj); virtual voidTObjArray::AddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TObjArray::At(Int_t i) const; virtual TObject*TObjArray::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual Int_tTObjArray::BinarySearch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObjArray::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidTObjArray::Compress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObjArray::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRefArray.html:1546,Clear,Clear,1546,root/html534/RooRefArray.html,https://root.cern,https://root.cern/root/html534/RooRefArray.html,2,['Clear'],['Clear']
Usability,"ect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  pyroot001_arrayInterface.py This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:142695,Simpl,Simple,142695,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['Simpl'],['Simple']
Usability,"ect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:138000,Simpl,Simple,138000,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['Simpl'],['Simple']
Usability,"ect::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAdjustSize(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); TCanvas*TCanvasImp::Canvas() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootCanvas.html:1720,Clear,Clear,1720,root/html528/TRootCanvas.html,https://root.cern,https://root.cern/root/html528/TRootCanvas.html,3,['Clear'],['Clear']
Usability,"ect::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:7163,Simpl,SimpleInterval,7163,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,2,['Simpl'],"['Simple', 'SimpleInterval']"
Usability,"ect::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMethod*fMethodpointer to a method. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Constructor.; Links a TBranchElement to a TMethod, allowing the TBrowser to; browse simple methods. The c'tor sets the name for a method ""Class::Method(params) const""; to ""Method(params)"", title to TMethod::GetPrototype. void GetBrowsableMethodsForClass(TClass* cl, TList& list); Given a class, this methods fills list with TMethodBrowsables; for the class and its base classes, and returns the number of; added elements. If called from a TBranch::Browse overload, ""branch""; should be set to the calling TBranch, otherwise ""parent"" should; be set to the TVirtualBranchBrowsable being browsed, and branch; should be the branch of the parent. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's class and its base classes, and returns; the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being brows",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMethodBrowsable.html:9597,simpl,simple,9597,root/html602/TMethodBrowsable.html,https://root.cern,https://root.cern/root/html602/TMethodBrowsable.html,2,['simpl'],['simple']
Usability,"ect::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMapfDescriptionMapstores the key, value pairs of the JDL; TMapfMapstores the key, value pairs of the JDL. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGridJDL(); Cleanup. void Clear(Option_t* = 0); Clears the JDL information. void SetValue(const char* key, const char* value); Sets a value. If the entry already exists the old one is replaced. const char * GetValue(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. void SetDescription(const char* key, const char* description); Sets a value. If the entry already exists the old one is replaced. const char * GetDescription(const char* key); Returns the value corresponding to the provided key. Return 0 in case; key is not found. TString AddQuotes(const char* value); Adds quotes to the provided string.; E.g. Value --> ""Value"". void AddToSet(const char* key, const char* value); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. void AddToSetDescription(const char* key, const char* description); Adds a value to a key value which hosts a set of values.; E.g. InputSandbox: {""file1"",""file2""}. TString Generate(); Generates the JDL snippet. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGridJDL.html:7506,Clear,Clear,7506,root/html528/TGridJDL.html,https://root.cern,https://root.cern/root/html528/TGridJDL.html,8,['Clear'],"['Clear', 'Clears']"
Usability,"ect::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts""; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void DrawProgressBar(); draws the progressbar. void DrawProgressBar(TString ); draws a string in the progress bar. void DrawProgressBar(Int_t , const TString& comment = """"); draws progress bar in color or B&W; caution:. TString SecToText(Double_t , Bool_t ) const; pretty string output. Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Timer.html:8094,progress bar,progress bar,8094,root/html604/TMVA__Timer.html,https://root.cern,https://root.cern/root/html604/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,"ect::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts""; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void DrawProgressBar(); draws the progressbar. void DrawProgressBar(TString ); draws a string in the progress bar. void DrawProgressBar(Int_t , const TString& comment = """"); draws progress bar in color or B&W; caution:. TString SecToText(Double_t , Bool_t ) const; pretty string output. Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Timer.html:8086,progress bar,progress bar,8086,root/html602/TMVA__Timer.html,https://root.cern,https://root.cern/root/html602/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,"ectID ; (; ); const. inline . Definition at line 42 of file RDisplayItem.hxx. ◆ ObjectIDFromPtr(). std::string RDisplayItem::ObjectIDFromPtr ; (; const void * ; ptr). static . Construct fillid using pointer value. ; Definition at line 37 of file RDisplayItem.cxx. ◆ SetIndex(). void ROOT::Experimental::RDisplayItem::SetIndex ; (; unsigned ; indx). inline . Definition at line 48 of file RDisplayItem.hxx. ◆ SetObjectID(). void ROOT::Experimental::RDisplayItem::SetObjectID ; (; const std::string & ; id). inline . Definition at line 41 of file RDisplayItem.hxx. ◆ SetObjectIDAsPtr(). void RDisplayItem::SetObjectIDAsPtr ; (; const void * ; ptr). Assign id using arbitrary pointer value Typically drawable pointer should be used here. ; Definition at line 21 of file RDisplayItem.cxx. ◆ SetStyle(). void ROOT::Experimental::RDisplayItem::SetStyle ; (; RStyle * ; style). inline . Definition at line 46 of file RDisplayItem.hxx. Member Data Documentation. ◆ fDummy. bool ROOT::Experimental::RDisplayItem::fDummy {false}. protected . if true, just placeholder for drawable which does not changed ; Definition at line 34 of file RDisplayItem.hxx. ◆ fIndex. unsigned ROOT::Experimental::RDisplayItem::fIndex {0}. protected . ! index inside current pad, used to produce fully-qualified id, not send to client ; Definition at line 33 of file RDisplayItem.hxx. ◆ fObjectID. std::string ROOT::Experimental::RDisplayItem::fObjectID. protected . unique object identifier ; Definition at line 31 of file RDisplayItem.hxx. ◆ fStyle. RStyle* ROOT::Experimental::RDisplayItem::fStyle {nullptr}. protected . style object ; Definition at line 32 of file RDisplayItem.hxx. Libraries for ROOT::Experimental::RDisplayItem:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RDisplayItem.hxx; graf2d/gpadv7/src/RDisplayItem.cxx. ROOTExperimentalRDisplayItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDisplayItem.html:4714,Guid,Guide,4714,doc/master/classROOT_1_1Experimental_1_1RDisplayItem.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDisplayItem.html,1,['Guid'],['Guide']
Usability,"ectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProofServ.h>. Inheritance diagram for TShutdownTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TShutdownTimer(). TShutdownTimer::TShutdownTimer ; (; TProofServ * ; p, . Int_t ; delay . ). Construtor. ; Definition at line 404 of file TProofServ.cxx. Member Function Documentation. ◆ Notify(). Bool_t TShutdownTimer::Notify ; (; ). overridevirtual . Handle expiration of the shutdown timer. ; In the case of low activity the process will be aborted. ; Implements TSysEvtHandler.; Definition at line 416 of file TProofServ.cxx. Member Data Documentation. ◆ fProofServ. TProofServ* TShutdownTimer::fProofServ. private . Definition at line 418 of file TProofServ.h. ◆ fTimeout. Int_t TShutdownTimer::fTimeout. private . Definition at line 419 of file TProofServ.h. proof/proof/inc/TProofServ.h; proof/proof/src/TProofServ.cxx. TShutdownTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTShutdownTimer.html:18107,Guid,Guide,18107,doc/master/classTShutdownTimer.html,https://root.cern,https://root.cern/doc/master/classTShutdownTimer.html,1,['Guid'],['Guide']
Usability,"ectWise! List of write action resulting from the compilation.; static Int_tfgCountNumber of TStreamerInfo instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerInfo(); Default ctor. TStreamerInfo(TClass* cl); Create a TStreamerInfo object. ~TStreamerInfo(); TStreamerInfo dtor. void Build(); Build the I/O data structure for the current class version.; A list of TStreamerElement derived classes is built by scanning; one by one the list of data members of the analyzed class. void BuildCheck(TFile* file = 0); Check if built and consistent with the class dictionary.; This method is called by TFile::ReadStreamerInfo. void BuildEmulated(TFile* file); Create an Emulation TStreamerInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStreamerInfo.html:16359,Clear,Clear,16359,root/html534/TStreamerInfo.html,https://root.cern,https://root.cern/root/html534/TStreamerInfo.html,1,['Clear'],['Clear']
Usability,ected . ! Coefficient error counter ; Definition at line 139 of file RooAddPdf.h. ◆ _coefList. RooListProxy RooAddPdf::_coefList. protected . List of coefficients. ; Definition at line 132 of file RooAddPdf.h. ◆ _copyOfLastNormSet. std::unique_ptr<const RooArgSet> RooAddPdf::_copyOfLastNormSet = nullptr. mutableprivate . ! ; Definition at line 146 of file RooAddPdf.h. ◆ _haveLastCoef. bool RooAddPdf::_haveLastCoef = false. protected . Flag indicating if last PDFs coefficient was supplied in the constructor. ; Definition at line 135 of file RooAddPdf.h. ◆ _idOfLastUsedNormSet. RooFit::UniqueId<RooArgSet>::Value_t RooAddPdf::_idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval. mutableprivate . ! ; Definition at line 145 of file RooAddPdf.h. ◆ _pdfList. RooListProxy RooAddPdf::_pdfList. protected . List of component PDFs. ; Definition at line 131 of file RooAddPdf.h. ◆ _projCacheMgr. RooObjCacheManager RooAddPdf::_projCacheMgr. mutableprotected . Definition at line 110 of file RooAddPdf.h. ◆ _recursive. bool RooAddPdf::_recursive = false. protected . Flag indicating is fractions are treated recursively. ; Definition at line 137 of file RooAddPdf.h. ◆ _refCoefNorm. RooSetProxy RooAddPdf::_refCoefNorm. mutableprotected . Reference observable set for coefficient interpretation. ; Definition at line 104 of file RooAddPdf.h. ◆ _refCoefRangeName. TNamed* RooAddPdf::_refCoefRangeName = nullptr. mutableprotected . Reference range name for coefficient interpretation. ; Definition at line 105 of file RooAddPdf.h. ◆ _snormList. RooArgList* RooAddPdf::_snormList {nullptr}. mutableprotected . ! List of supplemental normalization factors ; Definition at line 133 of file RooAddPdf.h. Libraries for RooAddPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAddPdf.h; roofit/roofitcore/src/RooAddPdf.cxx. RooAddPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:97732,Guid,Guide,97732,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,1,['Guid'],['Guide']
Usability,"ected . Definition at line 56 of file TDataSetManager.h. ◆ fBase. TUri TDataSetManager::fBase. protected . Definition at line 50 of file TDataSetManager.h. ◆ fCommonGroup. TString TDataSetManager::fCommonGroup. protected . Definition at line 48 of file TDataSetManager.h. ◆ fCommonUser. TString TDataSetManager::fCommonUser. protected . Definition at line 47 of file TDataSetManager.h. ◆ fgCommonDataSetTag. TString TDataSetManager::fgCommonDataSetTag = ""COMMON"". staticprotected . Definition at line 65 of file TDataSetManager.h. ◆ fgDataSetSrvMaps. TList * TDataSetManager::fgDataSetSrvMaps = 0. staticprotected . Definition at line 67 of file TDataSetManager.h. ◆ fGroup. TString TDataSetManager::fGroup. protected . Definition at line 45 of file TDataSetManager.h. ◆ fGroupConfigFile. TString TDataSetManager::fGroupConfigFile. protected . Definition at line 62 of file TDataSetManager.h. ◆ fGroupQuota. TMap TDataSetManager::fGroupQuota. protected . Definition at line 52 of file TDataSetManager.h. ◆ fGroupUsed. TMap TDataSetManager::fGroupUsed. protected . Definition at line 53 of file TDataSetManager.h. ◆ fMTimeGroupConfig. Long_t TDataSetManager::fMTimeGroupConfig. protected . Definition at line 63 of file TDataSetManager.h. ◆ fNDisappearedFiles. Int_t TDataSetManager::fNDisappearedFiles. protected . Definition at line 60 of file TDataSetManager.h. ◆ fNOpenedFiles. Int_t TDataSetManager::fNOpenedFiles. protected . Definition at line 59 of file TDataSetManager.h. ◆ fNTouchedFiles. Int_t TDataSetManager::fNTouchedFiles. protected . Definition at line 58 of file TDataSetManager.h. ◆ fUser. TString TDataSetManager::fUser. protected . Definition at line 46 of file TDataSetManager.h. ◆ fUserUsed. TMap TDataSetManager::fUserUsed. protected . Definition at line 54 of file TDataSetManager.h. proof/proof/inc/TDataSetManager.h; proof/proof/src/TDataSetManager.cxx. TDataSetManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:41039,Guid,Guide,41039,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['Guid'],['Guide']
Usability,"ected . Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ; Definition at line 1915 of file TProofPlayer.cxx. ◆ IsA(). TClass * TProofPlayerRemote::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 366 of file TProofPlayer.h. ◆ IsClient(). Bool_t TProofPlayerRemote::IsClient ; (; ); const. overridevirtual . Is the player running on the client? ; Reimplemented from TProofPlayer.; Definition at line 4223 of file TProofPlayer.cxx. ◆ JoinProcess(). Bool_t TProofPlayerRemote::JoinProcess ; (; TList * ; workers). overridevirtual . Prepares the given list of new workers to join a progressing process. ; Returns kTRUE on success, kFALSE otherwise. ; Reimplemented from TProofPlayer.; Definition at line 2533 of file TProofPlayer.cxx. ◆ MergeFeedback(). TList * TProofPlayerRemote::MergeFeedback ; (; ). protected . Merge feedback lists. ; Definition at line 3926 of file TProofPlayer.cxx. ◆ MergeOutput(). void TProofPlayerRemote::MergeOutput ; (; Bool_t ; savememvalues = kFALSE). overridevirtual . Merge objects in output the lists. ; Reimplemented from TProofPlayer.; Definition at line 3114 of file TProofPlayer.cxx. ◆ MergeOutputFiles(). Bool_t TProofPlayerRemote::MergeOutputFiles ; (; ). protected . Merge output in files. ; Definition at line 2582 of file TProofPlayer.cxx. ◆ NotifyMemory(). void TProofPlayerRemote::NotifyMemory ; (; TObject * ; obj). protected . Printout the memory record after merging object 'obj' This record is used by the memory monitor. ; Definition at line 3593 of file TProofPlayer.cxx. ◆ Process() [1/2]. Long64_t TProofPlayerRemote::Process ; (; TDSet * ; dset, . const char * ; selector_file, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process specified TDSet on PROOF. ; This method is called on client and on the PROOF master.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:31837,feedback,feedback,31837,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"ected . propagate an error matrix on the input vector to the unfolding result ; Parameters. [in]vyyinput error matrix ; [in,out]ematrixhistogram to be updated ; [in]binMapmapping of histogram bins ; [in]clearEmatif set, clear histogram before adding this covariance contribution . Definition at line 1250 of file TUnfoldSys.cxx. ◆ GetEmatrixInput(). void TUnfoldSys::GetEmatrixInput ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from input measurement uncertainties ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the uncertainties or covariance of the input data. In many cases, these are the ""statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1207 of file TUnfoldSys.cxx. ◆ GetEmatrixSysBackgroundScale(). void TUnfoldSys::GetEmatrixSysBackgroundScale ; (; TH2 * ; ematrix, . const char * ; name, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from background normalisation uncertainty ; Parameters. [in,out]ematrixoutput histogram ; [in]sourceidentifier of the background source ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram prior to adding the covariance matrix contribution. this method returns the uncertainties on the unfolding result arising from the background source source and its normalisation uncertainty. See method SubtractBackground() how to set the normalisation uncertainty ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:38142,clear,clearEmat,38142,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"ected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/SimpleInterval.h>. Inheritance diagram for RooStats::SimpleInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SimpleInterval() [1/3]. SimpleInterval::SimpleInterval ; (; const char * ; name = nullptr). explicit . default constructor ; Default constructor. ; Definition at line 42 of file SimpleInterval.cxx. ◆ SimpleInterval() [2/3]. SimpleInterval::SimpleInterval ; (; const SimpleInterval & ; other, . const char * ; name . ). default constructor ; fParameters.add( other.fParameters ); ; Definition at line 51 of file SimpleInterval.cxx. ◆ SimpleInterval() [3/3]. SimpleInterval::SimpleInterval ; (; const char * ; name, . const RooRealVar & ; var, . double ; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParameters ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implements RooStats::ConfInterval.; Definition at line 122 of file SimpleInterval.cxx. ◆ Class(). static TClass * RooStats::SimpleInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::SimpleInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SimpleInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file Simpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:13734,Simpl,SimpleInterval,13734,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"ected); 1383 // fSelected->ExecuteEvent(event, px, py);; 1384 ; 1385 break; // don't want fPadSave->cd() to be executed at the end; 1386 ; 1387 case kButton2Motion:; 1388 //was empty!; 1389 case kButton2Up:; 1390 if (fSelected) {; 1391 gPad = fSelectedPad;; 1392 ; 1393 fSelected->ExecuteEvent(event, px, py);; 1394 RunAutoExec();; 1395 }; 1396 break;; 1397 ; 1398 case kButton2Double:; 1399 break;; 1400 ; 1401//*-*----------------------------------------------------------------------; 1402 ; 1403 case kButton3Down:; 1404 // popup context menu; 1405 pad = Pick(px, py, prevSelObj);; 1406 if (!pad) return;; 1407 ; 1408 if (!fDoubleBuffer) FeedbackMode(kFALSE);; 1409 ; 1410 if (fContextMenu && fSelected && !fSelected->TestBit(kNoContextMenu) &&; 1411 !pad->TestBit(kNoContextMenu) && !TestBit(kNoContextMenu)); 1412 fContextMenu->Popup(px, py, fSelected, this, pad);; 1413 ; 1414 break;; 1415 ; 1416 case kButton3Motion:; 1417 break;; 1418 ; 1419 case kButton3Up:; 1420 if (!fDoubleBuffer) FeedbackMode(kTRUE);; 1421 break;; 1422 ; 1423 case kButton3Double:; 1424 break;; 1425 ; 1426 case kKeyPress:; 1427 if (!fSelectedPad || !fSelected) return;; 1428 gPad = fSelectedPad; // don't use cd() because we won't draw in pad; 1429 // we will only use its coordinate system; 1430 fSelected->ExecuteEvent(event, px, py);; 1431 ; 1432 RunAutoExec();; 1433 ; 1434 break;; 1435 ; 1436 case kButton1Shift:; 1437 // Try to select; 1438 pad = Pick(px, py, prevSelObj);; 1439 ; 1440 if (!pad) return;; 1441 ; 1442 EnterLeave(prevSelPad, prevSelObj);; 1443 ; 1444 gPad = pad; // don't use cd() we will use the current; 1445 // canvas via the GetCanvas member and not via; 1446 // gPad->GetCanvas; 1447 if (fSelected) {; 1448 fSelected->ExecuteEvent(event, px, py);; 1449 RunAutoExec();; 1450 }; 1451 break;; 1452 ; 1453 case kWheelUp:; 1454 case kWheelDown:; 1455 pad = Pick(px, py, prevSelObj);; 1456 if (!pad) return;; 1457 ; 1458 gPad = pad;; 1459 if (fSelected); 1460 fSelected->ExecuteEvent(event, px, py);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:44692,Feedback,FeedbackMode,44692,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"ectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Get variable buffer. TTreeFormula* GetVar(Int_t i) const; Get variable formula. void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelectorDraw.html:9526,simpl,simplest,9526,root/html528/TSelectorDraw.html,https://root.cern,https://root.cern/root/html528/TSelectorDraw.html,1,['simpl'],['simplest']
Usability,"ectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSelectorDraw.html:9632,simpl,simplest,9632,root/html530/TSelectorDraw.html,https://root.cern,https://root.cern/root/html530/TSelectorDraw.html,3,['simpl'],['simplest']
Usability,"ection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNDArray Base for n-dimensional array; TNDArrayRef<Long64_t> subdimension of a TNDArray; TNDArrayRef<ULong64_t> subdimension of a TNDArray; TNDArrayRef<char> subdimension of a TNDArray; TNDArrayRef<double> subdimension of a TNDArray; TNDArrayRef<float> subdimension of a TNDArray; TNDArrayRef<int> subdimension of a TNDArray; TNDArrayRef<long> subdimension of a TNDArray; TNDArrayRef<short> subdimension of a TNDArray; TNDArrayRef<unsigned int> subdimension of a TNDArray; TNDArrayRef<unsigned long> subdimension of a TNDArray; TNDArrayRef<unsigned short> subdimension of a TNDArray; TNDArrayT<Long64_t> N-dimensional array; TNDArrayT<ULong64_t> N-dimensional array; TNDArrayT<char> N-dimensional array; TNDArrayT<double> N-dimensional array; TNDArrayT<float> N-dimensional array; TNDArrayT<int> N-dimensional array; TNDArrayT<long> N-dimensional array; TNDArrayT<short> N-dimensional array; TNDArrayT<unsigned int> N-dimensional array; TNDArrayT<unsigned long> N-dimensional array; TNDArrayT<unsigned short> N-dimensional array; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNetXNGFile ROOT class definition; TNetXNGFileStager ! Interface to a 'XRD' staging; TNetXNGSystem ROOT class definition; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:117040,simpl,simple,117040,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['simpl'],['simple']
Usability,"ection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLBoxPainter(const TGLBoxPainter&); virtual voidDeInitGL() const; voidDrawCloud() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tHasSections() const; virtual voidInitGL() const; TGLBoxPainter&operator=(const TGLBoxPainter&); voidSetPlotColor() const. Data Members; public:. enum EBoxType { kBox; kBox1; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLBoxPainter.html:1695,Clear,ClearBuffers,1695,root/html532/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html532/TGLBoxPainter.html,1,['Clear'],['ClearBuffers']
Usability,"ection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLLegoPainter(const TGLLegoPainter&); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawLegoCartesian() const; voidDrawLegoCylindrical() const; voidDrawLegoPolar() const; voidDrawLegoSpherical() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; TGLLegoPainter&operator=(const TGLLegoPainter&); Bool_tPreparePalette() const; voidSetLegoColor() const. Data Members; public:. enum ELegoType { kColorSimple; kColorLevel; kCylindricBars; };; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLLegoPainter.html:1641,Clear,ClearBuffers,1641,root/html532/TGLLegoPainter.html,https://root.cern,https://root.cern/root/html532/TGLLegoPainter.html,1,['Clear'],['ClearBuffers']
Usability,"ection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLVoxelPainter(const TGLVoxelPainter&); virtual voidDeInitGL() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFindVoxelColor(Double_t binContent, Float_t* rgba) const; Bool_tHasSections() const; virtual voidInitGL() const; TGLVoxelPainter&operator=(const TGLVoxelPainter&); voidPreparePalette() const; voidSetVoxelColor(const Float_t* rgba) const. Data Members; public:. enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLVoxelPainter.html:1624,Clear,ClearBuffers,1624,root/html532/TGLVoxelPainter.html,https://root.cern,https://root.cern/root/html532/TGLVoxelPainter.html,1,['Clear'],['ClearBuffers']
Usability,"ection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::SetBinContentvirtual void SetBinContent(Int_t bin, Double_t content)Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater th...Definition TH1.cxx:9222; TListA doubly linked list.Definition TList.h:38; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TMVA::BinarySearchTreeA simple Binary search tree including a volume search method.Definition BinarySearchTree.h:65; TMVA::Config::WriteOptionsReferenceBool_t WriteOptionsReference() constDefinition Config.h:65; TMVA::Configurable::CheckForUnusedOptionsvoid CheckForUnusedOptions() constchecks for unused options in option stringDefinition Configurable.cxx:270; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::EventDefinition Event.h:51; TMVA::Event::GetValueFloat_t GetValue(UInt_t ivar) constreturn value of i'th variableDefinition Event.cxx:236; TMVA::FitterBaseBase class for TMVA fitters.Definition FitterBase.h:51; TMVA::FitterBase::SetIPythonInteractivevoid SetIPythonInteractive(bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_)Definition FitterBase.h:73; TMVA::FitterBase::RunDouble_t Run()estimator function interface for fittingDefinition FitterBase.cxx:74; TMVA::GeneticFitterFitter using a Genetic Algorithm.Definition GeneticFitter.h:44; TMVA::Interval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:76905,simpl,simple,76905,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['simpl'],['simple']
Usability,"ection::sort(Bool_t ascend = kTRUE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidwriteToFile(const char* fileName) const; virtual voidwriteToStream(ostream& os, Bool_t compact, const char* section = 0) const. protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); Bool_tcheckForDup(const RooAbsArg& arg, Bool_t silent) const; voidRooAbsCollection::clearStructureTags(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidRooAbsCollection::makeStructureTag(); voidRooAbsCollection::makeTypedStructureTag(); voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(); TNamed*RooAbsCollection::structureTag(); TNamed*RooAbsCollection::typedStructureTag(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. Bool_tRooAbsCollection::_allRRVAll contents are RRV; RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgSet.html:12961,clear,clearStructureTags,12961,root/html532/RooArgSet.html,https://root.cern,https://root.cern/root/html532/RooArgSet.html,1,['clear'],['clearStructureTags']
Usability,"ection; if (reqSections & TBuffer3D::kRaw) {; //buffer.SetSectionsValid(TBuffer3D::kRaw);; }; ; return buffer;; }; ; class Box : public Shape; {; public:; Box(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ);; ~Box() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fDX, fDY, fDZ; // Half lengths; ; ClassDefOverride(Box,0);; };; ; ClassImp(Box);; ; Box::Box(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ) :; Shape(color,x,y,z),; fDX(dX), fDY(dY), fDZ(dZ); {}; ; TBuffer3D & Box::GetBuffer3D(UInt_t reqSections); {; static TBuffer3D buffer(TBuffer3DTypes::kGeneric);; ; // Complete kCore section - this could be moved to Shape base class; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); ; // Complete local/master transformation matrix - simple x/y/z; // translation. Easiest way to set identity then override the; // translation components; buffer.SetLocalMasterIdentity();; buffer.fLocalMaster[12] = fX;; buffer.fLocalMaster[13] = fY;; buffer.fLocalMaster[14] = fZ;; buffer.fLocalFrame = kTRUE; // Local frame; ; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t origin[3] = { fX, fY, fZ };; Double_t halfLength[3] = { fDX, fDY, fDZ };; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // No kShapeSpecific section; ; // Complete kRawSizes section; if (reqSections & TBuffer3D::kRawSizes) {; buffer.SetRawSizes(8, 3*8, 12, 3*12, 6, 6*6);; buffer.SetSectionsValid(TBuffer3D::kRawSizes);; }; // Complete kRaw section; if (reqSections & TBuffer3D::kRaw) {; // Points (8); // 3 components: x,y,z; buffer.fPnts[ 0] = fX - fDX; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:4984,simpl,simple,4984,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['simpl'],['simple']
Usability,"ection="""", Option_t *option=""np"", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Interface to the Principal Components Analysis class.Definition TTree.cxx:7200; TTree::GetAutoFlushvirtual Long64_t GetAutoFlush() constDefinition TTree.h:447; TTree::GetMaxVirtualSizevirtual Long64_t GetMaxVirtualSize() constDefinition TTree.h:540; TVirtualIndexAbstract interface for Tree Index.Definition TVirtualIndex.h:30; TVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing.Definition TVirtualPerfStats.h:32; TVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan,...Definition TVirtualTreePlayer.h:38; TVirtualTreePlayer::GetVar1virtual TTreeFormula * GetVar1() const =0; TVirtualTreePlayer::GetV4virtual Double_t * GetV4() const =0; TVirtualTreePlayer::GetWvirtual Double_t * GetW() const =0; TVirtualTreePlayer::GetVar4virtual TTreeFormula * GetVar4() const =0; TVirtualTreePlayer::GetVarvirtual TTreeFormula * GetVar(Int_t) const =0; TVirtualTreePlayer::GetValvirtual Double_t * GetVal(Int_t) const =0; TVirtualTreePlayer::GetVar2virtual TTreeFormula * GetVar2() const =0; TVirtualTreePlayer::GetV1virtual Double_t * GetV1() const =0; TVirtualTreePlayer::kMaxEntriesstatic constexpr Long64_t kMaxEntriesDefinition TVirtualTreePlayer.h:45; TVirtualTreePlayer::GetVar3virtual TTreeFormula * GetVar3() const =0; TVirtualTreePlayer::GetV2virtual Double_t * GetV2() const =0; TVirtualTreePlayer::GetSelectvirtual TTreeFormula * GetSelect() const =0; TVirtualTreePlayer::GetHistogramvirtual TH1 * GetHistogram() const =0; TVirtualTreePlayer::GetSelectedRowsvirtual Long64_t GetSelectedRows() const =0; TVirtualTreePlayer::GetV3virtual Double_t * GetV3() const =0; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; Drawth1 Draw(); ttauto * ttDefinition textangle.C:16. treetreeincTTree.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:94433,Guid,Guide,94433,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['Guid'],['Guide']
Usability,"ectionMode to refine the calculation of correlations (e.g. restrict the calcuation to the signal distribution and/or exclude underflow and overflow bins). See the documentation of GetScanVariable() for details. Alternative scan variables may be defined by overriding the GetScanVariable() method. ; Automatic choice of scan range: if (tauMin,tauMax) do not correspond to a valid tau range (e.g. tauMin=tauMax=0.0) then the tau range is determined automatically. Use with care! ; Definition at line 1354 of file TUnfoldDensity.cxx. ◆ Streamer(). void TUnfoldDensity::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TUnfold. ◆ StreamerNVirtual(). void TUnfoldDensity::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 205 of file TUnfoldDensity.h. Member Data Documentation. ◆ fConstInputBins. const TUnfoldBinning* TUnfoldDensity::fConstInputBins. protected . binning scheme for the input (detector level) ; Definition at line 57 of file TUnfoldDensity.h. ◆ fConstOutputBins. const TUnfoldBinning* TUnfoldDensity::fConstOutputBins. protected . binning scheme for the output (truth level) ; Definition at line 55 of file TUnfoldDensity.h. ◆ fOwnedInputBins. TUnfoldBinning* TUnfoldDensity::fOwnedInputBins. protected . pointer to input binning scheme if owned by this class ; Definition at line 61 of file TUnfoldDensity.h. ◆ fOwnedOutputBins. TUnfoldBinning* TUnfoldDensity::fOwnedOutputBins. protected . pointer to output binning scheme if owned by this class ; Definition at line 59 of file TUnfoldDensity.h. ◆ fRegularisationConditions. TUnfoldBinning* TUnfoldDensity::fRegularisationConditions. protected . binning scheme for the regularisation conditions ; Definition at line 63 of file TUnfoldDensity.h. hist/unfold/inc/TUnfoldDensity.h; hist/unfold/src/TUnfoldDensity.cxx. TUnfoldDensity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:71729,Guid,Guide,71729,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['Guid'],['Guide']
Usability,"ectionProxy::CheckFunctions() const; virtual voidTGenCollectionProxy::DeleteItem(Bool_t force, void* ptr) const; voidExpand(UInt_t nCurr, UInt_t left); TGenCollectionProxy*TGenCollectionProxy::Initialize(Bool_t silent) const; virtual TGenCollectionProxy*InitializeEx(Bool_t silent); voidReadItems(int nElements, TBuffer& b); voidShrink(UInt_t nCurr, UInt_t left, Bool_t force); voidWriteItems(int nElements, TBuffer& b). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; kNeedDelete; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; TGenCollectionProxy::MethodTGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of the key_type; stringTGenCollectionProxy::fNameName of the class being proxied.; TGenCollectionProxy::MethodTGenCollectionProxy::fNextCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEmulatedCollectionProxy.html:4340,clear,clear,4340,root/html532/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html532/TEmulatedCollectionProxy.html,1,['clear'],['clear']
Usability,"ector.h, TQuaternion.h, TRobustEstimator.h, TRolke.h,; TRotation.h, TVector2.h, TVector3.h; 1.7 How to Find More Information; website The ROOT web site has up to date documentation. The ROOT source code automatically generates this documentation, so each class is explicitly documented on its own web page, which is always up to date with the latest official release of ROOT.; The ROOT Reference Guide web pages can be found at class index reference guide https://root.cern/doc/master/classes.html. Each page contains a class description, and an explanation of each method. It shows the class inheritance tree and lets you jump to the parent class page by clicking on the class name. If you want more details, you can even see the source. There is a help page available in the little box on the upper right hand side of each class documentation page. You can see on the next page what a typical class documentation web page looks like. The ROOT web site also contains in addition to this Reference Guide, “How To’s”, a list of publications and example applications.; 1.7.1 Class Reference Guide; The top of any class reference page lets you jump to different parts of the documentation. The first line links to the class index and the index for the current module (a group of classes, often a library). The second line links to the ROOT homepage and the class overviews. The third line links the source information - a HTML version of the source and header file as well as the CVS (the source management system used for the ROOT development) information of the files. The last line links the different parts of the current pages. Example of function documentation, with automatically generated LaTeX-like graphics. Inheritance tree, showing what the current class derives from, and which classes inherit from it. HTML version of the source file linking all types and most functions. 2 Getting Started; We begin by showing you how to use ROOT interactively. There are two examples to click through and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:29193,Guid,Guide,29193,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"ector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regularizationEnumRegularization m_regularizationDefinition NeuralNet.h:847; TMVA::DNN::Settings::repetitionsint repetitions() consthow many steps have to be gone until the batch is changedDefinition NeuralNet.h:773; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitorin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:74593,learn,learningRatedouble,74593,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,3,['learn'],"['learning', 'learningRate', 'learningRatedouble']"
Usability,"ectory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:45309,clear,clearEvalErrorLog,45309,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,84,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"ects () const;  Return list of all generic objects in the workspace. ;  ; RooArgSet allPdfs () const;  Return set with all probability density function objects. ;  ; RooArgSet allResolutionModels () const;  Return set with all resolution model objects. ;  ; RooArgSet allVars () const;  Return set with all variable objects. ;  ; RooAbsArg * arg (RooStringView name) const;  Return RooAbsArg with given name. A null pointer is returned if none is found. ;  ; RooArgSet argSet (RooStringView nameList) const;  Return set of RooAbsArgs matching to given list of names. ;  ; bool cancelTransaction ();  Cancel an ongoing import transaction. ;  ; RooCategory * cat (RooStringView name) const;  Retrieve discrete variable (RooCategory) with given name. A null pointer is returned if not found. ;  ; RooAbsCategory * catfunc (RooStringView name) const;  Retrieve discrete function (RooAbsCategory) with given name. A null pointer is returned if not found. ;  ; bool cd (const char *path=nullptr);  ; void clearStudies ();  Remove all RooStudyManager modules. ;  ; TObject * Clone (const char *newname="""") const override;  TObject::Clone() needs to be overridden. ;  ; bool commitTransaction ();  ; const RooArgSet & components () const;  ; RooAbsData * data (RooStringView name) const;  Retrieve dataset (binned or unbinned) with given name. A null pointer is returned if not found. ;  ; bool defineSet (const char *name, const char *contentList);  Define a named set in the workspace through a comma separated list of names of objects already in the workspace. ;  ; bool defineSet (const char *name, const RooArgSet &aset, bool importMissing=false);  Define a named RooArgSet with given constituents. ;  ; RooAbsData * embeddedData (RooStringView name) const;  Retrieve dataset (binned or unbinned) with given name. A null pointer is returned if not found. ;  ; RooExpensiveObjectCache & expensiveObjectCache ();  ; bool extendSet (const char *name, const char *newContents);  Define a named set in the wor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:4134,clear,clearStudies,4134,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['clear'],['clearStudies']
Usability,"ects a new; 51# implementation for `__str__`, the mechanism that Python provides to define; 52# how to represent objects as strings. This new implementation; 53# always returns the string ""This is a MyClass object"".; 54@pythonization('MyClass'); 55def pythonizor_of_myclass(klass):; 56 klass.__str__ = lambda o : 'This is a MyClass object'; 57 ; 58# Once we have defined our pythonizor function, let's see it in action.; 59# We will now use the `MyClass` class for the first time from Python: we will; 60# create a new instance of that class. At this moment, the pythonizor will; 61# execute and modify the class - pythonizors are always lazily run when a given; 62# class is used for the first time from a Python script.; 63my_object = ROOT.MyClass(); 64 ; 65# Since the pythonizor already executed, we should now see the new behaviour.; 66# For that purpose, let's print `my_object` (should show ""This is a MyClass; 67# object"").; 68print(my_object); 69 ; 70# The previous example is just a simple one, but there are many ways in which a; 71# class can be pythonized. Typical examples are the redefinition of dunder; 72# methods (e.g. `__iter__` and `__next__` to make your objects iterable from; 73# Python). If you need some inspiration, many ROOT classes are pythonized in; 74# the way we just saw; their pythonizations can be seen at:; 75# https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/python/ROOT/pythonization; 76 ; 77# The @pythonization decorator offers a few more options when it comes to; 78# matching classes that you want to pythonize. We saw that we can match a; 79# single class, but we can also specify a list of classes to pythonize.; 80#; 81# The following code defines a couple of new classes:; 82ROOT.gInterpreter.Declare('''; 83namespace NS {; 84 class Class1 {};; 85 class Class2 {};; 86}; 87'''); 88 ; 89# Note that these classes belong to the `NS` namespace. As mentioned above, the; 90# @pythonization decorator accepts a parameter with the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py_source.html:3495,simpl,simple,3495,doc/master/pyroot002__pythonizationDecorator_8py_source.html,https://root.cern,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py_source.html,1,['simpl'],['simple']
Usability,"ects of the corresponding type stored in the geometry. This can be done by clicking the button next to the blue label Select <object>. The dialog interfaces are generally different for different types of objects. The volume selection dialog offers the possibility to select either a volume already connected to the geometry hierarchy or non-connected ones. Selection for shapes and matrices is split into categories represented by top-level list tree items for: boxes, tubes, translations, rotations, etc. Selection dialogs for different TGeo objects. Once a selection is made and the dialog is closed, the selected item name will appear in the corresponding label and the button Edit will start the object editor in a transient frame. Closing these transient frames will not delete, but just hide existing opened editors for later reuse. Their lifetime is determined by the canvas to which the manager editor is attached to, since these will be destroyed together.; ; For most editors, the functionalities Apply and Undo are provided.; For shapes, changing any of the shape parameters will activate the “Apply” button only if the check button “Delayed draw” is checked, otherwise the changes are immediately applied. Once the apply button is pressed, the changes are applied to the edited shape and drawn. The “Undo” button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the “Undo” does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1036244,Undo,Undo,1036244,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Undo'],['Undo']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionMethodBrowsable(const TCollectionMethodBrowsable&); virtual~TCollectionMethodBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionMethodBrowsable.html:1433,simpl,simple,1433,root/html526/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionMethodBrowsable.html,5,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionPropertyBrowsable(const TCollectionPropertyBrowsable&); virtual~TCollectionPropertyBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionPropertyBrowsable.html:1446,simpl,simple,1446,root/html526/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionPropertyBrowsable.html,5,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TMethodBrowsable(const TMethodBrowsable&); virtual~TMethodBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Brow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodBrowsable.html:1410,simpl,simple,1410,root/html528/TMethodBrowsable.html,https://root.cern,https://root.cern/root/html528/TMethodBrowsable.html,4,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TNonSplitBrowsable(const TNonSplitBrowsable&); virtual~TNonSplitBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNonSplitBrowsable.html:1416,simpl,simple,1416,root/html528/TNonSplitBrowsable.html,https://root.cern,https://root.cern/root/html528/TNonSplitBrowsable.html,4,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TVirtualBranchBrowsable(const TVirtualBranchBrowsable&); virtual~TVirtualBranchBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualBranchBrowsable.html:1414,simpl,simple,1414,root/html528/TVirtualBranchBrowsable.html,https://root.cern,https://root.cern/root/html528/TVirtualBranchBrowsable.html,4,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. virtual~TCollectionMethodBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollectionMethodBrowsable.html:1433,simpl,simple,1433,root/html602/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html602/TCollectionMethodBrowsable.html,2,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. virtual~TCollectionPropertyBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollectionPropertyBrowsable.html:1446,simpl,simple,1446,root/html602/TCollectionPropertyBrowsable.html,https://root.cern,https://root.cern/root/html602/TCollectionPropertyBrowsable.html,2,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. virtual~TMethodBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMethodBrowsable.html:1410,simpl,simple,1410,root/html602/TMethodBrowsable.html,https://root.cern,https://root.cern/root/html602/TMethodBrowsable.html,2,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. virtual~TNonSplitBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNonSplitBrowsable.html:1416,simpl,simple,1416,root/html602/TNonSplitBrowsable.html,https://root.cern,https://root.cern/root/html602/TNonSplitBrowsable.html,2,['simpl'],['simple']
Usability,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. virtual~TVirtualBranchBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualBranchBrowsable.html:1438,simpl,simple,1438,root/html602/TVirtualBranchBrowsable.html,https://root.cern,https://root.cern/root/html602/TVirtualBranchBrowsable.html,2,['simpl'],['simple']
Usability,"ects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::SliceRooCmdArg Slice(const RooArgSet &sliceSet)Definition RooGlobalFunc.cxx:134; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf310_sliceplotDefinition rf310_sliceplot.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav,mixState); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 3787 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 16213 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf310_sliceplot.C. tutorialsroofitrf310_sliceplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf310__sliceplot_8C.html:6474,Guid,Guide,6474,doc/master/rf310__sliceplot_8C.html,https://root.cern,https://root.cern/doc/master/rf310__sliceplot_8C.html,1,['Guid'],['Guide']
Usability,"ects. ; Definition at line 170 of file TH2Poly.h. ◆ fCells. TList* TH2Poly::fCells. protected . [fNCells] The array of TLists that store the bins that intersect with each cell. List do not own the contained objects ; Definition at line 163 of file TH2Poly.h. ◆ fCellX. Int_t TH2Poly::fCellX. protected . Number of partition cells in the x-direction of the histogram. ; Definition at line 160 of file TH2Poly.h. ◆ fCellY. Int_t TH2Poly::fCellY. protected . Number of partition cells in the y-direction of the histogram. ; Definition at line 161 of file TH2Poly.h. ◆ fCompletelyInside. Bool_t* TH2Poly::fCompletelyInside. protected . [fNCells] The array that returns true if the cell at the given coordinate is completely inside a bin ; Definition at line 166 of file TH2Poly.h. ◆ fFloat. Bool_t TH2Poly::fFloat. protected . When set to kTRUE, allows the histogram to expand if a bin outside the limits is added. ; Definition at line 167 of file TH2Poly.h. ◆ fIsEmpty. Bool_t* TH2Poly::fIsEmpty. protected . [fNCells] The array that returns true if the cell at the given coordinate is empty ; Definition at line 165 of file TH2Poly.h. ◆ fNCells. Int_t TH2Poly::fNCells. protected . Number of partition cells: fCellX*fCellY. ; Definition at line 162 of file TH2Poly.h. ◆ fNewBinAdded. Bool_t TH2Poly::fNewBinAdded. protected . !For the 3D Painter ; Definition at line 168 of file TH2Poly.h. ◆ fOverflow. Double_t TH2Poly::fOverflow[kNOverflow]. protected . Overflow bins. ; Definition at line 159 of file TH2Poly.h. ◆ fStepX. Double_t TH2Poly::fStepX. protected . Definition at line 164 of file TH2Poly.h. ◆ fStepY. Double_t TH2Poly::fStepY. protected . Dimensions of a partition cell. ; Definition at line 164 of file TH2Poly.h. Libraries for TH2Poly:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH2Poly.h; hist/hist/src/TH2Poly.cxx. TH2Poly. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:89832,Guid,Guide,89832,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['Guid'],['Guide']
Usability,ecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 66 of file Minimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 64 of file Minimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 71 of file Minimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 72 of file Minimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 63 of file Minimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 70 of file Minimizers.h. ◆ fTestInterval. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestInterval. private . Interval for the computation of the test error. ; Definition at line 68 of file Minimizers.h. ◆ fTrainingError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTrainingError. private . Holds the most recently computed training loss. ; Definition at line 69 of file Minimizers.h. tmva/tmva/inc/TMVA/DNN/Minimizers.h. TMVADNNTGradientDescent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:16832,Guid,Guide,16832,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['Guid'],['Guide']
Usability,"ecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidGetBackground(TH1* bgr, const char* bgrSource = 0, const Int_t* binMap = 0, Int_t includeError = 3, Bool_t clearHist = kTRUE) const; voidTUnfold::GetBias(TH1* bias, const Int_t* binMap = 0) const; Double_tTUnfold::GetChi2A() const; Double_tTUnfold::GetChi2L() const; Double_tGetChi2Sys(); Bool_tGetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0); Bool_tGetDeltaSysSource(TH1* hist_delta, const char* source, const Int_t* binMap = 0); Bool_tGetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTUnfold::GetEmatrix(TH2* ematrix, const Int_t* binMap = 0) const; voidGetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundUncorr(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); Double_tTUnfold::GetEpsMatrix() const; voidTUnfold::GetFoldedOutput(TH1* folded, const Int_t* binMap = 0) const; virtual const char*TObject::GetIconName() const; voidTUnfold::GetInput(TH1* inputData, const Int_t* binMap = 0) const; voidTUnfold::GetInputInverseEmatrix(TH2* ematrix); voidTUnfold::GetL(TH2* l) const; virtual Double_tTUnfold::GetLcurveX() const; virtual Double_tTUnfold::GetLcurveY() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:5928,clear,clearEmat,5928,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,3,['clear'],['clearEmat']
Usability,"ed (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; virtual void DefVar ()=0;  ; virtual void DoFill (Long64_t entry, Double_t w, const Double_t *v)=0;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDraw.html:11517,Clear,ClearFormula,11517,doc/master/classTProofDraw.html,https://root.cern,https://root.cern/doc/master/classTProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"ed . Add widget catched from external scripts. ; Definition at line 573 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 592 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 541 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; ). protected . Check if any widget was modified and update if necessary. ; Definition at line 752 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 975 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at line 618 of file RBrowser.cxx. ◆ FindWidget(). std::shared_ptr< RBrowserWidget > RBrowser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 602 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets. ; Definition at line 102 of file RBrowser.hxx. ◆ GetCurrentWorkingDirectory(). std::string RBrowser::GetCurrentWorkingDirectory ; (; ). protected . Return the current directory of ROOT. ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowser.html:6445,clear,cleared,6445,doc/v632/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html,1,['clear'],['cleared']
Usability,ed . Array of bundle of TStreamerInfoActions to stream out (read) ; Definition at line 291 of file TGenCollectionProxy.h. ◆ fResize. Sizing_t TGenCollectionProxy::fResize. protected . Container accessors: resize container. ; Definition at line 303 of file TGenCollectionProxy.h. ◆ fSize. Method TGenCollectionProxy::fSize. protected . Container accessors: size of container. ; Definition at line 302 of file TGenCollectionProxy.h. ◆ fStaged. Staged_t TGenCollectionProxy::fStaged. protected . Optimization: Keep staged array once they were created. ; Definition at line 319 of file TGenCollectionProxy.h. ◆ fSTL_type. int TGenCollectionProxy::fSTL_type. protected . STL container type. ; Definition at line 320 of file TGenCollectionProxy.h. ◆ fTypeinfo. Info_t TGenCollectionProxy::fTypeinfo. protected . Type information. ; Definition at line 321 of file TGenCollectionProxy.h. ◆ fVal. Value* TGenCollectionProxy::fVal. protected . Descriptor of the Value_type. ; Definition at line 312 of file TGenCollectionProxy.h. ◆ fValDiff. int TGenCollectionProxy::fValDiff. protected . Offset between two consecutive value_types (memory layout). ; Definition at line 316 of file TGenCollectionProxy.h. ◆ fValOffset. int TGenCollectionProxy::fValOffset. protected . Offset from key to value (in maps) ; Definition at line 315 of file TGenCollectionProxy.h. ◆ fValue. std::atomic<Value*> TGenCollectionProxy::fValue. protected . Descriptor of the container value type. ; Definition at line 311 of file TGenCollectionProxy.h. ◆ fWriteMemberWise. TStreamerInfoActions::TActionSequence* TGenCollectionProxy::fWriteMemberWise. mutableprotected . Definition at line 293 of file TGenCollectionProxy.h. Libraries for TGenCollectionProxy:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TGenCollectionProxy.h; io/io/src/TGenCollectionProxy.cxx. TGenCollectionProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:32508,Guid,Guide,32508,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['Guid'],['Guide']
Usability,ed . Definition at line 61 of file TEveWindow.h. ◆ fgAllowTopFrameCollapse. Bool_t TEveCompositeFrame::fgAllowTopFrameCollapse = kTRUE. staticprivate . Definition at line 54 of file TEveWindow.h. ◆ fgCtxMenu. TEveContextMenu * TEveCompositeFrame::fgCtxMenu = nullptr. staticprotected . Definition at line 70 of file TEveWindow.h. ◆ fgFrameList. TList * TEveCompositeFrame::fgFrameList = new THashList. staticprotected . Definition at line 73 of file TEveWindow.h. ◆ fgIconBarCreator. TEveCompositeFrame::IconBarCreator_foo TEveCompositeFrame::fgIconBarCreator = nullptr. staticprivate . Definition at line 51 of file TEveWindow.h. ◆ fgkEmptyFrameName. const TString TEveCompositeFrame::fgkEmptyFrameName. staticprotected . Definition at line 71 of file TEveWindow.h. ◆ fgMiniBarHeight. UInt_t TEveCompositeFrame::fgMiniBarHeight = 4. staticprivate . Definition at line 53 of file TEveWindow.h. ◆ fgTopFrameHeight. UInt_t TEveCompositeFrame::fgTopFrameHeight = 14. staticprivate . Definition at line 52 of file TEveWindow.h. ◆ fIconBar. TGFrame* TEveCompositeFrame::fIconBar. protected . Definition at line 60 of file TEveWindow.h. ◆ fMiniBar. TGFrame* TEveCompositeFrame::fMiniBar. protected . Definition at line 63 of file TEveWindow.h. ◆ fShowInSync. Bool_t TEveCompositeFrame::fShowInSync. protected . Definition at line 68 of file TEveWindow.h. ◆ fTitleBar. TGTextButton* TEveCompositeFrame::fTitleBar. protected . Definition at line 59 of file TEveWindow.h. ◆ fToggleBar. TGTextButton* TEveCompositeFrame::fToggleBar. protected . Definition at line 58 of file TEveWindow.h. ◆ fTopFrame. TGCompositeFrame* TEveCompositeFrame::fTopFrame. protected . Definition at line 57 of file TEveWindow.h. Libraries for TEveCompositeFrame:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveCompositeFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrame.html:42194,Guid,Guide,42194,doc/master/classTEveCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrame.html,1,['Guid'],['Guide']
Usability,"ed . editor's menu bar ; Definition at line 47 of file TGTextEditor.h. ◆ fMenuBarItemLayout. TGLayoutHints* TGTextEditor::fMenuBarItemLayout. protected . used for for menubar items ; Definition at line 46 of file TGTextEditor.h. ◆ fMenuBarLayout. TGLayoutHints* TGTextEditor::fMenuBarLayout. protected . used for the menubar ; Definition at line 45 of file TGTextEditor.h. ◆ fMenuEdit. TGPopupMenu* TGTextEditor::fMenuEdit. protected . ""Edit"" menu entry ; Definition at line 49 of file TGTextEditor.h. ◆ fMenuFile. TGPopupMenu* TGTextEditor::fMenuFile. protected . ""File"" menu entry ; Definition at line 48 of file TGTextEditor.h. ◆ fMenuHelp. TGPopupMenu* TGTextEditor::fMenuHelp. protected . ""Help"" menu entry ; Definition at line 52 of file TGTextEditor.h. ◆ fMenuSearch. TGPopupMenu* TGTextEditor::fMenuSearch. protected . ""Search"" menu entry ; Definition at line 50 of file TGTextEditor.h. ◆ fMenuTools. TGPopupMenu* TGTextEditor::fMenuTools. protected . ""Tools"" menu entry ; Definition at line 51 of file TGTextEditor.h. ◆ fStatusBar. TGStatusBar* TGTextEditor::fStatusBar. protected . for file name, line and col number ; Definition at line 38 of file TGTextEditor.h. ◆ fTextChanged. Bool_t TGTextEditor::fTextChanged. protected . true if text has changed ; Definition at line 54 of file TGTextEditor.h. ◆ fTextEdit. TGTextEdit* TGTextEditor::fTextEdit. protected . text edit widget ; Definition at line 40 of file TGTextEditor.h. ◆ fTimer. TTimer* TGTextEditor::fTimer. protected . for statusbar and toolbar update ; Definition at line 37 of file TGTextEditor.h. ◆ fToolBar. TGToolBar* TGTextEditor::fToolBar. protected . toolbar with common tool buttons ; Definition at line 39 of file TGTextEditor.h. Libraries for TGTextEditor:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTextEditor.h; gui/gui/src/TGTextEditor.cxx. TGTextEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:51387,Guid,Guide,51387,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,1,['Guid'],['Guide']
Usability,ed . initial font ; Definition at line 53 of file TGFontDialog.h. ◆ fItalic. Bool_t TGFontDialog::fItalic. protected . italic flag ; Definition at line 46 of file TGFontDialog.h. ◆ fLabelFont. TGFont* TGFontDialog::fLabelFont. protected . TGFont used for sample text. ; Definition at line 56 of file TGFontDialog.h. ◆ fLName. TString TGFontDialog::fLName. protected . logical font name ; Definition at line 44 of file TGFontDialog.h. ◆ fName. TString TGFontDialog::fName. protected . font name ; Definition at line 43 of file TGFontDialog.h. ◆ fNumberOfFonts. Int_t TGFontDialog::fNumberOfFonts. protected . total number of fonts ; Definition at line 58 of file TGFontDialog.h. ◆ fSample. TGLabel* TGFontDialog::fSample. protected . sample of selected font ; Definition at line 41 of file TGFontDialog.h. ◆ fSampleText. TString TGFontDialog::fSampleText. protected . string used for sample ; Definition at line 54 of file TGFontDialog.h. ◆ fSampleTextGC. TGGC* TGFontDialog::fSampleTextGC. protected . GC used for sample text. ; Definition at line 55 of file TGFontDialog.h. ◆ fSize. Int_t TGFontDialog::fSize. protected . font size ; Definition at line 48 of file TGFontDialog.h. ◆ fTextAlign. Int_t TGFontDialog::fTextAlign. protected . text alignment ; Definition at line 49 of file TGFontDialog.h. ◆ fTextAligns. TGComboBox* TGFontDialog::fTextAligns. protected . font alignment selection ; Definition at line 40 of file TGFontDialog.h. ◆ fTextColor. Pixel_t TGFontDialog::fTextColor. protected . text color ; Definition at line 50 of file TGFontDialog.h. ◆ fWaitFor. Bool_t TGFontDialog::fWaitFor. protected . if kTRUE WaitForUnmap is called in constructor. ; Definition at line 59 of file TGFontDialog.h. Libraries for TGFontDialog:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFontDialog.h; gui/gui/src/TGFontDialog.cxx. TGFontDialog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:14 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontDialog.html:45046,Guid,Guide,45046,doc/master/classTGFontDialog.html,https://root.cern,https://root.cern/doc/master/classTGFontDialog.html,1,['Guid'],['Guide']
Usability,"ed = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddToRange(const char* rangeName, const char* stateNameList); virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCategory.html:1859,Clear,Clear,1859,root/html526/RooCategory.html,https://root.cern,https://root.cern/root/html526/RooCategory.html,1,['Clear'],['Clear']
Usability,"ed Attributes |; Private Member Functions |; List of all members ; TEveWindowTab Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGTab into an eve-window. ; The tab is owned by the eve-window. ; Definition at line 395 of file TEveWindow.h. Public Member Functions;  TEveWindowTab (TGTab *tab, const char *n=""TEveWindowTab"", const char *t="""");  Constructor. ;  ;  ~TEveWindowTab () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the tab. ;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create new frame-slot - a new tab. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowTab.html:1185,Clear,ClearEveFrame,1185,doc/master/classTEveWindowTab.html,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html,2,['Clear'],"['ClearEveFrame', 'Clears']"
Usability,"ed Bar StreamerInfo is going to be used to read the TClonesArray in T1. The result will be Bar objects with data member values not in the right sequence. The solution to this problem is to call BypassStreamer(kFALSE) for the TClonesArray. In this case, the normal Bar::Streamer function will be called. The Bar::Streamer function works OK independently if the Bar StreamerInfo had been generated in optimized mode or not. . Definition at line 321 of file TClonesArray.cxx. ◆ CanBypassStreamer(). Bool_t TClonesArray::CanBypassStreamer ; (; ); const. inline . Definition at line 64 of file TClonesArray.h. ◆ Class(). static TClass * TClonesArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TClonesArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClonesArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 83 of file TClonesArray.h. ◆ Clear(). void TClonesArray::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Only use this routine when your objects don't allocate memory since it will not call the object dtors. However, if the class in the TClonesArray implements the function Clear(Option_t *option) and if option = ""C"" the function Clear() is called for all objects in the array. In the function Clear(), one can delete objects or dynamic arrays allocated in the class. This procedure is much faster than calling TClonesArray::Delete(). When the option starts with ""C+"", eg ""C+xyz"" the objects in the array are in turn cleared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:33053,Clear,Clear,33053,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"ed by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionQueryFrame.html:20543,progress bar,progress bar,20543,root/html534/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html534/TSessionQueryFrame.html,3,['progress bar'],['progress bar']
Usability,"ed by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:20249,progress bar,progress bar,20249,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,9,['progress bar'],['progress bar']
Usability,"ed columns. ; Implemented in ROOT::Experimental::Internal::RPageNullSink, ROOT::Experimental::Internal::RPageSinkBuf, and ROOT::Experimental::Internal::RPagePersistentSink. Member Data Documentation. ◆ fCompressor. std::unique_ptr<RNTupleCompressor> ROOT::Experimental::Internal::RPageSink::fCompressor. protected . Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ; There could be concrete page sinks that don't need a compressor. Therefore, and in order to stay consistent with the page source, we leave it up to the derived class whether or not the compressor gets constructed. ; Definition at line 280 of file RPageStorage.hxx. ◆ fIsInitialized. bool ROOT::Experimental::Internal::RPageSink::fIsInitialized = false. private . Flag if sink was initialized. ; Definition at line 291 of file RPageStorage.hxx. ◆ fOnDatasetCommitCallbacks. std::vector<Callback_t> ROOT::Experimental::Internal::RPageSink::fOnDatasetCommitCallbacks. private . Definition at line 292 of file RPageStorage.hxx. ◆ fOptions. std::unique_ptr<RNTupleWriteOptions> ROOT::Experimental::Internal::RPageSink::fOptions. protected . Definition at line 275 of file RPageStorage.hxx. ◆ fSealPageBuffer. std::vector<unsigned char> ROOT::Experimental::Internal::RPageSink::fSealPageBuffer. private . Used as destination buffer in the simple SealPage overload. ; Definition at line 293 of file RPageStorage.hxx. ◆ fWritePageMemoryManager. RWritePageMemoryManager ROOT::Experimental::Internal::RPageSink::fWritePageMemoryManager. private . Used in ReservePage to maintain the page buffer budget. ; Definition at line 296 of file RPageStorage.hxx. Libraries for ROOT::Experimental::Internal::RPageSink:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx; tree/ntuple/v7/src/RPageStorage.cxx. ROOTExperimentalInternalRPageSink. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:18828,simpl,simple,18828,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"ed dynamic-casted to TEveElement. ; This is needed as class TEveProjected is used as secondary inheritance. ; Reimplemented from TEveProjected.; Definition at line 95 of file TEveJetCone.h. ◆ IsA(). TClass * TEveJetConeProjected::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 97 of file TEveJetCone.h. ◆ operator=(). TEveJetConeProjected & TEveJetConeProjected::operator= ; (; const TEveJetConeProjected & ; ). private . ◆ SetDepthLocal(). void TEveJetConeProjected::SetDepthLocal ; (; Float_t ; d). overrideprotectedvirtual . This is virtual method from base-class TEveProjected. ; Reimplemented from TEveProjected.; Definition at line 229 of file TEveJetCone.cxx. ◆ SetProjection(). void TEveJetConeProjected::SetProjection ; (; TEveProjectionManager * ; mng, . TEveProjectable * ; model . ). overridevirtual . This is virtual method from base-class TEveProjected. ; Reimplemented from TEveProjected.; Definition at line 237 of file TEveJetCone.cxx. ◆ Streamer(). void TEveJetConeProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveJetConeProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 97 of file TEveJetCone.h. ◆ UpdateProjection(). void TEveJetConeProjected::UpdateProjection ; (; ). overridevirtual . Re-project the jet-cone. ; Implements TEveProjected.; Definition at line 246 of file TEveJetCone.cxx. Friends And Related Symbol Documentation. ◆ TEveJetConeProjectedGL. friend class TEveJetConeProjectedGL. friend . Definition at line 75 of file TEveJetCone.h. Libraries for TEveJetConeProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveJetCone.h; graf3d/eve/src/TEveJetCone.cxx. TEveJetConeProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetConeProjected.html:42172,Guid,Guide,42172,doc/master/classTEveJetConeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveJetConeProjected.html,1,['Guid'],['Guide']
Usability,"ed explicitly, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis.; ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by; . TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; . where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] using the distribution of the |d_i|<\tt> that can be obtained by tsvdunf->GetD() and/or using pseudo-experiments.; ; Covariance matrices on the measured spectrum (for either the total uncertainties or individual sources of uncertainties) can be propagated to covariance matrices using the GetUnfoldCovMatrix method, which uses pseudo experiments for the propagation. In addition, GetAdetCovMatrix allows for the propagation of the statistical uncertainties on the response matrix using pseudo experiments. The covariance matrix corresponding to Bcov is also computed as described in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] and can be obtained from tsvdunf->GetXtau() and its (regularisation independent) inverse from tsvdunf->GetXinv(). The distribution of singular values can be retrieved using tsvdunf->GetSV().; ; See also the tutorial for a toy example.; ; . Function Members (Methods); public:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSVDUnfold.html:2084,guid,guidelines,2084,root/html534/TSVDUnfold.html,https://root.cern,https://root.cern/root/html534/TSVDUnfold.html,3,['guid'],['guidelines']
Usability,"ed for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrapEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoTrapEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoH1(); Slot for H1. void DoBl1(); Slot for Bl1. void DoTl1(); Slot for Tl1. void DoDz(); Slot for Z. void DoSc1(); Slot for H2. void DoSc2(); Slot for H2. void DoAlpha1(); Slot for alpha1. void DoTheta(); Slot for theta. void DoPhi(); Slot for phi. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrapEditor.html:21991,undo,undoing,21991,root/html534/TGeoTrapEditor.html,https://root.cern,https://root.cern/root/html534/TGeoTrapEditor.html,1,['undo'],['undoing']
Usability,"ed from TCollection; TString fName;  ; Int_t fSize;  . Inheritance diagram for TRootIconList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRootIconList(). TRootIconList::TRootIconList ; (; TRootIconBox * ; box = nullptr). constructor ; Definition at line 353 of file TRootBrowserLite.cxx. ◆ ~TRootIconList(). TRootIconList::~TRootIconList ; (; ). override . destructor ; Definition at line 363 of file TRootBrowserLite.cxx. Member Function Documentation. ◆ Browse(). void TRootIconList::Browse ; (; TBrowser * ; b). overridevirtual . browse icon list ; Reimplemented from TCollection.; Definition at line 718 of file TRootBrowserLite.cxx. ◆ GetPicture(). const TGPicture * TRootIconList::GetPicture ; (; ); const. inline . Definition at line 347 of file TRootBrowserLite.cxx. ◆ GetTitle(). const char * TRootIconList::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Reimplemented from TObject.; Definition at line 344 of file TRootBrowserLite.cxx. ◆ IsFolder(). Bool_t TRootIconList::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TCollection.; Definition at line 345 of file TRootBrowserLite.cxx. ◆ UpdateName(). void TRootIconList::UpdateName ; (; ). composite name ; Definition at line 371 of file TRootBrowserLite.cxx. Member Data Documentation. ◆ fIconBox. TRootIconBox* TRootIconList::fIconBox. private . Definition at line 337 of file TRootBrowserLite.cxx. ◆ fPic. const TGPicture* TRootIconList::fPic. private . Definition at line 338 of file TRootBrowserLite.cxx. gui/gui/src/TRootBrowserLite.cxx. TRootIconList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootIconList.html:21258,Guid,Guide,21258,doc/master/classTRootIconList.html,https://root.cern,https://root.cern/doc/master/classTRootIconList.html,1,['Guid'],['Guide']
Usability,"ed in TFileHandler, TSignalHandler, TStdExceptionHandler, TProcessEventTimer, TTimer, TIdleTimer, TSingleShotCleaner, TBrowserTimer, TInterruptHandler, TTermInputHandler, TThreadTimer, TGLRedrawTimer, TViewTimer, TGContainerKeyboardTimer, TGContainerScrollTimer, TGInputHandler, TViewUpdateTimer, TPopupDelayTimer, TRepeatTimer, TSBRepeatTimer, TBlinkTimer, TTipDelayTimer, TGuiBldDragManagerRepeatTimer, TARInterruptHandler, TASLogHandler, TASInterruptHandler, TASSigPipeHandler, TASInputHandler, TSocketHandler, TTimeOutTimer, TProofInterruptHandler, TProofInputHandler, TProofServLogHandler, TShutdownTimer, TReaperTimer, TIdleTOTimer, TProofServTerminationHandler, TProofServInterruptHandler, TProofServSigPipeHandler, TProofServInputHandler, TProofServLiteInterruptHandler, TProofServLiteSigPipeHandler, TProofServLiteTerminationHandler, TProofServLiteSegViolationHandler, TProofServLiteInputHandler, TDispatchTimer, TProctimeTimer, and TStopTimer. ◆ Remove(). virtual void TSysEvtHandler::Remove ; (; ). pure virtual . Implemented in TFileHandler, TSignalHandler, TStdExceptionHandler, and TTimer. ◆ Removed(). virtual void TSysEvtHandler::Removed ; (; ). inlinevirtual . Definition at line 51 of file TSysEvtHandler.h. ◆ Streamer(). void TSysEvtHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TTimer. ◆ StreamerNVirtual(). void TSysEvtHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file TSysEvtHandler.h. Member Data Documentation. ◆ fIsActive. Bool_t TSysEvtHandler::fIsActive. private . Definition at line 31 of file TSysEvtHandler.h. Libraries for TSysEvtHandler:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TSysEvtHandler.h; core/base/src/TSysEvtHandler.cxx. TSysEvtHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSysEvtHandler.html:20325,Guid,Guide,20325,doc/master/classTSysEvtHandler.html,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html,1,['Guid'],['Guide']
Usability,"ed in TQUndoManager. ◆ StreamerNVirtual(). void TQCommand::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TQCommand.h. ◆ Undo(). void TQCommand::Undo ; (; Option_t * ; option = """"). virtual . Un-execute all merged commands and the command. ; Merged commands are executed in reverse order. ; Reimplemented in TQUndoManager.; Definition at line 626 of file TQCommand.cxx. Friends And Related Symbol Documentation. ◆ TQUndoManager. friend class TQUndoManager. friend . Definition at line 29 of file TQCommand.h. Member Data Documentation. ◆ fName. TString TQCommand::fName. protected . Definition at line 41 of file TQCommand.h. ◆ fNewDelete. Bool_t TQCommand::fNewDelete. protected . Definition at line 40 of file TQCommand.h. ◆ fNRargs. Int_t TQCommand::fNRargs. protected . Definition at line 36 of file TQCommand.h. ◆ fNUargs. Int_t TQCommand::fNUargs. protected . Definition at line 37 of file TQCommand.h. ◆ fObject. void* TQCommand::fObject. protected . Definition at line 43 of file TQCommand.h. ◆ fRedo. TQConnection* TQCommand::fRedo. protected . Definition at line 32 of file TQCommand.h. ◆ fRedoArgs. Long_t* TQCommand::fRedoArgs. protected . Definition at line 34 of file TQCommand.h. ◆ fState. Int_t TQCommand::fState. protected . Definition at line 38 of file TQCommand.h. ◆ fStatus. Int_t TQCommand::fStatus. protected . Definition at line 39 of file TQCommand.h. ◆ fTitle. TString TQCommand::fTitle. protected . Definition at line 42 of file TQCommand.h. ◆ fUndo. TQConnection* TQCommand::fUndo. protected . Definition at line 33 of file TQCommand.h. ◆ fUndoArgs. Long_t* TQCommand::fUndoArgs. protected . Definition at line 35 of file TQCommand.h. Libraries for TQCommand:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TQCommand.h; core/base/src/TQCommand.cxx. TQCommand. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:45792,Guid,Guide,45792,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Guid'],['Guide']
Usability,ed in error calculation) ; Definition at line 62 of file ROCCalc.h. ◆ fnStot. Int_t TMVA::ROCCalc::fnStot. private . Definition at line 68 of file ROCCalc.h. ◆ fPurity. TH1* TMVA::ROCCalc::fPurity. private . Definition at line 70 of file ROCCalc.h. ◆ fSignalCut. Double_t TMVA::ROCCalc::fSignalCut. private . MVA cut value for last demanded background rejection or signal efficiency. ; Definition at line 75 of file ROCCalc.h. ◆ fSignificance. TH1* TMVA::ROCCalc::fSignificance. private . Definition at line 69 of file ROCCalc.h. ◆ fSplB. TSpline * TMVA::ROCCalc::fSplB. private . Definition at line 64 of file ROCCalc.h. ◆ fSpleffBvsS. TSpline* TMVA::ROCCalc::fSpleffBvsS. private . Definition at line 66 of file ROCCalc.h. ◆ fSplmvaCumB. TSpline * TMVA::ROCCalc::fSplmvaCumB. private . spline of cumulated mva distributions ; Definition at line 65 of file ROCCalc.h. ◆ fSplmvaCumS. TSpline* TMVA::ROCCalc::fSplmvaCumS. private . Definition at line 65 of file ROCCalc.h. ◆ fSplS. TSpline* TMVA::ROCCalc::fSplS. private . Definition at line 64 of file ROCCalc.h. ◆ fStatus. Bool_t TMVA::ROCCalc::fStatus. private . false if is found some error in mvaS or mvaB ; Definition at line 54 of file ROCCalc.h. ◆ fUseSplines. Bool_t TMVA::ROCCalc::fUseSplines. private . Definition at line 57 of file ROCCalc.h. ◆ fXmax. Float_t TMVA::ROCCalc::fXmax. private . min and max of the mva distribution ; Definition at line 61 of file ROCCalc.h. ◆ fXmin. Float_t TMVA::ROCCalc::fXmin. private . Definition at line 61 of file ROCCalc.h. ◆ inveffBvsS. TH1D* TMVA::ROCCalc::inveffBvsS. private . Definition at line 73 of file ROCCalc.h. ◆ rejBvsS. TH1D* TMVA::ROCCalc::rejBvsS. private . Definition at line 72 of file ROCCalc.h. Libraries for TMVA::ROCCalc:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ROCCalc.h; tmva/tmva/src/ROCCalc.cxx. TMVAROCCalc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html:8399,Guid,Guide,8399,doc/master/classTMVA_1_1ROCCalc.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html,1,['Guid'],['Guide']
Usability,"ed int ipar = 0; ipar < npar; ++ipar) {; 161 const ParameterSettings & par = fconfig.ParSettings(ipar);; 162 if (par.IsFixed() ) fFixedParams[ipar] = true;; 163 else nfree++;; 164 if (par.IsBound() ) {; 165 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limits<double>::infinity() ;; 166 double upper = (par.HasUpperLimit()) ? par.UpperLimit() : std::numeric_limits<double>::infinity() ;; 167 fBoundParams[ipar] = fParamBounds.size();; 168 fParamBounds.push_back(std::make_pair(lower,upper));; 169 }; 170 }; 171 // check if nfree (from FitConfig) and fNFree (from minimizer) are consistent; 172 if (nfree != fNFree ) {; 173 MATH_ERROR_MSG(""FitResult"",""FitConfiguration and Minimizer result are not consistent"");; 174 std::cout << ""Number of free parameters from FitConfig = "" << nfree << std::endl;; 175 std::cout << ""Number of free parameters from Minimizer = "" << fNFree << std::endl;; 176 }; 177 ; 178 // if flag is binned compute a chi2 when a chi2 function is given; 179 if (fitType == 1) {; 180 if (chi2func == nullptr); 181 fChi2 = fVal;; 182 else {; 183 // compute chi2 equivalent for likelihood fits; 184 // NB: empty bins are considered; 185 fChi2 = (*chi2func)(&fParams[0]);; 186 }; 187 }; 188 else if (fitType == 3) {; 189 // case of binned likelihood fits (use Baker-Cousins chi2); 190 fChi2 = 2 * fVal;; 191 }; 192 ; 193 // fill error matrix; 194 // if minimizer provides error provides also error matrix; 195 // clear in case of re-filling an existing result; 196 if (!fCovMatrix.empty()) fCovMatrix.clear();; 197 if (!fGlobalCC.empty()) fGlobalCC.clear();; 198 ; 199 if (min->Errors() != nullptr) {; 200 ; 201 fErrors = std::vector<double>(min->Errors(), min->Errors() + npar ) ;; 202 ; 203 if (fCovStatus != 0) {; 204 unsigned int r = npar * ( npar + 1 )/2;; 205 fCovMatrix.reserve(r);; 206 for (unsigned int i = 0; i < npar; ++i); 207 for (unsigned int j = 0; j <= i; ++j); 208 fCovMatrix.push_back(min->CovMatrix(i,j) );; 209 }; 210 // minos errors are se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:6788,clear,clear,6788,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['clear'],['clear']
Usability,"ed is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos if the request is in the list of; prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will cr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:25857,learn,learning,25857,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['learn'],['learning']
Usability,"ed object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region; NOTE: User takes ownership of the returned object. void SetIntegrationType(const char* type); set the integration type (possible type are) :; 1D integration ( used when only one nuisance and when the posterior is scanned):; adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls; Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling; See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC:; evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate them; The toy are generated by default for each poi values; (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; each poi value. It can be convenient when the generation time is much larger than the evaluation time,; otherwise it is recoomended to re-generate the toy for each poi scanned point of the posterior function. ROOFIT:; use roofit default integration methods which will produce a nested integral (not reccomended for more; than 1 nuisance parameters). if type = 0 use default specified via class Integrato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:13030,simpl,simple,13030,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,5,['simpl'],['simple']
Usability,"ed only); frame2 = dt.frame(Title=""Decay distribution of mixed events""); data.plotOn(frame2, Cut=""mixState==mixState::mixed""); ; # Position slice in mixState at ""mixed"" and plot slice of pdf in mixstate; # over data (integrated over tagFlav); bmix_gm1.plotOn(frame2, Slice=(mixState, ""mixed"")); ; # Create frame, data (unmixed only); frame3 = dt.frame(Title=""Decay distribution of unmixed events""); data.plotOn(frame3, Cut=""mixState==mixState::unmixed""); ; # Position slice in mixState at ""unmixed"" and plot slice of pdf in; # mixstate over data (integrated over tagFlav); bmix_gm1.plotOn(frame3, Slice=(mixState, ""unmixed"")); ; c = ROOT.TCanvas(""rf310_sliceplot"", ""rf310_sliceplot"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.4); ROOT.gPad.SetLogy(); frame3.Draw(); ; c.SaveAs(""rf310_sliceplot.png""); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (mixState,tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 3787 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 16213 events out of 20000 total events; [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt represents a slice in (mixState); [#1] INFO:Plotting -- RooAbsReal::plotOn(bmix) plot on dt integrates over variables (tagFlav); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf310_sliceplot.py. tutorialsroofitrf310_sliceplot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf310__sliceplot_8py.html:4011,Guid,Guide,4011,doc/master/rf310__sliceplot_8py.html,https://root.cern,https://root.cern/doc/master/rf310__sliceplot_8py.html,1,['Guid'],['Guide']
Usability,"ed parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for parameter (if applicable). Int_t GetMinute(Int_t ); return minutes value for parameter (if applicable). Int_t GetSecond(Int_t ); return seconds value for parameter (if applicable). TDatime GetTimestamp(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. TSQLStatement(Bool_t errout = kTRUE); { ClearError(); }. virtual ~TSQLStatement(); {}. Int_t GetBufferLength() const. Int_t GetNumParameters(). Bool_t NextIteration(). Bool_t SetNull(Int_t ); { return kFALSE; }. Bool_t SetInt(Int_t , Int_t ); { return kFALSE; }. Bool_t SetUInt(Int_t , UInt_t ); { return kFALSE; }. Bool_t SetLong(Int_t , Long_t ); { return kFALSE; }. Bool_t SetLong64(Int_t , Long64_t ); { return kFALSE; }. Bool_t SetULong64(Int_t , ULong64_t ); { return kFALSE; }. Bool_t SetDouble(Int_t , Double_t ); { return kFALSE; }. Bool_t SetString(Int_t , const char* , Int_t = 256); { return kFALSE; }. Bool_t SetDate(Int_t , Int_t , Int_t , Int_t ); { return kFALSE; }. Bool_t SetTime(Int_t , Int_t , Int_t , Int_t ); { return kFALSE; }. Bool_t SetDatime(Int_t , Int_t , Int_t , Int_t , Int_t , Int_t , Int_t ); { return kFALSE; }. Bool_t SetTimestamp(Int_t , Int_t , Int_t , Int_t , Int_t , Int_t , Int_t , Int_t = 0); { return kFALSE; }. void SetTimeFormating(const char* ); {}. Bool_t SetBinary(Int_t , void* , L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLStatement.html:20881,Clear,ClearError,20881,root/html602/TSQLStatement.html,https://root.cern,https://root.cern/root/html602/TSQLStatement.html,2,['Clear'],['ClearError']
Usability,"ed to _any_ kind of plot (components, asymmetries, efficiencies; // etc..); model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange), Components(""bkg""));; model.plotOn(frame, VisualizeError(*r, 1, false), DrawOption(""L""), LineWidth(2), LineColor(kRed), Components(""bkg""),; LineStyle(kDashed));; ; // Overlay central value; model.plotOn(frame);; model.plotOn(frame, Components(""bkg""), LineStyle(kDashed));; d->plotOn(frame);; frame->SetMinimum(0);; ; // V i s u a l i z e p a r t i a l f i t e r r o r; // ------------------------------------------------------; ; // Make plot frame; RooPlot *frame2 = x.frame(Bins(40), Title(""Visualization of 2-sigma partial error from (m,m2)""));; ; // Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; // ___ -1; // Vred = V22 = V11 - V12 * V22 * V21; //; // Where V11,V12,V21,V22 represent a block decomposition of the covariance matrix into observables that; // are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and V22bar; // is the Shur complement of V22, calculated as shown above; //; // (Note that Vred is _not_ a simple sub-matrix of V); ; // Propagate partial error due to shape parameters (m,m2) using linear and sampling method; model.plotOn(frame2, VisualizeError(*r, RooArgSet(m, m2), 2), FillColor(kCyan));; model.plotOn(frame2, Components(""bkg""), VisualizeError(*r, RooArgSet(m, m2), 2), FillColor(kCyan));; ; model.plotOn(frame2);; model.plotOn(frame2, Components(""bkg""), LineStyle(kDashed));; frame2->SetMinimum(0);; ; // Make plot frame; RooPlot *frame3 = x.frame(Bins(40), Title(""Visualization of 2-sigma partial error from (s,s2)""));; ; // Propagate partial error due to yield parameter using linear and sampling method; model.plotOn(frame3, VisualizeError(*r, RooArgSet(s, s2), 2), FillColor(kGreen));; model.plotOn(frame3, Components(""bkg""), VisualizeError(*r, RooArgSet(s, s2), 2), FillColor(kGreen));; ; model.plotOn(frame3);; model.plotO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8C.html:4519,simpl,simple,4519,doc/master/rf610__visualerror_8C.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8C.html,1,['simpl'],['simple']
Usability,"ed to suggest the type of action that; 104one can do on this object. Clicking with the right mouse button on an object; 105pops-up a contextmenu with a complete list of actions possible on this object.; 106 ; 107A graphical editor may be started from the canvas ""View"" menu under the menu; 108entry ""Toolbar"".; 109 ; 110An interactive HELP is available by clicking on the HELP button at the top right; 111of the canvas. It gives a short explanation about the canvas' menus.; 112 ; 113A canvas may be automatically divided into pads via `TPad::Divide`.; 114 ; 115At creation time, no matter if in interactive or batch mode, the constructor; 116defines the size of the canvas window (including the size of the window; 117manager's decoration). To define precisely the graphics area size of a canvas in; 118the interactive mode, the following four lines of code should be used:; 119~~~ {.cpp}; 120 {; 121 Double_t w = 600;; 122 Double_t h = 600;; 123 auto c = new TCanvas(""c"", ""c"", w, h);; 124 c->SetWindowSize(w + (w - c->GetWw()), h + (h - c->GetWh()));; 125 }; 126~~~; 127and in the batch mode simply do:; 128~~~ {.cpp}; 129 c->SetCanvasSize(w,h);; 130~~~; 131 ; 132If the canvas size exceeds the window size, scroll bars will be added to the canvas; 133This allows to display very large canvases (even bigger than the screen size). The; 134Following example shows how to proceed.; 135~~~ {.cpp}; 136 {; 137 auto c = new TCanvas(""c"",""c"");; 138 c->SetCanvasSize(1500, 1500);; 139 c->SetWindowSize(500, 500);; 140 }; 141~~~; 142*/; 143 ; 144////////////////////////////////////////////////////////////////////////////////; 145/// Canvas default constructor.; 146 ; 147TCanvas::TCanvas(Bool_t build) : TPad(), fDoubleBuffer(0); 148{; 149 fPainter = nullptr;; 150 fWindowTopX = 0;; 151 fWindowTopY = 0;; 152 fWindowWidth = 0;; 153 fWindowHeight = 0;; 154 fCw = 0;; 155 fCh = 0;; 156 fXsizeUser = 0;; 157 fYsizeUser = 0;; 158 fXsizeReal = kDefaultCanvasSize;; 159 fYsizeReal = kDefaultCanvasSize;; 160 fHi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:4135,simpl,simply,4135,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['simpl'],['simply']
Usability,"ed to the integrand of which the integral is requested. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumFunc to more intuitively reflect the contents of the product operator construction. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:3204,simpl,simple,3204,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,2,['simpl'],['simple']
Usability,"ed when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree automatically creates a cache. This feature can be; controlled with an env. variable or the TTreeCache.Size option.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be written.; When reading at the contrary, one may hit a performance problem when reading; across a network (LAN or WAN) and the network latency is high.; For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each; with no cache will imply 10s penalty where a local ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:2001,learn,learning,2001,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,2,['learn'],['learning']
Usability,"ed will be lost. ; Definition at line 153 of file TFileCacheWrite.cxx. ◆ Streamer(). void TFileCacheWrite::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFileCacheWrite::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TFileCacheWrite.h. ◆ WriteBuffer(). Int_t TFileCacheWrite::WriteBuffer ; (; const char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Write buffer at position pos in the write buffer. ; The function returns 1 if the buffer has been successfully entered into the write buffer. The function returns 0 in case WriteBuffer() was recusively called via Flush(). The function returns -1 in case of error. ; Definition at line 121 of file TFileCacheWrite.cxx. Member Data Documentation. ◆ fBuffer. char* TFileCacheWrite::fBuffer. protected . [fBufferSize] buffer of contiguous prefetched blocks ; Definition at line 26 of file TFileCacheWrite.h. ◆ fBufferSize. Int_t TFileCacheWrite::fBufferSize. protected . Allocated size of fBuffer. ; Definition at line 23 of file TFileCacheWrite.h. ◆ fFile. TFile* TFileCacheWrite::fFile. protected . Pointer to file. ; Definition at line 25 of file TFileCacheWrite.h. ◆ fNtot. Int_t TFileCacheWrite::fNtot. protected . Total size of cached blocks. ; Definition at line 24 of file TFileCacheWrite.h. ◆ fRecursive. Bool_t TFileCacheWrite::fRecursive. protected . flag to avoid recursive calls ; Definition at line 27 of file TFileCacheWrite.h. ◆ fSeekStart. Long64_t TFileCacheWrite::fSeekStart. protected . Seek value of first block in cache. ; Definition at line 22 of file TFileCacheWrite.h. Libraries for TFileCacheWrite:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TFileCacheWrite.h; io/io/src/TFileCacheWrite.cxx. TFileCacheWrite. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheWrite.html:16268,Guid,Guide,16268,doc/master/classTFileCacheWrite.html,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html,1,['Guid'],['Guide']
Usability,"ed() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj); TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidChdir(TGListTreeItem* item); voidChecked(TObject* obj, Bool_t check); Bool_tCheckFiltered(TGListTreeItem* item, Bool_t but = kFALSE); virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); voidCheckRemote(TGListTreeItem* item); Bool_tCheckSorted(TGListTreeItem* item, Bool_t but = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClicked(TGListTreeItem* item, Int_t btn, Int_t x, Int_t y); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTBrowserImp::CloseTabs(); virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGFileBrowser.html:2264,Clear,Clear,2264,root/html532/TGFileBrowser.html,https://root.cern,https://root.cern/root/html532/TGFileBrowser.html,4,['Clear'],['Clear']
Usability,ed(). void TGDragWindow::MapRaised ; (; ). overridevirtual . Map and Raise TGDragWindow. ; Reimplemented from TGWindow.; Definition at line 162 of file TGDNDManager.cxx. ◆ MapWindow(). void TGDragWindow::MapWindow ; (; ). overridevirtual . Map TGDragWindow. ; Reimplemented from TGWindow.; Definition at line 126 of file TGDNDManager.cxx. ◆ RaiseWindow(). void TGDragWindow::RaiseWindow ; (; ). overridevirtual . Raise TGDragWindow. ; Reimplemented from TGWindow.; Definition at line 144 of file TGDNDManager.cxx. ◆ Streamer(). void TGDragWindow::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGDragWindow::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file TGDNDManager.h. ◆ UnmapWindow(). void TGDragWindow::UnmapWindow ; (; ). overridevirtual . Unmap TGDragWindow. ; Reimplemented from TGWindow.; Definition at line 135 of file TGDNDManager.cxx. Member Data Documentation. ◆ fgDefaultCursor. Cursor_t TGDragWindow::fgDefaultCursor = kNone. staticprotected . Definition at line 25 of file TGDNDManager.h. ◆ fInput. Window_t TGDragWindow::fInput. protected . Input Window. ; Definition at line 30 of file TGDNDManager.h. ◆ fMask. Pixmap_t TGDragWindow::fMask. protected . Pixmaps used as Window shape. ; Definition at line 31 of file TGDNDManager.h. ◆ fPh. UInt_t TGDragWindow::fPh. protected . Hot point coordinates (x and y) ; Definition at line 32 of file TGDNDManager.h. ◆ fPic. Pixmap_t TGDragWindow::fPic. protected . Definition at line 31 of file TGDNDManager.h. ◆ fPw. UInt_t TGDragWindow::fPw. protected . Definition at line 32 of file TGDNDManager.h. Libraries for TGDragWindow:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDNDManager.h; gui/gui/src/TGDNDManager.cxx. TGDragWindow. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDragWindow.html:32082,Guid,Guide,32082,doc/master/classTGDragWindow.html,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html,1,['Guid'],['Guide']
Usability,"ed(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tCalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLine.html:2618,Clear,Clear,2618,root/html534/TEveLine.html,https://root.cern,https://root.cern/root/html534/TEveLine.html,3,['Clear'],['Clear']
Usability,"ed) return;; 6391 }; 6392 ; 6393 // Get Primitives; 6394 prims = gPad->GetListOfPrimitives();; 6395 n = TMath::Min(15,prims->GetSize());; 6396 Int_t lineColor = TColor::GetColor(239, 202, 0);; 6397 ; 6398 TAttBBox2D *cur = dynamic_cast<TAttBBox2D *>( object );; 6399 if (cur) {; 6400 //create invisible TPad above gPad; 6401 if (!tmpGuideLinePad){; 6402 tmpGuideLinePad = new TPad(""tmpGuideLinePad"", ""tmpGuideLinePad"", 0, 0, 1, 1);; 6403 Double_t x1, y1, x2, y2;; 6404 gPad->GetRange(x1, y1, x2, y2);; 6405 tmpGuideLinePad->Range(x1, y1, x2, y2);; 6406 tmpGuideLinePad->SetFillStyle(0);; 6407 tmpGuideLinePad->SetFillColor(0);; 6408 tmpGuideLinePad->Draw();; 6409 tmpGuideLinePad->cd();; 6410 gPad->GetRange(x1, y1, x2, y2);; 6411 }; 6412 if (cling && !log) threshold = 7;; 6413 else threshold = 1;; 6414 ; 6415 Rectangle_t BBox = cur->GetBBox();; 6416 TPoint center = cur->GetBBoxCenter();; 6417 ; 6418 otherDist.clear();; 6419 curDist.clear();; 6420 ; 6421 switch (event) {; 6422 ; 6423 case kButton1Down:; 6424 case kButton1Motion:; 6425 MX = gPad->GetX1() + 0.5 * (gPad->GetX2()-gPad->GetX1());; 6426 MY = gPad->GetY1() + 0.5 * (gPad->GetY2()-gPad->GetY1());; 6427 pMX = gPad->XtoPixel(MX);; 6428 pMY = gPad->YtoPixel(MY);; 6429 // Middlelines; 6430 if (TMath::Abs(pMX-center.GetX())<threshold) {; 6431 if (cling && (!resize)) {; 6432 cur->SetBBoxCenterX(pMX);; 6433 center = cur->GetBBoxCenter();; 6434 BBox = cur->GetBBox();; 6435 center = cur->GetBBoxCenter();; 6436 }; 6437 L = new TLine(MX, gPad->GetY1(), MX, gPad->GetY2());; 6438 L->SetBit(kCanDelete);; 6439 L->SetLineColor(lineColor);; 6440 L->Draw();; 6441 }; 6442 if (TMath::Abs(pMY-center.GetY())<threshold) {; 6443 if (cling && (!resize)) {; 6444 cur->SetBBoxCenterY(pMY);; 6445 center = cur->GetBBoxCenter();; 6446 BBox = cur->GetBBox();; 6447 center = cur->GetBBoxCenter();; 6448 }; 6449 L = new TLine(gPad->GetX1(), MY, gPad->GetX2(), MY);; 6450 L->SetBit(kCanDelete);; 6451 L->SetLineColor(lineColor);; 6452 L->Draw();; 6453 }; 64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:211468,clear,clear,211468,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['clear'],['clear']
Usability,"ed). Since TGeoTube derives brom the base shape class, we can provide it to the volume; constructor :. TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look inside TGeoManager::MakeTube() method, we would; have been able to create our wire with a single line :. TGeoVolume *wire_co = gGeoManager->MakeTube(""WIRE_CO"", ptrCOPPER, 0, 0.01, 1);. The same applies for all primitive shapes, for which there can be found; corresponding MakeSHAPE() methods. Their usage is much more convenient unless; a shape has to be shared between more volumes. Let's make now an aluminium wire; having the same shape, supposing that we have created the copper wire with the; line above :. TGeoVolume *wire_al = new TGeoVolume(""WIRE_AL"", wire_co->GetShape(), ptrAL);. Now that we have learned how to create elementary volumes, let's see how we; can create a geometrical hierarchy. Positioning volumes. When creating a volume one does not specify if this will contain or not other; volumes. Adding daughters to a volume implies creating those and adding them; one by one to the list of daughters. Since the volume has to know the position; of all its daughters, we will have to supply at the same time a geometrical; transformation with respect to its local reference frame for each of them.; The objects referencing a volume and a transformation are called NODES and; their creation is fully handled by the modeler. They represent the link; elements in the hierarchy of volumes. Nodes are unique and distinct geometrical; objects ONLY from their container point of view. Since volumes can be replicated; in the geometry, the same node may be found on different branches. /*. */. An important observation is that volume objects are owned by the TGeoManager; class. This stores a list of all volumes in the geometry, that is c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:4346,learn,learned,4346,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,9,['learn'],['learned']
Usability,"ed). Since TGeoTube derives from the base shape class, we can provide it to the volume; constructor :. TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look inside TGeoManager::MakeTube() method, we would; have been able to create our wire with a single line :. TGeoVolume *wire_co = gGeoManager->MakeTube(""WIRE_CO"", ptrCOPPER, 0, 0.01, 1);. The same applies for all primitive shapes, for which there can be found; corresponding MakeSHAPE() methods. Their usage is much more convenient unless; a shape has to be shared between more volumes. Let's make now an aluminium wire; having the same shape, supposing that we have created the copper wire with the; line above :. TGeoVolume *wire_al = new TGeoVolume(""WIRE_AL"", wire_co->GetShape(), ptrAL);. Now that we have learned how to create elementary volumes, let's see how we; can create a geometrical hierarchy. Positioning volumes. When creating a volume one does not specify if this will contain or not other; volumes. Adding daughters to a volume implies creating those and adding them; one by one to the list of daughters. Since the volume has to know the position; of all its daughters, we will have to supply at the same time a geometrical; transformation with respect to its local reference frame for each of them.; The objects referencing a volume and a transformation are called NODES and; their creation is fully handled by the modeler. They represent the link; elements in the hierarchy of volumes. Nodes are unique and distinct geometrical; objects ONLY from their container point of view. Since volumes can be replicated; in the geometry, the same node may be found on different branches. /*. */. An important observation is that volume objects are owned by the TGeoManager; class. This stores a list of all volumes in the geometry, that is c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:4366,learn,learned,4366,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['learn'],['learned']
Usability,"ed* set2RangeName = 0); Bool_tcontainsSet1(const RooArgSet* set1); Int_tentries() const; Int_tindex(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); voidinitialize(const RooNormSetCache& other); virtual TClass*IsA() const; const RooArgSet*lastSet1() const; const RooArgSet*lastSet2() const; const RooNameSet&nameSet1() const; const RooNameSet&nameSet2() const; RooNormSetCache&operator=(const RooNormSetCache&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. ULong_t_max!; RooNameSet_name1!; RooNameSet_name2!; ULong_t_next!; map<pair<const RooArgSet*,const RooArgSet*>,unsigned long>_pairToIdx!; vector<pair<const RooArgSet*,const RooArgSet*> >_pairs!; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(ULong_t max = 32). ~RooNormSetCache(); Destructor. void clear(); Clear contents. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. RooNormSetCache(ULong_t max = 32). Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); Match range name first. Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); { return (index(set1,set2,set2RangeName) >= 0); }. Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _pairs.empty()?0:_pairs.back().first; }. const RooArgSet* lastSet2() const; { return _pairs.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNormSetCache.html:2474,clear,clear,2474,root/html534/RooNormSetCache.html,https://root.cern,https://root.cern/root/html534/RooNormSetCache.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"ed. Unless overridden by derived classes, this always returns false. ;  ; double maxVal (Int_t code) const override;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCdfBoundaries (bool flag);  ; void setInterpolationOrder (Int_t order);  ; void setUnitNorm (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class RooHistPdf. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:4156,simpl,simple,4156,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['simpl'],['simple']
Usability,"ed.Definition TCanvas.cxx:2476; TCanvas::fBatchBool_t fBatch! True when in batchmodeDefinition TCanvas.h:59; TCanvas::fUseGLBool_t fUseGL! True when rendering is with GLDefinition TCanvas.h:62; TCanvas::GetEventYInt_t GetEventY() const overrideDefinition TCanvas.h:137; TCanvas::fEventXInt_t fEventX! Last X mouse position in canvasDefinition TCanvas.h:46; TCanvas::IsBatchBool_t IsBatch() const overrideDefinition TCanvas.h:171; TCanvas::DrawCloneTObject * DrawClone(Option_t *option="""") const overrideDraw a clone of this canvas A new canvas is created that is a clone of this canvas.Definition TCanvas.cxx:907; TCanvas::fXsizeRealSize_t fXsizeRealCurrent size of canvas along X in CM.Definition TCanvas.h:35; TCanvas::HasMenuBarBool_t HasMenuBar() constDefinition TCanvas.h:168; TCanvas::GetCanvasPainterTVirtualPadPainter * GetCanvasPainter()Access and (probably) creation of pad painter.Definition TCanvas.cxx:2616; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TCanvas::PickTPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj) overrideSearch for an object at pixel position px,py.Definition TCanvas.h:183; TCanvas::Closevoid Close(Option_t *option="""") overrideClose canvas.Definition TCanvas.cxx:788; TCanvas::SetFixedAspectRatiovoid SetFixedAspectRatio(Bool_t fixed=kTRUE) overrideFix canvas aspect ratio to current value if fixed is true.Definition TCanvas.cxx:2016; TCanvas::Resizevirtual void Resize(Option_t *option="""")Recompute canvas parameters following a X11 Resize.Definition TCanvas.cxx:1668; TCanvas::GetHighLightColorColor_t GetHighLightColor() const overrideDefinition TCanvas.h:138; TCanvas::GetShowToolBarBool_t GetShowToolBar() constDefinition TCanvas.h:149; TCanvas::DrawEventStatusvoid DrawEventStatus(Int_t event, Int_t x, Int_t y, TObject *selected)Report name and title of primitive below the cursor.Definition TCanvas.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:19205,simpl,simplification,19205,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,1,['simpl'],['simplification']
Usability,"ed.Definition TROOT.cxx:2910; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TRefTableA TRefTable maintains the association between a referenced object and the parent object supporting th...Definition TRefTable.h:35; TRefTable::GetRefTablestatic TRefTable * GetRefTable()Static function returning the current TRefTable.Definition TRefTable.cxx:287; TRefTable::Addvirtual Int_t Add(Int_t uid, TProcessID *context=nullptr)Add a new uid to the table.Definition TRefTable.cxx:88; TStorage::ObjectDeallocstatic void ObjectDealloc(void *vp)Used to deallocate a TObject on the heap (via TObject::operator delete()).Definition TStorage.cxx:322; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TVirtualPad::TContextsmall helper class to store/restore gPad context in TPad methodsDefinition TVirtualPad.h:61; bool; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOT::Internal::DeleteChangesMemorybool DeleteChangesMemory()Definition TObject.cxx:133; ROOT::Internal::DeleteChangesMemoryImplbool DeleteChangesMemoryImpl()Definition TObject.cxx:76; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395. corebasesrcTObject.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:60902,Guid,Guide,60902,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ed.cxx. ◆ SetSegsAndPols(). void TGeoTessellated::SetSegsAndPols ; (; TBuffer3D & ; buff); const. overridevirtual . Fills TBuffer3D structure for segments and polygons. ; Reimplemented from TGeoBBox.; Definition at line 471 of file TGeoTessellated.cxx. ◆ Sizeof3D(). void TGeoTessellated::Sizeof3D ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 114 of file TGeoTessellated.h. ◆ Streamer(). void TGeoTessellated::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoTessellated::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 131 of file TGeoTessellated.h. Member Data Documentation. ◆ fClosedBody. bool TGeoTessellated::fClosedBody = false. private . Shape fully defined. ; Definition at line 66 of file TGeoTessellated.h. ◆ fDefined. bool TGeoTessellated::fDefined = false. private . Definition at line 65 of file TGeoTessellated.h. ◆ fFacets. std::vector<TGeoFacet> TGeoTessellated::fFacets. private . Definition at line 68 of file TGeoTessellated.h. ◆ fNfacets. int TGeoTessellated::fNfacets = 0. private . Definition at line 62 of file TGeoTessellated.h. ◆ fNseg. int TGeoTessellated::fNseg = 0. private . Definition at line 64 of file TGeoTessellated.h. ◆ fNvert. int TGeoTessellated::fNvert = 0. private . Definition at line 63 of file TGeoTessellated.h. ◆ fVertices. std::vector<Vertex_t> TGeoTessellated::fVertices. private . Definition at line 67 of file TGeoTessellated.h. ◆ fVerticesMap. std::multimap<long, int> TGeoTessellated::fVerticesMap. private . Definition at line 69 of file TGeoTessellated.h. Libraries for TGeoTessellated:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoTessellated.h; geom/geom/src/TGeoTessellated.cxx. TGeoTessellated. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:34796,Guid,Guide,34796,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,1,['Guid'],['Guide']
Usability,"ed:. virtual Bool_tROOT::v5::TFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tROOT::v5::TFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidROOT::v5::TFormula::ClearFormula(Option_t* option = """"); virtual voidROOT::v5::TFormula::Convert(UInt_t fromVersion); virtual Double_tDefinedValue(Int_t code); Int_tDefinedVariable(TString& name); virtual Int_tDefinedVariable(TString& name, int& action); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tROOT::v5::TFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tROOT::v5::TFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); Short_tROOT::v5::TFormula::GetAction(Int_t code) const; Short_tROOT::v5::TFormula::GetActionOptimized(Int_t code) const; Int_tROOT::v5::TFormula::GetActionParam(Int_t code) const; Int_tROOT::v5::TFormula::GetActionParamOptimized(Int_t code) const; Int_t*ROOT::v5::TFormula::GetOper() const; Int_t*ROOT::v5::TFormula::GetOperOptimized() const; voidinitCopy(const RooFormula& other); virtual Bool_tROOT::v5::TFormula::IsString(Int_t oper) const; voidROOT::v5::TFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); RooFormula&operator=(const RooFormula& other); Int_tROOT::v5::TFormula::PreCompile(); voidROOT::v5::TFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidROOT::v5::TFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tROOT::v5::TFormula::StringToNumber(Int_t code). Dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooFormula.html:9886,Clear,ClearFormula,9886,root/html604/RooFormula.html,https://root.cern,https://root.cern/root/html604/RooFormula.html,1,['Clear'],['ClearFormula']
Usability,"ed; kShadowsPainted. Default values:. shading = kShaded; shadow = kShadowsNotPainted. Light modes group, display mode = surface, 64 x 64 channels, not shaded. . Light modes group, display mode = surface, 64 x 64 channels, shaded, with shadow.; Function: TSpectrum2Painter::SetBezier(Int_t bezier); For kModeGroupSimple display modes group and for kDisplayModeGrid, kDisplayModeLinesX >and kDisplayModeLinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply for other display modes groups and display modes. Possible values are:. kNoBezierInterpol; kBezierInterpol. Default value is:. bezier = kNoBezierInterpol. Simple modes group, display mode = linesX, 64 x 64 channels with Bezier smoothing.; Function: TSpectrum2Painter::SetContourWidth(Int_t width); This function applies only for kDisplayModeContours display mode. One can change the width between horizontal slices and thus their density. Default value: width=50. . Simple modes group, display mode = contours, 64 x 64 channels. Width between slices was set to 30.; Function: TSpectrum2Painter::SetLightHeightWeight(Double_t weight); For kModeGroupLightHeight display modes group one can change the weight between both shading algorithm. The function does not apply for other display modes groups. Default value is: weight=0.5. . Light - height modes group, display mode = surface, 64 x 64 channels. The weight between both shading algorithms is set to 0.7.; Function: TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); In addition to the surface drawn using any above given algorithm one can display channel marks. One can control the color as well as the width, height (in pixels) and the style of the marks. The parameter enable can be set to:. kChannelMarksNotDrawn; kChannelMarksDrawn. The possible styles can be chosen from the set:. kChannelMarksStyleDot; kChannelMarksStyleCross; kChannelMarksStyleStar; kChannelMarksStyleRectangle; kChannelMar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:40610,Simpl,Simple,40610,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"edBackground; static const TGGC*fgDefaultSelectedBackgroundGC; static const TGGC*fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEntry(const TGWindow* p, TGTextBuffer* text, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame|kDoubleBorder, Pixel_t back = GetWhitePixel()); Create a text entry widget. It will adopt the TGTextBuffer object; (i.e. the text buffer will be deleted by the text entry widget). TGTextEntry(const TGWindow* parent = 0, const char* text = 0, Int_t id = -1); Simple text entry constructor. TGTextEntry(const TString& contents, const TGWindow* parent, Int_t id = -1); Simple test entry constructor. Notice TString argument comes before the; parent argument (to make this ctor different from the first one taking a; const char*). ~TGTextEntry(); Delete a text entry widget. void Init(); Do default initialization. TGDimension GetDefaultSize() const; Return the default / minimal size of the widget. void SetDefaultSize(UInt_t w, UInt_t h); Set the default / minimal size of the widget. void ReturnPressed(); This signal is emitted when the return or enter key is pressed. void ShiftTabPressed(); This signal is emitted when <SHIFT> and <TAB> keys are pressed. void TabPressed(); This signal is emitted when the <TAB> key is pressed. void TextChanged(const char* text = 0); This signal is emitted every time the text has changed. void CursorOutLeft(); This signal is emitted when cursor is going out of left side. void CursorOutRight(); This signal is emitted when cursor is going out of right side. void CursorOutUp(); This signal is emitted whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEntry.html:26602,Simpl,Simple,26602,root/html528/TGTextEntry.html,https://root.cern,https://root.cern/root/html528/TGTextEntry.html,4,['Simpl'],['Simple']
Usability,"edBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredBiasUpdatesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredWeightUpdatesAt (size_t i);  ; Scalar_t GetRho () const;  Getters. ;  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The accumulation of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasUpdates;  The accumulation of the square of the past bias updates associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The accumulation of the square of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html:2391,learn,learningRate,2391,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,1,['learn'],['learningRate']
Usability,"edCalculator::fPdf; Double_tRooStats::CombinedCalculator::fSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodCalculator(); default constructor. ProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.050000000000000003, const RooArgSet* nullParams = 0); constructor from pdf and parameters; the pdf must contain eventually the nuisance parameters. ProfileLikelihoodCalculator(RooAbsData& data, RooStats::ModelConfig& model, Double_t size = 0.050000000000000003); construct from a ModelConfig. Assume data model.GetPdf() will provide full description of model including; constraint term on the nuisances parameters. ~ProfileLikelihoodCalculator(); destructor; cannot delete prod pdf because it will delete all the composing pdf's; if (fOwnPdf) delete fPdf;; fPdf = 0;. void DoReset() const; reset and clear fit result; to be called when a new model or data are set in the calculator. RooAbsReal * DoGlobalFit() const; perform a global fit of the likelihood letting with all parameter of interest and; nuisance parameters; keep the list of fitted parameters. RooFitResult * DoMinimizeNLL(RooAbsReal* nll); Minimizer the given NLL using the default options. LikelihoodInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a profile likelihood ratio and uses that to construct a RooStats::LikelihoodInterval. HypoTestResult* GetHypoTest() const; Main interface to get a HypoTestResult.; It does two fits:; the first lets the null parameters float, so it's a maximum likelihood estimate; the second is to the null (fixing null parameters to their specified values): eg. a conditional maximum likelihood; the ratio of the likelihood at the conditional MLE to the MLE is the profile likelihood ratio.; Wilks' theorem is used to get p-values. ProfileLikelihoodCalculator(); default constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ProfileLikelihoodCalculator.html:7606,clear,clear,7606,root/html602/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__ProfileLikelihoodCalculator.html,2,['clear'],['clear']
Usability,"edGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); const RooRealVar*convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:4716,clear,clearShapeDirty,4716,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['clear'],['clearShapeDirty']
Usability,"edStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:2783,feedback,feedback,2783,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"ed_model_%s.h5"", rnn_types[i].c_str());; ; Info(""TMVA_RNN_Classification"", ""Building recurrent keras model using a %s layer"", rnn_types[i].c_str());; // create python script which can be executed; // create 2 conv2d layer + maxpool + dense; TMacro m;; m.AddLine(""import tensorflow"");; m.AddLine(""from tensorflow.keras.models import Sequential"");; m.AddLine(""from tensorflow.keras.optimizers import Adam"");; m.AddLine(""from tensorflow.keras.layers import Input, Dense, Dropout, Flatten, SimpleRNN, GRU, LSTM, Reshape, ""; ""BatchNormalization"");; m.AddLine("""");; m.AddLine(""model = Sequential() "");; m.AddLine(""model.add(Reshape((10, 30), input_shape = (10*30, )))"");; // add recurrent neural network depending on type / Use option to return the full output; if (rnn_types[i] == ""LSTM""); m.AddLine(""model.add(LSTM(units=10, return_sequences=True) )"");; else if (rnn_types[i] == ""GRU""); m.AddLine(""model.add(GRU(units=10, return_sequences=True) )"");; else; m.AddLine(""model.add(SimpleRNN(units=10, return_sequences=True) )"");; ; // m.AddLine(""model.add(BatchNormalization())"");; m.AddLine(""model.add(Flatten())""); // needed if returning the full time output sequence; m.AddLine(""model.add(Dense(64, activation = 'tanh')) "");; m.AddLine(""model.add(Dense(2, activation = 'sigmoid')) "");; m.AddLine(; ""model.compile(loss = 'binary_crossentropy', optimizer = Adam(learning_rate = 0.001), weighted_metrics = ['accuracy'])"");; m.AddLine(TString::Format(""modelName = '%s'"", modelName.Data()));; m.AddLine(""model.save(modelName)"");; m.AddLine(""model.summary()"");; ; m.SaveSource(""make_rnn_model.py"");; // execute python script to make the model; auto ret = (TString *)gROOT->ProcessLine(""TMVA::Python_Executable()"");; TString python_exe = (ret) ? *(ret) : ""python"";; gSystem->Exec(python_exe + "" make_rnn_model.py"");; ; if (gSystem->AccessPathName(modelName)) {; Warning(""TMVA_RNN_Classification"", ""Error creating Keras recurrent model file - Skip using Keras"");; useKeras = false;; } else {; // book PyKeras met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:69286,Simpl,SimpleRNN,69286,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Simpl'],['SimpleRNN']
Usability,"ed_ptr will be removed.Definition RCanvas.cxx:225; ROOT::Experimental::RCanvas::ResolveSharedPtrsvoid ResolveSharedPtrs()To resolve problem with storing of shared pointers Call this method when reading canvas from the file...Definition RCanvas.cxx:299; ROOT::Experimental::RCanvas::Runvoid Run(double tm=0.)Run canvas functionality for given time (in seconds)Definition RCanvas.cxx:285; ROOT::Experimental::RCanvas::IncModifieduint64_t IncModified()Definition RCanvas.hxx:82; ROOT::Experimental::RCanvas::GetUIDstd::string GetUID() constReturn unique identifier for the canvas Used in iPython display.Definition RCanvas.cxx:199; ROOT::Experimental::RCanvas::CreateJSONstd::string CreateJSON()Provide JSON which can be used for offline display.Definition RCanvas.cxx:211; ROOT::Experimental::RCanvas::Createstatic std::shared_ptr< RCanvas > Create(const std::string &title)Create new canvas instance.Definition RCanvas.cxx:89; ROOT::Experimental::RCanvas::ClearOnClosevoid ClearOnClose(const std::shared_ptr< void > &handle)Set handle which will be cleared when connection is closed.Definition RCanvas.cxx:239; ROOT::Experimental::RCanvas::Updatevoid Update(bool async=false, CanvasCallback_t callback=nullptr)update drawingDefinition RCanvas.cxx:78; ROOT::Experimental::RCanvas::Hidevoid Hide()Hide all canvas displays.Definition RCanvas.cxx:171; ROOT::Experimental::RChangeAttrRequest::Processstd::unique_ptr< RDrawableReply > Process() overrideApply attributes changes to the drawable Return mask with actions which were really applied.Definition RCanvas.cxx:327; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; int; nconst Int_t nDefinition lege",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8cxx_source.html:15768,Clear,ClearOnClosevoid,15768,doc/master/RCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8cxx_source.html,3,"['Clear', 'clear']","['ClearOnClose', 'ClearOnClosevoid', 'cleared']"
Usability,edclass). static . Set GED editor class. ; Definition at line 189 of file TEveBrowser.cxx. ◆ Streamer(). void TEveGListTreeEditorFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEveGListTreeEditorFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 124 of file TEveBrowser.h. Friends And Related Symbol Documentation. ◆ TEveManager. friend class TEveManager. friend . Definition at line 87 of file TEveBrowser.h. Member Data Documentation. ◆ fCtxMenu. TContextMenu* TEveGListTreeEditorFrame::fCtxMenu. protected . Definition at line 98 of file TEveBrowser.h. ◆ fEditor. TEveGedEditor* TEveGListTreeEditorFrame::fEditor. protected . Definition at line 96 of file TEveBrowser.h. ◆ fFrame. TGCompositeFrame* TEveGListTreeEditorFrame::fFrame. protected . Definition at line 90 of file TEveBrowser.h. ◆ fgEditorClass. TString TEveGListTreeEditorFrame::fgEditorClass. staticprotected . Definition at line 102 of file TEveBrowser.h. ◆ fListTree. TGListTree* TEveGListTreeEditorFrame::fListTree. protected . Definition at line 94 of file TEveBrowser.h. ◆ fLTCanvas. TGCanvas* TEveGListTreeEditorFrame::fLTCanvas. protected . Definition at line 93 of file TEveBrowser.h. ◆ fLTFrame. TGCompositeFrame* TEveGListTreeEditorFrame::fLTFrame. protected . Definition at line 91 of file TEveBrowser.h. ◆ fSignalsConnected. Bool_t TEveGListTreeEditorFrame::fSignalsConnected. protected . Definition at line 100 of file TEveBrowser.h. ◆ fSplitter. TGSplitter* TEveGListTreeEditorFrame::fSplitter. protected . Definition at line 95 of file TEveBrowser.h. Libraries for TEveGListTreeEditorFrame:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveBrowser.h; graf3d/eve/src/TEveBrowser.cxx. TEveGListTreeEditorFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html:42407,Guid,Guide,42407,doc/master/classTEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html,1,['Guid'],['Guide']
Usability,"eded in; 270// the dictionary.; 271#include ""TQClass.h""; 272#endif; 273 ; 274 ; 275//---- ClassImpQ macro ----------------------------------------------; 276//; 277// This macro used to correspond to the ClassImp macro and should be used; 278// for classes derived from TQObject instead of the ClassImp macro.; 279// This macro makes it possible to have a single connection from; 280// all objects of the same class.; 281// *** It is now obsolete ***; 282 ; 283#define ClassImpQ(name) \; 284 ClassImp(name); 285 ; 286#endif; R__EXTERN#define R__EXTERNDefinition DllImport.h:26; b#define b(i)Definition RSha256.hxx:100; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; ClassDef#define ClassDef(name, id)Definition Rtypes.h:342; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TList.h; TQClass.h; gTQSenderR__EXTERN void * gTQSenderDefinition TQObject.h:46; ConnectCINTBool_t ConnectCINT(TQObject *sender, const char *signal, const char *slot)Global function which simplifies making connection in interpreted ROOT session.Definition TQObject.cxx:1069; TString.h; TVirtualQConnection.h; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TCollection::IsEmptyvirtual Bool_t IsEmpty() constDefinition TCollection.h:188; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TQObjSenderDefinition TQObject.h:233; TQObjSender::SetSendervirtual void SetSender(void *sender)Definition TQObject.h:250; TQObjSender::fSenderClassTString fSenderClassDefinition TQObject.h:237; TQObjSender::TQObjSenderTQObjSender(const TQObjSender &)=delete; TQObjSender::~TQObjSendervirtual ~TQObjSender()Definition TQObject.h:248; TQObjSender::operator=TQObjSender & operator=(const TQObjSender &)=delete; TQObjSender::SetSenderClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TQObject_8h_source.html:10681,simpl,simplifies,10681,doc/master/TQObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TQObject_8h_source.html,1,['simpl'],['simplifies']
Usability,"edia; The class TGeoMedium describes tracking media properties. This has a pointer to a material and the additional data members representing the properties related to tracking.; TGeoMedium(const char *name,Int_t numed,TGeoMaterial *mat,; Double_t *params=0);; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23. name: name assigned to the medium; mat: pointer to a material; params: array of additional parameters. Another constructor allows effectively defining tracking parameters in GEANT3 style:; TGeoMedium(const char *name,Int_t numed,Int_t imat,Int_t ifield,; Double_t fieldm,Double_t tmaxfd,Double_t stemax,; Double_t deemax,Double_t epsil,Double_t stmin);; This constructor is reserved for creating tracking media from the VMC interface [...]:. numed: user-defined medium index; imat: unique ID of the material; others: see G3 documentation. Looking at our simple world example, one can see that for creating volumes one needs to create tracking media before. The way to proceed for those not interested in performing tracking with external MC's is to define and use only one dummy tracking medium as in the example (or a NULL pointer). User Interface for Handling Materials and Media; The TGeoManager class contains the API for accessing and handling defined materials:; TGeoManager::GetMaterial(name);; TGeoManager::GetMaterialTGeoMaterial * GetMaterial(const char *matname) constSearch for a named material. All trailing blanks stripped.Definition TGeoManager.cxx:3011; . Classes; class  TGeoElement;  Base class for chemical elements. More...;  ; class  TGeoMaterial;  Base class describing materials. More...;  ; class  TGeoMedium;  Media are used to store properties related to tracking and which are useful only when using geometry with a particle transport MC package (via VMC). More...;  ; class  TGeoMixture;  Mixtures of elements. More...;  . ROOT master - Reference Guide Generated on Tue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Materials__classes.html:12647,simpl,simple,12647,doc/master/group__Materials__classes.html,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html,1,['simpl'],['simple']
Usability,"edirection) plugin for the new ROOT Browser; TGCompositeFrame Base class for composite widgets (menubars, etc.); TGContainer Canvas container; TGDMLParse imports GDML using DOM and binds it to ROOT; TGDMLRefl helper class used for the storage of reflected solids; TGDMLWrite imports GDML using DOM and binds it to ROOT; TGDNDManager The main Drag and Drop Manager; TGDimension Dimension object (width, height); TGDockButton Dock button; TGDockHideButton Hide dock button; TGDockableFrame Dockable widget; TGDoubleHSlider Horizontal double slider widget; TGDoubleSlider Double slider widget abstract base class; TGDoubleVSlider Vertical double slider widget; TGDragWindow Window used for dragging; TGEventHandler Abstract event handler; TGFSComboBox Combo box widget for file system path; TGFileBrowser File browser.; TGFileContainer Container containing file system objects; TGFileDialog File selection dialog; TGFileInfo ; TGFileItem Class representing file system object; TGFont GUI font description; TGFontDialog Font selection dialog; TGFontDialog::FontProp_t ; TGFontPool Font pool; TGFontTypeComboBox Font type combobox widget; TGFrame Base class for simple widgets (button, etc.); TGFrameElement Base class used in GUI containers; TGFrameElementPack Class used in TGPack.; TGGC Graphics context; TGGCPool Graphics context pool; TGGotoDialog Goto line dialog used by TGTextEdit widget; TGGroupFrame A composite frame with border and title; TGHButtonGroup A button group with one horizontal row; TGHProgressBar Horizontal progress bar widget; TGHScrollBar Horizontal scrollbar widget; TGHSlider Horizontal slider widget; TGHSplitter A horizontal frame splitter; TGHeaderFrame Header frame with buttons and splitters; TGHorizontal3DLine A horizontal 3D separator line; TGHorizontalFrame Composite frame with horizontal child layout; TGHorizontalLayout Horizontal layout manager; TGHotString Graphics string with hot character; TGHtml HTML widget; TGHtmlBrowser very simple html browser; TGIcon Ic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:76118,simpl,simple,76118,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,4,['simpl'],['simple']
Usability,"edo arguments inherited from compressed command. More complicated commands might want to override this function. ; Definition at line 402 of file TQCommand.cxx. ◆ DeclFileName(). static const char * TQCommand::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 98 of file TQCommand.h. ◆ Delete(). void TQCommand::Delete ; (; Option_t * ; opt = """"). overridevirtual . If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ; If ""opt"" is zero - delete all merged commands. ; Reimplemented from TList.; Definition at line 285 of file TQCommand.cxx. ◆ GetCommand(). TQCommand * TQCommand::GetCommand ; (; ). static . Return a command which is doing redo/undo action. ; This static method allows to set undo parameters dynamically, i.e. during execution of Redo function.; Example: For redo actions like TGTextEdit::DelChar() it is not possible to know ahead what character will be deleted. To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)), one needs to call TQCommand::SetUndoArgs(1, character) from inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);; TQCommand::GetCommandstatic TQCommand * GetCommand()Return a command which is doing redo/undo action.Definition TQCommand.cxx:276. Definition at line 276 of file TQCommand.cxx. ◆ GetName(). const char * TQCommand::GetName ; (; ); const. overridevirtual . Returns the command name. ; Default name is ""ClassName::RedoName(args)"" If list of merged commands is not empty the name is ""ClassName::RedoName(args):cname1:cname2 ..."" ; Reimplemented from TCollection.; Definition at line 670 of file TQCommand.cxx. ◆ GetNRargs(). Int_t TQCommand::GetNRargs ; (; ); const. Returns a number of redo arguments. ; Definition at line 768 of file TQCommand.cxx. ◆ GetNUargs(). Int_t TQCommand::GetNUargs ; (; ); const. Returns a number of undo arguments. ; Definition at line 776 of file TQCommand.cxx. ◆ Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:36859,undo,undo,36859,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"edrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . Private Member Functions;  TRootBrowserLite (const TRootBrowserLite &)=delete;  ; void AddToHistory (TGListTreeItem *item);  helper method to track history ;  ; void BrowseTextFile (const char *file);  browse text file ;  ; void Chdir (TGListTreeItem *item);  Make object associated with item the current directory. ;  ; void ClearHistory ();  clear navigation history ;  ; void CreateBrowser (const char *name);  Create the actual browser. ;  ; void DeleteListTreeItem (TGListTreeItem *item);  delete list tree item, remove it from history ;  ; void DisplayDirectory ();  Display current directory in second label, fLbl2. ;  ; void DisplayTotal (Int_t total, Int_t selected);  Display in statusbar total number of objects and number of selected objects in IconBox. ;  ; void HideTextEdit ();  hide text edit ;  ; void HighlightListLevel ();  helper method to track history ;  ; Bool_t HistoryBackward ();  go to the past ;  ; Bool_t HistoryForward ();  go to the future ;  ; void IconBoxAction (TObject *obj);  Default action when double clicking on icon. ;  ; void ListTreeHighlight (TGListTreeItem *item);  Open tree item and list in iconbox its contents. ;  ; TRootBrowserLite & operator= (const TRootBrowserLite &)=delete;  ; void Search ();  starts serach dialog ;  ; void SetViewMode (Int_t new_mode, Bool_t force=kFALSE);  Set iconbox's view mode and update menu and too",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:35365,Clear,ClearHistory,35365,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,2,"['Clear', 'clear']","['ClearHistory', 'clear']"
Usability,"eds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:20247,Clear,Clear,20247,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,3,['Clear'],['Clear']
Usability,"edvirtual . Set up feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, and TProofPlayerLite.; Definition at line 1642 of file TProofPlayer.cxx. ◆ StopFeedback(). void TProofPlayer::StopFeedback ; (; ). virtual . Stop feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, and TProofPlayerSlave.; Definition at line 1650 of file TProofPlayer.cxx. ◆ StopProcess(). void TProofPlayer::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). overridevirtual . Stop the process after this event. ; If timeout is positive, start a timer firing after timeout seconds to hard-stop time-expensive events. ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 287 of file TProofPlayer.cxx. ◆ StoreFeedback(). void TProofPlayer::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). overridevirtual . Store feedback list (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 689 of file TProofPlayer.cxx. ◆ StoreOutput(). void TProofPlayer::StoreOutput ; (; TList * ; out). overridevirtual . Store output list (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 681 of file TProofPlayer.cxx. ◆ Streamer(). void TProofPlayer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, and TProofPlayerLite. ◆ StreamerNVirtual(). void TProofPlayer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 228 of file TProofPlayer.h. ◆ UpdateAutoBin(). void TProofPlayer::UpdateAutoBin ; (; const char * ; name, . Double_t & ; xmin, . Double_t & ; xmax, . Double_t & ; y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:42975,feedback,feedback,42975,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"ee (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; List_i BeginChildren ();  ; List_ci BeginChildren () const;  ; List_i BeginParents ();  ; List_ci BeginParents () const;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual Bool_t CanEditMainTransparency () const;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (TEveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual TEveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CollectSceneParents (List_t &scenes);  Collect all parents of class TEveScene. ;  ; virtual void CollectSceneParentsFromChildren (List_t &scenes, TEveElement *parent);  Collect scene-parents from all children. ;  ; virtual void CopyVizParams (const TEveElement *el);  Copy visualization parameters from element el. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:11127,Clear,ClearStamps,11127,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['Clear'],['ClearStamps']
Usability,"ee TClass) has a linked list of methods.Definition TMethod.h:38; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TStringBasic string class.Definition TString.h:139; bool; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Math::IntegrationOneDim::TypeTypeenumeration specifying the integration types.Definition AllIntegrationTypes.h:32; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; clangDefinition BaseSelectionRule.h:29; llvmDefinition TString.h:847; ROOT::TVirtualRWMutex::StateDeltaState as returned by GetStateDelta() that can be passed to Restore()Definition TVirtualRWMutex.h:70; TCling::CharPtrCmp_tDefinition TCling.h:140; TCling::CharPtrCmp_t::operator()bool operator()(const char *a, const char *b) constDefinition TCling.h:141; TCling::MutexStateAndRecurseCountDeltaDefinition TCling.h:167; TCling::MutexStateAndRecurseCountDelta::fDeltastd::unique_ptr< StateDelta > fDeltaDefinition TCling.h:171; TCling::MutexStateAndRecurseCountDelta::fInitialStateMutexStateAndRecurseCount fInitialStateDefinition TCling.h:170; TCling::MutexStateAndRecurseCountDefinition TCling.h:155; TCling::MutexStateAndRecurseCount::fStatestd::unique_ptr< ROOT::TVirtualRWMutex::State > fStateState of gCoreMutex when the first interpreter-related function was invoked.Definition TCling.h:157; TCling::MutexStateAndRecurseCount::fRecurseCountInt_t fRecurseCountInterpreter-related functions will push the ""entry"" lock state to *this.Definition TCling.h:162; ValueDefinition functioncalls.h:15; mTMarker mDefinition textangle.C:8; outputstatic void output(). coremetaclingsrcTCling.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:95802,Guid,Guide,95802,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['Guid'],['Guide']
Usability,"ee [howto:errordef]).; 5.6.5 Parameter interaction; MnMigrad retains the result after each minimization (MnUserParameterStae, see [api:state]) and forwards the interface.; 5.6.6 VariableMetricMinimizer(); The VariableMetricMinimizer is instantiated using default constructor.; 5.6.7 minimize(const FCNBase&, …); The VariableMetricMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.7 MnMinimize and CombinedMinimizer; [api:minimize]; Causes minimization of the function by the method of \(\mbox{MIGRAD}\), as does the MnMigrad class, but switches to the \(\mbox{SIMPLEX}\) method if \(\mbox{MIGRAD}\) fails to converge. Constructor arguments, methods arguments and names of methods are the same as for MnMigrad or MnSimplex and VariableMetricMinimizer or SimplexMinimizer.; 5.8 MnMinos; [api:minos] Causes a \(\mbox{MINOS}\) error analysis to be performed on the parameter whose number is specified. \(\mbox{MINOS}\) errors may be expensive to calculate, but are very reliable since they take account of non-linearities in the problem as well as parameter correlations, and are in general asymmetric. The optional argument \(\mbox{maxcalls}\) specifies the (approximate) maximum number of function calls per parameter requested, after which the calculation will be stopped for that parameter.; 5.8.1 MnMinos(const FCNBase&, const FunctionMinimum&); Construct an MnMinos object from the user’s \(\mbox{FCN}\) and a valid FunctionMinimum. Additional constructors for user specific MnStrategy settings are provided.; 5.8.2 operator(); MnMinos::operator()(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\). The return value is a std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:50134,Simpl,SimplexMinimizer,50134,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['Simpl'],['SimplexMinimizer']
Usability,"ee using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C H1 analysis example expressed in terms of TTreeReader ;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  temperature.CThis tutorial illustrates how to use the highlight mode with trees ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:168691,Simpl,Simple,168691,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['Simple']
Usability,"ee(); destructor. void SetParentTreeInNodes(TMVA::Node* n = NULL); descend a tree to find all its leaf nodes, fill max depth reached in the; tree at the same time. TMVA::DecisionTree* CreateFromXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); re-create a new tree (decision tree or search tree) from XML. UInt_t BuildTree(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node = NULL); building the decision tree by recursively calling the splitting of; one (root-) node into two daughter nodes (returns the number of nodes). void FillTree(const TMVA::DecisionTree::EventList& eventSample); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void FillEvent(const TMVA::Event& event, TMVA::DecisionTreeNode* node); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void ClearTree(); clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree. UInt_t CleanTree(TMVA::DecisionTreeNode* node = NULL); remove those last splits that result in two leaf nodes that; are both of the type (i.e. both signal or both background); this of course is only a reasonable thing to do when you use; ""YesOrNo"" leafs, while it might loose s.th. if you use the; purity information in the nodes.; --> hence I don't call it automatically in the tree building. Double_t PruneTree(const TMVA::DecisionTree::EventConstList* validationSample = NULL); prune (get rid of internal nodes) the Decision tree to avoid overtraining; serveral different pruning methods can be applied as selected by the; variable ""fPruneMethod"". void ApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; run the validation sample through the (pruned) tree and fill in the nodes; the variables NSValidation and NBValidadtion (i.e. how many of the Signal; and Background events from the validation sample. Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:10442,Clear,ClearTree,10442,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,2,"['Clear', 'clear']","['ClearTree', 'clear']"
Usability,"ee, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidAddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSceneInfo.html:1831,Clear,Clear,1831,root/html528/TEveSceneInfo.html,https://root.cern,https://root.cern/root/html528/TEveSceneInfo.html,1,['Clear'],['Clear']
Usability,"eeReaderValue.h. Constructor & Destructor Documentation. ◆ TTreeReaderValue() [1/2]. template<typename T > . TTreeReaderValue< T >::TTreeReaderValue ; (; ). delete . ◆ TTreeReaderValue() [2/2]. template<typename T > . TTreeReaderValue< T >::TTreeReaderValue ; (; TTreeReader & ; tr, . const char * ; branchname . ). inline . Definition at line 180 of file TTreeReaderValue.h. Member Function Documentation. ◆ Get(). template<typename T > . T * TTreeReaderValue< T >::Get ; (; ). inline . Return a pointer to the value of the current entry. ; Return a nullptr and print an error if no entry has been loaded yet. The returned address is guaranteed to stay constant while a given TTree is being read from a given file, unless the branch addresses are manipulated directly (e.g. through TTree::SetBranchAddress()). The address might also change when the underlying TTree/TFile is switched, e.g. when a TChain switches files. ; Definition at line 189 of file TTreeReaderValue.h. ◆ GetDerivedTypeName(). template<typename T > . const char * TTreeReaderValue< T >::GetDerivedTypeName ; (; ); const. inlineoverrideprotectedvirtual . Get the template argument as a string. ; Implements ROOT::Internal::TTreeReaderValueBase.; Definition at line 211 of file TTreeReaderValue.h. ◆ operator*(). template<typename T > . T & TTreeReaderValue< T >::operator* ; (; ). inline . Return a reference to the value of the current entry. ; Equivalent to dereferencing the pointer returned by Get(). Behavior is undefined if no entry has been loaded yet. Most likely a crash will occur. ; Definition at line 206 of file TTreeReaderValue.h. ◆ operator->(). template<typename T > . T * TTreeReaderValue< T >::operator-> ; (; ). inline . Return a pointer to the value of the current entry. ; Equivalent to Get(). ; Definition at line 201 of file TTreeReaderValue.h. tree/treeplayer/inc/TTreeReaderValue.h. TTreeReaderValue. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReaderValue.html:7737,Guid,Guide,7737,doc/master/classTTreeReaderValue.html,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html,1,['Guid'],['Guide']
Usability,eeTools.hxx. ◆ Streamer(). void ROOT::Experimental::REvePointSelector::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::Experimental::REvePointSelector::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file REveTreeTools.hxx. ◆ TakeAction(). void REvePointSelector::TakeAction ; (; ). overridevirtual . Callback from tree-player after a chunk of data has been processed. ; This is forwarded to the current point-consumer. ; Reimplemented from TSelectorDraw.; Definition at line 128 of file REveTreeTools.cxx. Member Data Documentation. ◆ fConsumer. REvePointSelectorConsumer* ROOT::Experimental::REvePointSelector::fConsumer {nullptr}. protected . Definition at line 83 of file REveTreeTools.hxx. ◆ fInputList. TList ROOT::Experimental::REvePointSelector::fInputList. protected . Definition at line 91 of file REveTreeTools.hxx. ◆ fSelection. TString ROOT::Experimental::REvePointSelector::fSelection. protected . Definition at line 86 of file REveTreeTools.hxx. ◆ fSelectTree. TTree* ROOT::Experimental::REvePointSelector::fSelectTree {nullptr}. protected . Definition at line 82 of file REveTreeTools.hxx. ◆ fSubIdExp. TString ROOT::Experimental::REvePointSelector::fSubIdExp. protected . Definition at line 88 of file REveTreeTools.hxx. ◆ fSubIdNum. Int_t ROOT::Experimental::REvePointSelector::fSubIdNum. protected . Definition at line 89 of file REveTreeTools.hxx. ◆ fVarexp. TString ROOT::Experimental::REvePointSelector::fVarexp. protected . Definition at line 85 of file REveTreeTools.hxx. Libraries for ROOT::Experimental::REvePointSelector:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve7/inc/ROOT/REveTreeTools.hxx; graf3d/eve7/src/REveTreeTools.cxx. ROOTExperimentalREvePointSelector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html:24424,Guid,Guide,24424,doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSelector.html,1,['Guid'],['Guide']
Usability,"eed to be made for the fit procedure to be carried out:. (1) The total number of events in each template is not too small; (so that its Poisson uncertainty can be neglected).; (2) The number of events in each bin is much smaller than the total; number of events in each template (so that multinomial; uncertainties can be replaced with Poisson uncertainties). Biased fit uncertainties may result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). Instantiation. A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). Applying constraints. Fit parameters can be constrained through; fit->Constrain(parameter #, lower bound, upper bound);; Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function; fit->Unconstrain(parameter #); is also provided to simplify this. Setting parameter values. The function; TVirtualFitter* vFit = fit->GetFitter();; is provided for direct access to the TVirtualFitter object. This allows to; set and fix parameter values, and set step sizes directly. Restricting the fit range. The fit range can be restricted through; fit->SetRangeX(first bin #, last bin #);; and freed using; fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using; fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also; fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();. Weights histograms. Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through; fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. Obtaining fit results. The fit is car",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFractionFitter.html:3163,simpl,simplify,3163,root/html528/TFractionFitter.html,https://root.cern,https://root.cern/root/html528/TFractionFitter.html,1,['simpl'],['simplify']
Usability,"eed to be made for the fit procedure to be carried out:. (1) The total number of events in each template is not too small; (so that its Poisson uncertainty can be neglected).; (2) The number of events in each bin is much smaller than the total; number of events in each template (so that multinomial; uncertainties can be replaced with Poisson uncertainties). Biased fit uncertainties may result if these conditions are not fulfilled; (see e.g. arXiv:0803.2711). Instantiation. A fit object is instantiated through; TFractionFitter* fit = new TFractionFitter(data, mc);; A number of basic checks (intended to ensure that the template histograms; represent the same ""kind"" of distribution as the data one) are carried out.; The TVirtualFitter object is then addressed and all fit parameters (the; template fractions) declared (initially unbounded). Applying constraints. Fit parameters can be constrained through; fit->Constrain(parameter #, lower bound, upper bound);; Setting lower bound = upper bound = 0 removes the constraint (a la Minuit);; however, a function; fit->Unconstrain(parameter #); is also provided to simplify this. Setting parameter values. The function; TVirtualFitter* vFit = fit->GetFitter();; is provided for direct access to the TVirtualFitter object. This allows to; set and fix parameter values, and set step sizes directly. Restricting the fit range. The fit range can be restricted through; fit->SetRangeX(first bin #, last bin #);; and freed using; fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using; fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also; fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through; fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding; fit->IncludeBin(bin #);. Weig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFractionFitter.html:3163,simpl,simplify,3163,root/html530/TFractionFitter.html,https://root.cern,https://root.cern/root/html530/TFractionFitter.html,5,['simpl'],['simplify']
Usability,"eed; 2446 BookMethod(subseedloader, theMethod, methodTitle, theOption);; 2447 ; 2448 // Train/Test/Evaluation; 2449 TrainAllMethods();; 2450 TestAllMethods();; 2451 EvaluateAllMethods();; 2452 ; 2453 // getting ROC; 2454 SSROC = GetROCIntegral(ybitset.to_string(), methodTitle);; 2455 importances[ny] += SROC - SSROC;; 2456 ; 2457 // cleaning information; 2458 TMVA::MethodBase *ssmethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[ybitset.to_string().c_str()][0][0]);; 2459 TMVA::ResultsClassification *ssresults = (TMVA::ResultsClassification *)ssmethod->Data()->GetResults(; 2460 ssmethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2461 delete ssresults;; 2462 delete subseedloader;; 2463 this->DeleteAllMethods();; 2464 fMethodsMap.clear();; 2465 }; 2466 }; 2467 std::cout << ""--- Variable Importance Results (Short)"" << std::endl;; 2468 return GetImportance(nbits, importances, varNames);; 2469}; 2470 ; 2471////////////////////////////////////////////////////////////////////////////////; 2472 ; 2473TH1F *TMVA::Factory::EvaluateImportanceRandom(DataLoader *loader, UInt_t nseeds, Types::EMVA theMethod,; 2474 TString methodTitle, const char *theOption); 2475{; 2476 TRandom3 *rangen = new TRandom3(0); // Random Gen.; 2477 ; 2478 uint64_t x = 0;; 2479 uint64_t y = 0;; 2480 ; 2481 // getting number of variables and variable names from loader; 2482 const int nbits = loader->GetDataSetInfo().GetNVariables();; 2483 std::vector<TString> varNames = loader->GetDataSetInfo().GetListOfVariables();; 2484 ; 2485 long int range = pow(2, nbits);; 2486 ; 2487 // vector to save importances; 2488 std::vector<Double_t> importances(nbits);; 2489 for (int i = 0; i < nbits; i++); 2490 importances[i] = 0;; 2491 ; 2492 Double_t SROC, SSROC; // computed ROC value; 2493 for (UInt_t n = 0; n < nseeds; n++) {; 2494 x = rangen->Integer(range);; 2495 ; 2496 std::bitset<32> xbitset(x);; 2497 if (x == 0); 2498 continue; // data loader need at least one variable; 2499 ; 2500 // creating lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:102483,clear,clear,102483,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['clear'],['clear']
Usability,"eedDefinition TSysEvtHandler.h:175; TStdExceptionHandler::kSEAbort@ kSEAbortDefinition TSysEvtHandler.h:175; TStdExceptionHandler::Handlevirtual EStatus Handle(std::exception &exc)=0; TStorage::ReAllocIntstatic Int_t * ReAllocInt(Int_t *vp, size_t size, size_t oldsize)Reallocate (i.e.Definition TStorage.cxx:258; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::InsertTString & Insert(Ssiz_t pos, const char *s)Definition TString.h:661; TString::EndsWithBool_t EndsWith(const char *pat, ECaseCompare cmp=kExact) constReturn true if string ends with the specified string.Definition TString.cxx:2244; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::ReplaceTString & Replace(Ssiz_t pos, Ssiz_t n, const char *s)Definition TString.h:694; TString::FirstSsiz_t First(char c) constFind first occurrence of a character c.Definition TString.cxx:538; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ChopTString & Chop()Definition TString.h:691; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::kTrailing@ kTrailingDefinition TString.h:276; TString::kBoth@ kBothDefinition TString.h:276; TString::kIgnoreCase@ kIgnoreCaseDefinition TString.h:277; TString::kExact@ kExactDefinition TString.h:277; TString::LastSsiz_t Last(char c) constFind last occurrence of a character c.Definition TString.cxx:931; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TString::BeginsWithBool_t BeginsWit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:166085,Clear,Clearvoid,166085,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,3,['Clear'],"['Clear', 'Clearvoid']"
Usability,"een. The global visible level put a limitation on the maximum applied depth. Combined with visibility settings per volume, these can tune quite well what should appear on the screen. However, there are situations when users want to see a volume branch displayed down to the maximum depth, keeping at the same time a limitation or even suppressing others. In order to accomplish that, one should use the volume attribute: Visible daughters. By default, all daughters of all volumes are displayed if there is no limitation related with their level depth with respect to the top drawn volume.; 18.7.3 Ray Tracing; Ray tracing is a quite known drawing technique based on tracking rays from the eye position through all pixels of a view port device. The pixel color is derived from the properties of the first crossed surface, according some illumination model and material optical properties. While there are currently existing quite sophisticated ray tracing models, TGeo is currently using a very simple approach where the light source is matching the eye position (no shadows or back-tracing of the reflected ray). In future we are considering providing a base class in order to be able to derive more complex models.; Due to the fact that the number of rays that have to be tracked matches the size in pixels of the pad, the time required by this algorithm is proportional to the pad size. On the other hand, the speed is quite acceptable for the default ROOT pad size and the images produced by using this technique have high quality. Since the algorithm is practically using all navigation features, producing ray-traced pictures is also a geometry validation check. Ray tracing can be activated at volume level as the normal Draw(). Ray-traced view in a pad. myVolume->Raytrace(); Once ray-tracing a view, this can be zoomed or rotated as a usual one. Objects on the screen are no longer highlighted when picking the vertices but the corresponding volumes is still accessible.; 18.7.3.1 Clipping Ra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1011178,simpl,simple,1011178,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"eenDefinition Rtypes.h:66; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; qfloat * qDefinition THbookFile.cxx:89; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TF11-Dim function classDefinition TF1.h:233; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH2I2-D histogram with an int per channel (see TH1 documentation)Definition TH2.h:225; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; . The candle reduces the information coming from a whole distribution into few values. Independently from the number of entries or the significance of the underlying distribution a candle will always look like a candle. So candle plots should be used carefully in particular with unknown distributions. The definition of a candle is based on unbinned data. Here, candles are created from binned data. Because of this, the deviation is connected to the bin width used. The calculation of the quantiles normally done on unbinned data ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:56021,simpl,simple,56021,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['simpl'],['simple']
Usability,"ef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  . Public Member Functions;  TEmulatedCollectionProxy (const char *cl_name, Bool_t silent);  ;  TEmulatedCollectionProxy (const TEmulatedCollectionProxy &copy);  ;  ~TEmulatedCollectionProxy () override;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocates space for storing at least n elements. ;  ; void * At (UInt_t idx) override;  Return the address of the value at index idx ;  ; void Clear (const char *opt="""") override;  Clear the container. ;  ; void Commit (void *env) override;  Commits pending elements in a staging area (see Allocate() for more information). ;  ; void DeleteArray (void *p, Bool_t dtorOnly=kFALSE) const override;  Execute the container array destructor. ;  ; void Destructor (void *p, Bool_t dtorOnly=kFALSE) const override;  Execute the container destructor. ;  ; TVirtualCollectionProxy * Generate () const override;  Returns a clean object of the actual class that derives from TVirtualCollectionProxy. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; Bool_t IsValid () const;  ; void * New () const override;  Construct a new container object and return its address. ;  ; void * New (void *memory) const override;  Construct a new container object at the address given by arena ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:2387,Clear,Clear,2387,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,2,['Clear'],['Clear']
Usability,efHeight ; (; Float_t ; v). inline . Definition at line 93 of file TEveBoxSet.h. ◆ SetDefWidth(). void TEveBoxSet::SetDefWidth ; (; Float_t ; v). inline . Definition at line 92 of file TEveBoxSet.h. ◆ SetDrawConeCap(). void TEveBoxSet::SetDrawConeCap ; (; Bool_t ; x). inline . Definition at line 95 of file TEveBoxSet.h. ◆ SizeofAtom(). Int_t TEveBoxSet::SizeofAtom ; (; TEveBoxSet::EBoxType_e ; bt). staticprotected . Return size of data-structure describing a box of type bt. ; Definition at line 67 of file TEveBoxSet.cxx. ◆ Streamer(). void TEveBoxSet::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement. ◆ StreamerNVirtual(). void TEveBoxSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TEveBoxSet.h. ◆ Test(). void TEveBoxSet::Test ; (; Int_t ; nboxes). Fill the structure with a random set of boxes. ; Definition at line 333 of file TEveBoxSet.cxx. Friends And Related Symbol Documentation. ◆ TEveBoxSetGL. friend class TEveBoxSetGL. friend . Definition at line 23 of file TEveBoxSet.h. Member Data Documentation. ◆ fBoxSkip. Int_t TEveBoxSet::fBoxSkip. protected . Definition at line 60 of file TEveBoxSet.h. ◆ fBoxType. EBoxType_e TEveBoxSet::fBoxType. protected . Definition at line 54 of file TEveBoxSet.h. ◆ fDefDepth. Float_t TEveBoxSet::fDefDepth. protected . Definition at line 58 of file TEveBoxSet.h. ◆ fDefHeight. Float_t TEveBoxSet::fDefHeight. protected . Definition at line 57 of file TEveBoxSet.h. ◆ fDefWidth. Float_t TEveBoxSet::fDefWidth. protected . Definition at line 56 of file TEveBoxSet.h. ◆ fDrawConeCap. Bool_t TEveBoxSet::fDrawConeCap. protected . Definition at line 62 of file TEveBoxSet.h. Libraries for TEveBoxSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveBoxSet.h; graf3d/eve/src/TEveBoxSet.cxx. TEveBoxSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxSet.html:52430,Guid,Guide,52430,doc/master/classTEveBoxSet.html,https://root.cern,https://root.cern/doc/master/classTEveBoxSet.html,1,['Guid'],['Guide']
Usability,"ef_StreamerNVirtual_b);  ; virtual Bool_t WriteFile (const char *filename, unsigned char *argb, UInt_t w, UInt_t h)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImagePlugin.html:1675,Clear,Clear,1675,doc/master/classTImagePlugin.html,https://root.cern,https://root.cern/doc/master/classTImagePlugin.html,1,['Clear'],['Clear']
Usability,"efault Constructor. ; Definition at line 313 of file TTreeCache.cxx. ◆ TTreeCache() [3/3]. TTreeCache::TTreeCache ; (; TTree * ; tree, . Int_t ; buffersize = 0 . ). Constructor. ; Definition at line 320 of file TTreeCache.cxx. ◆ ~TTreeCache(). TTreeCache::~TTreeCache ; (; ). override . Destructor. (in general called by the TFile destructor) ; Definition at line 332 of file TTreeCache.cxx. Member Function Documentation. ◆ AddBranch() [1/2]. Int_t TTreeCache::AddBranch ; (; const char * ; bname, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ; It works in exactly the same way as TTree::SetBranchStatus so you probably want to look over there for details about the use of bname with regular expressions. The branches are taken with respect to the Owner of this TTreeCache (i.e. the original Tree) NB: if bname=""*"" all branches are put in the cache and the learning phase stopped Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 446 of file TTreeCache.cxx. ◆ AddBranch() [2/2]. Int_t TTreeCache::AddBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch to the list of branches to be stored in the cache this function is called by the user via TTree::AddBranchToCache. ; The branch is added even if we are outside of the training phase. Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 376 of file TTreeCache.cxx. ◆ CalculateMissCache(). bool TTreeCache::CalculateMissCache ; (; ). private . Calculate the appropriate miss cache to fetch; helper function for FillMissCache. . ◆ CalculateMissEntries(). TBranch * TTreeCache::CalculateMissEntries ; (; Long64_t ; pos, . int ; len, . bool ; all . ). private . Given an file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:35146,learn,learning,35146,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"efault ones. ; Default attributes for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ ClearTracks(). void TGeoManager::ClearTracks ; (; ). inline . Definition at line 415 of file TGeoManager.h. ◆ CloseGeometry(). void TGeoManager::CloseGeometry ; (; Option_t * ; option = ""d""). Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ; Definition at line 1480 of file TGeoManager.cxx. ◆ ConvertReflections(). void TGeoManager::ConvertReflections ; (; ). Convert all reflections in geometry to normal rotations + reflected shapes. ; Definition at line 1723 of file TGeoManager.cxx. ◆ CountLevels(). void TGeoManager::CountLevels ; (; ). Count maximum number of node",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:78663,Clear,ClearThreadsMap,78663,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearThreadsMap']
Usability,"eference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TBits Class ReferenceCore ROOT classes » Containers. ; Container of bits. ; This class provides a simple container of bits. Each bit can be set and tested via the functions SetBitNumber and TestBitNumber.; The default value of all bits is kFALSE. The size of the container is automatically extended when a bit number is either set or tested. To reduce the memory size of the container use the Compact function, this will discard the memory occupied by the upper bits that are 0. ; Definition at line 26 of file TBits.h. Classes; class  TReference;  . Public Member Functions;  TBits (const TBits &);  TBits copy constructor. ;  ;  TBits (UInt_t nbits=8);  TBits constructor. All bits set to 0. ;  ; virtual ~TBits ();  TBits destructor. ;  ; void Clear (Option_t *option="""") override;  Clear the value. ;  ; void Compact ();  Reduce the storage used by the object to a minimun. ;  ; UInt_t CountBits (UInt_t startBit=0) const;  Return number of bits set to 1 starting at bit startBit. ;  ; UInt_t FirstNullBit (UInt_t startBit=0) const;  Return position of first null bit (starting from position 0 and up) ;  ; UInt_t FirstSetBit (UInt_t startBit=0) const;  Return position of first non null bit (starting from position 0 and up) ;  ; void Get (Char_t *array) const;  Copy all the byes. ;  ; void Get (Int_t *array) const;  ; void Get (Long64_t *array) const;  ; void Get (Short_t *array) const;  ; void Get (UChar_t *array) const;  ; void Get (UInt_t *array) const;  ; void Get (ULong64_t *array) const;  ; void Get (UShort_t *array) const;  ; UInt_t GetNbits () const;  ; UInt_t GetNbytes () const;  ; TClass * IsA () const override;  ; UInt_t LastNullBit (UInt_t startBit=999999999) const;  Return position of first null bit (starting from position 0 and up) ;  ; UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:1030,Clear,Clear,1030,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,2,['Clear'],['Clear']
Usability,"eference of offline operations.Definition RGeomData.hxx:358; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::GetDrawJsonstd::string GetDrawJson() constDefinition RGeomData.hxx:382; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefinition RGeomData.hxx:383; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:26076,Clear,ClearDescriptionvoid,26076,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,3,['Clear'],"['Clear', 'ClearDescription', 'ClearDescriptionvoid']"
Usability,"eference of offline operations.Definition RGeomData.hxx:358; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::GetDrawJsonstd::string GetDrawJson() constDefinition RGeomData.hxx:384; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefinition RGeomData.hxx:385; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:26327,Clear,ClearDescriptionvoid,26327,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,3,['Clear'],"['Clear', 'ClearDescription', 'ClearDescriptionvoid']"
Usability,"eference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Attributes |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RNTupleDescriptor Class ReferenceNTuple-related classes. ; The on-storage meta-data of an ntuple. ; Represents the on-disk (on storage) information about an ntuple. The meta-data consists of a header and one or several footers. The header carries the ntuple schema, i.e. the fields and the associated columns and their relationships. The footer(s) carry information about one or several clusters. For every cluster, a footer stores its location and size, and for every column the range of element indexes as well as a list of pages and page locations.; The descriptor provide machine-independent (de-)serialization of headers and footers, and it provides lookup routines for ntuple objects (pages, clusters, ...). It is supposed to be usable by all RPageStorage implementations.; The serialization does not use standard ROOT streamers in order to not let it depend on libCore. The serialization uses the concept of frames: header, footer, and substructures have a preamble with version numbers and the size of the writte struct. This allows for forward and backward compatibility when the meta-data evolves. ; Definition at line 528 of file RNTupleDescriptor.hxx. Classes; class  RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; struct  RCreateModelOptions;  Modifiers passed to CreateModel More...;  ; class  RExtraTypeInfoDescriptorIterable;  Used to loop over all the extra type info record of an ntuple (in unspecified order) More...;  ; class  RFieldDes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:1043,usab,usable,1043,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,1,['usab'],['usable']
Usability,"eference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; entrylistblock_figure1.C File Reference. Functions; pt Draw ();  ; c Range (0, 0, 1, 1);  ; pt SetBorderSize (0);  ; c SetBorderSize (2);  ; arrow SetFillColor (1);  ; pt SetFillColor (kWhite);  ; arrow SetFillStyle (1001);  ; c SetFrameFillColor (0);  ; pt SetTextAlign (12);  ; text SetTextAngle (-15);  ; pt SetTextColor (4);  ; pt SetTextSize (0.048583);  . Variables; TArrow * arrow = new TArrow(0.225552,0.572271,0.35489,0.283186,0.03,""|>"");  ; TLine * line = new TLine(0.35,0.5,0.95,0.5);  ; TPaveText * pt = new TPaveText(0.00313972,0.650146,0.22135,0.772595,""br"");  ; TText * text = pt->AddText(""TEntryListBlock"");  . Function Documentation. ◆ Draw(). pt Draw ; (; ). ◆ Range(). c Range ; (; 0 ; , . 0 ; , . 1 ; , . 1 ;  . ). ◆ SetBorderSize() [1/2]. pt SetBorderSize ; (; 0 ; ). ◆ SetBorderSize() [2/2]. c SetBorderSize ; (; 2 ; ). ◆ SetFillColor() [1/2]. arrow SetFillColor ; (; 1 ; ). ◆ SetFillColor() [2/2]. pt SetFillColor ; (; kWhite ; ). ◆ SetFillStyle(). arrow SetFillStyle ; (; 1001 ; ). ◆ SetFrameFillColor(). c SetFrameFillColor ; (; 0 ; ). ◆ SetTextAlign(). pt SetTextAlign ; (; 12 ; ). ◆ SetTextAngle(). text SetTextAngle ; (; - ; 15). ◆ SetTextColor(). pt SetTextColor ; (; 4 ; ). ◆ SetTextSize(). pt SetTextSize ; (; 0. ; 048583). Variable Documentation. ◆ arrow. arrow = new TArrow(0.225552,0.572271,0.35489,0.283186,0.03,""|>""). Definition at line 227 of file entrylistblock_figure1.C. ◆ line. line = new TLine(0.35,0.5,0.95,0.5). Definition at line 235 of file entrylistblock_figure1.C. ◆ pt. pt = new TPaveText(0.00313972,0.650146,0.22135,0.772595,""br""). Definition at line 7 of file entrylistblock_figure1.C. ◆ text. text = pt->AddText(""TEntryListBlock""). Definition at line 9 of file entrylistblock_figure1.C. treetreedocmacrosentrylistblock_figure1.C. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/entrylistblock__figure1_8C.html:1980,Guid,Guide,1980,doc/v632/entrylistblock__figure1_8C.html,https://root.cern,https://root.cern/doc/v632/entrylistblock__figure1_8C.html,1,['Guid'],['Guide']
Usability,"efine first somewhere, as a code comment or in a separate page a ; group using the \defgroup tag. ; Example; /**; \defgroup Hist Histogram Library;  ; The Histogram library is documented in the class TH1.;  ; */; Then one needs to add in the class description comments the \ingroup tag. For example in the class TH1, which is part of the Hist group one should add; /**; \class TH1; \ingroup Hist ; ....; */; Include additional documentation pages in HTML or Markdown format; One can add extra pages for the documentation in HTML or Markdown format (preferable) in the package/doc directory (e.g. hist/doc). These page could be used to; provide a general documentation of the package. The pages should be included in a file with name as the package name and the .md or .html suffix (e.g. hist.md).; The file should contain, in addition to the package description, the Doxygen command \page [name] [title] which defines the internal page name (used to reference that page) and ; the page title.; For example; /**;  ; \page HistPage The Histogram Library;  ; This page provides a description of the Histogram library. ;  ; */; Inside page you can reference to groups or other pages using the Doxygen commands \subpage [refname] [""text""] and \ref [refname] [""text""]. ; See as example the existing math/doc/Math.md file. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:11150,Guid,Guides,11150,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"efines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 75 of file RooRealSumFunc.h. ◆ _funcList. RooListProxy RooRealSumFunc::_funcList. protected . List of component FUNCs. ; Definition at line 70 of file RooRealSumFunc.h. ◆ _haveLastCoef. bool RooRealSumFunc::_haveLastCoef. protected . The integration cache manager. ; Definition at line 68 of file RooRealSumFunc.h. ◆ _haveWarned. bool RooRealSumFunc::_haveWarned {false}. mutableprotected . ! ; Definition at line 74 of file RooRealSumFunc.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumFunc::_normIntMgr. mutableprotected . Definition at line 66 of file RooRealSumFunc.h. Libraries for RooRealSumFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumFunc.h; roofit/roofitcore/src/RooRealSumFunc.cxx. RooRealSumFunc. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumFunc.html:71199,Guid,Guide,71199,doc/v632/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html,1,['Guid'],['Guide']
Usability,"efining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::Minimizer::SetMaxIterationsvoid SetMaxIterations(unsigned int maxiter)set maximum iterations (one iteration can have many function calls)Definition Minimizer.h:334; ROOT::Math::Minimizer::SetErrorDefvoid SetErrorDef(double up)set scale for calculating the errorsDefinition Minimizer.h:347; ROOT::Math::Minimizer::SetValidErrorvoid SetValidError(bool on)flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit)Definition Minimizer.h:350; ROOT::Math::Minimizer::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition Minimizer.h:337; ROOT::Math::Minimizer::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition Minimizer.h:328; ROOT::Math::Minimizer::SetStrategyvoid SetStrategy(int strategyLevel)set the strategyDefinition Minimizer.h:344; ROOT::Math::Minimizer::SetPrecisionvoid SetPrecision(double prec)set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer wi...Definition Minimizer.h:341; ROOT::Math::Minimizer::SetMaxFunctionCallsvoid SetMaxFunctionCalls(unsigned int maxfcn)set maximum of function callsDefinition Minimizer.h:331; ROOT::Math::Minimizer::SetExtraOptionsvoid SetExtraOptions(const IOptions &extraOptions)set only the extra optionsDefinition Minimizer.h:358; Factory.h; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Math::Util::ToStringstd::string ToString(const T &val)Utility function for conversion to strings.Definition Util.h:50; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcFitConfig.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8cxx_source.html:19238,Guid,Guide,19238,doc/master/FitConfig_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html,1,['Guid'],['Guide']
Usability,"efinition BDT.cxx:292; TMVA::StatDialogBDT::GetNtreesvoid GetNtrees()Definition BDT.cxx:108; TMVA::StatDialogBDT::Redrawvoid Redraw()Definition BDT.cxx:34; TMVA::StatDialogBDT::SetItreevoid SetItree()Definition BDT.cxx:29; TMVA::StatDialogBDT::fButtonsTGHorizontalFrame * fButtonsDefinition BDT.h:78; TMVA::StatDialogBDT::fColorOffsetInt_t fColorOffsetDefinition BDT.h:93; TMVA::StatDialogBDT::fInputTGNumberEntry * fInputDefinition BDT.h:76; TMVA::StatDialogBDT::DrawNodevoid DrawNode(TMVA::DecisionTreeNode *n, Double_t x, Double_t y, Double_t xscale, Double_t yscale, TString *vars)recursively puts an entries in the histogram for the node and its daughtersDefinition BDT.cxx:158; TMVA::StatDialogBDT::fNtreesInt_t fNtreesDefinition BDT.h:72; TMVA::StatDialogBDT::fDatasetTString fDatasetDefinition BDT.h:92; TMVA::StatDialogBDT::fThisstatic StatDialogBDT * fThisDefinition BDT.h:107; TMVA::StatDialogBDT::fCloseButtonTGTextButton * fCloseButtonDefinition BDT.h:80; TMVA::StatDialogBDT::UpdateCanvasesvoid UpdateCanvases()Definition BDT.cxx:103; TMVA::BDT_Global__cbarstd::vector< TControlBar * > BDT_Global__cbarDefinition BDT.h:112; TStringBasic string class.Definition TString.h:139; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::getSigColorTInt_t getSigColorT()Definition BDT.h:40; TMVA::getIntColorTInt_t getIntColorT()Definition BDT.h:42; TMVA::getIntColorFInt_t getIntColorF()Definition BDT.h:37; TMVA::BDT_DeleteTBarvoid BDT_DeleteTBar(int i); TMVA::getSigColorFInt_t getSigColorF()Definition BDT.h:35; TMVA::BDTvoid BDT(TString dataset, const TString &fin=""TMVA.root""); TMVA::getBkgColorTInt_t getBkgColorT()Definition BDT.h:41; TMVA::getBkgColorFInt_t getBkgColorF()Definition BDT.h:36; tmvaglob.h. tmvatmvaguiincTMVABDT.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BDT_8h_source.html:8049,Guid,Guide,8049,doc/master/BDT_8h_source.html,https://root.cern,https://root.cern/doc/master/BDT_8h_source.html,1,['Guid'],['Guide']
Usability,"efinition GSLMultiMinFunctionWrapper.h:69; ROOT::Math::GSLMultiMinFunctionWrapper::GetFuncgsl_multimin_function * GetFunc()Definition GSLMultiMinFunctionWrapper.h:83; ROOT::Math::GSLMultiMinFunctionWrapper::SetParamsvoid SetParams(void *p)Definition GSLMultiMinFunctionWrapper.h:71; ROOT::Math::GSLMultiMinFunctionWrapper::SetFunctionvoid SetFunction(const FuncType &f)Fill gsl function structure from a C++ Function class.Definition GSLMultiMinFunctionWrapper.h:75; ROOT::Math::GSLMultiMinFunctionWrapper::IsValidbool IsValid()Definition GSLMultiMinFunctionWrapper.h:85; ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapperGSLMultiMinFunctionWrapper()Definition GSLMultiMinFunctionWrapper.h:62; ROOT::Math::GSLMultiMinFunctionWrapper::SetDimvoid SetDim(unsigned int n)Definition GSLMultiMinFunctionWrapper.h:70; ROOT::Math::GSLMultiMinFunctionWrapper::fFuncgsl_multimin_function fFuncDefinition GSLMultiMinFunctionWrapper.h:92; double; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiMinDfPointervoid(* GSLMultiMinDfPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:47; ROOT::Math::GSLMultiMinFuncPointerdouble(* GSLMultiMinFuncPointer)(const gsl_vector *, void *)Definition GSLMultiMinFunctionWrapper.h:46; ROOT::Math::GSLMultiMinFdfPointervoid(* GSLMultiMinFdfPointer)(const gsl_vector *, void *, double *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::GSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin ...Definition GSLMultiMinFunctionAdapter.h:66. mathmathmoresrcGSLMultiMinFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:8997,Guid,Guide,8997,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html,1,['Guid'],['Guide']
Usability,"efinition SOFIE_common.cxx:110; TMVA::Experimental::SOFIE::ConcatenateTMVA::Experimental::RTensor< T > Concatenate(TMVA::Experimental::RTensor< T > &t1, TMVA::Experimental::RTensor< T > &t2, int axis=0)Definition SOFIE_common.hxx:511; TMVA::Experimental::SOFIE::CopyGNN_Data Copy(const GNN_Data &data)Definition SOFIE_common.hxx:558; TMVA::ExperimentalDefinition RModelParser_Keras.h:40; TMath::MeanDouble_t Mean(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the weighted mean of an array a with length n.Definition TMath.h:1089; v@ vDefinition rootcling_impl.cxx:3699; ProcInfo_tDefinition TSystem.h:196; SOFIE_GNNDefinition TMVA_SOFIE_GNN_Application.C:67; SOFIE_GNN::coreTMVA_SOFIE_core::Session coreDefinition TMVA_SOFIE_GNN_Application.C:70; SOFIE_GNN::SOFIE_GNNSOFIE_GNN(bool v=false)Definition TMVA_SOFIE_GNN_Application.C:99; SOFIE_GNN::output_transformTMVA_SOFIE_output_transform::Session output_transformDefinition TMVA_SOFIE_GNN_Application.C:72; SOFIE_GNN::verbosebool verboseDefinition TMVA_SOFIE_GNN_Application.C:68; SOFIE_GNN::decoderTMVA_SOFIE_decoder::Session decoderDefinition TMVA_SOFIE_GNN_Application.C:71; SOFIE_GNN::encoderTMVA_SOFIE_encoder::Session encoderDefinition TMVA_SOFIE_GNN_Application.C:69; SOFIE_GNN::Inferstd::vector< GNN_Data > Infer(const GNN_Data &data, int nsteps)Definition TMVA_SOFIE_GNN_Application.C:74; TMVA::Experimental::SOFIE::GNN_DataDefinition SOFIE_common.hxx:497; TMVA::Experimental::SOFIE::GNN_Data::global_dataRTensor< float > global_dataDefinition SOFIE_common.hxx:500; TMVA::Experimental::SOFIE::GNN_Data::edge_dataRTensor< float > edge_dataDefinition SOFIE_common.hxx:499; TMVA::Experimental::SOFIE::GNN_Data::edge_indexRTensor< int > edge_indexDefinition SOFIE_common.hxx:501; TMVA::Experimental::SOFIE::GNN_Data::node_dataRTensor< float > node_dataDefinition SOFIE_common.hxx:498. tutorialstmvaTMVA_SOFIE_GNN_Application.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C_source.html:16006,Guid,Guide,16006,doc/master/TMVA__SOFIE__GNN__Application_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__GNN__Application_8C_source.html,1,['Guid'],['Guide']
Usability,"efinition TEnv.cxx:793; TEnv::SetRcNamevirtual void SetRcName(const char *name)Definition TEnv.h:145; TEnv::ReadFilevirtual Int_t ReadFile(const char *fname, EEnvLevel level)Read and parse the resource file for a certain level.Definition TEnv.cxx:592; TEnv::SetValuevirtual void SetValue(const char *name, const char *value, EEnvLevel level=kEnvChange, const char *type=nullptr)Set the value of a resource or create a new resource.Definition TEnv.cxx:736; TEnv::Lookupvirtual TEnvRec * Lookup(const char *n) constLoop over all resource records and return the one with name.Definition TEnv.cxx:547; TEnv::Savevirtual void Save()Write the resource files for each level.Definition TEnv.cxx:649; TEnv::DefinedBool_t Defined(const char *name) constDefinition TEnv.h:141; TEnv::fIgnoreDupBool_t fIgnoreDupDefinition TEnv.h:129; TEnv::GetRcNamevirtual const char * GetRcName() constDefinition TEnv.h:144; TEnv::Getvalueconst char * Getvalue(const char *name) constReturns the character value for a named resource.Definition TEnv.cxx:441; TEnv::operator=TEnv & operator=(const TEnv &)=delete; TEnv::SaveLevelvirtual void SaveLevel(EEnvLevel level)Write the resource file for a certain level.Definition TEnv.cxx:664; TEnv::~TEnvvirtual ~TEnv()Delete the resource table.Definition TEnv.cxx:430; TEnv::TEnvTEnv(const TEnv &)=delete; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TReadEnvParserDefinition TEnv.cxx:228; TStringBasic string class.Definition TString.h:139; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TWriteEnvParserDefinition TEnv.cxx:242; bool; int; nconst Int_t nDefinition legend1.C:16; v@ vDefinition rootcling_impl.cxx:3699; lTLine lDefinition textangle.C:4. corebaseincTEnv.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8h_source.html:12676,Guid,Guide,12676,doc/master/TEnv_8h_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8h_source.html,1,['Guid'],['Guide']
Usability,"efinition TLegend.h:23; TLegend::Copyvoid Copy(TObject &obj) const overrideCopy this legend into ""obj"".Definition TLegend.cxx:388; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::SetNColumnsvoid SetNColumns(Int_t nColumns)Set the number of columns for the legend.Definition TLegend.cxx:606; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TLegend::SetHeadervirtual void SetHeader(const char *header="""", Option_t *option="""")Sets the header, which is the ""title"" that appears at the top of the legend.Definition TLegend.cxx:1085; TLegend::DeleteEntryvirtual void DeleteEntry()Delete entry at the mouse position.Definition TLegend.cxx:413; TLegend::GetEntryTLegendEntry * GetEntry() constGet entry pointed to by the mouse.Definition TLegend.cxx:478; TLegend::Clearvoid Clear(Option_t *option="""") overrideClear all entries in this legend, including the header.Definition TLegend.cxx:379; TLegend::fEntrySeparationFloat_t fEntrySeparationSeparation between entries, as a fraction of The space allocated to one entry.Definition TLegend.h:74; TLegend::EditEntryAttMarkervirtual void EditEntryAttMarker()Edit the marker attributes for the entry pointed by the mouse.Definition TLegend.cxx:455; TLegend::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave this legend as C++ statements on output stream out to be used with the SaveAs ....Definition TLegend.cxx:1035; TLegend::EditEntryAttTextvirtual void EditEntryAttText()Edit the text attributes for the entry pointed by the mouse.Definition TLegend.cxx:466; TLegend::Paintvoid Paint(Option_t *option="""") overridePaint this legend with its current attributes.Definition TLegend.cxx:561; TLegend::GetNColumnsInt_t GetNColumns() constDefinition TLegend.h:52; TLegend::SetDefaultsvoid SetDefaults()Definition TLegend.h:61; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8cxx_source.html:48252,Clear,Clearvoid,48252,doc/master/TLegend_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"efinition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; int; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; ROOT::RDF::SampleCallback_tstd::function< void(unsigned int, const ROOT::RDF::RSampleInfo &)> SampleCallback_tThe type of a data-block callback, registered with an RDataFrame computation graph via e....Definition RSampleInfo.hxx:134; ROOT::RDF::AsRNodeRNode AsRNode(NodeType node)Cast a RDataFrame node to the common type ROOT::RDF::RNode.Definition RDFHelpers.hxx:158; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; mTMarker mDefinition textangle.C:8. treedataframesrcRDFHelpers.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8cxx_source.html:23885,Guid,Guide,23885,doc/master/RDFHelpers_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8cxx_source.html,1,['Guid'],['Guide']
Usability,"efinition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TStyle::GetErrorXFloat_t GetErrorX() constDefinition TStyle.h:186; TVectorTTVectorT.Definition TVectorT.h:27; TVectorT::GetNrowsInt_t GetNrows() constDefinition TVectorT.h:73; TVectorT::GetLwbInt_t GetLwb() constDefinition TVectorT.h:71; bool; double; int; ROOT::Math::normal_quantile_cdouble normal_quantile_c(double z, double sigma)Inverse ( ) of the cumulative distribution function of the upper tail of the normal (Gaussian) distri...Definition QuantFuncMathCore.cxx:126; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; mTMarker mDefinition textangle.C:8; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. histhistsrcTGraphMultiErrors.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:94844,Guid,Guide,94844,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['Guid'],['Guide']
Usability,"efinition TVirtualPad.h:308; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf101_basicsDefinition rf101_basics.py:1; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(gauss_over_gauss_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_gaussData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; RooRealVar::mean = 1.01746 +/- 0.0300144 L(-10 - 10) ; RooRealVar::sigma = 2.9787 +/- 0.0219217 L(0.1 - 10) ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf101_basics.C. tutorialsroofitrf101_basics.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf101__basics_8C.html:4623,Guid,Guide,4623,doc/master/rf101__basics_8C.html,https://root.cern,https://root.cern/doc/master/rf101__basics_8C.html,1,['Guid'],['Guide']
Usability,"efinition at line 158 of file TViewPubFunctions.cxx. ◆ After(). TObject * TViewPubFunctions::After ; (; const TObject * ; obj); const. overrideprotectedvirtual . After is not allowed in this class. ; See TList::After for the intended behavior. ; Reimplemented from TList.; Definition at line 231 of file TViewPubFunctions.cxx. ◆ At(). TObject * TViewPubFunctions::At ; (; Int_t ; idx); const. overridevirtual . Returns the object at position idx. Returns 0 if idx is out of range. ; Reimplemented from TList.; Definition at line 211 of file TViewPubFunctions.cxx. ◆ Before(). TObject * TViewPubFunctions::Before ; (; const TObject * ; obj); const. overrideprotectedvirtual . Before is not allowed in this class. ; See TList::Before for the intended behavior. ; Reimplemented from TList.; Definition at line 241 of file TViewPubFunctions.cxx. ◆ Clear(). void TViewPubFunctions::Clear ; (; Option_t * ; option = """"). overrideprotectedvirtual . Clear is not allowed in this class. ; See TList::Clear for the intended behavior. ; Reimplemented from TList.; Definition at line 69 of file TViewPubFunctions.cxx. ◆ Delete(). void TViewPubFunctions::Delete ; (; Option_t * ; option = """"). overrideprotectedvirtual . Delete is not allowed in this class. ; See TList::Delete for the intended behavior. ; Reimplemented from TList.; Definition at line 78 of file TViewPubFunctions.cxx. ◆ FindObject() [1/2]. TObject * TViewPubFunctions::FindObject ; (; const char * ; name); const. overridevirtual . Find an object in this list using its name. ; Requires a sequential scan till the object has been found. Returns 0 if object with specified name is not found. ; Reimplemented from TList.; Definition at line 88 of file TViewPubFunctions.cxx. ◆ FindObject() [2/2]. TObject * TViewPubFunctions::FindObject ; (; const TObject * ; obj); const. overridevirtual . Find an object in this list using the object's IsEqual() member function. ; Requires a sequential scan till the object has been found. Returns 0 if object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubFunctions.html:24279,Clear,Clear,24279,doc/master/classTViewPubFunctions.html,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html,1,['Clear'],['Clear']
Usability,"efinition at line 226 of file TGeoTube.h. ◆ Safety(). Double_t TGeoCtub::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Safety_v(). void TGeoCtub::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SavePrimitive(). void TGeoCtub::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetCtubDimensions(). void TGeoCtub::SetCtubDimensions ; (; Double_t ; rmin, . Double_t ; rmax, . Double_t ; dz, . Double_t ; phi1, . Double_t ; phi2, . Double_t ; lx, . Double_t ; ly, . Double_t ; lz, . Double_t ; tx, . Double_t ; ty, . Double_t ; tz . ). ◆ SetDimensions(). void TGeoCtub::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [1/2]. void TGeoCtub::SetPoints ; (; Double_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoCtub::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Streamer(). void TGeoCtub::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoCtub::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 226 of file TGeoTube.h. Member Data Documentation. ◆ fNhigh. Double_t TGeoCtub::fNhigh[3]. protected . Definition at line 177 of file TGeoTube.h. ◆ fNlow. Double_t TGeoCtub::fNlow[3]. protected . Definition at line 176 of file TGeoTube.h. Libraries for TGeoCtub:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoTube.h. TGeoCtub. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:35337,Guid,Guide,35337,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,1,['Guid'],['Guide']
Usability,efinition at line 256 of file TGListTree.h. ◆ fHighlightGC. GContext_t TGListTree::fHighlightGC. protected . highlighted icon drawing context ; Definition at line 223 of file TGListTree.h. ◆ fHspacing. Int_t TGListTree::fHspacing. protected . horizontal spacing between items ; Definition at line 215 of file TGListTree.h. ◆ fIndent. Int_t TGListTree::fIndent. protected . number of pixels indentation ; Definition at line 217 of file TGListTree.h. ◆ fLast. TGListTreeItem* TGListTree::fLast. protected . pointer to last item in list ; Definition at line 211 of file TGListTree.h. ◆ fLastEventState. UInt_t TGListTree::fLastEventState. protected . modifier state of the last keyboard event ; Definition at line 240 of file TGListTree.h. ◆ fLineGC. GContext_t TGListTree::fLineGC. protected . dashed line drawing context ; Definition at line 222 of file TGListTree.h. ◆ fMargin. Int_t TGListTree::fMargin. protected . number of pixels margin from left side ; Definition at line 218 of file TGListTree.h. ◆ fSelected. TGListTreeItem* TGListTree::fSelected. protected . pointer to selected item in list ; Definition at line 212 of file TGListTree.h. ◆ fTip. TGToolTip* TGListTree::fTip. protected . tooltip shown when moving over list items ; Definition at line 229 of file TGListTree.h. ◆ fTipItem. TGListTreeItem* TGListTree::fTipItem. protected . item for which tooltip is set ; Definition at line 230 of file TGListTree.h. ◆ fUserControlled. Bool_t TGListTree::fUserControlled. protected . let user decides what is the behaviour on events ; Definition at line 238 of file TGListTree.h. ◆ fVspacing. Int_t TGListTree::fVspacing. protected . vertical spacing between items ; Definition at line 216 of file TGListTree.h. Libraries for TGListTree:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGListTree.h; gui/gui/src/TGListTree.cxx. TGListTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:85523,Guid,Guide,85523,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['Guid'],['Guide']
Usability,"efinition at line 48 of file TGLabel.h. ◆ fgDefaultGC. const TGGC * TGLabel::fgDefaultGC = nullptr. staticprotected . Definition at line 49 of file TGLabel.h. ◆ fHasOwnFont. Bool_t TGLabel::fHasOwnFont. protected . kTRUE - font defined locally, kFALSE - globally ; Definition at line 42 of file TGLabel.h. ◆ fMBottom. Int_t TGLabel::fMBottom. protected . margin bottom ; Definition at line 33 of file TGLabel.h. ◆ fMLeft. Int_t TGLabel::fMLeft. protected . margin left ; Definition at line 30 of file TGLabel.h. ◆ fMRight. Int_t TGLabel::fMRight. protected . margin right ; Definition at line 31 of file TGLabel.h. ◆ fMTop. Int_t TGLabel::fMTop. protected . margin top ; Definition at line 32 of file TGLabel.h. ◆ fNormGC. GContext_t TGLabel::fNormGC. protected . graphics context used for drawing label ; Definition at line 39 of file TGLabel.h. ◆ fText. TGString* TGLabel::fText. protected . label text ; Definition at line 27 of file TGLabel.h. ◆ fTextChanged. Bool_t TGLabel::fTextChanged. protected . has text changed ; Definition at line 38 of file TGLabel.h. ◆ fTFlags. Int_t TGLabel::fTFlags. protected . text flags (see TGFont.h ETextLayoutFlags) ; Definition at line 37 of file TGLabel.h. ◆ fTHeight. UInt_t TGLabel::fTHeight. protected . text height ; Definition at line 29 of file TGLabel.h. ◆ fTLayout. TGTextLayout* TGLabel::fTLayout. protected . text layout ; Definition at line 41 of file TGLabel.h. ◆ fTMode. Int_t TGLabel::fTMode. protected . text alignment ; Definition at line 34 of file TGLabel.h. ◆ fTWidth. UInt_t TGLabel::fTWidth. protected . text width ; Definition at line 28 of file TGLabel.h. ◆ fWrapLength. Int_t TGLabel::fWrapLength. protected . wrap length ; Definition at line 36 of file TGLabel.h. Libraries for TGLabel:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGLabel.h; gui/gui/src/TGLabel.cxx. TGLabel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLabel.html:41250,Guid,Guide,41250,doc/master/classTGLabel.html,https://root.cern,https://root.cern/doc/master/classTGLabel.html,1,['Guid'],['Guide']
Usability,"efinition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:94106,usab,usable,94106,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['usab'],['usable']
Usability,"efinition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7460 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:94107,usab,usable,94107,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['usab'],['usable']
Usability,efinition at line 58 of file TGeoExtension.h. ◆ DeclFileName(). static const char * TGeoRCExtension::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TGeoExtension.h. ◆ GetUserObject(). TObject * TGeoRCExtension::GetUserObject ; (; ); const. inline . Definition at line 49 of file TGeoExtension.h. ◆ Grab(). TGeoExtension * TGeoRCExtension::Grab ; (; ). inlineoverridevirtual . Implements TGeoExtension.; Definition at line 41 of file TGeoExtension.h. ◆ IsA(). TClass * TGeoRCExtension::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoExtension.; Definition at line 58 of file TGeoExtension.h. ◆ operator=(). TGeoRCExtension & TGeoRCExtension::operator= ; (; const TGeoRCExtension & ; ). privatedelete . ◆ Release(). void TGeoRCExtension::Release ; (; ); const. overridevirtual . Implements TGeoExtension.; Definition at line 68 of file TGeoExtension.cxx. ◆ SetUserObject(). void TGeoRCExtension::SetUserObject ; (; TObject * ; obj). inline . Definition at line 48 of file TGeoExtension.h. ◆ Streamer(). void TGeoRCExtension::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoExtension. ◆ StreamerNVirtual(). void TGeoRCExtension::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TGeoExtension.h. Member Data Documentation. ◆ fRC. Int_t TGeoRCExtension::fRC {0}. mutableprivate . Definition at line 55 of file TGeoExtension.h. ◆ fUserObject. TObject* TGeoRCExtension::fUserObject {nullptr}. private . Definition at line 56 of file TGeoExtension.h. Libraries for TGeoRCExtension:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoExtension.h; geom/geom/src/TGeoExtension.cxx. TGeoRCExtension. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:09 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRCExtension.html:15126,Guid,Guide,15126,doc/master/classTGeoRCExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html,1,['Guid'],['Guide']
Usability,"efinition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly enc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3934,Clear,Clear,3934,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Clear'],['Clear']
Usability,"efinition at line 89 of file RooMappedCategory.h. ◆ Streamer(). void RooMappedCategory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategory. ◆ StreamerNVirtual(). void RooMappedCategory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 91 of file RooMappedCategory.h. ◆ writeToStream(). void RooMappedCategory::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to ostream. ; Reimplemented from RooAbsCategory.; Definition at line 280 of file RooMappedCategory.cxx. Friends And Related Symbol Documentation. ◆ RooMappedCategoryCache. friend class RooMappedCategoryCache. friend . Definition at line 86 of file RooMappedCategory.h. Member Data Documentation. ◆ _defCat. value_type RooMappedCategory::_defCat {NoCatIdx}. protected . Default (unmapped) output type. ; Definition at line 75 of file RooMappedCategory.h. ◆ _inputCat. RooCategoryProxy RooMappedCategory::_inputCat. protected . Input category. ; Definition at line 76 of file RooMappedCategory.h. ◆ _mapArray. std::map<std::string,RooMappedCategory::Entry> RooMappedCategory::_mapArray. protected . List of mapping rules. ; Definition at line 77 of file RooMappedCategory.h. ◆ _mapcache. std::unique_ptr<RooMappedCategoryCache> RooMappedCategory::_mapcache. mutableprotected . ! transient member: cache the mapping ; Definition at line 78 of file RooMappedCategory.h. ◆ NoCatIdx. constexpr value_type RooMappedCategory::NoCatIdx = std::numeric_limits<value_type>::min(). staticconstexpr . Definition at line 29 of file RooMappedCategory.h. Libraries for RooMappedCategory:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooMappedCategory.h; roofit/roofitcore/src/RooMappedCategory.cxx. RooMappedCategory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:51050,Guid,Guide,51050,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['Guid'],['Guide']
Usability,"efore the file is opened, it is checked, that the file is staged, if not, the open fails; 129 ; 130 static std::atomic<Long64_t> fgBytesWrite; ///<Number of bytes written by all TFile objects; 131 static std::atomic<Long64_t> fgBytesRead; ///<Number of bytes read by all TFile objects; 132 static std::atomic<Long64_t> fgFileCounter; ///<Counter for all opened files; 133 static std::atomic<Int_t> fgReadCalls; ///<Number of bytes read from all TFile objects; 134 static Int_t fgReadaheadSize; ///<Readahead buffer size; 135 static Bool_t fgReadInfo; ///<if true (default) ReadStreamerInfo is called when opening a file; 136 ; 137 virtual EAsyncOpenStatus GetAsyncOpenStatus() { return fAsyncOpenStatus; }; 138 virtual void Init(Bool_t create);; 139 Bool_t FlushWriteCache();; 140 Int_t ReadBufferViaCache(char *buf, Int_t len);; 141 Int_t WriteBufferViaCache(const char *buf, Int_t len);; 142 ; 143 ////////////////////////////////////////////////////////////////////////////////; 144 /// \brief Simple struct of the return value of GetStreamerInfoListImpl; 145 struct InfoListRet {; 146 TList *fList;; 147 Int_t fReturnCode;; 148 ROOT::Internal::RConcurrentHashColl::HashValue fHash;; 149 };; 150 ; 151 virtual InfoListRet GetStreamerInfoListImpl(bool lookupSICache);; 152 ; 153 // Creating projects; 154 Int_t MakeProjectParMake(const char *packname, const char *filename);; 155 Int_t MakeProjectParProofInf(const char *packname, const char *proofinfdir);; 156 ; 157 // Interface to basic system I/O routines; 158 virtual Int_t SysOpen(const char *pathname, Int_t flags, UInt_t mode);; 159 virtual Int_t SysClose(Int_t fd);; 160 virtual Int_t SysRead(Int_t fd, void *buf, Int_t len);; 161 virtual Int_t SysWrite(Int_t fd, const void *buf, Int_t len);; 162 virtual Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence);; 163 virtual Int_t SysStat(Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime);; 164 virtual Int_t SysSync(Int_t fd);; 165 ; 166 // Interface for text-based ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:6938,Simpl,Simple,6938,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['Simpl'],['Simple']
Usability,"efore, TObject *obj)=0TSeqCollectionpure virtual; AddFirst(TObject *obj)=0TSeqCollectionpure virtual; AddLast(TObject *obj)=0TSeqCollectionpure virtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddVector(TObject *obj1,...)TCollection; After(const TObject *obj) const =0TSeqCollectionpure virtual; AppendPad(Option_t *option="""")TObjectvirtual; AssertClass(TClass *cl) constTCollection; At(Int_t idx) const =0TSeqCollectionpure virtual; Before(const TObject *obj) const =0TSeqCollectionpure virtual; begin() constTCollectioninline; Browse(TBrowser *b) overrideTCollectionvirtual; Capacity() constTCollectioninline; Changed()TSeqCollectioninlineprotectedvirtual; CheckedHash()TObjectinline; Class()TSeqCollectionstatic; Class_Name()TSeqCollectionstatic; Class_Version()TSeqCollectioninlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") override=0TCollectionpure virtual; Clone(const char *newname="""") const overrideTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TSeqCollectioninlinestatic; Delete(Option_t *option="""") override=0TCollectionpure virtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSeqCollection-members.html:1370,Clear,Clear,1370,doc/master/classTSeqCollection-members.html,https://root.cern,https://root.cern/doc/master/classTSeqCollection-members.html,1,['Clear'],['Clear']
Usability,"efresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:19982,Clear,ClearStack,19982,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,2,['Clear'],['ClearStack']
Usability,"eft); TGenCollectionProxy*TGenCollectionProxy::Initialize() const; virtual TGenCollectionProxy*TEmulatedCollectionProxy::InitializeEx(); voidTEmulatedCollectionProxy::ReadItems(int nElements, TBuffer& b); voidReadMap(int nElements, TBuffer& b); voidTEmulatedCollectionProxy::Shrink(UInt_t nCurr, UInt_t left, Bool_t force); voidTEmulatedCollectionProxy::WriteItems(int nElements, TBuffer& b); voidWriteMap(int nElements, TBuffer& b). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; TGenCollectionProxy::MethodTGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of the key_type; stringTGenCollectionProxy::fNameName of the class being proxied.; TGenCollectionProxy::MethodTGenCollectionProxy::fNextCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEmulatedMapProxy.html:4544,clear,clear,4544,root/html528/TEmulatedMapProxy.html,https://root.cern,https://root.cern/root/html528/TEmulatedMapProxy.html,2,['clear'],['clear']
Usability,"eft@ kLeftDefinition TRootBrowser.h:121; TRootBrowser::fTabLeftTGTab * fTabLeftLeft Tab.Definition TRootBrowser.h:62; TRootBrowser::GetStatusBarTGStatusBar * GetStatusBar() constDefinition TRootBrowser.h:139; TRootBrowser::GetTabRightTGTab * GetTabRight() constDefinition TRootBrowser.h:141; TRootBrowser::Addvoid Add(TObject *obj, const char *name=nullptr, Int_t check=-1) overrideAdd items to the actual browser.Definition TRootBrowser.cxx:357; TRootBrowser::fTopMenuFrameTGHorizontalFrame * fTopMenuFrameTop menu frame.Definition TRootBrowser.h:77; TRootBrowser::fLH3TGLayoutHints * fLH3Layout hints, part 1.Definition TRootBrowser.h:60; TRootBrowser::fMenuBarTGMenuBar * fMenuBarMain (owned) menu bar.Definition TRootBrowser.h:81; TRootBrowser::fNbInitPluginsInt_t fNbInitPluginsNumber of initial plugins (from .rootrc)Definition TRootBrowser.h:90; TRootBrowser::InitPluginsvoid InitPlugins(Option_t *opt="""")Initialize default plugins.Definition TRootBrowser.cxx:853; TRootBrowser::fV2TGVerticalFrame * fV2Vertical frame.Definition TRootBrowser.h:73; TRootBrowser::RecursiveReparentvoid RecursiveReparent(TGPopupMenu *popup)Recursively reparent TGPopupMenu to gClient->GetDefaultRoot().Definition TRootBrowser.cxx:956; TRootBrowser::CloseTabsvoid CloseTabs() overrideProperly close the mainframes embedded in the different tabs.Definition TRootBrowser.cxx:406; TRootBrowser::GetDrawOptionOption_t * GetDrawOption() const overrideReturns drawing option.Definition TRootBrowser.cxx:602; TRootBrowser::fH1TGHorizontalFrame * fH1Horizontal frame.Definition TRootBrowser.h:70; TRootBrowser::fToolbarFrameTGHorizontalFrame * fToolbarFrameToolbar frame.Definition TRootBrowser.h:80; TStringBasic string class.Definition TString.h:139; bool; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Event_tEvent structure.Definition GuiTypes.h:174. guiguiincTRootBrowser.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRootBrowser_8h_source.html:22964,Guid,Guide,22964,doc/master/TRootBrowser_8h_source.html,https://root.cern,https://root.cern/doc/master/TRootBrowser_8h_source.html,1,['Guid'],['Guide']
Usability,"egal command line command. Commands like "".x file.C"" or "".L file.C"" will cause the file file.C to be send to the PROOF cluster. If logtomacro is TRUE the text result of the action is saved in the fMacroLog TMacro, accessible via TMacro::GetMacroLog(); Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6589 of file TProof.cxx. ◆ Exec() [3/3]. Int_t TProof::Exec ; (; const char * ; cmd, . ESlaves ; list, . Bool_t ; plusMaster . ). private . Send command to be executed on the PROOF master and/or slaves. ; Command can be any legal command line command. Commands like "".x file.C"" or "".L file.C"" will cause the file file.C to be send to the PROOF cluster. Returns -1 in case of error, >=0 in case of succes. ; Definition at line 6533 of file TProof.cxx. ◆ ExistsDataSet(). Bool_t TProof::ExistsDataSet ; (; const char * ; dataset). virtual . Returns kTRUE if 'dataset' exists, kFALSE otherwise. ; Reimplemented in TProofLite.; Definition at line 10868 of file TProof.cxx. ◆ Feedback(). void TProof::Feedback ; (; TList * ; objs). Get list of feedback objects. ; Connect a slot to this signal to monitor the feedback object. ; Definition at line 9268 of file TProof.cxx. ◆ FinalizationDone(). void TProof::FinalizationDone ; (; ). inlineprivate . Definition at line 694 of file TProof.h. ◆ Finalize() [1/2]. Long64_t TProof::Finalize ; (; const char * ; ref, . Bool_t ; force = kFALSE . ). Finalize query with reference ref. ; If force, force retrieval if the query is found in the local list but has already been finalized (default kFALSE). If ref = 0, finalize current query. Return 0 on success, -1 on error ; Definition at line 5908 of file TProof.cxx. ◆ Finalize() [2/2]. Long64_t TProof::Finalize ; (; Int_t ; qry = -1, . Bool_t ; force = kFALSE . ). Finalize the qry-th query in fQueries. ; If force, force retrieval if the query is found in the local list but has already been finalized (default kFALSE). If query < 0, finalize current query. Return 0 on success, -1 on e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:89686,Feedback,Feedback,89686,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Feedback'],['Feedback']
Usability,"egas.c) ;  . Public Attributes; double alpha;  ; size_t iterations;  ; int mode;  ; int stage;  ; int verbose;  . #include <Math/MCParameters.h>; Constructor & Destructor Documentation. ◆ VegasParameters() [1/2]. ROOT::Math::VegasParameters::VegasParameters ; (; ). inline . Definition at line 54 of file MCParameters.h. ◆ VegasParameters() [2/2]. ROOT::Math::VegasParameters::VegasParameters ; (; const ROOT::Math::IOptions & ; opt). Definition at line 48 of file MCParameters.cxx. Member Function Documentation. ◆ MakeIOptions(). std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::VegasParameters::MakeIOptions ; (; ); const. Convert to options. ; Definition at line 72 of file MCParameters.cxx. ◆ operator=(). VegasParameters & ROOT::Math::VegasParameters::operator= ; (; const ROOT::Math::IOptions & ; opt). Definition at line 53 of file MCParameters.cxx. ◆ SetDefaultValues(). void ROOT::Math::VegasParameters::SetDefaultValues ; (; ). default VEGAS parameters (copied from gsl/monte/vegas.c) ; Definition at line 39 of file MCParameters.cxx. Member Data Documentation. ◆ alpha. double ROOT::Math::VegasParameters::alpha. Definition at line 47 of file MCParameters.h. ◆ iterations. size_t ROOT::Math::VegasParameters::iterations. Definition at line 48 of file MCParameters.h. ◆ mode. int ROOT::Math::VegasParameters::mode. Definition at line 50 of file MCParameters.h. ◆ stage. int ROOT::Math::VegasParameters::stage. Definition at line 49 of file MCParameters.h. ◆ verbose. int ROOT::Math::VegasParameters::verbose. Definition at line 51 of file MCParameters.h. Collaboration diagram for ROOT::Math::VegasParameters:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following files:; math/mathmore/inc/Math/MCParameters.h; math/mathmore/src/MCParameters.cxx. ROOTMathVegasParameters. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1VegasParameters.html:2867,Guid,Guide,2867,doc/master/structROOT_1_1Math_1_1VegasParameters.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1VegasParameters.html,1,['Guid'],['Guide']
Usability,egator.h;  FeldmanCousins.h;  FrequentistCalculator.h;  Heaviside.h;  HLFactory.h;  HybridCalculator.h;  HybridCalculatorOriginal.h;  HybridPlot.h;  HybridResult.h;  HypoTestCalculator.h;  HypoTestCalculatorGeneric.h;  HypoTestInverter.h;  HypoTestInverterOriginal.h;  HypoTestInverterPlot.h;  HypoTestInverterResult.h;  HypoTestPlot.h;  HypoTestResult.h;  IntervalCalculator.h;  LikelihoodInterval.h;  LikelihoodIntervalPlot.h;  MarkovChain.h;  MaxLikelihoodEstimateTestStat.h;  MCMCCalculator.h;  MCMCInterval.h;  MCMCIntervalPlot.h;  MetropolisHastings.h;  MinNLLTestStat.h;  ModelConfig.h;  NeymanConstruction.h;  NumberCountingPdfFactory.h;  NumberCountingUtils.h;  NumEventsTestStat.h;  PdfProposal.h;  PointSetInterval.h;  ProfileInspector.h;  ProfileLikelihoodCalculator.h;  ProfileLikelihoodTestStat.h;  ProofConfig.h;  ProposalFunction.h;  ProposalHelper.h;  RatioOfProfiledLikelihoodsTestStat.h;  RooStatsUtils.h;  SamplingDistPlot.h;  SamplingDistribution.h;  SequentialProposal.h;  SimpleInterval.h;  SimpleLikelihoodRatioTestStat.h;  SPlot.h;  TestStatistic.h;  TestStatSampler.h;  ToyMCImportanceSampler.h;  ToyMCSampler.h;  ToyMCStudy.h;  UniformProposal.h;  UpperLimitMCSModule.h;  LinkDef.h;  ► src;  AsymptoticCalculator.cxx;  BayesianCalculator.cxx;  BernsteinCorrection.cxx;  ConfidenceBelt.cxx;  DetailedOutputAggregator.cxx;  FeldmanCousins.cxx;  FrequentistCalculator.cxx;  Heaviside.cxx;  HLFactory.cxx;  HybridCalculator.cxx;  HybridCalculatorOriginal.cxx;  HybridPlot.cxx;  HybridResult.cxx;  HypoTestCalculatorGeneric.cxx;  HypoTestInverter.cxx;  HypoTestInverterOriginal.cxx;  HypoTestInverterPlot.cxx;  HypoTestInverterResult.cxx;  HypoTestPlot.cxx;  HypoTestResult.cxx;  LikelihoodInterval.cxx;  LikelihoodIntervalPlot.cxx;  MarkovChain.cxx;  MCMCCalculator.cxx;  MCMCInterval.cxx;  MCMCIntervalPlot.cxx;  MetropolisHastings.cxx;  ModelConfig.cxx;  NeymanConstruction.cxx;  NumberCountingPdfFactory.cxx;  NumberCountingUtils.cxx;  PdfProposal.cxx;  PointSetInterval.cxx;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:84292,Simpl,SimpleInterval,84292,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimpleInterval']
Usability,egator.h;  FeldmanCousins.h;  FrequentistCalculator.h;  Heaviside.h;  HLFactory.h;  HybridCalculator.h;  HybridCalculatorOriginal.h;  HybridPlot.h;  HybridResult.h;  HypoTestCalculator.h;  HypoTestCalculatorGeneric.h;  HypoTestInverter.h;  HypoTestInverterOriginal.h;  HypoTestInverterPlot.h;  HypoTestInverterResult.h;  HypoTestPlot.h;  HypoTestResult.h;  IntervalCalculator.h;  LikelihoodInterval.h;  LikelihoodIntervalPlot.h;  MarkovChain.h;  MaxLikelihoodEstimateTestStat.h;  MCMCCalculator.h;  MCMCInterval.h;  MCMCIntervalPlot.h;  MetropolisHastings.h;  MinNLLTestStat.h;  ModelConfig.h;  NeymanConstruction.h;  NumberCountingPdfFactory.h;  NumberCountingUtils.h;  NumEventsTestStat.h;  PdfProposal.h;  PointSetInterval.h;  ProfileInspector.h;  ProfileLikelihoodCalculator.h;  ProfileLikelihoodTestStat.h;  ProofConfig.h;  ProposalFunction.h;  ProposalHelper.h;  RatioOfProfiledLikelihoodsTestStat.h;  RooStatsUtils.h;  SamplingDistPlot.h;  SamplingDistribution.h;  SequentialProposal.h;  SimpleInterval.h;  SimpleLikelihoodRatioTestStat.h;  SPlot.h;  TestStatistic.h;  TestStatSampler.h;  ToyMCImportanceSampler.h;  ToyMCSampler.h;  ToyMCStudy.h;  UniformProposal.h;  UpperLimitMCSModule.h;  ► src;  AsymptoticCalculator.cxx;  BayesianCalculator.cxx;  BernsteinCorrection.cxx;  ConfidenceBelt.cxx;  DetailedOutputAggregator.cxx;  FeldmanCousins.cxx;  FrequentistCalculator.cxx;  Heaviside.cxx;  HLFactory.cxx;  HybridCalculator.cxx;  HybridCalculatorOriginal.cxx;  HybridPlot.cxx;  HybridResult.cxx;  HypoTestCalculatorGeneric.cxx;  HypoTestInverter.cxx;  HypoTestInverterOriginal.cxx;  HypoTestInverterPlot.cxx;  HypoTestInverterResult.cxx;  HypoTestPlot.cxx;  HypoTestResult.cxx;  LikelihoodInterval.cxx;  LikelihoodIntervalPlot.cxx;  MarkovChain.cxx;  MCMCCalculator.cxx;  MCMCInterval.cxx;  MCMCIntervalPlot.cxx;  MetropolisHastings.cxx;  ModelConfig.cxx;  NeymanConstruction.cxx;  NumberCountingPdfFactory.cxx;  NumberCountingUtils.cxx;  PdfProposal.cxx;  PointSetInterval.cxx;  ProfileIns,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:82405,Simpl,SimpleInterval,82405,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,4,['Simpl'],['SimpleInterval']
Usability,egend]; Member Enumeration Documentation. ◆ EGridJobStatus. enum TGridJobStatus::EGridJobStatus. EnumeratorkUNKNOWN ; kWAITING ; kRUNNING ; kABORTED ; kFAIL ; kDONE . Definition at line 30 of file TGridJobStatus.h. Constructor & Destructor Documentation. ◆ TGridJobStatus(). TGridJobStatus::TGridJobStatus ; (; ). inline . Definition at line 32 of file TGridJobStatus.h. ◆ ~TGridJobStatus(). virtual TGridJobStatus::~TGridJobStatus ; (; ). inlinevirtual . Definition at line 33 of file TGridJobStatus.h. Member Function Documentation. ◆ Class(). static TClass * TGridJobStatus::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGridJobStatus::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGridJobStatus::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 40 of file TGridJobStatus.h. ◆ DeclFileName(). static const char * TGridJobStatus::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 40 of file TGridJobStatus.h. ◆ GetStatus(). virtual EGridJobStatus TGridJobStatus::GetStatus ; (; ); const. pure virtual . ◆ IsA(). TClass * TGridJobStatus::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 40 of file TGridJobStatus.h. ◆ Streamer(). void TGridJobStatus::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGridJobStatus::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 40 of file TGridJobStatus.h. Libraries for TGridJobStatus:. [legend]; The documentation for this class was generated from the following file:; net/net/inc/TGridJobStatus.h. TGridJobStatus. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJobStatus.html:13303,Guid,Guide,13303,doc/master/classTGridJobStatus.html,https://root.cern,https://root.cern/doc/master/classTGridJobStatus.html,1,['Guid'],['Guide']
Usability,"egister size of this 3D object. ; Reimplemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction.; Definition at line 421 of file TGeoBoolNode.cxx. ◆ Streamer(). void TGeoBoolNode::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ StreamerNVirtual(). void TGeoBoolNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 91 of file TGeoBoolNode.h. Member Data Documentation. ◆ fLeft. TGeoShape* TGeoBoolNode::fLeft {nullptr}. protected . Definition at line 43 of file TGeoBoolNode.h. ◆ fLeftMat. TGeoMatrix* TGeoBoolNode::fLeftMat {nullptr}. protected . Definition at line 45 of file TGeoBoolNode.h. ◆ fMutex. std::mutex TGeoBoolNode::fMutex. mutableprotected . Size for the navigation data array. ; Definition at line 52 of file TGeoBoolNode.h. ◆ fNpoints. Int_t TGeoBoolNode::fNpoints {0}. protected . Definition at line 47 of file TGeoBoolNode.h. ◆ fPoints. Double_t* TGeoBoolNode::fPoints {nullptr}. protected . number of points on the mesh ; Definition at line 48 of file TGeoBoolNode.h. ◆ fRight. TGeoShape* TGeoBoolNode::fRight {nullptr}. protected . Definition at line 44 of file TGeoBoolNode.h. ◆ fRightMat. TGeoMatrix* TGeoBoolNode::fRightMat {nullptr}. protected . Definition at line 46 of file TGeoBoolNode.h. ◆ fThreadData. std::vector<ThreadData_t *> TGeoBoolNode::fThreadData. mutableprotected . array of mesh points ; Definition at line 50 of file TGeoBoolNode.h. ◆ fThreadSize. Int_t TGeoBoolNode::fThreadSize {0}. mutableprotected . Navigation data per thread. ; Definition at line 51 of file TGeoBoolNode.h. Libraries for TGeoBoolNode:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoBoolNode.h; geom/geom/src/TGeoBoolNode.cxx. TGeoBoolNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:23138,Guid,Guide,23138,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,1,['Guid'],['Guide']
Usability,"egration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 77 of file RooExponential.cxx. ◆ IsA(). TClass * RooExponential::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooExponential.h. ◆ negateCoefficient(). bool RooExponential::negateCoefficient ; (; ); const. inline . Definition at line 39 of file RooExponential.h. ◆ Streamer(). void RooExponential::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooExponential::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file RooExponential.h. ◆ translate(). void RooExponential::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 116 of file RooExponential.cxx. ◆ variable(). RooAbsReal const & RooExponential::variable ; (; ); const. inline . Get the x variable. ; Definition at line 34 of file RooExponential.h. Member Data Documentation. ◆ _negateCoefficient. bool RooExponential::_negateCoefficient = false. protected . Definition at line 48 of file RooExponential.h. ◆ c. RooRealProxy RooExponential::c. protected . Definition at line 47 of file RooExpone",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:78567,simpl,simple,78567,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['simpl'],['simple']
Usability,"egrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); virtual~RooIntegrator1D(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tRooAbsIntegrator::calculate(const Double_t* yvec = 0); virtual Bool_tcanIntegrate1D() const; virtual Bool_tcanIntegrate2D() const; virtual Bool_tcanIntegrateND() const; virtual Bool_tcanIntegrateOpenEnded() const; virtual Bool_tcheckLimits() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual RooAbsIntegrator*clone(const RooAbsFunc& function, const RooNumIntConfig& config) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:1517,Clear,Clear,1517,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,5,['Clear'],['Clear']
Usability,"egularization ; _regularization = TMVA::DNN::EnumRegularization::NONE, . MinimizerType ; _eMinimizerType = MinimizerType::fSteepest, . double ; _learningRate = 1e-5, . double ; _momentum = 0.3, . int ; _repetitions = 3, . bool ; _multithreading = true . ). c'tor ; Definition at line 232 of file NeuralNet.cxx. ◆ ~Settings(). TMVA::DNN::Settings::~Settings ; (; ). virtual . d'tor ; Definition at line 261 of file NeuralNet.cxx. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x . ). inline . for monitoring ; Definition at line 821 of file NeuralNet.h. ◆ addPoint() [2/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x, . double ; y . ). inline . for monitoring ; Definition at line 822 of file NeuralNet.h. ◆ batchSize(). size_t TMVA::DNN::Settings::batchSize ; (; ); const. inline . mini-batch size ; Definition at line 767 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::Settings::clear ; (; std::string ; histoName). inline . for monitoring ; Definition at line 824 of file NeuralNet.h. ◆ computeResult(). virtual void TMVA::DNN::Settings::computeResult ; (; const Net & ; , . std::vector< double > & ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 809 of file NeuralNet.h. ◆ convergenceCount(). size_t TMVA::DNN::Settings::convergenceCount ; (; ); const. inline . returns the current convergence count ; Definition at line 827 of file NeuralNet.h. ◆ convergenceSteps(). size_t TMVA::DNN::Settings::convergenceSteps ; (; ); const. inline . how many steps until training is deemed to have converged ; Definition at line 766 of file NeuralNet.h. ◆ create() [1/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . for monitoring ; Definition at line 819 of file NeuralNet.h. ◆ create() [2/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:6065,clear,clear,6065,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['clear'],['clear']
Usability,"eight = 1.0 . ). private . update the network based on how closely the output matched the desired output ; Definition at line 1302 of file MethodMLP.cxx. ◆ UpdateNetwork() [2/2]. void TMVA::MethodMLP::UpdateNetwork ; (; Double_t ; desired, . Double_t ; eventWeight = 1.0 . ). private . update the network based on how closely the output matched the desired output ; Definition at line 1286 of file MethodMLP.cxx. ◆ UpdatePriors(). void TMVA::MethodMLP::UpdatePriors ; (; ). private . zjh ; Definition at line 1454 of file MethodMLP.cxx. ◆ UpdateRegulators(). void TMVA::MethodMLP::UpdateRegulators ; (; ). private . zjh ; Definition at line 1468 of file MethodMLP.cxx. ◆ UpdateSynapses(). void TMVA::MethodMLP::UpdateSynapses ; (; ). private . update synapse error fields and adjust the weights (if in sequential mode) ; Definition at line 1412 of file MethodMLP.cxx. Member Data Documentation. ◆ fBatchSize. Int_t TMVA::MethodMLP::fBatchSize. private . batch size, only matters if in batch learning mode ; Definition at line 192 of file MethodMLP.h. ◆ fBPMode. EBPTrainingMode TMVA::MethodMLP::fBPMode. private . backprop learning mode (sequential or batch) ; Definition at line 190 of file MethodMLP.h. ◆ fBpModeS. TString TMVA::MethodMLP::fBpModeS. private . backprop learning mode option string (sequential or batch) ; Definition at line 191 of file MethodMLP.h. ◆ fCalculateErrors. bool TMVA::MethodMLP::fCalculateErrors. private . compute inverse hessian matrix at the end of the training ; Definition at line 165 of file MethodMLP.h. ◆ fDecayRate. Double_t TMVA::MethodMLP::fDecayRate. private . decay rate for above learning rate ; Definition at line 189 of file MethodMLP.h. ◆ fDeviationsFromTargets. std::vector<std::pair<Float_t,Float_t> >* TMVA::MethodMLP::fDeviationsFromTargets. private . deviation from the targets, event weight ; Definition at line 204 of file MethodMLP.h. ◆ fEpochMon. Bool_t TMVA::MethodMLP::fEpochMon. private . create and fill epoch-wise monitoring histograms (mak",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:49829,learn,learning,49829,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['learn'],['learning']
Usability,"eight; 114 int GetHeight() const { return fHeight; }; 115 ; 116 /// Display the canvas.; 117 void Show(const std::string &where = """");; 118 ; 119 /// returns true if Show() method was called; 120 bool IsShown() const { return fShown; }; 121 ; 122 /// clear IsShown() flag; 123 void ClearShown() { fShown = false; }; 124 ; 125 /// Returns window name used to display canvas; 126 std::string GetWindowAddr() const;; 127 ; 128 /// Returns window URL which can be used for connection; 129 std::string GetWindowUrl(bool remote);; 130 ; 131 /// Hide all canvas displays; 132 void Hide();; 133 ; 134 /// Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed; 135 void Remove();; 136 ; 137 /// Insert panel into the canvas, canvas should be shown at this moment; 138 template <class PANEL>; 139 bool AddPanel(std::shared_ptr<PANEL> &panel); 140 {; 141 if (!fPainter) return false;; 142 return fPainter->AddPanel(panel->GetWindow());; 143 }; 144 ; 145 /// Get modify counter; 146 uint64_t GetModified() const { return fModified; }; 147 ; 148 // Set newest version to all primitives; 149 void Modified() { SetDrawableVersion(IncModified()); }; 150 ; 151 /// Set newest version to specified drawable; 152 void Modified(std::shared_ptr<RDrawable> drawable); 153 {; 154 // TODO: may be check that drawable belong to the canvas; 155 if (drawable); 156 drawable->SetDrawableVersion(IncModified());; 157 }; 158 ; 159 // Return if canvas was modified and not yet updated; 160 bool IsModified() const;; 161 ; 162 /// update drawing; 163 void Update(bool async = false, CanvasCallback_t callback = nullptr);; 164 ; 165 /// returns true if Update() method was called; 166 bool IsUpdated() const { return fUpdated; }; 167 ; 168 /// clear IsUpdated() flag; 169 void ClearUpdated() { fUpdated = false; }; 170 ; 171 /// Run canvas functionality for given time (in seconds); 172 void Run(double tm = 0.);; 173 ; 174 /// Save canvas in image file; 175 bool SaveAs(const std::string &filenam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8hxx_source.html:4221,clear,clear,4221,doc/master/RCanvas_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8hxx_source.html,4,"['Clear', 'clear']","['ClearShown', 'ClearUpdated', 'clear']"
Usability,"eightDecay = 1e-5, . TMVA::DNN::EnumRegularization ; _regularization = TMVA::DNN::EnumRegularization::NONE, . MinimizerType ; _eMinimizerType = MinimizerType::fSteepest, . double ; _learningRate = 1e-5, . double ; _momentum = 0.3, . int ; _repetitions = 3, . bool ; _multithreading = true . ). c'tor ; Definition at line 232 of file NeuralNet.cxx. ◆ ~Settings(). TMVA::DNN::Settings::~Settings ; (; ). virtual . d'tor ; Definition at line 261 of file NeuralNet.cxx. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x . ). inline . for monitoring ; Definition at line 821 of file NeuralNet.h. ◆ addPoint() [2/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x, . double ; y . ). inline . for monitoring ; Definition at line 822 of file NeuralNet.h. ◆ batchSize(). size_t TMVA::DNN::Settings::batchSize ; (; ); const. inline . mini-batch size ; Definition at line 767 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::Settings::clear ; (; std::string ; histoName). inline . for monitoring ; Definition at line 824 of file NeuralNet.h. ◆ computeResult(). virtual void TMVA::DNN::Settings::computeResult ; (; const Net & ; , . std::vector< double > & ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 809 of file NeuralNet.h. ◆ convergenceCount(). size_t TMVA::DNN::Settings::convergenceCount ; (; ); const. inline . returns the current convergence count ; Definition at line 827 of file NeuralNet.h. ◆ convergenceSteps(). size_t TMVA::DNN::Settings::convergenceSteps ; (; ); const. inline . how many steps until training is deemed to have converged ; Definition at line 766 of file NeuralNet.h. ◆ create() [1/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . for monitoring ; Definition at line 819 of file NeuralNet.h. ◆ create() [2/2]. void TMVA::DNN::Settings::create ; (; std::string ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:6030,clear,clear,6030,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['clear'],['clear']
Usability,"eightDecay=1e-4,Regularization=None,""; ""DropConfig=0.0+0.5+0.5+0.5"");; ; // General Options.; TString dnnOptions (""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; ""WeightInitialization=XAVIERUNIFORM"");; dnnOptions.Append ("":""); dnnOptions.Append (layoutString);; dnnOptions.Append ("":""); dnnOptions.Append (trainingStrategyString);; ; // Cuda implementation.; if (Use[""DNN_GPU""]) {; TString gpuOptions = dnnOptions + "":Architecture=GPU"";; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DNN_GPU"", gpuOptions);; }; // Multi-core CPU implementation.; if (Use[""DNN_CPU""]) {; TString cpuOptions = dnnOptions + "":Architecture=CPU"";; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DNN_CPU"", cpuOptions);; }; }; ; // CF(Clermont-Ferrand)ANN; if (Use[""CFMlpANN""]); factory->BookMethod( dataloader, TMVA::Types::kCFMlpANN, ""CFMlpANN"", ""!H:!V:NCycles=200:HiddenLayers=N+1,N"" ); // n_cycles:#nodes:#nodes:...; ; // Tmlp(Root)ANN; if (Use[""TMlpANN""]); factory->BookMethod( dataloader, TMVA::Types::kTMlpANN, ""TMlpANN"", ""!H:!V:NCycles=200:HiddenLayers=N+1,N:LearningMethod=BFGS:ValidationFraction=0.3"" ); // n_cycles:#nodes:#nodes:...; ; // Support Vector Machine; if (Use[""SVM""]); factory->BookMethod( dataloader, TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"" );; ; // Boosted Decision Trees; if (Use[""BDTG""]) // Gradient Boost; factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDTG"",; ""!H:!V:NTrees=1000:MinNodeSize=2.5%:BoostType=Grad:Shrinkage=0.10:UseBaggedBoost:BaggedSampleFraction=0.5:nCuts=20:MaxDepth=2"" );; ; if (Use[""BDT""]) // Adaptive Boost; factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDT"",; ""!H:!V:NTrees=850:MinNodeSize=2.5%:MaxDepth=3:BoostType=AdaBoost:AdaBoostBeta=0.5:UseBaggedBoost:BaggedSampleFraction=0.5:SeparationType=GiniIndex:nCuts=20"" );; ; if (Use[""BDTB""]) // Bagging; factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDTB"",; ""!H:!V:NTrees=400:BoostType=Bagging:SeparationType=GiniIndex:nCuts=20"" );; ; if (Use[""BDTD""]) // Decorrelation +",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:101352,Learn,LearningMethod,101352,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Learn'],['LearningMethod']
Usability,"eimplemented from RooAbsPdf.; Definition at line 166 of file RooGamma.cxx. ◆ IsA(). TClass * RooGamma::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 51 of file RooGamma.h. ◆ Streamer(). void RooGamma::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooGamma::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file RooGamma.h. ◆ translate(). void RooGamma::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 90 of file RooGamma.cxx. Member Data Documentation. ◆ beta. RooRealProxy RooGamma::beta. protected . Definition at line 42 of file RooGamma.h. ◆ gamma. RooRealProxy RooGamma::gamma. protected . Definition at line 41 of file RooGamma.h. ◆ mu. RooRealProxy RooGamma::mu. protected . Definition at line 43 of file RooGamma.h. ◆ x. RooRealProxy RooGamma::x. protected . Definition at line 40 of file RooGamma.h. Libraries for RooGamma:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooGamma.h; roofit/roofit/src/RooGamma.cxx. RooGamma. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:80877,Guid,Guide,80877,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['Guid'],['Guide']
Usability,"eimplemented from TGCheckButton.; Definition at line 677 of file TGColorSelect.cxx. ◆ SetAlphaColor(). void TGColorSelect::SetAlphaColor ; (; ULong_t ; color, . Bool_t ; emit = kTRUE . ). Set color. ; Definition at line 666 of file TGColorSelect.cxx. ◆ SetColor(). void TGColorSelect::SetColor ; (; Pixel_t ; color, . Bool_t ; emit = kTRUE . ). Set color. ; Definition at line 654 of file TGColorSelect.cxx. ◆ SetDown(). void TGColorSelect::SetDown ; (; Bool_t ; on = kTRUE, . Bool_t ; emit = kFALSE . ). inlineoverridevirtual . Reimplemented from TGButton.; Definition at line 135 of file TGColorSelect.h. ◆ SetEnabled(). void TGColorSelect::SetEnabled ; (; Bool_t ; e = kTRUE). inlineoverridevirtual . Set enabled or disabled state of button. ; Reimplemented from TGButton.; Definition at line 137 of file TGColorSelect.h. ◆ Streamer(). void TGColorSelect::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCheckButton. ◆ StreamerNVirtual(). void TGColorSelect::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 147 of file TGColorSelect.h. Member Data Documentation. ◆ fColor. Pixel_t TGColorSelect::fColor. protected . color value of the button ; Definition at line 107 of file TGColorSelect.h. ◆ fColorPopup. TGColorPopup* TGColorSelect::fColorPopup. protected . color popup associated ; Definition at line 109 of file TGColorSelect.h. ◆ fDrawGC. TGGC TGColorSelect::fDrawGC. protected . drawing GC ; Definition at line 108 of file TGColorSelect.h. ◆ fPressPos. TGPosition TGColorSelect::fPressPos. protected . position of frame on button press event ; Definition at line 110 of file TGColorSelect.h. Libraries for TGColorSelect:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGColorSelect.h; gui/gui/src/TGColorSelect.cxx. TGColorSelect. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorSelect.html:44019,Guid,Guide,44019,doc/master/classTGColorSelect.html,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html,1,['Guid'],['Guide']
Usability,eimplemented from TIterator.; Definition at line 969 of file TObjArray.cxx. ◆ operator!=() [2/2]. Bool_t TObjArrayIter::operator!= ; (; const TObjArrayIter & ; aIter); const. This operator compares two TObjArrayIter objects. ; Definition at line 981 of file TObjArray.cxx. ◆ operator*(). TObject * TObjArrayIter::operator* ; (; ); const. overridevirtual . Return current object or nullptr. ; Reimplemented from TIterator.; Definition at line 989 of file TObjArray.cxx. ◆ operator=() [1/2]. TIterator & TObjArrayIter::operator= ; (; const TIterator & ; rhs). overridevirtual . Overridden assignment operator. ; Implements TIterator.; Definition at line 902 of file TObjArray.cxx. ◆ operator=() [2/2]. TObjArrayIter & TObjArrayIter::operator= ; (; const TObjArrayIter & ; rhs). Overloaded assignment operator. ; Definition at line 917 of file TObjArray.cxx. ◆ Reset(). void TObjArrayIter::Reset ; (; ). overridevirtual . Reset array iterator. ; Implements TIterator.; Definition at line 956 of file TObjArray.cxx. ◆ Streamer(). void TObjArrayIter::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TIterator. ◆ StreamerNVirtual(). void TObjArrayIter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 148 of file TObjArray.h. Member Data Documentation. ◆ fArray. const TObjArray* TObjArrayIter::fArray. private . Definition at line 120 of file TObjArray.h. ◆ fCurCursor. Int_t TObjArrayIter::fCurCursor. private . Definition at line 121 of file TObjArray.h. ◆ fCursor. Int_t TObjArrayIter::fCursor. private . Definition at line 122 of file TObjArray.h. ◆ fDirection. Bool_t TObjArrayIter::fDirection. private . Definition at line 123 of file TObjArray.h. Libraries for TObjArrayIter:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TObjArray.h; core/cont/src/TObjArray.cxx. TObjArrayIter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjArrayIter.html:7503,Guid,Guide,7503,doc/master/classTObjArrayIter.html,https://root.cern,https://root.cern/doc/master/classTObjArrayIter.html,1,['Guid'],['Guide']
Usability,"eimplemented in TQUndoManager.; Definition at line 360 of file TQCommand.cxx. ◆ CanCompress(). Bool_t TQCommand::CanCompress ; (; TQCommand * ; c); const. virtual . By default, commands can be compressed if they are: . equal; setter commands. More complicated commands might want to override this function. ; Definition at line 387 of file TQCommand.cxx. ◆ CanMerge(). Bool_t TQCommand::CanMerge ; (; TQCommand * ; c); const. virtual . Two commands can be merged if they can be composed into a single command (Macro command). ; To allow merging commands user might override this function. ; Definition at line 314 of file TQCommand.cxx. ◆ CanRedo(). Bool_t TQCommand::CanRedo ; (; ); const. virtual . Returns kTRUE if Redo action is possible, kFALSE if it's not. ; By default, only single sequential redo action is possible. ; Reimplemented in TQUndoManager.; Definition at line 571 of file TQCommand.cxx. ◆ CanUndo(). Bool_t TQCommand::CanUndo ; (; ); const. virtual . Returns kTRUE if Undo action is possible, kFALSE if it's not. ; By default, only single trial undo action is possible. ; Reimplemented in TQUndoManager.; Definition at line 580 of file TQCommand.cxx. ◆ Class(). static TClass * TQCommand::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TQCommand::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TQCommand::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 98 of file TQCommand.h. ◆ Compress(). void TQCommand::Compress ; (; TQCommand * ; c). virtual . Compress command. ; Compression is analogous to arithmetic ""addition operation"".; Note:; The compressed command will be deleted.; Execution Compress method invokes Redo action with new redo arguments inherited from compressed command. More complicated commands might want to override this function. ; Definition at line 402 of file TQCommand.cxx. ◆ DeclFileName(). static const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:35036,Undo,Undo,35036,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,"ejvirtual void SetOptRej(Int_t OptRej)Definition TFoam.h:120; TFoam::SetPseRanvirtual void SetPseRan(TRandom *PseRan)Definition TFoam.h:112; TFoam::SetnBinvirtual void SetnBin(Int_t nBin)Definition TFoam.h:118; TFoam::SetkDimvirtual void SetkDim(Int_t kDim)Definition TFoam.h:115; TFoam::GetWtParamsvirtual void GetWtParams(Double_t, Double_t &, Double_t &, Double_t &)May be called optionally after the MC run.Definition TFoam.cxx:1245; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Printvoid Print(Option_t *option="""") const overridePrint some global quantities for this histogram.Definition TH1.cxx:7009; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; ROOT::VecOps::expRVec< PromoteType< T > > exp(const RVec< T > &v)Definition RVec.hxx:1837; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; TMath::Sigmaconstexpr Double_t Sigma()Stefan-Boltzmann constant in : .Definition TMath.h:270; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; R1#define R1(v, w, x, y, z, i)Definition sha1.inl:134; R2#define R2(v, w, x, y, z, i)Definition sha1.inl:137; AuthorStascek Jadach ; Definition in file foam_demo.C. tutorialsfoamfoam_demo.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/foam__demo_8C.html:9143,Guid,Guide,9143,doc/master/foam__demo_8C.html,https://root.cern,https://root.cern/doc/master/foam__demo_8C.html,1,['Guid'],['Guide']
Usability,"el () const override;  ; Int_t GetVisOption () const override;  ; const char * GetVolumeInfo (const TGeoVolume *volume, Int_t px, Int_t py) const override;  Get some info about the current selected volume. ;  ; void GrabFocus (Int_t nfr=0, Double_t dlong=0, Double_t dlat=0, Double_t dpsi=0) override;  Move focus to current volume. ;  ; Bool_t IsExplodedView () const override;  ; Bool_t IsPaintingShape () const override;  ; Bool_t IsRaytracing () const override;  ; TH2F * LegoPlot (Int_t ntheta=60, Double_t themin=0., Double_t themax=180., Int_t nphi=90, Double_t phimin=0., Double_t phimax=360., Double_t rmin=0., Double_t rmax=9999999, Option_t *option="""") override;  Generate a lego plot fot the top volume, according to option. ;  ; void Lock (Bool_t flag=kTRUE);  ; void ModifiedPad (Bool_t update=kFALSE) const override;  Check if a pad and view are present and send signal ""Modified"" to pad. ;  ; void OpProgress (const char *opname, Long64_t current, Long64_t size, TStopwatch *watch=nullptr, Bool_t last=kFALSE, Bool_t refresh=kFALSE, const char *msg="""") override;  Text progress bar. ;  ; void Paint (Option_t *option="""") override;  Paint current geometry according to option. ;  ; void PaintNode (TGeoNode *node, Option_t *option="""", TGeoMatrix *global=nullptr) override;  Paint recursively a node and its content according to visualization options. ;  ; void PaintOverlap (void *ovlp, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintPhysicalNode (TGeoPhysicalNode *node, Option_t *option="""");  Paints a physical node associated with a path. ;  ; Bool_t PaintShape (const TGeoShape &shape, Option_t *option) const;  Paint the supplied shape into the current 3D viewer. ;  ; void PaintShape (TGeoShape *shape, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintVolume (TGeoVolume *vol, Option_t *option="""", TGeoMatrix *global=nullptr) override;  Paint recursively a node and its content according to visualization options. ;  ; void PrintOverlaps () const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:6276,progress bar,progress bar,6276,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['progress bar'],['progress bar']
Usability,"el branch is created for each element of the TObjArray.; If splitlevel = 2, one top level branch is created for each array element. If one of the array elements is a TCollection, one top level branch will be created for each element of this collection. In case a collection element is a TClonesArray, the special Tree constructor for TClonesArray is called. The collection itself cannot be a TClonesArray. If name is given, all branch names will be prefixed with name_.; IMPORTANT NOTE1: This function should not be called if splitlevel<1. IMPORTANT NOTE2: The branches created by this function will have names corresponding to the collection or object names. It is important to give names to collections to avoid misleading branch names or identical branch names. By default collections have a name equal to the corresponding class name, e.g. the default name of TList is “TList”.; 12.13 Examples for Writing and Reading Trees; The following sections are examples of writing and reading trees increasing in complexity from a simple tree with a few variables to a tree containing folders and complex Event objects. Each example has a named script in the $ROOTSYS/tutorials/tree directory. They are called tree1.C to tree4.C. The examples are:. tree1.C: a tree with several simple (integers and floating point) variables.; tree2.C: a tree built from a C structure (struct). This example uses the Geant3 C wrapper as an example of a FORTRAN common block ported to C with a C structure.; tree3.C: in this example, we will show how to extend a tree with a branch from another tree with the Friends feature. These trees have branches with variable length arrays. Each entry has a variable number of tracks, and each track has several variables.; tree4.C: a tree with a class (Event). The class Event is defined in $ROOTSYS/test. In this example we first encounter the impact of splitting a branch. Each script contains the main function, with the same name as the file (i.e. tree1), the function to write ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:550858,simpl,simple,550858,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"el than before.; 53 auto fullSpectrum =; 54 filteredEvents.Histo1D({""Spectrum"", ""Subset of CMS Run 2010B;#mu#mu mass [GeV];Events"", 1024, 2, 110}, ""m"");; 55 ; 56 // Next we will create the histogram for the J/psi particle, applying first; 57 // the corresponding cut.; 58 double jpsiLow = 2.95;; 59 double jpsiHigh = 3.25;; 60 auto jpsiCut = [jpsiLow, jpsiHigh](double m) { return m < jpsiHigh && m > jpsiLow; };; 61 auto jpsi =; 62 filteredEvents.Filter(jpsiCut, {""m""}); 63 .Histo1D({""jpsi"", ""Subset of CMS Run 2010B: J/#psi window;#mu#mu mass [GeV];Events"", 128, jpsiLow, jpsiHigh},; 64 ""m"");; 65 ; 66 // Finally we draw the two histograms side by side.; 67 auto dualCanvas = new TCanvas(""DualCanvas"", ""DualCanvas"", 800, 512);; 68 dualCanvas->Divide(2, 1);; 69 auto leftPad = dualCanvas->cd(1);; 70 leftPad->SetLogx();; 71 leftPad->SetLogy();; 72 fullSpectrum->DrawClone(""Hist"");; 73 dualCanvas->cd(2);; 74 jpsi->SetMarkerStyle(20);; 75 jpsi->DrawClone(""HistP"");; 76 ; 77 return 0;; 78}; c#define c(i)Definition RSha256.hxx:101; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558; df014_CSVDataSourceDefinition df014_CSVDataSource.py:1; mTMarker mDefinition textangle.C:8. tutorialsdataframedf014_CSVDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df014__CSVDataSource_8C_source.html:4470,Guid,Guide,4470,doc/master/df014__CSVDataSource_8C_source.html,https://root.cern,https://root.cern/doc/master/df014__CSVDataSource_8C_source.html,1,['Guid'],['Guide']
Usability,"el(3,-1,0.);; ; // 5th label is drawn with an angle of 30 degrees; axis->ChangeLabel(5,30.,-1,0);; ; // Change the text of the 6th label.; axis->ChangeLabel(6,-1,-1,-1,kGreen,-1,""6th label"");; ; // Change the text of the 2nd label to the end.; axis->ChangeLabel(-2,-1,-1,-1,kGreen,-1,""2nd to last label"");; ; // Change the text of value 30 by ""value of 30""; axis->ChangeLabelByValue(30.,-1,-1,-1,kBlue,-1,""value of 30"");; ; ; axis->Draw();; }; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvasThe Canvas class.Definition TCanvas.h:23; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTitleSizevoid SetTitleSize(Float_t titlesize)Definition TGaxis.h:129; TGaxis::SetTitleFontvoid SetTitleFont(Int_t titlefont)Definition TGaxis.h:130; TGaxis::SetTitlevirtual void SetTitle(const char *title="""")Change the title of the axis.Definition TGaxis.cxx:2942; TGaxis::ChangeLabelByValuevoid ChangeLabelByValue(Double_t labValue, Double_t labAngle=-1., Double_t labSize=-1., Int_t labAlign=-1, Int_t labColor=-1, Int_t labFont=-1, const TString &labText="""")Define new text attributes for the label value ""labValue"".Definition TGaxis.cxx:2813; TGaxis::SetTitleColorvoid SetTitleColor(Int_t titlecolor)Definition TGaxis.h:131; TGaxis::ChangeLabelvoid ChangeLabel(Int_t labNum=0, Double_t labAngle=-1., Double_t labSize=-1., Int_t labAlign=-1, Int_t labColor=-1, Int_t labFont=-1, const TString &labText="""")Define new text attributes for the label number ""labNum"".Definition TGaxis.cxx:2734; TGaxis::SetNamevirtual void SetName(const char *name)Change the name of the axis.Definition TGaxis.cxx:2904; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; c1return c1Definition legend1.C:41; AuthorOlivier Couet ; Definition in file gaxis3.C. tutorialsgraphicsgaxis3.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gaxis3_8C.html:2971,Guid,Guide,2971,doc/master/gaxis3_8C.html,https://root.cern,https://root.cern/doc/master/gaxis3_8C.html,1,['Guid'],['Guide']
Usability,"el*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update que",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:21102,feedback,feedback,21102,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,2,['feedback'],['feedback']
Usability,"el*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionQueryFrame.html:21377,feedback,feedback,21377,root/html532/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html532/TSessionQueryFrame.html,1,['feedback'],['feedback']
Usability,"el, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_t_debug; TFile*_refFile; list<std::pair<RooPlot*,std::string> >_regPlots; list<std::pair<RooFitResult*,std::string> >_regResults; list<std::pair<TH1*,std::string> >_regTH; list<std::pair<RooTable*,std::string> >_regTables; list<std::pair<Double_t,std::string> >_regValues; list<std::pair<RooWorkspace*,std::string> >_regWS; Int_t_verb; Bool_t_write; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; static TDirectory*gMemDir. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooUnitTest(). void regPlot(RooPlot* frame, const char* refName). void regResult(RooFitResult* r, const char* refName). void regValue(Double_t value, const char* refName). void regTable(RooTable* t, const char* refName). void regWS(RooWorkspace* ws, const char* refName). void regTH(TH1* h, const char* refName). RooWorkspace* getWS(const char* refName). Bool_t areTHidentical(TH1* htest, TH1* href). Bool_t runCompTests(). void setSilentMode(). void clearSilentMode(). Bool_t runTest(). void setMemDir(TDirectory* memDir); Set gMemDir to memDir. void setDebug(Bool_t flag); { _debug = flag ; }. Bool_t isTestAvailable(); { return kTRUE ; }. Bool_t testCode(). Double_t htol(); { return 5e-4 ; }. Double_t ctol(); { return 2e-3 ; }. Double_t fptol(); { return 1e-3 ; }. Double_t fctol(); { return 1e-3 ; }. Double_t vtol(); { return 1e-3 ; }. » Last changed: Tue Mar 10 17:21:08 2015 » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnitTest.html:7683,clear,clearSilentMode,7683,root/html534/RooUnitTest.html,https://root.cern,https://root.cern/root/html534/RooUnitTest.html,1,['clear'],['clearSilentMode']
Usability,"el.Definition RNTupleImporter.hxx:191; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::RImportLeafCountCollectionRImportLeafCountCollection(const RImportLeafCountCollection &other)=delete; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::RImportLeafCountCollectionRImportLeafCountCollection()=default; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::operator=RImportLeafCountCollection & operator=(RImportLeafCountCollection &&other)=default; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::fLeafBranchIndexesstd::vector< size_t > fLeafBranchIndexesPoints to the correspondings leaf branches in fImportBranches.Definition RNTupleImporter.hxx:190; ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection::fCountValstd::unique_ptr< Int_t > fCountValThe number of elements for the collection for a particular event.Definition RNTupleImporter.hxx:185; ROOT::Experimental::RNTupleImporter::RImportTransformationBase class to perform data transformations from TTree branches to RNTuple fields if necessary.Definition RNTupleImporter.hxx:146; ROOT::Experimental::RNTupleImporter::RImportTransformation::fImportFieldIdxstd::size_t fImportFieldIdxDefinition RNTupleImporter.hxx:148; ROOT::Experimental::RNTupleImporter::RImportTransformation::~RImportTransformationvirtual ~RImportTransformation()=default; ROOT::Experimental::RNTupleImporter::RImportTransformation::fImportBranchIdxstd::size_t fImportBranchIdxDefinition RNTupleImporter.hxx:147; ROOT::Experimental::RNTupleImporter::RImportTransformation::Transformvirtual RResult< void > Transform(const RImportBranch &branch, RImportField &field)=0; ROOT::Experimental::RNTupleImporter::RImportTransformation::RImportTransformationRImportTransformation(std::size_t branchIdx, std::size_t fieldIdx)Definition RNTupleImporter.hxx:150. treentupleutilv7incROOTRNTupleImporter.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:28597,Guid,Guide,28597,doc/master/RNTupleImporter_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html,1,['Guid'],['Guide']
Usability,"el; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Mali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGInputDialog.html:22100,simpl,simple,22100,root/html528/TGInputDialog.html,https://root.cern,https://root.cern/root/html528/TGInputDialog.html,4,['simpl'],['simple']
Usability,"elSize(h->GetZaxis()->GetLabelSize());; 4520 palette->SetTitleOffset(h->GetZaxis()->GetTitleOffset());; 4521 palette->SetTitleSize(h->GetZaxis()->GetTitleSize());; 4522 palette->SetNdivisions(h->GetZaxis()->GetNdivisions());; 4523 palette->SetTitle(h->GetZaxis()->GetTitle());; 4524 palette->SetTitleColor(h->GetZaxis()->GetTitleColor());; 4525 palette->SetTitleFont(h->GetZaxis()->GetTitleFont());; 4526 ; 4527 functions->AddFirst(palette);; 4528 }; 4529 if (palette) palette->Paint();; 4530 }; 4531 ; 4532 // Draw markers; 4533 auto nbcol = gStyle->GetNumberOfColors();; 4534 int logx = gPad->GetLogx();; 4535 int logy = gPad->GetLogy();; 4536 int logz = gPad->GetLogz();; 4537 if (theColor && logz) {; 4538 if (minc>0) minc = log10(minc);; 4539 if (maxc>0) maxc = log10(maxc);; 4540 }; 4541 theScatter->SetMarkerColor(theScatter->GetMarkerColor());; 4542 theScatter->TAttMarker::Modify();; 4543 double x,y,c,ms;; 4544 int nc;; 4545 for (int i=0; i<n; i++) {; 4546 if (theColor) {; 4547 if (logz) {; 4548 if (theColor[i]>0) c = log10(theColor[i]);; 4549 else continue;; 4550 } else {; 4551 c = theColor[i];; 4552 }; 4553 if (c<minc) continue;; 4554 if (c>maxc) continue;; 4555 nc = TMath::Nint(((c-minc)/(maxc-minc))*(nbcol-1));; 4556 if (nc > nbcol-1) nc = nbcol-1;; 4557 theScatter->SetMarkerColor(gStyle->GetColorPalette(nc));; 4558 }; 4559 if (theSize) {; 4560 ms = (MaxMarkerSize-MinMarkerSize)*((theSize[i]-mins)/(maxs-mins))+MinMarkerSize;; 4561 theScatter->SetMarkerSize(ms);; 4562 }; 4563 if (theColor || theSize) theScatter->TAttMarker::Modify();; 4564 if (logx) {; 4565 if (theX[i]>0) x = log10(theX[i]);; 4566 else break;; 4567 } else {; 4568 x = theX[i];; 4569 }; 4570 if (logy) {; 4571 if (theY[i]>0) y = log10(theY[i]);; 4572 else break;; 4573 } else {; 4574 y = theY[i];; 4575 }; 4576 gPad->PaintPolyMarker(1,&x,&y);; 4577 }; 4578}; 4579 ; 4580 ; 4581////////////////////////////////////////////////////////////////////////////////; 4582/// Paint a simple graph, without errors bars.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:161199,simpl,simple,161199,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"el_t back = GetDefaultFrameBackground()); virtual~TGMdiMainFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCanvas::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidArrangeFrames(Int_t mode); virtual voidArrangeMinimized(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidCascade(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); virtual voidCirculateDown(); virtual voidCirculateUp(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGCanvas::ClearViewPort(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tClose(TGMdiFrame* frame); virtual voidCloseAll(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; voidConfigureWindow(TGMdiFrame* f, TGMdiGeometry& geom); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual Int_tContextHelp(TGMdiFrame* frame); virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMdiMainFrame.html:1488,Clear,ClearViewPort,1488,root/html528/TGMdiMainFrame.html,https://root.cern,https://root.cern/root/html528/TGMdiMainFrame.html,4,['Clear'],['ClearViewPort']
Usability,"eld() when recreating a field / model from the stored descriptor. ; Definition at line 179 of file RFieldBase.hxx. ◆ fOnDiskTypeChecksum. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeChecksum = 0. protected . TClass checksum cached from the descriptor after a call to ConnectPageSource(). ; Only set for classes with dictionaries. ; Definition at line 246 of file RFieldBase.hxx. ◆ fOnDiskTypeVersion. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeVersion = kInvalidTypeVersion. protected . C++ type version cached from the descriptor after a call to ConnectPageSource() ; Definition at line 243 of file RFieldBase.hxx. ◆ fParent. RFieldBase* ROOT::Experimental::RFieldBase::fParent. protected . Sub fields point to their mother field. ; Definition at line 222 of file RFieldBase.hxx. ◆ fPrincipalColumn. Internal::RColumn* ROOT::Experimental::RFieldBase::fPrincipalColumn = nullptr. protected . All fields that have columns have a distinct main column. ; E.g., for simple fields (float, int, ...), the principal column corresponds to the field type. For collection fields except fixed-sized arrays, the main column is the offset field. Class fields have no column of their own. When reading, points to any column of the column team of the active representation. Usually, this is just the first column. When writing, points to the first column index of the currently active (not suppressed) column representation. ; Definition at line 229 of file RFieldBase.hxx. ◆ fReadCallbacks. std::vector<ReadCallback_t> ROOT::Experimental::RFieldBase::fReadCallbacks. protected . List of functions to be called after reading a value. ; Definition at line 241 of file RFieldBase.hxx. ◆ fState. EState ROOT::Experimental::RFieldBase::fState = EState::kUnconnected. private . Changed by ConnectTo[Sink,Source], reset by Clone() ; Definition at line 183 of file RFieldBase.hxx. ◆ fStructure. ENTupleStructure ROOT::Experimental::RFieldBase::fStructure. private . The role of this field in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:56277,simpl,simple,56277,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['simpl'],['simple']
Usability,"elds. ;  . Constructor & Destructor Documentation. ◆ RImportField() [1/3]. ROOT::Experimental::RNTupleImporter::RImportField::RImportField ; (; ). default . ◆ ~RImportField(). ROOT::Experimental::RNTupleImporter::RImportField::~RImportField ; (; ). default . ◆ RImportField() [2/3]. ROOT::Experimental::RNTupleImporter::RImportField::RImportField ; (; const RImportField & ; other). delete . ◆ RImportField() [3/3]. ROOT::Experimental::RNTupleImporter::RImportField::RImportField ; (; RImportField && ; other). default . Member Function Documentation. ◆ operator=() [1/2]. RImportField & ROOT::Experimental::RNTupleImporter::RImportField::operator= ; (; const RImportField & ; other). delete . ◆ operator=() [2/2]. RImportField & ROOT::Experimental::RNTupleImporter::RImportField::operator= ; (; RImportField && ; other). default . Member Data Documentation. ◆ fField. RFieldBase* ROOT::Experimental::RNTupleImporter::RImportField::fField = nullptr. The field is kept during schema preparation and transferred to the fModel before the writing starts. ; Definition at line 140 of file RNTupleImporter.hxx. ◆ fFieldBuffer. void* ROOT::Experimental::RNTupleImporter::RImportField::fFieldBuffer = nullptr. Usually points to the corresponding RImportBranch::fBranchBuffer but not always. ; Definition at line 142 of file RNTupleImporter.hxx. ◆ fValue. std::unique_ptr<RFieldBase::RValue> ROOT::Experimental::RNTupleImporter::RImportField::fValue. Set if a value is generated, only for transformed fields. ; Definition at line 141 of file RNTupleImporter.hxx. Collaboration diagram for ROOT::Experimental::RNTupleImporter::RImportField:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx. ROOTExperimentalRNTupleImporterRImportField. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportField.html:2976,Guid,Guide,2976,doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportField.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportField.html,1,['Guid'],['Guide']
Usability,"elected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; TVirtualGLPainter&TVirtualGLPainter::operator=(const TVirtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TGraph* g, Double_t z); Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TMultiGraph* mg, Double_t z); Bool_tCacheGeometry(); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawCap(TGLH2PolyPainter::CIter_t cap, Int_t bin) const; voidDrawCaps() const; voidDrawExtrusion() const; voidDrawExtrusion(const TGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawExtrusion(const TMultiGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFillTemporaryP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLH2PolyPainter.html:1368,Clear,ClearBuffers,1368,root/html528/TGLH2PolyPainter.html,https://root.cern,https://root.cern/root/html528/TGLH2PolyPainter.html,1,['Clear'],['ClearBuffers']
Usability,"elected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; TVirtualGLPainter&TVirtualGLPainter::operator=(const TVirtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. voidClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawContoursProjection() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; voidDrawProjections() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidGenTexMap() const; Bool_tHasProjections() const; Bool_tHasSections() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; Bool_tPreparePalette() const; voidSetNormals(); voidSetSurfaceColor() const; Bool_tTextured() const; char*WindowPointTo3DPoint(Int_t px, Int_t py) const. Data Members; public:. enum ESurfaceType { kSurf; kSurf1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSurfacePainter.html:1420,Clear,ClearBuffers,1420,root/html528/TGLSurfacePainter.html,https://root.cern,https://root.cern/root/html528/TGLSurfacePainter.html,1,['Clear'],['ClearBuffers']
Usability,"elected(). void TGCheckButton::SetDisabledAndSelected ; (; Bool_t ; enable). virtual . Set the state of a check button to disabled and either on or off. ; Definition at line 1310 of file TGButton.cxx. ◆ SetState(). void TGCheckButton::SetState ; (; EButtonState ; state, . Bool_t ; emit = kFALSE . ). overridevirtual . Set check button state. ; Reimplemented from TGButton.; Definition at line 1250 of file TGButton.cxx. ◆ Streamer(). void TGCheckButton::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGButton.; Reimplemented in TGColorSelect. ◆ StreamerNVirtual(). void TGCheckButton::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 317 of file TGButton.h. Member Data Documentation. ◆ fDisOff. const TGPicture* TGCheckButton::fDisOff. protected . button disabled and was OFF picture ; Definition at line 276 of file TGButton.h. ◆ fDisOn. const TGPicture* TGCheckButton::fDisOn. protected . button disabled and was ON picture ; Definition at line 275 of file TGButton.h. ◆ fgDefaultFont. const TGFont * TGCheckButton::fgDefaultFont = nullptr. staticprotected . Definition at line 283 of file TGButton.h. ◆ fgDefaultGC. const TGGC * TGCheckButton::fgDefaultGC = nullptr. staticprotected . Definition at line 284 of file TGButton.h. ◆ fOff. const TGPicture* TGCheckButton::fOff. protected . button OFF picture ; Definition at line 274 of file TGButton.h. ◆ fOn. const TGPicture* TGCheckButton::fOn. protected . button ON picture ; Definition at line 273 of file TGButton.h. ◆ fPrevState. EButtonState TGCheckButton::fPrevState. protected . previous check button state ; Definition at line 272 of file TGButton.h. Libraries for TGCheckButton:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGButton.h; gui/gui/src/TGButton.cxx. TGCheckButton. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCheckButton.html:44427,Guid,Guide,44427,doc/master/classTGCheckButton.html,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html,1,['Guid'],['Guide']
Usability,"elegate to gVirtualX. Float_t GetTextMagnitude() const; Delegate to gVirtualX. void SetTextAlign(Short_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadPainter.html:5900,simpl,simple,5900,root/html602/TPadPainter.html,https://root.cern,https://root.cern/root/html602/TPadPainter.html,1,['simpl'],['simple']
Usability,"elegate to gVirtualX. Float_t GetTextMagnitude() const; Delegate to gVirtualX. void SetTextAlign(Short_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint Polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadPainter.html:5900,simpl,simple,5900,root/html604/TPadPainter.html,https://root.cern,https://root.cern/root/html604/TPadPainter.html,1,['simpl'],['simple']
Usability,"element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer ; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform command line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TTeXDump Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:135007,simpl,simple,135007,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['simpl'],['simple']
Usability,"elete); virtual voidSetOnFileClass(TClass* cl); virtual voidSetValueClass(TClass* newcl); virtual UInt_tSize() const; virtual UInt_tSizeof() const; virtual voidStreamer(TBuffer& refBuffer); virtual voidStreamer(TBuffer& refBuffer, void* pObject, int siz). protected:. voidCheckFunctions() const; virtual voidDeleteItem(Bool_t force, void* ptr) const; TGenCollectionProxy*Initialize(Bool_t silent) const; virtual TGenCollectionProxy*InitializeEx(Bool_t silent). private:. TGenCollectionProxy(). Data Members; public:. enum { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; kNeedDelete; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodfClearMethod cache for container accessors: clear container; TGenCollectionProxy::MethodfCollectMethod to collect objects from container; void*fConstructContainer accessors: block construct; map<std::string,TObjArray*>*fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0fCreateEnvMethod to allocate an Environment holder.; void*fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*fEnvAddress of the currently proxied object; void*fFeedContainer accessors: block feed; TGenCollectionProxy::MethodfFirstContainer accessors: generic iteration: first; void*fFunctionCreateIterators; void*fFunctionDeleteTwoIterators; TGenCollectionProxy::Value*fKeyDescriptor of the key_type; stringfNameName of the class being proxied.; TGenCollectionProxy::MethodfNextContainer accessors: generic iteration: next; TClass*fOnFileClassOn file class; Bool_tfPointersFlag to indicate if containee has pointers (key or value); UInt_tTVirtualCollectionProxy::fProperties; vector<ROOT::TCollectionProxyInfo::EnvironBase*,allocator<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGenCollectionProxy.html:3888,clear,clear,3888,root/html532/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html532/TGenCollectionProxy.html,1,['clear'],['clear']
Usability,"eleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/SimpleInterval.h>. Inheritance diagram for RooStats::SimpleInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SimpleInterval() [1/3]. SimpleInterval::SimpleInterval ; (; const char * ; name = nullptr). explicit . default constructor ; Default constructor. ; Definition at line 42 of file SimpleInterval.cxx. ◆ SimpleInterval() [2/3]. SimpleInterval::SimpleInterval ; (; const SimpleInterval & ; other, . const char * ; name . ). default constructor ; fParameters.add( other.fParameters ); ; Definition at line 51 of file SimpleInterval.cxx. ◆ SimpleInterval() [3/3]. SimpleInterval::SimpleInterval ; (; const char * ; name, . const RooRealVar & ; var, . double ; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:13122,Simpl,SimpleInterval,13122,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"eleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:16984,Undo,Undo,16984,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,16,"['Undo', 'undo']","['Undo', 'undo', 'undoing']"
Usability,"eleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TDocOutput::EFileTypekSource; static TDocOutput::EFileTypekTree; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. THtml*fHtmlTHtml object we belong to; static TDocOutput::EGraphvizToolkCirco; static TDocOutput::EGraphvizToolkDot; static TDocOutput::EGraphvizToolkFdp; static TDocOutput::EGraphvizToolkNeato. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDocOutput(THtml& html); {}. ~TDocOutput(); {}. void AddLink(TSubString& str, TString& link, const char* comment); Add a link around str, with title comment.; Update str so it surrounds the link. void AdjustSourcePath(TString& line, const char* relpath = ""../""); adjust the path of links for source files, which are in src/, but need; to point to relpath (usually ""../""). Simply replaces ""=\""./"" by ""=\""../"". void Convert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); Convert a text file into a html file.; outfilename doesn't have an extension yet; up to us to decide.; We generate HTML, so our extension is "".html"".; See THtml::Convert() for the other parameters. Bool_t CopyHtmlFile(const char* sourceName, const char* destName = """"); Copy file to HTML directory. Input: sourceName - source file name (fully qualified i.e. file system path); destName - optional destination name, if not; specified it would be the same; as the source file name. Output: TRUE if file is successfully copied, or; FALSE if it's not. NOTE: The destination directory is always fHtml->GetOutputDir(). void CreateHierarchy(); Create a hierarchical class list; The algorithm descends from the base classes and branches into; all derived classes. Mixing classes are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocOutput.html:9851,Simpl,Simply,9851,root/html602/TDocOutput.html,https://root.cern,https://root.cern/root/html602/TDocOutput.html,2,['Simpl'],['Simply']
Usability,"elf. In case the object member is a TClonesArray,; the mechanism described in case C is applied to this array.; if splitlevel=0, the object is serialized in the branch buffer. ==> Case C. TBranch *branch = tree->Branch(branchname,clonesarray, bufsize, splitlevel); clonesarray is the address of a pointer to a TClonesArray.; The TClonesArray is a direct access list of objects of the same class.; For example, if the TClonesArray is an array of TTrack objects,; this function will create one subbranch for each data member of; the object TTrack. ==> branch->SetAddress(Void *address); In case of dynamic structures changing with each entry for example, one must; redefine the branch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with only one branch). /*. */. A simple example with histograms and a tree*-*-*-; *-* ===========================================. This program creates :; - a one dimensional histogram; - a two dimensional histogram; - a profile histogram; - a tree. These objects are filled with some random numbers and saved on a file. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h"". //______________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");. // Create some histograms and a profile histogram; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:4395,simpl,simple,4395,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['simpl'],['simple']
Usability,"ellow, kPink, etc are defined in the header file; 147Rtypes.h that is included in all ROOT other header files. It is better; 148to use these keywords in user code instead of hardcoded color numbers, e.g.:; 149 ; 150~~~ {.cpp}; 151 myObject.SetFillColor(kRed);; 152 myObject.SetFillColor(kYellow-10);; 153 myLine.SetLineColor(kMagenta+2);; 154~~~; 155 ; 156Begin_Macro(source); 157{; 158 auto w = new TColorWheel();; 159 auto cw = new TCanvas(""cw"",""cw"",0,0,400,400);; 160 w->SetCanvas(cw);; 161 w->Draw();; 162}; 163End_Macro; 164 ; 165The complete list of predefined color names is the following:; 166 ; 167~~~ {.cpp}; 168kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; 169kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; 170kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; 171~~~; 172 ; 173Note the special role of color `kWhite` (color number 0). It is the default; 174background color also. For instance in a PDF or PS files (as paper is usually white); 175it is simply not painted. To have a white color behaving like the other color the; 176simplest is to define an other white color not attached to the color index 0:; 177 ; 178~~~ {.cpp}; 179 Int_t ci = TColor::GetFreeColorIndex();; 180 TColor *color = new TColor(ci, 1., 1., 1.);; 181~~~; 182 ; 183\anchor C03; 184## Bright and dark colors; 185Dark and bright colors are used to add 3D effects to graphical objects like; 186TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots.; 187 ; 188Two static functions are available that return the bright or dark color number corresponding; 189to a given color index. If these variants don't already exist, they are created as needed:; 190~~~ {.cpp}; 191 Int_t dark = TColor::GetColorDark(color_index);; 192 Int_t bright = TColor::GetColorBright(color_index);; 193~~~; 194 ; 195\anchor C031; 196## Accessible Color Schemes; 197Choosing an appropriate color scheme is essential for making results easy to understand and; 198i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:5874,simpl,simply,5874,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['simpl'],['simply']
Usability,"elope:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Envelope(). Envelope::Envelope ; (; const TString & ; name, . DataLoader * ; dataloader = nullptr, . TFile * ; file = nullptr, . const TString ; options = """" . ). protected . Constructor for the initialization of Envelopes, differents Envelopes may needs differents constructors then this is a generic one protected. ; Parameters. namethe name algorithm. ; dataloaderTMVA::DataLoader object with the data. ; fileoptional file to save the results. ; optionsextra options for the algorithm. . Definition at line 40 of file Envelope.cxx. ◆ ~Envelope(). Envelope::~Envelope ; (; ). Default destructor. ; Definition at line 62 of file Envelope.cxx. Member Function Documentation. ◆ BookMethod() [1/2]. void TMVA::Envelope::BookMethod ; (; TString ; methodName, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodNameString with the name of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 163 of file Envelope.cxx. ◆ BookMethod() [2/2]. void TMVA::Envelope::BookMethod ; (; Types::EMVA ; method, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodenum TMVA::Types::EMVA with the type of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 152 of file Envelope.cxx. ◆ Class(). static TClass * TMVA::Envelope::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Envelope::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Envelope::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Envelope.html:17952,learn,learning,17952,doc/master/classTMVA_1_1Envelope.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html,1,['learn'],['learning']
Usability,"elper class for TFormula. ; Definition at line 64 of file TFormula.h. Public Member Functions;  TFormulaVariable ();  ;  TFormulaVariable (const TString &name, Double_t value, Int_t pos);  ; Int_t GetArrayPos () const;  ; Double_t GetInitialValue () const;  ; const char * GetName () const;  ; Bool_t operator< (const TFormulaVariable &rhv) const;  . Public Attributes; Int_t fArrayPos;  ; Bool_t fFound;  ; TString fName;  ; Double_t fValue;  . #include <v5/TFormula.h>; Constructor & Destructor Documentation. ◆ TFormulaVariable() [1/2]. TFormulaVariable::TFormulaVariable ; (; ). inline . Definition at line 74 of file TFormula.h. ◆ TFormulaVariable() [2/2]. TFormulaVariable::TFormulaVariable ; (; const TString & ; name, . Double_t ; value, . Int_t ; pos . ). inline . Definition at line 75 of file TFormula.h. Member Function Documentation. ◆ GetArrayPos(). Int_t TFormulaVariable::GetArrayPos ; (; ); const. inline . Definition at line 73 of file TFormula.h. ◆ GetInitialValue(). Double_t TFormulaVariable::GetInitialValue ; (; ); const. inline . Definition at line 72 of file TFormula.h. ◆ GetName(). const char * TFormulaVariable::GetName ; (; ); const. inline . Definition at line 71 of file TFormula.h. ◆ operator<(). Bool_t TFormulaVariable::operator< ; (; const TFormulaVariable & ; rhv); const. inline . Definition at line 77 of file TFormula.h. Member Data Documentation. ◆ fArrayPos. Int_t TFormulaVariable::fArrayPos. Definition at line 69 of file TFormula.h. ◆ fFound. Bool_t TFormulaVariable::fFound. Definition at line 70 of file TFormula.h. ◆ fName. TString TFormulaVariable::fName. Definition at line 67 of file TFormula.h. ◆ fValue. Double_t TFormulaVariable::fValue. Definition at line 68 of file TFormula.h. Libraries for TFormulaVariable:. [legend]; The documentation for this class was generated from the following file:; hist/hist/inc/v5/TFormula.h. TFormulaVariable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormulaVariable.html:2181,Guid,Guide,2181,doc/master/classTFormulaVariable.html,https://root.cern,https://root.cern/doc/master/classTFormulaVariable.html,1,['Guid'],['Guide']
Usability,"els ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hlHisto1.CThis tutorial demonstrates how the highlight mechanism can be used on an histogram ;  hlHisto2.CThis tutorial demonstrates how the highlight mechanism can be used on an histogram ;  hlHisto3.CThis tutorial demonstrates how the highlight mechanism can be used on a ntuple ;  hlHisto4.CThis tutorial demonstrates how the highlight mechanism can be used on an histogram ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  legendautoplaced.C The legend can be placed automatically in the current pad in an empty space found at painting time ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot1.py Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot2.py Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot3.py Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot4.py Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot5.py Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplot6.py Exa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:127721,simpl,simple,127721,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,"else; 1707 return kVectorLooper;; 1708 } else if (proxy.GetCollectionType() == ROOT::kSTLset || proxy.GetCollectionType() == ROOT::kSTLunorderedset; 1709 || proxy.GetCollectionType() == ROOT::kSTLmultiset || proxy.GetCollectionType() == ROOT::kSTLunorderedmultiset; 1710 || proxy.GetCollectionType() == ROOT::kSTLmap || proxy.GetCollectionType() == ROOT::kSTLmultimap; 1711 || proxy.GetCollectionType() == ROOT::kSTLunorderedmap || proxy.GetCollectionType() == ROOT::kSTLunorderedmultimap; 1712 || proxy.GetCollectionType() == ROOT::kSTLbitset) {; 1713 return kAssociativeLooper;; 1714 } else {; 1715 return kGenericLooper;; 1716 }; 1717 }; 1718 ; 1719 struct VectorLooper {; 1720 ; 1721 template <typename T>; 1722 static INLINE_TEMPLATE_ARGS Int_t ReadBasicType(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1723 {; 1724 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1725 iter = (char*)iter + config->fOffset;; 1726 end = (char*)end + config->fOffset;; 1727 for(; iter != end; iter = (char*)iter + incr ) {; 1728 T *x = (T*) ((char*) iter);; 1729 buf >> *x;; 1730 }; 1731 return 0;; 1732 }; 1733 ; 1734 template <typename From, typename To>; 1735 struct ConvertBasicType {; 1736 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1737 {; 1738 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1739 From temp;; 1740 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1741 iter = (char*)iter + config->fOffset;; 1742 end = (char*)end + config->fOffset;; 1743 for(; iter != end; iter = (char*)iter + incr ) {; 1744 buf >> temp;; 1745 *(To*)( ((char*)iter) ) = (To)temp;; 1746 }; 1747 return 0;; 1748 }; 1749 };; 1750 ; 1751 template <typename To>; 1752 struct ConvertBasicType<BitsMarker,To> {; 1753 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:72467,Simpl,Simple,72467,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"elta function. ; Reimplemented from RooAbsPdf.; Definition at line 534 of file RooTruthModel.cxx. ◆ getAnalyticalIntegral(). Int_t RooTruthModel::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Advertise analytical integrals for compiled basis functions and when used as p.d.f without basis function. ; Reimplemented from RooAbsReal.; Definition at line 315 of file RooTruthModel.cxx. ◆ getGenerator(). Int_t RooTruthModel::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Advertise internal generator for observable x. ; Reimplemented from RooAbsPdf.; Definition at line 521 of file RooTruthModel.cxx. ◆ IsA(). TClass * RooTruthModel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooResolutionModel.; Definition at line 48 of file RooTruthModel.h. ◆ modelGenContext(). RooAbsGenContext * RooTruthModel::modelGenContext ; (; const RooAbsAnaConvPdf & ; convPdf, . const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overridevirtual . Reimplemented from RooResolutionModel.; Definition at line 508 of file RooTruthModel.cxx. ◆ Streamer(). void RooTruthModel::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooResolutionModel. ◆ StreamerNVirtual(). void RooTruthModel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file RooTruthModel.h. Libraries for RooTruthModel:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooTruthModel.h; roofit/roofitcore/src/RooTruthModel.cxx. RooTruthModel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:80681,Guid,Guide,80681,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,1,['Guid'],['Guide']
Usability,"ely.Definition TMultiGraph.cxx:1377; TMultiGraph::GetGraphDrawOptionvirtual Option_t * GetGraphDrawOption(const TGraph *gr) constReturn the draw option for the TGraph gr in this TMultiGraph.Definition TMultiGraph.cxx:740; TMultiGraph::GetYaxisTAxis * GetYaxis()Get y axis of the graph.Definition TMultiGraph.cxx:1119; TMultiGraph::InitGausvirtual void InitGaus(Double_t xmin, Double_t xmax)Compute Initial values of parameters for a gaussian.Definition TMultiGraph.cxx:755; TMultiGraph::IsInsidevirtual Int_t IsInside(Double_t x, Double_t y) constReturn 1 if the point (x,y) is inside one of the graphs 0 otherwise.Definition TMultiGraph.cxx:989; TMultiGraph::GetListOfFunctionsTList * GetListOfFunctions()Return pointer to list of functions.Definition TMultiGraph.cxx:1096; TMultiGraph::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Set multigraph maximum.Definition TMultiGraph.cxx:1632; TMultiGraph::PaintReversevoid PaintReverse(Option_t *chopt="""")Paint all the graphs of this multigraph reverting values along X and/or Y axis.Definition TMultiGraph.cxx:1518; TMultiGraph::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TMultiGraph.cxx:1593; TMultiGraph::fFunctionsTList * fFunctionsPointer to list of functions (fits and user)Definition TMultiGraph.h:38; TMultiGraph::GetXaxisTAxis * GetXaxis()Get x axis of the graph.Definition TMultiGraph.cxx:1107; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; grTGraphErrors * grDefinition legend1.C:25; f1TF1 * f1Definition legend1.C:11; graphDefinition graph.py:1; Drawth1 Draw(); mTMarker mDefinition textangle.C:8. histhistincTMultiGraph.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8h_source.html:10683,Guid,Guide,10683,doc/master/TMultiGraph_8h_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8h_source.html,1,['Guid'],['Guide']
Usability,"em path; TGFileBrowser File browser.; TGFileContainer Container containing file system objects; TGFileDialog File selection dialog; TGFileInfo ; TGFileItem Class representing file system object; TGFont GUI font description; TGFontDialog Font selection dialog; TGFontDialog::FontProp_t ; TGFontPool Font pool; TGFontTypeComboBox Font type combobox widget; TGFrame Base class for simple widgets (button, etc.); TGFrameElement Base class used in GUI containers; TGFrameElementPack Class used in TGPack.; TGGC Graphics context; TGGCPool Graphics context pool; TGGotoDialog Goto line dialog used by TGTextEdit widget; TGGroupFrame A composite frame with border and title; TGHButtonGroup A button group with one horizontal row; TGHProgressBar Horizontal progress bar widget; TGHScrollBar Horizontal scrollbar widget; TGHSlider Horizontal slider widget; TGHSplitter A horizontal frame splitter; TGHeaderFrame Header frame with buttons and splitters; TGHorizontal3DLine A horizontal 3D separator line; TGHorizontalFrame Composite frame with horizontal child layout; TGHorizontalLayout Horizontal layout manager; TGHotString Graphics string with hot character; TGHtml HTML widget; TGHtmlBrowser very simple html browser; TGIcon Icon GUI class; TGIconLBEntry Icon + text listbox entry; TGIdleHandler Idle event handler; TGImageMap Clickable image (like MAP in HTML); TGInputDialog Simple input dialog; TGInsets Inset (left, right, top, bottom); TGL5DDataSet Class to read data from TTree and create TGL5DPainter.; TGL5DDataSetEditor GUI for editing OpenGL 5D Viewer attributes; TGLAdapter Allow plot-painters to be used for gl-inpad and gl-viewer.; TGLAnnotation GL-annotation.; TGLAutoRotator Short description.; TGLAxis a GL Axis; TGLAxisPainter GL axis painter.; TGLAxisPainterBox Painter of GL axes for a 3D box.; TGLBContainer Listbox container; TGLBEntry Basic listbox entry; TGLBoundingBox a 3D orientated bounding box; TGLBoxCut Cuts away part of a plot.; TGLBoxPainter Box painter; TGLCamera Camera abs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:74484,progress bar,progress bar,74484,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,3,"['Simpl', 'progress bar', 'simpl']","['Simple', 'progress bar', 'simple']"
Usability,"em.h. Member Function Documentation. ◆ Class(). static TClass * SysInfo_t::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * SysInfo_t::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t SysInfo_t::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 160 of file TSystem.h. ◆ DeclFileName(). static const char * SysInfo_t::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 160 of file TSystem.h. ◆ IsA(). virtual TClass * SysInfo_t::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 160 of file TSystem.h. ◆ Streamer(). virtual void SysInfo_t::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void SysInfo_t::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 160 of file TSystem.h. Member Data Documentation. ◆ fBusSpeed. Int_t SysInfo_t::fBusSpeed. Definition at line 154 of file TSystem.h. ◆ fCpus. Int_t SysInfo_t::fCpus. Definition at line 152 of file TSystem.h. ◆ fCpuSpeed. Int_t SysInfo_t::fCpuSpeed. Definition at line 153 of file TSystem.h. ◆ fCpuType. TString SysInfo_t::fCpuType. Definition at line 151 of file TSystem.h. ◆ fL2Cache. Int_t SysInfo_t::fL2Cache. Definition at line 155 of file TSystem.h. ◆ fModel. TString SysInfo_t::fModel. Definition at line 150 of file TSystem.h. ◆ fOS. TString SysInfo_t::fOS. Definition at line 149 of file TSystem.h. ◆ fPhysRam. Int_t SysInfo_t::fPhysRam. Definition at line 156 of file TSystem.h. Collaboration diagram for SysInfo_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/base/inc/TSystem.h. SysInfo_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structSysInfo__t.html:3061,Guid,Guide,3061,doc/master/structSysInfo__t.html,https://root.cern,https://root.cern/doc/master/structSysInfo__t.html,1,['Guid'],['Guide']
Usability,ember Data Documentation. ◆ fBatch. Bool_t THtml::fBatch. protected . Definition at line 424 of file THtml.h. ◆ fCounter. TString THtml::fCounter. protected . Definition at line 408 of file THtml.h. ◆ fCounterFormat. TString THtml::fCounterFormat. protected . Definition at line 409 of file THtml.h. ◆ fDocEntityInfo. DocEntityInfo_t THtml::fDocEntityInfo. protected . Definition at line 419 of file THtml.h. ◆ fDocSyntax. DocSyntax_t THtml::fDocSyntax. protected . Definition at line 415 of file THtml.h. ◆ fFileDef. TFileDefinition* THtml::fFileDef. mutableprotected . Definition at line 422 of file THtml.h. ◆ fGClient. TGClient* THtml::fGClient. protected . Definition at line 414 of file THtml.h. ◆ fLinkInfo. LinkInfo_t THtml::fLinkInfo. protected . Definition at line 416 of file THtml.h. ◆ fLocalFiles. TFileSysDB* THtml::fLocalFiles. mutableprotected . Definition at line 423 of file THtml.h. ◆ fMakeClassMutex. TVirtualMutex* THtml::fMakeClassMutex. protected . Definition at line 413 of file THtml.h. ◆ fModuleDef. TModuleDefinition* THtml::fModuleDef. mutableprotected . Definition at line 421 of file THtml.h. ◆ fOutputStyle. OutputStyle_t THtml::fOutputStyle. protected . Definition at line 417 of file THtml.h. ◆ fPathDef. TPathDefinition* THtml::fPathDef. mutableprotected . Definition at line 420 of file THtml.h. ◆ fPathInfo. PathInfo_t THtml::fPathInfo. mutableprotected . Definition at line 418 of file THtml.h. ◆ fProductName. TString THtml::fProductName. protected . Definition at line 410 of file THtml.h. ◆ fThreadedClassCount. Int_t THtml::fThreadedClassCount. protected . Definition at line 412 of file THtml.h. ◆ fThreadedClassIter. TIter* THtml::fThreadedClassIter. protected . Definition at line 411 of file THtml.h. Libraries for THtml:. [legend]; The documentation for this class was generated from the following files:; html/inc/THtml.h; html/src/THtml.cxx. THtml. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:12:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:58629,Guid,Guide,58629,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,1,['Guid'],['Guide']
Usability,"ember Function Documentation. ◆ CancelStagingDataSet(). Bool_t TProofLite::CancelStagingDataSet ; (; const char * ; dataset). overridevirtual . Cancels a dataset staging request. ; Returns kTRUE on success, kFALSE on failure. Dataset not found equals to a failure. PROOF-Lite re-implementation of the equivalent function in TProofServ. ; Reimplemented from TProof.; Definition at line 2195 of file TProofLite.cxx. ◆ Class(). static TClass * TProofLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 170 of file TProofLite.h. ◆ CleanupSandbox(). Int_t TProofLite::CleanupSandbox ; (; ). private . Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ; Definition at line 1821 of file TProofLite.cxx. ◆ ClearCache(). void TProofLite::ClearCache ; (; const char * ; file = 0). overridevirtual . Remove files from all file caches. ; Reimplemented from TProof.; Definition at line 1519 of file TProofLite.cxx. ◆ ClearDataSetCache(). void TProofLite::ClearDataSetCache ; (; const char * ; dataset = 0). overridevirtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented from TProof.; Definition at line 2282 of file TProofLite.cxx. ◆ CopyMacroToCache(). Int_t TProofLite::CopyMacroToCache ; (; const char * ; macro, . Int_t ; headerRequired = 0, . TSelector ** ; selector = 0, . Int_t ; opt = 0, . TList * ; wrks = 0 . ). protected . Copy a macro, and its possible associated .h[h] file, to the cache directory, from where the workers can get the file. ; If headerRequired is 1, return -1 in case the header is not found. If headerRequired is 0, try to copy header too. If headerRequired is -1, don't look for header, only copy macro. If the selector pionter is no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:48786,Clear,ClearCache,48786,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['Clear'],['ClearCache']
Usability,"ember Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TSqlRawBuffer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSqlRawBuffer(). TSqlRawBuffer::TSqlRawBuffer ; (; TSqlRegistry * ; reg, . TSQLClassInfo * ; sqlinfo . ). inline . Definition at line 1080 of file TSQLStructure.cxx. ◆ ~TSqlRawBuffer(). TSqlRawBuffer::~TSqlRawBuffer ; (; ). inlineoverride . Definition at line 1092 of file TSQLStructure.cxx. Member Function Documentation. ◆ AddLine(). void TSqlRawBuffer::AddLine ; (; const char * ; name, . const char * ; value, . const char * ; topname = nullptr, . const char * ; ns = nullptr . ). inline . Definition at line 1105 of file TSQLStructure.cxx. ◆ IsAnyData(). Bool_t TSqlRawBuffer::IsAnyData ; (; ); const. inline . Definition at line 1103 of file TSQLStructure.cxx. Member Data Documentation. ◆ fCmdBuf. TSqlCmdsBuffer* TSqlRawBuffer::fCmdBuf. Definition at line 1158 of file TSQLStructure.cxx. ◆ fFile. TSQLFile* TSqlRawBuffer::fFile. Definition at line 1156 of file TSQLStructure.cxx. ◆ fInfo. TSQLClassInfo* TSqlRawBuffer::fInfo. Definition at line 1157 of file TSQLStructure.cxx. ◆ fMaxStrSize. Int_t TSqlRawBuffer::fMaxStrSize. Definition at line 1163 of file TSQLStructure.cxx. ◆ fObjId. Long64_t TSqlRawBuffer::fObjId. Definition at line 1159 of file TSQLStructure.cxx. ◆ fRawId. Int_t TSqlRawBuffer::fRawId. Definition at line 1160 of file TSQLStructure.cxx. ◆ fValueMask. TString TSqlRawBuffer::fValueMask. Definition at line 1161 of file TSQLStructure.cxx. ◆ fValueQuote. const char* TSqlRawBuffer::fValueQuote. Definition at line 1162 of file TSQLStructure.cxx. io/sql/src/TSQLStructure.cxx. TSqlRawBuffer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRawBuffer.html:11629,Guid,Guide,11629,doc/master/classTSqlRawBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html,1,['Guid'],['Guide']
Usability,"ember Functions; void ProcessSignal (const std::string &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 24 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 41 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 180 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 158 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 128 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 140 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:1929,Clear,ClearOnClose,1929,doc/v632/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html,1,['Clear'],['ClearOnClose']
Usability,"ember Functions; void ProcessSignal (const std::string &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 32 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 48 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 187 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 165 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 135 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 147 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:1985,Clear,ClearOnClose,1985,doc/master/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html,1,['Clear'],['ClearOnClose']
Usability,"ember Functions;  LayerData (const LayerData &other);  copy c'tor of LayerData ;  ;  LayerData (const_iterator_type itInputBegin, const_iterator_type itInputEnd, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (LayerData &&other);  move c'tor of LayerData ;  ;  LayerData (size_t inputSize);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, iterator_type itGradientBegin, std::shared_ptr< std::function< double(double)> > activationFunction, std::shared_ptr< std::function< double(double)> > inverseActivationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, std::shared_ptr< std::function< double(double)> > activationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  ~LayerData ();  ; std::shared_ptr< std::function< double(double)> > activationFunction () const;  ; void clear ();  clear the values and the deltas ;  ; void clearDropOut ();  clear the drop-out-data for this layer ;  ; iterator_type deltasBegin ();  returns iterator to the begin of the deltas (back-propagation) ;  ; const_iterator_type deltasBegin () const;  returns const iterator to the begin of the deltas (back-propagation) ;  ; iterator_type deltasEnd ();  returns iterator to the end of the deltas (back-propagation) ;  ; const_iterator_type deltasEnd () const;  returns const iterator to the end of the deltas (back-propagation) ;  ; const_dropout_iterator dropOut () const;  return the begin of the drop-out information ;  ; iterator_type gradientsBegin ();  returns iterator to the begin of the gradients ;  ; const_iterator_type gradientsBegin () const;  returns const iterator to the begin of the gradients ;  ; bool hasDropOut () const;  has this layer drop-out turned on? ;  ; std::shared_ptr< std::function< double(double)> > inverseActivationFunction () const;  ; ModeOutputValues outputMod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:1929,clear,clear,1929,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['clear'],['clear']
Usability,"ember values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:17597,Clear,Clear,17597,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['Clear'],['Clear']
Usability,"embers ; THashTable Class ReferenceCore ROOT classes » Containers. ; THashTable implements a hash table to store TObject's. ; The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects. If the insertion order is important AND fast retrieval is needed use THashList instead. ; Definition at line 35 of file THashTable.h. Public Member Functions;  THashTable (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashTable object. ;  ; virtual ~THashTable ();  Delete a hashtable. ;  ; void Add (TObject *obj) override;  Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; const TList * GetListForObject (const char *name) const;  Return the TList corresponding to object's name based hash value. ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the TList corresponding to object's hash value. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:1264,Clear,Clear,1264,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['Clear'],['Clear']
Usability,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofProgressLog.html:26292,clear,clear,26292,root/html604/TProofProgressLog.html,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html,1,['clear'],['clear']
Usability,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressLog.html:26292,clear,clear,26292,root/html602/TProofProgressLog.html,https://root.cern,https://root.cern/root/html602/TProofProgressLog.html,1,['clear'],['clear']
Usability,"embly or a scaled assembly.Definition TGeoVolume.cxx:1822; TGeoVolume::GetTransparencyChar_t GetTransparency() constDefinition TGeoVolume.h:369; TGeoVolume::IsVisiblevirtual Bool_t IsVisible() constDefinition TGeoVolume.h:155; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TIterDefinition TCollection.h:235; TIter::Resetvoid Reset()Definition TCollection.h:254; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPluginHandlerDefinition TPluginManager.h:103; TPluginHandler::ExecPluginLongptr_t ExecPlugin(int nargs)Definition TPluginManager.h:231; TPointDefinition TPoint.h:31; TPoint::fYSC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:113147,Clear,Clearvoid,113147,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ement > &lazy_constructor);  ;  TMatrixTSym (EMatrixCreatorsOp1 op, const TMatrixT< Element > &prototype);  ;  TMatrixTSym (EMatrixCreatorsOp1 op, const TMatrixTSym< Element > &prototype);  Create a matrix applying a specific operation to the prototype. ;  ;  TMatrixTSym (Int_t nrows);  ;  TMatrixTSym (Int_t nrows, const Element *data, Option_t *option="""");  option= ;  ;  TMatrixTSym (Int_t row_lwb, Int_t row_upb);  ;  TMatrixTSym (Int_t row_lwb, Int_t row_upb, const Element *data, Option_t *option="""");  array elements are copied ;  ;  ~TMatrixTSym () override;  ; TMatrixTBase< Element > & Apply (const TElementActionT< Element > &action) override;  Apply action to each matrix element. ;  ; TMatrixTBase< Element > & Apply (const TElementPosActionT< Element > &action) override;  Apply action to each element of the matrix. ;  ; TClass * Class ();  ; void Clear (Option_t *="""") override;  ; Double_t Determinant () const override;  ; void Determinant (Double_t &d1, Double_t &d2) const override;  ; const TMatrixT< Element > EigenVectors (TVectorT< Element > &eigenValues) const;  Return a matrix containing the eigen-vectors ordered by descending eigen-values. ;  ; const Int_t * GetColIndexArray () const override;  ; Int_t * GetColIndexArray () override;  ; const Element * GetMatrixArray () const override;  ; Element * GetMatrixArray () override;  ; const Int_t * GetRowIndexArray () const override;  ; Int_t * GetRowIndexArray () override;  ; TMatrixTSym< Element > GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t *option=""S"") const;  ; TMatrixTBase< Element > & GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, TMatrixTBase< Element > &target, Option_t *option=""S"") const override;  Get submatrix [row_lwb..row_upb][col_lwb..col_upb]; The indexing range of the returned matrix depends on the argument option: ;  ; TMatrixTSym< Element > & GetSub (Int_t row_lwb, Int_t row_upb, TMatrixTSym< Element > &target, Option_t *option=""S"") const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSym.html:2879,Clear,Clear,2879,doc/master/classTMatrixTSym.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html,1,['Clear'],['Clear']
Usability,"ement(s) on output stream ""out"". ; Reimplemented from TGeoMaterial.; Definition at line 1212 of file TGeoMaterial.cxx. ◆ SetA(). void TGeoMixture::SetA ; (; Double_t ; a). inlineoverridevirtual . Reimplemented from TGeoMaterial.; Definition at line 212 of file TGeoMaterial.h. ◆ SetDensity(). void TGeoMixture::SetDensity ; (; Double_t ; density). inlineoverridevirtual . Reimplemented from TGeoMaterial.; Definition at line 214 of file TGeoMaterial.h. ◆ SetZ(). void TGeoMixture::SetZ ; (; Double_t ; z). inlineoverridevirtual . Reimplemented from TGeoMaterial.; Definition at line 213 of file TGeoMaterial.h. ◆ Streamer(). void TGeoMixture::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoMaterial. ◆ StreamerNVirtual(). void TGeoMixture::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 223 of file TGeoMaterial.h. Member Data Documentation. ◆ fAmixture. Double_t* TGeoMixture::fAmixture. protected . Definition at line 164 of file TGeoMaterial.h. ◆ fElements. TObjArray* TGeoMixture::fElements. protected . Definition at line 168 of file TGeoMaterial.h. ◆ fNatoms. Int_t* TGeoMixture::fNatoms. protected . Definition at line 166 of file TGeoMaterial.h. ◆ fNelements. Int_t TGeoMixture::fNelements. protected . Definition at line 162 of file TGeoMaterial.h. ◆ fVecNbOfAtomsPerVolume. Double_t* TGeoMixture::fVecNbOfAtomsPerVolume. protected . Definition at line 167 of file TGeoMaterial.h. ◆ fWeights. Double_t* TGeoMixture::fWeights. protected . Definition at line 165 of file TGeoMaterial.h. ◆ fZmixture. Double_t* TGeoMixture::fZmixture. protected . Definition at line 163 of file TGeoMaterial.h. Libraries for TGeoMixture:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoMaterial.h; geom/geom/src/TGeoMaterial.cxx. TGeoMixture. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMixture.html:31292,Guid,Guide,31292,doc/master/classTGeoMixture.html,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html,1,['Guid'],['Guide']
Usability,"ement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveViewer(const char* n = ""TEveViewer"", const char* t = """"); Constructor.; The base-class TEveWindowFrame is constructed without a frame so; a default composite-frame is instantiated and stored in fGUIFrame.; Cleanup is set to no-cleanup as viewers need to be zapped with some; more care. ~TEveViewer(); Destructor. void InitInternal(); Initialize static data-members according to running conditions. void PreUndock(); Virtual function called before a window is undocked.; On mac we have to force recreation of gl-context. void PostDock(); Virtual function called after a window is docked.; On mac we have to force recreation of gl-context. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return TEveViewer icon. void SetGLViewer(TGLViewer* viewer, TGFrame* frame); Set TGLViewer that is represented by this object.; The old gl-viewer is deleted. TGLSAViewer* SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE); Spawn new GLViewer and adopt it. TGLEmbeddedViewer* SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); Spawn new GLViewer and adopt it. void Redraw(Bool_t resetCameras = kFALSE); Redraw viewer immediately. void SwitchStereo(); Switch stereo mode.; This only works TGLSAViewers and, of course, with stereo support; provided by the OpenGL driver. void AddScene(TEveScene* scene); Add 'scene' to the list of scenes. void RemoveElementLocal(TEveElement* el); Remove element 'el' from the list of child",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveViewer.html:24040,undo,undocked,24040,root/html602/TEveViewer.html,https://root.cern,https://root.cern/root/html602/TEveViewer.html,1,['undo'],['undocked']
Usability,"ement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveViewer(const char* n = ""TEveViewer"", const char* t = """"); Constructor.; The base-class TEveWindowFrame is constructed without a frame so; a default composite-frame is instantiated and stored in fGUIFrame.; Cleanup is set to no-cleanup as viewers need to be zapped with some; more care. ~TEveViewer(); Destructor. void InitInternal(); Initialize static data-members according to running conditions. void PreUndock(); Virtual function called before a window is undocked.; On mac we have to force recreation of gl-context. void PostDock(); Virtual function called after a window is docked.; On mac we have to force recreation of gl-context. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return TEveViewer icon. void SetGLViewer(TGLViewer* viewer, TGFrame* frame); Set TGLViewer that is represented by this object.; The old gl-viewer is deleted. TGLSAViewer* SpawnGLViewer(TGedEditor* ged = 0, Bool_t stereo = kFALSE, Bool_t quad_buf = kTRUE); Spawn new GLViewer and adopt it. TGLEmbeddedViewer* SpawnGLEmbeddedViewer(TGedEditor* ged = 0, Int_t border = 0); Spawn new GLViewer and adopt it. void Redraw(Bool_t resetCameras = kFALSE); Redraw viewer immediately. void SwitchStereo(); Switch stereo mode.; This only works TGLSAViewers and, of course, with stereo support; provided by the OpenGL driver. void AddScene(TEveScene* scene); Add 'scene' to the list of scenes. void RemoveElementLocal(TEveElement* el); Remove element 'e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveViewer.html:24065,undo,undocked,24065,root/html604/TEveViewer.html,https://root.cern,https://root.cern/root/html604/TEveViewer.html,1,['undo'],['undocked']
Usability,"ement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tCalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLine.html:2699,Clear,ClearProjectedList,2699,root/html534/TEveLine.html,https://root.cern,https://root.cern/root/html534/TEveLine.html,3,['Clear'],['ClearProjectedList']
Usability,"ement> Use(Int_t nrows, const double* data) const; { return Use(0,nrows-1,data); }. template <class Element> inline TMatrixTSym<Element> &TMatrixTSym<Element> Use(TMatrixTSym<double>& a); { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline const TMatrixTSym<Element> &TMatrixTSym<Element> Use(const TMatrixTSym<double>& a) const; { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline TMatrixTSym<Element> TMatrixTSym<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixTSym<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixTSym<Element> operator()(Int_t rown, Int_t coln). void Mult(const TMatrixTSym<double>& a); { TMult(a); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). Bool_t IsSymmetric() const; { return kTRUE; }. TMatrixTSym <Element> & Use(Int_t row_lwb, Int_t row_upb, double* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixTSym.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_double_.html:22450,Clear,Clear,22450,root/html528/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_double_.html,1,['Clear'],['Clear']
Usability,"ement> Use(Int_t nrows, const double* data) const; { return Use(0,nrows-1,data); }. template <class Element> inline TMatrixTSym<Element> &TMatrixTSym<Element> Use(TMatrixTSym<double>& a); { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline const TMatrixTSym<Element> &TMatrixTSym<Element> Use(const TMatrixTSym<double>& a) const; { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline TMatrixTSym<Element> TMatrixTSym<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixTSym<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixTSym<Element> operator()(Int_t rown, Int_t coln). void Mult(const TMatrixTSym<double>& a); { TMult(a); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). Bool_t IsSymmetric() const; { return kTRUE; }. TMatrixTSym <Element> & Use(Int_t row_lwb, Int_t row_upb, double* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixTSym.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMatrixTSym_double_.html:22519,Clear,Clear,22519,root/html530/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html530/TMatrixTSym_double_.html,1,['Clear'],['Clear']
Usability,"ement> Use(Int_t nrows, const double* data) const; { return Use(0,nrows-1,data); }. template <class Element> inline TMatrixTSym<Element> &TMatrixTSym<Element> Use(TMatrixTSym<double>& a); { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline const TMatrixTSym<Element> &TMatrixTSym<Element> Use(const TMatrixTSym<double>& a) const; { return Use(a.GetRowLwb(),a.GetRowUpb(),a.GetMatrixArray()); }. template <class Element> inline TMatrixTSym<Element> TMatrixTSym<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixTSym<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixTSym<Element> operator()(Int_t rown, Int_t coln). void Mult(const TMatrixTSym<double>& a); { TMult(a); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). Bool_t IsSymmetric() const; { return kTRUE; }. TMatrixTSym <Element> & Use(Int_t row_lwb, Int_t row_upb, double* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixTSym.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMatrixTSym_double_.html:22519,Clear,Clear,22519,root/html532/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html532/TMatrixTSym_double_.html,1,['Clear'],['Clear']
Usability,"ement> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, double* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const double* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<double>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<double>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t ind); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const double* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, double* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_double_.html:18539,Clear,Clear,18539,root/html534/TVectorT_double_.html,https://root.cern,https://root.cern/root/html534/TVectorT_double_.html,1,['Clear'],['Clear']
Usability,emented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooAddGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file RooAddGenContext.h. ◆ updateThresholds(). void RooAddGenContext::updateThresholds ; (; ). protected . Update the cumulative threshold table from the current coefficient values. ; Definition at line 189 of file RooAddGenContext.cxx. Member Data Documentation. ◆ _coefThresh. std::vector<double> RooAddGenContext::_coefThresh. protected . [_nComp] Array of coefficient thresholds ; Definition at line 63 of file RooAddGenContext.h. ◆ _gcList. std::vector<std::unique_ptr<RooAbsGenContext> > RooAddGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 61 of file RooAddGenContext.h. ◆ _isModel. bool RooAddGenContext::_isModel. protected . Are we generating from a RooAddPdf or a RooAddModel. ; Definition at line 64 of file RooAddGenContext.h. ◆ _nComp. Int_t RooAddGenContext::_nComp. protected . Number of PDF components. ; Definition at line 62 of file RooAddGenContext.h. ◆ _pcache. AddCacheElem* RooAddGenContext::_pcache = nullptr. protected . ! RooAddPdf cache element ; Definition at line 65 of file RooAddGenContext.h. ◆ _pdf. RooAbsPdf* RooAddGenContext::_pdf. protected . Pointer to cloned p.d.f. ; Definition at line 60 of file RooAddGenContext.h. ◆ _pdfSet. std::unique_ptr<RooArgSet> RooAddGenContext::_pdfSet. protected . Set owned all nodes of internal clone of p.d.f. ; Definition at line 59 of file RooAddGenContext.h. ◆ _vars. std::unique_ptr<RooArgSet> RooAddGenContext::_vars. protected . Definition at line 58 of file RooAddGenContext.h. Libraries for RooAddGenContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAddGenContext.h; roofit/roofitcore/src/RooAddGenContext.cxx. RooAddGenContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddGenContext.html:24056,Guid,Guide,24056,doc/master/classRooAddGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html,1,['Guid'],['Guide']
Usability,"emented from RooAbsPdf.; Definition at line 55 of file RooChebychev.h. ◆ selectNormalizationRange(). void RooChebychev::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overridevirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented from RooAbsReal.; Definition at line 66 of file RooChebychev.cxx. ◆ Streamer(). void RooChebychev::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooChebychev::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file RooChebychev.h. ◆ translate(). void RooChebychev::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 93 of file RooChebychev.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooChebychev::_coefList. private . Definition at line 46 of file RooChebychev.h. ◆ _refRangeName. TNamed* RooChebychev::_refRangeName = nullptr. mutableprivate . Definition at line 47 of file RooChebychev.h. ◆ _x. RooRealProxy RooChebychev::_x. private . Definition at line 45 of file RooChebychev.h. Libraries for RooChebychev:. [legend]; The docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:78573,simpl,simple,78573,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,1,['simpl'],['simple']
Usability,"emented from TH1.; Definition at line 259 of file TH2.h. ◆ SetBinsLength(). void TH2I::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 3529 of file TH2.cxx. ◆ Streamer(). void TH2I::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2. ; Reimplemented from TH2. ◆ StreamerNVirtual(). void TH2I::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 262 of file TH2.h. ◆ UpdateBinContent(). void TH2I::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 260 of file TH2.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH2I operator* ; (; Float_t ; c1, . TH2I const & ; h1 . ). friend . Operator *. ; Definition at line 3551 of file TH2.cxx. ◆ operator* [2/3]. TH2I operator* ; (; TH2I const & ; h1, . Float_t ; c1 . ). friend . Definition at line 252 of file TH2.h. ◆ operator* [3/3]. TH2I operator* ; (; TH2I const & ; h1, . TH2I const & ; h2 . ). friend . Operator *. ; Definition at line 3587 of file TH2.cxx. ◆ operator+. TH2I operator+ ; (; TH2I const & ; h1, . TH2I const & ; h2 . ). friend . Operator +. ; Definition at line 3563 of file TH2.cxx. ◆ operator-. TH2I operator- ; (; TH2I const & ; h1, . TH2I const & ; h2 . ). friend . Operator -. ; Definition at line 3575 of file TH2.cxx. ◆ operator/. TH2I operator/ ; (; TH2I const & ; h1, . TH2I const & ; h2 . ). friend . Operator /. ; Definition at line 3599 of file TH2.cxx. Libraries for TH2I:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH2.h; hist/hist/src/TH2.cxx. TH2I. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2I.html:66106,Guid,Guide,66106,doc/master/classTH2I.html,https://root.cern,https://root.cern/doc/master/classTH2I.html,1,['Guid'],['Guide']
Usability,"emented from TH1.; Definition at line 269 of file TH3.h. ◆ SetBinsLength(). void TH3I::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 4156 of file TH3.cxx. ◆ Streamer(). void TH3I::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH3. ; Reimplemented from TH3. ◆ StreamerNVirtual(). void TH3I::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 272 of file TH3.h. ◆ UpdateBinContent(). void TH3I::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 270 of file TH3.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH3I operator* ; (; Float_t ; c1, . TH3I const & ; h1 . ). friend . Operator *. ; Definition at line 4178 of file TH3.cxx. ◆ operator* [2/3]. TH3I operator* ; (; TH3I const & ; h1, . Float_t ; c1 . ). friend . Definition at line 262 of file TH3.h. ◆ operator* [3/3]. TH3I operator* ; (; TH3I const & ; h1, . TH3I const & ; h2 . ). friend . Operator *. ; Definition at line 4214 of file TH3.cxx. ◆ operator+. TH3I operator+ ; (; TH3I const & ; h1, . TH3I const & ; h2 . ). friend . Operator +. ; Definition at line 4190 of file TH3.cxx. ◆ operator-. TH3I operator- ; (; TH3I const & ; h1, . TH3I const & ; h2 . ). friend . Operator _. ; Definition at line 4202 of file TH3.cxx. ◆ operator/. TH3I operator/ ; (; TH3I const & ; h1, . TH3I const & ; h2 . ). friend . Operator /. ; Definition at line 4226 of file TH3.cxx. Libraries for TH3I:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH3.h; hist/hist/src/TH3.cxx. TH3I. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3I.html:67472,Guid,Guide,67472,doc/master/classTH3I.html,https://root.cern,https://root.cern/doc/master/classTH3I.html,1,['Guid'],['Guide']
Usability,"emented from TH1.; Definition at line 299 of file TH2.h. ◆ SetBinsLength(). void TH2L::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 3758 of file TH2.cxx. ◆ Streamer(). void TH2L::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2. ; Reimplemented from TH2. ◆ StreamerNVirtual(). void TH2L::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 302 of file TH2.h. ◆ UpdateBinContent(). void TH2L::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 300 of file TH2.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH2L operator* ; (; Float_t ; c1, . TH2L const & ; h1 . ). friend . Operator *. ; Definition at line 3780 of file TH2.cxx. ◆ operator* [2/3]. TH2L operator* ; (; TH2L const & ; h1, . Float_t ; c1 . ). friend . Definition at line 292 of file TH2.h. ◆ operator* [3/3]. TH2L operator* ; (; TH2L const & ; h1, . TH2L const & ; h2 . ). friend . Operator *. ; Definition at line 3816 of file TH2.cxx. ◆ operator+. TH2L operator+ ; (; TH2L const & ; h1, . TH2L const & ; h2 . ). friend . Operator +. ; Definition at line 3792 of file TH2.cxx. ◆ operator-. TH2L operator- ; (; TH2L const & ; h1, . TH2L const & ; h2 . ). friend . Operator -. ; Definition at line 3804 of file TH2.cxx. ◆ operator/. TH2L operator/ ; (; TH2L const & ; h1, . TH2L const & ; h2 . ). friend . Operator /. ; Definition at line 3828 of file TH2.cxx. Libraries for TH2L:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH2.h; hist/hist/src/TH2.cxx. TH2L. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2L.html:66181,Guid,Guide,66181,doc/master/classTH2L.html,https://root.cern,https://root.cern/doc/master/classTH2L.html,1,['Guid'],['Guide']
Usability,"emented from TH1.; Definition at line 308 of file TH3.h. ◆ SetBinsLength(). void TH3L::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 4363 of file TH3.cxx. ◆ Streamer(). void TH3L::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH3. ; Reimplemented from TH3. ◆ StreamerNVirtual(). void TH3L::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 311 of file TH3.h. ◆ UpdateBinContent(). void TH3L::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 309 of file TH3.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH3L operator* ; (; Float_t ; c1, . TH3L const & ; h1 . ). friend . Operator *. ; Definition at line 4385 of file TH3.cxx. ◆ operator* [2/3]. TH3L operator* ; (; TH3L const & ; h1, . Float_t ; c1 . ). friend . Definition at line 301 of file TH3.h. ◆ operator* [3/3]. TH3L operator* ; (; TH3L const & ; h1, . TH3L const & ; h2 . ). friend . Operator *. ; Definition at line 4421 of file TH3.cxx. ◆ operator+. TH3L operator+ ; (; TH3L const & ; h1, . TH3L const & ; h2 . ). friend . Operator +. ; Definition at line 4397 of file TH3.cxx. ◆ operator-. TH3L operator- ; (; TH3L const & ; h1, . TH3L const & ; h2 . ). friend . Operator _. ; Definition at line 4409 of file TH3.cxx. ◆ operator/. TH3L operator/ ; (; TH3L const & ; h1, . TH3L const & ; h2 . ). friend . Operator /. ; Definition at line 4433 of file TH3.cxx. Libraries for TH3L:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH3.h; hist/hist/src/TH3.cxx. TH3L. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3L.html:67547,Guid,Guide,67547,doc/master/classTH3L.html,https://root.cern,https://root.cern/doc/master/classTH3L.html,1,['Guid'],['Guide']
Usability,"emented from TLeaf.; Definition at line 159 of file TLeafO.cxx. ◆ ReadBasketFast(). bool TLeafO::ReadBasketFast ; (; TBuffer & ; , . Long64_t ;  . ). inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 59 of file TLeafO.h. ◆ ReadValue(). void TLeafO::ReadValue ; (; std::istream & ; s, . Char_t ; delim = ' ' . ). overridevirtual . Read a string from std::istream s and store it into the branch buffer. ; Reimplemented from TLeaf.; Definition at line 173 of file TLeafO.cxx. ◆ SetAddress(). void TLeafO::SetAddress ; (; void * ; add = nullptr). overridevirtual . Set leaf buffer data address. ; Reimplemented from TLeaf.; Definition at line 182 of file TLeafO.cxx. ◆ SetMaximum(). virtual void TLeafO::SetMaximum ; (; bool ; max). inlinevirtual . Definition at line 54 of file TLeafO.h. ◆ SetMinimum(). virtual void TLeafO::SetMinimum ; (; bool ; min). inlinevirtual . Definition at line 55 of file TLeafO.h. ◆ Streamer(). void TLeafO::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TLeaf. ◆ StreamerNVirtual(). void TLeafO::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TLeafO.h. Member Data Documentation. ◆ fMaximum. bool TLeafO::fMaximum. protected . Maximum value if leaf range is specified. ; Definition at line 30 of file TLeafO.h. ◆ fMinimum. bool TLeafO::fMinimum. protected . Minimum value if leaf range is specified. ; Definition at line 29 of file TLeafO.h. ◆ fPointer. bool** TLeafO::fPointer. protected . ! Address of a pointer to data buffer! ; Definition at line 32 of file TLeafO.h. ◆ fValue. bool* TLeafO::fValue. protected . ! Pointer to data buffer ; Definition at line 31 of file TLeafO.h. Libraries for TLeafO:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafO.h; tree/tree/src/TLeafO.cxx. TLeafO. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafO.html:22434,Guid,Guide,22434,doc/master/classTLeafO.html,https://root.cern,https://root.cern/doc/master/classTLeafO.html,1,['Guid'],['Guide']
Usability,"emented from TObject.; Definition at line 250 of file TRootBrowserLite.cxx. ◆ Hash(). ULong_t TIconBoxThumb::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TIconBoxThumb::HashULong_t Hash() const overrideReturn hash value for this object.Definition TRootBrowserLite.cxx:249; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 249 of file TRootBrowserLite.cxx. Member Data Documentation. ◆ fLarge. const TGPicture* TIconBoxThumb::fLarge. Definition at line 242 of file TRootBrowserLite.cxx. ◆ fName. TString TIconBoxThumb::fName. Definition at line 240 of file TRootBrowserLite.cxx. ◆ fSmall. const TGPicture* TIconBoxThumb::fSmall. Definition at line 241 of file TRootBrowserLite.cxx. gui/gui/src/TRootBrowserLite.cxx. TIconBoxThumb. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:12201,Guid,Guide,12201,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['Guid'],['Guide']
Usability,"emented in RooIntegralMorph.; Definition at line 34 of file RooAbsCachedPdf.h. ◆ setInterpolationOrder(). void RooAbsCachedPdf::setInterpolationOrder ; (; int ; order). Change the interpolation order that is used in RooHistPdf cache representation smoothing the RooDataHist shapes. ; Definition at line 269 of file RooAbsCachedPdf.cxx. ◆ Streamer(). void RooAbsCachedPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooIntegralMorph, RooCachedPdf, and RooFFTConvPdf. ◆ StreamerNVirtual(). void RooAbsCachedPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 137 of file RooAbsCachedPdf.h. Friends And Related Symbol Documentation. ◆ PdfCacheElem. friend class PdfCacheElem. friend . Definition at line 96 of file RooAbsCachedPdf.h. Member Data Documentation. ◆ _anaIntMap. std::map<Int_t,AnaIntConfig> RooAbsCachedPdf::_anaIntMap. mutableprotected . ! Map for analytical integration codes ; Definition at line 129 of file RooAbsCachedPdf.h. ◆ _anaReg. RooAICRegistry RooAbsCachedPdf::_anaReg. mutableprotected . ! Registry for analytical integration codes ; Definition at line 121 of file RooAbsCachedPdf.h. ◆ _cacheMgr. RooObjCacheManager RooAbsCachedPdf::_cacheMgr. mutableprotected . Definition at line 111 of file RooAbsCachedPdf.h. ◆ _disableCache. bool RooAbsCachedPdf::_disableCache = false. private . Flag to run object in passthrough (= non-caching mode) ; Definition at line 135 of file RooAbsCachedPdf.h. ◆ _ipOrder. Int_t RooAbsCachedPdf::_ipOrder. protected . The cache manager. ; Definition at line 112 of file RooAbsCachedPdf.h. Libraries for RooAbsCachedPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCachedPdf.h; roofit/roofitcore/src/RooAbsCachedPdf.cxx. RooAbsCachedPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:86502,Guid,Guide,86502,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['Guid'],['Guide']
Usability,"emented: meaningful only in the remote player. Returns kFALSE. Bool_t CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); Check the memory usage, if requested.; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or; resident limits are depassed. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); Finalize query (may not be used in this class). Long64_t Finalize(TQueryResult* qr); Finalize query (may not be used in this class). void MergeOutput(); Merge output (may not be used in this class). void MapOutputListToDataMembers() const. void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); Update automatic binning parameters for given object ""name"". TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet (may not be used in this class). void SetupFeedback(); Set up feedback (may not be used in this class). void StopFeedback(); Stop feedback (may not be used in this class). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (may not be used in this class). void HandleGetTreeHeader(TMessage* mess); Handle tree header request. void HandleRecvHisto(TMessage* mess); Receive histo from slave. Int_t DrawCanvas(TObject* obj); Draw the object if it is a canvas.; Return 0 in case of success, 1 if it is not a canvas or libProofDraw; is not available. Int_t GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); Parse the arguments from var, sel and opt and fill the selector and; object name accordingly.; Return 0 in case of success, 1 if libProofDraw is not available. void FeedBackCanvas(const char* name, Bool_t create); Create/destroy a named canvas for feedback. Long64_t GetCacheSize(); Return the size in bytes of the cache. Int_t GetLearnEntries(); Return the number of entries in the l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayer.html:21651,feedback,feedback,21651,root/html602/TProofPlayer.html,https://root.cern,https://root.cern/root/html602/TProofPlayer.html,1,['feedback'],['feedback']
Usability,"emory, the recovered space may not be; efficiently reused. The process knows that there are portions of free memory,; but when you allocate it again, a fresh piece of memory is grabbed.; Your program is free from semantic errors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used for; clearing TClonesArray. When option ""C"" is specified, ROOT automatically; executes the Clear() method (by default it is empty contained in TObject).; This method must be overridden in the relevant TClonesArray object class,; implementing the reset procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the TClo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:2751,Clear,Cleared,2751,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['Clear'],['Cleared']
Usability,emplate<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_monte_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMonteFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMonteFunctionWrapper(). ROOT::Math::GSLMonteFunctionWrapper::GSLMonteFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMonteFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_monte_function * ROOT::Math::GSLMonteFunctionWrapper::GetFunc ; (; ). inline . Definition at line 82 of file GSLMonteFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLMonteFunctionWrapper::operator() ; (; const double * ; x). inline . evaluate the function and derivatives ; Definition at line 85 of file GSLMonteFunctionWrapper.h. ◆ SetDim(). void ROOT::Math::GSLMonteFunctionWrapper::SetDim ; (; unsigned int ; n). inline . Definition at line 69 of file GSLMonteFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLMonteFunctionWrapper::SetFuncPointer ; (; GSLMonteFuncPointer ; f). inline . Definition at line 68 of file GSLMonteFunctionWrapper.h. ◆ SetFunction(). template<class FuncType > . void ROOT::Math::GSLMonteFunctionWrapper::SetFunction ; (; const FuncType & ; f). inline . Fill gsl function structure from a C++ Function class. ; Definition at line 74 of file GSLMonteFunctionWrapper.h. ◆ SetParams(). void ROOT::Math::GSLMonteFunctionWrapper::SetParams ; (; void * ; p). inline . Definition at line 70 of file GSLMonteFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_monte_function ROOT::Math::GSLMonteFunctionWrapper::fFunc. private . Definition at line 89 of file GSLMonteFunctionWrapper.h. math/mathmore/src/GSLMonteFunctionWrapper.h. ROOTMathGSLMonteFunctionWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html:2759,Guid,Guide,2759,doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html,1,['Guid'],['Guide']
Usability,"emplate<class T > . void ROOT::Math::CylindricalEta3D< T >::SetXYZ ; (; Scalar ; x, . Scalar ; y, . Scalar ; z . ). set all values using cartesian coordinates ; Definition at line 301 of file CylindricalEta3D.h. ◆ Theta(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Theta ; (; ); const. inline . Definition at line 160 of file CylindricalEta3D.h. ◆ X(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::X ; (; ); const. inline . Definition at line 141 of file CylindricalEta3D.h. ◆ x(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::x ; (; ); const. inline . Definition at line 249 of file CylindricalEta3D.h. ◆ Y(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Y ; (; ); const. inline . Definition at line 142 of file CylindricalEta3D.h. ◆ y(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::y ; (; ); const. inline . Definition at line 250 of file CylindricalEta3D.h. ◆ Z(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Z ; (; ); const. inline . Definition at line 143 of file CylindricalEta3D.h. ◆ z(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::z ; (; ); const. inline . Definition at line 251 of file CylindricalEta3D.h. Member Data Documentation. ◆ Dimension. template<class T > . constexpr unsigned int ROOT::Math::CylindricalEta3D< T >::Dimension = 3U. staticconstexpr . Definition at line 53 of file CylindricalEta3D.h. ◆ fEta. template<class T > . T ROOT::Math::CylindricalEta3D< T >::fEta. private . Definition at line 277 of file CylindricalEta3D.h. ◆ fPhi. template<class T > . T ROOT::Math::CylindricalEta3D< T >::fPhi. private . Definition at line 278 of file CylindricalEta3D.h. ◆ fRho. template<class T > . T ROOT::Math::CylindricalEta3D< T >::fRho. private . Definition at line 276 of file CylindricalEta3D.h. math/genvector/inc/Math/GenVector/CylindricalEta3D.h. ROOTMathCylindricalEta3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html:10799,Guid,Guide,10799,doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,1,['Guid'],['Guide']
Usability,"emplate<class char_t , class traits_t > ; std::basic_istream< char_t, traits_t > & require_delim (std::basic_istream< char_t, traits_t > &is, manip_t m);  ; template<class char_t , class traits_t > ; void set_manip (std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch);  . Enumeration Type Documentation. ◆ manip_t. enum ROOT::Math::detail::manip_t. Enumeratoropen ; sep ; close ; bitforbit . Definition at line 35 of file GenVectorIO.h. Function Documentation. ◆ get_manip(). template<class char_t , class traits_t > . char_t ROOT::Math::detail::get_manip ; (; std::basic_ios< char_t, traits_t > & ; ios, . manip_t ; m . ). inline . Definition at line 54 of file GenVectorIO.h. ◆ ios_data(). int ROOT::Math::detail::ios_data ; (; int ; k). inline . Definition at line 39 of file GenVectorIO.h. ◆ operator<<(). template<class char_t , class traits_t > . std::basic_ostream< char_t, traits_t > & ROOT::Math::detail::operator<< ; (; std::basic_ostream< char_t, traits_t > & ; os, . detail::manipulator< char_t > const & ; manip . ). inline . Definition at line 113 of file GenVectorIO.h. ◆ operator>>(). template<class char_t , class traits_t > . std::basic_istream< char_t, traits_t > & ROOT::Math::detail::operator>> ; (; std::basic_istream< char_t, traits_t > & ; is, . detail::manipulator< char_t > const & ; manip . ). inline . Definition at line 147 of file GenVectorIO.h. ◆ require_delim(). template<class char_t , class traits_t > . std::basic_istream< char_t, traits_t > & ROOT::Math::detail::require_delim ; (; std::basic_istream< char_t, traits_t > & ; is, . manip_t ; m . ). inline . Definition at line 113 of file GenVectorIO.h. ◆ set_manip(). template<class char_t , class traits_t > . void ROOT::Math::detail::set_manip ; (; std::basic_ios< char_t, traits_t > & ; ios, . manip_t ; m, . char_t ; ch . ). inline . Definition at line 74 of file GenVectorIO.h. ROOTMathdetail. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1detail.html:2761,Guid,Guide,2761,doc/master/namespaceROOT_1_1Math_1_1detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1detail.html,1,['Guid'],['Guide']
Usability,emplate<typename AFloat > . curandState_t * TMVA::DNN::TCudaMatrix< AFloat >::fCurandStates = nullptr. staticprivate . Definition at line 113 of file CudaMatrix.h. ◆ fDeviceReturn. template<typename AFloat > . AFloat * TMVA::DNN::TCudaMatrix< AFloat >::fDeviceReturn = nullptr. staticprivate . Buffer for kernel return values. ; Definition at line 110 of file CudaMatrix.h. ◆ fElementBuffer. template<typename AFloat > . TCudaDeviceBuffer<AFloat> TMVA::DNN::TCudaMatrix< AFloat >::fElementBuffer. private . Definition at line 119 of file CudaMatrix.h. ◆ fInstances. template<typename AFloat > . size_t TMVA::DNN::TCudaMatrix< AFloat >::fInstances = 0. staticprivate . Current number of matrix instances. ; Definition at line 108 of file CudaMatrix.h. ◆ fNCols. template<typename AFloat > . size_t TMVA::DNN::TCudaMatrix< AFloat >::fNCols. private . Definition at line 118 of file CudaMatrix.h. ◆ fNCurandStates. template<typename AFloat > . size_t TMVA::DNN::TCudaMatrix< AFloat >::fNCurandStates = 0. staticprivate . Definition at line 114 of file CudaMatrix.h. ◆ fNOnes. template<typename AFloat > . size_t TMVA::DNN::TCudaMatrix< AFloat >::fNOnes = 0. staticprivate . Current length of the one vector. ; Definition at line 112 of file CudaMatrix.h. ◆ fNRows. template<typename AFloat > . size_t TMVA::DNN::TCudaMatrix< AFloat >::fNRows. private . Definition at line 117 of file CudaMatrix.h. ◆ fOnes. template<typename AFloat > . AFloat * TMVA::DNN::TCudaMatrix< AFloat >::fOnes = nullptr. staticprivate . Vector used for summations of columns. ; Definition at line 111 of file CudaMatrix.h. ◆ gInitializeCurand. template<typename AFloat > . Bool_t TMVA::DNN::TCudaMatrix< AFloat >::gInitializeCurand = kFALSE. static . Definition at line 123 of file CudaMatrix.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h; tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu. TMVADNNTCudaMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html:12678,Guid,Guide,12678,doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,1,['Guid'],['Guide']
Usability,"en a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::DataLoader::AddSpectatorvoid AddSpectator(const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0)user inserts target in data set infoDefinition DataLoader.cxx:524; TMVA::DataLoader::SetBackgroundWeightExpressionvoid SetBackgroundWeightExpression(const TString &variable)Definition DataLoader.cxx:556; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::Envelope::BookMethodvirtual void BookMethod(TString methodname, TString methodtitle, TString options="""")Method to book the machine learning method to perform the algorithm.Definition Envelope.cxx:163; TMVA::Experimental::ClassificationDefinition Classification.h:162; TMVA::Experimental::Classification::GetResultsstd::vector< ClassificationResult > & GetResults()Return the vector of TMVA::Experimental::ClassificationResult objects.Definition Classification.cxx:945; TMVA::Experimental::Classification::Evaluatevirtual void Evaluate()Method to perform Train/Test over all ml method booked.Definition Classification.cxx:248; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TMVA::Types::kSVM@ kSVMDefinition Types.h:89; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Classification.html:5245,learn,learning,5245,doc/master/classTMVA_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html,1,['learn'],['learning']
Usability,"en cells yourself. Table formatting will insert further spaces as needed to achieve alignment.; You can insert line breaks within cells by using \v (vertical tab).; const option::Descriptor usage[] = {; {..., ""-c,\v--create \tCreates\vsomething."" },; {..., ""-k,\v--kill \tDestroys\vsomething."" }, ...; ; // results in; ; -c, Creates; --create something.; -k, Destroys; --kill something.; You can mix lines that do not use \t or \v with those that do. The plain lines will not mess up the table layout. Alignment of the table columns will be maintained even across these interjections.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""----------------------------------"" },; {..., ""-k, --kill \tDestroys something."" }, ...; ; // results in; ; -c, --create Creates something.; ----------------------------------; -k, --kill Destroys something.; You can have multiple tables within the same usage whose columns are aligned independently. Simply insert a dummy Descriptor with help==0.; const option::Descriptor usage[] = {; {..., ""Long options:"" },; {..., ""--very-long-option \tDoes something long."" },; {..., ""--ultra-super-mega-long-option \tTakes forever to complete."" },; {..., 0 }, // ---------- table break -----------; {..., ""Short options:"" },; {..., ""-s \tShort."" },; {..., ""-q \tQuick."" }, ...; ; // results in; ; Long options:; --very-long-option Does something long.; --ultra-super-mega-long-option Takes forever to complete.; Short options:; -s Short.; -q Quick.; ; // Without the table break it would be; ; Long options:; --very-long-option Does something long.; --ultra-super-mega-long-option Takes forever to complete.; Short options:; -s Short.; -q Quick.; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; qfloat * qDefinition THbookFile.cxx:89; sqlio::Shortconst char * ShortDefinition TSQLStructure.cxx:71; Output methods:; Because TheLeanMeanC++Option parser is freestanding, you have to provide the means for output in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:8232,Simpl,Simply,8232,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,2,['Simpl'],['Simply']
Usability,"en host buffer.; TMVA::DNN::TTensorDataLoader::Matrix_ttypename Architecture_t::Matrix_t Matrix_tDefinition TensorDataLoader.h:137; TMVA::DNN::TTensorDataLoader::HostBuffer_ttypename Architecture_t::HostBuffer_t HostBuffer_tDefinition TensorDataLoader.h:135; TMVA::DNN::TTensorDataLoader::fBatchDepthsize_t fBatchDepthThe number of matrices in the tensor.Definition TensorDataLoader.h:146; TMVA::DNN::TTensorDataLoader::fNStreamssize_t fNStreamsNumber of buffer pairs.Definition TensorDataLoader.h:153; TMVA::DNN::TTensorDataLoader::fDataconst Data_t & fDataThe data that should be loaded in the batches.Definition TensorDataLoader.h:142; TMVA::DNN::TTensorDataLoader::operator=TTensorDataLoader & operator=(TTensorDataLoader &&)=default; TMVA::DNN::TTensorDataLoader::Tensor_ttypename Architecture_t::Tensor_t Tensor_tDefinition TensorDataLoader.h:138; TMVA::DNN::TTensorDataLoader::endBatchIterator_t end()Definition TensorDataLoader.h:180; TMVA::DNN::TTensorDataLoader::fNSamplessize_t fNSamplesThe total number of samples in the dataset.Definition TensorDataLoader.h:143; TMVA::DNN::TTensorDataLoader::CopyTensorInputvoid CopyTensorInput(HostBuffer_t &buffer, IndexIterator_t begin)Copy input tensor into the given host buffer.; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMatrixTTMatrixT.Definition TMatrixT.h:40; TMVA::DNN::TensorInputstd::tuple< const std::vector< TMatrixT< Double_t > > &, const TMatrixT< Double_t > &, const TMatrixT< Double_t > & > TensorInputDefinition TensorDataLoader.h:44; TMVA::DNN::IndexIterator_ttypename std::vector< size_t >::iterator IndexIterator_tDefinition DataLoader.h:42; TMVA::DNN::TMVAInput_tstd::tuple< const std::vector< Event * > &, const DataSetInfo & > TMVAInput_tDefinition DataLoader.h:40; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22. tmvatmvaincTMVADNNTensorDataLoader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TensorDataLoader_8h_source.html:20978,Guid,Guide,20978,doc/master/TensorDataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/TensorDataLoader_8h_source.html,1,['Guid'],['Guide']
Usability,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:44691,guid,guide,44691,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['guid'],['guide']
Usability,"en name. If no such object; is found return a null pointer. TObject* FindObject(const TObject* obj); Find object in list. If list contains object return; (same) pointer to object, otherwise return null pointer. void Clear(Option_t* o = 0); Remove all elements from collection. void Delete(Option_t* o = 0); Remove all elements in collection and delete all elements; NB: Collection does not own elements, this function should; be used judiciously by caller. TObject* find(const char* name) const; Return pointer to object with given name in collection.; If no such object is found, return null pointer. Int_t IndexOf(const TObject* arg); Return position of given object in list. If object; is not contained in list, return -1. Int_t IndexOf(const char* name); Return position of given object in list. If object; is not contained in list, return -1. void Print(const char* opt) const; Print contents of list, defers to Print() function; of contained objects. TIterator* MakeIterator(Bool_t dir = kTRUE) const; Return an iterator over this list. RooLinkedListIter iterator(Bool_t dir = kTRUE) const; Return an iterator over this list. void Sort(Bool_t ascend = kTRUE); Sort elements of this list according to their; TObject::Compare() ranking via a simple; bubble sort algorithm. void swapWithNext(RooLinkedListElem* elem); Swap given to elements in the linked list. Auxiliary function for Sort(). void Streamer(TBuffer& b); Custom streaming handling schema evolution w.r.t past implementations. Int_t getHashTableSize() const; Return size of hash table. Int_t GetSize() const; { return _size ; }. void Add(TObject* arg); { Add(arg,1) ; }. TObject* First() const. const char* GetName() const; { return _name.Data() ; }. void SetName(const char* name); { _name = name ; }. » Last changed: Mon Dec 7 13:48:08 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooLinkedList.html:8792,simpl,simple,8792,root/html526/RooLinkedList.html,https://root.cern,https://root.cern/root/html526/RooLinkedList.html,1,['simpl'],['simple']
Usability,"en only the basket header must be read/written. ; Definition at line 66 of file TBasket.h. ◆ fIOBits. UChar_t TBasket::fIOBits {0}. protected . !IO feature flags. Serialized in custom portion of streamer to avoid forward compat issues unless needed. ; Definition at line 67 of file TBasket.h. ◆ fLast. Int_t TBasket::fLast {0}. protected . Pointer to last used byte in basket. ; Definition at line 65 of file TBasket.h. ◆ fLastWriteBufferSize. Int_t TBasket::fLastWriteBufferSize[3] = {0,0,0}. protected . ! Size of the buffer last three buffers we wrote it to disk ; Definition at line 75 of file TBasket.h. ◆ fNevBuf. Int_t TBasket::fNevBuf {0}. protected . Number of entries in basket. ; Definition at line 64 of file TBasket.h. ◆ fNevBufSize. Int_t TBasket::fNevBufSize {0}. protected . Length in Int_t of fEntryOffset OR fixed length of each entry if fEntryOffset is null! ; Definition at line 63 of file TBasket.h. ◆ fNextBufferSizeRecord. UChar_t TBasket::fNextBufferSizeRecord {0}. protected . ! Index into fLastWriteBufferSize of the last buffer written to disk ; Definition at line 77 of file TBasket.h. ◆ fOwnsCompressedBuffer. bool TBasket::fOwnsCompressedBuffer {false}. protected . ! Whether or not we own the compressed buffer. ; Definition at line 68 of file TBasket.h. ◆ fReadEntryOffset. bool TBasket::fReadEntryOffset {false}. protected . !Set to true if offset array was read from a file. ; Definition at line 69 of file TBasket.h. ◆ fResetAllocation. bool TBasket::fResetAllocation {false}. protected . ! True if last reset re-allocated the memory ; Definition at line 76 of file TBasket.h. ◆ kIOBitCount. constexpr int TBasket::kIOBitCount = 1. staticconstexpr . Definition at line 111 of file TBasket.h. Libraries for TBasket:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBasket.h; tree/tree/src/TBasket.cxx. TBasket. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasket.html:33509,Guid,Guide,33509,doc/master/classTBasket.html,https://root.cern,https://root.cern/doc/master/classTBasket.html,1,['Guid'],['Guide']
Usability,"en reset all the resetable object (those with a ResetAfterMerge routine, like TTree).; Loop on all objects in memory (including subdirectories). A new key is created in the KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TFile.; Definition at line 165 of file TParallelMergingFile.cxx. ◆ WriteStreamerInfo(). void TParallelMergingFile::WriteStreamerInfo ; (; ). overridevirtual . Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ; See class TStreamerInfo. ; Reimplemented from TFile.; Definition at line 188 of file TParallelMergingFile.cxx. Member Data Documentation. ◆ fClassSent. TArrayC* TParallelMergingFile::fClassSent. private . Definition at line 45 of file TParallelMergingFile.h. ◆ fMessage. TMessage TParallelMergingFile::fMessage. private . Definition at line 46 of file TParallelMergingFile.h. ◆ fServerIdx. Int_t TParallelMergingFile::fServerIdx. private . Definition at line 43 of file TParallelMergingFile.h. ◆ fServerLocation. TUrl TParallelMergingFile::fServerLocation. private . Definition at line 42 of file TParallelMergingFile.h. ◆ fServerVersion. Int_t TParallelMergingFile::fServerVersion. private . Definition at line 44 of file TParallelMergingFile.h. ◆ fSocket. TSocket* TParallelMergingFile::fSocket. private . Definition at line 41 of file TParallelMergingFile.h. Libraries for TParallelMergingFile:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TParallelMergingFile.h; net/net/src/TParallelMergingFile.cxx. TParallelMergingFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelMergingFile.html:49384,Guid,Guide,49384,doc/master/classTParallelMergingFile.html,https://root.cern,https://root.cern/doc/master/classTParallelMergingFile.html,1,['Guid'],['Guide']
Usability,"en signal efficiencyDefinition MethodCuts.cxx:551; TMVA::MethodCuts::PrintCutsvoid PrintCuts(Double_t effS) constprint cutsDefinition MethodCuts.cxx:465; TMVA::MinuitFitter/Fitter using MINUITDefinition MinuitFitter.h:48; TMVA::PDFPDF wrapper for histograms; uses user-defined spline interpolation.Definition PDF.h:63; TMVA::PDF::kSpline2@ kSpline2Definition PDF.h:70; TMVA::ResultsClass that is the base-class for a vector of result.Definition Results.h:57; TMVA::Results::Storevoid Store(TObject *obj, const char *alias=nullptr)Definition Results.cxx:86; TMVA::Results::GetHistTH1 * GetHist(const TString &alias) constDefinition Results.cxx:136; TMVA::SimulatedAnnealingFitterFitter using a Simulated Annealing Algorithm.Definition SimulatedAnnealingFitter.h:49; TMVA::TSpline1Linear interpolation of TGraph.Definition TSpline1.h:43; TMVA::TimerTiming information for training and evaluation of MVA methods.Definition Timer.h:58; TMVA::Timer::DrawProgressBarvoid DrawProgressBar(Int_t, const TString &comment="""")draws progress bar in color or B&W caution:Definition Timer.cxx:202; TMVA::Tools::ParseFormatLineTList * ParseFormatLine(TString theString, const char *sep="":"")Parse the string and cut into labels separated by "":"".Definition Tools.cxx:401; TMVA::Tools::Colorconst TString & Color(const TString &)human readable color stringsDefinition Tools.cxx:828; TMVA::Tools::ReadAttrvoid ReadAttr(void *node, const char *, T &value)read attribute from xmlDefinition Tools.h:329; TMVA::Tools::AddCommentBool_t AddComment(void *node, const char *comment)Definition Tools.cxx:1132; TMVA::Tools::GetChildvoid * GetChild(void *parent, const char *childname=nullptr)get child nodeDefinition Tools.cxx:1150; TMVA::Tools::AddAttrvoid AddAttr(void *node, const char *, const T &value, Int_t precision=16)add attribute to xmlDefinition Tools.h:347; TMVA::Tools::AddChildvoid * AddChild(void *parent, const char *childname, const char *content=nullptr, bool isRootNode=false)add child nodeDefinition Tools.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:83685,progress bar,progress bar,83685,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"en to disk, nor is there any streamerinfo for such a member.; A data member that is a C++ pointer (not to be confused with ""pointers to persistent; objects"" described below) is never written to disk as a pointer value. If it is a pointer to an object, the object itself (or 0 (4 bytes) if the pointer value is NULL) is written. If the declaration line has a comment beginning with ""//->"", this indicates that the pointer value will never be null, which allows a performance optimization. Another optimization is that if two or more pointers pointing to the same object are streamed in the same I/O operation, the object is written only once. The remaining pointers reference the object through a unique object identifier. This saves space and avoids the infinite loop that might otherwise arise if the directed graph of object instance pointer references contains a cycle.; If a data member is a pointer to a simple type, the Streamer presumes it is an array, with the dimension defined in a comment of the form ""//[<length>]"", where length is either an integer constant or a variable that is an integer data member of the class. If a variable is used, it must be defined ahead of its use or in a base class.; The above describes the function of the StreamerInfo record in decomposing a self-identifying object if the user uses the streamer generated by ""rootcint"". There are two reasons why a user may need to write a specialized streamer for a class. One reason is that it may be necessary to execute some code before or after data is read or written, for example, to initialize some non-persistent data members after the persistent data is read. In this case, the custom streamer can use the StreamerInfo record to decompose a self-identifying object in the exact same manner as the generated streamer would have done. An example is given (for the Event class) in the Root User's Guide (URL below) (Input/Output chapter, Streamers subchapter). On the other hand, if the user needs to write a stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootio.html:8991,simpl,simple,8991,doc/master/rootio.html,https://root.cern,https://root.cern/doc/master/rootio.html,1,['simpl'],['simple']
Usability,"en to the buffer directly. Eventually the buffer contains all simple data members of all the classes that make up this particular object. Data members that are references (as MyClass &fObj;) are never saved, it is always the responsibility of the object’s constructor to set them properly.; 11.3.1 Automatically Generated Streamers; A Streamerusually calls other Streamers: the Streamerof its parents and data members. This architecture depends on all classes having Streamers, because eventually they will be called. To ensure that a class has a Streamer, rootcling automatically creates one in the ClassDef macro that is defined in $ROOTSYS/include/Rtypes.h. ClassDef defines several methods for any class, and one of them is the Streamer. The automatically generated Streameris complete and can be used as long as no customization is needed.; The Event class is defined in $ROOTSYS/test/Event.h. Looking at the class definition, we find that it inherits from TObject. It is a simple example of a class with diverse data members.; class Event : public TObject {; private:; TDirectory *fTransient; //! current directory; Float_t fPt; //! transient value; char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; EventHeader fEvtHdr; //|| don't split; TClonesArray *fTracks; //->; TH1F *fH; //->; Int_t fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; ...; The Event class is added to the dictionary by the rootcling utility. This is the rootcling statement in the $ROOTSYS/test/Makefile:; @rootcling -f EventDict.cxx -c Event.h EventLinkDef.h; The EventDict.cxx file contains the automatically generated Streamerfor Event:; void Event::Streamer(TBuffer &R__b){; // Stream an object of class Event.; if (R__b.IsReading()) {; Event::Class()->ReadBuffer(R__b, this);; } else {; Event::Class()->WriteBuffer(R__b, this);; }; }; When writing an Event object, TClass::WriteBuffer is called. WriteBuffer writes the current version ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:467773,simpl,simple,467773,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"en(""root://my.server.org/data/file.root"",""new""); root[] TFile *f3 = TFile::Open(""http://root.cern.ch/files/hsimple.root""); root[] f3.ls(); TDavixFile** http://root.cern.ch/files/hsimple.root; TDavixFile* http://root.cern.ch/files/hsimple.root; KEY: TH1F hpx;1 This is the px distribution; KEY: TH2F hpxpy;1 py vs px; KEY: TProfile hprof;1 Profile of pz versus px; KEY: TNtuple ntuple;1 Demo ntuple; root[] hpx.Draw(); 11.8 XML Interface; A new module xml as implemented by Sergey Linev (GSI). It is an optional package that can be used to save a canvas into file.xml file format instead of file.root. XML files do not have any advantages compared to the normal ROOT files, except that the information in these files can be edited via a normal editor. The main motivation for this new format is to facilitate the communication with other non ROOT applications. Currently writing and reading XML files is limited to ROOT applications. It is our intention to develop a simple reader independent of the ROOT libraries that could be used as an example for real applications.; The XML format should be used only for small data volumes, typically histogram files, pictures, geometries, calibrations. The XML file is built in memory before being dumped to disk. Like for normal ROOT files, XML files use the same I/O mechanism exploiting the ROOT/Cling dictionary. Any class having a dictionary can be saved in XML format. This first implementation does not support subdirectories or trees.; The shared library libRXML.so may be loaded dynamically via gSystem->Load(""libRXML""). This library is also automatically loaded by the plug-in manager as soon a XML file is created. To create an XTM file, simply specify a filename with an .xml extension when calling TFile::Open. TFile::Open will recognize that you are trying to open an XML file and return a TXMLFile object. When a XML file is open in write mode, one can use the normal TObject::Write to write an object in the file.; // example of a session saving",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:517893,simpl,simple,517893,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"enCollectionProxy::DeleteItem(Bool_t force, void* ptr) const; 1351{; 1352 if ( force && ptr ) {; 1353 switch (fSTL_type) {; 1354 case ROOT::kSTLmap:; 1355 case ROOT::kSTLunorderedmap:; 1356 case ROOT::kSTLmultimap:; 1357 case ROOT::kSTLunorderedmultimap:{; 1358 if ( fKey->fCase&kIsPointer ) {; 1359 if (fKey->fProperties&kNeedDelete) {; 1360 TVirtualCollectionProxy *proxy = fKey->fType->GetCollectionProxy();; 1361 TPushPop helper(proxy,*(void**)ptr);; 1362 proxy->Clear(""force"");; 1363 }; 1364 fKey->DeleteItem(*(void**)ptr);; 1365 } else {; 1366 if (fKey->fProperties&kNeedDelete) {; 1367 TVirtualCollectionProxy *proxy = fKey->fType->GetCollectionProxy();; 1368 TPushPop helper(proxy,ptr);; 1369 proxy->Clear(""force"");; 1370 }; 1371 }; 1372 char *addr = ((char*)ptr)+fValOffset;; 1373 if ( fVal->fCase&kIsPointer ) {; 1374 if ( fVal->fProperties&kNeedDelete) {; 1375 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1376 TPushPop helper(proxy,*(void**)addr);; 1377 proxy->Clear(""force"");; 1378 }; 1379 fVal->DeleteItem(*(void**)addr);; 1380 } else {; 1381 if ( fVal->fProperties&kNeedDelete) {; 1382 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1383 TPushPop helper(proxy,addr);; 1384 proxy->Clear(""force"");; 1385 }; 1386 }; 1387 break;; 1388 }; 1389 default: {; 1390 if ( fVal->fCase&kIsPointer ) {; 1391 if (fVal->fProperties&kNeedDelete) {; 1392 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1393 TPushPop helper(proxy,*(void**)ptr);; 1394 proxy->Clear(""force"");; 1395 }; 1396 fVal->DeleteItem(*(void**)ptr);; 1397 } else {; 1398 if (fVal->fProperties&kNeedDelete) {; 1399 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1400 TPushPop helper(proxy,ptr);; 1401 proxy->Clear(""force"");; 1402 }; 1403 }; 1404 break;; 1405 }; 1406 }; 1407 }; 1408}; 1409 ; 1410////////////////////////////////////////////////////////////////////////////////; 1411 ; 1412void TGenCollectionProxy::ReadBuffer(TBuffer & /* b */, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:44166,Clear,Clear,44166,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,"enFile(filename);; let obj = await file.readObject(""hpxpy;1"");; await draw(""drawing"", obj, ""colz"");; </script>; Here the default location https://root.cern/js/latest/ is specified. One always can install JSROOT on private web server. When JSROOT is used with THttpServer, the address looks like:; <script type='module'>; import { httpRequest, draw } from 'http://your_root_server:8080/jsrootsys/modules/main.mjs';; let obj = await httpRequest('http://your_root_server:8080/Objects/hist/root.json','object');; await draw('drawing', obj, 'hist');; </script>; Loading main module is enough to get public JSROOT functionality - reading files and drawing objects. One also can load some special components directly like:; <script type='module'>; import { HierarchyPainter } from 'https://root.cern/js/latest/modules/gui.mjs';. let h = new HierarchyPainter(""example"", ""myTreeDiv"");. // configure 'simple' in provided <div> element; // one also can specify ""grid2x2"" or ""flex"" or ""tabs""; h.setDisplay(""simple"", ""myMainDiv"");. // open file and display element; await h.openRootFile('../../files/hsimple.root');; await h.display('hpxpy;1"",""colz');; </script>; After script loading one can configure different parameters in gStyle object. It is instance of the TStyle object and behaves like gStyle variable in ROOT. For instance, to change stat format using to display value in stats box:; import { gStyle } from 'https://root.cern/js/latest/modules/main.mjs';; gStyle.fStatFormat = '7.5g';; There is also settings object which contains all other JSROOT settings. For instance, one can configure custom format for different axes:; import { settings } from 'https://root.cern/js/latest/modules/main.mjs';; settings.XValuesFormat = '4.2g';; settings.YValuesFormat = '6.1f';; One also can use build/jsroot.js bundle to load all functionality at one and access it via JSROOT global handle:; <script src=""https://root.cern/js/latest/build/jsroot.js""></script>; <script>; // getting json string from somewhere; let o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:24060,simpl,simple,24060,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['simpl'],['simple']
Usability,"ename = ""https://root.cern/js/files/hsimple.root"";; let file = await openFile(filename);; let obj = await file.readObject(""hpxpy;1"");; await draw(""drawing"", obj, ""colz"");; </script>; Here the default location https://root.cern/js/latest/ is specified. One always can install JSROOT on private web server. When JSROOT is used with THttpServer, the address looks like:; <script type='module'>; import { httpRequest, draw } from 'http://your_root_server:8080/jsrootsys/modules/main.mjs';; let obj = await httpRequest('http://your_root_server:8080/Objects/hist/root.json','object');; await draw('drawing', obj, 'hist');; </script>; Loading main module is enough to get public JSROOT functionality - reading files and drawing objects. One also can load some special components directly like:; <script type='module'>; import { HierarchyPainter } from 'https://root.cern/js/latest/modules/gui.mjs';. let h = new HierarchyPainter(""example"", ""myTreeDiv"");. // configure 'simple' in provided <div> element; // one also can specify ""grid2x2"" or ""flex"" or ""tabs""; h.setDisplay(""simple"", ""myMainDiv"");. // open file and display element; await h.openRootFile('../../files/hsimple.root');; await h.display('hpxpy;1"",""colz');; </script>; After script loading one can configure different parameters in gStyle object. It is instance of the TStyle object and behaves like gStyle variable in ROOT. For instance, to change stat format using to display value in stats box:; import { gStyle } from 'https://root.cern/js/latest/modules/main.mjs';; gStyle.fStatFormat = '7.5g';; There is also settings object which contains all other JSROOT settings. For instance, one can configure custom format for different axes:; import { settings } from 'https://root.cern/js/latest/modules/main.mjs';; settings.XValuesFormat = '4.2g';; settings.YValuesFormat = '6.1f';; One also can use build/jsroot.js bundle to load all functionality at one and access it via JSROOT global handle:; <script src=""https://root.cern/js/latest/build/jsroo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:23956,simpl,simple,23956,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['simpl'],['simple']
Usability,"ename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >Adagrad Optimizer class. ; This class represents the Adagrad Optimizer. ; Definition at line 45 of file Adagrad.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdagrad (DeepNet_t &deepNet, Scalar_t learningRate=0.01, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdagrad ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:1678,learn,learningRate,1678,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['learn'],['learningRate']
Usability,"ename in this pavetext.Definition TPaveText.cxx:606; TPaveText::DrawFilevirtual void DrawFile(const char *filename, Option_t *option="""")Draw lines in filename in this pavetext.Definition TPaveText.cxx:254; TPaveText::EditTextvirtual void EditText()Edit text at the mouse position.Definition TPaveText.cxx:264; TPaveText::SetAllWithvirtual void SetAllWith(const char *text, Option_t *option, Double_t value)Set attribute option for all lines containing string text.Definition TPaveText.cxx:827; TPaveText::GetObjectvirtual TObject * GetObject(Double_t &ymouse, Double_t &yobj) constGet object pointed by the mouse in this pavetext.Definition TPaveText.cxx:317; TPaveText::SaveLinesvirtual void SaveLines(std::ostream &out, const char *name, Bool_t saved)Save lines of this pavetext as C++ statements on output stream out.Definition TPaveText.cxx:682; TPaveText::DeleteTextvirtual void DeleteText()Delete text at the mouse position.Definition TPaveText.cxx:227; TPaveText::Clearvoid Clear(Option_t *option="""") overrideClear all lines in this pavetext.Definition TPaveText.cxx:217; TPaveText::operator=TPaveText & operator=(const TPaveText &)assignment operatorDefinition TPaveText.cxx:141; TPaveText::AddBoxvirtual TBox * AddBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Add a new graphics box to this pavetext.Definition TPaveText.cxx:163; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPaveText::Paintvoid Paint(Option_t *option="""") overridePaint this pavetext with its current attributes.Definition TPaveText.cxx:419; TPaveText::GetLinevirtual TText * GetLine(Int_t number) constGet Pointer to line number in this pavetext.Definition TPaveText.cxx:284; TPaveText::fLabelTString fLabelLabel written at the top of the pavetext.Definition TPaveText.h:24; TPaveText::InsertLinevirtual void InsertLine()Add a new line at the mouse position.Definition TPaveText.cxx:386; TPaveText::GetLineWithvirtual TText * Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8cxx_source.html:41127,Clear,Clearvoid,41127,doc/master/TPaveText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DefVar () override;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the scatter plot with the given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TPolyMarker3D * fPolyMarker3D;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawPolyMarker3D.html:11827,Clear,ClearFormula,11827,doc/master/classTProofDrawPolyMarker3D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawPolyMarker3D.html,1,['Clear'],['ClearFormula']
Usability,"ename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DefVar () override;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the scatter plot with the given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TProofVectorContainer< Point3D_t > * fPoints;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfGraphs.html:11856,Clear,ClearFormula,11856,doc/master/classTProofDrawListOfGraphs.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfGraphs.html,1,['Clear'],['ClearFormula']
Usability,"ename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DefVar () override;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the scatter plot with the given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TProofVectorContainer< Point4D_t > * fPoints;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html:11877,Clear,ClearFormula,11877,doc/master/classTProofDrawListOfPolyMarkers3D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html,1,['Clear'],['ClearFormula']
Usability,"ename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetCommand(const char *command)TTimer; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetInterruptSyscalls(Bool_t set=kTRUE)TTimer; SetObject(TObject *object)TTimer; SetObjectStat(Bool_t stat)TObjectstatic; SetTime(Long_t milliSec)TTimerinline; SetTimerID(UInt_t id=0)TTimerinline; SetUniqueID(UInt_t uid)TObjectvirtual; SingleShot(Int_t milliSec, const char *receiver_class, void *receiver, const char *method)TTimerstatic; Start(Long_t milliSec=-1, Bool_t singleShot=kFALSE)TTimervirtual; Stop()TTimerinlinevirtual; Streamer(TBuffer &) overrideTTimervirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TTimerinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; Timeout()TTimerinlinevirtual; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TQObject(const TQObject &)=deleteTQObjectprivate; TQObject()TQObject; TSysEvtHandler()TSysEvtHandlerinline; TTimer(const TTimer &)=deleteTTimerprivate; TTimer(Long_t milliSec=0, Bool_t mode=kTRUE)TTimer; TTimer(TObject *obj, Long_t milliSec, Bool_t mode=kTRUE)TTimer; TTimer(const char *command, Long_t milliSec, Bool_t mode=kTRUE)TTimer; TurnOff()TTimervirtual; TurnOn()TTimervirtual; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TObject()TObjectvirtual; ~TQObject()TQObjectvirtual; ~TSysEvtHandler()TSysEvtHandlerinlinevirtual; ~TTimer()TTimerinlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTimer-members.html:9516,Guid,Guide,9516,doc/master/classTTimer-members.html,https://root.cern,https://root.cern/doc/master/classTTimer-members.html,1,['Guid'],['Guide']
Usability,"ence Guide ; .  . Loading...; Searching...; No Matches. StringUtils.cxx. Go to the documentation of this file. 1/// \file ROOT/StringUtils.hxx; 2/// \ingroup Base StdExt; 3/// \author Jonas Rembser <jonas.rembser@cern.ch>; 4/// \date 2021-08-09; 5 ; 6/*************************************************************************; 7 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 8 * All rights reserved. *; 9 * *; 10 * For the licensing terms see $ROOTSYS/LICENSE. *; 11 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 12 *************************************************************************/; 13 ; 14#include ""ROOT/StringUtils.hxx""; 15 ; 16namespace ROOT {; 17 ; 18/// Splits a string at each character in delims.; 19/// The behavior mimics `str.split` from Python,; 20/// \param[in] str String to tokenise.; 21/// \param[in] delims One or more delimiters used to split the string.; 22/// \param[in] skipEmpty Strip empty strings from the output.; 23std::vector<std::string> Split(std::string_view str, std::string_view delims, bool skipEmpty /* =false */); 24{; 25 std::vector<std::string> out;; 26 ; 27 std::size_t beg = 0;; 28 std::size_t end = 0;; 29 while ((end = str.find_first_of(delims, beg)) != std::string::npos) {; 30 if (!skipEmpty || end > beg); 31 out.emplace_back(str.substr(beg, end - beg));; 32 beg = end + 1;; 33 }; 34 if (!skipEmpty || str.size() > beg); 35 out.emplace_back(str.substr(beg, str.size() - beg));; 36 ; 37 return out;; 38}; 39 ; 40} // namespace ROOT; StringUtils.hxx; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Splitstd::vector< std::string > Split(std::string_view str, std::string_view delims, bool skipEmpty=false)Splits a string at each character in delims.Definition StringUtils.cxx:23. corefoundationsrcStringUtils.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/StringUtils_8cxx_source.html:2001,Guid,Guide,2001,doc/v632/StringUtils_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/StringUtils_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ence Guide ; .  . Loading...; Searching...; No Matches. Variables ; ROOT::Math::Minim Namespace Reference. Variables; static double gDefaultErrorDef = 1.;  ; static IOptions * gDefaultExtraOptions = nullptr;  ; static int gDefaultMaxCalls = 0;  ; static int gDefaultMaxIter = 0;  ; static std::string gDefaultMinimAlgo = ""Migrad"";  ; static std::string gDefaultMinimizer;  ; static double gDefaultPrecision = -1;  ; static int gDefaultPrintLevel = 0;  ; static int gDefaultStrategy = 1;  ; static double gDefaultTolerance = 1.E-2;  . Variable Documentation. ◆ gDefaultErrorDef. double ROOT::Math::Minim::gDefaultErrorDef = 1. static . Definition at line 32 of file MinimizerOptions.cxx. ◆ gDefaultExtraOptions. IOptions* ROOT::Math::Minim::gDefaultExtraOptions = nullptr. static . Definition at line 39 of file MinimizerOptions.cxx. ◆ gDefaultMaxCalls. int ROOT::Math::Minim::gDefaultMaxCalls = 0. static . Definition at line 35 of file MinimizerOptions.cxx. ◆ gDefaultMaxIter. int ROOT::Math::Minim::gDefaultMaxIter = 0. static . Definition at line 36 of file MinimizerOptions.cxx. ◆ gDefaultMinimAlgo. std::string ROOT::Math::Minim::gDefaultMinimAlgo = ""Migrad"". static . Definition at line 31 of file MinimizerOptions.cxx. ◆ gDefaultMinimizer. std::string ROOT::Math::Minim::gDefaultMinimizer. static . Definition at line 30 of file MinimizerOptions.cxx. ◆ gDefaultPrecision. double ROOT::Math::Minim::gDefaultPrecision = -1. static . Definition at line 34 of file MinimizerOptions.cxx. ◆ gDefaultPrintLevel. int ROOT::Math::Minim::gDefaultPrintLevel = 0. static . Definition at line 38 of file MinimizerOptions.cxx. ◆ gDefaultStrategy. int ROOT::Math::Minim::gDefaultStrategy = 1. static . Definition at line 37 of file MinimizerOptions.cxx. ◆ gDefaultTolerance. double ROOT::Math::Minim::gDefaultTolerance = 1.E-2. static . Definition at line 33 of file MinimizerOptions.cxx. ROOTMathMinim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Minim.html:1992,Guid,Guide,1992,doc/master/namespaceROOT_1_1Math_1_1Minim.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Minim.html,1,['Guid'],['Guide']
Usability,"ence Guide ; .  . Loading...; Searching...; No Matches. hsimpleProxyDriver.C File ReferenceTutorials » Tree tutorials. Detailed Description; This is the driver of the hsimpleProxy example. ; It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory; ; void hsimpleProxyDriver(); {; std::cout << gSystem->WorkingDirectory() << std::endl;; TFile *file = TFile::Open(""hsimple.root"");; if (!file){; std::cerr << ""Input file not found.\n"";; return ;; }; TTree *ntuple = nullptr;; file->GetObject(""ntuple"",ntuple);; std::string s1(__FILE__);; TString dir = gSystem->UnixPathName(s1.substr(0, s1.find_last_of(""\\/"")).c_str());; ntuple->Draw(dir+""/hsimpleProxy.C+"");; }; s1#define s1(x)Definition RSha256.hxx:91; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TDirectory::GetObjectvoid GetObject(const char *namecycle, T *&ptr)Get an object with proper type checking.Definition TDirectory.h:212; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TStringBasic string class.Definition TString.h:139; TSystem::UnixPathNamevirtual const char * UnixPathName(const char *unixpathname)Convert from a local pathname to a Unix pathname.Definition TSystem.cxx:1063; TSystem::WorkingDirectoryvirtual const char * WorkingDirectory()Return working directory.Definition TSystem.cxx:871; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; AuthorRene Brun ; Definition in file hsimpleProxyDriver.C. tutorialstreehsimpleProxyDriver.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsimpleProxyDriver_8C.html:2005,Guid,Guide,2005,doc/master/hsimpleProxyDriver_8C.html,https://root.cern,https://root.cern/doc/master/hsimpleProxyDriver_8C.html,1,['Guid'],['Guide']
Usability,"ence. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. NumericalMinimization.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ; Minimize the Rosenbrock function (a 2D -function); input : minimizer name + algorithm name randomSeed: = <0 : fixed value: 0 random with seed 0; >0 random with given seed; ; #include ""Math/Minimizer.h""; #include ""Math/Factory.h""; #include ""Math/Functor.h""; #include ""TRandom2.h""; #include ""TError.h""; #include <iostream>; ; double RosenBrock(const double *xx ); {; const double x = xx[0];; const double y = xx[1];; const double tmp1 = y-x*x;; const double tmp2 = 1-x;; return 100*tmp1*tmp1+tmp2*tmp2;; }; ; int NumericalMinimization(const char * minName = ""Minuit2"",; const char *algoName = """" ,; int randomSeed = -1); {; // create minimizer giving a name and a name (optionally) for the specific; // algorithm; // possible choices are:; // minName algoName; // Minuit /Minuit2 Migrad, Simplex,Combined,Scan (default is Migrad); // Minuit2 Fumili2; // Fumili; // GSLMultiMin ConjugateFR, ConjugatePR, BFGS,; // BFGS2, SteepestDescent; // GSLMultiFit; // GSLSimAn; // Genetic; ROOT::Math::Minimizer* minimum =; ROOT::Math::Factory::CreateMinimizer(minName, algoName);; if (!minimum) {; std::cerr << ""Error: cannot create minimizer \"""" << minName; << ""\"". Maybe the required library was not built?"" << std::endl;; return 1;; }; ; // set tolerance , etc...; minimum->SetMaxFunctionCalls(1000000); // for Minuit/Minuit2; minimum->SetMaxIterations(10000); // for GSL; minimum->SetTolerance(0.001);; minimum->SetPrintLevel(1);; ; // create function wrapper for minimizer; // a IMultiGenFunction type; ROOT::Math::Functor f(&RosenBrock,2);; double step[2] = {0.01,0.01};; // starting point; ; double variable[2] = { -1.,1.2};; if (randomSeed >= 0) {; TRandom2 r(randomSeed);; variable[0] = r.Uniform(-20,20);; variable[1] = r.Unifor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NumericalMinimization_8C.html:1117,Simpl,Simplex,1117,doc/master/NumericalMinimization_8C.html,https://root.cern,https://root.cern/doc/master/NumericalMinimization_8C.html,1,['Simpl'],['Simplex']
Usability,"ence< Real_t >::SymmetricReluDerivative ; (; TMatrixT< AReal > & ; B, . const TMatrixT< AReal > & ; A . ). inlinestatic . Definition at line 157 of file ActivationFunctions.hxx. ◆ Tanh(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::Tanh ; (; TMatrixT< AReal > & ; B). inlinestatic . Definition at line 109 of file ActivationFunctions.hxx. ◆ TanhDerivative(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::TanhDerivative ; (; TMatrixT< AReal > & ; B, . const TMatrixT< AReal > & ; A . ). inlinestatic . Definition at line 125 of file ActivationFunctions.hxx. ◆ UpdateParams(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::UpdateParams ; (; TMatrixT< AReal > & ; x, . TMatrixT< AReal > & ; tildeX, . TMatrixT< AReal > & ; y, . TMatrixT< AReal > & ; z, . TMatrixT< AReal > & ; fVBiases, . TMatrixT< AReal > & ; fHBiases, . TMatrixT< AReal > & ; fWeights, . TMatrixT< AReal > & ; VBiasError, . TMatrixT< AReal > & ; HBiasError, . AReal ; learningRate, . size_t ; fBatchSize . ). static . Definition at line 48 of file DenoisePropagation.hxx. ◆ UpdateParamsLogReg(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::UpdateParamsLogReg ; (; TMatrixT< AReal > & ; input, . TMatrixT< AReal > & ; output, . TMatrixT< AReal > & ; difference, . TMatrixT< AReal > & ; p, . TMatrixT< AReal > & ; fWeights, . TMatrixT< AReal > & ; fBiases, . AReal ; learningRate, . size_t ; fBatchSize . ). static . Definition at line 191 of file DenoisePropagation.hxx. Member Data Documentation. ◆ fgRandomGen. template<typename Real_t > . TRandom * TMVA::DNN::TReference< Real_t >::fgRandomGen = nullptr. staticprivate . Definition at line 55 of file Reference.h. tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h; tmva/tmva/src/DNN/Architectures/Reference/ActivationFunctions.hxx; tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx; tmva/tmva/src/DNN/Architectures/Reference/DenoisePropagation.hxx; tmva/tmva/src/DNN/Architectures/Reference/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:45581,learn,learningRate,45581,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,1,['learn'],['learningRate']
Usability,"enceSteps ; (; size_t ; steps). inline . Setters. ; Definition at line 153 of file DLMinimizers.h. ◆ SetLearningRate(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetLearningRate ; (; Scalar_t ; rate). inline . Definition at line 155 of file DLMinimizers.h. ◆ SetTestInterval(). template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::SetTestInterval ; (; size_t ; interval). inline . Definition at line 154 of file DLMinimizers.h. ◆ Step() [1/2]. template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::Step ; (; DeepNet_t & ; deepNet, . std::vector< Matrix_t > & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). Perform a single optimization step on a given batch. ; Propagates the input matrix forward through the net, evaluates the loss and propagates the gradients backward through the net. The computed gradients are scaled by the learning rate \(\alpha\) and subtracted from the weights and bias values of each layer. ; Definition at line 182 of file DLMinimizers.h. ◆ Step() [2/2]. template<typename Architecture_t > . void TMVA::DNN::TDLGradientDescent< Architecture_t >::Step ; (; DeepNet_t & ; master, . std::vector< DeepNet_t > & ; nets, . std::vector< TTensorBatch< Architecture_t > > & ; batches . ). Perform multiple optimization steps simultaneously. ; Performs the backprop algorithm on the input batches given in batches on the neural networks given in nets. The forward and backward propagation steps are executed in an interleaving manner in order to exploit potential batch-level parallelism for asynchronous device calls. ; Definition at line 246 of file DLMinimizers.h. ◆ StepLoss(). template<typename Architecture_t > . auto TMVA::DNN::TDLGradientDescent< Architecture_t >::StepLoss ; (; DeepNet_t & ; deepNet, . std::vector< Matrix_t > & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). Same as Step(...) but als",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:8257,learn,learning,8257,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['learn'],['learning']
Usability,ency of the filters applied ;  df004_cutFlowReport.py This tutorial shows how to get information about the efficiency of the filters applied ;  df005_fillAnyObject.C This tutorial shows how to fill any object the class of which exposes a Fill method ;  df006_ranges.C This tutorial shows how to express the concept of ranges when working with the RDataFrame ;  df006_ranges.py This tutorial shows how to express the concept of ranges when working with the RDataFrame ;  df007_snapshot.C This tutorial shows how to write out datasets in ROOT formatusing the RDataFrame ;  df007_snapshot.py This tutorial shows how to write out datasets in ROOT formatusing the RDataFrame ;  df008_createDataSetFromScratch.C This tutorial shows how to create a dataset from scratch with RDataFrame ;  df008_createDataSetFromScratch.py This tutorial shows how to create a dataset from scratch with RDataFrame ;  df009_FromScratchVSTTree.C This tutorial illustrates how simpler it can be to use a RDataFrame to create a dataset with respect to the usage of the TTree interfaces ;  df010_trivialDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df010_trivialDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df011_ROOTDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df011_ROOTDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df012_DefinesAndFiltersAsStrings.C ;  df012_DefinesAndFiltersAsStrings.py ;  df013_InspectAnalysis.C Showcase registration of callback functions that act on partial results while the event-loop is running using OnPartialResult and OnPartialResultSlot ;  df014_CSVDataSource.C This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df014_CSVDataSource.py This tutorial illustrates how use the RDataFrame in combination with a RDataSource ;  df015_LazyDataSource.C Thi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:99525,simpl,simpler,99525,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simpler']
Usability,"ency"" and label the axis pEff->SetTitle(""My Efficiency;x label;eff""); ; Reimplemented from TNamed.; Definition at line 3726 of file TEfficiency.cxx. ◆ SetTotalEvents(). Bool_t TEfficiency::SetTotalEvents ; (; Int_t ; bin, . Double_t ; events . ). Sets the number of total events in the given global bin. ; returns ""true"" if the number of total events has been updated otherwise ""false"" ist returned; Note: - requires: fPassedHistogram->GetBinContent(bin) <= events ; Definition at line 3760 of file TEfficiency.cxx. ◆ SetTotalHistogram(). Bool_t TEfficiency::SetTotalHistogram ; (; const TH1 & ; rTotal, . Option_t * ; opt . ). Sets the histogram containing all events. ; The given histogram is cloned and stored internally as histogram containing all events. The given histogram has to be consistent with the current fPassedHistogram (see CheckConsistency(const TH1&,const TH1&)). The method returns whether the fTotalHistogram has been replaced (true) or not (false).; Note: The list of associated functions fFunctions is cleared.; Option:; ""f"": force the replacement without checking the consistency This can lead to inconsistent histograms and useless results or unexpected behaviour. But sometimes it might be the only way to change the histograms. If you use this option, you should ensure that the fPassedHistogram is replaced by a consistent one (with respect to rTotal) as well. . Definition at line 3791 of file TEfficiency.cxx. ◆ SetUseWeightedEvents(). void TEfficiency::SetUseWeightedEvents ; (; Bool_t ; on = kTRUE). Definition at line 3825 of file TEfficiency.cxx. ◆ SetWeight(). void TEfficiency::SetWeight ; (; Double_t ; weight). Sets the global weight for this TEfficiency object. ; Note: - weight has to be positive ( > 0) ; Definition at line 3843 of file TEfficiency.cxx. ◆ Streamer(). void TEfficiency::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEfficiency::StreamerNVirtual ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:112396,clear,cleared,112396,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['clear'],['cleared']
Usability,"end feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Additional Inherited Members;  Public Types inherited from TProofPlayer; enum  EStatusBits { kDispatchOneEvent = (1ULL << ( 15 )); , kIsProcessing = (1ULL << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:22125,feedback,feedback,22125,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['feedback'],['feedback']
Usability,"end feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TDSet * fDSet;  ; ErrorHandlerFunc_t fErrorHandler;  tdset for current processing ;  ; TList * fFeedback;  ; TList * fFeedbackLists;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:20418,feedback,feedback,20418,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"end of the line. ; If necessary the text is truncated to fit MaxLength(). See also GetText(), InsertText(), SetText(), RemoveText(). ; Definition at line 1689 of file TGTextEntry.cxx. ◆ Backspace(). void TGTextEntry::Backspace ; (; ). Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ; If a text has been marked by the user (e.g. by clicking and dragging) the cursor will be put at the beginning of the marked text and the marked text will be removed. See also Del(). ; Definition at line 873 of file TGTextEntry.cxx. ◆ Class(). static TClass * TGTextEntry::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextEntry::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextEntry::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file TGTextEntry.h. ◆ Clear(). void TGTextEntry::Clear ; (; Option_t * ; option = """"). overridevirtual . Clears up the text entry. ; Reimplemented from TObject.; Definition at line 972 of file TGTextEntry.cxx. ◆ CopyText(). void TGTextEntry::CopyText ; (; ); const. protected . Copies the marked text to the clipboard, if there is any and GetEchoMode() is kNormal. ; See also Cut() Paste(). ; Definition at line 933 of file TGTextEntry.cxx. ◆ CursorLeft(). void TGTextEntry::CursorLeft ; (; Bool_t ; mark = kFALSE, . Int_t ; steps = 1 . ). Moves the cursor leftwards one or more characters. ; See also CursorRight(). ; Definition at line 835 of file TGTextEntry.cxx. ◆ CursorOutDown(). void TGTextEntry::CursorOutDown ; (; ). virtual . This signal is emitted when cursor is going out of bottom side. ; Definition at line 458 of file TGTextEntry.cxx. ◆ CursorOutLeft(). void TGTextEntry::CursorOutLeft ; (; ). virtual . This signal is emitted when cursor is going out of left side. ; Definition at line 434 of file TGTextEntry.cxx. ◆ CursorOutRight(). void TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:44714,Clear,Clear,44714,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['Clear'],['Clear']
Usability,"end signal ""Modified"" to pad.Definition TGeoPainter.cxx:1258; TGeoPainter::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE) overrideSet top geometry volume as visible.Definition TGeoPainter.cxx:2050; TGeoPainter::DrawPanelvoid DrawPanel() overrideDefinition TGeoPainter.cxx:1021; TGeoPainter::GetVisOptionInt_t GetVisOption() const overrideDefinition TGeoPainter.h:131; TGeoPainter::fVisOptionInt_t fVisOptionDefinition TGeoPainter.h:50; TGeoPainter::TestVoxelsBool_t TestVoxels(TGeoVolume *vol) overrideCheck voxels efficiency per volume.Definition TGeoPainter.cxx:2186; TGeoPhysicalNodePhysical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned ...Definition TGeoPhysicalNode.h:35; TGeoPolygonAn arbitrary polygon defined by vertices.Definition TGeoPolygon.h:19; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TVirtualGeoPainterAbstract class for geometry painters.Definition TVirtualGeoPainter.h:32; TVirtualGeoPainter::kGeoVisDefault@ kGeoVisDefaultDefinition TVirtualGeoPainter.h:40; TVirtualGeoTrackBase class for user-defined tracks attached to a geometry.Definition TVirtualGeoTrack.h:23; bool; double; int; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Drawth1 Draw(). geomgeompainterincTGeoPainter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8h_source.html:28752,Guid,Guide,28752,doc/master/TGeoPainter_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8h_source.html,1,['Guid'],['Guide']
Usability,"end. ; ""obj"" is the object to be represented. ""label"" is the text you wish to associate with obj in the legend. If ""label"" is null or empty, the title of the object will be used.; Options are:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified . Definition at line 320 of file TLegend.cxx. ◆ Class(). static TClass * TLegend::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLegend::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLegend::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file TLegend.h. ◆ Clear(). void TLegend::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear all entries in this legend, including the header. ; Reimplemented from TObject.; Definition at line 379 of file TLegend.cxx. ◆ Copy(). void TLegend::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this legend into ""obj"". ; Reimplemented from TBox.; Definition at line 388 of file TLegend.cxx. ◆ DeclFileName(). static const char * TLegend::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 82 of file TLegend.h. ◆ DeleteEntry(). void TLegend::DeleteEntry ; (; ). virtual . Delete entry at the mouse position. ; Definition at line 413 of file TLegend.cxx. ◆ Draw(). void TLegend::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this legend with its current attributes. ; Reimplemented from TBox.; Definition at line 425 of file TLegend.cxx. ◆ EditEntryAttFill(). void TLegend::EditEntryAttFill ; (; ). virtual . Edit the fill attributes for the entry pointed by the mouse. ; Definition at line 433 of file TLegend.cxx. ◆ EditEntryAttLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:37609,Clear,Clear,37609,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['Clear'],['Clear']
Usability,"endent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). void TMultiDimFit::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDimFit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:41714,Clear,Clear,41714,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['Clear'],['Clear']
Usability,"endl;; ; // Apply model as part of an RDataFrame workflow; ROOT::RDataFrame df(""Events"", ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/SMHiggsToZZTo4L.root"");; auto df2 = df.Filter(""nMuon >= 2""); .Filter(""nElectron >= 2""); .Define(""Muon_pt_1"", ""Muon_pt[0]""); .Define(""Muon_pt_2"", ""Muon_pt[1]""); .Define(""Electron_pt_1"", ""Electron_pt[0]""); .Define(""Electron_pt_2"", ""Electron_pt[1]""); .Define(""y"",; Compute<4, float>(bdt),; {""Muon_pt_1"", ""Muon_pt_2"", ""Electron_pt_1"", ""Electron_pt_2""});; ; std::cout << ""Mean response on the signal sample: "" << *df2.Mean(""y"") << std::endl;; }; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TMVA::Experimental::RBDTDefinition RBDT.hxx:37; TMVA::Experimental::RTensorRTensor is a container with contiguous memory and shape information.Definition RTensor.hxx:162; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; xDouble_t x[n]Definition legend1.C:17; TMVA::ExperimentalDefinition RModelParser_Keras.h:40; ; DateDecember 2018 ; AuthorStefan Wunsch ; Definition in file tmva103_Application.C. tutorialstmvatmva103_Application.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva103__Application_8C.html:3061,Guid,Guide,3061,doc/master/tmva103__Application_8C.html,https://root.cern,https://root.cern/doc/master/tmva103__Application_8C.html,1,['Guid'],['Guide']
Usability,"ene if we opened it. This must be done after modified; 3634 // flag is cleared, as some viewers will invoke another paint by marking pad modified again; 3635 if (began3DScene) {; 3636 fViewer3D->EndScene();; 3637 }; 3638}; 3639 ; 3640////////////////////////////////////////////////////////////////////////////////; 3641/// Paint the pad border.; 3642/// Draw first a box as a normal filled box; 3643 ; 3644void TPad::PaintBorder(Color_t color, Bool_t tops); 3645{; 3646 if (color >= 0) {; 3647 TAttLine::Modify(); //Change line attributes only if necessary; 3648 TAttFill::Modify(); //Change fill area attributes only if necessary; 3649 ; 3650 //With Cocoa we have a transparency. But we also have; 3651 //pixmaps, and if you just paint a new content over the old one; 3652 //with alpha < 1., you'll be able to see the old content.; 3653 if (!gROOT->IsBatch() && gVirtualX->InheritsFrom(""TGCocoa"") && GetPainter()); 3654 GetPainter()->ClearDrawable();; 3655 ; 3656 PaintBox(fX1,fY1,fX2,fY2);; 3657 }; 3658 if (color < 0) color = -color;; 3659 // then paint 3d frame (depending on bordermode); 3660 if (IsTransparent()) return;; 3661 // Paint a 3D frame around the pad.; 3662 ; 3663 if (fBorderMode == 0) return;; 3664 Int_t bordersize = fBorderSize;; 3665 if (bordersize <= 0) bordersize = 2;; 3666 ; 3667 const Double_t realBsX = bordersize / (GetAbsWNDC() * GetWw()) * (fX2 - fX1);; 3668 const Double_t realBsY = bordersize / (GetAbsHNDC() * GetWh()) * (fY2 - fY1);; 3669 ; 3670 Short_t px1,py1,px2,py2;; 3671 Double_t xl, xt, yl, yt;; 3672 ; 3673 // GetColorDark() and GetColorBright() use GetFillColor(); 3674 Color_t oldcolor = GetFillColor();; 3675 SetFillColor(color);; 3676 TAttFill::Modify();; 3677 Color_t light = 0, dark = 0;; 3678 if (color != 0) {; 3679 light = TColor::GetColorBright(color);; 3680 dark = TColor::GetColorDark(color);; 3681 }; 3682 ; 3683 // Compute real left bottom & top right of the box in pixels; 3684 px1 = XtoPixel(fX1); py1 = YtoPixel(fY1);; 3685 px2 = XtoPixel(f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:115124,Clear,ClearDrawable,115124,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Clear'],['ClearDrawable']
Usability,"ense_1Relu0, &op_4_lda, &op_4_beta, tensor_dense_2Dense, &op_4_n);; ; //------ RELU; for (int id = 0; id < 64 ; id++){; tensor_dense_2Relu0[id] = ((tensor_dense_2Dense[id] > 0 )? tensor_dense_2Dense[id] : 0);; }; ; //--------- Gemm; char op_6_transA = 'n';; char op_6_transB = 'n';; int op_6_m = 1;; int op_6_n = 64;; int op_6_k = 64;; float op_6_alpha = 1;; float op_6_beta = 1;; int op_6_lda = 64;; int op_6_ldb = 64;; std::copy(tensor_dense_3bias0bcast, tensor_dense_3bias0bcast + 64, tensor_dense_3Dense);; BLAS::sgemm_(&op_6_transB, &op_6_transA, &op_6_n, &op_6_m, &op_6_k, &op_6_alpha, tensor_dense_3kernel0, &op_6_ldb, tensor_dense_2Relu0, &op_6_lda, &op_6_beta, tensor_dense_3Dense, &op_6_n);; ; //------ RELU; for (int id = 0; id < 64 ; id++){; tensor_dense_3Relu0[id] = ((tensor_dense_3Dense[id] > 0 )? tensor_dense_3Dense[id] : 0);; }; ; //--------- Gemm; char op_8_transA = 'n';; char op_8_transB = 'n';; int op_8_m = 1;; int op_8_n = 2;; int op_8_k = 64;; float op_8_alpha = 1;; float op_8_beta = 1;; int op_8_lda = 64;; int op_8_ldb = 2;; std::copy(tensor_dense_4bias0bcast, tensor_dense_4bias0bcast + 2, tensor_dense_4Dense);; BLAS::sgemm_(&op_8_transB, &op_8_transA, &op_8_n, &op_8_m, &op_8_k, &op_8_alpha, tensor_dense_4kernel0, &op_8_ldb, tensor_dense_3Relu0, &op_8_lda, &op_8_beta, tensor_dense_4Dense, &op_8_n);; for (int id = 0; id < 2 ; id++){; tensor_dense_4Sigmoid0[id] = 1 / (1 + std::exp( - tensor_dense_4Dense[id]));; }; return fTensor_dense_4Sigmoid0;; }; }; // end of Session; } //TMVA_SOFIE_Higgs_trained_model; ; #endif // ROOT_TMVA_SOFIE_HIGGS_TRAINED_MODEL; compiled : #include ""Higgs_trained_model.hxx""; compiled : auto sofie_functor = TMVA::Experimental::SofieFunctor<7,TMVA_SOFIE_Higgs_trained_model::Session>(0);; Model is ready to be evaluated; AuthorLorenzo Moneta ; Definition in file TMVA_SOFIE_RDataFrame_JIT.C. tutorialstmvaTMVA_SOFIE_RDataFrame_JIT.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame__JIT_8C.html:21494,Guid,Guide,21494,doc/master/TMVA__SOFIE__RDataFrame__JIT_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame__JIT_8C.html,1,['Guid'],['Guide']
Usability,"ense_2Dense[id] : 0);; }; ; //--------- Gemm; char op_6_transA = 'n';; char op_6_transB = 'n';; int op_6_m = 1;; int op_6_n = 64;; int op_6_k = 64;; float op_6_alpha = 1;; float op_6_beta = 1;; int op_6_lda = 64;; int op_6_ldb = 64;; std::copy(tensor_dense_3bias0bcast, tensor_dense_3bias0bcast + 64, tensor_dense_3Dense);; BLAS::sgemm_(&op_6_transB, &op_6_transA, &op_6_n, &op_6_m, &op_6_k, &op_6_alpha, tensor_dense_3kernel0, &op_6_ldb, tensor_dense_2Relu0, &op_6_lda, &op_6_beta, tensor_dense_3Dense, &op_6_n);; ; //------ RELU; for (int id = 0; id < 64 ; id++){; tensor_dense_3Relu0[id] = ((tensor_dense_3Dense[id] > 0 )? tensor_dense_3Dense[id] : 0);; }; ; //--------- Gemm; char op_8_transA = 'n';; char op_8_transB = 'n';; int op_8_m = 1;; int op_8_n = 2;; int op_8_k = 64;; float op_8_alpha = 1;; float op_8_beta = 1;; int op_8_lda = 64;; int op_8_ldb = 2;; std::copy(tensor_dense_4bias0bcast, tensor_dense_4bias0bcast + 2, tensor_dense_4Dense);; BLAS::sgemm_(&op_8_transB, &op_8_transA, &op_8_n, &op_8_m, &op_8_k, &op_8_alpha, tensor_dense_4kernel0, &op_8_ldb, tensor_dense_3Relu0, &op_8_lda, &op_8_beta, tensor_dense_4Dense, &op_8_n);; for (int id = 0; id < 2 ; id++){; tensor_dense_4Sigmoid0[id] = 1 / (1 + std::exp( - tensor_dense_4Dense[id]));; }; return fTensor_dense_4Sigmoid0;; }; }; // end of Session; } //TMVA_SOFIE_Higgs_trained_model; ; #endif // ROOT_TMVA_SOFIE_HIGGS_TRAINED_MODEL; TF/Keras Version: 2.13.0; Generating inference code for the Keras model from Higgs_trained_model.h5 in the header Higgs_trained_model.hxx; compiling SOFIE model Higgs_trained_model; Generating inference code for the Keras model from Higgs_trained_model.h5 in the header Higgs_trained_model.hxx; size of data 10000; Number of signal entries 10000.0; Number of background entries 10000.0; AuthorLorenzo Moneta ; Definition in file TMVA_SOFIE_Inference.py. tutorialstmvaTMVA_SOFIE_Inference.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__Inference_8py.html:19386,Guid,Guide,19386,doc/master/TMVA__SOFIE__Inference_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__Inference_8py.html,1,['Guid'],['Guide']
Usability,"ensible default value here; auto df_default = df.DefaultValueFor(""col"", default_value).Define(""twice"", ""col * 2"");; auto df_filtered = df.FilterAvailable(""col"").Define(""twice"", ""col * 2"");; ; // Same number of total entries as the input dataset, with defaulted values; df_default.Display({""twice""})->Print();; // Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterprete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:86817,simpl,simple,86817,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"ension *ext);  Connect framework defined extension to the material. ;  ; void SetIndex (Int_t index);  ; void SetPressure (Double_t pressure);  ; void SetRadLen (Double_t radlen, Double_t intlen=0.);  Set radiation/absorption lengths. ;  ; void SetState (EGeoMaterialState state);  ; void SetTemperature (Double_t temperature);  ; void SetTransparency (Char_t transparency=0);  ; void SetUsed (Bool_t flag=kTRUE);  ; void SetUserExtension (TGeoExtension *ext);  Connect user-defined extension to the material. ;  ; virtual void SetZ (Double_t z);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMaterial.html:7383,Clear,Clear,7383,doc/master/classTGeoMaterial.html,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html,1,['Clear'],['Clear']
Usability,"ensiveObjectCache ; (; ). inline . Definition at line 27 of file RooExpensiveObjectCache.h. ◆ RooExpensiveObjectCache() [2/2]. RooExpensiveObjectCache::RooExpensiveObjectCache ; (; const RooExpensiveObjectCache & ; other). inline . Definition at line 28 of file RooExpensiveObjectCache.h. ◆ ~RooExpensiveObjectCache(). RooExpensiveObjectCache::~RooExpensiveObjectCache ; (; ). override . Destructor. ; Definition at line 45 of file RooExpensiveObjectCache.cxx. Member Function Documentation. ◆ Class(). static TClass * RooExpensiveObjectCache::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooExpensiveObjectCache::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooExpensiveObjectCache::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ clearAll(). void RooExpensiveObjectCache::clearAll ; (; ). Clear all cache elements. ; Definition at line 164 of file RooExpensiveObjectCache.cxx. ◆ clearObj(). bool RooExpensiveObjectCache::clearObj ; (; Int_t ; uniqueID). Clear cache element with given unique ID Retrieve payload object of cache element with given unique ID. ; Definition at line 131 of file RooExpensiveObjectCache.cxx. ◆ DeclFileName(). static const char * RooExpensiveObjectCache::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ empty(). bool RooExpensiveObjectCache::empty ; (; ); const. inline . Definition at line 44 of file RooExpensiveObjectCache.h. ◆ getObj(). const TObject * RooExpensiveObjectCache::getObj ; (; Int_t ; uniqueID). Retrieve payload object of cache element with given unique ID. ; Definition at line 115 of file RooExpensiveObjectCache.cxx. ◆ importCacheObjects(). void RooExpensiveObjectCache::importCacheObjects ; (; RooExpensiveObjectCache & ; other, . const char * ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:12853,Clear,Clear,12853,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,1,['Clear'],['Clear']
Usability,"ent = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:2188,Clear,ClearFeedback,2188,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['Clear'],['ClearFeedback']
Usability,"ent Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies.; However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects.; When a TRef is used to point to a TObject *robj, for example in a class with; TRef fRef;; one can do:; fRef = robj; //to set the pointer; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be autoloaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:; - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber.; After having set fRef, one can immediatly return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID).; When the TRef is read, its pointer fPID is set to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRef.html:1616,simpl,simply,1616,root/html528/TRef.html,https://root.cern,https://root.cern/root/html528/TRef.html,6,['simpl'],['simply']
Usability,"ent direction (nx,ny,nz). This direction is stored as Double_t fCurrentDirection[3] by the navigator and it represents a direction in the global frame. It can be retrieved with:; Const Double_t *cdir = gGeoManager->GetCurrentDirection();; TGeoManager::GetCurrentDirectionconst Double_t * GetCurrentDirection() constDefinition TGeoManager.h:502; The direction can be initialized in a similar manner as the current point:; gGeoManager->SetCurrentDirection(nx,ny,nz);; // or:; gGeoManager->SetCurrentDirection(Double_t *dir);; TGeoManager::SetCurrentDirectionvoid SetCurrentDirection(Double_t *dir)Definition TGeoManager.h:518. Initializing the State; Setting the initial point and direction is not enough for initializing tracking. The modeller needs to find out where the initial point is located in the geometrical hierarchy. Due to the containment based architecture of the model, this is the deepest positioned object containing the point. For illustrating this, imagine that we have a simple structure with a top volume A and another one Bpositioned inside. Since Ais a top volume, its associated node A_1 will define MARS and our simple hierarchy of nodes (positioned volumes) will be: /A_1/B_1. Suppose now that the initial point is contained by B_1. This implies by default that the point is also contained by A_1, since B_1 have to be fully contained by this. After searching the point location, the modeller will consider that the point is located inside B_1, which will be considered as the representative object (node) for the current state. This is stored as: TGeoNode *TGeoNavigator::fCurrentNode and can be asked from the manager class only after the ‘'Where am I?’` was completed:; TGeoNode *current = gGeoManager->GetCurrentNode();; TGeoManager::GetCurrentNodeTGeoNode * GetCurrentNode() constDefinition TGeoManager.h:499; In order to find the location of the current point inside the hierarchy of nodes, after setting this point it is mandatory to call the ‘‘Where am I?’` method:; gGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:70688,simpl,simple,70688,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"ent variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char[] path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. const TSeqCollection * GetListOfGlobals(); Return the list of globals. TCollection * GetListOfGlobalFunctions(); Return the list of global functions. const TSeqCollection * GetListOfPragmas(); Return the list of pragmas. const TSeqCollection * GetListOfSysIncFiles(); Return the list of system include files. const TSeqCollection * GetListOfUsers(); reads from ""/etc/passwd"". Char_t AllAgreeOnChar(int i, const TSeqCollection* pList, Int_t& nGoodStrings); [static utility function]. if all the strings in ""*pList"" have the same it",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:8729,clear,clears,8729,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['clear'],['clears']
Usability,"ent); TList*fUnAllocatednodes with unallocated files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerAdaptive(); Destructor. void InitStats(); (re)initialise the statistics; called at the begining or after a worker dies. void RemoveUnAllocNode(TPacketizerAdaptive::TFileNode* ); Remove unallocated node. void RemoveActive(TPacketizerAdaptive::TFileStat* file); Remove file from the list of actives. void RemoveActiveNode(TPacketizerAdaptive::TFileNode* ); Remove node from the list of actives. void Reset(); Reset the internal data structure for packet distribution. void ValidateFiles(TDSet* dset, TList* slaves, Long64_t maxent = -1, Bool_t byfile = kFALSE); Check existence of file/dir/tree an get number of entries.; Assumes the files have been setup. Int_t CalculatePacketSize(TObject* slstat, Long64_t cachesz, Int_t learnent); The result depends on the fStrategy. Int_t AddProcessed(TSlave* sl, TProofProgressStatus* st, Double_t latency, TList** listOfMissingFiles = 0); To be used by GetNextPacket but also in reaction to kPROOF_STOPPROCESS; message (when the worker was asked to stop processing during a packet).; returns the #entries intended in the last packet - #processed entries. TDSetElement * GetNextPacket(TSlave* sl, TMessage* r); Get next packet;; A meaningfull difference to TPacketizer is the fact that this; packetizer, for each worker, tries to predict whether the worker; will finish processing it's local files before the end of the query.; If yes, it allocates, to those workers, files from non-slave filenodes; or from slaves that are overloaded. The check is done every time a new; file needs to be assigned. Int_t GetActiveWorkers(); Return the number of workers still processing. Float_t GetCurrentRate(Bool_t& all); Get Estimation of the current rate; just summing the current rate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPacketizerAdaptive.html:12588,learn,learnent,12588,root/html530/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html530/TPacketizerAdaptive.html,5,['learn'],['learnent']
Usability,"ent* re); virtual voidAddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAnyParentAs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveSceneInfo.html:1972,Clear,ClearStamps,1972,root/html530/TEveSceneInfo.html,https://root.cern,https://root.cern/root/html530/TEveSceneInfo.html,5,['Clear'],['ClearStamps']
Usability,"ent. ;  ; virtual void AddAunt (REveAunt *au);  Add el into the list aunts. ;  ; virtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual Bool_t CanEditMainTransparency () const;  ; virtual void CheckReferenceCount (const std::string &from=""<unknown>"");  Check external references to this and eventually auto-destruct the render-element. ;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (REveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual REveElement * CloneElement () const;  Clone the element via copy constructor. ;  ; virtual REveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:3713,Clear,ClearStamps,3713,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,1,['Clear'],['ClearStamps']
Usability,"ent. ;  ; virtual void AddAunt (REveAunt *au);  Add el into the list aunts. ;  ; virtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual Bool_t CanEditMainTransparency () const;  ; virtual void CheckReferenceCount (const std::string &from=""<unknown>"");  Check external references to this and eventually auto-destruct the render-element. ;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (REveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual REveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it will always be taken as identity. ;  ; virtual void DestroyOrWarn ();  Destroy this element.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:5441,Clear,ClearStamps,5441,doc/master/classROOT_1_1Experimental_1_1REveLine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html,2,['Clear'],['ClearStamps']
Usability,"ent. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:2999,simpl,simple,2999,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['simpl'],['simple']
Usability,"ent.h:252; TStreamerLoop::Classstatic TClass * Class(); TStreamerObjectAnyPointerDefinition TStreamerElement.h:352; TStreamerObjectAnyDefinition TStreamerElement.h:312; TStreamerObjectPointerDefinition TStreamerElement.h:331; TStreamerObjectDefinition TStreamerElement.h:293; TStreamerSTLDefinition TStreamerElement.h:391; TStreamerSTL::Classstatic TClass * Class(); TStreamerSTL::IsBaseBool_t IsBase() const overrideReturn kTRUE if the element represent a base class.Definition TStreamerElement.cxx:1839; TStreamerSTLstringDefinition TStreamerElement.h:425; TStreamerStringDefinition TStreamerElement.h:373; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::Dataconst char * Data() constDefinition TString.h:376; TString::kTrailing@ kTrailingDefinition TString.h:276; TString::PrependTString & Prepend(const char *cs)Definition TString.h:673; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::Classstatic TClass * Class(); TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::BaseNamevirtual con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:291261,Clear,Clearvoid,291261,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,3,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ent=nullptr)TGCompositeFrame; TGFrame(const TGFrame &)=deleteTGFrameprivate; TGFrame(const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground())TGFrame; TGFrame(TGClient *c, Window_t id, const TGWindow *parent=nullptr)TGFrame; TGMainFrame(const TGMainFrame &)=deleteTGMainFrameprivate; TGMainFrame(const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame)TGMainFrame; TGObject()TGObjectinline; TGObject(const TGObject &tgo)TGObjectinline; TGWindow(Window_t id)TGWindowinlineprotected; TGWindow(const TGWindow &tgw)TGWindowinlineprotected; TGWindow(const TGWindow *p=nullptr, Int_t x=0, Int_t y=0, UInt_t w=0, UInt_t h=0, UInt_t border=0, Int_t depth=0, UInt_t clss=0, void *visual=nullptr, SetWindowAttributes_t *attr=nullptr, UInt_t wtype=0)TGWindow; TGWindow(TGClient *c, Window_t id, const TGWindow *parent=nullptr)TGWindow; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TQObject(const TQObject &)=deleteTQObjectprivate; TQObject()TQObject; TranslateCoordinates(TGFrame *child, Int_t x, Int_t y, Int_t &fx, Int_t &fy)TGCompositeFramevirtual; TTreeViewer(const char *treeName=nullptr)TTreeViewer; TTreeViewer(const TTree *tree)TTreeViewer; UnmapWindow() overrideTGFrameinlinevirtual; UpdateCombo()TTreeViewer; UpdateRecord(const char *name=""new name"")TTreeViewer; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TGCompositeFrame() overrideTGCompositeFrame; ~TGFrame() overrideTGFrame; ~TGMainFrame() overrideTGMainFrame; ~TGObject() overrideTGObject; ~TGWindow() overrideTGWindow; ~TObject()TObjectvirtual; ~TQObject()TQObjectvirtual; ~TTreeViewer() overrideTTreeViewer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer-members.html:25933,Guid,Guide,25933,doc/master/classTTreeViewer-members.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer-members.html,1,['Guid'],['Guide']
Usability,"ent> Randomize(double alpha, double beta, Double_t& seed); Randomize matrix element values. void TMatrixTBase<Element> Streamer(TBuffer& ); Stream an object of class TMatrixTBase<Element>. template<class Element> Element TMatrixTBase<Element> SetTol(double tol). Element * GetElements(). Int_t GetRowLwb() const; { return fRowLwb; }. Int_t GetRowUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetColLwb() const; { return fColLwb; }. Int_t GetColUpb() const; { return fNcols+fColLwb-1; }. Int_t GetNcols() const; { return fNcols; }. Int_t GetNoElements() const; { return fNelems; }. Element GetTol() const; { return fTol; }. const Element * GetMatrixArray() const. Element * GetMatrixArray(). const Int_t * GetRowIndexArray() const. Int_t * GetRowIndexArray(). const Int_t * GetColIndexArray() const. Int_t * GetColIndexArray(). TMatrixTBase<Element> & SetRowIndexArray(Int_t* data). TMatrixTBase<Element> & SetColIndexArray(Int_t* data). void Clear(Option_t* option = """"). void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. TMatrixTBase<Element> & GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, TMatrixTBase<double>& target, Option_t* option = ""S"") const. TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1). TMatrixTBase<Element> & ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros = -1). Double_t Determinant() const; { AbstractMethod(""Determinant()""); return 0.; }. void Determinant(Double_t& d1, Double_t& d2) const; { AbstractMethod(""Determinant()""); d1 = 0.; d2 = 0.; }. Element NormInf() const; { return RowNorm(); }. Element Norm1() const; { return ColNorm(); }. Element operator()(Int_t rown, Int_t coln) const. Element & operator()(Int_t rown, Int_t coln). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-30 15:19",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTBase_double_.html:21912,Clear,Clear,21912,root/html602/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTBase_double_.html,1,['Clear'],['Clear']
Usability,"ent> Randomize(float alpha, float beta, Double_t& seed); Randomize matrix element values. void TMatrixTBase<Element> Streamer(TBuffer& ); Stream an object of class TMatrixTBase<Element>. template<class Element> Element TMatrixTBase<Element> SetTol(float newTol). Element * GetElements(). Int_t GetRowLwb() const; { return fRowLwb; }. Int_t GetRowUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetColLwb() const; { return fColLwb; }. Int_t GetColUpb() const; { return fNcols+fColLwb-1; }. Int_t GetNcols() const; { return fNcols; }. Int_t GetNoElements() const; { return fNelems; }. Element GetTol() const; { return fTol; }. const Element * GetMatrixArray() const. Element * GetMatrixArray(). const Int_t * GetRowIndexArray() const. Int_t * GetRowIndexArray(). const Int_t * GetColIndexArray() const. Int_t * GetColIndexArray(). TMatrixTBase<Element> & SetRowIndexArray(Int_t* data). TMatrixTBase<Element> & SetColIndexArray(Int_t* data). void Clear(Option_t* option = """"). void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. TMatrixTBase<Element> & GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, TMatrixTBase<float>& target, Option_t* option = ""S"") const. TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1). TMatrixTBase<Element> & ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros = -1). Double_t Determinant() const; { AbstractMethod(""Determinant()""); return 0.; }. void Determinant(Double_t& d1, Double_t& d2) const; { AbstractMethod(""Determinant()""); d1 = 0.; d2 = 0.; }. Element NormInf() const; { return RowNorm(); }. Element Norm1() const; { return ColNorm(); }. Element operator()(Int_t rown, Int_t coln) const. Element & operator()(Int_t rown, Int_t coln). » Last changed: root/matrix:$Id$ » Last generated: 2015-03-14 16:45;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMatrixTBase_float_.html:21311,Clear,Clear,21311,root/html534/TMatrixTBase_float_.html,https://root.cern,https://root.cern/root/html534/TMatrixTBase_float_.html,1,['Clear'],['Clear']
Usability,"ent> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, double* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const double* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<double>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<double>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t index); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const double* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, double* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVectorT_double_.html:19138,Clear,Clear,19138,root/html604/TVectorT_double_.html,https://root.cern,https://root.cern/root/html604/TVectorT_double_.html,1,['Clear'],['Clear']
Usability,"ent> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, double* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const double* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<double>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<double>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t index); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const double* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, double* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVectorT_double_.html:19138,Clear,Clear,19138,root/html602/TVectorT_double_.html,https://root.cern,https://root.cern/root/html602/TVectorT_double_.html,1,['Clear'],['Clear']
Usability,"entQuery (TQueryResult *q) override;  Set current query and save previous value. ;  ; void SetDispatchTimer (Bool_t on=kTRUE) override;  Enable/disable the timer to dispatch pening events while processing. ;  ; void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt) override;  Set draw feedback option. ;  ; void SetExitStatus (EExitStatus st) override;  ; void SetInitTime () override;  ; void SetMaxDrawQueries (Int_t max) override;  ; void SetMerging (Bool_t=kTRUE) override;  ; void SetOutputFilePath (const char *fp) override;  ; void SetProcessing (Bool_t on=kTRUE);  Set processing bit according to 'on'. ;  ; void SetStopTimer (Bool_t on=kTRUE, Bool_t abort=kFALSE, Int_t timeout=0) override;  Enable/disable the timer to stop/abort processing. ;  ; virtual void StopFeedback ();  Stop feedback (may not be used in this class). ;  ; void StopProcess (Bool_t abort, Int_t timeout=-1) override;  Stop the process after this event. ;  ; void StoreFeedback (TObject *slave, TList *out) override;  Store feedback list (may not be used in this class). ;  ; void StoreOutput (TList *out) override;  Store output list (may not be used in this class). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateAutoBin (const char *name, Double_t &xmin, Double_t &xmax, Double_t &ymin, Double_t &ymax, Double_t &zmin, Double_t &zmax) override;  Update automatic binning parameters for given object ""name"". ;  ; void UpdateProgressInfo () override;  Update fProgressStatus. ;  ;  Public Member Functions inherited from TVirtualProofPlayer;  TVirtualProofPlayer ();  ;  ~TVirtualProofPlayer () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:7721,feedback,feedback,7721,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,"entStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTQCommand::Init(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = NULL); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = NULL); virtual voidPrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidTQCommand::PrintCollectionHeader(Option_t* option) const. Data Members; public:. enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:15884,undo,undo,15884,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,4,['undo'],['undo']
Usability,"entation. ; . Function Members (Methods); public:. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); virtual~RooObjCacheManager(); Int_tRooCacheManager<RooAbsCacheElement>::cacheSize() const; static TClass*Class(); virtual voidfindConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; Int_tRooCacheManager<RooAbsCacheElement>::lastIndex() const; const RooNameSet*RooCacheManager<RooAbsCacheElement>::nameSet1ByIndex(Int_t index) const; const RooNameSet*RooCacheManager<RooAbsCacheElement>::nameSet2ByIndex(Int_t index) const; RooObjCacheManager&operator=(const RooObjCacheManager&); virtual voidoperModeHook(); virtual voidoptimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooCacheManager<RooAbsCacheElement>::reset(); Int_tRooCacheManager<RooAbsCacheElement>::setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tRooCacheManager<RooAbsCacheElement>::setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); voidRooCacheManager<RooAbsCacheElement>::sterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Bool_t_clearOnRedirect;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooObjCacheManager.html:1058,clear,clearCacheOnServerRedirect,1058,root/html528/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html528/RooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,"entation. ◆ AddColumn(). void TRobustEstimator::AddColumn ; (; Double_t * ; col). adds a column to the data matrix it is assumed that the column has size fN variable fVarTemp keeps the number of columns l already added ; Definition at line 171 of file TRobustEstimator.cxx. ◆ AddRow(). void TRobustEstimator::AddRow ; (; Double_t * ; row). adds a vector to the data matrix it is supposed that the vector is of size fNvar ; Definition at line 192 of file TRobustEstimator.cxx. ◆ AddToSscp(). void TRobustEstimator::AddToSscp ; (; TMatrixD & ; sscp, . TVectorD & ; vec . ). protected . update the sscp matrix with vector vec ; Definition at line 779 of file TRobustEstimator.cxx. ◆ Classic(). void TRobustEstimator::Classic ; (; ). protected . called when h=n. ; Returns classic covariance matrix and mean ; Definition at line 809 of file TRobustEstimator.cxx. ◆ ClearSscp(). void TRobustEstimator::ClearSscp ; (; TMatrixD & ; sscp). protected . clear the sscp matrix, used for covariance and mean calculation ; Definition at line 796 of file TRobustEstimator.cxx. ◆ Correl(). void TRobustEstimator::Correl ; (; ). protected . transforms covariance matrix into correlation matrix ; Definition at line 850 of file TRobustEstimator.cxx. ◆ Covar(). void TRobustEstimator::Covar ; (; TMatrixD & ; sscp, . TVectorD & ; m, . TMatrixDSym & ; cov, . TVectorD & ; sd, . Int_t ; nvec . ). protected . calculates mean and covariance ; Definition at line 827 of file TRobustEstimator.cxx. ◆ CreateOrtSubset(). void TRobustEstimator::CreateOrtSubset ; (; TMatrixD & ; dat, . Int_t * ; index, . Int_t ; hmerged, . Int_t ; nmerged, . TMatrixD & ; sscp, . Double_t * ; ndist . ). protected . creates a subset of hmerged vectors with smallest orthogonal distances to the hyperplane hyp[1]*(x1-mean[1])+...+hyp[nvar]*(xnvar-mean[nvar])=0 This function is called in case when less than fH samples lie on a hyperplane. ; Definition at line 968 of file TRobustEstimator.cxx. ◆ CreateSubset(). void TRobustEstimator::CreateSu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:21165,clear,clear,21165,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['clear'],['clear']
Usability,"entation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<typename Tuple_t , std::size_t... Is> . auto ROOT::Internal::VecOps::MapFromTuple ; (; Tuple_t && ; t, . std::index_sequence< Is... > ;  . ); -> decltype(MapImpl(std::get<std::tuple_size<Tuple_t>::value - 1>(t), std::get<Is>(t)...)). Definition at line 117 of file RVec.hxx. ◆ MapImpl(). template<typename F , typename... RVecs> . auto ROOT::Internal::VecOps::MapImpl ; (; F && ; f, . RVecs &&... ; vs . ); -> RVec<decltype(f(vs[0]...))>. Definition at line 105 of file RVec.hxx. ◆ NextPowerOf2(). uint64_t ROOT::Internal::VecOps::NextPowerOf2 ; (; uint64_t ; A). inline . Return the next power of two (in 64-bits) that is strictly greater than A. ; Return zero on overflow. ; Definition at line 126 of file RVec.hxx. ◆ ResetView(). template<typename T > . void ROOT::Internal::VecOps::ResetView ; (; RVec< T > & ; v, . T * ; addr, . std::size_t ; sz . ). An unsafe function to reset the buffer for which this RVec is acting as a view. ; NoteThis is a low-level method that must be called on RVecs that are already non-owning:; it does not put the RVec in ""non-owning mode"" (fCapacity == -1); it does not free any owned buffer . Definition at line 546 of file RVec.hxx. ◆ UninitializedValueConstruct(). template<typename ForwardIt > . void ROOT::Internal::VecOps::UninitializedValueConstruct ; (; ForwardIt ; first, . ForwardIt ; last . ). Definition at line 530 of file RVec.hxx. ◆ void(). template<typename T , bool TriviallyCopyable> . ROOT::Internal::VecOps::void ; (; off ; ). ROOTInternalVecOps. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:4550,Guid,Guide,4550,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,1,['Guid'],['Guide']
Usability,"ented from TGCompositeFrame.; Definition at line 188 of file TGCanvas.h. ◆ Layout(). void TGViewPort::Layout ; (; ). inlineoverridevirtual . Layout the elements of the composite frame. ; Reimplemented from TGCompositeFrame.; Definition at line 177 of file TGCanvas.h. ◆ operator=(). TGViewPort & TGViewPort::operator= ; (; const TGViewPort & ; ). privatedelete . ◆ SetContainer(). void TGViewPort::SetContainer ; (; TGFrame * ; f). Add container frame to the viewport. ; We must make sure that the added container is at least a TGCompositeFrame (TGCanvas::AddFrame depends on it). ; Definition at line 153 of file TGCanvas.cxx. ◆ SetHPos(). void TGViewPort::SetHPos ; (; Int_t ; xpos). virtual . Moves content of container frame in horizontal direction. ; Definition at line 178 of file TGCanvas.cxx. ◆ SetPos(). void TGViewPort::SetPos ; (; Int_t ; xpos, . Int_t ; ypos . ). Goto new position. ; Definition at line 281 of file TGCanvas.cxx. ◆ SetVPos(). void TGViewPort::SetVPos ; (; Int_t ; ypos). virtual . Moves content of container frame in vertical direction. ; Definition at line 229 of file TGCanvas.cxx. ◆ Streamer(). void TGViewPort::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGViewPort::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 188 of file TGCanvas.h. Member Data Documentation. ◆ fContainer. TGFrame* TGViewPort::fContainer. protected . Definition at line 162 of file TGCanvas.h. ◆ fX0. Int_t TGViewPort::fX0. protected . Definition at line 161 of file TGCanvas.h. ◆ fY0. Int_t TGViewPort::fY0. protected . Definition at line 161 of file TGCanvas.h. Libraries for TGViewPort:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGCanvas.h; gui/gui/src/TGCanvas.cxx. TGViewPort. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGViewPort.html:35117,Guid,Guide,35117,doc/master/classTGViewPort.html,https://root.cern,https://root.cern/doc/master/classTGViewPort.html,1,['Guid'],['Guide']
Usability,"ented from TObject.; Definition at line 55 of file TGObject.cxx. ◆ Streamer(). void TGObject::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGVertical3DLine, TGTextButton, TGPictureButton, TGRadioButton, TGSplitButton, TGVButtonGroup, TGViewPort, TGUndockedFrame, TGVerticalFrame, TGTransientFrame, TGTreeLBEntry, TGTextLBEntry, TGPopupMenu, TGPack, TGProgressBar, TGVProgressBar, TGResourcePool, TGScrollBarElement, TGScrollBar, TGVScrollBar, TGShapedFrame, TGShutterItem, TGShutter, TGSimpleTable, TGSlider, TGVSlider, TGSpeedo, TGSplitTool, TGSplitFrame, TGSplitter, TGVSplitter, TGVFileSplitter, TGStatusBar, TGTab, TGTabElement, TGTable, TGTableCell, TGTableHeaderFrame, TGTableHeader, TGTextEdit, TGSearchDialog, TGPrintDialog, TGTextEditor, TGTextEntry, TGTextView, TGTextViewostream, TGToolBar, TGToolTip, TGTripleVSlider, TGTripleHSlider, TGView, TGViewFrame, TGWindow, TRootBrowser, TRootBrowserLite, TRootCanvas, TRootContextMenu, TRootControlBar, TRootDialog, TRootEmbeddedCanvas, TRootHelpDialog, TGRecorder, TProofProgressLog, TNewChainDlg, TNewQueryDlg, TUploadDataSetDlg, TSessionServerFrame, TSessionFrame, TSessionQueryFrame, TSessionOutputFrame, TSessionInputFrame, TSessionViewer, and TTreeViewer. ◆ StreamerNVirtual(). void TGObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file TGObject.h. Member Data Documentation. ◆ fClient. TGClient* TGObject::fClient. protected . Connection to display server. ; Definition at line 25 of file TGObject.h. ◆ fId. Handle_t TGObject::fId. protected . X11/Win32 Window identifier. ; Definition at line 24 of file TGObject.h. Libraries for TGObject:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGObject.h; gui/gui/src/TGObject.cxx. TGObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGObject.html:17270,Guid,Guide,17270,doc/master/classTGObject.html,https://root.cern,https://root.cern/doc/master/classTGObject.html,1,['Guid'],['Guide']
Usability,"ented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph_legend.html:1475,undo,undocumented,1475,doc/master/graph_legend.html,https://root.cern,https://root.cern/doc/master/graph_legend.html,2,"['Guid', 'undo']","['Guide', 'undocumented']"
Usability,"enter'; 'center' - world position from which dolly/hRotate/vRotate are measured; camera rotates round this, always facing in (in center of viewport); 'hRotate' - horizontal rotation from initial configuration in degrees; 'hRotate' - vertical rotation from initial configuration in degrees. void ReinitializeCurrentCamera(const TGLVector3& hAxis, const TGLVector3& vAxis, Bool_t redraw = kTRUE); Change base-vectors defining the camera-base transformation of current; camera. hAxis and vAxis are the default directions for forward; (inverted) and upwards. TGLAutoRotator* GetAutoRotator(); Get the auto-rotator for this viewer. void SetAutoRotator(TGLAutoRotator* ar); Set the auto-rotator for this viewer. The old rotator is deleted. void GetGuideState(Int_t& axesType, Bool_t& axesDepthTest, Bool_t& referenceOn, Double_t* referencePos) const; Fetch the state of guides (axes & reference markers) into arguments. void SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); Set the state of guides (axes & reference markers) from arguments. void SetDrawCameraCenter(Bool_t x); Draw camera look at and rotation point. const TGLPhysicalShape * GetSelected() const; Return selected physical shape. void MouseOver(TGLPhysicalShape* ); Emit MouseOver signal. void MouseOver(TGLPhysicalShape* , UInt_t state); Emit MouseOver signal. void MouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void ReMouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void UnMouseOver(TObject* obj, UInt_t state); Emit UnMouseOver signal. void Clicked(TObject* obj); Emit Clicked signal. void Clicked(TObject* obj, UInt_t button, UInt_t state); Emit Clicked signal with button id and modifier state. void ReClicked(TObject* obj, UInt_t button, UInt_t state); Emit ReClicked signal with button id and modifier state. void UnClicked(TObject* obj, UInt_t button, UInt_t state); Emit UnClicked signal with button id and modifier state. void MouseIdle(TGLPhysical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLViewer.html:34095,guid,guides,34095,root/html534/TGLViewer.html,https://root.cern,https://root.cern/root/html534/TGLViewer.html,2,['guid'],['guides']
Usability,enticate.h. ◆ fgRSAPubKey. R__rsa_KEY TAuthenticate::fgRSAPubKey. staticprivate . Definition at line 113 of file TAuthenticate.h. ◆ fgSecAuthHook. SecureAuth_t TAuthenticate::fgSecAuthHook. staticprivate . Definition at line 115 of file TAuthenticate.h. ◆ fgUser. TString TAuthenticate::fgUser. staticprivate . Definition at line 116 of file TAuthenticate.h. ◆ fgUsrPwdCrypt. Bool_t TAuthenticate::fgUsrPwdCrypt. staticprivate . Definition at line 117 of file TAuthenticate.h. ◆ fHostAuth. THostAuth* TAuthenticate::fHostAuth. private . Definition at line 64 of file TAuthenticate.h. ◆ fPasswd. TString TAuthenticate::fPasswd. private . Definition at line 65 of file TAuthenticate.h. ◆ fProtocol. TString TAuthenticate::fProtocol. private . Definition at line 66 of file TAuthenticate.h. ◆ fPwHash. Bool_t TAuthenticate::fPwHash. private . Definition at line 67 of file TAuthenticate.h. ◆ fRemote. TString TAuthenticate::fRemote. private . Definition at line 68 of file TAuthenticate.h. ◆ fRSAKey. Int_t TAuthenticate::fRSAKey. private . Definition at line 69 of file TAuthenticate.h. ◆ fSecContext. TRootSecContext* TAuthenticate::fSecContext. private . Definition at line 70 of file TAuthenticate.h. ◆ fSecurity. ESecurity TAuthenticate::fSecurity. private . Definition at line 71 of file TAuthenticate.h. ◆ fSocket. TSocket* TAuthenticate::fSocket. private . Definition at line 72 of file TAuthenticate.h. ◆ fTimeOut. Int_t TAuthenticate::fTimeOut. private . Definition at line 75 of file TAuthenticate.h. ◆ fUser. TString TAuthenticate::fUser. private . Definition at line 74 of file TAuthenticate.h. ◆ fVersion. Int_t TAuthenticate::fVersion. private . Definition at line 73 of file TAuthenticate.h. Libraries for TAuthenticate:. [legend]; The documentation for this class was generated from the following files:; net/auth/inc/TAuthenticate.h; net/auth/src/TAuthenticate.cxx. TAuthenticate. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:47399,Guid,Guide,47399,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['Guid'],['Guide']
Usability,"entries.Definition TLegend.h:23; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPad::SetGridxvoid SetGridx(Int_t value=1) overrideDefinition TPad.h:336; TPad::SetGridyvoid SetGridy(Int_t value=1) overrideDefinition TPad.h:337; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetStatXvoid SetStatX(Float_t x=0)Definition TStyle.h:397; TStyle::SetStatWvoid SetStatW(Float_t w=0.19)Definition TStyle.h:399; TStyle::SetStatYvoid SetStatY(Float_t y=0)Definition TStyle.h:398; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; leglegDefinition legend1.C:34; H#define H(x, y, z); TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::TanDouble_t Tan(Double_t)Returns the tangent of an angle of x radians.Definition TMath.h:600; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; surfacesDefinition surfaces.py:1; AuthorOlivier Couet ; Definition in file th2polyEurope.C. tutorialshistth2polyEurope.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/th2polyEurope_8C.html:9850,Guid,Guide,9850,doc/master/th2polyEurope_8C.html,https://root.cern,https://root.cern/doc/master/th2polyEurope_8C.html,1,['Guid'],['Guide']
Usability,"entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGSFile Read a ROOT file from the Google Storage cloud; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:85351,simpl,simple,85351,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['simpl'],['simple']
Usability,"ents RooAbsArg.; Definition at line 36 of file RooFunctorBinding.h. ◆ DeclFileName(). static const char * RooFunctorBinding::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 51 of file RooFunctorBinding.h. ◆ evaluate(). double RooFunctorBinding::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 93 of file RooFunctorBinding.cxx. ◆ IsA(). TClass * RooFunctorBinding::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 51 of file RooFunctorBinding.h. ◆ printArgs(). void RooFunctorBinding::printArgs ; (; std::ostream & ; os); const. overridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 79 of file RooFunctorBinding.cxx. ◆ Streamer(). void RooFunctorBinding::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooFunctorBinding::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file RooFunctorBinding.h. Member Data Documentation. ◆ func. const ROOT::Math::IBaseFunctionMultiDim* RooFunctorBinding::func = nullptr. protected . Definition at line 44 of file RooFunctorBinding.h. ◆ vars. RooListProxy RooFunctorBinding::vars. protected . Definition at line 45 of file RooFunctorBinding.h. ◆ x. double* RooFunctorBinding::x = nullptr. protected . Definition at line 46 of file RooFunctorBinding.h. Libraries for RooFunctorBinding:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooFunctorBinding.h; roofit/roofit/src/RooFunctorBinding.cxx. RooFunctorBinding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorBinding.html:63851,Guid,Guide,63851,doc/master/classRooFunctorBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorBinding.html,1,['Guid'],['Guide']
Usability,"ents TVirtualPad.; Definition at line 163 of file TCanvas.h. ◆ GetXsizeReal(). Size_t TCanvas::GetXsizeReal ; (; ); const. inline . Definition at line 155 of file TCanvas.h. ◆ GetXsizeUser(). Size_t TCanvas::GetXsizeUser ; (; ); const. inline . Definition at line 153 of file TCanvas.h. ◆ GetYsizeReal(). Size_t TCanvas::GetYsizeReal ; (; ); const. inline . Definition at line 156 of file TCanvas.h. ◆ GetYsizeUser(). Size_t TCanvas::GetYsizeUser ; (; ); const. inline . Definition at line 154 of file TCanvas.h. ◆ HandleInput(). void TCanvas::HandleInput ; (; EEventType ; event, . Int_t ; px, . Int_t ; py . ). virtual . Handle Input Events. ; Handle input events, like button up/down in current canvas. ; Definition at line 1232 of file TCanvas.cxx. ◆ HasMenuBar(). Bool_t TCanvas::HasMenuBar ; (; ); const. inline . Definition at line 168 of file TCanvas.h. ◆ HighlightConnect(). void TCanvas::HighlightConnect ; (; const char * ; slot). virtual . This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot. ; Slot has to be defined ""UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)"" all parameters of UserFunction are taken from TCanvas::Highlighted ; Definition at line 1629 of file TCanvas.cxx. ◆ Highlighted(). void TCanvas::Highlighted ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; x, . Int_t ; y . ). virtual . Emit Highlighted() signal. . pad is pointer to pad with highlighted histogram or graph; obj is pointer to highlighted histogram or graph; x is highlighted x bin for 1D histogram or highlighted x-th point for graph; y is highlighted y bin for 2D histogram (for 1D histogram or graph not in use) . Definition at line 1610 of file TCanvas.cxx. ◆ Iconify(). void TCanvas::Iconify ; (; ). Iconify canvas. ; Definition at line 1477 of file TCanvas.cxx. ◆ Init(). void TCanvas::Init ; (; ). protected . Initialize the TCanvas members. Called by all constructors. ; Definition at line 534 of file TCanvas.cxx. ◆ IsA(). TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:78191,simpl,simplification,78191,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['simpl'],['simplification']
Usability,"ents TVirtualPad.; Definition at line 163 of file TCanvas.h. ◆ GetXsizeReal(). Size_t TCanvas::GetXsizeReal ; (; ); const. inline . Definition at line 155 of file TCanvas.h. ◆ GetXsizeUser(). Size_t TCanvas::GetXsizeUser ; (; ); const. inline . Definition at line 153 of file TCanvas.h. ◆ GetYsizeReal(). Size_t TCanvas::GetYsizeReal ; (; ); const. inline . Definition at line 156 of file TCanvas.h. ◆ GetYsizeUser(). Size_t TCanvas::GetYsizeUser ; (; ); const. inline . Definition at line 154 of file TCanvas.h. ◆ HandleInput(). void TCanvas::HandleInput ; (; EEventType ; event, . Int_t ; px, . Int_t ; py . ). virtual . Handle Input Events. ; Handle input events, like button up/down in current canvas. ; Definition at line 1234 of file TCanvas.cxx. ◆ HasMenuBar(). Bool_t TCanvas::HasMenuBar ; (; ); const. inline . Definition at line 168 of file TCanvas.h. ◆ HighlightConnect(). void TCanvas::HighlightConnect ; (; const char * ; slot). virtual . This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot. ; Slot has to be defined ""UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)"" all parameters of UserFunction are taken from TCanvas::Highlighted ; Definition at line 1631 of file TCanvas.cxx. ◆ Highlighted(). void TCanvas::Highlighted ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; x, . Int_t ; y . ). virtual . Emit Highlighted() signal. . pad is pointer to pad with highlighted histogram or graph; obj is pointer to highlighted histogram or graph; x is highlighted x bin for 1D histogram or highlighted x-th point for graph; y is highlighted y bin for 2D histogram (for 1D histogram or graph not in use) . Definition at line 1612 of file TCanvas.cxx. ◆ Iconify(). void TCanvas::Iconify ; (; ). Iconify canvas. ; Definition at line 1479 of file TCanvas.cxx. ◆ Init(). void TCanvas::Init ; (; ). protected . Initialize the TCanvas members. Called by all constructors. ; Definition at line 537 of file TCanvas.cxx. ◆ IsA(). TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:78567,simpl,simplification,78567,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['simpl'],['simplification']
Usability,"ents. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TProofServLiteTerminationHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofServLiteTerminationHandler(). TProofServLiteTerminationHandler::TProofServLiteTerminationHandler ; (; TProofServLite * ; s). inline . Definition at line 118 of file TProofServLite.cxx. Member Function Documentation. ◆ Notify(). Bool_t TProofServLiteTerminationHandler::Notify ; (; ). overridevirtual . Handle termination. ; Implements TSysEvtHandler.; Definition at line 126 of file TProofServLite.cxx. Member Data Documentation. ◆ fServ. TProofServLite* TProofServLiteTerminationHandler::fServ. private . Definition at line 116 of file TProofServLite.cxx. proof/proof/src/TProofServLite.cxx. TProofServLiteTerminationHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteTerminationHandler.html:16690,Guid,Guide,16690,doc/master/classTProofServLiteTerminationHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteTerminationHandler.html,1,['Guid'],['Guide']
Usability,"ents. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TViewUpdateTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TViewUpdateTimer(). TViewUpdateTimer::TViewUpdateTimer ; (; TGFileContainer * ; t, . Long_t ; ms . ). inline . Definition at line 72 of file TGFSContainer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TViewUpdateTimer::Notify ; (; ). overridevirtual . Reset the timer. ; Reimplemented from TTimer.; Definition at line 243 of file TGFSContainer.cxx. Member Data Documentation. ◆ fContainer. TGFileContainer* TViewUpdateTimer::fContainer. private . Definition at line 69 of file TGFSContainer.cxx. gui/gui/src/TGFSContainer.cxx. TViewUpdateTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewUpdateTimer.html:17793,Guid,Guide,17793,doc/master/classTViewUpdateTimer.html,https://root.cern,https://root.cern/doc/master/classTViewUpdateTimer.html,1,['Guid'],['Guide']
Usability,"entsBool_t ProcessEvents()Process events if timer did time out.Definition TSystem.cxx:92; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TTextBase class for several text objects.Definition TText.h:22; TViewSee TView3D.Definition TView.h:25; TView::GetPsivirtual Double_t GetPsi()=0; TView::GetLongitudevirtual Double_t GetLongitude()=0; TView::ShowAxisvirtual void ShowAxis()=0; TView::GetLatitudevirtual Double_t GetLatitude()=0; TView::SetViewvirtual void SetView(Double_t longitude, Double_t latitude, Double_t psi, Int_t &irep)=0; TVirtualGeoPainterAbstract class for geometry painters.Definition TVirtualGeoPainter.h:32; ptTPaveText * ptDefinition entrylist_figure1.C:7; lineTLine * lineDefinition entrylistblock_figure1.C:235; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; AuthorAndrei Gheata ; Definition in file geodemo.C. tutorialsgeomgeodemo.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geodemo_8C.html:85016,Guid,Guide,85016,doc/master/geodemo_8C.html,https://root.cern,https://root.cern/doc/master/geodemo_8C.html,1,['Guid'],['Guide']
Usability,"enu-hiding enabled by default. If you dislike this, add the following line to rootrc file (or set corresponding gEnv entry in application initialization): Eve.Viewer.HideMenus: off. Definition at line 30 of file TEveViewer.h. Public Member Functions;  TEveViewer (const char *n=""TEveViewer"", const char *t="""");  Constructor. ;  ;  ~TEveViewer () override;  Destructor. ;  ; virtual void AddScene (TEveScene *scene);  Add 'scene' to the list of scenes. ;  ; TObject * GetEditorObject (const TEveException &eh=""TEveViewer::GetEditorObject "") const override;  Object to be edited when this is selected, returns the TGLViewer. ;  ; TGLViewer * GetGLViewer () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveViewer icon. ;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Receive a pasted object. ;  ; TClass * IsA () const override;  ; void PostDock () override;  Virtual function called after a window is docked. ;  ; void PreUndock () override;  Virtual function called before a window is undocked. ;  ; void Redraw (Bool_t resetCameras=kFALSE);  Redraw viewer immediately. ;  ; void RemoveElementLocal (TEveElement *el) override;  Remove element 'el' from the list of children and also remove appropriate GLScene from GLViewer's list of scenes. ;  ; void RemoveElementsLocal () override;  Remove all children, forwarded to GLViewer. ;  ; void SetGLViewer (TGLViewer *viewer, TGFrame *frame);  Set TGLViewer that is represented by this object. ;  ; TGLEmbeddedViewer * SpawnGLEmbeddedViewer (TGedEditor *ged=nullptr, Int_t border=0);  Spawn new GLViewer and adopt it. ;  ; TGLSAViewer * SpawnGLViewer (TGedEditor *ged=nullptr, Bool_t stereo=kFALSE, Bool_t quad_buf=kTRUE);  Spawn new GLViewer and adopt it. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchStereo ();  Switch stereo mode. ;  ;  Public Member Functions inherited from TEveWindowFrame;  TEveWindowFrame (TGFrame *frame, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:1832,undo,undocked,1832,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,1,['undo'],['undocked']
Usability,"enu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMVA::IFitterTarget&fFitterTargetfitter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. Minuit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MinuitWrapper.html:19071,Clear,Clear,19071,root/html602/TMVA__MinuitWrapper.html,https://root.cern,https://root.cern/root/html602/TMVA__MinuitWrapper.html,2,['Clear'],['Clear']
Usability,"eoConeSeg(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); TGeoConeSeg(const char* name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual~TGeoConeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoConeSeg.html:1610,Clear,ClearThreadData,1610,root/html532/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html532/TGeoConeSeg.html,1,['Clear'],['ClearThreadData']
Usability,"eoMatrix * ; lmat = nullptr, . TGeoMatrix * ; rmat = nullptr . ). Constructor providing left and right shapes and matrices (in the Boolean operation). ; Definition at line 164 of file TGeoBoolNode.cxx. ◆ ~TGeoBoolNode(). TGeoBoolNode::~TGeoBoolNode ; (; ). override . Destructor. ; — deletion of components handled by TGeoManager class. ; Definition at line 196 of file TGeoBoolNode.cxx. Member Function Documentation. ◆ AssignPoints(). void TGeoBoolNode::AssignPoints ; (; Int_t ; npoints, . Double_t * ; points . ). protected . Set fPoints array. ; Definition at line 206 of file TGeoBoolNode.cxx. ◆ Class(). static TClass * TGeoBoolNode::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoBoolNode::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoBoolNode::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 91 of file TGeoBoolNode.h. ◆ ClearThreadData(). void TGeoBoolNode::ClearThreadData ; (; ); const. Definition at line 85 of file TGeoBoolNode.cxx. ◆ ComputeBBox(). virtual void TGeoBoolNode::ComputeBBox ; (; Double_t & ; dx, . Double_t & ; dy, . Double_t & ; dz, . Double_t * ; origin . ). pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ ComputeNormal(). virtual void TGeoBoolNode::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ Contains(). virtual Bool_t TGeoBoolNode::Contains ; (; const Double_t * ; point); const. pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ CreateThreadData(). void TGeoBoolNode::CreateThreadData ; (; Int_t ; nthreads). Create thread data for n threads max. ; Definition at line 100 of file TGeoBoolNode.cxx. ◆ DeclFileName(). static const char * TGeoBoolNode::DeclFileName ; (; ). inlinestatic . ReturnsName of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:15681,Clear,ClearThreadData,15681,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,1,['Clear'],['ClearThreadData']
Usability,"eoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternCylR & operator= (const TGeoPatternCylR &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (Int_t index);  Set index of next division. ;  ; void SetRange (Double_t start, Double_t step, Int_t ndivisions);  Set division range. Use this method only when dividing an assembly. ;  ; void SetSpacedOut (Bool_t flag);  ; void SetVolume (TGeoVolume *vol);  ; void Streamer (TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternCylR.html:2242,Clear,ClearThreadData,2242,doc/master/classTGeoPatternCylR.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylR.html,1,['Clear'],['ClearThreadData']
Usability,"eoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternSphR & operator= (const TGeoPatternSphR &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; virtual Bool_t IsOnBoundary (const Double_t *) const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (Int_t index);  Set index of next division. ;  ; void SetRange (Double_t start, Double_t step, Int_t ndivisions);  Set division range. Use this method only when dividing an assembly. ;  ; void SetSpacedOut (Bool_t flag);  ; void SetVolume (TGeoVolume *vol)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternSphR.html:2148,Clear,ClearThreadData,2148,doc/master/classTGeoPatternSphR.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphR.html,1,['Clear'],['ClearThreadData']
Usability,"eoPatternSphPhi::IsOnBoundary ; (; const Double_t * ; point); const. overridevirtual . Checks if the current point is on division boundary. ; Reimplemented from TGeoPatternFinder.; Definition at line 2212 of file TGeoPatternFinder.cxx. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternSphPhi::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 2263 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternSphPhi & TGeoPatternSphPhi::operator= ; (; const TGeoPatternSphPhi & ; pfc). protecteddelete . ◆ SavePrimitive(). void TGeoPatternSphPhi::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 2275 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternSphPhi::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternSphPhi::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 517 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternSphPhi::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 2300 of file TGeoPatternFinder.cxx. Member Data Documentation. ◆ fSinCos. Double_t* TGeoPatternSphPhi::fSinCos = nullptr. private . Definition at line 491 of file TGeoPatternFinder.h. Libraries for TGeoPatternSphPhi:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternSphPhi. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternSphPhi.html:18861,Guid,Guide,18861,doc/master/classTGeoPatternSphPhi.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphPhi.html,1,['Guid'],['Guide']
Usability,"eom/geom/inc/TGeoMatrix.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Variables ; TGeoMatrix.h File Reference. #include ""TNamed.h"". Include dependency graph for TGeoMatrix.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TGeoCombiTrans;  Class describing rotation + translation. More...;  ; class  TGeoGenTrans;  Most general transformation, holding a translation, a rotation and a scale. More...;  ; class  TGeoHMatrix;  Matrix class used for computing global transformations Should NOT be used for node definition. More...;  ; class  TGeoIdentity;  An identity transformation. More...;  ; class  TGeoMatrix;  Geometrical transformation package. More...;  ; class  TGeoRotation;  Class describing rotations. More...;  ; class  TGeoScale;  Class describing scale transformations. More...;  ; class  TGeoTranslation;  Class describing translations. More...;  . Variables; R__EXTERN TGeoIdentity * gGeoIdentity;  ; const Double_t kIdentityMatrix [3 *3] = {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0};  ; const Double_t kNullVector [3] = {0.0, 0.0, 0.0};  ; const Double_t kUnitScale [3] = {1.0, 1.0, 1.0};  . Variable Documentation. ◆ gGeoIdentity. R__EXTERN TGeoIdentity* gGeoIdentity. Definition at line 537 of file TGeoMatrix.h. ◆ kIdentityMatrix. const Double_t kIdentityMatrix[3 *3] = {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0}. Definition at line 26 of file TGeoMatrix.h. ◆ kNullVector. const Double_t kNullVector[3] = {0.0, 0.0, 0.0}. Definition at line 24 of file TGeoMatrix.h. ◆ kUnitScale. const Double_t kUnitScale[3] = {1.0, 1.0, 1.0}. Definition at line 28 of file TGeoMatrix.h. geomgeomincTGeoMatrix.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h.html:1929,Guid,Guide,1929,doc/master/TGeoMatrix_8h.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h.html,1,['Guid'],['Guide']
Usability,"eomData.hxx:244; ROOT::RGeomDescription::SetHighlightedItembool SetHighlightedItem(const std::vector< int > &stack)Definition RGeomData.hxx:405; ROOT::RGeomDescription::SetPreferredOfflinevoid SetPreferredOffline(bool on)Set preference of offline operations.Definition RGeomData.hxx:358; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::GetDrawJsonstd::string GetDrawJson() constDefinition RGeomData.hxx:382; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:25839,Clear,ClearCachevoid,25839,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,4,"['Clear', 'clear']","['Clear', 'ClearCache', 'ClearCachevoid', 'clear']"
Usability,"eomData.hxx:244; ROOT::RGeomDescription::SetHighlightedItembool SetHighlightedItem(const std::vector< int > &stack)Definition RGeomData.hxx:407; ROOT::RGeomDescription::SetPreferredOfflinevoid SetPreferredOffline(bool on)Set preference of offline operations.Definition RGeomData.hxx:358; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::GetDrawJsonstd::string GetDrawJson() constDefinition RGeomData.hxx:384; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::GetSearchstd::string GetSearch() constDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:26090,Clear,ClearCachevoid,26090,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,4,"['Clear', 'clear']","['Clear', 'ClearCache', 'ClearCachevoid', 'clear']"
Usability,"eom_cms.C tutorial. ;  ; file  geom_cms_stereo.C;  Shows CMS geometry in stereo mode. ;  ; file  geom_default.C;  Demonstrates usage of ""Default"" geometry alias. ;  ; file  geom_lhcb.C;  Shows LHCB geometry. ;  ; file  glplot.C;  Preliminary demo for showing Timur's GL plots in EVE. ;  ; file  glplot_geom.C;  Demonstrates how to combine Timur's GL plots with other scene elements. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__eve.html:3061,simpl,simple,3061,doc/master/group__tutorial__eve.html,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html,1,['simpl'],['simple']
Usability,"ep ; (; Net_t & ; master, . std::vector< Net_t > & ; nets, . std::vector< TBatch< Architecture_t > > & ; batches . ). inline . Perform multiple optimization steps simultaneously. ; Performs the backprop algorithm on the input batches given in batches on the neural networks given in nets. The forward and backward propagation steps are executed in an interleaving manner in order to exploit potential batch-level parallelism for asynchronous device calls. ; Definition at line 374 of file Minimizers.h. ◆ Step() [2/2]. template<typename Architecture_t > . template<typename Net_t > . void TMVA::DNN::TGradientDescent< Architecture_t >::Step ; (; Net_t & ; net, . Matrix_t & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). inline . Perform a single optimization step on a given batch. ; Propagates the input matrix forward through the net, evaluates the loss and propagates the gradients backward through the net. The computed gradients are scaled by the learning rate \(\alpha\) and subtracted from the weights and bias values of each layer. ; Definition at line 331 of file Minimizers.h. ◆ StepLoss() [1/2]. template<typename Architecture_t > . template<typename Net_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::StepLoss ; (; Net_t & ; net, . Matrix_t & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). Same as Step(...) but also evaluate the loss on the given training data. ; Note that this requires synchronization between host and device. . ◆ StepLoss() [2/2]. template<typename Architecture_t > . template<typename Net_t > . auto TMVA::DNN::TGradientDescent< Architecture_t >::StepLoss ; (; Net_t & ; net, . Matrix_t & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ); -> Scalar_t. inline . Definition at line 352 of file Minimizers.h. ◆ StepMomentum(). template<typename Architecture_t > . template<typename Net_t > . void TMVA::DNN::TGradientDescent< Architecture_t >::StepMomentum ; (; Net_t & ; master, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:9938,learn,learning,9938,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['learn'],['learning']
Usability,"ep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TVirtualMapFile.h>. Inheritance diagram for TVirtualMapFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * TVirtualMapFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualMapFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualMapFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 31 of file TVirtualMapFile.h. ◆ Close(). virtual void TVirtualMapFile::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMapFile. ◆ DeclFileName(). static const char * TVirtualMapFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 31 of file TVirtualMapFile.h. ◆ IsA(). virtual TClass * TVirtualMapFile::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TMapFile.; Definition at line 31 of file TVirtualMapFile.h. ◆ Streamer(). virtual void TVirtualMapFile::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMapFile. ◆ StreamerNVirtual(). void TVirtualMapFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 31 of file TVirtualMapFile.h. Libraries for TVirtualMapFile:. [legend]; The documentation for this class was generated from the following file:; core/base/inc/TVirtualMapFile.h. TVirtualMapFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMapFile.html:11611,Guid,Guide,11611,doc/master/classTVirtualMapFile.html,https://root.cern,https://root.cern/doc/master/classTVirtualMapFile.html,1,['Guid'],['Guide']
Usability,"epare': the format is opt = ""option=o priority=p"" returns: 0 for success, -1 for error ; Definition at line 401 of file TNetXNGSystem.cxx. ◆ Stage() [2/2]. Int_t TNetXNGSystem::Stage ; (; TCollection * ; files, . UChar_t ; priority . ). virtual . Issue stage requests for multiple files. ; param pathlist: list of paths of files to stage param opt: defines 'option' and 'priority' for 'Prepare': the format is opt = ""option=o priority=p"" returns: 0 for success, -1 for error ; Definition at line 416 of file TNetXNGSystem.cxx. ◆ Streamer(). void TNetXNGSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TNetXNGSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TNetXNGSystem.h. ◆ Unlink(). int TNetXNGSystem::Unlink ; (; const char * ; path). overridevirtual . Unlink a file on the remote server. ; param path: the path of the file to unlink returns: 0 on success, -1 otherwise ; Reimplemented from TSystem.; Definition at line 285 of file TNetXNGSystem.cxx. Member Data Documentation. ◆ fDirPtrs. std::set<void *> TNetXNGSystem::fDirPtrs. private . Definition at line 39 of file TNetXNGSystem.h. ◆ fFileSystem. XrdCl::FileSystem* TNetXNGSystem::fFileSystem. private . Definition at line 44 of file TNetXNGSystem.h. ◆ fgAddrFQDN. THashList TNetXNGSystem::fgAddrFQDN. staticprivate . Definition at line 40 of file TNetXNGSystem.h. ◆ fgAddrMutex. TMutex TNetXNGSystem::fgAddrMutex. staticprivate . Definition at line 41 of file TNetXNGSystem.h. ◆ fUrl. XrdCl::URL* TNetXNGSystem::fUrl. private . Definition at line 43 of file TNetXNGSystem.h. Libraries for TNetXNGSystem:. [legend]; The documentation for this class was generated from the following files:; net/netxng/inc/TNetXNGSystem.h; net/netxng/src/TNetXNGSystem.cxx. TNetXNGSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGSystem.html:40277,Guid,Guide,40277,doc/master/classTNetXNGSystem.html,https://root.cern,https://root.cern/doc/master/classTNetXNGSystem.html,1,['Guid'],['Guide']
Usability,eplaying. friend . Definition at line 186 of file TRecorder.h. Member Data Documentation. ◆ fCode. UInt_t TRecGuiEvent::fCode. protected . Definition at line 195 of file TRecorder.h. ◆ fCount. Int_t TRecGuiEvent::fCount. protected . Definition at line 199 of file TRecorder.h. ◆ fFormat. Int_t TRecGuiEvent::fFormat. protected . Definition at line 202 of file TRecorder.h. ◆ fHandle. Handle_t TRecGuiEvent::fHandle. protected . Definition at line 201 of file TRecorder.h. ◆ fHeight. UInt_t TRecGuiEvent::fHeight. protected . Definition at line 198 of file TRecorder.h. ◆ fMasked. Window_t TRecGuiEvent::fMasked. protected . Definition at line 207 of file TRecorder.h. ◆ fSendEvent. Bool_t TRecGuiEvent::fSendEvent. protected . Definition at line 200 of file TRecorder.h. ◆ fState. UInt_t TRecGuiEvent::fState. protected . Definition at line 196 of file TRecorder.h. ◆ fTime. Time_t TRecGuiEvent::fTime. protected . Definition at line 190 of file TRecorder.h. ◆ fType. EGEventType TRecGuiEvent::fType. protected . Definition at line 188 of file TRecorder.h. ◆ fUser. Long_t TRecGuiEvent::fUser[5]. protected . Definition at line 203 of file TRecorder.h. ◆ fWidth. UInt_t TRecGuiEvent::fWidth. protected . Definition at line 197 of file TRecorder.h. ◆ fWindow. Window_t TRecGuiEvent::fWindow. protected . Definition at line 189 of file TRecorder.h. ◆ fX. Int_t TRecGuiEvent::fX. protected . Definition at line 191 of file TRecorder.h. ◆ fXRoot. Int_t TRecGuiEvent::fXRoot. protected . Definition at line 193 of file TRecorder.h. ◆ fY. Int_t TRecGuiEvent::fY. protected . Definition at line 192 of file TRecorder.h. ◆ fYRoot. Int_t TRecGuiEvent::fYRoot. protected . Definition at line 194 of file TRecorder.h. Libraries for TRecGuiEvent:. [legend]; The documentation for this class was generated from the following files:; gui/recorder/inc/TRecorder.h; gui/recorder/src/TRecorder.cxx. TRecGuiEvent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecGuiEvent.html:15794,Guid,Guide,15794,doc/master/classTRecGuiEvent.html,https://root.cern,https://root.cern/doc/master/classTRecGuiEvent.html,1,['Guid'],['Guide']
Usability,"epresent the link elements in the hierarchy of volumes. Nodes are unique and distinct geometrical objects ONLY from their container point of view. Since volumes can be replicated in the geometry, the same node may be found on different branches. An important observation is that volume objects are owned by the TGeoManager class. This stores a list of all volumes in the geometry, that is cleaned upon destruction.; Let's consider positioning now our wire in the middle of a gas chamber. We need first to define the gas chamber :; TGeoVolume *chamber = gGeoManager->MakeTube(""CHAMBER"", ptrGAS, 0, 1, 1);; Now we can put the wire inside :; chamber->AddNode(wire_co, 1);; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; If we inspect now the chamber volume in a browser, we will notice that it has one daughter. Of course the gas has some container also, but let's keep it like that for the sake of simplicity. The full prototype of AddNode() is :; TGeoVolume::AddNode(TGeoVolume *daughter, Int_t usernumber,; TGeoMatrix *matrix=gGeoIdentity); gGeoIdentityR__EXTERN TGeoIdentity * gGeoIdentityDefinition TGeoMatrix.h:537; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; int; Since we did not supplied the third argument, the wire will be positioned with an identity transformation inside the chamber. One will notice that the inner radii of the wire and chamber are both zero - therefore, aren't the two volumes overlapping ? The answer is no, the modeler is even relaying on the fact that any daughter is fully contained by its mother. On the other hand, neither of the nodes positioned inside a volume should overlap with each other. We will see that there are allowed some exceptions to those rules. Overlapping volumes; Positioning volumes that does not overlap their neighbours nor extrude their container is sometimes quite strong",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:6629,simpl,simplicity,6629,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['simpl'],['simplicity']
Usability,"eps With ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome First Steps With ROOT. The ROOT framework provides a number of classes, grouped into several class cathegories. To start using ROOT, you may find useful t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/first-steps-root-1.html:1011,Guid,Guides,1011,d/first-steps-root-1.html,https://root.cern,https://root.cern/d/first-steps-root-1.html,2,['Guid'],['Guides']
Usability,eptanceRegion::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 110 of file ConfidenceBelt.h. ◆ DeclFileName(). static const char * RooStats::AcceptanceRegion::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 110 of file ConfidenceBelt.h. ◆ GetLookupIndex(). Int_t RooStats::AcceptanceRegion::GetLookupIndex ; (; ). inline . Definition at line 100 of file ConfidenceBelt.h. ◆ GetLowerLimit(). double RooStats::AcceptanceRegion::GetLowerLimit ; (; ). inline . Definition at line 101 of file ConfidenceBelt.h. ◆ GetUpperLimit(). double RooStats::AcceptanceRegion::GetUpperLimit ; (; ). inline . Definition at line 102 of file ConfidenceBelt.h. ◆ IsA(). TClass * RooStats::AcceptanceRegion::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 110 of file ConfidenceBelt.h. ◆ Streamer(). void RooStats::AcceptanceRegion::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::AcceptanceRegion::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 110 of file ConfidenceBelt.h. Member Data Documentation. ◆ fLookupIndex. Int_t RooStats::AcceptanceRegion::fLookupIndex. private . Definition at line 105 of file ConfidenceBelt.h. ◆ fLowerLimit. double RooStats::AcceptanceRegion::fLowerLimit. private . Definition at line 106 of file ConfidenceBelt.h. ◆ fUpperLimit. double RooStats::AcceptanceRegion::fUpperLimit. private . Definition at line 107 of file ConfidenceBelt.h. Libraries for RooStats::AcceptanceRegion:. [legend]; The documentation for this class was generated from the following file:; roofit/roostats/inc/RooStats/ConfidenceBelt.h. RooStatsAcceptanceRegion. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:53 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1AcceptanceRegion.html:12826,Guid,Guide,12826,doc/master/classRooStats_1_1AcceptanceRegion.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1AcceptanceRegion.html,1,['Guid'],['Guide']
Usability,"eqCollectioninlinevirtual; RemoveLast() overrideTListvirtual; ResetBit(UInt_t f)TObjectinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetCurrentCollection()TCollection; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetName(const char *name)TCollectioninline; SetObjectStat(Bool_t stat)TObjectstatic; SetOwner(Bool_t enable=kTRUE)TCollectionvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sort(Bool_t order=kSortAscending)TListvirtual; StartGarbageCollection()TCollectionstatic; Streamer(TBuffer &) overrideTListvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TListinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TCollection(const TCollection &)=deleteTCollectionprivate; TCollection()TCollectioninlineprotected; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TList(const TList &)=deleteTListprivate; TList()TListinline; TList(TObject *) R__DEPRECATED(6TList; TList()."") TListinline; TListIterTListfriend; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TObjLinkPtr_t typedefTListprotected; TObjLinkWeakPtr_t typedefTListprotected; TSeqCollection()TSeqCollectioninlineprotected; UnSort()TSeqCollectioninline; UseCurrentStyle()TObjectvirtual; UseRWLock(Bool_t enable=true)TCollectionvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideTCollectionvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const overrideTCollectionvirtual; ~TCollection()TCollectionvirtual; ~TList()TListvirtual; ~TObject()TObjectvirtual; ~TSeqCollection()TSeqCollectioninlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTList-members.html:10728,Guid,Guide,10728,doc/master/classTList-members.html,https://root.cern,https://root.cern/doc/master/classTList-members.html,1,['Guid'],['Guide']
Usability,"equires the knowledge; 46 of the expected yields, which is not the case in general. Note also that; 47 for rare signals, Poissonian statistics should be used, which modifies; 48 the significance criterion.; 49 ; 50 The rectangular cut of a volume in the variable space is performed using; 51 a binary tree to sort the training events. This provides a significant; 52 reduction in computing time (up to several orders of magnitudes, depending; 53 on the complexity of the problem at hand).; 54 ; 55 Technically, optimisation is achieved in TMVA by two methods:; 56 ; 57 1. Monte Carlo generation using uniform priors for the lower cut value,; 58 and the cut width, thrown within the variable ranges.; 59 ; 60 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; 61 The GA is configurable by many external settings through the option; 62 string. For difficult cases (such as many variables), some tuning; 63 may be necessary to achieve satisfying results; 64 ; 65 Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; 66 superior results, and often failed due to convergence at local minima.; 67 ; 68 The tests we have performed so far showed that in generic applications,; 69 the GA is superior to MC sampling, and hence GA is the default method.; 70 It is worthwhile trying both anyway.; 71 ; 72 **Decorrelated (or ""diagonalized"") Cuts**; 73 ; 74 See class description for Method Likelihood for a detailed explanation.; 75*/; 76 ; 77#include ""TMVA/MethodCuts.h""; 78 ; 79#include ""TMVA/BinarySearchTree.h""; 80#include ""TMVA/ClassifierFactory.h""; 81#include ""TMVA/Config.h""; 82#include ""TMVA/Configurable.h""; 83#include ""TMVA/DataSet.h""; 84#include ""TMVA/DataSetInfo.h""; 85#include ""TMVA/Event.h""; 86#include ""TMVA/IFitterTarget.h""; 87#include ""TMVA/IMethod.h""; 88#include ""TMVA/GeneticFitter.h""; 89#include ""TMVA/Interval.h""; 90#include ""TMVA/FitterBase.h""; 91#include ""TMVA/MCFitter.h""; 92#include ""TMVA/MethodBase.h""; 93#include ""TMVA/MethodFDA.h""; 94#incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:3260,Simpl,Simplex,3260,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Simpl'],['Simplex']
Usability,"er &) override;  Custom streamer for the workspace. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html:2118,Clear,Clear,2118,doc/master/classRooWorkspace_1_1CodeRepo.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html,1,['Clear'],['Clear']
Usability,"er &) override;  Stream an object of class TMarker. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMarker.html:5258,Clear,Clear,5258,doc/master/classTMarker.html,https://root.cern,https://root.cern/doc/master/classTMarker.html,1,['Clear'],['Clear']
Usability,"er &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:2417,Clear,Clear,2417,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,1,['Clear'],['Clear']
Usability,"er &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2PolyBin.html:2361,Clear,Clear,2361,doc/master/classTH2PolyBin.html,https://root.cern,https://root.cern/doc/master/classTH2PolyBin.html,237,['Clear'],['Clear']
Usability,"er &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewer.html:2574,Clear,Clear,2574,doc/master/classTStructViewer.html,https://root.cern,https://root.cern/doc/master/classTStructViewer.html,8,['Clear'],['Clear']
Usability,"er &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMeth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:140246,Clear,Clear,140246,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,10,['Clear'],['Clear']
Usability,"er &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegendEntry.html:2576,Clear,Clear,2576,doc/master/classTLegendEntry.html,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html,1,['Clear'],['Clear']
Usability,"er &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParameter.html:3309,Clear,Clear,3309,doc/master/classTParameter.html,https://root.cern,https://root.cern/doc/master/classTParameter.html,9,['Clear'],['Clear']
Usability,er & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveTriangleSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 77 of file TEveTriangleSet.h. ◆ Triangle(). Int_t * TEveTriangleSet::Triangle ; (; Int_t ; i). inline . Definition at line 54 of file TEveTriangleSet.h. ◆ TriangleColor(). UChar_t * TEveTriangleSet::TriangleColor ; (; Int_t ; i). inline . Definition at line 56 of file TEveTriangleSet.h. ◆ TriangleNormal(). Float_t * TEveTriangleSet::TriangleNormal ; (; Int_t ; i). inline . Definition at line 55 of file TEveTriangleSet.h. ◆ Vertex(). Float_t * TEveTriangleSet::Vertex ; (; Int_t ; i). inline . Definition at line 53 of file TEveTriangleSet.h. Friends And Related Symbol Documentation. ◆ TEveTriangleSetEditor. friend class TEveTriangleSetEditor. friend . Definition at line 27 of file TEveTriangleSet.h. ◆ TEveTriangleSetGL. friend class TEveTriangleSetGL. friend . Definition at line 28 of file TEveTriangleSet.h. Member Data Documentation. ◆ fNTrings. Int_t TEveTriangleSet::fNTrings. protected . Definition at line 39 of file TEveTriangleSet.h. ◆ fNVerts. Int_t TEveTriangleSet::fNVerts. protected . Definition at line 35 of file TEveTriangleSet.h. ◆ fTringCols. UChar_t* TEveTriangleSet::fTringCols. protected . Definition at line 42 of file TEveTriangleSet.h. ◆ fTringNorms. Float_t* TEveTriangleSet::fTringNorms. protected . Definition at line 41 of file TEveTriangleSet.h. ◆ fTrings. Int_t* TEveTriangleSet::fTrings. protected . Definition at line 40 of file TEveTriangleSet.h. ◆ fVerts. Float_t* TEveTriangleSet::fVerts. protected . Definition at line 36 of file TEveTriangleSet.h. Libraries for TEveTriangleSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveTriangleSet.h; graf3d/eve/src/TEveTriangleSet.cxx. TEveTriangleSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTriangleSet.html:42235,Guid,Guide,42235,doc/master/classTEveTriangleSet.html,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html,1,['Guid'],['Guide']
Usability,"er (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void x3d (Option_t *option="""") override;  Deprecated: use TPad::GetViewer3D() instead. ;  ;  Public Member Functions inherited from TCanvas;  TCanvas (Bool_t build=kTRUE);  Canvas default constructor. ;  ;  TCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ;  TCanvas (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ;  TCanvas (const char *name, const char *title="""", Int_t form=1);  Create a new canvas with a predefined size form. ;  ;  TCanvas (const char *name, Int_t ww, Int_t wh, Int_t winid);  Create an embedded canvas, i.e. ;  ;  ~TCanvas () override;  Canvas destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set current canvas & pad. ;  ; void Clear (Option_t *option="""") override;  Remove all primitives from the canvas. ;  ; virtual void Cleared (TVirtualPad *pad);  Emit pad Cleared signal. ;  ; void ClearPadSave ();  ; void Close (Option_t *option="""") override;  Close canvas. ;  ; void Closed () override;  Emit Closed signal. ;  ; void Constructor ();  Canvas default constructor. ;  ; void Constructor (const char *name, const char *title, Int_t form);  Create a new canvas with a predefined size form. ;  ; void Constructor (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ; void Constructor (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; void DeleteCanvasPainter ();  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:2479,Clear,Clear,2479,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,2,['Clear'],['Clear']
Usability,"er (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:3847,Clear,Clear,3847,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,21,['Clear'],['Clear']
Usability,"er (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute ac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:9393,Clear,Clear,9393,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['Clear'],['Clear']
Usability,"er * TVirtualProofPlayer::Create ; (; const char * ; player, . TProof * ; p, . TSocket * ; s = 0 . ). static . Create a PROOF player. ; Definition at line 28 of file TVirtualProofPlayer.cxx. ◆ CreateDrawFeedback(). virtual TDrawFeedback * TVirtualProofPlayer::CreateDrawFeedback ; (; TProof * ; p). pure virtual . Implemented in TProofPlayer. ◆ DeclFileName(). static const char * TVirtualProofPlayer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 142 of file TVirtualProofPlayer.h. ◆ DeleteDrawFeedback(). virtual void TVirtualProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). pure virtual . Implemented in TProofPlayer. ◆ DrawSelect(). virtual Long64_t TVirtualProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ Feedback(). virtual void TVirtualProofPlayer::Feedback ; (; TList * ; objs). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ Finalize() [1/2]. virtual Long64_t TVirtualProofPlayer::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). pure virtual . Implemented in TProofPlayer, TProofPlayerRemote, and TProofPlayerLite. ◆ Finalize() [2/2]. virtual Long64_t TVirtualProofPlayer::Finalize ; (; TQueryResult * ; qr). pure virtual . Implemented in TProofPlayer, TProofPlayerRemote, and TProofPlayerLite. ◆ GetCacheSize(). virtual Long64_t TVirtualProofPlayer::GetCacheSize ; (; ). pure virtual . Implemented in TProofPlayer. ◆ GetCurrentQuery(). virtual TQueryResult * TVirtualProofPlayer::GetCurrentQuery ; (; ); const. pure virtual . Implemented in TProofPlayer. ◆ GetDrawArgs(). virtual Int_t TVirtualProofPlayer::GetDrawArgs ; (; const char * ; var, . const char * ; sel, . Option_t * ; opt, . TString & ; selector, . TString & ; objname . ). pure virtual . Implemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualProofPlayer.html:21532,Feedback,Feedback,21532,doc/master/classTVirtualProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html,1,['Feedback'],['Feedback']
Usability,"er ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::VariableTransformBase. ◆ StreamerNVirtual(). void TMVA::VariablePCATransform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file VariablePCATransform.h. ◆ Transform(). const TMVA::Event * TMVA::VariablePCATransform::Transform ; (; const Event * const ; ev, . Int_t ; cls . ); const. virtual . apply the principal component analysis ; Implements TMVA::VariableTransformBase.; Definition at line 127 of file VariablePCATransform.cxx. ◆ WriteTransformationToStream(). void TMVA::VariablePCATransform::WriteTransformationToStream ; (; std::ostream & ; o); const. virtual . write mean values to stream ; Implements TMVA::VariableTransformBase.; Definition at line 315 of file VariablePCATransform.cxx. ◆ X2P(). void TMVA::VariablePCATransform::X2P ; (; std::vector< Float_t > & ; pc, . const std::vector< Float_t > & ; x, . Int_t ; cls . ); const. private . Calculate the principal components from the original data vector x, and return it in p (function extracted from TPrincipal::X2P) It's the users responsibility to make sure that both x and p are of the right size (i.e., memory must be allocated for p) ; Definition at line 280 of file VariablePCATransform.cxx. Member Data Documentation. ◆ fEigenVectors. std::vector<TMatrixD*> TMVA::VariablePCATransform::fEigenVectors. private . eigenvectors ; Definition at line 78 of file VariablePCATransform.h. ◆ fMeanValues. std::vector<TVectorD*> TMVA::VariablePCATransform::fMeanValues. private . mean values ; Definition at line 77 of file VariablePCATransform.h. Libraries for TMVA::VariablePCATransform:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariablePCATransform.h; tmva/tmva/src/VariablePCATransform.cxx. TMVAVariablePCATransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html:22562,Guid,Guide,22562,doc/master/classTMVA_1_1VariablePCATransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html,1,['Guid'],['Guide']
Usability,"er ; Definition at line 173 of file RuleFit.h. ◆ fMethodBase. const MethodBase* TMVA::RuleFit::fMethodBase. private . pointer the method base which initialized this RuleFit instance ; Definition at line 170 of file RuleFit.h. ◆ fMethodRuleFit. const MethodRuleFit* TMVA::RuleFit::fMethodRuleFit. private . pointer the method which initialized this RuleFit instance ; Definition at line 169 of file RuleFit.h. ◆ fNEveEffTrain. Double_t TMVA::RuleFit::fNEveEffTrain. private . reweighted number of events = sum(wi) ; Definition at line 165 of file RuleFit.h. ◆ fNTreeSample. UInt_t TMVA::RuleFit::fNTreeSample. private . number of events in sub sample = frac*neve ; Definition at line 163 of file RuleFit.h. ◆ fRNGEngine. std::default_random_engine TMVA::RuleFit::fRNGEngine. private . Definition at line 177 of file RuleFit.h. ◆ fRuleEnsemble. RuleEnsemble TMVA::RuleFit::fRuleEnsemble. private . the ensemble of rules ; Definition at line 167 of file RuleFit.h. ◆ fRuleFitParams. RuleFitParams TMVA::RuleFit::fRuleFitParams. private . fit rule parameters ; Definition at line 168 of file RuleFit.h. ◆ fTrainingEvents. std::vector<const TMVA::Event *> TMVA::RuleFit::fTrainingEvents. private . all training events ; Definition at line 160 of file RuleFit.h. ◆ fTrainingEventsRndm. std::vector<const TMVA::Event *> TMVA::RuleFit::fTrainingEventsRndm. private . idem, but randomly shuffled ; Definition at line 161 of file RuleFit.h. ◆ fVisHistsUseImp. Bool_t TMVA::RuleFit::fVisHistsUseImp. private . if true, use importance as weight; else coef in vis hists ; Definition at line 171 of file RuleFit.h. ◆ randSEED. const Int_t TMVA::RuleFit::randSEED = 0. staticprivate . Definition at line 176 of file RuleFit.h. Libraries for TMVA::RuleFit:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RuleFit.h; tmva/tmva/src/RuleFit.cxx. TMVARuleFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFit.html:18002,Guid,Guide,18002,doc/master/classTMVA_1_1RuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFit.html,1,['Guid'],['Guide']
Usability,"er = TMVA.DataLoader('dataset'); for branch in signal.GetListOfBranches():; dataloader.AddVariable(branch.GetName()); ; dataloader.AddSignalTree(signal, 1.0); dataloader.AddBackgroundTree(background, 1.0); dataloader.PrepareTrainingAndTestTree(TCut(''),; 'nTrain_Signal=4000:nTrain_Background=4000:SplitMode=Random:NormMode=NumEvents:!V'); ; # Generate model; ; # Define model; model = Sequential(); model.add(Dense(64, activation='relu', input_dim=4)); model.add(Dense(2, activation='softmax')); ; # Set loss and optimizer; model.compile(loss='categorical_crossentropy',; optimizer=SGD(learning_rate=0.01), weighted_metrics=['accuracy', ]); ; # Store model to file; model.save('modelClassification.h5'); model.summary(); ; # Book methods; factory.BookMethod(dataloader, TMVA.Types.kFisher, 'Fisher',; '!H:!V:Fisher:VarTransform=D,G'); factory.BookMethod(dataloader, TMVA.Types.kPyKeras, 'PyKeras',; 'H:!V:VarTransform=D,G:FilenameModel=modelClassification.h5:FilenameTrainedModel=trainedModelClassification.h5:NumEpochs=20:BatchSize=32'); ; # Run training, test and evaluation; factory.TrainAllMethods(); factory.TestAllMethods(); factory.EvaluateAllMethods(); TCutA specialized string object used for TTree selections.Definition TCut.h:25; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::PyMethodBase::PyInitializestatic void PyInitialize()Initialize Python interpreter.Definition PyMethodBase.cxx:153; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; Date2017 ; AuthorTMVA Team ; Definition in file ClassificationKeras.py. tutorialstmvakerasClassificationKeras.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ClassificationKeras_8py.html:3075,Guid,Guide,3075,doc/master/ClassificationKeras_8py.html,https://root.cern,https://root.cern/doc/master/ClassificationKeras_8py.html,1,['Guid'],['Guide']
Usability,"er Functions; virtual ~MinimizerVariableTransformation ();  ; virtual double DInt2Ext (double value, double lower, double upper) const =0;  ; virtual double Ext2int (double value, double lower, double upper) const =0;  ; virtual double Int2ext (double value, double lower, double upper) const =0;  . #include <Math/MinimizerVariableTransformation.h>. Inheritance diagram for ROOT::Math::MinimizerVariableTransformation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~MinimizerVariableTransformation(). virtual ROOT::Math::MinimizerVariableTransformation::~MinimizerVariableTransformation ; (; ). inlinevirtual . Definition at line 24 of file MinimizerVariableTransformation.h. Member Function Documentation. ◆ DInt2Ext(). virtual double ROOT::Math::MinimizerVariableTransformation::DInt2Ext ; (; double ; value, . double ; lower, . double ; upper . ); const. pure virtual . Implemented in ROOT::Math::SinVariableTransformation, ROOT::Math::SqrtLowVariableTransformation, and ROOT::Math::SqrtUpVariableTransformation. ◆ Ext2int(). virtual double ROOT::Math::MinimizerVariableTransformation::Ext2int ; (; double ; value, . double ; lower, . double ; upper . ); const. pure virtual . Implemented in ROOT::Math::SinVariableTransformation, ROOT::Math::SqrtLowVariableTransformation, and ROOT::Math::SqrtUpVariableTransformation. ◆ Int2ext(). virtual double ROOT::Math::MinimizerVariableTransformation::Int2ext ; (; double ; value, . double ; lower, . double ; upper . ); const. pure virtual . Implemented in ROOT::Math::SinVariableTransformation, ROOT::Math::SqrtLowVariableTransformation, and ROOT::Math::SqrtUpVariableTransformation. The documentation for this class was generated from the following file:; math/mathcore/inc/Math/MinimizerVariableTransformation.h. ROOTMathMinimizerVariableTransformation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerVariableTransformation.html:2485,Guid,Guide,2485,doc/master/classROOT_1_1Math_1_1MinimizerVariableTransformation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerVariableTransformation.html,1,['Guid'],['Guide']
Usability,"er and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for THttpTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THttpTimer(). THttpTimer::THttpTimer ; (; Long_t ; milliSec, . Bool_t ; mode, . THttpServer & ; serv . ). inline . !< server processing requests ; constructor ; Definition at line 51 of file THttpServer.cxx. Member Function Documentation. ◆ IsSlow(). Bool_t THttpTimer::IsSlow ; (; ); const. inline . Definition at line 69 of file THttpServer.cxx. ◆ SetSlow(). void THttpTimer::SetSlow ; (; Bool_t ; flag). inline . Definition at line 53 of file THttpServer.cxx. ◆ Timeout(). void THttpTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process http requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 73 of file THttpServer.cxx. Member Data Documentation. ◆ fNormalTmout. Long_t THttpTimer::fNormalTmout {0}. private . Definition at line 43 of file THttpServer.cxx. ◆ fServer. THttpServer& THttpTimer::fServer. Definition at line 48 of file THttpServer.cxx. ◆ fSlow. Bool_t THttpTimer::fSlow {kFALSE}. private . Definition at line 44 of file THttpServer.cxx. ◆ fSlowCnt. Int_t THttpTimer::fSlowCnt {0}. private . Definition at line 45 of file THttpServer.cxx. net/http/src/THttpServer.cxx. THttpTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpTimer.html:18663,Guid,Guide,18663,doc/master/classTHttpTimer.html,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html,1,['Guid'],['Guide']
Usability,"er class ;  CTDeviceTDevice ;  CTDLGradientDescent;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTReshapeLayer;  CTRMSPropRMSProp Optimizer class ;  CTSGDStochastic Batch Gradient Descent Optimizer class ;  CTSharedLayerLayer class width shared weight and bias layers ;  CTTensorBatchTTensorBatch ;  CTTensorBatchIteratorTTensorBatchIterator ;  CTTensorDataLoaderTTensorDataLoader ;  CTTensorDataLoader< AData, TReference< AReal > >;  CVGeneralLayerGeneric General Layer class ;  CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:82827,simpl,simple,82827,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['simpl'],['simple']
Usability,"er collection have a size of one, the arguments are always synchronized without checking if they have the same name. . Definition at line 305 of file RooAbsCollection.cxx. ◆ begin(). const_iterator RooAbsCollection::begin ; (; ); const. inline . Definition at line 253 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 432 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 282 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 392 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:35974,clear,clear,35974,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['clear'],['clear']
Usability,"er is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TClass::InsertTClassInRegistryRAII;  ; struct  TClass::ObjectPtr;  ; class  TClass;  TClass instances represent classes, structs and namespaces in the ROOT type system. More...;  ; struct  ROOT::Internal::TClassGetClassHelper< T >;  ; class  TClass::TDeclNameRegistry;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ROOT::Internal;  . Typedefs; typedef ROOT::TMapDeclIdToTClass DeclIdMap_t;  ; typedef ROOT::TMapTypeToTClass IdMap_t;  . Functions; TClass * ROOT::CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; template<typename T > ; TClass * ROOT::GetClass (const T *);  ; template<typename T > ; TClass * ROOT::GetClass (const T **);  ; template<typename T > ; TClass * ROOT::GetClass (const T *const *);  ; template<typename T > ; TClass * ROOT::GetClass (T *);  ; template<typename T > ; TClass * ROOT::GetClass (T **);  ; template<typename T > ; TClass * ROOT::Internal::GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * ROOT::Internal::GetClassHelper (Bool_t, Bool_t, std::true_type);  . Typedef Documentation. ◆ DeclIdMap_t. typedef ROOT::TMapDeclIdToTClass DeclIdMap_t. Definition at line 79 of file TClass.h. ◆ IdMap_t. typedef ROOT::TMapTypeToTClass IdMap_t. Definition at line 78 of file TClass.h. coremetaincTClass.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h.html:2363,Guid,Guide,2363,doc/master/TClass_8h.html,https://root.cern,https://root.cern/doc/master/TClass_8h.html,1,['Guid'],['Guide']
Usability,"er object after. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add object at position ids. ;  ; virtual void AddAtAndExpand (TObject *obj, Int_t idx);  Add object at position idx. ;  ; virtual Int_t AddAtFree (TObject *obj);  Return the position of the new object. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add object in the slot before object before. ;  ; void AddFirst (TObject *obj) override;  Add object in the first slot of the array. ;  ; void AddLast (TObject *obj) override;  Add object in the next empty slot in the array. ;  ; TObject * After (const TObject *obj) const override;  Return the object after obj. Returns 0 if obj is last object. ;  ; TObject * At (Int_t idx) const override;  ; TObject * Before (const TObject *obj) const override;  Return the object before obj. Returns 0 if obj is first object. ;  ; virtual Int_t BinarySearch (TObject *obj, Int_t upto=kMaxInt);  Find object using a binary search. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the array. ;  ; virtual void Compress ();  Remove empty slots from array. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the array AND delete all heap based objects. ;  ; virtual void Expand (Int_t newSize);  Expand or shrink the array to newSize elements. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this collection using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this collection using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the object in the first slot. ;  ; Int_t GetEntries () const override;  Return the number of objects in array (i.e. ;  ; Int_t GetEntriesFast () const;  ; Int_t GetEntriesUnsafe () const;  Return the number of objects in array (i.e. ;  ; Int_t GetLast () const override;  Return index of last object in array. ;  ; TObject ** GetObjectRef () const;  ; TObject ** GetObjectRef (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjArray.html:3977,Clear,Clear,3977,doc/master/classTObjArray.html,https://root.cern,https://root.cern/doc/master/classTObjArray.html,3,['Clear'],['Clear']
Usability,"er object after. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add object at position ids. ;  ; virtual void AddAtAndExpand (TObject *obj, Int_t idx);  Add object at position idx. ;  ; virtual Int_t AddAtFree (TObject *obj);  Return the position of the new object. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add object in the slot before object before. ;  ; void AddFirst (TObject *obj) override;  Add object in the first slot of the array. ;  ; void AddLast (TObject *obj) override;  Add object in the next empty slot in the array. ;  ; TObject * After (const TObject *obj) const override;  Return the object after obj. Returns 0 if obj is last object. ;  ; TObject * At (Int_t idx) const override;  ; TObject * Before (const TObject *obj) const override;  Return the object before obj. Returns 0 if obj is first object. ;  ; virtual Int_t BinarySearch (TObject *obj, Int_t upto=kMaxInt);  Find object using a binary search. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the array. ;  ; virtual void Compress ();  Remove empty slots from array. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the array and free the internal memory. ;  ; virtual void Expand (Int_t newSize);  Expand or shrink the array to newSize elements. ;  ; TObject * First () const override;  Return the object in the first slot. ;  ; Int_t GetEntries () const override;  Return the number of objects in array (i.e. ;  ; Int_t GetEntriesFast () const;  ; Int_t GetLast () const override;  Return index of last object in array. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer obj. ;  ; TProcessID * GetPID () const;  ; UInt_t GetUID (Int_t at) const;  Return UID of element at. ;  ; Int_t IndexOf (const TObject *obj) const override;  ; TClass * IsA () const override;  ; Bool_t IsEmpty () const override;  ; TObject * Last () const override;  Return the object in the last filled slot. Returns 0 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefArray.html:7332,Clear,Clear,7332,doc/master/classTRefArray.html,https://root.cern,https://root.cern/doc/master/classTRefArray.html,1,['Clear'],['Clear']
Usability,"er of bytes in the object name. … -> …; | Name; | lName bytes with the name of the object. … -> …; | lTitle; | Number of bytes in the object title. … -> …; | Title; | Title of the object. … -> …; | DATA; | Data bytes associated to the object. You see a reference to TKey. It is explained in detail in the next section.; 11.1.4 The Class Description List (StreamerInfo List); The histogram records are followed by the StreamerInfo list of class descriptions. The list contains the description of each class that has been written to file.; 20010404/092347 At:5854 N=2390 StreamerInfo CX = 3.41; The class description is recursive, because to fully describe a class, its ancestors and object data members have to be described also. In demo.root, the class description list contains the description for:. TH1F; all classes in the TH1F inheritance tree; all classes of the object data members; all classes in the object data members’ inheritance tree. This description is implemented by the TStreamerInfo class, and is often referred to as simply StreamerInfo. You can print a file’s StreamerInfolist with the TFile::ShowStreamerInfo method. Below is an example of the output. Only the first line of each class description is shown. The demo.root example contains only TH1F objects. Here we see the recursive nature of the class description; it contains the StreamerInfoof all the classes needed to describe TH1F.; root[] f.ShowStreamerInfo(); StreamerInfo for class: TH1F, version=1; BASE TH1 offset=0 type= 0 1-Dim histogram base class; BASE TArrayF offset=0 type= 0 Array of floats. StreamerInfo for class: TH1, version=3; BASE TNamed offset=0 type=67 The basis for named object(name,title); BASE TAttLine offset=0 type=0 Line attributes; BASE TAttFill offset=0 type=0 Fill area attributes; BASE TAttMarker offset=0 type=0 Marker attributes; Int_t fNcells offset=0 type=3 number bins(1D),cells(2D)+U/Overflows; TAxis fXaxis offset=0 type=61 X axis descriptor; TAxis fYaxis offset=0 type=61 Y axis descri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:436607,simpl,simply,436607,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"er of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. private:. Int_tfInnerLowWaterMarkinner node low water mark; Int_tfInnerMaxIndexmaximum inner node index; Int_tfLeafLowWaterMarkleaf low water mark; Int_tfLeafMaxIndexmaximum leaf index; Int_tfOrderthe order of the tree (should be > 2); Int_tfOrder2order*2+1 (assumes a memory access is; TBtNode*fRootroot node of btree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBtree(int order); Create a B-tree of certain order (by default 3). ~TBtree(); Delete B-tree. Objects are not deleted unless the TBtree is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to B-tree. TObject * After(const TObject* obj) const; Cannot use this method since B-tree decides order. TObject * Before(const TObject* obj) const; May not use this method since B-tree decides order. void Clear(Option_t* option = """"); Remove all objects from B-tree. Does NOT delete objects unless the TBtree; is the owner (set via SetOwner()). void Delete(Option_t* option = """"); Remove all objects from B-tree AND delete all heap based objects. TObject * FindObject(const char* name) const; Find object using its name (see object's GetName()). Requires sequential; search of complete tree till object is found. TObject * FindObject(const TObject* obj) const; Find object using the objects Compare() member function. Int_t IdxAdd(const TObject& obj); Add object and return its index in the tree. void Init(Int_t i); Initialize a B-tree. TIterator * MakeIterator(Bool_t dir = kIterForward) const; Returns a B-tree iterator. Int_t Rank(const TObject* obj) const; Returns the rank of the object in the tree. TObject * Remove(TObject* obj); Remove an object from the tree. void RootIsFull(); The root of the tree is full. Create an InnerNode that; points to it, and then inform the InnerNode that it is full. void RootIsEmpty(); If root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBtree.html:17453,Clear,Clear,17453,root/html602/TBtree.html,https://root.cern,https://root.cern/root/html602/TBtree.html,2,['Clear'],['Clear']
Usability,"er of points used for the underlying histogram. The number of bins will be num_points - 1. . Definition at line 217 of file ROCCurve.cxx. ◆ GetMvas(). const std::vector< std::tuple< Float_t, Float_t, Bool_t > > TMVA::ROCCurve::GetMvas ; (; ); const. inline . Definition at line 68 of file ROCCurve.h. ◆ GetROCCurve(). TGraph * TMVA::ROCCurve::GetROCCurve ; (; const UInt_t ; num_points = 100). Returns a new TGraph containing the ROC curve. ; Sensitivity is on the x-axis, specificity on the y-axis.; Parameters. num_pointsGranularity of the resulting curve. The curve will be subdivided into num_points - 1 regions where the performance of the classifier is sampled. Larger number means more accurate, but more costly, evaluation. . Definition at line 274 of file ROCCurve.cxx. ◆ GetROCIntegral(). Double_t TMVA::ROCCurve::GetROCIntegral ; (; const UInt_t ; num_points = 41). Calculates the ROC integral (AUC) ; Parameters. num_pointsGranularity of the resulting curve used for integration. The curve will be subdivided into num_points - 1 regions where the performance of the classifier is sampled. Larger number means more accurate, but more costly, evaluation. . Definition at line 248 of file ROCCurve.cxx. ◆ Log(). TMVA::MsgLogger & TMVA::ROCCurve::Log ; (; ); const. private . Definition at line 128 of file ROCCurve.cxx. Member Data Documentation. ◆ fGraph. TGraph* TMVA::ROCCurve::fGraph. private . Definition at line 73 of file ROCCurve.h. ◆ fLogger. MsgLogger* TMVA::ROCCurve::fLogger. mutableprivate . ! message logger ; Definition at line 70 of file ROCCurve.h. ◆ fMva. std::vector<std::tuple<Float_t, Float_t, Bool_t> > TMVA::ROCCurve::fMva. private . Definition at line 75 of file ROCCurve.h. Libraries for TMVA::ROCCurve:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ROCCurve.h; tmva/tmva/src/ROCCurve.cxx. TMVAROCCurve. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html:5654,Guid,Guide,5654,doc/master/classTMVA_1_1ROCCurve.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html,1,['Guid'],['Guide']
Usability,"er of signal events (used to compute significance)Definition DataLoader.cxx:402; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::PyMethodBase::PyInitializestatic void PyInitialize()Initialize Python interpreter.Definition PyMethodBase.cxx:153; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kFisher@ kFisherDefinition Types.h:82; TMVA::Types::kPyKeras@ kPyKerasDefinition Types.h:103; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TMVA::Types::kDL@ kDLDefinition Types.h:99; TMVA::Types::kLikelihood@ kLikelihoodDefinition Types.h:79; TMVA::Types::kMLP@ kMLPDefinition Types.h:90; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TStringBasic string class.Definition TString.h:139; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Printvoid Print(Option_t *option="""") const overridePrint a summary of the tree contents.Definition TTree.cxx:7219; c1return c1Definition legend1.C:41; TMVA_Higgs_ClassificationDefinition TMVA_Higgs_Classification.py:1; mTMarker mDefinition textangle.C:8; AuthorLorenzo Moneta ; Definition in file TMVA_Higgs_Classification.C. tutorialstmvaTMVA_Higgs_Classification.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:73572,Guid,Guide,73572,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Guid'],['Guide']
Usability,"er offers many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time (TH1::Draw), it creates a THistPainter object and saves a pointer to this ""painter"" as a data member of the histogram. The THistPainter class specializes in the drawing of histograms. It is separated from the histogram so that one can have histograms without the graphics overhead, for example in a batch program. Each histogram having its own painter (rather than a central singleton painter painting all histograms), allows two histograms to be drawn in two threads without overwriting the painter's values.; When a displayed histogram is filled again, there is no need to call the Draw() method again; the image will be refreshed the next time the pad will be updated.; A pad is updated after one of these three actions:. a carriage control on the ROOT command line,; a click inside the pad,; a call to TPad::Update. By default a call to TH1::Draw() clears the pad of all objects before drawing the new image of the histogram. One can use the SAME option to leave the previous display intact and superimpose the new histogram. The same histogram can be drawn with different graphics options in different pads.; When a displayed histogram is deleted, its image is automatically removed from the pad.; To create a copy of the histogram when drawing it, one can use TH1::DrawClone(). This will clone the histogram and allow to change and delete the original one without affecting the clone. Histograms' plotting options; Most options can be concatenated with or without spaces or commas, for example: h->Draw(""E1 SAME"");; The options are not case sensitive: h->Draw(""e1 same"");; The default drawing option can be set with TH1::SetOption and retrieve using TH1::GetOption: root [0] h->Draw(); // Draw ""h"" using the standard histogram representation.; root [1] h->Draw(""E""); // Draw ""h"" using error bars; root [3] h->SetOption(""E""); // Change the default drawing option for ""h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:3934,clear,clears,3934,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['clear'],['clears']
Usability,"er one can browse all ROOT objects.Definition TBrowser.h:37; TTask<div class=""legacybox""><h2>Legacy Code</h2> TTask is a legacy interface: there will be no bug fixes n...Definition TTask.h:35; TTask::TTaskTTask()Default constructor invoked when reading a TTask object from a file.Definition TTask.cxx:98; TTask::Addvirtual void Add(TTask *task)Add TTask to this.Definition TTask.cxx:176; . Definition at line 35 of file TTask.h. Public Member Functions;  TTask ();  Default constructor invoked when reading a TTask object from a file. ;  ;  TTask (const char *name, const char *title);  Standard constructor. ;  ;  TTask (const TTask &task);  Copy constructor. ;  ; virtual ~TTask ();  Delete a task and its subtasks. ;  ; virtual void Abort ();  Abort current tree of tasks. ;  ; virtual void Add (TTask *task);  Add TTask to this. ;  ; void Browse (TBrowser *b) override;  Browse the list of tasks. ;  ; virtual void CleanTasks ();  Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ;  ; void Clear (Option_t *option="""") override;  Recursively call the Clear function of this task and its subtasks. ;  ; virtual void Continue ();  Resume execution at the current break point. ;  ; virtual void Exec (Option_t *option);  Dummy Execute. ;  ; virtual void ExecuteTask (Option_t *option=""0"");  Execute main task and its subtasks. ;  ; virtual void ExecuteTasks (Option_t *option);  Execute all the subtasks of a task. ;  ; Int_t GetBreakin () const;  ; Int_t GetBreakout () const;  ; TList * GetListOfTasks () const;  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void ls (Option_t *option=""*"") const override;  List the tree of tasks. ;  ; TTask & operator= (const TTask &tt);  Assignment operator. ;  ; void SetActive (Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:4307,Clear,Clear,4307,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"er plot, specified by a vector of floats. ; By default, dashed lines are drawn at certain points. You can either disable them, or specify where you want them to appear. ; void ratioplot4() {; gStyle->SetOptStat(0);; auto c1 = new TCanvas(""c1"", ""fit residual simple"");; auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);; h1->FillRandom(""gaus"", 2000);; h1->Fit(""gaus"", ""0"");; h1->GetXaxis()->SetTitle(""x"");; h1->GetYaxis()->SetTitle(""y"");; auto rp1 = new TRatioPlot(h1);; std::vector<double> lines = {-3, -2, -1, 0, 1, 2, 3};; rp1->SetGridlines(lines);; rp1->Draw();; rp1->GetLowerRefGraph()->SetMinimum(-4);; rp1->GetLowerRefGraph()->SetMaximum(4);; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRatioPlotClass for displaying ratios, differences and fit residuals.Definition TRatioPlot.h:43; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; ratioplot4Definition ratioplot4.py:1; AuthorPaul Gessinger ; Definition in file ratioplot4.C. tutorialshistratioplot4.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ratioplot4_8C.html:2185,Guid,Guide,2185,doc/master/ratioplot4_8C.html,https://root.cern,https://root.cern/doc/master/ratioplot4_8C.html,1,['Guid'],['Guide']
Usability,"er redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return _clearObsList ; }. void setClearOnRedirect(Bool_t flag); { _clearOnRedirect = flag ; }. » Last changed: Sat Jun 20 16:42:31 2015 » Last generated: 2015-06-20 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooObjCacheManager.html:5809,clear,clearOnRedirect,5809,root/html534/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html534/RooObjCacheManager.html,2,['clear'],"['clearObsList', 'clearOnRedirect']"
Usability,"er redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return _clearObsList ; }. void setClearOnRedirect(Bool_t flag); { _clearOnRedirect = flag ; }. » Last changed: Sat Jun 20 17:30:22 2015 » Last generated: 2015-06-20 17:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooObjCacheManager.html:5820,clear,clearOnRedirect,5820,root/html604/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html604/RooObjCacheManager.html,2,['clear'],"['clearObsList', 'clearOnRedirect']"
Usability,"er redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return _clearObsList ; }. void setClearOnRedirect(Bool_t flag); { _clearOnRedirect = flag ; }. » Last changed: Tue Jun 30 14:34:43 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooObjCacheManager.html:5820,clear,clearOnRedirect,5820,root/html602/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html602/RooObjCacheManager.html,2,['clear'],"['clearObsList', 'clearOnRedirect']"
Usability,er support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 264 of file Minuit2Minimizer.cxx. ◆ X(). const double * ROOT::Minuit2::Minuit2Minimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 143 of file Minuit2Minimizer.h. Member Data Documentation. ◆ fDim. unsigned int ROOT::Minuit2::Minuit2Minimizer::fDim. private . Definition at line 302 of file Minuit2Minimizer.h. ◆ fErrors. std::vector<double> ROOT::Minuit2::Minuit2Minimizer::fErrors. mutableprivate . Definition at line 312 of file Minuit2Minimizer.h. ◆ fMinimizer. ROOT::Minuit2::ModularFunctionMinimizer* ROOT::Minuit2::Minuit2Minimizer::fMinimizer. private . Definition at line 308 of file Minuit2Minimizer.h. ◆ fMinimum. ROOT::Minuit2::FunctionMinimum* ROOT::Minuit2::Minuit2Minimizer::fMinimum. private . Definition at line 310 of file Minuit2Minimizer.h. ◆ fMinosStatus. int ROOT::Minuit2::Minuit2Minimizer::fMinosStatus = -1. private . Definition at line 304 of file Minuit2Minimizer.h. ◆ fMinuitFCN. ROOT::Minuit2::FCNBase* ROOT::Minuit2::Minuit2Minimizer::fMinuitFCN. private . Definition at line 309 of file Minuit2Minimizer.h. ◆ fState. ROOT::Minuit2::MnUserParameterState ROOT::Minuit2::Minuit2Minimizer::fState. private . Definition at line 306 of file Minuit2Minimizer.h. ◆ fUseFumili. bool ROOT::Minuit2::Minuit2Minimizer::fUseFumili. private . Definition at line 303 of file Minuit2Minimizer.h. ◆ fValues. std::vector<double> ROOT::Minuit2::Minuit2Minimizer::fValues. mutableprivate . Definition at line 311 of file Minuit2Minimizer.h. Libraries for ROOT::Minuit2::Minuit2Minimizer:. [legend]; The documentation for this class was generated from the following files:; math/minuit2/inc/Minuit2/Minuit2Minimizer.h; math/minuit2/src/Minuit2Minimizer.cxx. ROOTMinuit2Minuit2Minimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:32212,Guid,Guide,32212,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['Guid'],['Guide']
Usability,"er than or equal to nc. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(); Make string a distinct copy; preserve previous contents. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least nc.; Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Ssiz_t InitialCapacity(Ssiz_t ic = 15); Set default initial capacity for all TStrings. Default is 15. Ssiz_t ResizeIncrement(Ssiz_t ri = 16); Set default resize increment for all TStrings. Default is 16. Ssiz_t MaxWaste(Ssiz_t mw = 15); Set maximum space that may be wasted in a string before doing a resize.; Default is 15. TSubString operator()(Ssiz_t start, Ssiz_t len) const; Return sub-string of string starting at start with length len. TSubString SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; Returns a substring matching ""pattern"", or the null substring; if there is no such match. It would be nice if this could be yet another; overloaded version of operator(), but this would result in a type; conversion ambiguity with operator(Ssiz_t, Ssiz_t). Bool_t IsAscii() const; Returns true if all character",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TString.html:12915,Simpl,Simplified,12915,root/html528/TString.html,https://root.cern,https://root.cern/root/html528/TString.html,1,['Simpl'],['Simplified']
Usability,"er the option string has to be:; - CONV | number of units | filter height | filter width | stride height | stride width | padding height | paddig; width | activation function; ; - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; conv layer equal to the input; ; - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; convergence; ; - For the MaxPool layer:; - MAXPOOL | pool height | pool width | stride height | stride width; ; The RESHAPE layer is needed to flatten the output before the Dense layer; ; ; Note that to run the CNN is required to have CPU or GPU support; ; ***/; ; if (useTMVACNN) {; ; TString inputLayoutString(""InputLayout=1|16|16"");; ; // Batch Layout; TString layoutString(""Layout=CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,""; ""RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"");; ; // Training strategies.; TString trainingString1(""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""MaxEpochs=10,WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0"");; ; TString trainingStrategyString(""TrainingStrategy="");; trainingStrategyString +=; trainingString1; // + ""|"" + trainingString2 + ""|"" + trainingString3; for concatenating more training strings; ; // Build full CNN Options.; TString cnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIER"");; ; cnnOptions.Append("":"");; cnnOptions.Append(inputLayoutString);; cnnOptions.Append("":"");; cnnOptions.Append(layoutString);; cnnOptions.Append("":"");; cnnOptions.Append(trainingStrategyString);; ; //// New DL (CNN); TString cnnMethodName = ""TMVA_CNN_CPU"";; // use GPU if available; #ifdef R__HAS_TMVAGPU; cnnOptions += "":Architecture=GPU"";; cnnMethodName = ""TMVA_CNN_GPU"";; #else; cnnOptions += "":Architecture=CPU"";; cnnMethodName = ""TMVA_CNN_CPU"";; #endif; ; factory.B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:56806,Learn,LearningRate,56806,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"er to array of redo arguments. ; Definition at line 752 of file TQCommand.cxx. ◆ GetRedoName(). const char * TQCommand::GetRedoName ; (; ); const. Returns the name of redo command. ; Definition at line 736 of file TQCommand.cxx. ◆ GetStatus(). Int_t TQCommand::GetStatus ; (; ); const. Returns a number of sequential undo or redo operations. ; Definition at line 792 of file TQCommand.cxx. ◆ GetTitle(). const char * TQCommand::GetTitle ; (; ); const. overridevirtual . Returns command description. ; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"" ; Reimplemented from TObject.; Definition at line 713 of file TQCommand.cxx. ◆ GetUndo(). TQConnection * TQCommand::GetUndo ; (; ); const. inline . Definition at line 76 of file TQCommand.h. ◆ GetUndoArgs(). Long_t * TQCommand::GetUndoArgs ; (; ); const. Returns a pointer to array of undo arguments. ; Definition at line 760 of file TQCommand.cxx. ◆ GetUndoName(). const char * TQCommand::GetUndoName ; (; ); const. Returns the name of undo command. ; Definition at line 744 of file TQCommand.cxx. ◆ Init(). void TQCommand::Init ; (; const char * ; cl, . void * ; object, . const char * ; redo, . const char * ; undo . ). protectedvirtual . Common protected method used in several constructors. ; Definition at line 120 of file TQCommand.cxx. ◆ IsA(). TClass * TQCommand::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 98 of file TQCommand.h. ◆ IsEqual(). Bool_t TQCommand::IsEqual ; (; const TObject * ; obj); const. overridevirtual . Equal comparison. ; The commands are equal if they are applied to the same object and have the same Redo/Undo actions; More complicated commands might want to override this function. ; Reimplemented from TObject.; Definition at line 418 of file TQCommand.cxx. ◆ IsExecuting(). Bool_t TQCommand::IsExecuting ; (; ); const. Returns kTRUE if command execution is in progress. ; Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:39213,undo,undo,39213,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"er to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:20053,Clear,Clear,20053,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Clear'],['Clear']
Usability,"er() for each of them. ; This function splits the parameter names and extracts their values if they are given. Parameters are separated by "","", values are separated from parameter names by ""="". params being a = ""a, b, c"", b='d,e' will issue two calls to AddParameter(), one for a with value ""a, b, c"" and one for b with value ""d,e"" (each without the quotation marks). ; Definition at line 115 of file TDocDirective.cxx. ◆ SetParser(). void TDocDirective::SetParser ; (; TDocParser * ; parser). protected . Set the parser, and fDocOutput, fHtml from that. ; Definition at line 150 of file TDocDirective.cxx. ◆ SetTag(). void TDocDirective::SetTag ; (; const char * ; tag). inlineprotected . Definition at line 58 of file TDocDirective.h. ◆ Streamer(). void TDocDirective::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TDocHtmlDirective, TDocMacroDirective, and TDocLatexDirective. ◆ StreamerNVirtual(). void TDocDirective::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 77 of file TDocDirective.h. Friends And Related Symbol Documentation. ◆ TDocParser. friend class TDocParser. friend . Definition at line 75 of file TDocDirective.h. Member Data Documentation. ◆ fCounter. Int_t TDocDirective::fCounter. protected . Definition at line 40 of file TDocDirective.h. ◆ fDocOutput. TDocOutput* TDocDirective::fDocOutput. protected . Definition at line 38 of file TDocDirective.h. ◆ fDocParser. TDocParser* TDocDirective::fDocParser. protected . Definition at line 36 of file TDocDirective.h. ◆ fHtml. THtml* TDocDirective::fHtml. protected . Definition at line 37 of file TDocDirective.h. ◆ fParameters. TString TDocDirective::fParameters. protected . Definition at line 39 of file TDocDirective.h. html/inc/TDocDirective.h; html/src/TDocDirective.cxx. TDocDirective. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocDirective.html:18433,Guid,Guide,18433,doc/master/classTDocDirective.html,https://root.cern,https://root.cern/doc/master/classTDocDirective.html,1,['Guid'],['Guide']
Usability,"er(const char* par, const char* value); Set input list parameter. If the parameter is already; set it will be set to the new value. void SetParameter(const char* par, Int_t value); Set an input list parameter. void SetParameter(const char* par, Long_t value); Set an input list parameter. void SetParameter(const char* par, Long64_t value); Set an input list parameter. void SetParameter(const char* par, Double_t value); Set an input list parameter. TObject * GetParameter(const char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a TNamed or 0 in case par is not defined. void DeleteParameters(const char* wildcard); Delete the input list parameters specified by a wildcard (e.g. PROOF_*); or exact name (e.g. PROOF_MaxSlavesPerNode). void ShowParameters(const char* wildcard = ""PROOF_*"") const; Show the input list parameters specified by the wildcard.; Default is the special PROOF control parameters (PROOF_*). void AddFeedback(const char* name); Add object to feedback list. void RemoveFeedback(const char* name); Remove object from feedback list. void ClearFeedback(); Clear feedback list. void ShowFeedback() const; Show items in feedback list. TList * GetFeedbackList() const; Return feedback list. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. TDrawFeedback * CreateDrawFeedback(); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. TList * GetOutputNames(); FIXME: to be written. void Browse(TBrowser* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:74571,feedback,feedback,74571,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['feedback'],['feedback']
Usability,"er, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__geom.html:2148,simpl,simple,2148,doc/master/group__tutorial__geom.html,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html,1,['simpl'],['simple']
Usability,"er->fBegin,iter->fEnd);; 4456}; 4457 ; 4458////////////////////////////////////////////////////////////////////////////////; 4459/// Read leaves into i/o buffers for this branch.; 4460/// Case of a TClonesArray (fType == 3).; 4461 ; 4462void TBranchElement::ReadLeavesClones(TBuffer& b); 4463{; 4464 ValidateAddress();; 4465 if (fObject == nullptr); 4466 {; 4467 // We have nowhere to copy the data (probably because the data member was; 4468 // 'dropped' from the current schema) so let's no copy it in a random place.; 4469 return;; 4470 }; 4471 ; 4472 // TClonesArray master branch (has only the number of elements).; 4473 Int_t n;; 4474 b >> n;; 4475 if ((n < 0) || (n > fMaximum)) {; 4476 if (IsMissingCollection()) {; 4477 n = 0;; 4478 b.SetBufferOffset(b.Length()-sizeof(n));; 4479 } else {; 4480 Error(""ReadLeaves"", ""Incorrect size read for the container in %s\n\tThe size read is %d while the maximum is %d\n\tThe size is reset to 0 for this entry (%lld)"", GetName(), n, fMaximum, GetReadEntry());; 4481 n = 0;; 4482 }; 4483 }; 4484 fNdata = n;; 4485 TClonesArray* clones = (TClonesArray*) fObject;; 4486 if (clones->IsZombie()) {; 4487 return;; 4488 }; 4489 // The salient part of Clear is now 'duplicated in ExpandCreateFast (i.e. the; 4490 // setting to zero of the unused slots), so we no longer need to call Clear explicitly; 4491 // clones->Clear();; 4492 clones->ExpandCreateFast(fNdata);; 4493}; 4494 ; 4495////////////////////////////////////////////////////////////////////////////////; 4496/// Read leaves into i/o buffers for this branch.; 4497/// Case of a data member within a TClonesArray (fType == 31).; 4498 ; 4499void TBranchElement::ReadLeavesClonesMember(TBuffer& b); 4500{; 4501 // No need to validate the address here, if we are a member of a split ClonesArray,; 4502 // fID is positive; 4503 // ValidateAddress();; 4504 ; 4505 if (fObject == nullptr); 4506 {; 4507 // We have nowhere to copy the data (probably because the data member was; 4508 // 'dropped' from the cu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:166009,Clear,Clear,166009,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Clear'],['Clear']
Usability,"er. ; Definition at line 45 of file Adam.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdam (DeepNet_t &deepNet, Scalar_t learningRate=0.001, Scalar_t beta1=0.9, Scalar_t beta2=0.999, Scalar_t epsilon=1e-7);  Constructor. ;  ;  ~TAdam ()=default;  Destructor. ;  ; Scalar_t GetBeta1 () const;  Getters. ;  ; Scalar_t GetBeta2 () const;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentBiases ();  ; std::vector< Matrix_t > & GetFirstMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentWeights ();  ; std::vector< Matrix_t > & GetFirstMomentWeightsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentBiases ();  ; std::vector< Matrix_t > & GetSecondMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentWeights ();  ; std::vector< Matrix_t > & GetSecondMomentWeightsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html:2001,learn,learningRate,2001,doc/master/classTMVA_1_1DNN_1_1TAdam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html,1,['learn'],['learningRate']
Usability,"er. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteBuffer (TBuffer &b, void *pointer, const char *info="""");  Function called by the Streamer functions to serialize object at p to buffer b. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQClass.html:23921,Clear,Clear,23921,doc/master/classTQClass.html,https://root.cern,https://root.cern/doc/master/classTQClass.html,1,['Clear'],['Clear']
Usability,"er. In addition, it provides the; possibilities for compiling, executing or interrupting a running; macro. This class can be used in following ways:; - with file name as argument:; new TGTextEditor(""hsimple.C"");; - with a TMacro* as argument:; TMacro *macro = new TMacro(""hsimple.C"");; new TGTextEditor(macro);. Basic Features:. New Document. To create a new blank document, select File menu / New, or click; the New toolbar button. It will create a new instance of; TGTextEditor. Open/Save File. To open a file, select File menu / Open or click on the Open; toolbar button. This will bring up the standard File Dialog for; opening files.; If the current document has not been saved yet, you will be asked; either to save or abandon the changes.; To save the file using the same name, select File menu / Save or; the toolbar Save button. To change the file name use File menu /; Save As... or corresponding SaveAs button on the toolbar. Text Selection. You can move the cursor by simply clicking on the desired location; with the left mouse button. To highlight some text, press the mouse; and drag the mouse while holding the left button pressed.; To select a word, double-click on it;; to select the text line - triple-click on it;; to select all do quadruple-click. Cut, Copy, Paste. After selecting some text, you can cut or copy it to the clipboard.; A subsequent paste operation will insert the contents of the; clipboard at the current cursor location. Text Search. The editor uses a standard Search dialog. You can specify a forward; or backward search direction starting from the current cursor; location according to the selection made of a case sensitive mode; or not. The last search can be repeated by pressing F3. Text Font. You can change the text font by selecting Edit menu / Set Font.; The Font Dialog pops up and shows the Name, Style, and Size of any; available font. The selected font sample is shown in the preview; area. Executing Macros. You can execute the currently loaded m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEditor.html:1447,simpl,simply,1447,root/html528/TGTextEditor.html,https://root.cern,https://root.cern/root/html528/TGTextEditor.html,6,['simpl'],['simply']
Usability,"er. Reference Guide ; .  . Loading...; Searching...; No Matches. bent.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Bent error bars . ; void bent() ; {; const Int_t n = 10;; Double_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};; Double_t exld[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyld[n] = {.0,.0,.05,.0,.0,.0,.0,.0,.0,.0};; Double_t exhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0};; Double_t eyhd[n] = {.0,.0,.0,.0,.0,.0,.0,.0,.05,.0};; TGraphBentErrors *gr = new TGraphBentErrors(; n,x,y,exl,exh,eyl,eyh,exld,exhd,eyld,eyhd);; gr->SetTitle(""TGraphBentErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; bentDefinition bent.py:1; AuthorOlivier Couet ; Definition in file bent.C. tutorialsgraphsbent.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bent_8C.html:1984,Guid,Guide,1984,doc/master/bent_8C.html,https://root.cern,https://root.cern/doc/master/bent_8C.html,1,['Guid'],['Guide']
Usability,er.cxx. Friends And Related Symbol Documentation. ◆ TEveGridStepperSubEditor. friend class TEveGridStepperSubEditor. friend . Definition at line 23 of file TEveGridStepper.h. Member Data Documentation. ◆ fCx. Int_t TEveGridStepper::fCx. protected . Definition at line 37 of file TEveGridStepper.h. ◆ fCy. Int_t TEveGridStepper::fCy. protected . Definition at line 37 of file TEveGridStepper.h. ◆ fCz. Int_t TEveGridStepper::fCz. protected . Definition at line 37 of file TEveGridStepper.h. ◆ fDx. Float_t TEveGridStepper::fDx. protected . Definition at line 39 of file TEveGridStepper.h. ◆ fDy. Float_t TEveGridStepper::fDy. protected . Definition at line 39 of file TEveGridStepper.h. ◆ fDz. Float_t TEveGridStepper::fDz. protected . Definition at line 39 of file TEveGridStepper.h. ◆ fLimitArr. Int_t* TEveGridStepper::fLimitArr[3]. private . Definition at line 26 of file TEveGridStepper.h. ◆ fMode. EStepMode_e TEveGridStepper::fMode. protected . Definition at line 35 of file TEveGridStepper.h. ◆ fNx. Int_t TEveGridStepper::fNx. protected . Definition at line 38 of file TEveGridStepper.h. ◆ fNy. Int_t TEveGridStepper::fNy. protected . Definition at line 38 of file TEveGridStepper.h. ◆ fNz. Int_t TEveGridStepper::fNz. protected . Definition at line 38 of file TEveGridStepper.h. ◆ fOx. Float_t TEveGridStepper::fOx. protected . Definition at line 40 of file TEveGridStepper.h. ◆ fOy. Float_t TEveGridStepper::fOy. protected . Definition at line 40 of file TEveGridStepper.h. ◆ fOz. Float_t TEveGridStepper::fOz. protected . Definition at line 40 of file TEveGridStepper.h. ◆ fValueArr. Int_t * TEveGridStepper::fValueArr[3]. private . Definition at line 26 of file TEveGridStepper.h. Libraries for TEveGridStepper:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveGridStepper.h; graf3d/eve/src/TEveGridStepper.cxx. TEveGridStepper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGridStepper.html:18332,Guid,Guide,18332,doc/master/classTEveGridStepper.html,https://root.cern,https://root.cern/doc/master/classTEveGridStepper.html,1,['Guid'],['Guide']
Usability,"er.h. ◆ Process() [3/4]. Long64_t TProofPlayerLocal::Process ; (; TDSet * ; set, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). inlineoverridevirtual . Process specified TDSet on PROOF worker with TSelector object The return value is -1 in case of error and TSelector::GetStatus() in case of success. ; Reimplemented from TProofPlayer.; Definition at line 254 of file TProofPlayer.h. ◆ Process() [4/4]. Long64_t TProofPlayerLocal::Process ; (; TSelector * ; selector, . Long64_t ; nentries = -1, . Option_t * ; option = """" . ). Process the specified TSelector object 'nentries' times. ; Used to test the PROOF interator mechanism for cycle-driven selectors in a local session. The return value is -1 in case of error and TSelector::GetStatus() in case of success. ; Definition at line 1852 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayerLocal::SetupFeedback ; (; ). inlineoverrideprotectedvirtual . Set up feedback (may not be used in this class). ; Reimplemented from TProofPlayer.; Definition at line 240 of file TProofPlayer.h. ◆ StopFeedback(). void TProofPlayerLocal::StopFeedback ; (; ). inlineoverrideprotectedvirtual . Stop feedback (may not be used in this class). ; Reimplemented from TProofPlayer.; Definition at line 241 of file TProofPlayer.h. ◆ Streamer(). void TProofPlayerLocal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofPlayer. ◆ StreamerNVirtual(). void TProofPlayerLocal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 258 of file TProofPlayer.h. Member Data Documentation. ◆ fIsClient. Bool_t TProofPlayerLocal::fIsClient. private . Definition at line 237 of file TProofPlayer.h. proof/proofplayer/inc/TProofPlayer.h; proof/proofplayer/src/TProofPlayer.cxx. TProofPlayerLocal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:27469,feedback,feedback,27469,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,3,"['Guid', 'feedback']","['Guide', 'feedback']"
Usability,"er.hxx. ◆ DeclFileName(). static const char * ROOT::TBufferMergerFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 177 of file TBufferMerger.hxx. ◆ IsA(). TClass * ROOT::TBufferMergerFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 177 of file TBufferMerger.hxx. ◆ operator=(). TBufferMergerFile & ROOT::TBufferMergerFile::operator= ; (; const TBufferMergerFile & ; ). private . TBufferMergerFile has no copy operator. . ◆ Streamer(). void ROOT::TBufferMergerFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::TBufferMergerFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 177 of file TBufferMerger.hxx. ◆ Write(). Int_t ROOT::TBufferMergerFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsize = 0 . ). overridevirtual . Write data into a TBufferFile and append it to TBufferMerger. ; Parameters. nameName ; optOptions ; bufsizeBuffer size This function must be called before the TBufferMergerFile gets destroyed, or no data is appended to the TBufferMerger. . Reimplemented from TDirectory.; Definition at line 29 of file TBufferMergerFile.cxx. Friends And Related Symbol Documentation. ◆ TBufferMerger. friend class TBufferMerger. friend . Definition at line 160 of file TBufferMerger.hxx. Member Data Documentation. ◆ fMerger. TBufferMerger& ROOT::TBufferMergerFile::fMerger. private . Definition at line 145 of file TBufferMerger.hxx. Libraries for ROOT::TBufferMergerFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/ROOT/TBufferMerger.hxx; io/io/src/TBufferMergerFile.cxx. ROOTTBufferMergerFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html:47965,Guid,Guide,47965,doc/master/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TBufferMergerFile.html,1,['Guid'],['Guide']
Usability,"er::Sumw2static void Sumw2(T *p, Bool_t flag)Definition TProfileHelper.h:529; TProfileHelper::SetBinEntriesstatic void SetBinEntries(T *p, Int_t bin, Double_t w)Definition TProfileHelper.h:768; TProfileHelper::Scalestatic void Scale(T *p, Double_t c1, Option_t *option)Definition TProfileHelper.h:512; TProfileHelper::SetErrorOptionstatic void SetErrorOption(T *p, Option_t *opt)Definition TProfileHelper.h:693; TProfileHelper::Mergestatic Long64_t Merge(T *p, TCollection *list)Definition TProfileHelper.h:167; TProfileHelper::BuildArraystatic void BuildArray(T *p)Definition TProfileHelper.h:130; TProfileHelper::Addstatic Bool_t Add(T *p, const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2=1)Definition TProfileHelper.h:71; TProfileHelper::GetBinEffectiveEntriesstatic Double_t GetBinEffectiveEntries(T *p, Int_t bin)Definition TProfileHelper.h:143; TProfileHelper::LabelsDeflatestatic void LabelsDeflate(T *p, Option_t *)Definition TProfileHelper.h:560; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. histhistsrcTProfile3D.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:71430,Guid,Guide,71430,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['Guid'],['Guide']
Usability,"er::TFitter ; (; const TFitter & ; ). private . ◆ TFitter() [2/2]. TFitter::TFitter ; (; Int_t ; maxpar = 25). Default constructor. ; Definition at line 39 of file TFitter.cxx. ◆ ~TFitter(). TFitter::~TFitter ; (; ). override . Default destructor. ; Definition at line 51 of file TFitter.cxx. Member Function Documentation. ◆ Chisquare(). Double_t TFitter::Chisquare ; (; Int_t ; npar, . Double_t * ; params . ); const. overridevirtual . Deprecated:Use ROOT::Fit::Chisquare class instead.; return a chisquare equivalent ; Implements TVirtualFitter.; Definition at line 64 of file TFitter.cxx. ◆ Class(). static TClass * TFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 62 of file TFitter.h. ◆ Clear(). void TFitter::Clear ; (; Option_t * ; option = """"). overridevirtual . reset the fitter environment ; Implements TVirtualFitter.; Definition at line 73 of file TFitter.cxx. ◆ DeclFileName(). static const char * TFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 62 of file TFitter.h. ◆ ExecuteCommand(). Int_t TFitter::ExecuteCommand ; (; const char * ; command, . Double_t * ; args, . Int_t ; nargs . ). overridevirtual . Execute a fitter command; command : command string args : list of nargs command arguments. ; Implements TVirtualFitter.; Definition at line 89 of file TFitter.cxx. ◆ FixParameter(). void TFitter::FixParameter ; (; Int_t ; ipar). overridevirtual . Fix parameter ipar. ; Implements TVirtualFitter.; Definition at line 100 of file TFitter.cxx. ◆ GetConfidenceIntervals() [1/2]. void TFitter::GetConfidenceIntervals ; (; Int_t ; n, . Int_t ; ndim, . const Double_t * ; x, . Double_t * ; ci, . Double_t ; cl = 0.95 . ). overridevirtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:19841,Clear,Clear,19841,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,1,['Clear'],['Clear']
Usability,"er::fPopSize. private . number of individuals to start with ; Definition at line 71 of file GeneticFitter.h. ◆ fSaveBestFromCycle. Int_t TMVA::GeneticFitter::fSaveBestFromCycle. private . store the best individuals from one cycle (these are included as ""hints"" in the last cycle of GA calculation) ; Definition at line 77 of file GeneticFitter.h. ◆ fSaveBestFromGeneration. Int_t TMVA::GeneticFitter::fSaveBestFromGeneration. private . store the best individuals from one generation (these are included as ""hints"" in the last cycle of GA calculation) ; Definition at line 76 of file GeneticFitter.h. ◆ fSC_factor. Double_t TMVA::GeneticFitter::fSC_factor. private . ... with fSC_factor; if there were less improvements: divide by that factor; if there were exactly fSC_rate improvements, dont change anything ; Definition at line 74 of file GeneticFitter.h. ◆ fSC_rate. Int_t TMVA::GeneticFitter::fSC_rate. private . ... fSC_rate improvements, than multiply the sigma of the gaussian which defines how the random numbers are generated ... ; Definition at line 73 of file GeneticFitter.h. ◆ fSC_steps. Int_t TMVA::GeneticFitter::fSC_steps. private . regulates how strong the mutations for the coordinates are: if within fSC_steps there were more than... ; Definition at line 72 of file GeneticFitter.h. ◆ fSeed. UInt_t TMVA::GeneticFitter::fSeed. private . Seed for the random generator (0 takes random seeds) ; Definition at line 79 of file GeneticFitter.h. ◆ fTrim. Bool_t TMVA::GeneticFitter::fTrim. private . take care, that the number of individuals is less fPopSize (trimming is done after the fitness of the individuals is assessed) ; Definition at line 78 of file GeneticFitter.h. Libraries for TMVA::GeneticFitter:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/GeneticFitter.h; tmva/tmva/src/GeneticFitter.cxx. TMVAGeneticFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:21955,Guid,Guide,21955,doc/master/classTMVA_1_1GeneticFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html,1,['Guid'],['Guide']
Usability,"er::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. unsigned intfDimdimension of the function to be minimized ; vector<double>fErrors; ROOT::Minuit2::ModularFunctionMinimizer*fMinimizer; ROOT::Minuit2::FunctionMinimum*fMinimum; ROOT::Minuit2::FCNBase*fMinuitFCN; ROOT::Minuit2::MnUserParameterStatefState; boolfUseFumili; vector<double>fValues. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Minuit2Minimizer(ROOT::Minuit2::EMinimizerType type = ROOT::Minuit2::kMigrad). Default constructor. Minuit2Minimizer(const char* type). Constructor with a char (used by PM). virtual ~Minuit2Minimizer(). Destructor (no operations). Minuit2Minimizer(const ROOT::Minuit2::Minuit2Minimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. void Clear(); clear resources (parameters) for consecutives minimizations. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__Minuit2Minimizer.html:5498,Clear,Clear,5498,root/html528/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__Minuit2Minimizer.html,6,"['Clear', 'clear']","['Clear', 'clear']"
Usability,er::fXmin. protected . Definition at line 122 of file TSpectrum2Painter.h. ◆ fXs. Int_t TSpectrum2Painter::fXs. protected . Definition at line 182 of file TSpectrum2Painter.h. ◆ fXt. Int_t TSpectrum2Painter::fXt. protected . Definition at line 182 of file TSpectrum2Painter.h. ◆ fYe. Int_t TSpectrum2Painter::fYe. protected . Definition at line 182 of file TSpectrum2Painter.h. ◆ fYlight. Int_t TSpectrum2Painter::fYlight. protected . Definition at line 151 of file TSpectrum2Painter.h. ◆ fYmax. Int_t TSpectrum2Painter::fYmax. protected . Definition at line 125 of file TSpectrum2Painter.h. ◆ fYmin. Int_t TSpectrum2Painter::fYmin. protected . Definition at line 124 of file TSpectrum2Painter.h. ◆ fYs. Int_t TSpectrum2Painter::fYs. protected . Definition at line 182 of file TSpectrum2Painter.h. ◆ fYt. Int_t TSpectrum2Painter::fYt. protected . Definition at line 182 of file TSpectrum2Painter.h. ◆ fZ. Double_t TSpectrum2Painter::fZ. protected . Definition at line 181 of file TSpectrum2Painter.h. ◆ fZeq. Double_t TSpectrum2Painter::fZeq. protected . Definition at line 181 of file TSpectrum2Painter.h. ◆ fZlight. Int_t TSpectrum2Painter::fZlight. protected . Definition at line 152 of file TSpectrum2Painter.h. ◆ fZmax. Double_t TSpectrum2Painter::fZmax. protected . Definition at line 127 of file TSpectrum2Painter.h. ◆ fZmin. Double_t TSpectrum2Painter::fZmin. protected . Definition at line 126 of file TSpectrum2Painter.h. ◆ fZPresetValue. Double_t TSpectrum2Painter::fZPresetValue. protected . Definition at line 181 of file TSpectrum2Painter.h. ◆ fZscale. Int_t TSpectrum2Painter::fZscale. protected . Definition at line 137 of file TSpectrum2Painter.h. Libraries for TSpectrum2Painter:. [legend]; The documentation for this class was generated from the following files:; hist/spectrumpainter/inc/TSpectrum2Painter.h; hist/spectrumpainter/src/TSpectrum2Painter.cxx. TSpectrum2Painter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:66546,Guid,Guide,66546,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Guid'],['Guide']
Usability,"er; vector<TString>fNewEventCommands; Int_tTEveElement::fNumChildren!; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveEventManager(const char* n = ""TEveEventManager"", const char* t = """"); Constructor. void AfterNewEventLoaded(); Virtual function to be called after a new event is loaded.; It iterates over the list of registered commands; (fNewEventCommands) and executes them in given order. void AddNewEventCommand(const TString& cmd); Register a command to be executed on each new event. void RemoveNewEventCommand(const TString& cmd); Remove the first command equal to cmd. void ClearNewEventCommands(); Clear the list of commands to be executed on each new event. virtual ~TEveEventManager(); {}. std::vector<TString>& GetNewEventCommands(); { return fNewEventCommands; }. void Open(); {}. void GotoEvent(Int_t ); {}. void NextEvent(); {}. void PrevEvent(); {}. void Close(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveEventManager.html:20475,Clear,ClearNewEventCommands,20475,root/html534/TEveEventManager.html,https://root.cern,https://root.cern/root/html534/TEveEventManager.html,2,['Clear'],"['Clear', 'ClearNewEventCommands']"
Usability,"erConfig::fAddTypedefToROOTFilevoid(* fAddTypedefToROOTFile)(const char *tdname)Definition rootcling_impl.h:29; ROOT::Internal::RootCling::DriverConfig::fTROOT__GetEtcDirconst char *(* fTROOT__GetEtcDir)()Definition rootcling_impl.h:25; ROOT::Internal::RootCling::DriverConfig::fAddStreamerInfoToROOTFilevoid(* fAddStreamerInfoToROOTFile)(const char *normName)Definition rootcling_impl.h:28; ROOT::Internal::RootCling::DriverConfig::fTROOT__GetExtraInterpreterArgsconst char ***(* fTROOT__GetExtraInterpreterArgs)()Definition rootcling_impl.h:23; ROOT::Internal::RootCling::TROOTSYSSetter::TROOTSYSSetterTROOTSYSSetter()Definition rootcling_impl.cxx:161; ROOT::option::Arg::Nonestatic ArgStatus None(const Option &, bool)For options that don't take an argument: Returns ARG_NONE.Definition OptionParser.h:907; ROOT::option::DescriptorDescribes an option, its help text (usage) and how it should be parsed.Definition OptionParser.h:327; ROOT::option::FullArg::Requiredstatic option::ArgStatus Required(const option::Option &option, bool msg)Definition OptionParser.h:2853; ROOT::option::StatsDetermines the minimum lengths of the buffer and options arrays used for Parser.Definition OptionParser.h:932; ROOT::option::Stats::options_maxunsigned options_maxNumber of elements needed for an options[] array to be used for parsing the same argument vectors tha...Definition OptionParser.h:955; ROOT::option::Stats::buffer_maxunsigned buffer_maxNumber of elements needed for a buffer[] array to be used for parsing the same argument vectors that ...Definition OptionParser.h:942; TClassEdit::TSplitTypeDefinition TClassEdit.h:138; TClassEdit::TSplitType::ShortTypevoid ShortType(std::string &answer, int mode)Return the absolute type of typeDesc into the string answ.Definition TClassEdit.cxx:250; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. coredictgensrcrootcling_impl.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:307893,Guid,Guide,307893,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['Guid'],['Guide']
Usability,"erCopy(seedloader, loader);; 2398 ; 2399 // Booking Seed; 2400 BookMethod(seedloader, theMethod, methodTitle, theOption);; 2401 ; 2402 // Train/Test/Evaluation; 2403 TrainAllMethods();; 2404 TestAllMethods();; 2405 EvaluateAllMethods();; 2406 ; 2407 // getting ROC; 2408 SROC = GetROCIntegral(xbitset.to_string(), methodTitle);; 2409 ; 2410 // cleaning information to process sub-seeds; 2411 TMVA::MethodBase *smethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[xbitset.to_string().c_str()][0][0]);; 2412 TMVA::ResultsClassification *sresults = (TMVA::ResultsClassification *)smethod->Data()->GetResults(; 2413 smethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2414 delete sresults;; 2415 delete seedloader;; 2416 this->DeleteAllMethods();; 2417 fMethodsMap.clear();; 2418 ; 2419 // removing global result because it is requiring a lot of RAM for all seeds; 2420 ; 2421 for (uint32_t i = 0; i < VIBITS; ++i) {; 2422 if (x & (1 << i)) {; 2423 y = x & ~(uint64_t(1) << i);; 2424 std::bitset<VIBITS> ybitset(y);; 2425 // need at least one variable; 2426 // NOTE: if sub-seed is zero then is the special case; 2427 // that count in xbitset is 1; 2428 uint32_t ny = static_cast<uint32_t>(log(x - y) / 0.693147);; 2429 if (y == 0) {; 2430 importances[ny] = SROC - 0.5;; 2431 continue;; 2432 }; 2433 ; 2434 // creating loader for sub-seed; 2435 TMVA::DataLoader *subseedloader = new TMVA::DataLoader(ybitset.to_string());; 2436 // adding variables from sub-seed; 2437 for (int index = 0; index < nbits; index++) {; 2438 if (ybitset[index]); 2439 subseedloader->AddVariable(varNames[index], 'F');; 2440 }; 2441 ; 2442 // Loading Dataset; 2443 DataLoaderCopy(subseedloader, loader);; 2444 ; 2445 // Booking SubSeed; 2446 BookMethod(subseedloader, theMethod, methodTitle, theOption);; 2447 ; 2448 // Train/Test/Evaluation; 2449 TrainAllMethods();; 2450 TestAllMethods();; 2451 EvaluateAllMethods();; 2452 ; 2453 // getting ROC; 2454 SSROC = GetROCIntegral(ybitset.to_string(), methodTitle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:100782,clear,clear,100782,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['clear'],['clear']
Usability,"erElement * ; ele = nullptr . ). finalvirtual . write a Double32_t to the buffer ; Implements TBuffer.; Definition at line 559 of file TBufferText.cxx. ◆ WriteFastArrayDouble32(). void TBufferText::WriteFastArrayDouble32 ; (; const Double_t * ; d, . Long64_t ; n, . TStreamerElement * ; ele = nullptr . ). finalvirtual . Write array of Double32_t to buffer. ; Implements TBuffer.; Definition at line 670 of file TBufferText.cxx. ◆ WriteFastArrayFloat16(). void TBufferText::WriteFastArrayFloat16 ; (; const Float_t * ; d, . Long64_t ; n, . TStreamerElement * ; ele = nullptr . ). finalvirtual . Write array of Float16_t to buffer. ; Implements TBuffer.; Definition at line 662 of file TBufferText.cxx. ◆ WriteFloat16(). void TBufferText::WriteFloat16 ; (; Float_t * ; f, . TStreamerElement * ; ele = nullptr . ). finalvirtual . write a Float16_t to the buffer ; Implements TBuffer.; Definition at line 551 of file TBufferText.cxx. ◆ WriteString(). void TBufferText::WriteString ; (; const char * ; ). inlinefinalvirtual . Implements TBuffer.; Definition at line 96 of file TBufferText.h. ◆ WriteVersionMemberWise(). UInt_t TBufferText::WriteVersionMemberWise ; (; const TClass * ; , . Bool_t ; = kFALSE . ). inlinefinalvirtual . Implements TBuffer.; Definition at line 103 of file TBufferText.h. Member Data Documentation. ◆ fgDoubleFmt. const char * TBufferText::fgDoubleFmt = ""%.14e"". staticprotected . ! printf argument for doubles, either ""%f"" or ""%e"" or ""%10f"" and so on ; Definition at line 137 of file TBufferText.h. ◆ fgFloatFmt. const char * TBufferText::fgFloatFmt = ""%e"". staticprotected . ! printf argument for floats, either ""%f"" or ""%e"" or ""%10f"" and so on ; Definition at line 136 of file TBufferText.h. Libraries for TBufferText:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TBufferText.h; io/io/src/TBufferText.cxx. TBufferText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:51219,Guid,Guide,51219,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['Guid'],['Guide']
Usability,"erEntry*fMaxSceneDrawTimeLQ; TGNumberEntry*fOLLineWidth; TGNumberEntry*fPointSizeScale; TGCheckButton*fPointSmooth; TGGroupFrame*fRefContainer; TGCheckButton*fReferenceOn; TGNumberEntry*fReferencePosX; TGNumberEntry*fReferencePosY; TGNumberEntry*fReferencePosZ; TGCheckButton*fResetCamerasOnUpdate; TGNumberEntry*fStereoEyeOffsetFac; TGCompositeFrame*fStereoFrame; TGNumberEntry*fStereoFrustumAsymFac; TGNumberEntry*fStereoZeroParallax; TGTextButton*fUpdateScene; TGLViewer*fViewer; TGNumberEntry*fWFLineWidth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewerEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor. ~TGLViewerEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void ViewerRedraw(); Initiate redraw of the viewer. void SetModel(TObject* obj); Sets model or disables/hides viewer. void DoClearColor(Pixel_t color); Clear-color was changed. void DoIgnoreSizesOnUpdate(); ResetCamerasOnUpdate was toggled. void DoResetCamerasOnUpdate(); ResetCamerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerEditor.html:22306,Clear,Clear-color,22306,root/html528/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html528/TGLViewerEditor.html,3,['Clear'],['Clear-color']
Usability,erEntryLayout::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGNumberEntryLayout::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 290 of file TGNumberEntry.h. ◆ DeclFileName(). static const char * TGNumberEntryLayout::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 290 of file TGNumberEntry.h. ◆ GetDefaultSize(). TGDimension TGNumberEntryLayout::GetDefaultSize ; (; ); const. overridevirtual . Return the default size of the numeric control box. ; Implements TGLayoutManager.; Definition at line 1847 of file TGNumberEntry.cxx. ◆ IsA(). TClass * TGNumberEntryLayout::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGLayoutManager.; Definition at line 290 of file TGNumberEntry.h. ◆ Layout(). void TGNumberEntryLayout::Layout ; (; ). overridevirtual . Layout the internal GUI elements in use. ; Implements TGLayoutManager.; Definition at line 1819 of file TGNumberEntry.cxx. ◆ operator=(). TGNumberEntryLayout & TGNumberEntryLayout::operator= ; (; const TGNumberEntryLayout & ; ). privatedelete . ◆ Streamer(). void TGNumberEntryLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLayoutManager. ◆ StreamerNVirtual(). void TGNumberEntryLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 290 of file TGNumberEntry.h. Member Data Documentation. ◆ fBox. TGNumberEntry* TGNumberEntryLayout::fBox. protected . Definition at line 279 of file TGNumberEntry.h. Libraries for TGNumberEntryLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGNumberEntry.h; gui/gui/src/TGNumberEntry.cxx. TGNumberEntryLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:29 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryLayout.html:13436,Guid,Guide,13436,doc/master/classTGNumberEntryLayout.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryLayout.html,1,['Guid'],['Guide']
Usability,"erFile::kStreamedMemberWise ) {; 1405 memberwise(buf,((char*)addr)+config->fOffset,config, vers);; 1406 } else {; 1407 objectwise(buf,((char*)addr)+config->fOffset,config, vers, start);; 1408 }; 1409 buf.CheckByteCount(start,count,config->fTypeName);; 1410 return 0;; 1411 }; 1412 ; 1413 template <typename From, typename To>; 1414 struct ConvertBasicType {; 1415 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *config); 1416 {; 1417 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1418 From temp;; 1419 buf >> temp;; 1420 *(To*)( ((char*)addr) + config->fOffset ) = (To)temp;; 1421 return 0;; 1422 }; 1423 };; 1424 ; 1425 template <typename To>; 1426 struct ConvertBasicType<BitsMarker,To> {; 1427 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *config); 1428 {; 1429 // Simple conversion from a 'From' on disk to a 'To' in memory; 1430 UInt_t temp;; 1431 buf >> temp;; 1432 ; 1433 if ((temp & kIsReferenced) != 0) {; 1434 HandleReferencedTObject(buf,addr,config);; 1435 }; 1436 ; 1437 *(To*)( ((char*)addr) + config->fOffset ) = (To)temp;; 1438 return 0;; 1439 }; 1440 };; 1441 ; 1442 template <typename From, typename To>; 1443 struct ConvertBasicType<WithFactorMarker<From>,To> {; 1444 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *config); 1445 {; 1446 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1447 TConfWithFactor *conf = (TConfWithFactor *)config;; 1448 From temp;; 1449 buf.ReadWithFactor(&temp, conf->fFactor, conf->fXmin);; 1450 *(To*)( ((char*)addr) + config->fOffset ) = (To)temp;; 1451 return 0;; 1452 }; 1453 };; 1454 ; 1455 template <typename From, typename To>; 1456 struct ConvertBasicType<NoFactorMarker<From>,To> {; 1457 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *addr, const TConfiguration *config); 1458 {; 1459 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1460 TConfNoFactor ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:59650,Simpl,Simple,59650,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['Simpl'],['Simple']
Usability,erForward); const. overridevirtual . Return a list iterator. ; Reimplemented from TList.; Definition at line 220 of file TListOfEnumsWithLock.cxx. ◆ operator=(). TListOfEnumsWithLock & TListOfEnumsWithLock::operator= ; (; const TListOfEnumsWithLock & ; ). privatedelete . ◆ RecursiveRemove(). void TListOfEnumsWithLock::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Remove object from this collection and recursively remove the object from all other objects (and collections). ; This function overrides TCollection::RecursiveRemove that calls the Remove function. THashList::Remove cannot be called because it uses the hash value of the hash table. This hash value is not available anymore when RecursiveRemove is called from the TObject destructor. ; Reimplemented from TListOfEnums.; Definition at line 190 of file TListOfEnumsWithLock.cxx. ◆ Remove() [1/2]. TObject * TListOfEnumsWithLock::Remove ; (; TObject * ; obj). overridevirtual . Remove object from the list. ; Reimplemented from TListOfEnums.; Definition at line 201 of file TListOfEnumsWithLock.cxx. ◆ Remove() [2/2]. TObject * TListOfEnumsWithLock::Remove ; (; TObjLink * ; lnk). overridevirtual . Remove object via its objlink from the list. ; Reimplemented from TListOfEnums.; Definition at line 210 of file TListOfEnumsWithLock.cxx. ◆ Streamer(). void TListOfEnumsWithLock::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TListOfEnums. ◆ StreamerNVirtual(). void TListOfEnumsWithLock::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TListOfEnumsWithLock.h. Libraries for TListOfEnumsWithLock:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TListOfEnumsWithLock.h; core/meta/src/TListOfEnumsWithLock.cxx. TListOfEnumsWithLock. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnumsWithLock.html:33158,Guid,Guide,33158,doc/master/classTListOfEnumsWithLock.html,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html,1,['Guid'],['Guide']
Usability,"erJoinStyle = JoinRound. static . Definition at line 128 of file TGX11.cxx. ◆ gMarkerLineStyle. int gMarkerLineStyle = LineSolid. static . Definition at line 126 of file TGX11.cxx. ◆ gMarkerLineWidth. int gMarkerLineWidth = 0. static . Definition at line 125 of file TGX11.cxx. ◆ gMouseMask. ULong_t gMouseMask. static . Initial value:= ButtonPressMask | ButtonReleaseMask |; EnterWindowMask | LeaveWindowMask |; PointerMotionMask | KeyPressMask |; KeyReleaseMask. Definition at line 145 of file TGX11.cxx. ◆ gNullCursor. Cursor gNullCursor = 0. static . Definition at line 159 of file TGX11.cxx. ◆ gOut. FILE* gOut. static . Definition at line 3293 of file TGX11.cxx. ◆ gTextFont. XFontStruct* gTextFont. static . Definition at line 113 of file TGX11.cxx. ◆ gTws. XWindow_t* gTws. static . Definition at line 82 of file TGX11.cxx. ◆ gXimage. XImage* gXimage = nullptr. static . Definition at line 3294 of file TGX11.cxx. ◆ id. XFontStruct* id. Definition at line 109 of file TGX11.cxx. ◆ kBIGGEST_RGB_VALUE. const Int_t kBIGGEST_RGB_VALUE = 65535. Definition at line 84 of file TGX11.cxx. ◆ kMAXFONT. const Int_t kMAXFONT = 4. Definition at line 107 of file TGX11.cxx. ◆ kMAXGC. const int kMAXGC = 7. Definition at line 89 of file TGX11.cxx. ◆ kMAXMK. const Int_t kMAXMK = 100. Definition at line 119 of file TGX11.cxx. ◆ n. int n. Definition at line 122 of file TGX11.cxx. ◆ name. char name[80]. Definition at line 110 of file TGX11.cxx. ◆ null_cursor_bits. const char null_cursor_bits[]. Initial value:= {; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}. Definition at line 155 of file TGX11.cxx. ◆ type. int type. Definition at line 121 of file TGX11.cxx. ◆ xy. XPoint xy[kMAXMK]. Definition at line 123 of file TGX11.cxx. graf2dx11srcTGX11.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TGX11_8cxx.html:12133,Guid,Guide,12133,doc/v632/TGX11_8cxx.html,https://root.cern,https://root.cern/doc/v632/TGX11_8cxx.html,1,['Guid'],['Guide']
Usability,"erList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCategoryLValue.html:2282,clear,clearValueDirty,2282,root/html528/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html528/RooAbsCategoryLValue.html,2,['clear'],['clearValueDirty']
Usability,"erList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCategory.html:2213,clear,clearValueDirty,2213,root/html528/RooAbsCategory.html,https://root.cern,https://root.cern/root/html528/RooAbsCategory.html,2,['clear'],['clearValueDirty']
Usability,"erList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsString.html:2041,clear,clearValueDirty,2041,root/html528/RooAbsString.html,https://root.cern,https://root.cern/root/html528/RooAbsString.html,2,['clear'],['clearValueDirty']
Usability,"erList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBinningCategory.html:2052,clear,clearValueDirty,2052,root/html528/RooBinningCategory.html,https://root.cern,https://root.cern/root/html528/RooBinningCategory.html,10,['clear'],['clearValueDirty']
Usability,"erList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStringVar.html:1936,clear,clearValueDirty,1936,root/html528/RooStringVar.html,https://root.cern,https://root.cern/root/html528/RooStringVar.html,2,['clear'],['clearValueDirty']
Usability,"erMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:3041,simpl,simple,3041,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['simpl'],['simple']
Usability,erMode. protected . Pad frame border mode. ; Definition at line 37 of file TAttPad.h. ◆ fFrameBorderSize. Width_t TAttPad::fFrameBorderSize. protected . Pad frame border size. ; Definition at line 36 of file TAttPad.h. ◆ fFrameFillColor. Color_t TAttPad::fFrameFillColor. protected . Pad frame fill color. ; Definition at line 31 of file TAttPad.h. ◆ fFrameFillStyle. Style_t TAttPad::fFrameFillStyle. protected . Pad frame fill style. ; Definition at line 33 of file TAttPad.h. ◆ fFrameLineColor. Color_t TAttPad::fFrameLineColor. protected . Pad frame line color. ; Definition at line 32 of file TAttPad.h. ◆ fFrameLineStyle. Style_t TAttPad::fFrameLineStyle. protected . Pad frame line style. ; Definition at line 34 of file TAttPad.h. ◆ fFrameLineWidth. Width_t TAttPad::fFrameLineWidth. protected . Pad frame line width. ; Definition at line 35 of file TAttPad.h. ◆ fLeftMargin. Float_t TAttPad::fLeftMargin. protected . LeftMargin. ; Definition at line 21 of file TAttPad.h. ◆ fRightMargin. Float_t TAttPad::fRightMargin. protected . RightMargin. ; Definition at line 22 of file TAttPad.h. ◆ fTopMargin. Float_t TAttPad::fTopMargin. protected . TopMargin. ; Definition at line 24 of file TAttPad.h. ◆ fXfile. Float_t TAttPad::fXfile. protected . X position where to draw the file name. ; Definition at line 25 of file TAttPad.h. ◆ fXstat. Float_t TAttPad::fXstat. protected . X position where to draw the statistics. ; Definition at line 28 of file TAttPad.h. ◆ fYfile. Float_t TAttPad::fYfile. protected . Y position where to draw the file name. ; Definition at line 26 of file TAttPad.h. ◆ fYstat. Float_t TAttPad::fYstat. protected . Y position where to draw the statistics. ; Definition at line 29 of file TAttPad.h. Libraries for TAttPad:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TAttPad.h; core/base/src/TAttPad.cxx. TAttPad. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:16 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttPad.html:12737,Guid,Guide,12737,doc/master/classTAttPad.html,https://root.cern,https://root.cern/doc/master/classTAttPad.html,1,['Guid'],['Guide']
Usability,"erNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; TClass * IsA () const override;  ; virtual void Percent (Bool_t on);  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save progress bar parameters as a C++ statement(s) on output stream out. ;  ; void SetBarColor (const char *color=""blue"");  Set progress bar color. ;  ; virtual void SetBarColor (Pixel_t color);  Set progress bar color. ;  ; void SetBarType (EBarType type);  Set bar type. ;  ; void SetFillType (EFillType type);  Set fill type. ;  ; void SetForegroundColor (Pixel_t pixel) override;  Change text color drawing. ;  ; void SetMax (Float_t max);  ; void SetMin (Float_t min);  ; void SetPosition (Float_t pos);  Set progress position between [min,max]. ;  ; void SetRange (Float_t min, Float_t max);  Set min and max of progress bar. ;  ; virtual void ShowPos (Bool_t on);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsePercent () const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:2591,progress bar,progress bar,2591,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,1,['progress bar'],['progress bar']
Usability,"erNVirtual(). void TMVA::VariableGaussTransform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 115 of file VariableGaussTransform.h. ◆ Transform(). const TMVA::Event * TMVA::VariableGaussTransform::Transform ; (; const Event * const ; ev, . Int_t ; cls . ); const. virtual . apply the Gauss transformation ; Implements TMVA::VariableTransformBase.; Definition at line 122 of file VariableGaussTransform.cxx. ◆ WriteTransformationToStream(). void TMVA::VariableGaussTransform::WriteTransformationToStream ; (; std::ostream & ; ); const. virtual . Implements TMVA::VariableTransformBase.; Definition at line 438 of file VariableGaussTransform.cxx. Member Data Documentation. ◆ fCumulativeDist. std::vector< std::vector< TH1F* > > TMVA::VariableGaussTransform::fCumulativeDist. private . ! The Cumulative distributions ; Definition at line 103 of file VariableGaussTransform.h. ◆ fCumulativePDF. std::vector< std::vector< PDF*> > TMVA::VariableGaussTransform::fCumulativePDF. private . The cumulative PDF. ; Definition at line 106 of file VariableGaussTransform.h. ◆ fElementsperbin. UInt_t TMVA::VariableGaussTransform::fElementsperbin. private . Definition at line 112 of file VariableGaussTransform.h. ◆ fFlatNotGauss. Bool_t TMVA::VariableGaussTransform::fFlatNotGauss. private . Definition at line 98 of file VariableGaussTransform.h. ◆ fPdfMaxSmooth. Int_t TMVA::VariableGaussTransform::fPdfMaxSmooth. private . Definition at line 100 of file VariableGaussTransform.h. ◆ fPdfMinSmooth. Int_t TMVA::VariableGaussTransform::fPdfMinSmooth. private . Definition at line 99 of file VariableGaussTransform.h. Libraries for TMVA::VariableGaussTransform:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariableGaussTransform.h; tmva/tmva/src/VariableGaussTransform.cxx. TMVAVariableGaussTransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableGaussTransform.html:21717,Guid,Guide,21717,doc/master/classTMVA_1_1VariableGaussTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableGaussTransform.html,1,['Guid'],['Guide']
Usability,"erNVirtual_b);  ; void UnConstrain (Int_t parm);  Remove the constraints on the possible values of parameter <parm>. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:10378,Clear,Clear,10378,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['Clear'],['Clear']
Usability,"erName; , kSYS_EnvVar; , kCINT_stdout; , ;   kCINT_stderr; , kCINT_stdin; , kCINT_Edit; , kCINT_Load; , ;   kCINT_Exec; , kCINT_EXec; , kCINT_pragma; , kCINT_includeSYS; , ;   kCINT_includePWD; , kCINT_cpp; , kROOT_Load; , kSYS_FileName; , ;   kCXX_NewProto; , kCXX_ConstructorProto; , kCXX_ScopeProto; , kCXX_DirectProto; , ;   kCXX_IndirectProto; , kCXX_ScopeMember; , kCXX_DirectMember; , kCXX_IndirectMember; , ;   kCXX_Global; , kCXX_GlobalProto; , kNUM_PAT. };  ; typedef TList TContainer;  ; typedef TListIter TContIter;  . Public Member Functions;  TTabCom ();  Default constructor. ;  ; virtual ~TTabCom ();  ; void ClearAll ();  clears all lists except for user names and system include files. ;  ; void ClearClasses ();  Clear classes and namespace collections. ;  ; void ClearCppDirectives ();  Forget all Cpp directives seen so far. ;  ; void ClearEnvVars ();  Forget all environment variables seen so far. ;  ; void ClearFiles ();  Close all files. ;  ; void ClearGlobalFunctions ();  Forget all global functions seen so far. ;  ; void ClearGlobals ();  Forget all global variables seen so far. ;  ; void ClearPragmas ();  Forget all pragmas seen so far. ;  ; void ClearSysIncFiles ();  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path"" should be initialized with a colon separated list of system directories ;  ; TCollection * GetListOfGlobalFunctions ();  Return the list of global functions. ;  ; const TSeqCollection * GetListOfGlobals ();  Return the list of globals. ;  ; const TSeqCollection * GetListOfPragmas ();  Return the list of pragmas. ;  ; const TSeqCollection * GetListOfSy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:1422,Clear,ClearGlobalFunctions,1422,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearGlobalFunctions']
Usability,"erResult.cxx. ◆ GetYValue(). double HypoTestInverterResult::GetYValue ; (; int ; index); const. function to return the value of the confidence level for the i^th entry in the results ; Definition at line 442 of file HypoTestInverterResult.cxx. ◆ IsA(). TClass * RooStats::HypoTestInverterResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 213 of file HypoTestInverterResult.h. ◆ IsOneSided(). bool RooStats::HypoTestInverterResult::IsOneSided ; (; ); const. inline . query if one sided result ; Definition at line 111 of file HypoTestInverterResult.h. ◆ IsTwoSided(). bool RooStats::HypoTestInverterResult::IsTwoSided ; (; ); const. inline . query if two sided result ; Definition at line 113 of file HypoTestInverterResult.h. ◆ LowerLimit(). double HypoTestInverterResult::LowerLimit ; (; ). overridevirtual . lower and upper bound of the confidence interval (to get upper/lower limits, multiply the size( = 1-confidence level ) by 2 ; Reimplemented from RooStats::SimpleInterval.; Definition at line 938 of file HypoTestInverterResult.cxx. ◆ LowerLimitEstimatedError(). double HypoTestInverterResult::LowerLimitEstimatedError ; (; ). rough estimation of the error on the computed bound of the confidence interval Estimate of lower limit error function evaluates only a rough error on the lower limit. ; need to have compute first lower limit; Be careful when using this estimation ; Definition at line 1087 of file HypoTestInverterResult.cxx. ◆ operator=(). HypoTestInverterResult & HypoTestInverterResult::operator= ; (; const HypoTestInverterResult & ; other). operator = ; Definition at line 109 of file HypoTestInverterResult.cxx. ◆ SetCLsCleanupThreshold(). void RooStats::HypoTestInverterResult::SetCLsCleanupThreshold ; (; double ; th). inline . set CLs threshold for exclusion cleanup function ; Definition at line 105 of file HypoTestInverterResult.h. ◆ SetConfidenceLevel(). void RooS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:35969,Simpl,SimpleInterval,35969,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"erWidget.; Definition at line 161 of file RBrowser.cxx. ◆ GetKind(). std::string ROOT::RBrowserInfoWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 155 of file RBrowser.cxx. ◆ GetTitle(). std::string ROOT::RBrowserInfoWidget::GetTitle ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 156 of file RBrowser.cxx. ◆ GetUrl(). std::string ROOT::RBrowserInfoWidget::GetUrl ; (; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 157 of file RBrowser.cxx. ◆ Refresh(). void ROOT::RBrowserInfoWidget::Refresh ; (; ). inline . Definition at line 163 of file RBrowser.cxx. ◆ RefreshFromLogs(). void ROOT::RBrowserInfoWidget::RefreshFromLogs ; (; const std::string & ; promt, . const std::vector< std::string > & ; logs . ). inline . Definition at line 191 of file RBrowser.cxx. ◆ ResetConn(). void ROOT::RBrowserInfoWidget::ResetConn ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 153 of file RBrowser.cxx. ◆ SendWidgetContent(). std::string ROOT::RBrowserInfoWidget::SendWidgetContent ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 218 of file RBrowser.cxx. ◆ Show(). void ROOT::RBrowserInfoWidget::Show ; (; const std::string & ; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 159 of file RBrowser.cxx. Member Data Documentation. ◆ fContent. std::string ROOT::RBrowserInfoWidget::fContent. Definition at line 142 of file RBrowser.cxx. ◆ fFirstSend. bool ROOT::RBrowserInfoWidget::fFirstSend {false}. ! if editor content was send at least once ; Definition at line 143 of file RBrowser.cxx. ◆ fTitle. std::string ROOT::RBrowserInfoWidget::fTitle. Definition at line 141 of file RBrowser.cxx. gui/browserv7/src/RBrowser.cxx. ROOTRBrowserInfoWidget. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html:4381,Guid,Guide,4381,doc/master/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserInfoWidget.html,1,['Guid'],['Guide']
Usability,"er_list< std::string > colNames, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName)ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; Vary(const std::vector< std::string > &colNames, F &&expression, const ColumnNames_t &inputColumns, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; Vary(std::initializer_list< std::string > colNames, F &&expression, const ColumnNames_t &inputColumns, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; Vary(std::string_view colName, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName="""")ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; Vary(std::string_view colName, std::string_view expression, std::size_t nVariations, std::string_view variationName="""")ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; Vary(const std::vector< std::string > &colNames, std::string_view expression, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; Vary(std::initializer_list< std::string > colNames, std::string_view expression, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; Vary(const std::vector< std::string > &colNames, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName)ROOT::RDF::RInterface< RDFDetail::RLoopManager >inline; VaryImpl(const std::vector< std::string > &colNames, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName)ROOT::RDF::RInterface< RDFDetail::RLoopManager >inlineprivate; ~RDataFrame()ROOT::RDataFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame-members.html:17664,Guid,Guide,17664,doc/master/classROOT_1_1RDataFrame-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame-members.html,1,['Guid'],['Guide']
Usability,"er_t ; m = 1, . Option_t * ; opt = """" . ). inline . Definition at line 34 of file TPointSet3D.h. ◆ TPointSet3D() [4/5]. TPointSet3D::TPointSet3D ; (; Int_t ; n, . Double_t * ; p, . Marker_t ; m = 1, . Option_t * ; opt = """" . ). inline . Definition at line 36 of file TPointSet3D.h. ◆ TPointSet3D() [5/5]. TPointSet3D::TPointSet3D ; (; const TPointSet3D & ; t). Copy constructor. ; Definition at line 44 of file TPointSet3D.cxx. ◆ ~TPointSet3D(). TPointSet3D::~TPointSet3D ; (; ). override . Destructor. ; Definition at line 53 of file TPointSet3D.cxx. Member Function Documentation. ◆ Class(). static TClass * TPointSet3D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPointSet3D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPointSet3D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 56 of file TPointSet3D.h. ◆ ClearIds(). void TPointSet3D::ClearIds ; (; ). Clears the id-array. If ids are owned the TObjects are deleted. ; Definition at line 126 of file TPointSet3D.cxx. ◆ ComputeBBox(). void TPointSet3D::ComputeBBox ; (; ). overridevirtual . Compute the bounding box of this points set. ; Implements TAttBBox.; Definition at line 90 of file TPointSet3D.cxx. ◆ CopyIds(). void TPointSet3D::CopyIds ; (; const TPointSet3D & ; t). protected . Copy id objects from point-set 't'. ; Definition at line 61 of file TPointSet3D.cxx. ◆ DeclFileName(). static const char * TPointSet3D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 56 of file TPointSet3D.h. ◆ GetOwnIds(). Bool_t TPointSet3D::GetOwnIds ; (; ); const. inline . Definition at line 51 of file TPointSet3D.h. ◆ GetPointId(). TObject * TPointSet3D::GetPointId ; (; Int_t ; n); const. inline . Definition at line 48 of file TPointSet3D.h. ◆ IsA(). TClass * TPointSet3D::IsA ; (; ); const. inlineoverridevirtual . Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:19664,Clear,ClearIds,19664,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,1,['Clear'],['ClearIds']
Usability,"era instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTable() [1/3]. RooTable::RooTable ; (; ). inline . Definition at line 36 of file RooTable.h. ◆ RooTable() [2/3]. RooTable::RooTable ; (; const char * ; name, . const char * ; title . ). inline . Definition at line 37 of file RooTable.h. ◆ RooTable() [3/3]. RooTable::RooTable ; (; const RooTable & ; other). default . Member Function Documentation. ◆ Class(). static TClass * RooTable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooTable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooTable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 46 of file RooTable.h. ◆ DeclFileName(). static const char * RooTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 46 of file RooTable.h. ◆ fill(). virtual void RooTable::fill ; (; RooAbsCategory & ; cat, . double ; weight = 1.0 . ). pure virtual . Implemented in Roo1DTable. ◆ IsA(). TClass * RooTable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 46 of file RooTable.h. ◆ isIdentical(). virtual bool RooTable::isIdentical ; (; const RooTable & ; other, . bool ; verbose . ). pure virtual . Implemented in Roo1DTable. ◆ Streamer(). void RooTable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooTable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 46 of file RooTable.h. Libraries for RooTable:. [legend]; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooTable.h. RooTable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTable.html:15918,Guid,Guide,15918,doc/master/classRooTable.html,https://root.cern,https://root.cern/doc/master/classRooTable.html,1,['Guid'],['Guide']
Usability,"eractive painting ;  ; Long64_t fCanvVersion {1};  ! actual canvas version, changed with every new Modified() call ;  ; UInt_t fClientBits {0};  ! latest status bits from client like editor visible or not ;  ; UInt_t fColorsHash {0};  ! last hash of colors/palette ;  ; Long64_t fColorsVersion {0};  ! current colors/palette version, checked every time when new snapshot created ;  ; Bool_t fFixedSize {kFALSE};  ! is canvas size fixed ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; Int_t fJsonComp {0};  ! compression factor for messages send to the client ;  ; Bool_t fLongerPolling {kFALSE};  ! when true, make longer polling in blocking operations ;  ; ObjectSelectSignal_t fObjSelectSignal;  ! signal emitted when new object selected in the pad ;  ; PadClickedSignal_t fPadClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; PadClickedSignal_t fPadDblClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; std::map< TPad *, PadStatus > fPadsStatus;  ! map of pads in canvas and their status flags ;  ; Int_t fPaletteDelivery {1};  ! colors palette delivery 0:never, 1:once, 2:always, 3:per subpad ;  ; Int_t fPrimitivesMerge {100};  ! number of PS primitives, which will be merged together ;  ; Bool_t fProcessingData {kFALSE};  ! flag used to prevent blocking methods when process data is invoked ;  ; Bool_t fReadOnly {kFALSE};  !< configured display ;  ; Int_t fStyleDelivery {0};  ! gStyle delivery to clients: 0:never, 1:once, 2:always ;  ; UInt_t fStyleHash {0};  ! last hash of gStyle ;  ; Long64_t fStyleVersion {0};  ! current gStyle object version, checked every time when new snapshot created ;  ; Int_t fTF1UseSave {1};  ! use save buffer for TF1/TF2, 0:off, 1:prefer, 2:force ;  ; TWebCanvasTimer * fTimer {nullptr};  ! timer to submit control messages ;  ; UpdatedSignal_t fUpdatedSignal;  ! signal emitted when canvas updated or state is changed ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:14963,simpl,simple,14963,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['simpl'],['simple']
Usability,"erasOnUpdate(); ResetCamerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void SetRotatorMode(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void DoASavImageGUIBaseName(const char* t); Update base-name. void DoASavImageGUIOutMode(Int_t m); Update output mode. void DoASavImageStart(); Start auto-rotator image auto-save. void DoASavImageStop(); Stop auto-rotator image auto-save. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/200",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLViewerEditor.html:23816,Guid,Guides,23816,root/html534/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html534/TGLViewerEditor.html,3,['Guid'],['Guides']
Usability,"erasOnUpdate(); ResetCamerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void DoASavImageGUIBaseName(const char* t); Update base-name. void DoASavImageGUIOutMode(Int_t m); Update output mode. void DoASavImageStart(); Start auto-rotator image auto-save. void DoASavImageStop(); Stop auto-rotator image auto-save. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/2006 » Copyright (C) 1995-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLViewerEditor.html:23718,Guid,Guides,23718,root/html530/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html530/TGLViewerEditor.html,2,['Guid'],['Guides']
Usability,"erasOnUpdate(); ResetCamerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2010-10-20 08:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerEditor.html:23421,Guid,Guides,23421,root/html528/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html528/TGLViewerEditor.html,1,['Guid'],['Guides']
Usability,"erateToyData(RooArgSet& paramPoint) const; with weight. { return GenerateToyData(paramPoint,*fPdf); }. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI, int i); Main interface to evaluate the test statistic on a dataset. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); { return EvaluateTestStatistic( data,nullPOI, 0 ); }. TestStatistic* GetTestStatistic(unsigned int i) const. TestStatistic* GetTestStatistic(unsigned int i) const; { return GetTestStatistic(0); }. Double_t ConfidenceLevel() const; { return 1. - fSize; }. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); { return fNToys; }. void SetNToys(const Int_t ntoy); { fNToys = ntoy; }. void SetNEventsPerToy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); Set the Pdf, add to the the workspace if not already there. void SetPdf(RooAbsPdf& pdf); { fPdf = &pdf; ClearCache(); }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObservables(const RooArgSet& o); specify the observables in the dataset (needed to evaluate the test statistic). { fObservables = &o; }. void SetGlobalObservables(const RooArgSet& o); specify the conditional observables. { fGlobalObservables = &o; }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). { fSize = size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fSize = 1. - cl; }. void SetTestStatistic(RooStats::TestStatistic* testStatistic, unsigned int i); Set the TestStatistic (want the argument to be a function of the data & parameter points. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCSampler.html:9173,Clear,ClearCache,9173,root/html534/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCSampler.html,3,['Clear'],['ClearCache']
Usability,"erations. They take as input argument the name of a column of the dataset to watch for missing values. Like Filter, they will either keep or discard an entire entry based on whether a condition returns true or false. Specifically:. FilterAvailable: the condition is whether the value of the column is present. If so, the entry is kept. Otherwise if the value is missing the entry is discarded.; FilterMissing: the condition is whether the value of the column is missing. If so, the entry is kept. Otherwise if the value is present the entry is discarded. df = ROOT.RDataFrame(dataset); ; # Anytime an entry from ""col"" is missing, the entire entry will be filtered out; df_available = df.FilterAvailable(""col""); df_available = df_available.Define(""twice"", ""col * 2""); ; # Conversely, if we want to select the entries for which the column has missing; # values, we do the following; df_missingcol = df.FilterMissing(""col""); # Following operations in the same branch of the computation graph clearly; # cannot access that same column, since there would be no value to read; df_missingcol = df_missingcol.Define(""observable"", ""othercolumn * 2""); ROOT::RDataFrame df{dataset};; ; // Anytime an entry from ""col"" is missing, the entire entry will be filtered out; auto df_available = df.FilterAvailable(""col"");; auto df_twicecol = df_available.Define(""twice"", ""col * 2"");; ; // Conversely, if we want to select the entries for which the column has missing; // values, we do the following; auto df_missingcol = df.FilterMissing(""col"");; // Following operations in the same branch of the computation graph clearly; // cannot access that same column, since there would be no value to read; auto df_observable = df_missingcol.Define(""observable"", ""othercolumn * 2"");; DefaultValueFor; DefaultValueFor creates a node of the computation graph which just forwards the values of the columns necessary for other downstream nodes, when they are available. In case a value of the input column passed to this function is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:83121,clear,clearly,83121,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['clear'],['clearly']
Usability,"erator. ; Definition at line 285 of file TSpline.cxx. ◆ DeclFileName(). static const char * TSplinePoly::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file TSpline.h. ◆ Eval(). virtual Double_t TSplinePoly::Eval ; (; Double_t ; ); const. inlinevirtual . Reimplemented in TSplinePoly3, and TSplinePoly5.; Definition at line 95 of file TSpline.h. ◆ GetKnot(). void TSplinePoly::GetKnot ; (; Double_t & ; x, . Double_t & ; y . ); const. inline . Definition at line 89 of file TSpline.h. ◆ IsA(). TClass * TSplinePoly::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TSplinePoly3, and TSplinePoly5.; Definition at line 100 of file TSpline.h. ◆ operator=(). TSplinePoly & TSplinePoly::operator= ; (; TSplinePoly const & ; other). Assignment operator. ; Definition at line 273 of file TSpline.cxx. ◆ Streamer(). void TSplinePoly::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TSplinePoly3, and TSplinePoly5. ◆ StreamerNVirtual(). void TSplinePoly::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TSpline.h. ◆ X(). Double_t & TSplinePoly::X ; (; ). inline . Definition at line 87 of file TSpline.h. ◆ Y(). Double_t & TSplinePoly::Y ; (; ). inline . Definition at line 88 of file TSpline.h. Member Data Documentation. ◆ fX. Double_t TSplinePoly::fX = 0. protected . Abscissa. ; Definition at line 77 of file TSpline.h. ◆ fY. Double_t TSplinePoly::fY = 0. protected . Constant term. ; Definition at line 78 of file TSpline.h. Libraries for TSplinePoly:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TSpline.h; hist/hist/src/TSpline.cxx. TSplinePoly. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSplinePoly.html:13406,Guid,Guide,13406,doc/master/classTSplinePoly.html,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html,1,['Guid'],['Guide']
Usability,"erator_type. typedef container_type::iterator TMVA::DNN::Net::iterator_type. Definition at line 1066 of file NeuralNet.h. Constructor & Destructor Documentation. ◆ Net() [1/2]. TMVA::DNN::Net::Net ; (; ). inline . c'tor ; Definition at line 1074 of file NeuralNet.h. ◆ Net() [2/2]. TMVA::DNN::Net::Net ; (; const Net & ; other). inline . d'tor ; Definition at line 1085 of file NeuralNet.h. Member Function Documentation. ◆ addLayer() [1/2]. void TMVA::DNN::Net::addLayer ; (; Layer && ; layer). inline . Definition at line 1095 of file NeuralNet.h. ◆ addLayer() [2/2]. void TMVA::DNN::Net::addLayer ; (; Layer & ; layer). inline . add a layer (layout) ; Definition at line 1094 of file NeuralNet.h. ◆ backPropagate(). template<typename Settings > . void TMVA::DNN::Net::backPropagate ; (; std::vector< std::vector< LayerData > > & ; layerPatternData, . const Settings & ; settings, . size_t ; trainFromLayer, . size_t ; totalNumWeights . ); const. Definition at line 1355 of file NeuralNet.icc. ◆ clear(). void TMVA::DNN::Net::clear ; (; ). inline . Definition at line 1251 of file NeuralNet.h. ◆ compute(). template<typename Weights > . std::vector< double > TMVA::DNN::Net::compute ; (; const std::vector< double > & ; input, . const Weights & ; weights . ); const. compute the net with the given input and the given weights ; compute the neural net; Parameters. inputthe input data ; weightsthe weight data . Definition at line 1037 of file NeuralNet.icc. ◆ computeError(). template<typename ItWeight > . std::tuple< double, double > TMVA::DNN::Net::computeError ; (; const Settings & ; settings, . std::vector< LayerData > & ; lastLayerData, . Batch & ; batch, . ItWeight ; itWeightBegin, . ItWeight ; itWeightEnd . ); const. Definition at line 1321 of file NeuralNet.icc. ◆ dE(). void TMVA::DNN::Net::dE ; (; ). ◆ dropOutWeightFactor(). template<typename WeightsType , typename DropProbabilities > . void TMVA::DNN::Net::dropOutWeightFactor ; (; WeightsType & ; weights, . const DropProbabilitie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:8247,clear,clear,8247,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['clear'],['clear']
Usability,"erbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); const RooRealVar*convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:4756,clear,clearValueAndShapeDirty,4756,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"erceptron. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMultiLayerPerceptron. class TMultiLayerPerceptron: public TObject. TMultiLayerPerceptron. This class describes a neural network.; There are facilities to train the network and use the output. The input layer is made of inactive neurons (returning the; optionaly normalized input) and output neurons are linear.; The type of hidden neurons is free, the default being sigmoids.; (One should still try to pass normalized inputs, e.g. between [0.,1]). The basic input is a TTree and two (training and test) TEventLists.; Input and output neurons are assigned a value computed for each event; with the same possibilities as for TTree::Draw().; Events may be weighted individualy or via TTree::SetWeight().; 6 learning methods are available: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. This implementation, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:; * the algorithms are globally the same; * in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; * TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; * TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly choosen examples are:. image analysis; financial mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:960,learn,learning,960,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['learn'],['learning']
Usability,"erceptron. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MLP; » TMultiLayerPerceptron. class TMultiLayerPerceptron: public TObject. TMultiLayerPerceptron. This class describes a neural network.; There are facilities to train the network and use the output. The input layer is made of inactive neurons (returning the; optionaly normalized input) and output neurons are linear.; The type of hidden neurons is free, the default being sigmoids.; (One should still try to pass normalized inputs, e.g. between [0.,1]). The basic input is a TTree and two (training and test) TEventLists.; Input and output neurons are assigned a value computed for each event; with the same possibilities as for TTree::Draw().; Events may be weighted individualy or via TTree::SetWeight().; 6 learning methods are available: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. This implementation, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:; * the algorithms are globally the same; * in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; * TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; * TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. image analysis; financial mov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:960,learn,learning,960,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['learn'],['learning']
Usability,"ere autoflush was explicitly set to zero), we need estimate a cluster size in relation to the size of the cache.; After this value is calculated once for the TClusterIterator, it is cached and reused in future calls. ; Definition at line 611 of file TTree.cxx. ◆ GetNextEntry(). Long64_t TTree::TClusterIterator::GetNextEntry ; (; ). inline . Definition at line 307 of file TTree.h. ◆ GetStartEntry(). Long64_t TTree::TClusterIterator::GetStartEntry ; (; ). inline . Definition at line 302 of file TTree.h. ◆ Next(). Long64_t TTree::TClusterIterator::Next ; (; ). Move on to the next cluster and return the starting entry of this next cluster. ; Definition at line 650 of file TTree.cxx. ◆ operator()(). Long64_t TTree::TClusterIterator::operator() ; (; ). inline . Definition at line 311 of file TTree.h. ◆ Previous(). Long64_t TTree::TClusterIterator::Previous ; (; ). Move on to the previous cluster and return the starting entry of this previous cluster. ; Definition at line 694 of file TTree.cxx. Friends And Related Symbol Documentation. ◆ TTree. friend class TTree. friend . Definition at line 281 of file TTree.h. Member Data Documentation. ◆ fClusterRange. Int_t TTree::TClusterIterator::fClusterRange. private . Definition at line 273 of file TTree.h. ◆ fEstimatedSize. Long64_t TTree::TClusterIterator::fEstimatedSize. private . Definition at line 276 of file TTree.h. ◆ fNextEntry. Long64_t TTree::TClusterIterator::fNextEntry. private . Definition at line 275 of file TTree.h. ◆ fStartEntry. Long64_t TTree::TClusterIterator::fStartEntry. private . Definition at line 274 of file TTree.h. ◆ fTree. TTree* TTree::TClusterIterator::fTree. private . Definition at line 272 of file TTree.h. Libraries for TTree::TClusterIterator:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTree.h; tree/tree/src/TTree.cxx. TTreeTClusterIterator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree_1_1TClusterIterator.html:3697,Guid,Guide,3697,doc/master/classTTree_1_1TClusterIterator.html,https://root.cern,https://root.cern/doc/master/classTTree_1_1TClusterIterator.html,1,['Guid'],['Guide']
Usability,ered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ; file  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ; file  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:3122,simpl,simple,3122,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['simpl'],['simple']
Usability,"erence Guide, “How To’s”, a list of publications and example applications.; 1.7.1 Class Reference Guide; The top of any class reference page lets you jump to different parts of the documentation. The first line links to the class index and the index for the current module (a group of classes, often a library). The second line links to the ROOT homepage and the class overviews. The third line links the source information - a HTML version of the source and header file as well as the CVS (the source management system used for the ROOT development) information of the files. The last line links the different parts of the current pages. Example of function documentation, with automatically generated LaTeX-like graphics. Inheritance tree, showing what the current class derives from, and which classes inherit from it. HTML version of the source file linking all types and most functions. 2 Getting Started; We begin by showing you how to use ROOT interactively. There are two examples to click through and learn how to use the GUI. We continue by using the command line, and explaining the coding conventions, global variables and the environment setup. If you have not installed ROOT, you can do so by following the instructions in the appendix, or on the ROOT web site: http://root.cern.ch/root/Availability.html; 2.1 Setting the Environment Variables; Before you can run ROOT you need to set the environment variable ROOTSYS and change your path to include root/bin and library path variables to include root/lib. Please note: the syntax is for bash, if you are running tcsh you will have to use setenv instead of export. Define the variable $ROOTSYS to the directory where you unpacked the ROOT:. $ export ROOTSYS=$HOME/root. Add ROOTSYS/bin to your PATH:. $ export PATH=$PATH:$ROOTSYS/bin. Setting the Library Path. On HP-UX, before executing the interactive module, you must set the library path:; $ export SHLIB_PATH=$SHLIB_PATH:$ROOTSYS/lib; On AIX, before executing the interactive modul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:30196,learn,learn,30196,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learn']
Usability,"erence engine offered by TMVA.; 8##; 9## \macro_code; 10## \macro_output; 11##; 12## \date August 2019; 13## \author Stefan Wunsch; 14 ; 15# XGBoost has to be imported before ROOT to avoid crashes because of clashing; 16# std::regexp symbols that are exported by cppyy.; 17# See also: https://github.com/wlav/cppyy/issues/227; 18from xgboost import XGBClassifier; 19 ; 20import ROOT; 21import numpy as np; 22 ; 23from tmva100_DataPreparation import variables; 24 ; 25 ; 26def load_data(signal_filename, background_filename):; 27 # Read data from ROOT files; 28 data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); 29 data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); 30 ; 31 # Convert inputs to format readable by machine learning tools; 32 x_sig = np.vstack([data_sig[var] for var in variables]).T; 33 x_bkg = np.vstack([data_bkg[var] for var in variables]).T; 34 x = np.vstack([x_sig, x_bkg]); 35 ; 36 # Create labels; 37 num_sig = x_sig.shape[0]; 38 num_bkg = x_bkg.shape[0]; 39 y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); 40 ; 41 # Compute weights balancing both classes; 42 num_all = num_sig + num_bkg; 43 w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); 44 ; 45 return x, y, w; 46 ; 47if __name__ == ""__main__"":; 48 # Load data; 49 x, y, w = load_data(""train_signal.root"", ""train_background.root""); 50 ; 51 # Fit xgboost model; 52 bdt = XGBClassifier(max_depth=3, n_estimators=500); 53 bdt.fit(x, y, sample_weight=w); 54 ; 55 # Save model in TMVA format; 56 print(""Training done on "",x.shape[0],""events. Saving model in tmva101.root""); 57 ROOT.TMVA.Experimental.SaveXGBoost(bdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41. tutorialstmvatmva101_Training.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py_source.html:2465,Guid,Guide,2465,doc/master/tmva101__Training_8py_source.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py_source.html,1,['Guid'],['Guide']
Usability,"erence. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; entrylistblock_figure1.C File Reference. Functions; pt Draw ();  ; c Range (0, 0, 1, 1);  ; pt SetBorderSize (0);  ; c SetBorderSize (2);  ; arrow SetFillColor (1);  ; pt SetFillColor (kWhite);  ; arrow SetFillStyle (1001);  ; c SetFrameFillColor (0);  ; pt SetTextAlign (12);  ; text SetTextAngle (-15);  ; pt SetTextColor (4);  ; pt SetTextSize (0.048583);  . Variables; TArrow * arrow = new TArrow(0.225552,0.572271,0.35489,0.283186,0.03,""|>"");  ; TLine * line = new TLine(0.35,0.5,0.95,0.5);  ; TPaveText * pt = new TPaveText(0.00313972,0.650146,0.22135,0.772595,""br"");  ; TText * text = pt->AddText(""TEntryListBlock"");  . Function Documentation. ◆ Draw(). pt Draw ; (; ). ◆ Range(). c Range ; (; 0 ; , . 0 ; , . 1 ; , . 1 ;  . ). ◆ SetBorderSize() [1/2]. pt SetBorderSize ; (; 0 ; ). ◆ SetBorderSize() [2/2]. c SetBorderSize ; (; 2 ; ). ◆ SetFillColor() [1/2]. arrow SetFillColor ; (; 1 ; ). ◆ SetFillColor() [2/2]. pt SetFillColor ; (; kWhite ; ). ◆ SetFillStyle(). arrow SetFillStyle ; (; 1001 ; ). ◆ SetFrameFillColor(). c SetFrameFillColor ; (; 0 ; ). ◆ SetTextAlign(). pt SetTextAlign ; (; 12 ; ). ◆ SetTextAngle(). text SetTextAngle ; (; - ; 15). ◆ SetTextColor(). pt SetTextColor ; (; 4 ; ). ◆ SetTextSize(). pt SetTextSize ; (; 0. ; 048583). Variable Documentation. ◆ arrow. arrow = new TArrow(0.225552,0.572271,0.35489,0.283186,0.03,""|>""). Definition at line 227 of file entrylistblock_figure1.C. ◆ line. line = new TLine(0.35,0.5,0.95,0.5). Definition at line 235 of file entrylistblock_figure1.C. ◆ pt. pt = new TPaveText(0.00313972,0.650146,0.22135,0.772595,""br""). Definition at line 7 of file entrylistblock_figure1.C. ◆ text. text = pt->AddText(""TEntryListBlock""). Definition at line 9 of file entrylistblock_figure1.C. treetreedocmacrosentrylistblock_figure1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/entrylistblock__figure1_8C.html:1982,Guid,Guide,1982,doc/master/entrylistblock__figure1_8C.html,https://root.cern,https://root.cern/doc/master/entrylistblock__figure1_8C.html,1,['Guid'],['Guide']
Usability,erface for TNeuron input calculation classes. More...;  ; class  TMVA::TNeuronInputAbs;  TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. More...;  ; class  TMVA::TNeuronInputChooser;  Class for easily choosing neuron input functions. More...;  ; class  TMVA::TNeuronInputSqSum;  TNeuron input calculator – calculates the squared weighted sum of inputs. More...;  ; class  TMVA::TNeuronInputSum;  TNeuron input calculator – calculates the weighted sum of inputs. More...;  ; class  TMVA::Tools;  Global auxiliary applications and data treatment routines. More...;  ; class  TMVA::TrainingHistory;  Tracking data from training. More...;  ; class  TMVA::TransformationHandler;  Class that contains all the data information. More...;  ; class  TMVA::TSpline1;  Linear interpolation of TGraph. More...;  ; class  TMVA::TSpline2;  Quadratic interpolation of TGraph. More...;  ; class  TMVA::TSynapse;  Synapse class used by TMVA artificial neural network methods. More...;  ; class  TMVA::Types;  Singleton class for Global types used by TMVA. More...;  ; class  TMVA::VariableDecorrTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableGaussTransform;  Gaussian Transformation of input variables. More...;  ; class  TMVA::VariableIdentityTransform;  Linear interpolation class. More...;  ; class  TMVA::VariableImportance;  ; class  TMVA::VariableImportanceResult;  ; class  TMVA::VariableInfo;  Class for type info of MVA input variable. More...;  ; class  TMVA::VariableNormalizeTransform;  Linear interpolation class. More...;  ; class  TMVA::VariablePCATransform;  Linear interpolation class. More...;  ; class  TMVA::VariableRearrangeTransform;  Rearrangement of input variables. More...;  ; class  TMVA::VariableTransformBase;  Linear interpolation class. More...;  ; class  TMVA::Volume;  Volume for BinarySearchTree. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TMVA.html:15503,Guid,Guide,15503,doc/master/group__TMVA.html,https://root.cern,https://root.cern/doc/master/group__TMVA.html,1,['Guid'],['Guide']
Usability,"erge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQCommand.html:21596,Undo,Undo,21596,root/html530/TQCommand.html,https://root.cern,https://root.cern/root/html530/TQCommand.html,5,['Undo'],['Undo']
Usability,"ergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerRemote.html:18772,feedback,feedback,18772,root/html528/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html528/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"erger::MergeProfileBin ; (; const TProfileType * ; p, . Int_t ; ibin, . Int_t ; outbin . ). private . Definition at line 1154 of file TH1Merger.cxx. ◆ operator()(). Bool_t TH1Merger::operator() ; (; ). Function performing the actual merge. ; Definition at line 27 of file TH1Merger.cxx. ◆ SameAxesMerge(). Bool_t TH1Merger::SameAxesMerge ; (; ). private . Definition at line 755 of file TH1Merger.cxx. Member Data Documentation. ◆ fH0. TH1* TH1Merger::fH0. private . Definition at line 139 of file TH1Merger.h. ◆ fHClone. TH1* TH1Merger::fHClone. private . histogram on which the list is merged ; Definition at line 140 of file TH1Merger.h. ◆ fInputList. TList TH1Merger::fInputList. private . copy of fH0 - managed by this class ; Definition at line 141 of file TH1Merger.h. ◆ fIsProfile1D. Bool_t TH1Merger::fIsProfile1D = kFALSE. private . Definition at line 136 of file TH1Merger.h. ◆ fIsProfile2D. Bool_t TH1Merger::fIsProfile2D = kFALSE. private . Definition at line 137 of file TH1Merger.h. ◆ fIsProfile3D. Bool_t TH1Merger::fIsProfile3D = kFALSE. private . Definition at line 138 of file TH1Merger.h. ◆ fIsProfileMerge. Bool_t TH1Merger::fIsProfileMerge = kFALSE. private . Definition at line 135 of file TH1Merger.h. ◆ fNewAxisFlag. UInt_t TH1Merger::fNewAxisFlag. private . Definition at line 145 of file TH1Merger.h. ◆ fNewXAxis. TAxis TH1Merger::fNewXAxis. private . Definition at line 142 of file TH1Merger.h. ◆ fNewYAxis. TAxis TH1Merger::fNewYAxis. private . Definition at line 143 of file TH1Merger.h. ◆ fNewZAxis. TAxis TH1Merger::fNewZAxis. private . Definition at line 144 of file TH1Merger.h. ◆ fNoCheck. Bool_t TH1Merger::fNoCheck = kFALSE. private . Definition at line 134 of file TH1Merger.h. ◆ fNoLabelMerge. Bool_t TH1Merger::fNoLabelMerge = kFALSE. private . Definition at line 133 of file TH1Merger.h. hist/hist/src/TH1Merger.h; hist/hist/src/TH1Merger.cxx. TH1Merger. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Merger.html:10461,Guid,Guide,10461,doc/master/classTH1Merger.html,https://root.cern,https://root.cern/doc/master/classTH1Merger.html,1,['Guid'],['Guide']
Usability,"erges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented M from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimizer has become “blocked” at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{ \pi}{ 2}\) that M prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is.; \[\frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0\]; For a stepping method (like \(\mbox{SIMPLEX}\)) this seldom poses any problem, but a method based on derivatives (\(\mbox{MIGRAD}\)) may become blocked at such a value. If this happens, it may be necessary to move the value of the parameter in question a significant distance from the limit (e.g. with MnMigrad::setValue(…)) and restart the minimization, perhaps with that parameter fixed temporarily.; 6.3.2 Getting the right parameter errors with limits; [answer:right-errors]; In the best case, where the minimum is far from any limits, M will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn’t need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:70078,SIMPL,SIMPLEX,70078,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['SIMPL'],['SIMPLEX']
Usability,erial::fA. protected . Definition at line 41 of file TGeoMaterial.h. ◆ fCerenkov. TObject* TGeoMaterial::fCerenkov. protected . Definition at line 50 of file TGeoMaterial.h. ◆ fConstProperties. TList TGeoMaterial::fConstProperties. protected . Definition at line 53 of file TGeoMaterial.h. ◆ fDensity. Double_t TGeoMaterial::fDensity. protected . Definition at line 43 of file TGeoMaterial.h. ◆ fElement. TGeoElement* TGeoMaterial::fElement. protected . Definition at line 51 of file TGeoMaterial.h. ◆ fFWExtension. TGeoExtension* TGeoMaterial::fFWExtension. protected . Transient user-defined extension to materials. ; Definition at line 55 of file TGeoMaterial.h. ◆ fIndex. Int_t TGeoMaterial::fIndex. protected . Definition at line 40 of file TGeoMaterial.h. ◆ fIntLen. Double_t TGeoMaterial::fIntLen. protected . Definition at line 45 of file TGeoMaterial.h. ◆ fPressure. Double_t TGeoMaterial::fPressure. protected . Definition at line 47 of file TGeoMaterial.h. ◆ fProperties. TList TGeoMaterial::fProperties. protected . Definition at line 52 of file TGeoMaterial.h. ◆ fRadLen. Double_t TGeoMaterial::fRadLen. protected . Definition at line 44 of file TGeoMaterial.h. ◆ fShader. TObject* TGeoMaterial::fShader. protected . Definition at line 49 of file TGeoMaterial.h. ◆ fState. EGeoMaterialState TGeoMaterial::fState. protected . Definition at line 48 of file TGeoMaterial.h. ◆ fTemperature. Double_t TGeoMaterial::fTemperature. protected . Definition at line 46 of file TGeoMaterial.h. ◆ fUserExtension. TGeoExtension* TGeoMaterial::fUserExtension. protected . Definition at line 54 of file TGeoMaterial.h. ◆ fZ. Double_t TGeoMaterial::fZ. protected . Definition at line 42 of file TGeoMaterial.h. Libraries for TGeoMaterial:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoMaterial.h; geom/geom/src/TGeoMaterial.cxx. TGeoMaterial. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMaterial.html:37955,Guid,Guide,37955,doc/master/classTGeoMaterial.html,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html,1,['Guid'],['Guide']
Usability,"eries of cuts (""rules""); Use[""RuleFit""] = 1;; // ---------------------------------------------------------------; ; std::cout << std::endl;; std::cout << ""==> Start TMVAClassification"" << std::endl;; ; // Select methods (don't look at this code - not of interest); if (myMethodList != """") {; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; ; std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; for (UInt_t i=0; i<mlist.size(); i++) {; std::string regMethod(mlist[i]);; ; if (Use.find(regMethod) == Use.end()) {; std::cout << ""Method \"""" << regMethod << ""\"" not known in TMVA under this name. Choose among the following:"" << std::endl;; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) std::cout << it->first << "" "";; std::cout << std::endl;; return 1;; }; Use[regMethod] = 1;; }; }; ; // --------------------------------------------------------------------------------------------------; ; // Here the preparation phase begins; ; // Read training and test data; // (it is also possible to use ASCII format as input -> see TMVA Users Guide); // Set the cache directory for the TFile to the current directory. The input; // data file will be downloaded here if not present yet, then it will be read; // from the cache path directly.; TFile::SetCacheFileDir(""."");; std::unique_ptr<TFile> input{TFile::Open(""http://root.cern/files/tmva_class_example.root"", ""CACHEREAD"")};; if (!input || input->IsZombie()) {; throw std::runtime_error(""ERROR: could not open data file"");; }; std::cout << ""--- TMVAClassification : Using input file: "" << input->GetName() << std::endl;; ; // Register the training and test trees; ; TTree *signalTree = (TTree*)input->Get(""TreeS"");; TTree *background = (TTree*)input->Get(""TreeB"");; ; // Create a ROOT output file where TMVA will store ntuples, histograms, etc.; TString outfileName(""TMVAC.root"");; std::unique_ptr<TFile> outputFile{TFile::Open(outfileName, ""RECRE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:84861,Guid,Guide,84861,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Guid'],['Guide']
Usability,"erimental::RMenuItems::AddChkMenuItem ; (; const std::string & ; name, . const std::string & ; title, . bool ; checked, . const std::string & ; toggle, . const TClass * ; cl = nullptr . ). inline . Definition at line 188 of file RMenuItems.hxx. ◆ AddMenuItem(). void ROOT::Experimental::RMenuItems::AddMenuItem ; (; const std::string & ; name, . const std::string & ; title, . const std::string & ; exec, . const TClass * ; cl = nullptr . ). inline . Definition at line 180 of file RMenuItems.hxx. ◆ GetFullId(). const std::string & ROOT::Experimental::RMenuItems::GetFullId ; (; ); const. inline . Definition at line 173 of file RMenuItems.hxx. ◆ GetSpecifier(). const std::string & ROOT::Experimental::RMenuItems::GetSpecifier ; (; ); const. inline . Definition at line 174 of file RMenuItems.hxx. ◆ PopulateObjectMenu(). void RMenuItems::PopulateObjectMenu ; (; void * ; obj, . TClass * ; cl . ). Fill menu for provided object, using MENU as indicator in method comments. ; Definition at line 31 of file RMenuItems.cxx. ◆ Size(). auto ROOT::Experimental::RMenuItems::Size ; (; ); const. inline . Definition at line 176 of file RMenuItems.hxx. Member Data Documentation. ◆ fId. std::string ROOT::Experimental::RMenuItems::fId. protected . object identifier ; Definition at line 159 of file RMenuItems.hxx. ◆ fItems. std::vector<std::unique_ptr<Detail::RMenuItem> > ROOT::Experimental::RMenuItems::fItems. protected . list of items in the menu ; Definition at line 161 of file RMenuItems.hxx. ◆ fSpecifier. std::string ROOT::Experimental::RMenuItems::fSpecifier. protected . ! extra specifier, used only on server ; Definition at line 160 of file RMenuItems.hxx. Libraries for ROOT::Experimental::RMenuItems:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RMenuItems.hxx; graf2d/gpadv7/src/RMenuItems.cxx. ROOTExperimentalRMenuItems. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html:4510,Guid,Guide,4510,doc/master/classROOT_1_1Experimental_1_1RMenuItems.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RMenuItems.html,1,['Guid'],['Guide']
Usability,"erimental::XRooFit::xRooFit::StoredFitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; ROOT::Experimental::XRooFit::xRooFit::StoredFitResult Class Reference. . Definition at line 113 of file xRooFit.h. Public Member Functions;  StoredFitResult (const std::shared_ptr< RooFitResult > &_fr);  ;  StoredFitResult (RooFitResult *_fr);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:983,Clear,Clear,983,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,1,['Clear'],['Clear']
Usability,"eritance diagram for TUsrHitBuffer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TUsrHitBuffer(). TUsrHitBuffer::TUsrHitBuffer ; (; Int_t ; maxent = 10). Definition at line 16 of file clonesA_Event.cxx. ◆ ~TUsrHitBuffer(). virtual TUsrHitBuffer::~TUsrHitBuffer ; (; ). inlinevirtual . Definition at line 24 of file clonesA_Event.h. Member Function Documentation. ◆ AddHit(). TUsrHit * TUsrHitBuffer::AddHit ; (; Int_t ; ev). Definition at line 25 of file clonesA_Event.cxx. ◆ Class(). static TClass * TUsrHitBuffer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUsrHitBuffer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUsrHitBuffer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file clonesA_Event.h. ◆ Clear(). void TUsrHitBuffer::Clear ; (; Option_t * ; opt = """"). virtual . Reimplemented from TObject.; Definition at line 33 of file clonesA_Event.cxx. ◆ DeclFileName(). static const char * TUsrHitBuffer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file clonesA_Event.h. ◆ GetBufSize(). Int_t TUsrHitBuffer::GetBufSize ; (; ). inline . Definition at line 31 of file clonesA_Event.h. ◆ GetCA(). TClonesArray * TUsrHitBuffer::GetCA ; (; ). inline . Definition at line 32 of file clonesA_Event.h. ◆ IsA(). virtual TClass * TUsrHitBuffer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 41 of file clonesA_Event.h. ◆ Streamer(). virtual void TUsrHitBuffer::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TUsrHitBuffer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUsrHitBuffer.html:11103,Clear,Clear,11103,doc/master/classTUsrHitBuffer.html,https://root.cern,https://root.cern/doc/master/classTUsrHitBuffer.html,1,['Clear'],['Clear']
Usability,"eritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory(const char* name, const char* title, RooAbsCategory& inputCat, const char* defCatName = ""NotMapped"", Int_t defCatIdx = NoCatIdx); Constructor with input category and name of default output state, which is assigned; to all input category states that do not follow any mapping rule. RooMappedCategory(const RooMappedCategory& other, const char* name = 0). ~RooMappedCategory(); Destructor. Bool_t map(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); Add mapping rule: any input category state label matching the 'inKeyRegExp'; wildcard expression will be mapped to an output state with name 'outKey'. Rules are evaluated in the order they were added. In case an input state; matches more than one rule, the first rules output state will be assigned. RooCatType evaluate() const; Calculate the current value of the object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this mapped category to the specified stream. In addition to the info; from RooAbsCategory::printStream() we add:. Standard : input category; Shape : default value; Verbose : list of mapping rules. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; product operator construction. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. inline RooMappedCategory(); { }. TObject* clone(const char* newname) const; { return new RooMappedCategory(*this,newname); }. » Last changed: Mon Dec 7 13:48:13 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMappedCategory.html:22308,intuit,intuitively,22308,root/html526/RooMappedCategory.html,https://root.cern,https://root.cern/root/html526/RooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"eritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory(const char* name, const char* title, RooAbsCategory& inputCat, const char* defCatName = ""NotMapped"", Int_t defCatIdx = NoCatIdx); Constructor with input category and name of default output state, which is assigned; to all input category states that do not follow any mapping rule. RooMappedCategory(const RooMappedCategory& other, const char* name = 0). ~RooMappedCategory(); Destructor. Bool_t map(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); Add mapping rule: any input category state label matching the 'inKeyRegExp'; wildcard expression will be mapped to an output state with name 'outKey'. Rules are evaluated in the order they were added. In case an input state; matches more than one rule, the first rules output state will be assigned. RooCatType evaluate() const; Calculate the current value of the object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this mapped category to the specified stream. In addition to the info; from RooAbsCategory::printStream() we add:. Standard : input category; Shape : default value; Verbose : list of mapping rules. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; product operator construction. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. inline RooMappedCategory(); { }. TObject* clone(const char* newname) const; { return new RooMappedCategory(*this,newname); }. » Last changed: Mon Jul 4 15:23:19 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMappedCategory.html:22558,intuit,intuitively,22558,root/html530/RooMappedCategory.html,https://root.cern,https://root.cern/root/html530/RooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"eritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory(const char* name, const char* title, RooAbsCategory& inputCat, const char* defCatName = ""NotMapped"", Int_t defCatIdx = NoCatIdx); Constructor with input category and name of default output state, which is assigned; to all input category states that do not follow any mapping rule. RooMappedCategory(const RooMappedCategory& other, const char* name = 0). ~RooMappedCategory(); Destructor. Bool_t map(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); Add mapping rule: any input category state label matching the 'inKeyRegExp'; wildcard expression will be mapped to an output state with name 'outKey'. Rules are evaluated in the order they were added. In case an input state; matches more than one rule, the first rules output state will be assigned. RooCatType evaluate() const; Calculate the current value of the object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this mapped category to the specified stream. In addition to the info; from RooAbsCategory::printStream() we add:. Standard : input category; Shape : default value; Verbose : list of mapping rules. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; product operator construction. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. inline RooMappedCategory(); { }. TObject* clone(const char* newname) const; { return new RooMappedCategory(*this,newname); }. » Last changed: Thu Nov 3 20:08:36 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMappedCategory.html:22943,intuit,intuitively,22943,root/html532/RooMappedCategory.html,https://root.cern,https://root.cern/root/html532/RooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"eritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlotPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord, Bool_t xoySelectable, Bool_t xozSelectable, Bool_t yozSelectable); TGLPlotPainter's ctor. TGLPlotPainter(TGL5DDataSet* data, TGLPlotCamera* camera, TGLPlotCoordinates* coord); TGLPlotPainter's ctor. TGLPlotPainter(TGLPlotCamera* camera); TGLPlotPainter's ctor. void Paint(); Draw lego/surf/whatever you can. void PrintPlot() const; Generate PS using gl2ps. Bool_t PlotSelected(Int_t px, Int_t py); Read color buffer content to find selected object. void SetPadColor(const TColor* color); Used in a pad. void SetFrameColor(const TColor* frameColor); Set plot's back box color. void InvalidateSelection(); Selection must be updated. const TColor * GetPadColor() const; Get pad color. void MoveSection(Int_t px, Int_t py); Create dynamic profile using selected plane. void DrawSections() const; Draw sections (if any). void ClearBuffers() const. // Clear buffer.; Float_t rgb[3] = {1.f, 1.f, 1.f};; if (const TColor *color = GetPadColor()); color->GetRGB(rgb[0], rgb[1], rgb[2]);; glClearColor(rgb[0], rgb[1], rgb[2], 1.);; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);. void DrawPaletteAxis() const; Draw. Palette. Axis. void SaveModelviewMatrix() const. void SaveProjectionMatrix() const. void RestoreModelviewMatrix() const. void RestoreProjectionMatrix() const. TGLPlotPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord, Bool_t xoySelectable, Bool_t xozSelectable, Bool_t yozSelectable); TGLPlotPainter(TH1 *hist, TGLPlotCamera *camera, TGLPlotCoordinates *coord, Int_t context,; Bool_t xoySelectable, Bool_t xozSelectable, Bool_t yozSelectable);; TGLPlotPainter(TGLPlotCamera *camera, Int_t context);. TGLPlotPainter(TGLPlotCamera* camera). const TGLPlotBox& RefBackBox() const; { return fBackBox; }. void SetPhysicalShapeColor(const Float_t* rgba). void InitGL() const. void DeInitGL() const. void DrawPlot() const. Bool_t In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPlotPainter.html:4351,Clear,Clear,4351,root/html602/TGLPlotPainter.html,https://root.cern,https://root.cern/root/html602/TGLPlotPainter.html,2,['Clear'],['Clear']
Usability,"erited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void ApproximatePosterior () const;  approximate posterior in nbins using a TF1 scan the poi values and evaluate the posterior at each point and save the result in a cloned TF1 For each point the posterior is evaluated by integrating the nuisance parameters ;  ; void ClearAll () const;  clear all cached pdf objects ;  ; void ComputeIntervalFromApproxPosterior (double c1, double c2) const;  compute the interval using the approximate posterior function ;  ; void ComputeIntervalFromCdf (double c1, double c2) const;  internal function compute the interval using Cdf integration ;  ; void ComputeIntervalUsingRooFit (double c1, double c2) const;  internal function compute the interval using RooFit ;  ; void ComputeShortestInterval () const;  compute the shortest interval from the histogram representing the posterior ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TF1 * fApproxPosterior;  TF1 representing the scanned posterior function. ;  ; double fBrfPrecision;  root finder precision ;  ; RooArgSet fConditionalObs;  conditional observables ;  ; RooAbsData * fData;  data set ;  ; RooArgSet fGlobalObs;  global observables ;  ; RooAbsReal * fIntegratedLikelihood;  integrated likelihood function, i.e - unnormalized posterior function ;  ; TString fIntegrationType;  ; double fLeftSideFraction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:17308,Clear,ClearAll,17308,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,2,"['Clear', 'clear']","['ClearAll', 'clear']"
Usability,"erivSolver::Iterate ; (; ). inlineoverridevirtual . perform an iteration ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 325 of file GSLMultiRootSolver.h. ◆ Name(). const std::string & ROOT::Math::GSLMultiRootDerivSolver::Name ; (; ); const. inlineoverridevirtual . return name ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 321 of file GSLMultiRootSolver.h. ◆ operator=() [1/2]. GSLMultiRootDerivSolver & ROOT::Math::GSLMultiRootDerivSolver::operator= ; (; const GSLMultiRootDerivSolver & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiRootDerivSolver & ROOT::Math::GSLMultiRootDerivSolver::operator= ; (; GSLMultiRootDerivSolver && ; rhs). delete . ◆ SetSolver(). int ROOT::Math::GSLMultiRootDerivSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inlineoverridevirtual . set the solver parameters for the case of derivative ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 296 of file GSLMultiRootSolver.h. Member Data Documentation. ◆ fDerivFunctions. GSLMultiRootDerivFunctionWrapper ROOT::Math::GSLMultiRootDerivSolver::fDerivFunctions. private . Definition at line 352 of file GSLMultiRootSolver.h. ◆ fDerivSolver. gsl_multiroot_fdfsolver* ROOT::Math::GSLMultiRootDerivSolver::fDerivSolver. private . Definition at line 353 of file GSLMultiRootSolver.h. ◆ fGradFuncVec. std::vector<ROOT::Math::IMultiGradFunction*> ROOT::Math::GSLMultiRootDerivSolver::fGradFuncVec. private . Definition at line 356 of file GSLMultiRootSolver.h. ◆ fName. std::string ROOT::Math::GSLMultiRootDerivSolver::fName. private . Definition at line 357 of file GSLMultiRootSolver.h. ◆ fVec. gsl_vector* ROOT::Math::GSLMultiRootDerivSolver::fVec. mutableprivate . Definition at line 355 of file GSLMultiRootSolver.h. math/mathmore/src/GSLMultiRootSolver.h. ROOTMathGSLMultiRootDerivSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:6703,Guid,Guide,6703,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,1,['Guid'],['Guide']
Usability,"erivative type; 82 fFunctions.reserve(2);; 83}; 84 ; 85GSLMultiRootFinder::GSLMultiRootFinder(const char * name) :; 86 fIter(0), fStatus(-1), fPrintLevel(0),; 87 fType(0), fUseDerivAlgo(false),; 88 fSolver(nullptr); 89{; 90 // constructor for a string; 91 fFunctions.reserve(2);; 92 SetType(name);; 93}; 94 ; 95GSLMultiRootFinder::~GSLMultiRootFinder(); 96{; 97 // delete function wrapper; 98 ClearFunctions();; 99 if (fSolver) delete fSolver;; 100}; 101 ; 102void GSLMultiRootFinder::SetType(const char * name) {; 103 // set type using a string; 104 std::pair<bool,int> type = GetType(name);; 105 fUseDerivAlgo = type.first;; 106 fType = type.second;; 107}; 108 ; 109 ; 110int GSLMultiRootFinder::AddFunction(const ROOT::Math::IMultiGenFunction & func) {; 111 // add a new function in the vector; 112 ROOT::Math::IMultiGenFunction * f = func.Clone();; 113 if (!f) return 0;; 114 fFunctions.push_back(f);; 115 return fFunctions.size();; 116}; 117 ; 118void GSLMultiRootFinder::ClearFunctions() {; 119 // clear the function list; 120 for (unsigned int i = 0; i < fFunctions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() const {; 136 // return x; 137 return (fSolver != nullptr) ? fSolver->X() : nullptr;; 138}; 139const double * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:3874,Clear,ClearFunctions,3874,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,2,"['Clear', 'clear']","['ClearFunctions', 'clear']"
Usability,"ern (const LayerContainer& _layers,; 1222 std::vector<LayerData>& layerData) const; 1223 {; 1224 size_t idxLayer = 0, idxLayerEnd = _layers.size ();; 1225 for (; idxLayer < idxLayerEnd; ++idxLayer); 1226 {; 1227 LayerData& prevLayerData = layerData.at (idxLayer);; 1228 LayerData& currLayerData = layerData.at (idxLayer+1);; 1229 ; 1230 forward (prevLayerData, currLayerData);; 1231 ; 1232 applyFunctions (currLayerData.valuesBegin (), currLayerData.valuesEnd (), currLayerData.activationFunction ());; 1233 }; 1234 }; 1235 ; 1236 ; 1237 ; 1238 ; 1239 template <typename LayerContainer, typename LayerPatternContainer>; 1240 void Net::forwardBatch (const LayerContainer& _layers,; 1241 LayerPatternContainer& layerPatternData,; 1242 std::vector<double>& valuesMean,; 1243 std::vector<double>& valuesStdDev,; 1244 size_t trainFromLayer) const; 1245 {; 1246 valuesMean.clear ();; 1247 valuesStdDev.clear ();; 1248 ; 1249 // ---------------------------------- loop over layers and pattern -------------------------------------------------------; 1250 for (size_t idxLayer = 0, idxLayerEnd = layerPatternData.size (); idxLayer < idxLayerEnd-1; ++idxLayer); 1251 {; 1252 bool doTraining = idxLayer >= trainFromLayer;; 1253 ; 1254 // get layer-pattern data for this and the corresponding one from the next layer; 1255 std::vector<LayerData>& prevLayerPatternData = layerPatternData.at (idxLayer);; 1256 std::vector<LayerData>& currLayerPatternData = layerPatternData.at (idxLayer+1);; 1257 ; 1258 size_t numPattern = prevLayerPatternData.size ();; 1259 size_t numNodesLayer = _layers.at (idxLayer).numNodes ();; 1260 ; 1261 std::vector<MeanVariance> means (numNodesLayer);; 1262 // ---------------- loop over layerDatas of pattern compute forward ----------------------------; 1263 for (size_t idxPattern = 0; idxPattern < numPattern; ++idxPattern); 1264 {; 1265 const LayerData& prevLayerData = prevLayerPatternData.at (idxPattern);; 1266 LayerData& currLayerData = currLayerPatternData.at (idxPattern);; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:40569,clear,clear,40569,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['clear'],['clear']
Usability,"ernFinder.cxx. Member Function Documentation. ◆ cd(). virtual void TGeoPatternFinder::cd ; (; Int_t ; ). inlinevirtual . Reimplemented in TGeoPatternX, TGeoPatternY, TGeoPatternZ, TGeoPatternParaX, TGeoPatternParaY, TGeoPatternParaZ, TGeoPatternTrapZ, TGeoPatternCylR, TGeoPatternCylPhi, TGeoPatternSphR, TGeoPatternSphTheta, TGeoPatternSphPhi, and TGeoPatternHoneycomb.; Definition at line 74 of file TGeoPatternFinder.h. ◆ CdNext(). TGeoNode * TGeoPatternFinder::CdNext ; (; ). virtual . Make next node (if any) current. ; Definition at line 207 of file TGeoPatternFinder.cxx. ◆ Class(). static TClass * TGeoPatternFinder::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoPatternFinder::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoPatternFinder::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 101 of file TGeoPatternFinder.h. ◆ ClearThreadData(). void TGeoPatternFinder::ClearThreadData ; (; ); const. Definition at line 77 of file TGeoPatternFinder.cxx. ◆ CreateMatrix(). virtual TGeoMatrix * TGeoPatternFinder::CreateMatrix ; (; ); const. pure virtual . Implemented in TGeoPatternX, TGeoPatternY, TGeoPatternZ, TGeoPatternParaX, TGeoPatternParaY, TGeoPatternParaZ, TGeoPatternTrapZ, TGeoPatternCylR, TGeoPatternCylPhi, TGeoPatternSphR, TGeoPatternSphTheta, TGeoPatternSphPhi, and TGeoPatternHoneycomb. ◆ CreateThreadData(). void TGeoPatternFinder::CreateThreadData ; (; Int_t ; nthreads). Create thread data for n threads max. ; Definition at line 92 of file TGeoPatternFinder.cxx. ◆ DeclFileName(). static const char * TGeoPatternFinder::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 101 of file TGeoPatternFinder.h. ◆ FindNode(). virtual TGeoNode * TGeoPatternFinder::FindNode ; (; Double_t * ; , . const Double_t * ; = nullptr . ). inlinevirtual . Reimplemented i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternFinder.html:15180,Clear,ClearThreadData,15180,doc/master/classTGeoPatternFinder.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html,1,['Clear'],['ClearThreadData']
Usability,"erride;  ; bool isShapeServer () const;  Returns true if contents is shape server of owner. ;  ; bool isValueServer () const;  Returns true of contents is value server of owner. ;  ; const char * name () const override;  Return name of proxy. ;  ; RooArgProxy & operator= (RooArgProxy &&other)=delete;  ; RooArgProxy & operator= (RooArgProxy const &other)=delete;  ; RooAbsArg * owner () const;  Returns the owner of this proxy. ;  ; void print (std::ostream &os, bool addContents=false) const override;  Print the name of the proxy on ostream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgProxy.html:2617,Clear,Clear,2617,doc/master/classRooArgProxy.html,https://root.cern,https://root.cern/doc/master/classRooArgProxy.html,1,['Clear'],['Clear']
Usability,"erride;  Add to the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add to the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Add to the list. ;  ; void AddFirst (TObject *obj) override;  Add at the start of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add at the start of the list. ;  ; void AddLast (TObject *obj) override;  Add at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add at the end of the list. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorList.html:1797,Clear,Clear,1797,doc/master/classTSelectorList.html,https://root.cern,https://root.cern/doc/master/classTSelectorList.html,1,['Clear'],['Clear']
Usability,"erride;  Get bin name of an outpt bin. ;  ; void RegularizeDistributionRecursive (const TUnfoldBinning *binning, ERegMode regmode, EDensityMode densityMode, const char *distribution, const char *axisSteering);  recursively add regularisation conditions for this node and its children ;  ; void RegularizeOneDistribution (const TUnfoldBinning *binning, ERegMode regmode, EDensityMode densityMode, const char *axisSteering);  regularize the distribution fof the given node ;  ;  Protected Member Functions inherited from TUnfoldSys; void ClearResults (void) override;  Clear all data members which depend on the unfolding results. ;  ; void DoBackgroundSubtraction (void);  perform background subtraction ;  ; void GetEmatrixFromVyy (const TMatrixDSparse *vyy, TH2 *ematrix, const Int_t *binMap, Bool_t clearEmat);  propagate an error matrix on the input vector to the unfolding result ;  ; TMatrixDSparse * GetSummedErrorMatrixXX (void);  determine total error matrix on the vector x ;  ; TMatrixDSparse * GetSummedErrorMatrixYY (void);  determine total error matrix on the vector Ax ;  ; virtual TMatrixDSparse * PrepareCorrEmat (const TMatrixDSparse *m1, const TMatrixDSparse *m2, const TMatrixDSparse *dsys);  propagate correlated systematic shift to an output vector ;  ; virtual void PrepareSysError (void);  Matrix calculations required to propagate systematic errors. ;  ; virtual TMatrixDSparse * PrepareUncorrEmat (const TMatrixDSparse *m1, const TMatrixDSparse *m2);  propagate uncorrelated systematic errors to a covariance matrix ;  ; void ScaleColumnsByVector (TMatrixDSparse *m, const TMatrixTBase< Double_t > *v) const;  scale columns of a matrix by the corresponding rows of a vector ;  ; void VectorMapToHist (TH1 *hist_delta, const TMatrixDSparse *delta, const Int_t *binMap);  map delta to hist_delta, possibly summing up bins ;  ;  Protected Member Functions inherited from TUnfold; void AddMSparse (TMatrixDSparse *dest, Double_t f, const TMatrixDSparse *src) const;  add a sparse ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:32279,clear,clearEmat,32279,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['clear'],['clearEmat']
Usability,"erride;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Last () const override;  Return the last object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * LastLink () const;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ; void RecursiveRemove (TObject *obj)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorList.html:3919,Clear,Clear,3919,doc/master/classTSelectorList.html,https://root.cern,https://root.cern/doc/master/classTSelectorList.html,1,['Clear'],['Clear']
Usability,"errideChange the name of this TEventList.Definition TEventList.cxx:367; TIterDefinition TCollection.h:235; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::Streamervoid Streamer(TBuffer &) overrideStream an object of class TObject.; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::fNameTString fNameDefinition TNamed.h:32; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347. treetreesrcTEventList.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEventList_8cxx_source.html:22560,Guid,Guide,22560,doc/master/TEventList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEventList_8cxx_source.html,1,['Guid'],['Guide']
Usability,"errideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 81 of file RooVoigtian.cxx. ◆ IsA(). TClass * RooVoigtian::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 54 of file RooVoigtian.h. ◆ selectDefaultAlgorithm(). void RooVoigtian::selectDefaultAlgorithm ; (; ). inline . Disable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ; Definition at line 38 of file RooVoigtian.h. ◆ selectFastAlgorithm(). void RooVoigtian::selectFastAlgorithm ; (; ). inline . Enable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ; Definition at line 34 of file RooVoigtian.h. ◆ Streamer(). void RooVoigtian::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooVoigtian::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file RooVoigtian.h. Member Data Documentation. ◆ _doFast. bool RooVoigtian::_doFast = false. private . Definition at line 53 of file RooVoigtian.h. ◆ mean. RooRealProxy RooVoigtian::mean. protected . Definition at line 43 of file RooVoigtian.h. ◆ sigma. RooRealProxy RooVoigtian::sigma. protected . Definition at line 45 of file RooVoigtian.h. ◆ width. RooRealProxy RooVoigtian::width. protected . Definition at line 44 of file RooVoigtian.h. ◆ x. RooRealProxy RooVoigtian::x. protected . Definition at line 42 of file RooVoigtian.h. Libraries for RooVoigtian:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooVoigtian.h; roofit/roofit/src/RooVoigtian.cxx. RooVoigtian. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:78750,Guid,Guide,78750,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['Guid'],['Guide']
Usability,"erridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2250 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:44164,Learn,Learn,44164,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['Learn'],['Learn']
Usability,"erridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2251 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:44168,Learn,Learn,44168,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['Learn'],['Learn']
Usability,"erridevirtual . Change window attributes. ; Reimplemented from TVirtualX.; Definition at line 6330 of file TGWin32.cxx. ◆ CheckEvent(). Bool_t TGWin32::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 5804 of file TGWin32.cxx. ◆ Class(). static TClass * TGWin32::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGWin32::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGWin32::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGWin32.h. ◆ ClearArea(). void TGWin32::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the bakcground color. ; Reimplemented from TVirtualX.; Definition at line 6398 of file TGWin32.cxx. ◆ ClearWindow() [1/2]. void TGWin32::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 1569 of file TGWin32.cxx. ◆ ClearWindow() [2/2]. void TGWin32::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 6728 of file TGWin32.cxx. ◆ CloseDisplay(). void TGWin32::CloseDisplay ; (; ). overridevirtual . close display (terminate server/gMainThread thread) ; Reimplemented from TVirtualX.; Definition at line 899 of file TGWin32.cxx. ◆ ClosePixmap(). void TGWin32::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 1588 of file TGWin32.cxx. ◆ CloseWindow(). void TGWin32::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 1596 of file TGWin32.cxx. ◆ Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:57525,Clear,Clear,57525,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Clear'],['Clear']
Usability,"erridevirtual . Handle animation timer. ; Reimplemented from TGWindow.; Definition at line 5011 of file TSessionViewer.cxx. ◆ IsA(). TClass * TSessionViewer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGMainFrame.; Definition at line 631 of file TSessionViewer.h. ◆ IsAutoSave(). Bool_t TSessionViewer::IsAutoSave ; (; ); const. inline . Definition at line 605 of file TSessionViewer.h. ◆ IsBusy(). Bool_t TSessionViewer::IsBusy ; (; ); const. inline . Definition at line 604 of file TSessionViewer.h. ◆ LogMessage(). void TSessionViewer::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Load/append a log msg in the log frame. ; Definition at line 5051 of file TSessionViewer.cxx. ◆ MyHandleMenu(). void TSessionViewer::MyHandleMenu ; (; Int_t ; id). Handle session viewer custom popup menus. ; Definition at line 5500 of file TSessionViewer.cxx. ◆ OnCascadeMenu(). void TSessionViewer::OnCascadeMenu ; (; ). Handle feedback histograms configuration menu. ; Definition at line 5564 of file TSessionViewer.cxx. ◆ OnListTreeClicked(). void TSessionViewer::OnListTreeClicked ; (; TGListTreeItem * ; entry, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). Handle mouse clicks in list tree. ; Definition at line 4635 of file TSessionViewer.cxx. ◆ OnListTreeDoubleClicked(). void TSessionViewer::OnListTreeDoubleClicked ; (; TGListTreeItem * ; entry, . Int_t ; btn . ). Handle mouse double clicks in list tree (connect to server). ; Definition at line 4895 of file TSessionViewer.cxx. ◆ ProcessMessage(). Bool_t TSessionViewer::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ;  . ). overridevirtual . Handle messages send to the TSessionViewer object. ; E.g. all menu entries messages. ; Reimplemented from TGCompositeFrame.; Definition at line 5627 of file TSessionViewer.cxx. ◆ QueryResultReady(). void TSessionViewer::QueryResultReady ; (; char * ; query). Handle signal ""query result ready"" coming from Proof sessio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:46779,feedback,feedback,46779,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['feedback'],['feedback']
Usability,"erridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsCategory.; Definition at line 45 of file RooBinningCategory.h. ◆ printMultiline(). void RooBinningCategory::printMultiline ; (; std::ostream & ; os, . Int_t ; content, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Printing interface (human readable) ; Print info about this threshold category to the specified stream.; In addition to the info from RooAbsCategory::printStream() we add:; Standard : input category Shape : default value Verbose : list of thresholds ; Reimplemented from RooAbsCategory.; Definition at line 101 of file RooBinningCategory.cxx. ◆ recomputeShape(). void RooBinningCategory::recomputeShape ; (; ). inlineoverrideprotectedvirtual . The shape of this category does not need to be recomputed, as it creates states on the fly. ; Implements RooAbsCategory.; Definition at line 43 of file RooBinningCategory.h. ◆ Streamer(). void RooBinningCategory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategory. ◆ StreamerNVirtual(). void RooBinningCategory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file RooBinningCategory.h. Member Data Documentation. ◆ _bname. TString RooBinningCategory::_bname. protected . Name of the binning specification to be used to perform the mapping. ; Definition at line 39 of file RooBinningCategory.h. ◆ _inputVar. RooTemplateProxy<RooAbsRealLValue> RooBinningCategory::_inputVar. protected . Input variable that is mapped. ; Definition at line 38 of file RooBinningCategory.h. Libraries for RooBinningCategory:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooBinningCategory.h; roofit/roofitcore/src/RooBinningCategory.cxx. RooBinningCategory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinningCategory.html:48840,Guid,Guide,48840,doc/master/classRooBinningCategory.html,https://root.cern,https://root.cern/doc/master/classRooBinningCategory.html,1,['Guid'],['Guide']
Usability,"error propagation). Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t& pvalue, Double_t& perror, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. void Print(Option_t* = """") const; Print out some information about the results; Note: use Alt/Null labels for the hypotheses here as the Null; might be the s+b hypothesis. Double_t NullPValue() const; Return p-value for null hypothesis. { return fNullPValue; }. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. { return fAlternatePValue; }. Double_t CLb() const; Convert NullPValue into a ""confidence level"". { return !fBackgroundIsAlt ? NullPValue() : AlternatePValue(); }. Double_t CLsplusb() const; Convert AlternatePValue into a ""confidence level"". { return !fBackgroundIsAlt ? AlternatePValue() : NullPValue(); }. Double_t CLs() const; CLs is simply CLs+b/CLb (not a method, but a quantity). Double_t Significance() const; familiar name for the Null p-value in terms of 1-sided Gaussian significance. {return RooStats::PValueToSignificance( NullPValue() ); }. SamplingDistribution* GetNullDistribution(void); { return fNullDistr; }. SamplingDistribution* GetAltDistribution(void); { return fAltDistr; }. RooDataSet* GetNullDetailedOutput(void); { return fNullDetailedOutput; }. RooDataSet* GetAltDetailedOutput(void); { return fAltDetailedOutput; }. RooDataSet* GetFitInfo(void); { return fFitInfo; }. Double_t GetTestStatisticData(void); { return fTestStatisticData; }. const RooArgList* GetAllTestStatisticsData(void); { return fAllTestStatisticsData; }. void SetAltDetailedOutput(RooDataSet* d); { fAltDetailedOutput = d; }. void SetNullDetailedOutput(RooDataSet* d); { fNullDetailedOutput = d; }. void SetFitInfo(RooDataSet* d); { fFitInfo = d; }. Bool_t GetPValueIsRightTail(void); { return fPValueIsRightTail; }. void SetBackgroundAsAlt(Bool_t l ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestResult.html:10710,simpl,simply,10710,root/html534/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestResult.html,1,['simpl'],['simply']
Usability,"error. Must only be called directly at the corresponding; 114 * call to Forward(...). */; 115 virtual void Backward(Tensor_t &gradients_backward, const Tensor_t &activations_backward ) = 0;; 116 ///// std::vector<Matrix_t> &inp1, std::vector<Matrix_t> &inp2) = 0;; 117 ; 118 /*! Reset some training flags after a loop on all batches; 119 Some layer (e.g. batchnormalization) might need to implement the function in case some operations; 120 are needed after looping an all batches */; 121 virtual void ResetTraining() {}; 122 ; 123 /*! Updates the weights and biases, given the learning rate */; 124 void Update(const Scalar_t learningRate);; 125 ; 126 /*! Updates the weights, given the gradients and the learning rate, */; 127 void UpdateWeights(const std::vector<Matrix_t> &weightGradients, const Scalar_t learningRate);; 128 ; 129 /*! Updates the biases, given the gradients and the learning rate. */; 130 void UpdateBiases(const std::vector<Matrix_t> &biasGradients, const Scalar_t learningRate);; 131 ; 132 /*! Updates the weight gradients, given some other weight gradients and learning rate. */; 133 void UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients, const Scalar_t learningRate);; 134 ; 135 /*! Updates the bias gradients, given some other weight gradients and learning rate. */; 136 void UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients, const Scalar_t learningRate);; 137 ; 138 /*! Copies the weights provided as an input. */; 139 void CopyWeights(const std::vector<Matrix_t> &otherWeights);; 140 ; 141 /*! Copies the biases provided as an input. */; 142 void CopyBiases(const std::vector<Matrix_t> &otherBiases);; 143 ; 144 /*! Copy all trainable weight and biases from another equivalent layer but with different architecture; 145 The function can copy also extra parameters in addition to weights and biases if they are return; 146 by the function GetExtraLayerParameters */; 147 template <typename Arch>; 148 void CopyParameters(const VGeneralLayer<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:5496,learn,learningRate,5496,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],"['learning', 'learningRate']"
Usability,"errors; bool fix_position[MAX_NUMBER_OF_PEAKS1]; // logical vector which allows to fix appropriate positions (not fit). However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values of fitted amplitudes, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS1]; // amplitude errors; bool fix_amp[MAX_NUMBER_OF_PEAKS1]i; // logical vector, which allows to fix appropriate amplitudes (not fit). However they are present in the estimated functional; double area[MAX_NUMBER_OF_PEAKS1]; // calculated areas of peaks; double area_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak areas; double sigma_init; // sigma parameter, see peak shape function; double sigma_calc;; double sigma_err;; bool fix_sigma;; double t_init // t parameter, see peak shape function; double t_calc;; double t_err;; bool fix_t;; double b_init // b parameter, see peak shape function; double b_calc;; double b_err;; bool fix_b;; double s_init; // s parameter, see peak shape function; double s_calc;; double s_err;; bool fix_s;; double a0_init; // background is estimated as a0+a1*x+a2*x*x; double a0_calc;; double a0_err;; bool fix_a0;; double a1_init;; double a1_calc;; double a1_err;; bool fix_a1;; double a2_init;; double a2_calc;; double a2_err;; bool fix_a2;; };; As an example we present a simple 1-dimensional synthetic spectrum with 5 peaks. The fit (obtained using above-given awmi fitting function) is given in Figure 5.1. The chi-square achieved in this fit was 0.76873. The input value of the fit (positions of peaks and their amplitudes) were estimated using peak searching function. Fit obtained using above given awmi fitting function. Let us go to a more complicated fit with a lot of overlapping peaks as in Figure 5.2. The initial positions of peaks were determined from original data, using peak searching function. The fit is not very good, as there are some peaks mis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:41729,simpl,simple,41729,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"ers (structure); 1247 ; 1248 void removeLayer () { m_layers.pop_back (); } ///< remove one layer; 1249 ; 1250 ; 1251 void clear () ///< clear one layer; 1252 {; 1253 m_layers.clear ();; 1254 m_eErrorFunction = ModeErrorFunction::SUMOFSQUARES;; 1255 }; 1256 ; 1257 ; 1258 template <typename OutIterator>; 1259 void initializeWeights (WeightInitializationStrategy eInitStrategy,; 1260 OutIterator itWeight); ///< initialize the weights with the given strategy; 1261 ; 1262 protected:; 1263 ; 1264 void fillDropContainer (DropContainer& dropContainer, double dropFraction, size_t numNodes) const; ///< prepare the drop-out-container (select the nodes which are to be dropped out); 1265 ; 1266 ; 1267 private:; 1268 ; 1269 ModeErrorFunction m_eErrorFunction; ///< denotes the error function; 1270 size_t m_sizeInput; ///< input size of this DNN; 1271 size_t m_sizeOutput; ///< output size of this DNN; 1272 std::vector<Layer> m_layers; ///< layer-structure-data; 1273 ; 1274 protected:; 1275 // variables for JsMVA (interactive training in jupyter notebook); 1276 IPythonInteractive *fInteractive = nullptr;; 1277 bool * fExitFromTraining = nullptr;; 1278 UInt_t *fIPyMaxIter = nullptr, *fIPyCurrentIter = nullptr;; 1279 ; 1280 public:; 1281 ; 1282 // setup ipython interactive variables; 1283 void SetIpythonInteractive(IPythonInteractive* fI, bool* fE, UInt_t *M, UInt_t *C){; 1284 fInteractive = fI;; 1285 fExitFromTraining = fE;; 1286 fIPyMaxIter = M;; 1287 fIPyCurrentIter = C;; 1288 }; 1289 };; 1290 ; 1291 ; 1292 ; 1293 ; 1294typedef std::tuple<Settings&, Batch&, DropContainer&> pass_through_type;; 1295 ; 1296 ; 1297 ; 1298 ; 1299 ; 1300 ; 1301 ; 1302 } // namespace DNN; 1303} // namespace TMVA; 1304 ; 1305 ; 1306// include the implementations (in header file, because they are templated); 1307#include ""TMVA/NeuralNet.icc""; 1308 ; 1309#endif; 1310 ; Monitoring.h; NeuralNet.icc; Pattern.h; R#define R(a, b, c, d, e, f, g, h, i)Definition RSha256.hxx:110; e#define e(i)Definition RSha256.hxx:10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:45973,clear,clear,45973,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['clear'],['clear']
Usability,"ers(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<std::string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*cacheUniqueSuffix() const; voidchangeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tcheckDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearShapeDirty() const; voidclearValueAndShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tcrc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:2382,Clear,Clear,2382,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['Clear'],['Clear']
Usability,"ers(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<std::string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*cacheUniqueSuffix() const; voidchangeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tcheckDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidcopyList(TList& dest, const TList& source); static UInt_tcrc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsArg.html:2382,Clear,Clear,2382,root/html528/RooAbsArg.html,https://root.cern,https://root.cern/root/html528/RooAbsArg.html,2,['Clear'],['Clear']
Usability,"ers. ; Definition at line 457 of file TEveViewer.cxx. ◆ RepaintChangedViewers(). void TEveViewerList::RepaintChangedViewers ; (; Bool_t ; resetCameras, . Bool_t ; dropLogicals . ). Repaint viewers that are tagged as changed. ; Definition at line 437 of file TEveViewer.cxx. ◆ SceneDestructing(). void TEveViewerList::SceneDestructing ; (; TEveScene * ; scene). Callback done from a TEveScene destructor allowing proper removal of the scene from affected viewers. ; Definition at line 488 of file TEveViewer.cxx. ◆ SetColorBrightness(). void TEveViewerList::SetColorBrightness ; (; Float_t ; b). Set color brightness. ; Definition at line 650 of file TEveViewer.cxx. ◆ SetShowTooltip(). void TEveViewerList::SetShowTooltip ; (; Bool_t ; x). inline . Definition at line 124 of file TEveViewer.h. ◆ Streamer(). void TEveViewerList::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveViewerList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 132 of file TEveViewer.h. ◆ SwitchColorSet(). void TEveViewerList::SwitchColorSet ; (; ). Switch background color. ; Definition at line 658 of file TEveViewer.cxx. ◆ UseLightColorSet(). Bool_t TEveViewerList::UseLightColorSet ; (; ); const. inline . Definition at line 129 of file TEveViewer.h. Member Data Documentation. ◆ fBrightness. Float_t TEveViewerList::fBrightness. protected . Definition at line 88 of file TEveViewer.h. ◆ fShowTooltip. Bool_t TEveViewerList::fShowTooltip. protected . Definition at line 86 of file TEveViewer.h. ◆ fUseLightColorSet. Bool_t TEveViewerList::fUseLightColorSet. protected . Definition at line 89 of file TEveViewer.h. Libraries for TEveViewerList:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveViewer.h; graf3d/eve/src/TEveViewer.cxx. TEveViewerList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewerList.html:42193,Guid,Guide,42193,doc/master/classTEveViewerList.html,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html,1,['Guid'],['Guide']
Usability,"ers: find the mapping of data members to otuput list entries in the output list and apply it. ; Definition at line 2766 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayerRemote::SetupFeedback ; (; ). overrideprotectedvirtual . Setup reporting of feedback objects. ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 4095 of file TProofPlayer.cxx. ◆ StopFeedback(). void TProofPlayerRemote::StopFeedback ; (; ). overrideprotectedvirtual . Stop reporting of feedback objects. ; Reimplemented from TProofPlayer.; Definition at line 4118 of file TProofPlayer.cxx. ◆ StopProcess(). void TProofPlayerRemote::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). overridevirtual . Stop process after this event. ; Reimplemented from TProofPlayer.; Definition at line 3325 of file TProofPlayer.cxx. ◆ StoreFeedback(). void TProofPlayerRemote::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). overridevirtual . Store feedback results from the specified slave. ; Reimplemented from TProofPlayer.; Definition at line 4034 of file TProofPlayer.cxx. ◆ StoreOutput(). void TProofPlayerRemote::StoreOutput ; (; TList * ; out). overridevirtual . Store received output list. ; Reimplemented from TProofPlayer.; Definition at line 3852 of file TProofPlayer.cxx. ◆ Streamer(). void TProofPlayerRemote::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster. ◆ StreamerNVirtual(). void TProofPlayerRemote::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 366 of file TProofPlayer.h. Member Data Documentation. ◆ fDSet. TDSet* TProofPlayerRemote::fDSet. protected . Definition at line 288 of file TProofPlayer.h. ◆ fErrorHandler. ErrorHandlerFunc_t TProofPlayerRemote::fErrorHandler. protected . tdset for current processing ; Definition at line 289 of file TProofPlayer.h. ◆ fFeedback. TList* TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:37514,feedback,feedback,37514,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"ers; class charts. ROOT; » HIST; » HIST; » THnT<Long64_t>. class THnT<Long64_t>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<Long64_t>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_Long64_t_.html:1004,Clear,Clear,1004,root/html602/THnT_Long64_t_.html,https://root.cern,https://root.cern/root/html602/THnT_Long64_t_.html,2,['Clear'],['Clear']
Usability,"ers; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html:535,Simpl,SimpleLikelihoodRatioTestStat,535,root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleLikelihoodRatioTestStat.html,8,['Simpl'],"['SimpleLikelihoodRatioTestStat', 'SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat']"
Usability,"erse of the Vavilov cumulative probability density function. ; Parameters. zThe argument \(z\), which must be in the range \(0 \le z \le 1\) ; kappaThe parameter \(\kappa\), which must be in the range \(\kappa \ge 0.001 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 476 of file VavilovAccurate.cxx. ◆ vavilov_accurate_quantile_c(). double ROOT::Math::vavilov_accurate_quantile_c ; (; double ; z, . double ; kappa, . double ; beta2 . ). The inverse of the complementary Vavilov cumulative probability density function. ; Parameters. zThe argument \(z\), which must be in the range \(0 \le z \le 1\) ; kappaThe parameter \(\kappa\), which must be in the range \(\kappa \ge 0.001 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 481 of file VavilovAccurate.cxx. ◆ vavilov_fast_quantile(). double ROOT::Math::vavilov_fast_quantile ; (; double ; z, . double ; kappa, . double ; beta2 . ). The inverse of the Vavilov cumulative probability density function. ; Parameters. zThe argument \(z\), which must be in the range \(0 \le z \le 1\) ; kappaThe parameter \(\kappa\), which must be in the range \(0.01 \le \kappa \le 12 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 592 of file VavilovFast.cxx. ◆ vavilov_fast_quantile_c(). double ROOT::Math::vavilov_fast_quantile_c ; (; double ; z, . double ; kappa, . double ; beta2 . ). The inverse of the complementary Vavilov cumulative probability density function. ; Parameters. zThe argument \(z\), which must be in the range \(0 \le z \le 1\) ; kappaThe parameter \(\kappa\), which must be in the range \(0.01 \le \kappa \le 12 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 597 of file VavilovFast.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__QuantFunc.html:22910,Guid,Guide,22910,doc/master/group__QuantFunc.html,https://root.cern,https://root.cern/doc/master/group__QuantFunc.html,1,['Guid'],['Guide']
Usability,"ersion of ROOT that have enabled these non-default features.; To utilize TIOFeatures, create the object, set the desired feature flags, then attach it to a TTree. All subsequently created branches (and their baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of the TIOFeatures to stdout. ;  ; bool Set (const std::string &);  Given a IO feature string, set the corresponding feature. ;  ; bool Set (EIOFeatures bits);  Set a specific IO feature. ;  ; bool Set (Experimental::EIOFeatures bits);  Set a specific IO feature. ;  ; bool Test (EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOUnsupportedFeatures bits) const;  . Static Public Attributes; static constexpr int kIOFeatureCount = 1;  . Private Member Functions;  TIOFeatures (UChar_t IOBits);  ; UChar_t GetFeatures () const;  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:1661,Clear,Clear,1661,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,4,['Clear'],['Clear']
Usability,"ersion of this class ; Definition at line 341 of file TRecorder.h. ◆ DeclFileName(). static const char * TRecorder::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 341 of file TRecorder.h. ◆ GetState(). TRecorder::ERecorderState TRecorder::GetState ; (; ); const. virtual . Get current state of recorder. ; Definition at line 299 of file TRecorder.cxx. ◆ IsA(). TClass * TRecorder::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 341 of file TRecorder.h. ◆ ListCmd(). void TRecorder::ListCmd ; (; const char * ; filename). Prints out recorded commandline events. ; Definition at line 271 of file TRecorder.cxx. ◆ ListGui(). void TRecorder::ListGui ; (; const char * ; filename). Prints out recorded GUI events. ; Definition at line 279 of file TRecorder.cxx. ◆ operator=(). TRecorder & TRecorder::operator= ; (; const TRecorder & ; ). private . ◆ Pause(). void TRecorder::Pause ; (; ). Pauses replaying. ; Definition at line 247 of file TRecorder.cxx. ◆ PrevCanvases(). void TRecorder::PrevCanvases ; (; const char * ; filename, . Option_t * ; option . ). Save previous canvases in a .root file. ; Definition at line 308 of file TRecorder.cxx. ◆ Replay() [1/2]. void TRecorder::Replay ; (; ). inline . Definition at line 318 of file TRecorder.h. ◆ Replay() [2/2]. Bool_t TRecorder::Replay ; (; const char * ; filename, . Bool_t ; showMouseCursor = kTRUE, . TRecorder::EReplayModes ; mode = kRealtime . ). Replays events from 'filename'. ; Definition at line 238 of file TRecorder.cxx. ◆ ReplayStop(). void TRecorder::ReplayStop ; (; ). Cancels replaying. ; Definition at line 263 of file TRecorder.cxx. ◆ Resume(). void TRecorder::Resume ; (; ). Resumes replaying. ; Definition at line 255 of file TRecorder.cxx. ◆ Start(). void TRecorder::Start ; (; const char * ; filename, . Option_t * ; option = ""RECREATE"", . Window_t * ; w = nullptr, . Int_t ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:16604,Pause,Pause,16604,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Pause'],['Pause']
Usability,ersion(). static constexpr Version_t TEveSelectorToEventList::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 36 of file TEveTreeTools.h. ◆ DeclFileName(). static const char * TEveSelectorToEventList::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 36 of file TEveTreeTools.h. ◆ IsA(). TClass * TEveSelectorToEventList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 36 of file TEveTreeTools.h. ◆ operator=(). TEveSelectorToEventList & TEveSelectorToEventList::operator= ; (; const TEveSelectorToEventList & ; ). privatedelete . ◆ Process(). Bool_t TEveSelectorToEventList::Process ; (; Long64_t ; entry). overridevirtual . Process entry. ; Reimplemented from TSelector.; Definition at line 44 of file TEveTreeTools.cxx. ◆ Streamer(). void TEveSelectorToEventList::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEveSelectorToEventList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 36 of file TEveTreeTools.h. ◆ Version(). Int_t TEveSelectorToEventList::Version ; (; ); const. inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 33 of file TEveTreeTools.h. Member Data Documentation. ◆ fEvList. TEventList* TEveSelectorToEventList::fEvList. protected . Definition at line 28 of file TEveTreeTools.h. ◆ fInputList. TList TEveSelectorToEventList::fInputList. protected . Definition at line 29 of file TEveTreeTools.h. Libraries for TEveSelectorToEventList:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveTreeTools.h; graf3d/eve/src/TEveTreeTools.cxx. TEveSelectorToEventList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelectorToEventList.html:20423,Guid,Guide,20423,doc/master/classTEveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html,1,['Guid'],['Guide']
Usability,"ersion(). static constexpr Version_t TProofLimitsFinder::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 42 of file TProofLimitsFinder.h. ◆ DeclFileName(). static const char * TProofLimitsFinder::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 42 of file TProofLimitsFinder.h. ◆ FindGoodLimits() [1/3]. Int_t TProofLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Axis_t ; xmin, . Axis_t ; xmax . ). overridevirtual . Find good limits. ; Reimplemented from THLimitsFinder.; Definition at line 76 of file TProofLimitsFinder.cxx. ◆ FindGoodLimits() [2/3]. Int_t TProofLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Axis_t ; xmin, . Axis_t ; xmax, . Axis_t ; ymin, . Axis_t ; ymax . ). overridevirtual . Find good limits. ; Reimplemented from THLimitsFinder.; Definition at line 90 of file TProofLimitsFinder.cxx. ◆ FindGoodLimits() [3/3]. Int_t TProofLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Axis_t ; xmin, . Axis_t ; xmax, . Axis_t ; ymin, . Axis_t ; ymax, . Axis_t ; zmin, . Axis_t ; zmax . ). overridevirtual . Find good limits. ; Reimplemented from THLimitsFinder.; Definition at line 104 of file TProofLimitsFinder.cxx. ◆ IsA(). TClass * TProofLimitsFinder::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from THLimitsFinder.; Definition at line 42 of file TProofLimitsFinder.h. ◆ Streamer(). void TProofLimitsFinder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from THLimitsFinder. ◆ StreamerNVirtual(). void TProofLimitsFinder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file TProofLimitsFinder.h. proof/proofplayer/inc/TProofLimitsFinder.h; proof/proofplayer/src/TProofLimitsFinder.cxx. TProofLimitsFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLimitsFinder.html:14564,Guid,Guide,14564,doc/master/classTProofLimitsFinder.html,https://root.cern,https://root.cern/doc/master/classTProofLimitsFinder.html,1,['Guid'],['Guide']
Usability,"ert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void Print (Option_t *option="""") const override;  print the matrix in 4x4 format ;  ; virtual void RegisterYourself ();  Register the matrix in the current manager, which will become the owner. ;  ; virtual void RotateX (Double_t);  ; virtual void RotateY (Double_t);  ; virtual void RotateZ (Double_t);  ; void SetDefaultName ();  If no name was supplied in the ctor, the type of transformation is checked. ;  ; virtual void SetDx (Double_t);  ; virtual void SetDy (Double_t);  ; virtual void SetDz (Double_t);  ; void SetShared (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScale.html:5261,Clear,Clear,5261,doc/master/classTGeoScale.html,https://root.cern,https://root.cern/doc/master/classTGeoScale.html,1,['Clear'],['Clear']
Usability,"ert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; const RefCountL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:39426,clear,clear,39426,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,29,['clear'],['clear']
Usability,"ert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:38566,clear,clear,38566,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,102,['clear'],['clear']
Usability,"ertex3 &worldVertex, TGLMatrix *modviewMat=nullptr) const;  Convert a 3D world vertex to '3D' viewport (screen) one. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:11143,Clear,Clear,11143,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,2,['Clear'],['Clear']
Usability,"erval is a concrete implementation of the ConfInterval interface. ; It implements simple 1-dimensional intervals in a range [a,b]. In addition, you can ask it for the upper- or lower-bound. ; Definition at line 20 of file SimpleInterval.h. Public Member Functions;  SimpleInterval (const char *name, const RooRealVar &var, double lower, double upper, double cl);  constructor from name, the Parameter of interest and lower/upper bound values ;  ;  SimpleInterval (const char *name=nullptr);  default constructor ;  ;  SimpleInterval (const SimpleInterval &other, const char *name);  default constructor ;  ; bool CheckParameters (const RooArgSet &) const override;  check if parameters are correct (i.e. they are the POI of this interval) ;  ; double ConfidenceLevel () const override;  return the confidence interval ;  ; RooArgSet * GetParameters () const override;  return a cloned list with the parameter of interest ;  ; TClass * IsA () const override;  ; bool IsInInterval (const RooArgSet &) const override;  check if parameter is in the interval ;  ; virtual double LowerLimit ();  return the interval lower limit ;  ; SimpleInterval & operator= (const SimpleInterval &other);  default constructor ;  ; void SetConfidenceLevel (double) override;  set the confidence level for the interval. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual double UpperLimit ();  return the interval upper limit ;  ;  Public Member Functions inherited from RooStats::ConfInterval;  ConfInterval (const char *name=nullptr);  constructor given name and title ;  ; ConfInterval & operator= (const ConfInterval &other);  operator= ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:1455,Simpl,SimpleInterval,1455,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,erver::Terminate ; (; Int_t ; status). overridevirtual . Terminate the proof server. ; Reimplemented from TApplication.; Definition at line 1028 of file TApplicationServer.cxx. Member Data Documentation. ◆ fInterrupt. Bool_t TApplicationServer::fInterrupt. private . Definition at line 41 of file TApplicationServer.h. ◆ fIsValid. Bool_t TApplicationServer::fIsValid. private . Definition at line 40 of file TApplicationServer.h. ◆ fLogFile. FILE* TApplicationServer::fLogFile. private . Definition at line 44 of file TApplicationServer.h. ◆ fLogFileDes. Int_t TApplicationServer::fLogFileDes. private . Definition at line 45 of file TApplicationServer.h. ◆ fLogFilePath. TString TApplicationServer::fLogFilePath. private . Definition at line 43 of file TApplicationServer.h. ◆ fProtocol. Int_t TApplicationServer::fProtocol. private . Definition at line 37 of file TApplicationServer.h. ◆ fRealTimeLog. Bool_t TApplicationServer::fRealTimeLog. private . Definition at line 46 of file TApplicationServer.h. ◆ fSentCanvases. TList* TApplicationServer::fSentCanvases. private . Definition at line 52 of file TApplicationServer.h. ◆ fSessId. TString TApplicationServer::fSessId. private . Definition at line 48 of file TApplicationServer.h. ◆ fSocket. TSocket* TApplicationServer::fSocket. private . Definition at line 39 of file TApplicationServer.h. ◆ fUrl. TUrl TApplicationServer::fUrl. private . Definition at line 38 of file TApplicationServer.h. ◆ fWorkDir. TString TApplicationServer::fWorkDir. private . Definition at line 50 of file TApplicationServer.h. ◆ fWorkingDir. TRemoteObject* TApplicationServer::fWorkingDir. private . Definition at line 53 of file TApplicationServer.h. Libraries for TApplicationServer:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TApplicationServer.h; net/net/src/TApplicationServer.cxx. TApplicationServer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:32097,Guid,Guide,32097,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['Guid'],['Guide']
Usability,"erverList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual voidchangeBasis(RooFormulaVar* basis); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:5012,clear,clearValueDirty,5012,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,2,['clear'],['clearValueDirty']
Usability,"erwise or not, it is all the same.; 2042 ; 2043 TConfigSTL *config = (TConfigSTL*)conf;; 2044 UInt_t start, count;; 2045 /* Version_t vers = */ buf.ReadVersion(&start, &count, config->fOldClass);; 2046 ; 2047 std::vector<To> *const vec = (std::vector<To>*)(((char*)addr)+config->fOffset);; 2048 Int_t nvalues;; 2049 buf.ReadInt(nvalues);; 2050 vec->resize(nvalues);; 2051 ; 2052 Double32_t *temp = new Double32_t[nvalues];; 2053 buf.ReadFastArrayDouble32(temp, nvalues);; 2054 for(Int_t ind = 0; ind < nvalues; ++ind) {; 2055 (*vec)[ind] = (To)temp[ind];; 2056 }; 2057 delete [] temp;; 2058 ; 2059 buf.CheckByteCount(start,count,config->fTypeName);; 2060 return 0;; 2061 }; 2062 ; 2063 };; 2064 ; 2065 struct VectorPtrLooper {; 2066 ; 2067 template <typename T>; 2068 static INLINE_TEMPLATE_ARGS Int_t ReadBasicType(TBuffer &buf, void *iter, const void *end, const TConfiguration *config); 2069 {; 2070 const Int_t offset = config->fOffset;; 2071 ; 2072 for(; iter != end; iter = (char*)iter + sizeof(void*) ) {; 2073 T *x = (T*)( ((char*) (*(void**)iter) ) + offset );; 2074 buf >> *x;; 2075 }; 2076 return 0;; 2077 }; 2078 ; 2079 template <typename From, typename To>; 2080 struct ConvertBasicType {; 2081 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config); 2082 {; 2083 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2084 From temp;; 2085 const Int_t offset = config->fOffset;; 2086 for(; iter != end; iter = (char*)iter + sizeof(void*) ) {; 2087 buf >> temp;; 2088 To *x = (To*)( ((char*) (*(void**)iter) ) + offset );; 2089 *x = (To)temp;; 2090 }; 2091 return 0;; 2092 }; 2093 };; 2094 ; 2095 template <typename To>; 2096 struct ConvertBasicType<BitsMarker,To> {; 2097 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config); 2098 {; 2099 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2100 UInt_t temp;; 2101 const Int_t offset = config->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:85626,Simpl,Simple,85626,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,eryResultManager.cxx. ◆ SeqNum(). Int_t TQueryResultManager::SeqNum ; (; ); const. inline . Definition at line 58 of file TQueryResultManager.h. ◆ Streamer(). void TQueryResultManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TQueryResultManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file TQueryResultManager.h. Member Data Documentation. ◆ fCompute. TStopwatch TQueryResultManager::fCompute. private . Definition at line 48 of file TQueryResultManager.h. ◆ fDrawQueries. Int_t TQueryResultManager::fDrawQueries. private . Definition at line 42 of file TQueryResultManager.h. ◆ fKeptQueries. Int_t TQueryResultManager::fKeptQueries. private . Definition at line 43 of file TQueryResultManager.h. ◆ fLock. TProofLockPath* TQueryResultManager::fLock. private . Definition at line 46 of file TQueryResultManager.h. ◆ fLogFile. FILE* TQueryResultManager::fLogFile. private . Definition at line 47 of file TQueryResultManager.h. ◆ fPreviousQueries. TList* TQueryResultManager::fPreviousQueries. private . Definition at line 45 of file TQueryResultManager.h. ◆ fQueries. TList* TQueryResultManager::fQueries. private . Definition at line 44 of file TQueryResultManager.h. ◆ fQueryDir. TString TQueryResultManager::fQueryDir. private . Definition at line 38 of file TQueryResultManager.h. ◆ fSeqNum. Int_t TQueryResultManager::fSeqNum. private . Definition at line 41 of file TQueryResultManager.h. ◆ fSessionDir. TString TQueryResultManager::fSessionDir. private . Definition at line 40 of file TQueryResultManager.h. ◆ fSessionTag. TString TQueryResultManager::fSessionTag. private . Definition at line 39 of file TQueryResultManager.h. proof/proof/inc/TQueryResultManager.h; proof/proof/src/TQueryResultManager.cxx. TQueryResultManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResultManager.html:20315,Guid,Guide,20315,doc/master/classTQueryResultManager.html,https://root.cern,https://root.cern/doc/master/classTQueryResultManager.html,1,['Guid'],['Guide']
Usability,es . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User's Guide; 6 Series (html); all formats and series. ROOT Primer - Notebook Version (beta); html pdf GitHub / SWAN; *. ROOT Primer; 6 Series (html); all formats and series. ROOT Primer 5; 5 Series (pdf). Topical Manuals. Title; Quick Link; All Links. RooFit; Manual (pdf) / Quick Start Guide (pdf); other formats. HTTP Server; 6 Series (html); all versions. JSROOT; 6 Series (html); all versions. CERNLib; (pdf); -. Minuit; (pdf); -. Minuit2; 6 Series (html); all formats and series. TSpectrum; 6 Series (html); all formats and series. TMVA; 6 Series (pdf); other links. PROOF; Drupal Book; other resources. VMC; Drupal Book; -. In a Nutshell. Title; Link. Input and Output; Drupal. Trees in 5 steps; Drupal. Interpreter; Drupal Book. Cling; Drupal Book. Math Libraries; Drupal Book. 2D-graphics; Drupal Book. 3D-graphics; Drupal Book. RooFit in 20 Minutes; Drupal. The ROOT GUI Classes; Drupal. Introduction to Cint; Drupal. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:2003,Guid,Guide,2003,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['Guid'],['Guide']
Usability,"es ; [in]modeformat of the error source. sysError corresponds to a one-sigma variation. If may be given in various forms, specified by mode . mode=kSysErrModeMatrix the histogram sysError corresponds to an alternative response matrix. . mode=kSysErrModeShift the content of the histogram sysError are the absolute shifts of the response matrix . mode=kSysErrModeRelative the content of the histogram sysError specifies the relative uncertainties . Internally, all three cases are transformed to the case mode=kSysErrModeMatrix. ; Definition at line 292 of file TUnfoldSys.cxx. ◆ Class(). static TClass * TUnfoldSys::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUnfoldSys::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUnfoldSys::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 146 of file TUnfoldSys.h. ◆ ClearResults(). void TUnfoldSys::ClearResults ; (; void ; ). overrideprotectedvirtual . Clear all data members which depend on the unfolding results. ; Reimplemented from TUnfold.; Definition at line 650 of file TUnfoldSys.cxx. ◆ DeclFileName(). static const char * TUnfoldSys::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 146 of file TUnfoldSys.h. ◆ DoBackgroundSubtraction(). void TUnfoldSys::DoBackgroundSubtraction ; (; void ; ). protected . perform background subtraction ; This prepares the data members for the base class TUnfold, such that the background is properly taken into account. ; Definition at line 377 of file TUnfoldSys.cxx. ◆ GetBackground(). void TUnfoldSys::GetBackground ; (; TH1 * ; bgrHist, . const char * ; bgrSource = nullptr, . const Int_t * ; binMap = nullptr, . Int_t ; includeError = 3, . Bool_t ; clearHist = kTRUE . ); const. get background into a histogram ; Parameters. [in,out]bgrHisttarget histogram, content and errors will be alte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:32996,Clear,ClearResults,32996,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['Clear'],['ClearResults']
Usability,"es Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. ; Definition at line 1085 of file TDataSetManagerFile.cxx. ◆ ChecksumDataSet(). Int_t TDataSetManagerFile::ChecksumDataSet ; (; const char * ; path, . const char * ; md5path, . TString & ; checksum . ). protected . Calculate the checksum of the indicated dataset at 'path' and save it to the appropriate file 'md5path'. ; The MD5 string is returned in 'md5sum'. Return 0 on success, -1 on error. ; Definition at line 1512 of file TDataSetManagerFile.cxx. ◆ Class(). static TClass * TDataSetManagerFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDataSetManagerFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDataSetManagerFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 100 of file TDataSetManagerFile.h. ◆ ClearCache(). Int_t TDataSetManagerFile::ClearCache ; (; const char * ; uri = 0). overridevirtual . Clear cached information matching uri. ; Reimplemented from TDataSetManager.; Definition at line 1253 of file TDataSetManagerFile.cxx. ◆ CreateLsFile(). Int_t TDataSetManagerFile::CreateLsFile ; (; const char * ; group, . const char * ; user, . Long_t & ; mtime, . TString & ; checksum . ). protected . Create or recreate the dataset lists for 'uri'. ; The list are saved in text form in 'uri'/ls.txt for fast browsing and in 'uri'/ls.root in form of TMacro for optimized and portable transfer. Return 0 on success, 1 if the file was empty, -1 on error ; Definition at line 474 of file TDataSetManagerFile.cxx. ◆ DeclFileName(). static const char * TDataSetManagerFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file TDataSetManagerFile.h. ◆ ExistsDataSet() [1/2]. Bool_t TDataSetManagerFile::ExistsDataSet ; (; const char * ; group, . const char * ; user, . const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:23396,Clear,ClearCache,23396,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['Clear'],['ClearCache']
Usability,"es a category object has. In computations, values are expected to change often, while shapes remain mostly constant (unless e.g. a new range is set for an observable).; Nodes of a computation graph are connected using instances of RooAbsProxy. If Node B declares a member RooTemplateProxy<TypeOfNodeA>, Node A will be registered as a server of values to Node B, and Node B will know that it is a client of node A. Using functions like dependsOn(), or getObservables() / getParameters(), the relation of A --> B can be queried. Using graphVizTree(), one can create a visualisation of the expression tree.; An instance of RooAbsArg can have named attributes. It also has flags to indicate that either its value or its shape were changed (= it is dirty). RooAbsArg provides functionality to manage client/server relations in a computation graph (clientServerInterface), and helps propagating value/shape changes through the graph. RooAbsArg implements interfaces for inspecting client/server relationships (clientServerInterface) and setting/clearing/querying named attributes. Caching of values; The values of nodes in the computation graph are cached in RooFit. If a value is used in two nodes of a graph, it doesn't need to be recomputed. If a node acquires a new value, it notifies its consumers (""clients"") that their cached values are dirty. See the functions in optimisationInterface for details. A node uses its isValueDirty() and isShapeDirty() functions to decide if a computation is necessary. Caching can be vetoed globally by setting a bit using setDirtyInhibit(). This will make computations slower, but all the nodes of the computation graph will be evaluated irrespective of whether their state is clean or dirty. Using setOperMode(), caching can also be enabled/disabled for single nodes. ; Definition at line 79 of file RooAbsArg.h. Classes; struct  ProxyListCache;  . Public Types; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeAc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:2291,clear,clearing,2291,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearing']
Usability,"es a quartile is a 25 per cent or 75 per cent quantileDefinition TGraphQQ.cxx:236; TGraphQQ::TGraphQQTGraphQQ()default constructorDefinition TGraphQQ.cxx:92; TGraphQQ::fFTF1 * fFtheoretical density function, if specifiedDefinition TGraphQQ.h:26; TGraphQQ::fYq1Double_t fYq1y1 coordinate of the interquartile lineDefinition TGraphQQ.h:23; TGraphQQ::GetXq1Double_t GetXq1() constDefinition TGraphQQ.h:40; TGraphQQ::fY0Double_t * fY0! second dataset, if specifiedDefinition TGraphQQ.h:25; TGraphQQ::SetFunctionvoid SetFunction(TF1 *f)Sets the theoretical distribution function (density!) and computes its quantiles.Definition TGraphQQ.cxx:262; TGraphQQ::~TGraphQQ~TGraphQQ() overrideDestroys a TGraphQQ.Definition TGraphQQ.cxx:172; TGraphQQ::fXq2Double_t fXq2x2 coordinate of the interquartile lineDefinition TGraphQQ.h:22; TGraphQQ::GetYq2Double_t GetYq2() constDefinition TGraphQQ.h:43; TGraphQQ::fNy0Int_t fNy0size of the fY0 datasetDefinition TGraphQQ.h:20; TGraphQQ::MakeFunctionQuantilesvoid MakeFunctionQuantiles()Computes quantiles of theoretical distribution function.Definition TGraphQQ.cxx:183; TGraphQQ::GetXq2Double_t GetXq2() constDefinition TGraphQQ.h:41; TGraphQQ::fXq1Double_t fXq1x1 coordinate of the interquartile lineDefinition TGraphQQ.h:21; TGraphQQ::fYq2Double_t fYq2y2 coordinate of the interquartile lineDefinition TGraphQQ.h:24; TGraphQQ::GetFTF1 * GetF() constDefinition TGraphQQ.h:44; TGraphQQ::MakeQuantilesvoid MakeQuantiles()When sample sizes are not equal, computes quantiles of the bigger sample by linear interpolation.Definition TGraphQQ.cxx:215; TGraphQQ::GetYq1Double_t GetYq1() constDefinition TGraphQQ.h:42; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16. graf2dgrafincTGraphQQ.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphQQ_8h_source.html:4166,Guid,Guide,4166,doc/master/TGraphQQ_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphQQ_8h_source.html,1,['Guid'],['Guide']
Usability,"es a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVACrossValidationApplication.C This macro provides an example of how to use TMVA for k-folds cross evaluation in application ;  TMVACrossValidationRegression.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMinimalClassification.C Minimal self-contained example for setting up TMVA with binary classification ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:159743,simpl,simple,159743,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['simpl'],['simple']
Usability,"es can be accessed from your PC, from the web and from large-scale file delivery systems used e.g. in the GRID. ROOT trees spread over several files can be chained and accessed as a unique object, allowing for loops over huge amounts of data.; Mine data Powerful mathematical and statistical tools are provided to operate on your data. The full power of a C++ application and of parallel processing is available for any kind of data manipulation. Data can also be generated following any statistical distribution and modeled, making it possible to simulate complex systems.; Publish results Results can be displayed with histograms, scatter plots, fitting functions. ROOT graphics may be adjusted real-time by few mouse clicks. Publication-quality figures can be saved in PDF or other formats.; Run interactively or build your own application You can use the Cling C++ interpreter for your interactive sessions and to write macros, or you can compile your program to run at full speed. In both cases, you can also create a graphical user interface.; Use ROOT within other languages ROOT provides a set of bindings in order to seamlessly integrate with existing languages such as Python, R and Mathematica. Save dataAccess dataProcess dataShow resultsInteractive or built applicationIntegration with other languages. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/about-root.html:4039,Guid,Guides,4039,d/about-root.html,https://root.cern,https://root.cern/d/about-root.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"es create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticconstexpr . The initial number of empty processing slots that a TThreadedObject is constructed with by default. ; Deprecated: TThreadedObject grows as more slots are required. ; Definition at line 155 of file TThreadedObject.hxx. ◆ fIsMerged. template<class T > . bool ROOT::TThreadedObject< T >::fIsMerged. private . Remember if the objects have been merged already. ; Definition at line 335 of file TThreadedObject.hxx. ◆ fModel. template<class T > . std::unique_ptr<T> ROOT::TThreadedObject< T >::fModel. private . Use to store a ""model"" of the object. ; Definition at line 327 of file TThreadedObject.hxx. ◆ fObjPointers. template<class T > . std::deque<std::shared_ptr<T> > ROOT::TThreadedObject< T >::fObjPointers. private . An object pointer per slot. ; Definition at line 329 of file TThreadedObject.hxx. ◆ fSpinMutex. template<class T > . ROOT::TSpinMutex ROOT::TThreadedObject< T >::fSpinMutex. mutableprivate . Protects concurrent access to fThrIDSlotMap, fObjPointers. ; Definition at line 334 of file TThreadedObject.hxx. ◆ fThrIDSlotMap. template<class T > . std::map<std::thread::id, unsigned> ROOT::TThreadedObject< T >::fThrIDSlotMap. private . A mapping between the thread IDs and the slots. ; Definition at line 333 of file TThreadedObject.hxx. core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTThreadedObject. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:11097,Guid,Guide,11097,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,1,['Guid'],['Guide']
Usability,"es for the subsequent evaluation of the; test statistics. RooAbsData* GenerateToyDataImportanceSampling(RooArgSet& paramPoint, double& weight) const; This method generates a toy data set for importance sampling for the given parameter point taking; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. RooAbsData* Generate(RooAbsPdf& pdf, RooArgSet& observables, const RooDataSet* protoData = NULL, int forceEvents = 0) const; This is the generate function to use in the context of the ToyMCSampler; instead of the standard RooAbsPdf::generate(...).; It takes into account whether the number of events is given explicitly; or whether it should use the expected number of events. It also takes; into account the option to generate a binned data set (ie RooDataHist). void ClearCache(); clear the cache obtained from the pdf used for speeding the toy and global observables generation; needs to be called every time the model pdf (fPdf) changes. ToyMCSampler(); Proof constructor. Do not use. ToyMCSampler(RooStats::TestStatistic& ts, Int_t ntoys). void SetAlwaysUseMultiGen(Bool_t flag); { fgAlwaysUseMultiGen = flag ; }. void SetUseMultiGen(Bool_t flag); { fUseMultiGen = flag ; }. RooAbsData* GenerateToyData(RooArgSet& paramPoint) const; generates toy data; without weight. SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& nullPOI); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; { return fTestStat; }. Double_t ConfidenceLevel() const; { return 1. - fSize; }. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); { return fNToys; }. void SetNToys(const Int_t ntoy); { fNToys = ntoy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ToyMCSampler.html:6646,Clear,ClearCache,6646,root/html532/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__ToyMCSampler.html,2,"['Clear', 'clear']","['ClearCache', 'clear']"
Usability,"es for using signals/slots mechanism in a standalone executable program do not differ from what was described previously. Let’s remind that. a slot can be any class method with a generated Cling dictionary; a slot can be a function with a dictionary. Detailed information how to generate a dictionary can be found on http://root.cern.ch/root/CintGenerator.html; The following example demonstrates how to use signals/slots mechanism in a standalone executable program on linux platform with the gcc compiler.; tst.C; #include <TQObject.h>; #include <RQ_OBJECT.h>. class A {; RQ_OBJECT(""A""); private:; Int_t fValue;; public:; A() : fValue(0) { }; ~A() { }; void SetValue(Int_t value); // *SIGNAL*; void PrintValue() const { printf(""value = %d\n"", fValue); }; };; void A::SetValue(Int_t value) { // Set new value; // Emit signal ""SetValue(Int_t)"" with a single parameter; if (value != fValue) {; fValue = value;; Emit(""SetValue(Int_t)"", fValue);; }; }; // Main program; #ifdef STANDALONE; int main(int argc, char **argv) {; A* a = new A();; A* b = new A();; a->Connect(""SetValue(Int_t)"", ""A"", b, ""SetValue(Int_t)"");; printf(""n******* Test of SetValue(Int_t) signal *******n"");; b->SetValue(10);; printf(""nt***** b before ******n"");; b->PrintValue();; a->SetValue(20);; printf(""t***** b after a->SetValue(20) ******n"");; b->PrintValue();; return 0;; }; #endif; ACLiC simplifies this procedure and allows the dictionary generation by:; root[] .L tst.C++; It will create the shared library tst_C.so.; The next line will create an executable:; g++ -otst tst.C `root-config --cflags --libs` ./tst_C.so -DSTANDALONE; The library tst_C.so is a dynamically loaded library and should be located in $LD_LIBRARY_PATH. The current working directory should be added to $LD_LIBRARY_PATH via:; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./; To run it, you just do:; ./tst; 25.8 Widgets in Detail; 25.8.1 Buttons; Buttons are a popular group of widgets designed to provide specific interfaces for user interaction. TGButton",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1175266,simpl,simplifies,1175266,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplifies']
Usability,"es in the projection is set to the number of entries of the 2-D histogram, otherwise the number of entries is incremented by 1 for all non empty cells.; The option can also be used to specify the projected profile error type. Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details ; Definition at line 1389 of file TProfile2D.cxx. ◆ ProjectionXY(). TH2D * TProfile2D::ProjectionXY ; (; const char * ; name = ""_pxy"", . Option_t * ; option = ""e"" . ); const. Project this profile2D into a 2-D histogram along X,Y. ; The projection is always of the type TH2D. if option ""E"" is specified the errors of the projected histogram are computed and set to be equal to the errors of the profile. Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the product of the bin content of the profile and the entries. With this option the returned histogram will be equivalent to the one obtained by filling directly a TH2D using the 3-rd value as a weight. This option makes sense only for profile filled with all weights =1. When the profile is weighted (filled with weights different than 1) the bin error of the projected histogram (obtained using this option ""W"") cannot be correctly computed from the information stored in the profile. In that case the obtained histogram contains as bin error square the weighted sum of the square of the profiled observable (TProfile2D::fSumw2[bin] ) . Definition at line 1287 of file TProfile2D.cxx. ◆ PutStats(). void TProfile2D::PutStats ; (; Double_t * ; stats). overridevirtual . Replace current statistics with the values in array stats. ; Reimp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:96486,simpl,simply,96486,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['simpl'],['simply']
Usability,"es not overwrite the frame; 1906 //take into account the frame line width; 1907 if (gxwork[0 ] < vxmin) {gxwork[0 ] = vxmin; gxwork[1 ] = vxmin;}; 1908 if (gywork[0] < vymin) {gywork[0] = vymin; gywork[npt-1] = vymin;}; 1909 ; 1910 //transform to log ?; 1911 ComputeLogs(npt, optionZ);; 1912 gPad->PaintFillArea(npt,gxworkl.data(),gyworkl.data());; 1913 if (drawborder) {; 1914 if (!fillarea) gyworkl[0] = ylast;; 1915 gPad->PaintPolyLine(npt-1,gxworkl.data(),gyworkl.data(),noClip);; 1916 }; 1917 continue;; 1918 }; 1919 } //endfor (j=first; j<=last;j++) {; 1920 } else {; 1921 gywork[0] = wmin;; 1922 if (!optionOne) gxwork[0] = TMath::Max((Double_t)0,gPad->GetUxmin());; 1923 else gxwork[0] = gPad->GetUxmin();; 1924 npt = 2;; 1925 for (j=first; j<=last;j++) {; 1926 if (!optionBins) {; 1927 gywork[npt-1] = gywork[npt-2];; 1928 gywork[npt] = wmin+((j-first+1)*delta);; 1929 } else {; 1930 yj1 = y[j]; yj = y[j-1];; 1931 if (yj1 < yj) {; 1932 if (j != last) Error(where, ""Y must be in increasing order"");; 1933 else Error(where, ""Y must have N+1 values with option N"");; 1934 return;; 1935 }; 1936 gywork[npt-1] = y[j-1]; gywork[npt] = y[j];; 1937 }; 1938 gxwork[npt-1] = x[j-1]; gxwork[npt] = x[j-1];; 1939 if ((gxwork[npt-1] >= uxmin-rounding && gxwork[npt-1] <= uxmax+rounding) ||; 1940 (gxwork[npt] >= uxmin-rounding && gxwork[npt] <= uxmax+rounding)) npt += 2;; 1941 if (j == last) {; 1942 gywork[npt-1] = gywork[npt-2];; 1943 gxwork[npt-1] = gxwork[0];; 1944 ComputeLogs(npt, optionZ);; 1945 gPad->PaintFillArea(npt,gxworkl.data(),gyworkl.data());; 1946 if (drawborder) {; 1947 if (!fillarea) gyworkl[0] = ylast;; 1948 gPad->PaintPolyLine(npt-1,gxworkl.data(),gyworkl.data(),noClip);; 1949 }; 1950 continue;; 1951 }; 1952 } //endfor (j=first; j<=last;j++); 1953 }; 1954 theGraph->TAttLine::Modify();; 1955 theGraph->TAttFill::Modify();; 1956 }; 1957 ; 1958 // Draw a standard Histogram (default); 1959 ; 1960 if ((optionHist) || !chopt[0]) {; 1961 if (!optionRot) {; 1962 gxwork[0] = wmin;; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:71590,ux,uxmin-rounding,71590,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,4,['ux'],"['uxmax', 'uxmin-rounding']"
Usability,"es of the event; int fEventSize; // size (in bytes) of the event; };. The data members of the Particle class describe the particle properties as shown below:; class Particle {; public:; double fPosX,fPosY,fPosZ; // particle position nearest to interaction point; double fMomentum; // particle momentum; double fMomentumPhi; // particle direction (phi); double fMomentumEta; // particle direction (eta); Long64_t fTags[128]; // particle tags; };. The TTree contains a branch event, which in turn contains the branches fParticles and fEventSize. It simply reflects the layout of class EventData. Each TTree entry has one object of type class EventData, which in turn has a collection of particles. Each tree entry can have a different number of particles. There are 200 TTree entries containing a total of 22994 particles.; If you are curious how we generated the TTree: the script is in our git repository.; . ‹ Introductory Tutorials; up; Accessing a TTree With a TBrowser ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meet-ttree.html:4744,Guid,Guides,4744,d/meet-ttree.html,https://root.cern,https://root.cern/d/meet-ttree.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"es of the; neighboring triangles can be smoothed (shaded). If desired the display of the; shadow can be painted as well. The function does not apply for; kModeGroupSimple display modes group.; Possible values for shading are:. kNotShaded; kShaded. Possible values for shadow are:. kShadowsNotPainted; kShadowsPainted. Default values:. shading = kShaded; shadow = kShadowsNotPainted. Light modes group, display mode = surface, 64 x 64 channels, not shaded. Light modes group, display mode = surface, 64 x 64 channels, shaded, with; shadow.; Function:; TSpectrum2Painter::SetBezier(Int_t bezier); For kModeGroupSimple display modes group and for kDisplayModeGrid,; kDisplayModeLinesX >and kDisplayModeLinesY display modes one; can smooth data using Bezier smoothing algorithm. The function does not apply; for other display modes groups and display modes. Possible values are:. kNoBezierInterpol; kBezierInterpol. Default value is:. bezier = kNoBezierInterpol. Simple modes group, display mode = linesX, 64 x 64 channels with Bezier; smoothing.; Function:; TSpectrum2Painter::SetContourWidth(Int_t width); This function applies only for kDisplayModeContours display mode.; One can change the width between horizontal slices and thus their density.; Default value: width=50. Simple modes group, display mode = contours, 64 x 64 channels. Width between; slices was set to 30.; Function:; TSpectrum2Painter::SetLightHeightWeight(Double_t weight); For kModeGroupLightHeight display modes group one can change the; weight between both shading algorithm. The function does not apply for other; display modes groups. Default value is: weight=0.5. Light - height modes group, display mode = surface, 64 x 64 channels.; The weight between both shading algorithms is set to 0.7.; Function:; TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); In addition to the surface drawn using any above given algorithm one can display; channel marks. One can control the color as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:25189,Simpl,Simple,25189,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"es the copy to the histogram. When the histogram is deleted, the copy is deleted also.; When a pad is deleted or cleared, all objects in the pad with the kCanDelete bit set are deleted automatically. Currently the objects created by the DrawCopy methods, have the kCanDelete bit set and are therefore owned by the pad.; 8.4 Ownership by the User; The user owns all objects not described in one of the above cases. TObject has two bits, kCanDelete and kMustCleanup, that influence how an object is managed (in TObject::fBits). These are in an enumeration in TObject.h. To set these bits do:; MyObject->SetBit(kCanDelete); MyObject->SetBit(kMustCleanup); The bits can be reset and tested with the TObject::ResetBit and TObject::TestBit methods.; 8.4.1 The kCanDelete Bit; The gROOT collections (see above) own their members and will delete them regardless of the kCanDelete bit. In all other collections, when the collection Clear method is called (i.e. TList::Clear()), members with the kCanDelete bit set, are deleted and removed from the collection. If the kCanDelete bit is not set, the object is only removed from the collection but not deleted.; If a collection Delete (TList::Delete()) method is called, all objects in the collection are deleted without considering the kCanDelete bit. It is important to realize that deleting the collection (i.e. delete MyCollection), DOES NOT delete the members of the collection.; If the user specified MyCollection->SetOwner() the collection owns the objects and delete MyCollection will delete all its members. Otherwise, you need to:; // delete all member objects in the collection; MyCollection->Delete();. // and delete the collection object; delete MyCollection;; Note that kCanDelete is automatically set by the DrawCopy method and the user can set it for any object. For example, the user must manage all graphics primitives. If you want TCanvas to delete the primitive you created you have to set the kCanDelete bit.; The kCanDelete bit setting is di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:287061,Clear,Clear,287061,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Clear'],['Clear']
Usability,"es the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 46 of file RooFitResult.h. ◆ conditionalCovarianceMatrix(). TMatrixDSym RooFitResult::conditionalCovarianceMatrix ; (; const RooArgList & ; params); const. Return a reduced covariance matrix, which is calculated as. . \[; V_\mathrm{red} = \bar{V_{22}} = V_{11} - V_{12} \cdot V_{22}^{-1} \cdot V_{21},; \]. where \( V_{11},V_{12},V_{21},V_{22} \) represent a block decomposition of the covariance matrix into observables that are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and \( \bar{V_{22}} \) is the Shur complement of \( V_{22} \), calculated as shown above.; (Note that \( V_\mathrm{red} \) is not a simple sub-matrix of \( V \)) ; Definition at line 1170 of file RooFitResult.cxx. ◆ constPars(). const RooArgList & RooFitResult::constPars ; (; ); const. inline . Return list of constant parameters. ; Definition at line 103 of file RooFitResult.h. ◆ correlation() [1/5]. const RooArgList * RooFitResult::correlation ; (; const char * ; parname); const. Return the set of correlation coefficients of parameter 'par' with all other floating parameters. ; Definition at line 411 of file RooFitResult.cxx. ◆ correlation() [2/5]. double RooFitResult::correlation ; (; const char * ; parname1, . const char * ; parname2 . ); const. Return the correlation between parameters 'par1' and 'par2'. ; Definition at line 390 of file RooFitResult.cxx. ◆ correlation() [3/5]. const RooArgList * RooFitResult::correlation ; (; const RooAbsArg & ; par); const. inline . Return pointer to list of correlations of all parameters with par. ; Definition at line 122 of file RooFitResult.h. ◆ correlation() [4/5]. double RooFitResult::cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:24026,simpl,simple,24026,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['simpl'],['simple']
Usability,es(). std::vector< TString > * TMVA::TActivationChooser::GetAllActivationNames ; (; ); const. returns the names of all know activation functions ; Definition at line 107 of file TActivationChooser.cxx. ◆ IsA(). virtual TClass * TMVA::TActivationChooser::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 72 of file TActivationChooser.h. ◆ Log(). MsgLogger & TMVA::TActivationChooser::Log ; (; ); const. inlineprivate . Definition at line 70 of file TActivationChooser.h. ◆ Streamer(). virtual void TMVA::TActivationChooser::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::TActivationChooser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file TActivationChooser.h. Member Data Documentation. ◆ fLINEAR. TString TMVA::TActivationChooser::fLINEAR. private . activation function name ; Definition at line 63 of file TActivationChooser.h. ◆ fLogger. MsgLogger* TMVA::TActivationChooser::fLogger. mutableprivate . ! message logger ; Definition at line 69 of file TActivationChooser.h. ◆ fRADIAL. TString TMVA::TActivationChooser::fRADIAL. private . activation function name ; Definition at line 67 of file TActivationChooser.h. ◆ fRELU. TString TMVA::TActivationChooser::fRELU. private . activation function name ; Definition at line 66 of file TActivationChooser.h. ◆ fSIGMOID. TString TMVA::TActivationChooser::fSIGMOID. private . activation function name ; Definition at line 64 of file TActivationChooser.h. ◆ fTANH. TString TMVA::TActivationChooser::fTANH. private . activation function name ; Definition at line 65 of file TActivationChooser.h. Libraries for TMVA::TActivationChooser:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TActivationChooser.h; tmva/tmva/src/TActivationChooser.cxx. TMVATActivationChooser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html:5585,Guid,Guide,5585,doc/master/classTMVA_1_1TActivationChooser.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html,1,['Guid'],['Guide']
Usability,"es(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGaussModel.html:3384,clear,clearEvalError,3384,root/html534/RooGaussModel.html,https://root.cern,https://root.cern/root/html534/RooGaussModel.html,9,['clear'],['clearEvalError']
Usability,"es, given the gradients and the learning rate. ; Definition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 of file GeneralLayer.h. ◆ WriteTensorToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteTensorToXML ; (; void * ; node, . const char * ; name, . const std::vector< Matrix_t > & ; tensor . ). helper functions for XML ; Definition at line 496 of file GeneralLayer.h. Member Data Documentation. ◆ fActivationGradients. template<typename Architecture_t > . Tensor_t TMVA::DNN::VGeneralLayer< Architecture_t >::fActivationGradients. protected . Gradients w.r.t. the activations of this layer. ; Definition at line 78 of file GeneralLayer.h. ◆ fBatchSize. template<typename Architecture_t > . size_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26625,learn,learningRate,26625,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,1,['learn'],['learningRate']
Usability,"es. ; Reimplemented from TBox.; Definition at line 93 of file TDiamond.cxx. ◆ ExecuteEvent(). void TDiamond::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a Diamond object is clicked.; If the mouse is clicked inside the diamond, the diamond is moved.; If the mouse is clicked on the 4 tops (pL,pR,pTop,pBot), the diamond is rescaled. ; Reimplemented from TBox.; Definition at line 109 of file TDiamond.cxx. ◆ IsA(). TClass * TDiamond::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBox.; Definition at line 31 of file TDiamond.h. ◆ IsInside(). Int_t TDiamond::IsInside ; (; Double_t ; x, . Double_t ; y . ); const. overridevirtual . Return 1 if the point (x,y) is inside the polygon defined by the diamond 0 otherwise. ; Reimplemented from TBox.; Definition at line 381 of file TDiamond.cxx. ◆ Paint(). void TDiamond::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this diamond with its current attributes. ; Reimplemented from TBox.; Definition at line 401 of file TDiamond.cxx. ◆ SavePrimitive(). void TDiamond::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TBox.; Definition at line 461 of file TDiamond.cxx. ◆ Streamer(). void TDiamond::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TBox. ; Reimplemented from TBox. ◆ StreamerNVirtual(). void TDiamond::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 31 of file TDiamond.h. Libraries for TDiamond:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TDiamond.h; graf2d/graf/src/TDiamond.cxx. TDiamond. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:29486,Guid,Guide,29486,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,1,['Guid'],['Guide']
Usability,"es. ; See RField<RNTupleCardinality<SizeT>> for details. ; Definition at line 32 of file RNTupleUtil.hxx. Public Types; using ValueType = SizeT;  . Public Member Functions;  RNTupleCardinality ();  ; constexpr RNTupleCardinality (ValueType value);  ;  operator ValueType () const;  ; RNTupleCardinality & operator= (const ValueType value);  . Public Attributes; ValueType fValue;  . #include <ROOT/RNTupleUtil.hxx>; Member Typedef Documentation. ◆ ValueType. template<typename SizeT > . using ROOT::RNTupleCardinality< SizeT >::ValueType = SizeT. Definition at line 36 of file RNTupleUtil.hxx. Constructor & Destructor Documentation. ◆ RNTupleCardinality() [1/2]. template<typename SizeT > . ROOT::RNTupleCardinality< SizeT >::RNTupleCardinality ; (; ). inline . Definition at line 38 of file RNTupleUtil.hxx. ◆ RNTupleCardinality() [2/2]. template<typename SizeT > . constexpr ROOT::RNTupleCardinality< SizeT >::RNTupleCardinality ; (; ValueType ; value). inlineexplicitconstexpr . Definition at line 39 of file RNTupleUtil.hxx. Member Function Documentation. ◆ operator ValueType(). template<typename SizeT > . ROOT::RNTupleCardinality< SizeT >::operator ValueType ; (; ); const. inline . Definition at line 45 of file RNTupleUtil.hxx. ◆ operator=(). template<typename SizeT > . RNTupleCardinality & ROOT::RNTupleCardinality< SizeT >::operator= ; (; const ValueType ; value). inline . Definition at line 40 of file RNTupleUtil.hxx. Member Data Documentation. ◆ fValue. template<typename SizeT > . ValueType ROOT::RNTupleCardinality< SizeT >::fValue. Definition at line 47 of file RNTupleUtil.hxx. Collaboration diagram for ROOT::RNTupleCardinality< SizeT >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx. ROOTRNTupleCardinality. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1RNTupleCardinality.html:2375,Guid,Guide,2375,doc/master/structROOT_1_1RNTupleCardinality.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1RNTupleCardinality.html,1,['Guid'],['Guide']
Usability,"es. ; Using XGBoost, we illustrate how you can convert an externally trained model in a format serializable and readable with the fast tree inference engine offered by TMVA.; ; # XGBoost has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; from xgboost import XGBClassifier; ; import ROOT; import numpy as np; ; from tmva100_DataPreparation import variables; ; ; def load_data(signal_filename, background_filename):; # Read data from ROOT files; data_sig = ROOT.RDataFrame(""Events"", signal_filename).AsNumpy(); data_bkg = ROOT.RDataFrame(""Events"", background_filename).AsNumpy(); ; # Convert inputs to format readable by machine learning tools; x_sig = np.vstack([data_sig[var] for var in variables]).T; x_bkg = np.vstack([data_bkg[var] for var in variables]).T; x = np.vstack([x_sig, x_bkg]); ; # Create labels; num_sig = x_sig.shape[0]; num_bkg = x_bkg.shape[0]; y = np.hstack([np.ones(num_sig), np.zeros(num_bkg)]); ; # Compute weights balancing both classes; num_all = num_sig + num_bkg; w = np.hstack([np.ones(num_sig) * num_all / num_sig, np.ones(num_bkg) * num_all / num_bkg]); ; return x, y, w; ; if __name__ == ""__main__"":; # Load data; x, y, w = load_data(""train_signal.root"", ""train_background.root""); ; # Fit xgboost model; bdt = XGBClassifier(max_depth=3, n_estimators=500); bdt.fit(x, y, sample_weight=w); ; # Save model in TMVA format; print(""Training done on "",x.shape[0],""events. Saving model in tmva101.root""); ROOT.TMVA.Experimental.SaveXGBoost(bdt, ""myBDT"", ""tmva101.root"", num_inputs=x.shape[1]); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateAugust 2019 ; AuthorStefan Wunsch ; Definition in file tmva101_Training.py. tutorialstmvatmva101_Training.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva101__Training_8py.html:2284,Guid,Guide,2284,doc/master/tmva101__Training_8py.html,https://root.cern,https://root.cern/doc/master/tmva101__Training_8py.html,1,['Guid'],['Guide']
Usability,"es. Bool_t operator==(Int_t index) const; Equality operator with a integer (compares with state index number). Bool_t operator==(const char* label) const; Equality operator with a string (compares with state label string). Bool_t operator==(const RooAbsArg& other); Equality operator with another RooAbsArg. Only functional; is also a RooAbsCategory, will return true if index is the same. Bool_t isValidIndex(Int_t index) const; Check if state with given index is defined. Bool_t isValidLabel(const char* label) const; Check if state with given name is defined. const RooCatType* defineType(const char* label); Define a new state with given name. The lowest available; integer number is assigned as index value. const RooCatType* defineTypeUnchecked(const char* label, Int_t index); Internal version of defineType that does not check if type; already exists. const RooCatType* defineType(const char* label, Int_t index); Define new state with given name and index number. void clearTypes(); Delete all currently defined states. const RooCatType* lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; Find our type that matches the specified type, or return 0 for no match. const RooCatType* lookupType(Int_t index, Bool_t printError = kFALSE) const; Find our type corresponding to the specified index, or return 0 for no match. const RooCatType* lookupType(const char* label, Bool_t printError = kFALSE) const; Find our type corresponding to the specified label, or return 0 for no match. Bool_t isValid() const; Check if current value is a valid state. Bool_t isValid(const RooCatType& value) const; Check if given state is defined for this object. Roo1DTable* createTable(const char* label) const; Create a table matching the shape of this category. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from stream (dummy for now). void writeToStream(ostream& os, Bool_t compact) const; Write object contents to ostream. void printValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCategory.html:21682,clear,clearTypes,21682,root/html528/RooAbsCategory.html,https://root.cern,https://root.cern/root/html528/RooAbsCategory.html,3,['clear'],['clearTypes']
Usability,"es. Function documentation; RooMappedCategory(const char* name, const char* title, RooAbsCategory& inputCat, const char* defCatName = ""NotMapped"", Int_t defCatIdx = NoCatIdx); Constructor with input category and name of default output state, which is assigned; to all input category states that do not follow any mapping rule. RooMappedCategory(const RooMappedCategory& other, const char* name = 0). ~RooMappedCategory(); Destructor. Bool_t map(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); Add mapping rule: any input category state label matching the 'inKeyRegExp'; wildcard expression will be mapped to an output state with name 'outKey'. Rules are evaluated in the order they were added. In case an input state; matches more than one rule, the first rules output state will be assigned. RooCatType evaluate() const; Calculate the current value of the object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this mapped category to the specified stream. In addition to the info; from RooAbsCategory::printStream() we add:. Standard : input category; Shape : default value; Verbose : list of mapping rules. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; product operator construction. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. inline RooMappedCategory(); { }. TObject* clone(const char* newname) const; { return new RooMappedCategory(*this,newname); }. Entry& operator=(const RooMappedCategory& ). » Last changed: Tue Jun 30 14:33:57 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMappedCategory.html:25576,intuit,intuitively,25576,root/html602/RooMappedCategory.html,https://root.cern,https://root.cern/root/html602/RooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"es. These; exceptions occur if the outline shape is not a convex polygon.; Both the X3D and OpenGL renderers expect polygons to be convex.; The OpenGL spec specifies that points defining a polygon using the; GL_POLYGON primitive may be rendered as the convex hull of that set. Solid rendering under X3D can also give unexpected artifacts if; the combination of x-y-z offsets and scales for the segments are; chosen in such a manner that they represent a concave shape when; sliced along a plane parallel to the z axis. Choosing sets of point that represent a malformed polygon is; not supported, but testing for such a condition is not implemented; and thus it is left to the user to avoid this mistake. . Function Members (Methods); public:. virtual~TXTRU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& xtru) const; virtual voidDefineSection(Int_t secNum, Float_t z, Float_t scale = 1., Float_t x0 = 0., Float_t y0 = 0.); virtual voidDefineVertex(Int_t pointNum, Float_t x, Float_t y); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXTRU.html:2384,Clear,Clear,2384,root/html602/TXTRU.html,https://root.cern,https://root.cern/root/html602/TXTRU.html,2,['Clear'],['Clear']
Usability,"es; # passing the cuts, if any.; b1b2_cut = d.Filter(cutb1b2); minVal = b1b2_cut.Min('b1'); maxVal = b1b2_cut.Max('b1'); meanVal = b1b2_cut.Mean('b1'); nonDefmeanVal = b1b2_cut.Mean(""b2""); print('The mean is always included between the min and the max: {0} <= {1} <= {2}'.format(minVal.GetValue(), meanVal.GetValue(), maxVal.GetValue())); ; # `Histo1D` action; # The `Histo1D` action allows to fill an histogram. It returns a TH1F filled; # with values of the column that passed the filters. For the most common; # types, the type of the values stored in the column is automatically; # guessed.; hist = d.Filter(cutb1).Histo1D('b1'); print('Filled h {0} times, mean: {1}'.format(hist.GetEntries(), hist.GetMean())); ; # Express your chain of operations with clarity!; # We are discussing an example here but it is not hard to imagine much more; # complex pipelines of actions acting on data. Those might require code; # which is well organised, for example allowing to conditionally add filters; # or again to clearly separate filters and actions without the need of; # writing the entire pipeline on one line. This can be easily achieved.; # We'll show this re-working the `Count` example:; cutb1_result = d.Filter(cutb1);; cutb1b2_result = d.Filter(cutb1b2);; cutb1_cutb1b2_result = cutb1_result.Filter(cutb1b2); ; # Now we want to count:; evts_cutb1_result = cutb1_result.Count(); evts_cutb1b2_result = cutb1b2_result.Count(); evts_cutb1_cutb1b2_result = cutb1_cutb1b2_result.Count(); ; print('Events passing cutb1: {}'.format(evts_cutb1_result.GetValue())); print('Events passing cutb1b2: {}'.format(evts_cutb1b2_result.GetValue())); print('Events passing both: {}'.format(evts_cutb1_cutb1b2_result.GetValue())); ; # Calculating quantities starting from existing columns; # Often, operations need to be carried out on quantities calculated starting; # from the ones present in the columns. We'll create in this example a third; # column, the values of which are the sum of the *b1* and *b2* ones, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8py.html:3401,clear,clearly,3401,doc/master/df001__introduction_8py.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8py.html,1,['clear'],['clearly']
Usability,"es; Int_tTBranch::fOffsetOffset of this branch; TBranch*TBranch::fParent! Pointer to parent branch.; Int_tTBranch::fReadBasket! Current basket number when reading; Long64_tTBranch::fReadEntry! Current entry number when reading; TRefTable*fRefTablepointer to the TRefTable; Bool_tTBranch::fSkipZip!After being read, the buffer will not be unziped.; Int_tTBranch::fSplitLevelBranch split level; TStringTNamed::fTitleobject title; Long64_tTBranch::fTotBytesTotal number of bytes in all leaves before compression; TTree*TBranch::fTree! Pointer to Tree header; Int_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. void FillLeaves(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeaves(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. Int_t SetParent(const TObject* obj, const Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetReadEntry(Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchRef.html:12829,Clear,Clear,12829,root/html526/TBranchRef.html,https://root.cern,https://root.cern/root/html526/TBranchRef.html,2,['Clear'],['Clear']
Usability,"es; TObjArray*fShapes-> list of shapes; Int_tfSizePNEIdsize of the array of unique ID's for PN entries; Bool_tfStreamVoxelsflag to allow voxelization I/O; Bool_tfTimeCuttime cut for tracks; Double_tfTmax! upper time limit for tracks drawing; Double_tfTmin! lower time limit for tracks drawing; TGeoNode*fTopNode! top physical node; TGeoVolume*fTopVolume! top level volume in geometry; TObjArray*fTracks-> list of tracks attached to geometry; TObjArray*fUniqueVolumes-> list of unique volumes; Int_t*fValuePNEId[fSizePNEId] array of pointers to PN entries with ID's; Double_tfVisDensitytransparency threshold by density; Int_tfVisLevelmaximum visualization depth; Int_tfVisOptionglobal visualization option; TObjArray*fVolumes-> list of volumes; static Bool_tfgLockNavigators! Lock existing navigators; static Int_tfgNumThreads! Number of registered threads; static map<long,int>fgThreadId! Thread id's map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. TGeoManager(); Default constructor. TGeoManager(const char* name, const char* title); Constructor. void Init(); Initialize manager class. TGeoManager(const TGeoManager& ); copy constructor. TGeoManager& operator=(const TGeoManager& ); assignment operator. ~TGeoManager(); Destructor. Int_t AddMaterial(const TGeoMaterial* material); Add a material to the list. Returns index of the material in list. Int_t AddOverlap(const TNamed* ovlp); Add an illegal overlap/extrusion to the list. Int_t AddTransformation(const TGeoMatrix* matrix); Add a matrix to the list. Returns index of the matrix in list. Int_t AddShape(const TGeoShape* shape); Add a shape to the list. Returns index of the shape in list. Int_t AddTrack(Int_t id, Int_t pdgcode, TObject* particle = 0); Add a track to the list of tracks. Use this for primaries only. For secondaries,; add them to the parent track. The method create objects that are registered; to the analysis manager but have to be cleaned-up ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:36292,Clear,ClearThreadData,36292,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,1,['Clear'],['ClearThreadData']
Usability,"esArray * ; list, . Int_t ; n . ). overridevirtual . Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ; Reimplemented from TLeaf.; Definition at line 152 of file TLeafF16.cxx. ◆ ReadValue(). void TLeafF16::ReadValue ; (; std::istream & ; s, . Char_t ; delim = ' ' . ). overridevirtual . Read a float from std::istream s and store it into the branch buffer. ; Reimplemented from TLeaf.; Definition at line 174 of file TLeafF16.cxx. ◆ SetAddress(). void TLeafF16::SetAddress ; (; void * ; add = nullptr). overridevirtual . Set leaf buffer data address. ; Reimplemented from TLeaf.; Definition at line 184 of file TLeafF16.cxx. ◆ Streamer(). void TLeafF16::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TLeafF16. ; Reimplemented from TLeaf.; Definition at line 216 of file TLeafF16.cxx. ◆ StreamerNVirtual(). void TLeafF16::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file TLeafF16.h. Member Data Documentation. ◆ fElement. TStreamerElement* TLeafF16::fElement. protected . ! StreamerElement used for TBuffer read / write ; Definition at line 34 of file TLeafF16.h. ◆ fMaximum. Float16_t TLeafF16::fMaximum. protected . Maximum value if leaf range is specified. ; Definition at line 31 of file TLeafF16.h. ◆ fMinimum. Float16_t TLeafF16::fMinimum. protected . Minimum value if leaf range is specified. ; Definition at line 30 of file TLeafF16.h. ◆ fPointer. Float16_t** TLeafF16::fPointer. protected . ! Address of pointer to data buffer! ; Definition at line 33 of file TLeafF16.h. ◆ fValue. Float16_t* TLeafF16::fValue. protected . ! Pointer to data buffer ; Definition at line 32 of file TLeafF16.h. Libraries for TLeafF16:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafF16.h; tree/tree/src/TLeafF16.cxx. TLeafF16. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafF16.html:21783,Guid,Guide,21783,doc/master/classTLeafF16.html,https://root.cern,https://root.cern/doc/master/classTLeafF16.html,1,['Guid'],['Guide']
Usability,esMode ; x). inline . Definition at line 60 of file TEveProjectionAxes.h. ◆ SetDrawCenter(). void TEveProjectionAxes::SetDrawCenter ; (; Bool_t ; x). inline . Definition at line 63 of file TEveProjectionAxes.h. ◆ SetDrawOrigin(). void TEveProjectionAxes::SetDrawOrigin ; (; Bool_t ; x). inline . Definition at line 65 of file TEveProjectionAxes.h. ◆ SetLabMode(). void TEveProjectionAxes::SetLabMode ; (; ELabMode ; x). inline . Definition at line 58 of file TEveProjectionAxes.h. ◆ Streamer(). void TEveProjectionAxes::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement. ◆ StreamerNVirtual(). void TEveProjectionAxes::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TEveProjectionAxes.h. Friends And Related Symbol Documentation. ◆ TEveProjectionAxesGL. friend class TEveProjectionAxesGL. friend . Definition at line 30 of file TEveProjectionAxes.h. Member Data Documentation. ◆ fAxesMode. EAxesMode TEveProjectionAxes::fAxesMode. protected . Definition at line 46 of file TEveProjectionAxes.h. ◆ fDrawCenter. Bool_t TEveProjectionAxes::fDrawCenter. protected . Definition at line 48 of file TEveProjectionAxes.h. ◆ fDrawOrigin. Bool_t TEveProjectionAxes::fDrawOrigin. protected . Definition at line 49 of file TEveProjectionAxes.h. ◆ fLabMode. ELabMode TEveProjectionAxes::fLabMode. protected . Definition at line 45 of file TEveProjectionAxes.h. ◆ fManager. TEveProjectionManager* TEveProjectionAxes::fManager. protected . Definition at line 41 of file TEveProjectionAxes.h. ◆ fUseColorSet. Bool_t TEveProjectionAxes::fUseColorSet. protected . Definition at line 43 of file TEveProjectionAxes.h. Libraries for TEveProjectionAxes:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveProjectionAxes.h; graf3d/eve/src/TEveProjectionAxes.cxx. TEveProjectionAxes. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionAxes.html:41460,Guid,Guide,41460,doc/master/classTEveProjectionAxes.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html,1,['Guid'],['Guide']
Usability,"escribing current object ; Reimplemented from TSelector.; Definition at line 60 of file TSelectorEntries.h. ◆ Notify(). bool TSelectorEntries::Notify ; (; ). overridevirtual . This function is called at the first entry of a new tree in a chain. ; Reimplemented from TSelector.; Definition at line 136 of file TSelectorEntries.cxx. ◆ Process(). bool TSelectorEntries::Process ; (; Long64_t ; entry). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used. ; Reimplemented from TSelector.; Definition at line 161 of file TSelectorEntries.cxx. ◆ SetObject(). void TSelectorEntries::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 54 of file TSelectorEntries.h. ◆ SetOption(). void TSelectorEntries::SetOption ; (; const char * ; option). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 53 of file TSelectorEntries.h. ◆ SetSelection(). void TSelectorEntries::SetSelection ; (; const char * ; selection). virtual . Set the selection expression. ; Definition at line 198 of file TSelectorEntries.cxx. ◆ SlaveBegin(). void TSelectorEntries::SlaveBegin ; (; TTree * ; tree). overridevirtual . The SlaveBegin() function is called after the Begin() function. ; When ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorEntries.html:18127,simpl,simple,18127,doc/master/classTSelectorEntries.html,https://root.cern,https://root.cern/doc/master/classTSelectorEntries.html,1,['simpl'],['simple']
Usability,escribing this class . ◆ Class_Name(). static const char * TEveCompositeFrameInPack::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveCompositeFrameInPack::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 163 of file TEveWindow.h. ◆ DeclFileName(). static const char * TEveCompositeFrameInPack::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 163 of file TEveWindow.h. ◆ Destroy(). void TEveCompositeFrameInPack::Destroy ; (; ). overridevirtual . Virtual function called from eve side when the frame should be destroyed. ; This means we expect that fEveWindow is null.; Remove the frame from pack and delete it. ; Implements TEveCompositeFrame.; Definition at line 528 of file TEveWindow.cxx. ◆ IsA(). TClass * TEveCompositeFrameInPack::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveCompositeFrame.; Definition at line 163 of file TEveWindow.h. ◆ operator=(). TEveCompositeFrameInPack & TEveCompositeFrameInPack::operator= ; (; const TEveCompositeFrameInPack & ; ). private . ◆ Streamer(). void TEveCompositeFrameInPack::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TEveCompositeFrame. ◆ StreamerNVirtual(). void TEveCompositeFrameInPack::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 163 of file TEveWindow.h. Member Data Documentation. ◆ fPack. TGPack* TEveCompositeFrameInPack::fPack. protected . Definition at line 154 of file TEveWindow.h. Libraries for TEveCompositeFrameInPack:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveCompositeFrameInPack. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrameInPack.html:36260,Guid,Guide,36260,doc/master/classTEveCompositeFrameInPack.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrameInPack.html,1,['Guid'],['Guide']
Usability,"escribing this class . ◆ Class_Name(). static const char * TGeoManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 605 of file TGeoManager.h. ◆ CleanGarbage(). void TGeoManager::CleanGarbage ; (; ). Clean temporary volumes and shapes from garbage collection. ; Definition at line 1627 of file TGeoManager.cxx. ◆ ClearAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attributes for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ ClearTracks(). void TGeoManager::ClearTracks ; (; ). inline . Definition at line 415 of file TGeoManager.h. ◆ CloseGeometry(). void TGeoManager::CloseGeometry ; (; Option_t * ; option = ""d""). Closing geometry impli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:78095,Clear,ClearPhysicalNodes,78095,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearPhysicalNodes']
Usability,"escription; Write and read STL vectors in a tree. . ; #include <vector>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < 25000; i++) {;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hvector_8C.html:1185,clear,clear,1185,doc/master/hvector_8C.html,https://root.cern,https://root.cern/doc/master/hvector_8C.html,1,['clear'],['clear']
Usability,"escription; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjBuildConfig. class RooSimWSTool::ObjBuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__ObjBuildConfig.html:1102,simpl,simple,1102,root/html526/RooSimWSTool__ObjBuildConfig.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__ObjBuildConfig.html,4,['simpl'],['simple']
Usability,"esizeOpaque@ kResizeOpaqueDefinition TCanvas.h:95; TCanvas::kShowToolTips@ kShowToolTipsDefinition TCanvas.h:97; TCanvas::kShowToolBar@ kShowToolBarDefinition TCanvas.h:92; TCanvas::kMoveOpaque@ kMoveOpaqueDefinition TCanvas.h:94; TCanvas::kIsGrayscale@ kIsGrayscaleDefinition TCanvas.h:96; TCanvas::kShowEventStatus@ kShowEventStatusDefinition TCanvas.h:89; TCanvas::kAutoExec@ kAutoExecDefinition TCanvas.h:90; TCanvas::kMenuBar@ kMenuBarDefinition TCanvas.h:91; TCanvas::kShowEditor@ kShowEditorDefinition TCanvas.h:93; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TCanvas::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TCanvas.cxx:1110; TCanvas::RunAutoExecvoid RunAutoExec()Execute the list of TExecs in the current pad.Definition TCanvas.cxx:1767; TCanvas::GetContextMenuTContextMenu * GetContextMenu() constDefinition TCanvas.h:133; TCanvas::Clearedvirtual void Cleared(TVirtualPad *pad)Emit pad Cleared signal.Definition TCanvas.cxx:770; TCanvas::GetYsizeRealSize_t GetYsizeReal() constDefinition TCanvas.h:156; TCanvas::GetWwUInt_t GetWw() const overrideDefinition TCanvas.h:163; TCanvas::OpaqueMovingBool_t OpaqueMoving() const overrideDefinition TCanvas.h:180; TCanvas::fCanvasImpTCanvasImp * fCanvasImp! Window system specific canvas implementationDefinition TCanvas.h:57; TCanvas::GetWhUInt_t GetWh() const overrideDefinition TCanvas.h:164; TCanvas::Highlightedvirtual void Highlighted(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)Emit Highlighted() signal.Definition TCanvas.cxx:1612; TCanvas::Flushvoid Flush()Flush canvas buffers.Definition TCanvas.cxx:1145; TCanvas::fYsizeUserSize_t fYsizeUserUser specified size of canvas along Y in CM.Definition TCanvas.h:34; TCanvas::fDoubleBufferInt_t fDoubleBufferDouble buffer flag (0=off, 1=on)Definition TCanvas.h:38; TCanvas::GetSelectedOptOption_t * GetSelectedOpt() constDefinition TCanvas.h:145; TCanvas::For",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:27633,Clear,Clearedvirtual,27633,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,3,['Clear'],"['Cleared', 'Clearedvirtual']"
Usability,"esn't load the histogram from the file; right away. Instead, once all such histograms have been supplied,; one should run this method to open all ROOT files and to copy and; save all necessary histograms. Measurement(); Measurement( const Measurement& other ); // Copy. Measurement(const char* Name, const char* Title = """"). void SetOutputFilePrefix(const string& prefix); set output prefix. { fOutputFilePrefix = prefix; }. std::string GetOutputFilePrefix(); retrieve prefix for output files. { return fOutputFilePrefix; }. void SetPOI(const string& POI); insert PoI at beginning of vector of PoIs. { fPOI.insert( fPOI.begin(), POI ); }. void AddPOI(const string& POI); append parameter to vector of PoIs. { fPOI.push_back(POI); }. std::string GetPOI(unsigned int i = 0); get name of PoI at given index. { return fPOI.at(i); }. std::vector<std::string>& GetPOIList(); get vector of PoI names. { return fPOI; }. void ClearConstantParams(); empty vector of constant parameters. { fConstantParams.clear(); }. std::vector< std::string >& GetConstantParams(); get vector of all constant parameters. { return fConstantParams; }. std::map<std::string, double>& GetParamValues(); get map: parameter name <--> parameter value. { return fParamValues; }. void ClearParamValues(); clear map of parameter values. { fParamValues.clear(); }. void AddFunctionObject(const RooStats::HistFactory::PreprocessFunction function); add a preprocess function object. { fFunctionObjects.push_back( function ); }. void SetFunctionObjects(vector<RooStats::HistFactory::PreprocessFunction> objects); get vector of defined function objects. { fFunctionObjects = objects; }. std::vector< RooStats::HistFactory::PreprocessFunction >& GetFunctionObjects(); { return fFunctionObjects; }. std::vector< RooStats::HistFactory::Asimov >& GetAsimovDatasets(); get vector of defined Asimov Datasets. { return fAsimovDatasets; }. void AddAsimovDataset(RooStats::HistFactory::Asimov dataset); add an Asimov Dataset. { fAsimovDatasets.push_ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html:12565,clear,clear,12565,root/html602/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html,2,['clear'],['clear']
Usability,"esolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:3476,clear,clearEvalErrorLog,3476,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['clear'],['clearEvalErrorLog']
Usability,"espaces; Using comments to document the code; Source file layout. Header file layout; Implementation file layout. Preferred Coding Style. Indentation; Placing Braces and Spaces. ClangFormat; Astyle; Where to go from here. Naming conventions; For naming conventions we follow the Taligent rules. They have written a very large body of C++ and their rules seem well thought out. No need to invent something new. The only addition/change we made is to append an _t to typedefs and simple structs, e.g.:; typedef int Int_t ; struct Simple_t { ..... } ; ; Addherence to the rules is mandatory. After a while one really gets used to the fact that all class fields start with an f followed by a capitalized word, fEnergy, or that TStreamerInfo is a class. If the convention is sporadically violated debugging becomes a nightmare. The usage of a standard begin letter or token for the different types also makes it easy to parse and search the code using simple tools.; Class definition conventions; Also here the Taligent guide is quite reasonable. Of course, no class data member should ever be public. Make the data fields always private. Or protected, if you want to grant an inherited class direct access.; Inline; Add trivial get or setters directly in the class definition. This improves reading time since one does not have to look for it somewhere else. Add more complex inlines (longer than one line) at the bottom of the .h file. Creating separate .icc files increases the build time, the complexity of the build system and, more importantly, increases the number of files one possibly has to scan to find a piece of code.; Declaration Order; In the class definition we first declare all private data members, followed by the private static members, the private methods and the private static methods. Then the protected members and methods and finally the public methods (no public data members). We put private members first since that is the language default and it gives the developer a quick v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:3021,guid,guide,3021,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['guid'],['guide']
Usability,"ess (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  Get query progress information. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  Get query progress information. ;  ; void PutLog (TQueryResult *qr);  Display log of query pq into the log window frame. ;  ; void QueryResultReady (const char *ref);  Notify availability of a query result. ;  ; Int_t Remove (const char *queryref, Bool_t all=kFALSE);  Send remove request for the query specified by ref. ;  ; Int_t Remove (Int_t query, Bool_t all=kFALSE);  Send remove request for the qry-th query in fQueries. ;  ; void RemoveChain (TChain *chain);  Remove chain from data set. ;  ; Int_t RemoveDynamicPath (const char *libpath, Bool_t onClient=kFALSE);  Remove 'libpath' from the lib path search. ;  ; void RemoveFeedback (const char *name);  Remove object from feedback list. ;  ; Int_t RemoveIncludePath (const char *incpath, Bool_t onClient=kFALSE);  Remove 'incpath' from the inc path search. ;  ; void ResetProgressDialog (const char *sel, Int_t sz, Long64_t fst, Long64_t ent);  Reset progress dialog. ;  ; void ResetProgressDialogStatus ();  ; Int_t Retrieve (const char *queryref, const char *path=0);  Send retrieve request for the query specified by ref. ;  ; Int_t Retrieve (Int_t query, const char *path=0);  Send retrieve request for the qry-th query in fQueries. ;  ; Int_t SavePerfTree (const char *pf=0, const char *qref=0);  Save performance information from TPerfStats to file 'pf'. ;  ; void SendDataSetStatus (const char *msg, UInt_t n, UInt_t tot, Bool_t st);  Send or notify data set status. ;  ; Bool_t SendingLogToWindow () const;  ; void SendLogToWindow (Bool_t mode);  ; void SetActive (Bool_t=kTRUE);  ; virtual void SetAlias (const char *alias="""");  Set an alias for this session. ;  ; void SetDataPoolUrl (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:15724,feedback,feedback,15724,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['feedback'],['feedback']
Usability,"ess file creation mode mask. ;  ; virtual const char * UnixPathName (const char *unixpathname);  Convert from a local pathname to a Unix pathname. ;  ; virtual int Unlink (const char *name);  Unlink, i.e. ;  ; virtual void Unload (const char *module);  Unload a shared library. ;  ; virtual void Unsetenv (const char *name);  Unset environment variable. ;  ; virtual int Utime (const char *file, Long_t modtime, Long_t actime);  Set the a files modification and access times. ;  ; virtual char * Which (const char *search, const char *file, EAccessMode mode=kFileExists);  Find location of file in a search path. ;  ; virtual const char * WorkingDirectory ();  Return working directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:20881,Clear,Clear,20881,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,2,['Clear'],['Clear']
Usability,"essDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressDialog.html:3942,progress bar,progress bar,3942,root/html528/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html528/TProofProgressDialog.html,4,['progress bar'],['progress bar']
Usability,"essIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table); Static function setting the current TRefTable. void Streamer(TBuffer& ); Stream an object of class TRefTable. TRefTable(). Int_t GetNumPIDs() const; {return fNumP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRefTable.html:9746,GUID,GUID,9746,root/html534/TRefTable.html,https://root.cern,https://root.cern/root/html534/TRefTable.html,3,['GUID'],['GUID']
Usability,"essIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table); Static function setting the current TRefTable. void Streamer(TBuffer& b); Stream an object of class TRefTable. TRefTable(). Int_t GetNumPIDs() const; {return fNum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRefTable.html:9658,GUID,GUID,9658,root/html528/TRefTable.html,https://root.cern,https://root.cern/root/html528/TRefTable.html,3,['GUID'],['GUID']
Usability,"essages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:2716,Clear,Clear,2716,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,1,['Clear'],['Clear']
Usability,"essed by linidx as \(\sum weight^{2}\) If errors are not enabled (via Sumw2() or CalculateErrors()) return contents. ;  ; Int_t GetChunkSize () const;  ; Long64_t GetNbins () const override;  ; Int_t GetNChunks () const;  ; Double_t GetSparseFractionBins () const;  Return the amount of filled bins over all bins. ;  ; Double_t GetSparseFractionMem () const;  Return the amount of used memory over memory that would be used by a non-sparse n-dimensional histogram. ;  ; TClass * IsA () const override;  ; THnSparse * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THnSparse * Rebin (const Int_t *group) const;  ; THnSparse * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Clear the histogram. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  Set content of bin with index ""bin"" to ""v"". ;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  Set error of bin with index ""bin"" to ""e"", enable errors if needed. ;  ; void SetFilledBins (Long64_t nbins) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:7557,Clear,Clear,7557,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['Clear'],['Clear']
Usability,"essed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionQueryFrame.html:21248,Feedback,Feedback,21248,root/html534/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html534/TSessionQueryFrame.html,3,['Feedback'],['Feedback']
Usability,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2010-12-15 15:10 » Last generated: 2010-12-15 15:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/MATH_Index.html:4353,guid,guide,4353,root/html528/MATH_Index.html,https://root.cern,https://root.cern/root/html528/MATH_Index.html,3,['guid'],['guide']
Usability,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2011-07-04 15:18 » Last generated: 2011-07-04 15:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/MATH_Index.html:4353,guid,guide,4353,root/html530/MATH_Index.html,https://root.cern,https://root.cern/root/html530/MATH_Index.html,3,['guid'],['guide']
Usability,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2011-12-02 14:26 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/MATH_Index.html:4353,guid,guide,4353,root/html532/MATH_Index.html,https://root.cern,https://root.cern/root/html532/MATH_Index.html,3,['guid'],['guide']
Usability,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/MATH_Index.html:4350,guid,guide,4350,root/html602/MATH_Index.html,https://root.cern,https://root.cern/root/html602/MATH_Index.html,3,['guid'],['guide']
Usability,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-09-08 16:58 » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/MATH_Index.html:4353,guid,guide,4353,root/html534/MATH_Index.html,https://root.cern,https://root.cern/root/html534/MATH_Index.html,3,['guid'],['guide']
Usability,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-09-08 17:32 » Last generated: 2015-09-08 17:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/MATH_Index.html:4350,guid,guide,4350,root/html604/MATH_Index.html,https://root.cern,https://root.cern/root/html604/MATH_Index.html,3,['guid'],['guide']
Usability,"ession.h>. Inheritance diagram for TMVA::ResultsRegression:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ResultsRegression(). TMVA::ResultsRegression::ResultsRegression ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 51 of file ResultsRegression.cxx. ◆ ~ResultsRegression(). TMVA::ResultsRegression::~ResultsRegression ; (; ). destructor ; Definition at line 60 of file ResultsRegression.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::ResultsRegression::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::ResultsRegression::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::ResultsRegression::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file ResultsRegression.h. ◆ Clear() [1/2]. void TMVA::ResultsRegression::Clear ; (; Option_t * ; ). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 63 of file ResultsRegression.h. ◆ Clear() [2/2]. virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 119 of file TObject.h. ◆ CreateDeviationHistograms(). void TMVA::ResultsRegression::CreateDeviationHistograms ; (; TString ; prefix). Definition at line 203 of file ResultsRegression.cxx. ◆ DeclFileName(). static const char * TMVA::ResultsRegression::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 82 of file ResultsRegression.h. ◆ DeviationAsAFunctionOf(). TH2F * TMVA::ResultsRegression::DeviationAsAFunctionOf ; (; UInt_t ; varNum, . UInt_t ; tgtNum . ). Definition at line 115 of file ResultsRegression.cxx. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::ResultsRegression::GetAnalysisType ; (; ). inlineoverridevirtual . Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html:12886,Clear,Clear,12886,doc/master/classTMVA_1_1ResultsRegression.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html,1,['Clear'],['Clear']
Usability,"essionTag (const char *st);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Touch ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlaveLite.html:3562,Clear,Clear,3562,doc/master/classTSlaveLite.html,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html,1,['Clear'],['Clear']
Usability,"est(Int_t na, const Double_t *a, Int_t nb, const Double_t *b, Option_t *option)Statistical test whether two one-dimensional sets of points are compatible with coming from the same ...Definition TMath.cxx:805; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::KolmogorovProbDouble_t KolmogorovProb(Double_t z)Calculates the Kolmogorov distribution function,.Definition TMath.cxx:679; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; ROOT::Math::CDFWrapperDefinition GoFTest.cxx:40; ROOT::Math::CDFWrapper::CDFWrapperCDFWrapper(const IGenFunction &cdf, Double_t xmin=0, Double_t xmax=-1)Definition GoFTest.cxx:50; ROOT::Math::CDFWrapper::DoEvalDouble_t DoEval(Double_t x) const overrideimplementation of the evaluation function. Must be implemented by derived classesDefinition GoFTest.cxx:65; ROOT::Math::CDFWrapper::CloneIGenFunction * Clone() const overrideClone a function.Definition GoFTest.cxx:71; ROOT::Math::CDFWrapper::fCDFconst IGenFunction * fCDFDefinition GoFTest.cxx:45; ROOT::Math::CDFWrapper::fXmaxDouble_t fXmaxDefinition GoFTest.cxx:43; ROOT::Math::CDFWrapper::fXminDouble_t fXminDefinition GoFTest.cxx:42; ROOT::Math::CDFWrapper::~CDFWrapper~CDFWrapper() overrideDefinition GoFTest.cxx:48; ROOT::Math::CDFWrapper::fNormDouble_t fNormDefinition GoFTest.cxx:44; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. mathmathcoresrcGoFTest.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:48387,Guid,Guide,48387,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['Guid'],['Guide']
Usability,"estBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TQueryDescription*fActQuerycurrent (actual) query; TStringfAddressserver address; Bool_tfAttachedkTRUE if attached; Bool_tfAutoEnableenable packages at session startup time; TStringfConfigFileconfiguration file name; Bool_tfConnectedkTRUE if connected; Bool_tfLocalkTRUE if session is local; Int_tfLogLevellog (debug) level; TStringfNamesession name; Int_tfNbHistosnumber of feedback histos; TList*fPackageslist of packages; Int_tfPortcommunication port; TProof*fProofpointer on TProof used by this session; TProofMgr*fProofMgrProof sessions manager; TList*fQuerieslist of queries in this session; Bool_tfSynckTRUE if in sync mode; TStringfTagsession unique identifier; TStringfUserNameuser name (on server). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * GetName() const; { return fQueryName; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionDescription.html:5655,feedback,feedback,5655,root/html534/TSessionDescription.html,https://root.cern,https://root.cern/root/html534/TSessionDescription.html,1,['feedback'],['feedback']
Usability,estatic . ReturnsName of the file containing the class declaration ; Definition at line 74 of file RootFinder.h. ◆ IsA(). virtual TClass * TMVA::RootFinder::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 74 of file RootFinder.h. ◆ Log(). MsgLogger & TMVA::RootFinder::Log ; (; ); const. inlineprivate . Definition at line 72 of file RootFinder.h. ◆ Root(). Double_t TMVA::RootFinder::Root ; (; Double_t ; refValue). Root finding using Brents algorithm; taken from CERNLIB function RZERO. ; Definition at line 71 of file RootFinder.cxx. ◆ Streamer(). virtual void TMVA::RootFinder::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::RootFinder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file RootFinder.h. Member Data Documentation. ◆ fAbsTol. Double_t TMVA::RootFinder::fAbsTol. private . absolute tolerance deviation ; Definition at line 66 of file RootFinder.h. ◆ fLogger. MsgLogger* TMVA::RootFinder::fLogger. mutableprivate . ! message logger ; Definition at line 71 of file RootFinder.h. ◆ fMaxIter. Int_t TMVA::RootFinder::fMaxIter. private . maximum number of iterations ; Definition at line 65 of file RootFinder.h. ◆ fMethod. MethodBase* TMVA::RootFinder::fMethod. private . Definition at line 69 of file RootFinder.h. ◆ fRootMax. Double_t TMVA::RootFinder::fRootMax. private . maximum root value ; Definition at line 64 of file RootFinder.h. ◆ fRootMin. Double_t TMVA::RootFinder::fRootMin. private . minimum root value ; Definition at line 63 of file RootFinder.h. Libraries for TMVA::RootFinder:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RootFinder.h; tmva/tmva/src/RootFinder.cxx. TMVARootFinder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:13525,Guid,Guide,13525,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['Guid'],['Guide']
Usability,"ested by the user.; 347///; 348/// The default function calls the function specified in SetFCN; 349 ; 350Int_t TFumili::Eval(Int_t& npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag); 351{; 352 if (fFCN) (*fFCN)(npar,grad,fval,par,flag);; 353 return npar;; 354}; 355 ; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// Evaluate theoretical function; 359/// - df: array of partial derivatives; 360/// - X: vector of theoretical function argument; 361 ; 362Double_t TFumili::EvalTFN(Double_t * /*df*/, Double_t *X); 363{; 364 // for the time being disable possibility to compute derivatives; 365 //if(fTFN); 366 // return (*fTFN)(df,X,fA);; 367 //else if(fTFNF1) {; 368 ; 369 TF1 *f1 = (TF1*)fUserFunc;; 370 return f1->EvalPar(X,fA);; 371 //}; 372 //return 0.;; 373}; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376///; 377/// Execute MINUIT commands. MINImize, SIMplex, MIGrad and FUMili all; 378/// will call TFumili::Minimize method.; 379///; 380/// For full command list see; 381/// MINUIT. Reference Manual. CERN Program Library Long Writeup D506.; 382///; 383/// Improvement and errors calculation are not yet implemented as well; 384/// as Monte-Carlo seeking and minimization.; 385/// Contour commands are also unsupported.; 386///; 387/// - command : command string; 388/// - args : array of arguments; 389/// - nargs : number of arguments; 390 ; 391Int_t TFumili::ExecuteCommand(const char *command, Double_t *args, Int_t nargs){; 392 TString comand = command;; 393 static TString clower = ""abcdefghijklmnopqrstuvwxyz"";; 394 static TString cupper = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";; 395 const Int_t nntot = 40;; 396 const char *cname[nntot] = {; 397 ""MINImize "", // 0 checked; 398 ""SEEk "", // 1 none; 399 ""SIMplex "", // 2 checked same as 0; 400 ""MIGrad "", // 3 checked same as 0; 401 ""MINOs "", // 4 none; 402 ""SET xxx "", // 5 lot of stuff; 403 ""SHOw xxx "", // 6 -----------; 404 ""TOP of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:11867,SIMpl,SIMplex,11867,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['SIMpl'],['SIMplex']
Usability,"ested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new major version of ROOT will make ROOT much simpler and safer to use: we want to increase clarity and usability.; If you are a physicist, please read on - this is about your ROOT.; The ROOT team will be releasing parts of ROOT 7 throughout the coming years.; Previews will gradually sneak into the ROOT sources, in the namespace ROOT::Experimental for those parts that are not yet cast in stone, and in the namespace ROOT for those that are.; We will use standard C++ types, standard interface behavior (e.g. with respect to ownership and thread safety), good documentation and tests: we are trying to be nice!; Feedback; The main point of the meeting and this page is to solicit your feedback. Most of it has been taken care of in the code already.; Building ROOT 7; Pre-requisites; Support for the c++14 standard is required. Usage of g++ >= 5 or clang >= 3.4 is recommended.; Relevant cmake variables; The CMAKE_CXX_STANDARD cmake variables must be set to at least 14.; Building from source would look similar to this:; $ mkdir root7_build; $ cd root7_build; $ cmake -DCMAKE_CXX_STANDARD=14 path/to/root/source; $ cmake --build . -- -j4. Examples; See the relevant tutorials, for instance for drawing and styling the new histograms.; The new interfaces are not about shortening your code - but about robustness. Here are a few examples of what can go wrong with the ROOT6 interfaces:; ROOT6 interfaces, showing what can go wrong.; #include ""TFile.h""#include ""TH2.h""#include ""TTreeReader.h""#include ""TTreeReaderArray.h""#include ""TTree.h"" // Another function. Who knows what it does in a month from n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:2612,Feedback,Feedback,2612,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,2,"['Feedback', 'feedback']","['Feedback', 'feedback']"
Usability,"estingEventVector->end()) < Int_t(cls+1) ) {; 1424 if( ( testingEventVector->end() - itTarget ) < Int_t(cls+1) ) {; 1425 itTarget = testingEventVector->end();; 1426 testingEventVector->insert( itTarget, itEvent, itEventEnd ); // fill in the rest without mixing; 1427 break;; 1428 }else{; 1429 itTarget += cls+1;; 1430 testingEventVector->insert( itTarget, (*itEvent) ); // fill event; 1431 }; 1432 }; 1433 }; 1434 }else{; 1435 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1436 trainingEventVector->insert( trainingEventVector->end(), tmpEventVector[Types::kTraining].at(cls).begin(), tmpEventVector[Types::kTraining].at(cls).end() );; 1437 testingEventVector->insert ( testingEventVector->end(), tmpEventVector[Types::kTesting].at(cls).begin(), tmpEventVector[Types::kTesting].at(cls).end() );; 1438 }; 1439 }; 1440 // delete the tmpEventVector (but not the events therein); 1441 tmpEventVector[Types::kTraining].clear();; 1442 tmpEventVector[Types::kTesting].clear();; 1443 ; 1444 tmpEventVector[Types::kMaxTreeType].clear();; 1445 ; 1446 if (mixMode == ""RANDOM"") {; 1447 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""shuffling events""<<Endl;; 1448 ; 1449 std::shuffle(trainingEventVector->begin(), trainingEventVector->end(), rndm);; 1450 std::shuffle(testingEventVector->begin(), testingEventVector->end(), rndm);; 1451 }; 1452 ; 1453 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""trainingEventVector "" << trainingEventVector->size() << Endl;; 1454 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""testingEventVector "" << testingEventVector->size() << Endl;; 1455 ; 1456 // create dataset; 1457 DataSet* ds = new DataSet(dsi);; 1458 ; 1459 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal training tree"" << Endl;; 1460 ds->SetEventCollection(trainingEventVector, Types::kTraining );; 1461 // Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create internal testing tree"" << Endl;; 1462 ds->SetEventCollection(te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:65618,clear,clear,65618,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['clear'],['clear']
Usability,"estructor ; Definition at line 123 of file DataSet.cxx. Member Function Documentation. ◆ AddEvent(). void TMVA::DataSet::AddEvent ; (; Event * ; ev, . Types::ETreeType ; type . ). add event to event list after which the event is owned by the dataset ; Definition at line 241 of file DataSet.cxx. ◆ ApplyTrainingBlockDivision(). void TMVA::DataSet::ApplyTrainingBlockDivision ; (; ). private . ◆ ApplyTrainingSetDivision(). void TMVA::DataSet::ApplyTrainingSetDivision ; (; ). private . apply division of data set ; Definition at line 395 of file DataSet.cxx. ◆ Class(). static TClass * TMVA::DataSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::DataSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::DataSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 175 of file DataSet.h. ◆ ClearNClassEvents(). void TMVA::DataSet::ClearNClassEvents ; (; Int_t ; type). Definition at line 160 of file DataSet.cxx. ◆ CreateSampling(). void TMVA::DataSet::CreateSampling ; (; ); const. create an event sampling (random or importance sampling) ; Definition at line 508 of file DataSet.cxx. ◆ DeclFileName(). static const char * TMVA::DataSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 175 of file DataSet.h. ◆ DeleteAllResults(). void TMVA::DataSet::DeleteAllResults ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Deletes all results currently in the dataset. ; Definition at line 343 of file DataSet.cxx. ◆ DeleteResults(). void TMVA::DataSet::DeleteResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). delete the results stored for this particular Method instance. ; (here apparently called resultsName instead of MethodTitle Tree type (Training, testing etc..) Analysis Type (Class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:17746,Clear,ClearNClassEvents,17746,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['Clear'],['ClearNClassEvents']
Usability,"estructor Documentation. ◆ TMutexImp(). TMutexImp::TMutexImp ; (; ). inline . Definition at line 30 of file TMutexImp.h. ◆ ~TMutexImp(). virtual TMutexImp::~TMutexImp ; (; ). inlinevirtual . Definition at line 31 of file TMutexImp.h. Member Function Documentation. ◆ Class(). static TClass * TMutexImp::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMutexImp::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMutexImp::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 37 of file TMutexImp.h. ◆ DeclFileName(). static const char * TMutexImp::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 37 of file TMutexImp.h. ◆ IsA(). TClass * TMutexImp::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TPosixMutex, and TWin32Mutex.; Definition at line 37 of file TMutexImp.h. ◆ Lock(). virtual Int_t TMutexImp::Lock ; (; ). pure virtual . Implemented in TPosixMutex, and TWin32Mutex. ◆ Streamer(). void TMutexImp::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TPosixMutex, and TWin32Mutex. ◆ StreamerNVirtual(). void TMutexImp::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 37 of file TMutexImp.h. ◆ TryLock(). virtual Int_t TMutexImp::TryLock ; (; ). pure virtual . Implemented in TPosixMutex, and TWin32Mutex. ◆ UnLock(). virtual Int_t TMutexImp::UnLock ; (; ). pure virtual . Implemented in TPosixMutex, and TWin32Mutex. Libraries for TMutexImp:. [legend]; The documentation for this class was generated from the following file:; core/thread/inc/TMutexImp.h. TMutexImp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMutexImp.html:11952,Guid,Guide,11952,doc/master/classTMutexImp.html,https://root.cern,https://root.cern/doc/master/classTMutexImp.html,1,['Guid'],['Guide']
Usability,"estructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; void Clear (Option_t *option) override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TDataMember object files. ;  ; TEnum * Find (DeclId_t id) const;  Return the TEnum corresponding to the Decl 'id' or NULL if it does not exist. ;  ; TObject * FindObject (const char *) const override;  Specialize FindObject to do search for the a enum just by name or create it if its not already in the list. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; virtual TEnum * GetObject (const char *) const;  Return an object from the list of enums if and only if is has already been loaded in the list. ;  ; TClass * IsA () const override;  ; Bool_t IsLoaded () const;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnums.html:2499,Clear,Clear,2499,doc/master/classTListOfEnums.html,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html,1,['Clear'],['Clear']
Usability,"esult ; (; ). Definition at line 41 of file VariableImportance.cxx. ◆ VariableImportanceResult() [2/2]. TMVA::VariableImportanceResult::VariableImportanceResult ; (; const VariableImportanceResult & ; obj). Definition at line 49 of file VariableImportance.cxx. ◆ ~VariableImportanceResult(). TMVA::VariableImportanceResult::~VariableImportanceResult ; (; ). inline . Definition at line 35 of file VariableImportance.h. Member Function Documentation. ◆ Draw(). TCanvas * TMVA::VariableImportanceResult::Draw ; (; const TString ; name = ""VariableImportance""); const. Definition at line 79 of file VariableImportance.cxx. ◆ GetImportanceHist(). TH1F * TMVA::VariableImportanceResult::GetImportanceHist ; (; ). inline . Definition at line 38 of file VariableImportance.h. ◆ GetImportanceValues(). OptionMap & TMVA::VariableImportanceResult::GetImportanceValues ; (; ). inline . Definition at line 37 of file VariableImportance.h. ◆ Print(). void TMVA::VariableImportanceResult::Print ; (; ); const. Definition at line 57 of file VariableImportance.cxx. Friends And Related Symbol Documentation. ◆ VariableImportance. friend class VariableImportance. friend . Definition at line 27 of file VariableImportance.h. Member Data Documentation. ◆ fImportanceHist. std::shared_ptr<TH1F> TMVA::VariableImportanceResult::fImportanceHist. private . Definition at line 30 of file VariableImportance.h. ◆ fImportanceValues. OptionMap TMVA::VariableImportanceResult::fImportanceValues. private . Definition at line 29 of file VariableImportance.h. ◆ fType. VIType TMVA::VariableImportanceResult::fType {kShort}. private . Definition at line 31 of file VariableImportance.h. Libraries for TMVA::VariableImportanceResult:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariableImportance.h; tmva/tmva/src/VariableImportance.cxx. TMVAVariableImportanceResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportanceResult.html:2912,Guid,Guide,2912,doc/master/classTMVA_1_1VariableImportanceResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportanceResult.html,1,['Guid'],['Guide']
Usability,"esultinline; IsParameterBound(unsigned int ipar) constROOT::Fit::FitResult; IsParameterFixed(unsigned int ipar) constROOT::Fit::FitResult; IsValid() constROOT::Fit::FitResultinline; LowerError(unsigned int i) constROOT::Fit::FitResult; MinFcnValue() constROOT::Fit::FitResultinline; MinimizerType() constROOT::Fit::FitResultinline; ModelFunction()ROOT::Fit::FitResultinlineprotected; NCalls() constROOT::Fit::FitResultinline; Ndf() constROOT::Fit::FitResultinline; NFreeParameters() constROOT::Fit::FitResultinline; NormalizedErrors() constROOT::Fit::FitResultinline; NormalizeErrors()ROOT::Fit::FitResult; NPar() constROOT::Fit::FitResultinline; NTotalParameters() constROOT::Fit::FitResultinline; Parameter(unsigned int i) constROOT::Fit::FitResultinline; ParameterBounds(unsigned int ipar, double &lower, double &upper) constROOT::Fit::FitResult; Parameters() constROOT::Fit::FitResultinline; ParError(unsigned int i) constROOT::Fit::FitResultinline; ParName(unsigned int i) constROOT::Fit::FitResult; Print(std::ostream &os, bool covmat=false) constROOT::Fit::FitResult; PrintCovMatrix(std::ostream &os) constROOT::Fit::FitResult; Prob() constROOT::Fit::FitResult; Scan(unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0)ROOT::Fit::FitResult; SetChi2AndNdf(double chi2, unsigned int npoints)ROOT::Fit::FitResult; SetMinosError(unsigned int i, double elow, double eup)ROOT::Fit::FitResult; SetModelFunction(const std::shared_ptr< IModelFunction > &func)ROOT::Fit::FitResultinlineprotected; Status() constROOT::Fit::FitResultinline; Update(const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0)ROOT::Fit::FitResult; UpperError(unsigned int i) constROOT::Fit::FitResult; Value(unsigned int i) constROOT::Fit::FitResultinline; ~FitResult()ROOT::Fit::FitResultinlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult-members.html:5033,Guid,Guide,5033,doc/master/classROOT_1_1Fit_1_1FitResult-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult-members.html,1,['Guid'],['Guide']
Usability,"et &depSet, bool depsAreCond=false)Definition RooGlobalFunc.cxx:805; RooFit::RooConstRooConstVar & RooConst(double val)Definition RooGlobalFunc.cxx:1131; RooFit::BinsRooCmdArg Bins(Int_t nbin)Definition RooGlobalFunc.cxx:547; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; RooFit::ConditionalObservablesRooCmdArg ConditionalObservables(Args_t &&... argsOrArgSet)Create a RooCmdArg to declare conditional observables.Definition RooGlobalFunc.h:278; RooFit::MarkerColorRooCmdArg MarkerColor(Color_t color)Definition RooGlobalFunc.cxx:352; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; RooFit::EfficiencyRooCmdArg Efficiency(const RooCategory &cat)Definition RooGlobalFunc.cxx:372; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf701_efficiencyfitDefinition rf701_efficiencyfit.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(effPdf_over_effPdf_Int[cut]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_effPdf_over_effPdf_Int[cut]_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 8176 events out of 10000 total events; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf701_efficiencyfit.C. tutorialsroofitrf701_efficiencyfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf701__efficiencyfit_8C.html:7913,Guid,Guide,7913,doc/master/rf701__efficiencyfit_8C.html,https://root.cern,https://root.cern/doc/master/rf701__efficiencyfit_8C.html,1,['Guid'],['Guide']
Usability,"et > RBrowser::AddCatchedWidget ; (; RWebWindow * ; win, . const std::string & ; kind . ). protected . Add widget catched from external scripts. ; Definition at line 587 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 606 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 555 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; unsigned ; connid). protected . Check if any widget was modified and update if necessary. ; Definition at line 766 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 1001 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at line 632 of file RBrowser.cxx. ◆ FindWidget(). std::shared_ptr< RBrowserWidget > RBrowser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 616 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets. ; Definition at line 102 of file RBrowser.hxx. ◆ GetCurrentWorkingDirectory(). std:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowser.html:6375,Clear,ClearOnClose,6375,doc/master/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowser.html,1,['Clear'],['ClearOnClose']
Usability,"et Access Key in order to access each S3 file. They are provided to you by your S3 service provider. Those two keys can be provided to ROOT when initializing an object of this class by two means: a. by using the environmental variables S3_ACCESS_KEY and S3_SECRET_KEY, or b. by specifying them when opening each file.; You can use AWS temporary security credentials (temporary access key and secret access key), but you must also give the associated session token. The token may be set in the S3_SESSION_TOKEN environmental variable, or on open in the TOKEN option.; The first method is convenient if all the S3 files you want to access are hosted by a single provider. The second one is more flexible as it allows you to specify which credentials to use on a per-file basis. See the documentation of the constructor of this class for details on the syntax.; For generating and signing the HTTP request, this class uses TS3HTTPRequest.; For more information on the details of S3 protocol please refer to: ""Amazon Simple Storage Service Developer Guide"": http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html; ""Amazon Simple Storage Service REST API Reference"" http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html ; Definition at line 68 of file TS3WebFile.h. Public Member Functions;  TS3WebFile (const char *url, Option_t *options="""");  Construct a TS3WebFile object. ;  ; virtual ~TS3WebFile ();  ; const TString & GetAccessKey () const;  ; const TString & GetBucket () const;  ; const TString & GetObjectKey () const;  ; const TString & GetSecretKey () const;  ; const TUrl & GetUrl () const;  ; TClass * IsA () const override;  ; Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf) override;  Read the nbuf blocks described in arrays pos and len. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWebFile;  TWebFile (const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:2178,Simpl,Simple,2178,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,"et abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for use in TGTable.; TGTableHeaderFrame A frame used internally by TGTable.; TGTableLayout Table layout manager; TGTableLayoutHints Class describing GUI table layout hints; TGText Text used by TGTextEdit; TGTextBuffer Text buffer used by widgets like TGTextEntry, etc.; TGTextButton A text button widget; TGTextEdit Text edit widget; TGTextEditor Simple text editor using TGTextEdit widget; TGTextEntry The TGTextEntry widget is a simple line editor for inputting text; TGTextLBEntry Text listbox entry; TGTextLayout Keep track of string measurement information.; TGTextLine Line in TGText; TGTextView Non-editable text viewer widget; TGTextViewStreamBuf Specialization of std::streambuf; TGTextViewostream Specialization of TGTextView and std::ostream; TGTileLayout Tile layout manager; TGToolBar A bar containing picture buttons; TGToolTip One or multiple lines help text; TGTransientFrame Frame for dialog (transient) windows; TGTreeLBEntry TGFSComboBox entry; TGTreeTable A TGTable that owns it's TTreeTableIngeface.; TGTripleHSlider Horizontal triple slider widget; TGTripleVSlider Vertical triple slider widget; TGUndockedFrame Undocked frame; TGUnknownWindowHandler Abstract event handler for unknown windows; TGVButtonGroup A button group with one vertical column; TGVFileSplitter A vertical file frame splitter; TGVProgressBar Vertical progress bar widget; TGVScrollBar Vertical scrollbar widget; TGVSlider",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:88442,Simpl,Simple,88442,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,4,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"et abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for use in TGTable.; TGTableHeaderFrame A frame used internally by TGTable.; TGTableLayout Table layout manager; TGTableLayoutHints Class describing GUI table layout hints; TGText Text used by TGTextEdit; TGTextBuffer Text buffer used by widgets like TGTextEntry, etc.; TGTextButton A text button widget; TGTextEdit Text edit widget; TGTextEditor Simple text editor using TGTextEdit widget; TGTextEntry The TGTextEntry widget is a simple line editor for inputting text; TGTextLBEntry Text listbox entry; TGTextLayout Keep track of string measurement information.; TGTextLine Line in TGText; TGTextView Non-editable text viewer widget; TGTileLayout Tile layout manager; TGToolBar A bar containing picture buttons; TGToolTip One or multiple lines help text; TGTransientFrame Frame for dialog (transient) windows; TGTreeLBEntry TGFSComboBox entry; TGTreeTable A TGTable that owns it's TTreeTableIngeface.; TGTripleHSlider Horizontal triple slider widget; TGTripleVSlider Vertical triple slider widget; TGUndockedFrame Undocked frame; TGUnknownWindowHandler Abstract event handler for unknown windows; TGVButtonGroup A button group with one vertical column; TGVFileSplitter A vertical file frame splitter; TGVProgressBar Vertical progress bar widget; TGVScrollBar Vertical scrollbar widget; TGVSlider Vertical slider widget; TGVSplitter A vertical frame splitter; TGVertical3DLine A vertical 3D separator line; TGVertic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:79290,Simpl,Simple,79290,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,10,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"et abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for use in TGTable.; TGTableHeaderFrame A frame used internally by TGTable.; TGTableLayout Table layout manager; TGTableLayoutHints Class describing GUI table layout hints; TGText Text used by TGTextEdit; TGTextBuffer Text buffer used by widgets like TGTextEntry, etc.; TGTextButton A text button widget; TGTextEdit Text edit widget; TGTextEditor Simple text editor using TGTextEdit widget; TGTextEntry The TGTextEntry widget is a simple line editor for inputting text; TGTextLBEntry Text listbox entry; TGTextLayout Keep track of string measurement information.; TGTextLine Line in TGText; TGTextView Non-editable text viewer widget; TGTileLayout Tile layout manager; TGToolBar A bar containing picture buttons; TGToolTip One or multiple lines help text; TGTransientFrame Frame for dialog (transient) windows; TGTreeLBEntry TGFSComboBox entry; TGTripleHSlider Horizontal triple slider widget; TGTripleVSlider Vertical triple slider widget; TGUndockedFrame Undocked frame; TGUnknownWindowHandler Abstract event handler for unknown windows; TGVButtonGroup A button group with one vertical column; TGVFileSplitter A vertical file frame splitter; TGVProgressBar Vertical progress bar widget; TGVScrollBar Vertical scrollbar widget; TGVSlider Vertical slider widget; TGVSplitter A vertical frame splitter; TGVertical3DLine A vertical 3D separator line; TGVerticalFrame Composite frame with vertical child layout; TGVert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:84204,Simpl,Simple,84204,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"et destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TPacketizerFile::TIterObj:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TIterObj(). TPacketizerFile::TIterObj::TIterObj ; (; const char * ; n, . TIter * ; iter . ). inline . Definition at line 81 of file TPacketizerFile.cxx. ◆ ~TIterObj(). TPacketizerFile::TIterObj::~TIterObj ; (; ). inlineoverride . Definition at line 82 of file TPacketizerFile.cxx. Member Function Documentation. ◆ GetIter(). TIter * TPacketizerFile::TIterObj::GetIter ; (; ); const. inline . Definition at line 85 of file TPacketizerFile.cxx. ◆ GetName(). const char * TPacketizerFile::TIterObj::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 84 of file TPacketizerFile.cxx. ◆ Print(). void TPacketizerFile::TIterObj::Print ; (; Option_t * ; option = """"); const. overridevirtual . Printf info. ; Reimplemented from TObject.; Definition at line 495 of file TPacketizerFile.cxx. Member Data Documentation. ◆ fIter. TIter* TPacketizerFile::TIterObj::fIter. private . Definition at line 78 of file TPacketizerFile.cxx. ◆ fName. TString TPacketizerFile::TIterObj::fName. private . Definition at line 77 of file TPacketizerFile.cxx. proof/proofplayer/src/TPacketizerFile.cxx. TPacketizerFileTIterObj. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html:11088,Guid,Guide,11088,doc/master/classTPacketizerFile_1_1TIterObj.html,https://root.cern,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html,1,['Guid'],['Guide']
Usability,"et destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGTextEditCommand; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Inheritance diagram for TInsTextCom:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TInsTextCom(). TInsTextCom::TInsTextCom ; (; TGTextEdit * ; te). inline . Definition at line 161 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TInsTextCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 168 of file TGTextEdit.cxx. ◆ SetEndPos(). void TInsTextCom::SetEndPos ; (; TGLongPosition ; end). inline . Definition at line 164 of file TGTextEdit.cxx. Member Data Documentation. ◆ fChar. char TInsTextCom::fChar. Definition at line 159 of file TGTextEdit.cxx. ◆ fEndPos. TGLongPosition TInsTextCom::fEndPos. private . Definition at line 156 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TInsTextCom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInsTextCom.html:11266,Guid,Guide,11266,doc/master/classTInsTextCom.html,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html,1,['Guid'],['Guide']
Usability,"et()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:3740,clear,clearEvalErrorLog,3740,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"et()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:4186,clear,clearEvalErrorLog,4186,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,et* RooProdGenContext::_ccdCloneSet. protected . Definition at line 52 of file RooProdGenContext.h. ◆ _ccdRefresh. bool RooProdGenContext::_ccdRefresh. protected . Definition at line 58 of file RooProdGenContext.h. ◆ _ccdSuper. RooSuperCategory* RooProdGenContext::_ccdSuper. protected . SuperCategory of Common category dependents. ; Definition at line 53 of file RooProdGenContext.h. ◆ _ccdTable. double* RooProdGenContext::_ccdTable. protected . Definition at line 59 of file RooProdGenContext.h. ◆ _commonCats. RooArgSet RooProdGenContext::_commonCats. protected . Common category dependents. ; Definition at line 51 of file RooProdGenContext.h. ◆ _gcList. std::list<std::unique_ptr<RooAbsGenContext> > RooProdGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 61 of file RooProdGenContext.h. ◆ _ownedMultiProds. RooArgSet RooProdGenContext::_ownedMultiProds. protected . Owned auxiliary multi-term product PDFs. ; Definition at line 62 of file RooProdGenContext.h. ◆ _pdf. const RooProdPdf* RooProdGenContext::_pdf. protected . Original PDF. ; Definition at line 60 of file RooProdGenContext.h. ◆ _pdfCcdInt. RooRealIntegral* RooProdGenContext::_pdfCcdInt. protected . Definition at line 56 of file RooProdGenContext.h. ◆ _pdfClone. RooAbsPdf* RooProdGenContext::_pdfClone. protected . Definition at line 55 of file RooProdGenContext.h. ◆ _pdfCloneSet. RooArgSet* RooProdGenContext::_pdfCloneSet. protected . Definition at line 54 of file RooProdGenContext.h. ◆ _uniObs. RooArgSet RooProdGenContext::_uniObs. protected . Observable to be generated with flat distribution. ; Definition at line 57 of file RooProdGenContext.h. Libraries for RooProdGenContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooProdGenContext.h; roofit/roofitcore/src/RooProdGenContext.cxx. RooProdGenContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdGenContext.html:23040,Guid,Guide,23040,doc/master/classRooProdGenContext.html,https://root.cern,https://root.cern/doc/master/classRooProdGenContext.html,1,['Guid'],['Guide']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:3773,Clear,Clear,3773,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,1,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:3717,Clear,Clear,3717,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,1,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:3789,Clear,Clear,3789,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,8,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStepFunction.html:3582,Clear,Clear,3582,root/html526/RooStepFunction.html,https://root.cern,https://root.cern/root/html526/RooStepFunction.html,2,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNLLVar.html:4249,Clear,Clear,4249,root/html526/RooNLLVar.html,https://root.cern,https://root.cern/root/html526/RooNLLVar.html,1,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:3964,Clear,Clear,3964,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChi2Var.html:4842,Clear,Clear,4842,root/html526/RooChi2Var.html,https://root.cern,https://root.cern/root/html526/RooChi2Var.html,2,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataWeightedAverage.html:3707,Clear,Clear,3707,root/html526/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html526/RooDataWeightedAverage.html,2,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProduct.html:3219,Clear,Clear,3219,root/html528/RooProduct.html,https://root.cern,https://root.cern/root/html528/RooProduct.html,1,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddition.html:3448,Clear,Clear,3448,root/html526/RooAddition.html,https://root.cern,https://root.cern/root/html526/RooAddition.html,90,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealMPFE.html:3996,Clear,Clear,3996,root/html526/RooRealMPFE.html,https://root.cern,https://root.cern/root/html526/RooRealMPFE.html,1,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProfileLL.html:3583,Clear,Clear,3583,root/html526/RooProfileLL.html,https://root.cern,https://root.cern/root/html526/RooProfileLL.html,1,['Clear'],['Clear']
Usability,"et* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:5260,Clear,Clear,5260,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,2,['Clear'],['Clear']
Usability,"et.GetLayerAt(i)->CopyParameters(*fNet->GetLayerAt(i));; 1288 }; 1289 }; 1290 ; 1291 // when fNet is built create also input matrix that will be used to evaluate it; 1292 if (fBuildNet) {; 1293 //int n1 = batchHeight;; 1294 //int n2 = batchWidth;; 1295 // treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size); 1296 //if (batchDepth == 1 && GetInputHeight() == 1 && GetInputDepth() == 1) n1 = fNet->GetBatchSize();; 1297 //fXInput = TensorImpl_t(1,n1,n2);; 1298 fXInput = ArchitectureImpl_t::CreateTensor(fNet->GetBatchSize(), GetInputDepth(), GetInputHeight(), GetInputWidth() );; 1299 if (batchDepth == 1 && GetInputHeight() == 1 && GetInputDepth() == 1); 1300 fXInput = TensorImpl_t( fNet->GetBatchSize(), GetInputWidth() );; 1301 fXInputBuffer = HostBufferImpl_t( fXInput.GetSize() );; 1302 ; 1303 ; 1304 // create pointer to output matrix used for the predictions; 1305 fYHat = std::unique_ptr<MatrixImpl_t>(new MatrixImpl_t(fNet->GetBatchSize(), fNet->GetOutputWidth() ) );; 1306 ; 1307 // print the created network; 1308 Log() << ""***** Deep Learning Network *****"" << Endl;; 1309 if (Log().GetMinType() <= kINFO); 1310 deepNet.Print();; 1311 }; 1312 Log() << ""Using "" << nTrainingSamples << "" events for training and "" << nValidationSamples << "" for testing"" << Endl;; 1313 ; 1314 // Loading the training and validation datasets; 1315 TMVAInput_t trainingTuple = std::tie(eventCollectionTraining, DataInfo());; 1316 TensorDataLoader_t trainingData(trainingTuple, nTrainingSamples, batchSize,; 1317 {inputDepth, inputHeight, inputWidth},; 1318 {deepNet.GetBatchDepth(), deepNet.GetBatchHeight(), deepNet.GetBatchWidth()} ,; 1319 deepNet.GetOutputWidth(), nThreads);; 1320 ; 1321 TMVAInput_t validationTuple = std::tie(eventCollectionValidation, DataInfo());; 1322 TensorDataLoader_t validationData(validationTuple, nValidationSamples, batchSize,; 1323 {inputDepth, inputHeight, inputWidth},; 1324 { deepNet.GetBatchDepth(),deepNet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:51382,Learn,Learning,51382,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Learn'],['Learning']
Usability,et.h:649; TMVA::DNN::LayerData::gradientsBeginconst_iterator_type gradientsBegin() constreturns const iterator to the begin of the gradientsDefinition NeuralNet.h:604; TMVA::DNN::LayerData::inverseActivationFunctionstd::shared_ptr< std::function< double(double)> > inverseActivationFunction() constDefinition NeuralNet.h:608; TMVA::DNN::LayerData::deltasEnditerator_type deltasEnd()returns iterator to the end of the deltas (back-propagation)Definition NeuralNet.h:592; TMVA::DNN::LayerData::m_valueGradientsstd::vector< double > m_valueGradientsstores the gradients of the values (nodes)Definition NeuralNet.h:643; TMVA::DNN::LayerData::m_itConstWeightBeginconst_iterator_type m_itConstWeightBeginconst iterator to the first weight of this layer in the weight vectorDefinition NeuralNet.h:648; TMVA::DNN::LayerData::valueGradientsEnditerator_type valueGradientsEnd()returns iterator to the end of the gradients of the node valuesDefinition NeuralNet.h:598; TMVA::DNN::LayerData::clearvoid clear()clear the values and the deltasDefinition NeuralNet.h:576; TMVA::DNN::LayerData::activationFunctionstd::shared_ptr< std::function< double(double)> > activationFunction() constDefinition NeuralNet.h:607; TMVA::DNN::LayerData::computeProbabilitiescontainer_type computeProbabilities() constcompute the probabilities from the node valuesDefinition NeuralNet.cxx:140; TMVA::DNN::LayerData::deltasEndconst_iterator_type deltasEnd() constreturns const iterator to the end of the deltas (back-propagation)Definition NeuralNet.h:595; TMVA::DNN::LayerData::m_hasDropOutbool m_hasDropOutdropOut is turned on?Definition NeuralNet.h:646; TMVA::DNN::LayerData::m_isInputLayerbool m_isInputLayeris this layer an input layerDefinition NeuralNet.h:654; TMVA::DNN::LayerData::m_sizesize_t m_sizeDefinition NeuralNet.h:637; TMVA::DNN::LayerData::hasDropOutbool hasDropOut() consthas this layer drop-out turned on?Definition NeuralNet.h:622; TMVA::DNN::LayerData::valueGradientsBeginconst_iterator_type valueGradientsBegin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:58910,clear,clearvoid,58910,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,3,['clear'],"['clear', 'clearvoid']"
Usability,"et:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|7"" [The Layout of the input]; : BatchLayout: ""1|128|7"" [The Layout of the batch]; : Layout: ""DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=20,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:12370,Learn,LearningRate,12370,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Learn'],['LearningRate']
Usability,"et:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|7"" [The Layout of the input]; : BatchLayout: ""1|128|7"" [The Layout of the batch]; : Layout: ""DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=30,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:12357,Learn,LearningRate,12357,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"et<TTree>(""treeName"");; 287 ; 288RDataFrame d1(""treeName"", ""file.root"");; 289RDataFrame d2(""treeName"", f); // same as TTreeReader; 290RDataFrame d3(*t);; 291 ; 292// multiple files -- all constructors are equivalent; 293TChain chain(""myTree"");; 294chain.Add(""file1.root"");; 295chain.Add(""file2.root"");; 296 ; 297RDataFrame d4(""myTree"", {""file1.root"", ""file2.root""});; 298std::vector<std::string> files = {""file1.root"", ""file2.root""};; 299RDataFrame d5(""myTree"", files);; 300RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed as-is to TChain's constructor; 301RDataFrame d7(chain);; 302~~~; 303Additionally, users can construct an RDataFrame with no data source by passing an integer number. This is the number of rows that; 304will be generated by this RDataFrame.; 305~~~{.cpp}; 306RDataFrame d(10); // a RDF with 10 entries (and no columns/branches, for now); 307d.Foreach([] { static int i = 0; std::cout << i++ << std::endl; }); // silly example usage: count to ten; 308~~~; 309This is useful to generate simple datasets on the fly: the contents of each event can be specified with Define() (explained below). For example, we have used this method to generate [Pythia](https://pythia.org/) events and write them to disk in parallel (with the Snapshot action).; 310 ; 311For data sources other than TTrees and TChains, RDataFrame objects are constructed using ad-hoc factory functions (see e.g. FromCSV(), FromSqlite(), FromArrow()):; 312 ; 313~~~{.cpp}; 314auto df = ROOT::RDF::FromCSV(""input.csv"");; 315// use df as usual; 316~~~; 317 ; 318### Filling a histogram; 319Let's now tackle a very common task, filling a histogram:; 320~~~{.cpp}; 321// Fill a TH1D with the ""MET"" branch; 322RDataFrame d(""myTree"", ""file.root"");; 323auto h = d.Histo1D(""MET"");; 324h->Draw();; 325~~~; 326The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"".; 327 ; 328Histo1D() is an *action*; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be pre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:18458,simpl,simple,18458,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"et<TTree>(""treeName"");; 291 ; 292RDataFrame d1(""treeName"", ""file.root"");; 293RDataFrame d2(""treeName"", f); // same as TTreeReader; 294RDataFrame d3(*t);; 295 ; 296// multiple files -- all constructors are equivalent; 297TChain chain(""myTree"");; 298chain.Add(""file1.root"");; 299chain.Add(""file2.root"");; 300 ; 301RDataFrame d4(""myTree"", {""file1.root"", ""file2.root""});; 302std::vector<std::string> files = {""file1.root"", ""file2.root""};; 303RDataFrame d5(""myTree"", files);; 304RDataFrame d6(""myTree"", ""file*.root""); // the glob is passed as-is to TChain's constructor; 305RDataFrame d7(chain);; 306~~~; 307Additionally, users can construct an RDataFrame with no data source by passing an integer number. This is the number of rows that; 308will be generated by this RDataFrame.; 309~~~{.cpp}; 310RDataFrame d(10); // a RDF with 10 entries (and no columns/branches, for now); 311d.Foreach([] { static int i = 0; std::cout << i++ << std::endl; }); // silly example usage: count to ten; 312~~~; 313This is useful to generate simple datasets on the fly: the contents of each event can be specified with Define() (explained below). For example, we have used this method to generate [Pythia](https://pythia.org/) events and write them to disk in parallel (with the Snapshot action).; 314 ; 315For data sources other than TTrees and TChains, RDataFrame objects are constructed using ad-hoc factory functions (see e.g. FromCSV(), FromSqlite(), FromArrow()):; 316 ; 317~~~{.cpp}; 318auto df = ROOT::RDF::FromCSV(""input.csv"");; 319// use df as usual; 320~~~; 321 ; 322### Filling a histogram; 323Let's now tackle a very common task, filling a histogram:; 324~~~{.cpp}; 325// Fill a TH1D with the ""MET"" branch; 326RDataFrame d(""myTree"", ""file.root"");; 327auto h = d.Histo1D(""MET"");; 328h->Draw();; 329~~~; 330The first line creates an RDataFrame associated to the TTree ""myTree"". This tree has a branch named ""MET"".; 331 ; 332Histo1D() is an *action*; it returns a smart pointer (a ROOT::RDF::RResultPtr, to be pre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:18900,simpl,simple,18900,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"et<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:4871,clear,clearShapeDirty,4871,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"et<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:4871,clear,clearShapeDirty,4871,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"et<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:4871,clear,clearShapeDirty,4871,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"etBinsLength(). void TH2F::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 3983 of file TH2.cxx. ◆ Streamer(). void TH2F::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2F. ; Reimplemented from TH2.; Definition at line 3994 of file TH2.cxx. ◆ StreamerNVirtual(). void TH2F::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 351 of file TH2.h. ◆ UpdateBinContent(). void TH2F::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 349 of file TH2.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH2F operator* ; (; Float_t ; c1, . TH2F const & ; h1 . ). friend . Operator *. ; Definition at line 4040 of file TH2.cxx. ◆ operator* [2/3]. TH2F operator* ; (; TH2F const & ; h1, . Float_t ; c1 . ). friend . Operator *. ; Definition at line 4052 of file TH2.cxx. ◆ operator* [3/3]. TH2F operator* ; (; TH2F const & ; h1, . TH2F const & ; h2 . ). friend . Operator *. ; Definition at line 4088 of file TH2.cxx. ◆ operator+. TH2F operator+ ; (; TH2F const & ; h1, . TH2F const & ; h2 . ). friend . Operator +. ; Definition at line 4064 of file TH2.cxx. ◆ operator-. TH2F operator- ; (; TH2F const & ; h1, . TH2F const & ; h2 . ). friend . Operator -. ; Definition at line 4076 of file TH2.cxx. ◆ operator/. TH2F operator/ ; (; TH2F const & ; h1, . TH2F const & ; h2 . ). friend . Operator /. ; Definition at line 4100 of file TH2.cxx. Libraries for TH2F:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH2.h; hist/hist/src/TH2.cxx. TH2F. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2F.html:66434,Guid,Guide,66434,doc/master/classTH2F.html,https://root.cern,https://root.cern/doc/master/classTH2F.html,1,['Guid'],['Guide']
Usability,"etConeGL&operator=(const TEveJetConeGL&). Data Members; public:. enum TGLLogicalShape::ELODAxes { kLODAxesNone; kLODAxesX; kLODAxesY; kLODAxesZ; kLODAxesAll; };. protected:. TGLBoundingBoxTGLLogicalShape::fBoundingBox! Shape's bounding box.; TEveJetCone*fCModel object.; UInt_tTGLLogicalShape::fDLBase! display-list id base; Bool_tTGLLogicalShape::fDLCache! use display list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; vector<TEveVector>fP; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveJetConeGL(); Constructor. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object. void SetBBox(); Set bounding box. void DLCacheClear(); Clear DL cache and reset internal point array. void CalculatePoints() const; Calculate points for drawing. void Draw(TGLRnrCtx& rnrCtx) const; Draw the cone. void DirectDraw(TGLRnrCtx& rnrCtx) const; Render with OpenGL. TEveJetConeGL(const TEveJetConeGL& ). TEveJetConeGL& operator=(const TEveJetConeGL& ). virtual ~TEveJetConeGL(); {}. » Author: Matevz Tadel, Jochen Thaeder 2009 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveJetConeGL.html:4353,Clear,Clear,4353,root/html534/TEveJetConeGL.html,https://root.cern,https://root.cern/root/html534/TEveJetConeGL.html,1,['Clear'],['Clear']
Usability,"etConn ; (; ). inlinevirtual . Reimplemented in ROOT::RBrowserEditorWidget, and ROOT::RBrowserInfoWidget.; Definition at line 51 of file RBrowserWidget.hxx. ◆ SendWidgetContent(). virtual std::string ROOT::RBrowserWidget::SendWidgetContent ; (; ). inlinevirtual . Reimplemented in ROOT::RBrowserEditorWidget, ROOT::RBrowserInfoWidget, and RBrowserTreeWidget.; Definition at line 64 of file RBrowserWidget.hxx. ◆ SendWidgetTitle(). std::string RBrowserWidget::SendWidgetTitle ; (; ). Returns string which can be send to browser client to set/change title of the widget tab. ; Definition at line 27 of file RBrowserWidget.cxx. ◆ SetActive(). virtual void ROOT::RBrowserWidget::SetActive ; (; ). inlinevirtual . Reimplemented in RBrowserTCanvasWidget.; Definition at line 53 of file RBrowserWidget.hxx. ◆ SetPath(). void ROOT::RBrowserWidget::SetPath ; (; const Browsable::RElementPath_t & ; path). inline . Definition at line 55 of file RBrowserWidget.hxx. ◆ Show(). virtual void ROOT::RBrowserWidget::Show ; (; const std::string & ; ). pure virtual . Implemented in ROOT::RBrowserEditorWidget, ROOT::RBrowserInfoWidget, ROOT::RBrowserCatchedWidget, RBrowserGeomWidget, RBrowserRCanvasWidget, RBrowserTCanvasWidget, and RBrowserTreeWidget. Friends And Related Symbol Documentation. ◆ RBrowser. friend class RBrowser. friend . Definition at line 34 of file RBrowserWidget.hxx. Member Data Documentation. ◆ fBrowser. RBrowser* ROOT::RBrowserWidget::fBrowser {nullptr}. private . Definition at line 40 of file RBrowserWidget.hxx. ◆ fName. std::string ROOT::RBrowserWidget::fName. private . ! widget name ; Definition at line 36 of file RBrowserWidget.hxx. ◆ fPath. Browsable::RElementPath_t ROOT::RBrowserWidget::fPath. private . ! path of drawn element ; Definition at line 38 of file RBrowserWidget.hxx. gui/browserv7/src/RBrowserWidget.hxx; gui/browserv7/src/RBrowserWidget.cxx. ROOTRBrowserWidget. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserWidget.html:5942,Guid,Guide,5942,doc/v632/classROOT_1_1RBrowserWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserWidget.html,1,['Guid'],['Guide']
Usability,"etElement*GetNextPacket(Long64_t totalEntries = -1); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidGetOptions(Int_t* argc, char** argv); const char*GetOrdinal() const; const char*GetPackageDir() const; const char*GetPrefix() const; TProof*GetProof() const; Int_tGetProtocol() const; Int_tGetQuerySeqNum() const; Float_tGetRealTime() const; static Long_tGetResMemMax(); const char*GetService() const; const char*GetSessionDir() const; const char*GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*GetSocket() const; virtual const char*TObject::GetTitle() const; const char*GetTopSessionTag() const; Int_tGetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; static Long_tGetVirtMemMax(); const char*GetWorkDir() const; virtual TProofServ::EQueryActionGetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidHandleSocketInput(); virtual Int_tHandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidHandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Ins",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:7090,resume,resume,7090,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,3,['resume'],['resume']
Usability,"etFitInfo (RooDataSet *d);  ; void SetNullDetailedOutput (RooDataSet *d);  ; void SetNullDistribution (SamplingDistribution *null);  ; void SetNullPValue (double pvalue);  ; void SetNullPValueError (double err);  ; void SetPValueIsRightTail (bool pr);  ; void SetTestStatisticData (const double tsd);  ; virtual double Significance () const;  familiar name for the Null p-value in terms of 1-sided Gaussian significance ;  ; double SignificanceError () const;  The error on the significance, computed from NullPValueError via error propagation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridResult.html:6039,Clear,Clear,6039,doc/master/classRooStats_1_1HybridResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridResult.html,2,['Clear'],['Clear']
Usability,"etId = -1); virtual~TEveGDoubleValuator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(Bool_t connect = kTRUE); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGDoubleValuator.html:1544,Clear,Clear,1544,root/html528/TEveGDoubleValuator.html,https://root.cern,https://root.cern/root/html528/TEveGDoubleValuator.html,4,['Clear'],['Clear']
Usability,"etItemName(). void TTVLVEntry::SetItemName ; (; const char * ; name). Redraw this entry with new name. ; Definition at line 212 of file TTVLVContainer.cxx. ◆ SetSmallPic(). void TTVLVEntry::SetSmallPic ; (; const TGPicture * ; spic). Set small picture. ; Definition at line 288 of file TTVLVContainer.cxx. ◆ SetToolTipText(). void TTVLVEntry::SetToolTipText ; (; const char * ; text, . Long_t ; delayms = 1000 . ). Set tool tip text associated with this item. ; The delay is in milliseconds (minimum 250). To remove tool tip call method with text = 0 ; Definition at line 275 of file TTVLVContainer.cxx. ◆ SetTrueName(). void TTVLVEntry::SetTrueName ; (; const char * ; name). inline . Definition at line 91 of file TTVLVContainer.h. Member Data Documentation. ◆ fAlias. TString TTVLVEntry::fAlias. protected . Alias for this entry. ; Definition at line 61 of file TTVLVContainer.h. ◆ fContainer. TTVLVContainer* TTVLVEntry::fContainer. protected . Container to whom this item belongs. ; Definition at line 59 of file TTVLVContainer.h. ◆ fContext. TGItemContext* TTVLVEntry::fContext. protected . Associated context menu. ; Definition at line 65 of file TTVLVContainer.h. ◆ fConvName. TString TTVLVEntry::fConvName. protected . Name converted into true expressions. ; Definition at line 62 of file TTVLVContainer.h. ◆ fIsCut. bool TTVLVEntry::fIsCut. protected . Flag for cut type items. ; Definition at line 64 of file TTVLVContainer.h. ◆ fTip. TGToolTip* TTVLVEntry::fTip. protected . Tool tip associated with item. ; Definition at line 63 of file TTVLVContainer.h. ◆ fTrueName. TString TTVLVEntry::fTrueName. protected . Name for this entry. ; Definition at line 60 of file TTVLVContainer.h. Libraries for TTVLVEntry:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TTVLVContainer.h; tree/treeviewer/src/TTVLVContainer.cxx. TTVLVEntry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVEntry.html:36652,Guid,Guide,36652,doc/master/classTTVLVEntry.html,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html,1,['Guid'],['Guide']
Usability,"etLabel(const char *label)Definition TPaveText.h:61; TPaveText::DrawFilevirtual void DrawFile(const char *filename, Option_t *option="""")Draw lines in filename in this pavetext.Definition TPaveText.cxx:254; TPaveText::EditTextvirtual void EditText()Edit text at the mouse position.Definition TPaveText.cxx:264; TPaveText::SetAllWithvirtual void SetAllWith(const char *text, Option_t *option, Double_t value)Set attribute option for all lines containing string text.Definition TPaveText.cxx:827; TPaveText::GetObjectvirtual TObject * GetObject(Double_t &ymouse, Double_t &yobj) constGet object pointed by the mouse in this pavetext.Definition TPaveText.cxx:317; TPaveText::SaveLinesvirtual void SaveLines(std::ostream &out, const char *name, Bool_t saved)Save lines of this pavetext as C++ statements on output stream out.Definition TPaveText.cxx:682; TPaveText::DeleteTextvirtual void DeleteText()Delete text at the mouse position.Definition TPaveText.cxx:227; TPaveText::Clearvoid Clear(Option_t *option="""") overrideClear all lines in this pavetext.Definition TPaveText.cxx:217; TPaveText::operator=TPaveText & operator=(const TPaveText &)assignment operatorDefinition TPaveText.cxx:141; TPaveText::AddBoxvirtual TBox * AddBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Add a new graphics box to this pavetext.Definition TPaveText.cxx:163; TPaveText::Paintvoid Paint(Option_t *option="""") overridePaint this pavetext with its current attributes.Definition TPaveText.cxx:419; TPaveText::GetLinevirtual TText * GetLine(Int_t number) constGet Pointer to line number in this pavetext.Definition TPaveText.cxx:284; TPaveText::fLabelTString fLabelLabel written at the top of the pavetext.Definition TPaveText.h:24; TPaveText::InsertLinevirtual void InsertLine()Add a new line at the mouse position.Definition TPaveText.cxx:386; TPaveText::GetLineWithvirtual TText * GetLineWith(const char *text) constGet Pointer to first containing string text in this pavetext.Definition TPaveText.cxx:302; TPaveTe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8h_source.html:8219,Clear,Clearvoid,8219,doc/master/TPaveText_8h_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"etLeftMargin(0.15); xframe2.GetYaxis().SetTitleOffset(1.4); xframe2.Draw(); ; c.SaveAs(""rf205_compplot.png""); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2,sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg1,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg,sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (sig,sig1,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg1,sig,sig1,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf205_compplot.py. tutorialsroofitrf205_compplot.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf205__compplot_8py.html:5862,Guid,Guide,5862,doc/master/rf205__compplot_8py.html,https://root.cern,https://root.cern/doc/master/rf205__compplot_8py.html,1,['Guid'],['Guide']
Usability,"etMakeClass (bool decomposeObj=true);  Set the branch in a mode where the object are decomposed (Also known as MakeClass mode). ;  ; virtual void SetObject (void *objadd);  Set object this branch is pointing to. ;  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetStatus (bool status=true);  Set branch status to Process or DoNotProcess. ;  ; virtual void SetupAddresses ();  If the branch address is not set, we set all addresses starting with the top level parent branch. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool SupportsBulkRead () const;  Returns true if this branch supports bulk IO, false otherwise. ;  ; virtual void UpdateAddress ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchClones.html:10256,Clear,Clear,10256,doc/master/classTBranchClones.html,https://root.cern,https://root.cern/doc/master/classTBranchClones.html,1,['Clear'],['Clear']
Usability,"etMin (const char *name, double value);  Set minimum of name range to given value. ;  ; void setMin (double value);  ; void setRange (const char *name, double min, double max);  Set a fit or plotting range. ;  ; void setRange (const char *name, RooAbsReal &min, RooAbsReal &max);  Set or modify a parameterised range, i.e., a range the varies in dependence of parameters. ;  ; void setRange (double min, double max);  Set the limits of the default range. ;  ; void setRange (RooAbsReal &min, RooAbsReal &max);  Set parameterised limits of the default range. See setRange(const char*, RooAbsReal&, RooAbsReal&). ;  ; void setVal (double value) override;  Set value of variable to 'value'. ;  ; void setVal (double value, const char *rangeName) override;  Set value of variable to value. ;  ; void Streamer (TBuffer &) override;  Stream an object of class RooRealVar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; std::size_t valueResetCounter () const;  Returns how many times the value of this RooRealVar was reset. ;  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to given stream. ;  ;  Public Member Functions inherited from RooAbsRealLValue;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel, const RooAbsBinning &bins) const;  Create an empty 1D-histogram with appropriate scale and labels for this variable. ;  ; TH1F * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:6015,simpl,simple,6015,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['simpl'],['simple']
Usability,"etName(), GetName());; 1059 return;; 1060 }; 1061 // case where label bins are consecutive starting from first bin will work; 1062 Warning(; 1063 ""LabelsOption"",; 1064 ""axis %s of TProfile %s has extra following bins without labels. Sorting will work only for first label bins"",; 1065 axis->GetName(), GetName());; 1066 }; 1067 std::vector<Int_t> a(n);; 1068 Int_t i;; 1069 std::vector<Double_t> cont(n);; 1070 std::vector<Double_t> sumw(n);; 1071 std::vector<Double_t> errors(n);; 1072 std::vector<Double_t> ent(n);; 1073 std::vector<Double_t> binsw2;; 1074 if (fBinSumw2.fN) binsw2.resize(n);; 1075 ; 1076 // delete buffer if it is there since bins will be reordered.; 1077 if (fBuffer); 1078 BufferEmpty(1);; 1079 ; 1080 // make a labelold list but ordered with bins; 1081 // (re-ordered original label list); 1082 std::vector<TObject *> labold(n);; 1083 for (i = 0; i < n; i++); 1084 labold[i] = nullptr;; 1085 TIter nextold(labels);; 1086 TObject *obj;; 1087 while ((obj=nextold())) {; 1088 Int_t bin = obj->GetUniqueID();; 1089 R__ASSERT(bin <= n);; 1090 labold[bin - 1] = obj;; 1091 }; 1092 // order now labold according to bin content; 1093 ; 1094 labels->Clear();; 1095 if (sort > 0) {; 1096 //---sort by values of bins; 1097 for (i=1;i<=n;i++) {; 1098 a[i-1] = i-1;; 1099 sumw[i-1] = fArray[i];; 1100 errors[i-1] = fSumw2.fArray[i];; 1101 ent[i-1] = fBinEntries.fArray[i];; 1102 if (fBinSumw2.fN) binsw2[i - 1] = fBinSumw2.fArray[i];; 1103 if (fBinEntries.fArray[i] == 0) cont[i-1] = 0;; 1104 else cont[i-1] = fArray[i]/fBinEntries.fArray[i];; 1105 }; 1106 if (sort ==1); 1107 TMath::Sort(n,cont.data(),a.data(),kTRUE); //sort by decreasing values; 1108 else; 1109 TMath::Sort(n,cont.data(),a.data(),kFALSE); //sort by increasing values; 1110 for (i=1;i<=n;i++) {; 1111 fArray[i] = sumw[a[i-1]];; 1112 fSumw2.fArray[i] = errors[a[i-1]];; 1113 fBinEntries.fArray[i] = ent[a[i-1]];; 1114 if (fBinSumw2.fN); 1115 fBinSumw2.fArray[i] = binsw2[a[i-1]];; 1116 }; 1117 for (i=0 ;i < n; i++) {; 1118",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:40241,Clear,Clear,40241,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['Clear'],['Clear']
Usability,etOption ; (; const char * ; option). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 33 of file RooProofDriverSelector.h. ◆ SlaveBegin(). void RooProofDriverSelector::SlaveBegin ; (; TTree * ; tree). overridevirtual . Reimplemented from TSelector.; Definition at line 41 of file RooProofDriverSelector.cxx. ◆ SlaveTerminate(). void RooProofDriverSelector::SlaveTerminate ; (; void ; ). overridevirtual . Reimplemented from TSelector.; Definition at line 74 of file RooProofDriverSelector.cxx. ◆ Streamer(). void RooProofDriverSelector::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooProofDriverSelector::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file RooProofDriverSelector.h. ◆ Version(). Int_t RooProofDriverSelector::Version ; (; ); const. inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 27 of file RooProofDriverSelector.h. Member Data Documentation. ◆ _pkg. RooStudyPackage* RooProofDriverSelector::_pkg = nullptr. Definition at line 39 of file RooProofDriverSelector.h. ◆ b_i. TBranch* RooProofDriverSelector::b_i = nullptr. ! ; Definition at line 24 of file RooProofDriverSelector.h. ◆ fChain. TTree* RooProofDriverSelector::fChain = nullptr. !pointer to the analyzed TTree or TChain ; Definition at line 18 of file RooProofDriverSelector.h. ◆ i. Int_t RooProofDriverSelector::i. Definition at line 21 of file RooProofDriverSelector.h. ◆ seed. Int_t RooProofDriverSelector::seed. Definition at line 40 of file RooProofDriverSelector.h. Libraries for RooProofDriverSelector:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooProofDriverSelector.h; roofit/roofitcore/src/RooProofDriverSelector.cxx. RooProofDriverSelector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProofDriverSelector.html:18886,Guid,Guide,18886,doc/master/classRooProofDriverSelector.html,https://root.cern,https://root.cern/doc/master/classRooProofDriverSelector.html,1,['Guid'],['Guide']
Usability,"etParName(Int_t ipar, const char *name)Set name of parameter number ipar.Definition TF1.cxx:3450; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::Scalevirtual void Scale(Double_t c1=1, Option_t *option="""")Multiply this histogram by a constant c1.Definition TH1.cxx:6604; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TMath::AreEqualAbsBool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon)Comparing floating points.Definition TMath.h:418; fitNormSumDefinition fitNormSum.py:1; t1auto * t1Definition textangle.C:20. tutorialsfitfitNormSum.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8C_source.html:7523,Guid,Guide,7523,doc/master/fitNormSum_8C_source.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8C_source.html,1,['Guid'],['Guide']
Usability,"etPoint(0, (1*TMath::Pi())/4., 0.05);; 494 grP1->SetPoint(1, (2*TMath::Pi())/4., 0.10);; 495 grP1->SetPoint(2, (3*TMath::Pi())/4., 0.15);; 496 grP1->SetPoint(3, (4*TMath::Pi())/4., 0.20);; 497 grP1->SetPoint(4, (5*TMath::Pi())/4., 0.25);; 498 grP1->SetPoint(5, (6*TMath::Pi())/4., 0.30);; 499 grP1->SetPoint(6, (7*TMath::Pi())/4., 0.35);; 500 grP1->SetPoint(7, (8*TMath::Pi())/4., 0.40);; 501 ; 502 grP1->SetMarkerStyle(20);; 503 grP1->SetMarkerSize(1.);; 504 grP1->SetMarkerColor(4);; 505 grP1->SetLineColor(4);; 506 grP1->Draw(""ALP"");; 507 ; 508 // Update, otherwise GetPolargram returns 0; 509 c46->Update();; 510 grP1->GetPolargram()->SetToRadian();; 511}; 512End_Macro; 513 ; 514\anchor GrP5; 515### Colors automatically picked in palette; 516 ; 517\since **ROOT version 6.09/01**; 518 ; 519When several graphs are painted in the same canvas or when a multi-graph is drawn,; 520it might be useful to have an easy and automatic way to choose; 521their color. The simplest way is to pick colors in the current active color; 522palette. Palette coloring for histogram is activated thanks to the options `PFC`; 523(Palette Fill Color), `PLC` (Palette Line Color) and `PMC` (Palette Marker Color).; 524When one of these options is given to `TGraph::Draw` the graph get its color; 525from the current color palette defined by `gStyle->SetPalette(...)`. The color; 526is determined according to the number of objects having palette coloring in; 527the current pad.; 528 ; 529Begin_Macro(source); 530../../../tutorials/graphs/graphpalettecolor.C; 531End_Macro; 532 ; 533Begin_Macro(source); 534../../../tutorials/graphs/multigraphpalettecolor.C; 535End_Macro; 536 ; 537\anchor GrP6; 538### Reverse graphs' axis; 539 ; 540\since **ROOT version 6.09/03**; 541 ; 542When a TGraph is drawn, the X-axis is drawn with increasing values from left to; 543right and the Y-axis from bottom to top. The two options `RX` and `RY` allow to; 544change this order. The option `RX` allows to draw the X-axis with increa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:20558,simpl,simplest,20558,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['simpl'],['simplest']
Usability,"etProtoData (const char *name);  Specify the name of the dataset in the workspace to be used. ;  ; virtual void SetProtoData (RooAbsData &data);  Set the proto DataSet, add to the workspace if not already there. ;  ; virtual void SetSnapshot (const RooArgSet &set);  Set parameter values for a particular hypothesis if using a common PDF by saving a snapshot in the workspace. ;  ; virtual void SetWorkspace (RooWorkspace &ws);  ; void SetWS (RooWorkspace &ws) override;  Set a workspace that owns all the necessary components for the analysis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html:8479,Clear,Clear,8479,doc/master/classRooStats_1_1ModelConfig.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html,1,['Clear'],['Clear']
Usability,"etROCIntegral(const UInt_t points=41)Calculates the ROC integral (AUC)Definition ROCCurve.cxx:248; TMVA::ROCCurve::GetROCCurveTGraph * GetROCCurve(const UInt_t points=100)Returns a new TGraph containing the ROC curve.Definition ROCCurve.cxx:274; TMVA::RankingRanking for variables in method (implementation)Definition Ranking.h:48; TMVA::Ranking::Printvirtual void Print() constget maximum length of variable namesDefinition Ranking.cxx:111; TMVA::ResultsClassificationClass that is the base-class for a vector of result.Definition ResultsClassification.h:48; TMVA::ResultsMulticlassClass which takes the results of a multiclass classification.Definition ResultsMulticlass.h:55; TMVA::ResultsClass that is the base-class for a vector of result.Definition Results.h:57; TMVA::Tools::FormattedOutputvoid FormattedOutput(const std::vector< Double_t > &, const std::vector< TString > &, const TString titleVars, const TString titleValues, MsgLogger &logger, TString format=""%+1.3f"")formatted output of simple tableDefinition Tools.cxx:887; TMVA::Tools::ROOTVersionMessagevoid ROOTVersionMessage(MsgLogger &logger)prints the ROOT release number and dateDefinition Tools.cxx:1325; TMVA::Tools::UsefulSortDescendingvoid UsefulSortDescending(std::vector< std::vector< Double_t > > &, std::vector< TString > *vs=nullptr)sort 2D vector (AND in parallel a TString vector) in such a way that the ""first vector is sorted"" and...Definition Tools.cxx:564; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TMVA::Tools::Colorconst TString & Color(const TString &)human readable color stringsDefinition Tools.cxx:828; TMVA::Tools::GetCorrelationMatrixconst TMatrixD * GetCorrelationMatrix(const TMatrixD *covMat)turns covariance into correlation matrixDefinition Tools.cxx:324; TMVA::Tools::kHtmlLink@ kHtmlLinkDefinition Tools.h:212; TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:133241,simpl,simple,133241,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['simpl'],['simple']
Usability,"etRefTable (TRefTable *table);  Static function setting the current TRefTable. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t AddInternalIdxForPID (TProcessID *procid);  Add the internal index for fProcessIDs, fAllocSize, etc given a PID. ;  ; virtual Int_t ExpandForIID (Int_t iid, Int_t newsize);  Expand fParentIDs to newsize for internel ProcessID index iid. ;  ; void ExpandPIDs (Int_t numpids);  Expand the arrays of managed PIDs. ;  ; Int_t FindPIDGUID (const char *guid) const;  Get fProcessGUIDs' index of the TProcessID with GUID guid. ;  ; Int_t GetInternalIdxForPID (Int_t pid) const;  Get the index for fProcessIDs, fAllocSize, etc given a PID. ;  ; Int_t GetInternalIdxForPID (TProcessID *procid) const;  Get the index for fProcessIDs, fAllocSize, etc given a PID. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t * fAllocSize;  number of known ProcessIDs ;  ; Int_t fDefaultSize;  current parent ID in fParents (latest call to SetParent) ;  ; std::vector< Int_t > fMapPIDtoInternal;  ; Int_t * fN;  [fNumPIDs] allocated size of array fParentIDs for each ProcessID ;  ; Int_t fNumPIDs;  ; TObject * fOwner;  ; Int_t fParentID;  [fNumPIDs][fAllocSize] array of Parent IDs ;  ; Int_t ** fParentIDs;  [fNumPIDs] current maximum number of IDs in array fParentIDs for each ProcessID ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:12734,guid,guid,12734,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,3,"['GUID', 'guid']","['GUID', 'guid']"
Usability,"etSeed (ULong_t seed=0);  Set the random generator seed. ;  ; virtual void Sphere (Double_t &x, Double_t &y, Double_t &z, Double_t r);  Generates random vectors, uniformly distributed over the surface of a sphere of given radius. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Uniform (Double_t x1, Double_t x2);  Returns a uniform deviate on the interval (x1, x2). ;  ; virtual Double_t Uniform (Double_t x1=1);  Returns a uniform deviate on the interval (0, x1). ;  ; virtual void WriteRandom (const char *filename) const;  Writes random generator status to filename. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:14314,Clear,Clear,14314,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['Clear'],['Clear']
Usability,"etShapeTGeoShape * GetShape() constDefinition TGeoVolume.h:190; TGeoXtruDefinition TGeoXtru.h:22; TGeoXtru::Classstatic TClass * Class(); TLockGuardDefinition TVirtualMutex.h:70; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TRegexpRegular expression class.Definition TRegexp.h:31; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RGeomSignalFunc_tstd::function< void(const std::string &)> RGeomSignalFunc_tDefinition RGeomData.hxx:208; ROOT::RGeomLogExperimental::RLogChannel & RGeomLog()Log channel for Geomviewer diagnostics.Definition RGeomData.cxx:49; ROOT::RGeomScanFunc_tstd::function< bool(RGeomNode &, std::vector< int > &, bool, int)> RGeomScanFunc_tDefinition RGeomData.hxx:206; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699. geomwebviewersrcRGeomData.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:95555,Guid,Guide,95555,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,1,['Guid'],['Guide']
Usability,"etTime(ms);; 68 }; 69 Bool_t IsSlow() const { return fSlow; }; 70 ; 71 /// timeout handler; 72 /// used to process http requests in main ROOT thread; 73 void Timeout() override; 74 {; 75 Int_t nprocess = fServer.ProcessRequests();; 76 ; 77 if (nprocess > 0) {; 78 fSlowCnt = 0;; 79 if (IsSlow()); 80 SetSlow(kFALSE);; 81 } else if (!IsSlow() && (fSlowCnt++ > 10)) {; 82 SetSlow(kTRUE);; 83 }; 84 }; 85};; 86 ; 87 ; 88/** \class THttpServer; 89\ingroup http; 90 ; 91Online http server for arbitrary ROOT application; 92 ; 93Idea of THttpServer - provide remote http access to running; 94ROOT application and enable HTML/JavaScript user interface.; 95Any registered object can be requested and displayed in the browser.; 96There are many benefits of such approach:; 97 ; 981. standard http interface to ROOT application; 992. no any temporary ROOT files when access data; 1003. user interface running in all browsers; 101 ; 102To start http server simply create instance; 103of the THttpServer class like:; 104 ; 105 serv = new THttpServer(""http:8080"");; 106 ; 107This will starts civetweb-based http server with http port 8080.; 108Than one should be able to open address ""http://localhost:8080""; 109in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects,; 110created in ROOT application. By default, server can access files,; 111canvases and histograms via `gROOT` pointer. All such objects; 112can be displayed with JSROOT graphics.; 113 ; 114At any time one could register other objects with the command:; 115 ; 116 TGraph* gr = new TGraph(10);; 117 gr->SetName(""gr1"");; 118 serv->Register(""graphs/subfolder"", gr);; 119 ; 120If objects content is changing in the application, one could; 121enable monitoring flag in the browser - than objects view; 122will be regularly updated.; 123 ; 124More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html; 125*/; 126 ; 127ClassImp(THttpServer);; 128 ; 129/////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:2805,simpl,simply,2805,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['simpl'],['simply']
Usability,"etTitleFont(Int_t titlefont)TGaxisinline; SetTitleOffset(Float_t titleoffset=1)TGaxisinline; SetTitleSize(Float_t titlesize)TGaxisinline; SetUniqueID(UInt_t uid)TObjectvirtual; SetVertical(Bool_t set=kTRUE)TLine; SetWmax(Double_t wmax)TGaxisinline; SetWmin(Double_t wmin)TGaxisinline; SetX1(Double_t x1)TLineinlinevirtual; SetX2(Double_t x2)TLineinlinevirtual; SetY1(Double_t y1)TLineinlinevirtual; SetY2(Double_t y2)TLineinlinevirtual; Streamer(TBuffer &) overrideTGaxisvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGaxisinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGaxis(const TGaxis &)TGaxisprotected; TGaxis()TGaxis; TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, Double_t wmin, Double_t wmax, Int_t ndiv=510, Option_t *chopt="""", Double_t gridlength=0)TGaxis; TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char *funcname, Int_t ndiv=510, Option_t *chopt="""", Double_t gridlength=0)TGaxis; TLine()TLineinline; TLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLine; TLine(const TLine &line)TLine; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttLine()TAttLinevirtual; ~TAttText()TAttTextvirtual; ~TGaxis() overrideTGaxis; ~TLine() override=defaultTLine; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis-members.html:12950,Guid,Guide,12950,doc/master/classTGaxis-members.html,https://root.cern,https://root.cern/doc/master/classTGaxis-members.html,1,['Guid'],['Guide']
Usability,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:3326,Clear,Clear,3326,doc/v632/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html,1,['Clear'],['Clear']
Usability,"etTopVisible (bool on=true);  ; void SetVisLevel (int lvl=3);  Configures maximal visible level. ;  ; void Show (const RWebDisplayArgs &args="""", bool always_start_new_browser=false);  Show or update geometry in web window If web browser already started - just refresh drawing like ""reload"" button does If no web window exists or. ;  ; void Update ();  Update geometry drawings in all web displays. ;  . Protected Member Functions; std::vector< int > GetStackFromJson (const std::string &json, bool node_ids=false);  convert JSON into stack array ;  ; void ProcessSignal (const std::string &);  Process signal from geom description when it changed by any means. ;  ; void SendGeometry (unsigned connid=0, bool first_time=false);  Send data for principal geometry draw Should be used when essential settings were changed in geometry description. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  ; void WebWindowDisconnect (unsigned connid);  Process disconnect event Clear cache data and dependent connections. ;  . Protected Attributes; RGeomDescription fDesc;  ! geometry description, send to the client as first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:3372,Clear,Clear,3372,doc/master/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html,1,['Clear'],['Clear']
Usability,"etUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. TQCommand(const TQCommand& com); TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:2752,undo,undo,2752,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,4,['undo'],['undo']
Usability,"etUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. TQUndoManager(); virtual~TQUndoManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:2751,undo,undo,2751,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,4,['undo'],['undo']
Usability,"etUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:2776,undo,undo,2776,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"etUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQUndoManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:2775,undo,undo,2775,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,2,['undo'],['undo']
Usability,"etWeightGradientsAt (size_t i);  ; const Matrix_t & GetWeightGradientsAt (size_t i) const;  ; std::vector< Matrix_t > & GetWeights ();  ; const std::vector< Matrix_t > & GetWeights () const;  ; Matrix_t & GetWeightsAt (size_t i);  ; const Matrix_t & GetWeightsAt (size_t i) const;  ; size_t GetWidth () const;  ; bool IsTraining () const;  ; void ReadMatrixXML (void *node, const char *name, Matrix_t &matrix);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetDropoutProbability (Scalar_t);  Set Dropout probability. ;  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Static Protected Member Functions; static size_t CalculateNormDim (int axis, size_t c, size_t h, size_t w);  . Private Attributes; Tensor_t fDerivatives; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html:7455,learn,learningRate,7455,doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"etWrapLength(Int_t wl)Definition TGButton.h:202; TGTextButton::SetFontvirtual void SetFont(FontStruct_t font, Bool_t global=kFALSE)Changes text font.Definition TGButton.cxx:880; TGTextButton::fTModeInt_t fTModeDefinition TGButton.h:150; TGTextButton::~TGTextButton~TGTextButton() overrideDelete a text button widget.Definition TGButton.cxx:595; TGTextButton::DoRedrawvoid DoRedraw() overrideDraw the text button.Definition TGButton.cxx:747; TGTextButton::fWrapLengthInt_t fWrapLengthDefinition TGButton.h:151; TGTextButton::fTLayoutTGTextLayout * fTLayoutDefinition TGButton.h:153; TGTextButton::GetStringTString GetString() constDefinition TGButton.h:191; TGTextButton::SetMarginsvoid SetMargins(Int_t left=0, Int_t right=0, Int_t top=0, Int_t bottom=0)Definition TGButton.h:204; TGTextButton::fFontStructFontStruct_t fFontStructDefinition TGButton.h:154; TGTextButton::SetTextColorvirtual void SetTextColor(Pixel_t color, Bool_t global=kFALSE)Changes text color.Definition TGButton.cxx:918; TGTextButton::fMLeftInt_t fMLeftDefinition TGButton.h:146; TGTextLayoutIs used to keep track of string measurement information when using the text layout facilities.Definition TGFont.h:106; TGToolTipA tooltip can be a one or multiple lines help text that is displayed in a window when the mouse curso...Definition TGToolTip.h:24; TGWidgetThe widget base class.Definition TGWidget.h:43; TGWindowROOT GUI Window base class.Definition TGWindow.h:23; TQObject::Emitvoid Emit(const char *signal, const T &arg)Activate signal with single parameter.Definition TQObject.h:164; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; bool; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; grTGraphErrors * grDefinition legend1.C:25; Event_tEvent structure.Definition GuiTypes.h:174. guiguiincTGButton.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGButton_8h_source.html:43500,Guid,Guide,43500,doc/master/TGButton_8h_source.html,https://root.cern,https://root.cern/doc/master/TGButton_8h_source.html,1,['Guid'],['Guide']
Usability,"etYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const RooStats::HypoTestInverterResult&); RooStats::HypoTestInverterResultHypoTestInverterResult(const RooStats::HypoTestInverterResult& other, const char* name); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooStats::SimpleInterval::IsInInterval(const RooArgSet&) const; boolIsOneSided() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; boolIsTwoSided() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); Double_tLowerLimitEstimatedError(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HypoTestInverterResult&operator=(const RooStats::HypoTestInverterResult& other); virtual voidTObject::Paint(Option_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:5026,Simpl,SimpleInterval,5026,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"eta, phi);; 234 auto particle = new TParticle(0, 0, 0, 0, 0, 0,; 235 px, py, pz, std::sqrt(px*px + py*py + pz*pz + 80*80),; 236 0, 0, 0, 0 );; 237 ; 238 int pdg = 11 * (r.Integer(2) > 0 ? 1 : -1);; 239 particle->SetPdgCode(pdg);; 240 ; 241 list->Add(particle);; 242 }; 243 fListData.push_back(list);; 244 }; 245 ; 246 void MakeRecHits(int N); 247 {; 248 TRandom &r = *gRandom;; 249 r.SetSeed(0);; 250 TList* list = new TList();; 251 list->SetName(""RecHits"");; 252 ; 253 for (int i = 1; i <= N; ++i); 254 {; 255 float pt = r.Uniform(0.5, 10);; 256 float x = r.Uniform(-200, 200);; 257 float y = r.Uniform(-200, 200);; 258 float z = r.Uniform(-500, 500);; 259 auto rechit = new RecHit(pt, x, y, z);; 260 list->Add(rechit);; 261 }; 262 fListData.push_back(list);; 263 }; 264 ; 265 void Clear(); 266 {; 267 for (auto &l : fListData); 268 delete l;; 269 fListData.clear();; 270 }; 271 ; 272 void Create(); 273 {; 274 Clear();; 275 MakeJets(4);; 276 MakeParticles(100);; 277 MakeRecHits(20);; 278 ; 279 // refill calo data from jet list; 280 TList* jlist = fListData[0];; 281 TList* elist = new TList();; 282 elist->SetName(""ECAL"");; 283 fListData.push_back(elist);; 284 TList* hlist = new TList();; 285 hlist->SetName(""HCAL"");; 286 fListData.push_back(hlist);; 287 for (int i = 0; i <= jlist->GetLast(); ++i) {; 288 const Jet* j = (Jet*)jlist->At(i);; 289 float offX = j->Eta();; 290 float offY = j->Phi() > TMath::Pi() ? j->Phi() - TMath::TwoPi() : j->Phi();; 291 for (int k=0; k<20; ++k) {; 292 double x, y, v;; 293 x = gRandom->Uniform(-j->GetEtaSize(), j->GetEtaSize());; 294 y = gRandom->Uniform(-j->GetPhiSize(),j->GetPhiSize());; 295 v = j->Pt();; 296 auto etower = new RCaloTower(offX + x, offY + y, v + gRandom->Uniform(2,3));; 297 elist->Add(etower);; 298 auto htower = new RCaloTower(offX + x, offY + y, v + gRandom->Uniform(1,2));; 299 hlist->Add(htower);; 300 }; 301 }; 302 fCaloData->DataChanged();; 303 eventId++;; 304 }; 305};; 306 ; 307 ; 308//=============================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/collection__proxies_8C_source.html:8751,clear,clear,8751,doc/master/collection__proxies_8C_source.html,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"etadata of TFileInfo. By default the first one is taken. ; Definition at line 1185 of file TDSet.cxx. ◆ AddFriend(). void TDSet::AddFriend ; (; TDSet * ; friendset, . const char * ; alias . ). virtual . Add friend dataset to this set. ; Only possible if the TDSet type is a TTree or derived class. The friendset will be owned by this class and deleted in its destructor. ; Definition at line 1335 of file TDSet.cxx. ◆ AddInput(). void TDSet::AddInput ; (; TObject * ; obj). Add objects that might be needed during the processing of the selector (see Process()). ; Definition at line 966 of file TDSet.cxx. ◆ Class(). static TClass * TDSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 262 of file TDSet.h. ◆ ClearInput(). void TDSet::ClearInput ; (; ). Clear input object list. ; Definition at line 978 of file TDSet.cxx. ◆ Current(). TDSetElement * TDSet::Current ; (; ); const. inline . Definition at line 238 of file TDSet.h. ◆ DeclFileName(). static const char * TDSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 262 of file TDSet.h. ◆ Draw() [1/3]. Long64_t TDSet::Draw ; (; const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). virtual . Draw expression varexp for specified entries. ; Returns -1 in case of error or number of selected events in case of success. For more see TTree::Draw(). ; Definition at line 1501 of file TDSet.cxx. ◆ Draw() [2/3]. Long64_t TDSet::Draw ; (; const char * ; varexp, . const TCut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). virtual . Draw expression varexp for specified entries. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:21715,Clear,ClearInput,21715,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['Clear'],['ClearInput']
Usability,"etail described in [4], [5]. It allows to identify automatically the peaks in a spectrum with the presence of the continuous background and statistical fluctuations - noise. The algorithm is based on smoothed second differences that are compared to its standard deviations. Therefore it is necessary to pass a parameter of sigma to the peak searching function. The algorithm is selective to the peaks with the given sigma. The form of the basic peak searching function is; Int-t Search1(const float *spectrum,; int size,; double sigma);; This function searches for peaks in source spectrum. The number of found peaks and their positions are written into structure pointed by one_dim_peak structure pointer.; Function parameters:. source pointer to the vector of source spectrum; p pointer to the one_dim_peak structure pointer; size length of source spectrum; sigma sigma of searched peaks. The structure one_dim_peak has the form:; struct one_dim_peak{; int number_of_peaks;; double position[MAX_NUMBER_OF_PEAKS1];; };; An example of simple one-dimensional spectrum with identified peaks is given in Figure 3.1. Simple one-dimensional spectrum with identified peaks. An example of 1-dimensional experimental spectrum with many identified peaks is given in Figure 3.2. 1-dimensional experimental spectrum with many identified peaks. However when we have noisy data the number of peaks can be enormous. One such an example is given in Figure 3.3. Therefore it can be useful to have possibility to set a threshold value and to consider only the peaks higher than this threshold (see Figure 3.4, only three peaks were identified, threshold=50.) The value in the center of the peak value[i] minus the average value in two symmetrically positioned channels (channels i-3*sigma, i+3*sigma) must be greater than threshold. Otherwise the peak is ignored. With noisy data the number of peaks can be enormous. Iwth threshold=50, only three peaks were identified. An alternative approach was proposed in [6].. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:16471,simpl,simple,16471,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"ete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoBoolNode ();  Default constructor. ;  ;  TGeoBoolNode (const char *expr1, const char *expr2);  Constructor called by TGeoCompositeShape providing 2 subexpressions for the 2 branches. ;  ;  TGeoBoolNode (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing left and right shapes and matrices (in the Boolean operation). ;  ;  ~TGeoBoolNode () override;  Destructor. ;  ; void ClearThreadData () const;  ; virtual void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin)=0;  ; virtual void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm)=0;  ; virtual Bool_t Contains (const Double_t *point) const =0;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t DistanceToPrimitive (Int_t px, Int_t py)=0;  ; virtual Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const =0;  ; virtual Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const =0;  ; virtual EGeoBoolType GetBooleanOperator () const =0;  ; TGeoMatrix * GetLeftMatrix () const;  ; TGeoShape * GetLeftShape () const;  ; virtual Int_t GetNpoints ()=0;  ; TGeoMatrix * GetRightMatrix () const;  ; TGeoShape * GetRightShape () const;  ; ThreadData_t & GetThreadData () const;  ; TClass * IsA () const override;  ; virtual TGeoBoolNode * MakeClone () const =0;  ; void Paint (Option_t *option) override;  Special schema for feeding the 3D buffers to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:2575,Clear,ClearThreadData,2575,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,1,['Clear'],['ClearThreadData']
Usability,"ete(Option_t * = """") override { MayNotUse(""Delete()""); }; 121 void DisconnectWidget(); // used by TCanvasImp; 122 void Draw(Option_t *option="""") override;; 123 TObject *DrawClone(Option_t *option="""") const override; // *MENU*; 124 virtual TObject *DrawClonePad(); // *MENU*; 125 virtual void EditorBar();; 126 void EmbedInto(Int_t winid, Int_t ww, Int_t wh);; 127 void EnterLeave(TPad *prevSelPad, TObject *prevSelObj);; 128 void FeedbackMode(Bool_t set);; 129 void Flush();; 130 void UseCurrentStyle() override; // *MENU*; 131 void ForceUpdate();; 132 const char *GetDISPLAY() const {return fDISPLAY.Data();}; 133 TContextMenu *GetContextMenu() const {return fContextMenu;};; 134 Int_t GetDoubleBuffer() const {return fDoubleBuffer;}; 135 Int_t GetEvent() const override { return fEvent; }; 136 Int_t GetEventX() const override { return fEventX; }; 137 Int_t GetEventY() const override { return fEventY; }; 138 Color_t GetHighLightColor() const override { return fHighLightColor; }; 139 TVirtualPad *GetPadSave() const override { return fPadSave; }; 140 void ClearPadSave() { fPadSave = nullptr; }; 141 TObject *GetSelected() const override { return fSelected; }; 142 TObject *GetClickSelected() const { return fClickSelected; }; 143 Int_t GetSelectedX() const { return fSelectedX; }; 144 Int_t GetSelectedY() const { return fSelectedY; }; 145 Option_t *GetSelectedOpt() const { return fSelectedOpt.Data(); }; 146 TVirtualPad *GetSelectedPad() const override { return fSelectedPad; }; 147 TVirtualPad *GetClickSelectedPad() const { return fClickSelectedPad; }; 148 Bool_t GetShowEventStatus() const { return TestBit(kShowEventStatus); }; 149 Bool_t GetShowToolBar() const { return TestBit(kShowToolBar); }; 150 Bool_t GetShowEditor() const { return TestBit(kShowEditor); }; 151 Bool_t GetShowToolTips() const { return TestBit(kShowToolTips); }; 152 Bool_t GetAutoExec() const { return TestBit(kAutoExec); }; 153 Size_t GetXsizeUser() const { return fXsizeUser; }; 154 Size_t GetYsizeUser() const { re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8h_source.html:5997,Clear,ClearPadSave,5997,doc/master/TCanvas_8h_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8h_source.html,1,['Clear'],['ClearPadSave']
Usability,"eteParameters(const char* wildcard); Delete the input list parameters specified by a wildcard (e.g. PROOF_*); or exact name (e.g. PROOF_MaxSlavesPerNode). void ShowParameters(const char* wildcard = ""PROOF_*"") const; Show the input list parameters specified by the wildcard.; Default is the special PROOF control parameters (PROOF_*). void AddFeedback(const char* name); Add object to feedback list. void RemoveFeedback(const char* name); Remove object from feedback list. void ClearFeedback(); Clear feedback list. void ShowFeedback() const; Show items in feedback list. TList * GetFeedbackList() const; Return feedback list. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. TDrawFeedback * CreateDrawFeedback(); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. TList * GetOutputNames(); FIXME: to be written. void Browse(TBrowser* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Displ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:75207,feedback,feedback,75207,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['feedback'],['feedback']
Usability,"etedDefinition TObject.h:62; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TPluginHandlerDefinition TPluginManager.h:103; TROOT::IncreaseDirLevelstatic Int_t IncreaseDirLevel()Increase the indentation level for ls().Definition TROOT.cxx:2887; TROOT::DecreaseDirLevelstatic Int_t DecreaseDirLevel()Decrease the indentation level for ls().Definition TROOT.cxx:2746; TSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and...Definition TSelector.h:31; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::InsertTString & Insert(Ssiz_t pos, const char *s)Definition TString.h:661; TString::Clearvoid Clear()Clear string without changing its capacity.Definition TString.cxx:1235; TString::ReplaceTString & Replace(Ssiz_t pos, Ssiz_t n, const char *s)Definition TString.h:694; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::MaybeWildcardBool_t MaybeWildcard() constReturns true if string contains one of the wildcard characters ""[]*?"".Definition TString.cxx:964; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:141730,Clear,Clearvoid,141730,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,3,['Clear'],"['Clear', 'Clearvoid']"
Usability,"eter number ipar.Definition TF1.cxx:3450; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::Scalevirtual void Scale(Double_t c1=1, Option_t *option="""")Multiply this histogram by a constant c1.Definition TH1.cxx:6604; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TMath::AreEqualAbsBool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon)Comparing floating points.Definition TMath.h:418; fitNormSumDefinition fitNormSum.py:1; t1auto * t1Definition textangle.C:20; AuthorLorenzo Moneta ; Definition in file fitNormSum.C. tutorialsfitfitNormSum.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8C.html:7620,Guid,Guide,7620,doc/master/fitNormSum_8C.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8C.html,1,['Guid'],['Guide']
Usability,"ethod Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method ; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCommittee Analysis of Boosted MVA methods; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:100783,simpl,simple,100783,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,2,['simpl'],['simple']
Usability,"ethod Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method ; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCommittee Analysis of Boosted MVA methods; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::Optimi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:101971,simpl,simple,101971,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,4,['simpl'],['simple']
Usability,"ethod for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf709_BarlowBeeston.py;   Implementing the Barlow-Beeston method for taking into account the statistical uncertainty of a Monte-Carlo fit template. ;  ; file  rf710_roopoly.C;   Taylor expansion of RooFit functions using the taylorExpand function with RooPolyFunc ;  ; file  rf710_roopoly.py;   Taylor expansion of RooFit functions using the taylorExpand function ;  ; file  rf711_lagrangianmorph.C;   Morphing effective field theory distributions with RooLagrangianMorphFunc A morphing function as a function of one coefficient is setup and can be used to obtain the distribution for any value of the coefficient. ;  ; file  rf711_lagrangianmorph.py;   Morphing effective field theory distributions with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.C;   Performing a simple fit with RooLagrangianMorphFunc. ;  ; file  rf712_lagrangianmorphfit.py;   Performing a simple fit with RooLagrangianMorphFunc ;  ; file  rf801_mcstudy.C;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf801_mcstudy.py;   Validation and MC studies: toy Monte Carlo study that perform cycles of event generation and fitting ;  ; file  rf802_mcstudy_addons.C;   Validation and MC studies: RooMCStudy - using separate fit and generator models, using the chi^2 calculator model Running a biased fit model against an optimal fit. ;  ; file  rf803_mcstudy_addons2.C;   Validation and MC studies: RooMCStudy - Using the randomizer and profile likelihood add-on models ;  ; file  rf804_mcstudy_constr.C;   Validation and MC studies: using RooMCStudy on models with constrains ;  ; file  rf901_numintconfig.C;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are executed ;  ; file  rf901_numintconfig.py;   Numeric algorithm tuning: configuration and customization of how numeric (partial) integrals are ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:22768,simpl,simple,22768,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['simpl'],['simple']
Usability,"ethod title. . Definition at line 935 of file Classification.cxx. ◆ Train(). void TMVA::Experimental::Classification::Train ; (; ). virtual . Method to train all booked ml methods. ; Definition at line 324 of file Classification.cxx. ◆ TrainMethod() [1/2]. void TMVA::Experimental::Classification::TrainMethod ; (; TString ; methodname, . TString ; methodtitle . ). virtual . Lets train an specific ml method. ; Parameters. methodnamename of the method. ; methodtitlemethod title. . Definition at line 337 of file Classification.cxx. ◆ TrainMethod() [2/2]. void TMVA::Experimental::Classification::TrainMethod ; (; Types::EMVA ; method, . TString ; methodtitle . ). virtual . Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ; Parameters. methodTMVA::Types::EMVA type. ; methodtitlemethod title. . Definition at line 373 of file Classification.cxx. Member Data Documentation. ◆ fAnalysisType. Types::EAnalysisType TMVA::Experimental::Classification::fAnalysisType. private . ! ; Definition at line 165 of file Classification.h. ◆ fCorrelations. Bool_t TMVA::Experimental::Classification::fCorrelations. private . ! ; Definition at line 166 of file Classification.h. ◆ fIMethods. std::vector<IMethod *> TMVA::Experimental::Classification::fIMethods. private . ! vector of objects with booked methods ; Definition at line 164 of file Classification.h. ◆ fResults. std::vector<ClassificationResult> TMVA::Experimental::Classification::fResults. private . ! ; Definition at line 163 of file Classification.h. ◆ fROC. Bool_t TMVA::Experimental::Classification::fROC. private . ! ; Definition at line 167 of file Classification.h. Libraries for TMVA::Experimental::Classification:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Classification.h; tmva/tmva/src/Classification.cxx. TMVAExperimentalClassification. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:28969,Guid,Guide,28969,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['Guid'],['Guide']
Usability,"ethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7352 ""TCheckHashRecursiveRemoveConsistency"", ""TGWindow"",; 7353 ""TDirectory"", ""TDirectoryFile"", ""TObject"", ""TH1"",; 7354 ""TQClass"", ""TGlobal"" };; 7355 ; 7356 if (cname && cname[0]) {; 7357 for (auto cursor : handVerified) {; 7358 if (strcmp(cname, cursor) == 0); 7359 return true;; 7360 }; 7361 }; 7362 return false;; 7363}; 7364 ; 7365////////////////////////////////////////////////////////////////////////////////; 7366/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7367/// classes in the class hierarchy that overload TObject::Hash do call; 7368/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7369/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7370 ; 7371Bool_t ROOT::Internal::HasConsistentHashMember(TClass &clRef); 7372{; 7373 return clRef.HasConsistentHashMember();; 7374}; 7375 ; 7376////////////////////////////////////////////////////////////////////////////////; 7377/// Return true if we have access to a constructor usable for I/O. This is; 7378/// typically the default constructor but can also be a constructor specifically; 7379/// marked for I/O (for example a constructor taking a TRootIOCtor* as an; 7380/// argument). In other words, if this routine returns true, TClass::New is; 7381/// guarantee to succeed.; 7382/// To know if the class described by this TClass has a default constructor; 7383/// (public or not), use; 7384/// \code{.cpp}; 7385/// cl->GetProperty() & kClassHasDefaultCtor; 7386/// \endcode; 7387/// To know if the class described by this TClass has a public default; 7388/// constructor use:; 7389/// \code{.cpp}; 7390/// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; 7391/// \endcode; 7392 ; 7393Bool_t TClass::HasDefaultConstructor(Bool_t testio) const; 7394{; 7395 ; 7396 if (fNew) return kTRUE;; 7397 ; 7398 if (HasInterpreterInfo()) {; 7399 R__LOCKGUARD(gInterpreterMutex);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:283369,usab,usable,283369,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['usab'],['usable']
Usability,"ethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7419 ""TCheckHashRecursiveRemoveConsistency"", ""TGWindow"",; 7420 ""TDirectory"", ""TDirectoryFile"", ""TObject"", ""TH1"",; 7421 ""TQClass"", ""TGlobal"" };; 7422 ; 7423 if (cname && cname[0]) {; 7424 for (auto cursor : handVerified) {; 7425 if (strcmp(cname, cursor) == 0); 7426 return true;; 7427 }; 7428 }; 7429 return false;; 7430}; 7431 ; 7432////////////////////////////////////////////////////////////////////////////////; 7433/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7434/// classes in the class hierarchy that overload TObject::Hash do call; 7435/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7436/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7437 ; 7438Bool_t ROOT::Internal::HasConsistentHashMember(TClass &clRef); 7439{; 7440 return clRef.HasConsistentHashMember();; 7441}; 7442 ; 7443////////////////////////////////////////////////////////////////////////////////; 7444/// Return true if we have access to a constructor usable for I/O. This is; 7445/// typically the default constructor but can also be a constructor specifically; 7446/// marked for I/O (for example a constructor taking a TRootIOCtor* as an; 7447/// argument). In other words, if this routine returns true, TClass::New is; 7448/// guarantee to succeed.; 7449/// To know if the class described by this TClass has a default constructor; 7450/// (public or not), use; 7451/// \code{.cpp}; 7452/// cl->GetProperty() & kClassHasDefaultCtor; 7453/// \endcode; 7454/// To know if the class described by this TClass has a public default; 7455/// constructor use:; 7456/// \code{.cpp}; 7457/// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; 7458/// \endcode; 7459 ; 7460Bool_t TClass::HasDefaultConstructor(Bool_t testio) const; 7461{; 7462 ; 7463 if (fNew) return kTRUE;; 7464 ; 7465 if (HasInterpreterInfo()) {; 7466 R__LOCKGUARD(gInterpreterMutex);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:286120,usab,usable,286120,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['usab'],['usable']
Usability,"ethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass*); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::Des",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPieEditor.html:1613,Clear,Clear,1613,root/html528/TPieEditor.html,https://root.cern,https://root.cern/root/html528/TPieEditor.html,6,['Clear'],['Clear']
Usability,"ethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidvector<long>::assign(initializer_list<vector<long>::value_type> __l); voidvector<long>::assign(vector<bool>::size_type __n, const vector<long>::value_type& __val); vector<long>::referencevector<long>::at(vector<bool>::size_type __n); vector<long>::const_referencevector<long>::at(vector<bool>::size_type __n) const; vector<long>::referencevector<long>::back(); vector<long>::const_referencevector<long>::back() const; TTable::iteratorBegin(); TTable::iteratorBegin() const; vector<long>::iteratorvector<long>::begin(); vector<long>::const_iteratorvector<long>::begin() const; virtual voidTObject::Browse(TBrowser* b); vector<bool>::size_typevector<long>::capacity() const; vector<long>::const_iteratorvector<long>::cbegin() const; vector<long>::const_iteratorvector<long>::cend() const; static TClass*Class(); virtual const char*TObject::ClassName() const; voidvector<long>::clear(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; vector<long>::const_reverse_iteratorvector<long>::crbegin() const; vector<long>::const_reverse_iteratorvector<long>::crend() const; long*vector<long>::data(); const long*vector<long>::data() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; boolvector<long>::empty() const; TTable::iteratorEnd(); TTable::iteratorEnd() const; vector<long>::iteratorvector<long>::end(); vector<long>::const_iteratorvector<long>::end() const; vector<long>::iteratorvector<long>::erase(vector<long>::iterator __position); vector<long>::iteratorvec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableMap.html:2472,Clear,Clear,2472,root/html602/TTableMap.html,https://root.cern,https://root.cern/root/html602/TTableMap.html,1,['Clear'],['Clear']
Usability,"ethod) const; virtual Bool_tRooAbsCollection::add(const RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tRooAbsCollection::add(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual RooAbsArg*RooAbsCollection::addClone(const RooAbsArg& var, Bool_t silent = kFALSE); virtual voidRooAbsCollection::addClone(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_tRooAbsCollection::addOwned(RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tRooAbsCollection::addOwned(const RooAbsCollection& list, Bool_t silent = kFALSE); Bool_tRooAbsCollection::allInRange(const char* rangeSpec) const; virtual voidTObject::AppendPad(Option_t* option = """"); RooAbsCollection&RooAbsCollection::assignFast(const RooAbsCollection& other); RooAbsCollection&RooAbsCollection::assignValueOnly(const RooAbsCollection& other); RooAbsArg*at(Int_t idx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsCollection::Clone(const char* newname = 0) const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tRooAbsCollection::contains(const RooAbsArg& var) const; Bool_tRooAbsCollection::containsInstance(const RooAbsArg& var) const; stringRooAbsCollection::contentsString() const; virtual voidTObject::Copy(TObject& object) const; virtual TObject*create(const char* newname) const; TIterator*RooAbsCollection::createIterator(Bool_t dir = kIterForward) const; virtual Int_tRooAbsCollection::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgList.html:3725,Clear,Clear,3725,root/html526/RooArgList.html,https://root.cern,https://root.cern/root/html526/RooArgList.html,2,['Clear'],['Clear']
Usability,"ethod) const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1D.html:1767,Clear,Clear,1767,root/html528/TH1D.html,https://root.cern,https://root.cern/root/html528/TH1D.html,3,['Clear'],['Clear']
Usability,"ethod) const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2D.html:2114,Clear,Clear,2114,root/html528/TH2D.html,https://root.cern,https://root.cern/root/html528/TH2D.html,3,['Clear'],['Clear']
Usability,"ethod) const; virtual voidTH1::Add(const TH1* h1, Double_t c1 = 1); virtual voidTH1::Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); virtual voidTH1::Add(const TH1* h, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTH1::Divide(const TH1* h1); virtual voidTH1::Divide(TF1* f1, Double_t c1 = 1); virtual voidTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH3D.html:1955,Clear,Clear,1955,root/html528/TH3D.html,https://root.cern,https://root.cern/root/html528/TH3D.html,3,['Clear'],['Clear']
Usability,"ethod. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. RooAbsGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t _verbose = kFALSE). Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void setExpectedData(Bool_t ); {}. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Tue Jun 30 14:30:07 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsGenContext.html:12108,clear,clear,12108,root/html602/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html602/RooAbsGenContext.html,1,['clear'],['clear']
Usability,ethods); public:. TGeoIterator(TGeoVolume* top); TGeoIterator(const TGeoIterator& iter); virtual~TGeoIterator(); static TClass*Class(); const TGeoMatrix*GetCurrentMatrix() const; Int_tGetIndex(Int_t i) const; Int_tGetLevel() const; TGeoNode*GetNode(Int_t level) const; voidGetPath(TString& path) const; TGeoVolume*GetTopVolume() const; Int_tGetType() const; TGeoIteratorPlugin*GetUserPlugin() const; virtual TClass*IsA() const; TGeoNode*Next(); TGeoNode*operator()(); TGeoIterator&operator=(const TGeoIterator& iter); voidReset(TGeoVolume* top = 0); voidSetPluginAutoexec(Bool_t mode); voidSetTopName(const char* name); voidSetType(Int_t type); voidSetUserPlugin(TGeoIteratorPlugin* plugin); virtual voidShowMembers(TMemberInspector& insp); voidSkip(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TGeoIterator(). private:. voidIncreaseArray(). Data Members; private:. Int_t*fArrayArray of node indices for the current path; Int_tfLevelCurrent level in the tree; TGeoHMatrix*fMatrixCurrent global matrix; Bool_tfMustResumePrivate flag to resume from current node.; Bool_tfMustStopPrivate flag to signal that the iterator has finished.; TGeoIteratorPlugin*fPluginUser iterator plugin; Bool_tfPluginAutoexecPlugin automatically executed during next() ; TGeoVolume*fTopTop volume of the iterated branch; TStringfTopNameUser name for top; Int_tfTypeType of iteration. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoIterator(TGeoVolume* top); Geometry iterator for a branch starting with a TOP node. TGeoIterator(const TGeoIterator& iter); Copy ctor. ~TGeoIterator(); Destructor. TGeoIterator & operator=(const TGeoIterator& iter); Assignment. TGeoNode * Next(); Returns next node. TGeoNode * operator()(); Returns next node. const TGeoMatrix * GetCurrentMatrix() const; Returns global matrix for current node. TGeoNode * GetNode(Int_t level) const; Returns current node at a given level. void GetPath(TString& path) const;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoIterator.html:4319,resume,resume,4319,root/html528/TGeoIterator.html,https://root.cern,https://root.cern/root/html528/TGeoIterator.html,3,['resume'],['resume']
Usability,"ethods); public:. virtual~RooCmdConfig(); voidTObject::AbstractMethod(const char* method) const; voidallowUndefined(Bool_t flag = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Int_tdecodeIntOnTheFly(const char* callerID, const char* cmdArgName, Int_t intIdx, Int_t defVal, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg()); static TObject*decodeObjOnTheFly(const char* callerID, const char* cmdArgName, Int_t objIdx, TObject* defVal, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg()); static const char*decodeStringOnTheFly(const char* callerID, const char* cmdArgName, Int_t intIdx, const char* defVal, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg()); voiddefineDependency(const char* refArgName, const char* neededArgName); Bool_tdefineDouble(const char* name, const char* argName, Int_t doubleNum, Double_t defValue = 0.); Bool_tdefineIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCmdConfig.html:1042,Clear,Clear,1042,root/html602/RooCmdConfig.html,https://root.cern,https://root.cern/root/html602/RooCmdConfig.html,2,['Clear'],['Clear']
Usability,etime(). virtual Float_t TVirtualMCDecayer::GetLifetime ; (; Int_t ; kf). pure virtual . Get the life-time of a particle of type KF (a PDG code). ; Implemented in TPythia8Decayer. ◆ GetPartialBranchingRatio(). virtual Float_t TVirtualMCDecayer::GetPartialBranchingRatio ; (; Int_t ; ipart). pure virtual . Get the partial branching ratio for a particle of type IPART (a PDG code). ; Implemented in TPythia8Decayer. ◆ ImportParticles(). virtual Int_t TVirtualMCDecayer::ImportParticles ; (; TClonesArray * ; particles). pure virtual . Get the decay products into the passed PARTICLES TClonesArray of TParticles. ; Implemented in TPythia8Decayer. ◆ Init(). virtual void TVirtualMCDecayer::Init ; (; ). pure virtual . Initialize the decayer. ; Implemented in TPythia8Decayer. ◆ IsA(). TClass * TVirtualMCDecayer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 57 of file TVirtualMCDecayer.h. ◆ ReadDecayTable(). virtual void TVirtualMCDecayer::ReadDecayTable ; (; ). pure virtual . Read in particle data from an ASCII file. . The file name must previously have been set using the member function SetDecayTableFile. ; Implemented in TPythia8Decayer. ◆ SetForceDecay(). virtual void TVirtualMCDecayer::SetForceDecay ; (; Int_t ; type). pure virtual . Force a particular decay type. ; Implemented in TPythia8Decayer. ◆ Streamer(). void TVirtualMCDecayer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualMCDecayer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TVirtualMCDecayer.h. Libraries for TVirtualMCDecayer:. [legend]; The documentation for this class was generated from the following file:; montecarlo/eg/inc/TVirtualMCDecayer.h. TVirtualMCDecayer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMCDecayer.html:14188,Guid,Guide,14188,doc/master/classTVirtualMCDecayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualMCDecayer.html,1,['Guid'],['Guide']
Usability,"ette::TEveRGBAPalette ; (; ). Constructor. ; Definition at line 33 of file TEveRGBAPalette.cxx. ◆ TEveRGBAPalette() [3/3]. TEveRGBAPalette::TEveRGBAPalette ; (; Int_t ; min, . Int_t ; max, . Bool_t ; interp = kTRUE, . Bool_t ; showdef = kTRUE, . Bool_t ; fixcolrng = kFALSE . ). Constructor. ; Definition at line 65 of file TEveRGBAPalette.cxx. ◆ ~TEveRGBAPalette(). TEveRGBAPalette::~TEveRGBAPalette ; (; ). override . Destructor. ; Definition at line 98 of file TEveRGBAPalette.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveRGBAPalette::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveRGBAPalette::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveRGBAPalette::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 160 of file TEveRGBAPalette.h. ◆ ClearColorArray(). void TEveRGBAPalette::ClearColorArray ; (; ). Clear internal color array. ; Definition at line 152 of file TEveRGBAPalette.cxx. ◆ ColorFromValue() [1/3]. const UChar_t * TEveRGBAPalette::ColorFromValue ; (; Int_t ; val); const. inline . Definition at line 179 of file TEveRGBAPalette.h. ◆ ColorFromValue() [2/3]. Bool_t TEveRGBAPalette::ColorFromValue ; (; Int_t ; val, . Int_t ; defVal, . UChar_t * ; pix, . Bool_t ; alpha = kTRUE . ); const. inline . Definition at line 217 of file TEveRGBAPalette.h. ◆ ColorFromValue() [3/3]. void TEveRGBAPalette::ColorFromValue ; (; Int_t ; val, . UChar_t * ; pix, . Bool_t ; alpha = kTRUE . ); const. inline . Definition at line 209 of file TEveRGBAPalette.h. ◆ DeclFileName(). static const char * TEveRGBAPalette::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 160 of file TEveRGBAPalette.h. ◆ DoubleToInt(). Int_t TEveRGBAPalette::DoubleToInt ; (; Double_t ; d); const. inlineprotected . Definition at line 69 of file TEveRGBAPalette.h. ◆ GetCAMaxAsDo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveRGBAPalette.html:21119,Clear,Clear,21119,doc/master/classTEveRGBAPalette.html,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html,1,['Clear'],['Clear']
Usability,"eturn a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Static Public Attributes; static constexpr value_type NoCatIdx = std::numeric_limits<value_type>::min();  . Protected Member Functions; value_type evaluate () const override;  Evaluate the category state and return. ;  ; const RooMappedCategoryCache * getOrCreateCache () const;  ; void recomputeShape () override;  When the input category changes states, the cached state mappings are invalidated. ;  ;  Protected Member Functions inherited from RooAbsCategory; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach the category index and label as branches to the given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  Attach the category index and label to as branches to the given vector store. ;  ; void clearTypes ();  Delete all currently defined states. ;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValueDirty=true) override;  Copy the cached value from given source and raise dirty flag. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label);  Define a new state with given label. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label, value_type index);  Define new state with given name and index number. ;  ; void defineStateUnchecked (const std::string &label, value_type index);  Internal version of defineState() that does not check if type already exists. ;  ; void fillTreeBranch (TTree &t) override;  Fill tree branches associated with current object with current value. ;  ; bool isValid () const override;  WVE (08/21/01) Probably obsolete now. ;  ; value_type nextAvailableStateIndex () const;  ; RooCatType * retrieveLegacyState (value_ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:35627,clear,clearTypes,35627,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['clear'],['clearTypes']
Usability,"eturn an asymmetric and non-zero lower; error for the case b1=b2. The function return kFALSE if the divide operation failed. void Draw(Option_t* option = """"); Draw this histogram with options. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in different pads.; When an histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If an histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of an histogram in a pad, one can use; h->DrawCopy();; This makes a clone of the histogram. Once the clone is drawn, the original; histogram may be modified or deleted without affecting the aspect of the; clone.; By default, TH1::Draw clears the current pad. One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; value for the maximum or the minimum scale on the plot. TH1::UseCurrentStyle can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle();. See the THistPainter class for a description of all the drawing options. TH1 * DrawCopy(Option_t* option = """") const; -*-*-*-*-*Copy this histogram and Draw in the current pad*-*-*-*-*-*-*-*. Once the histogram is drawn into the pad, any further modification; using graphics input will be made on the copy of the histogram,; and not to the original object. See Draw for the list of options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. TH1 * DrawNormalized(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:65438,clear,clears,65438,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['clear'],['clears']
Usability,"eturn an asymmetric and non-zero lower; error for the case b1=b2. The function return kFALSE if the divide operation failed. void Draw(Option_t* option = """"); Draw this histogram with options. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in different pads.; When an histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If an histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of an histogram in a pad, one can use; h->DrawCopy();; This makes a clone of the histogram. Once the clone is drawn, the original; histogram may be modified or deleted without affecting the aspect of the; clone.; By default, TH1::Draw clears the current pad. One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; value for the maximum or the minimum scale on the plot. TH1::UseCurrentStyle can be used to change all histogram graphics; attributes to correspond to the current selected style.; This function must be called for each histogram.; In case one reads and draws many histograms from a file, one can force; the histograms to inherit automatically the current graphics style; by calling before gROOT->ForceStyle();. See the THistPainter class for a description of all the drawing options. TH1 * DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; Copy this histogram and Draw in the current pad. Once the histogram is drawn into the pad, any further modification; using graphics input will be made on the copy of the histogram,; and not to the original object.; By default a postfix ""_copy"" is added to the histogram name. Pass an empty postfix in case; you want to draw an histogram with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:66608,clear,clears,66608,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['clear'],['clears']
Usability,"eturn default color for nodes. Bool_t GetLinksVisibility() const; Returns true if links are visible, otherwise return false. TStructNode* GetNodePtr() const; Returns top node pointer. void GLWidgetProcessedEventSlot(Event_t* event); Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. void LevelDistValueSetSlot(Long_t dist); Emmited when user changes distance between levels. void MouseOverSlot(TGLPhysicalShape* shape); MouseOver slot. Activated when user out mouse over object on scene.; Sets ToolTip and updates labels. void RedoButtonSlot(); Activated when user click Redo button. Repeat last Undo action. void ResetButtonSlot(); Resets camera. void Scale(TStructNode* parent); Recursive method to scaling all modes on scene. We have to scale nodes to get real ratio between nodes.; Uses fMaxRatio. void SetNodePtr(TStructNode* val); Sets top node pointer and updates view. void SetLinksVisibility(Bool_t val); Sets links visibility to ""visible"". void SetPointerButtonSlot(); Sets pointer given in fPointerTestEntry to the main pointer. void ShowLinksToggled(Bool_t on); Changes links visibility and refresh view. void UnCheckMaxObjects(); Shows hidden nodes. void Update(Bool_t resetCamera = false); Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. void UpdateButtonSlot(); Update button slot. Updates scene. void UpdateLabels(TStructNode* node); Refresh information in labels when user put mouse over object. void UndoButtonSlot(); UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. void ScaleByChangedSlot(); Activated when user press radio button. » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStructViewerGUI.html:28207,Clear,Clear,28207,root/html534/TStructViewerGUI.html,https://root.cern,https://root.cern/root/html534/TStructViewerGUI.html,4,"['Clear', 'Undo']","['Clear', 'Undo', 'UndoButton', 'UndoButtonSlot']"
Usability,"eturn destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TSqlCmdsBuffer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSqlCmdsBuffer(). TSqlCmdsBuffer::TSqlCmdsBuffer ; (; TSQLFile * ; f, . TSQLClassInfo * ; info . ). inline . Definition at line 790 of file TSQLStructure.cxx. ◆ ~TSqlCmdsBuffer(). TSqlCmdsBuffer::~TSqlCmdsBuffer ; (; ). inlineoverride . Definition at line 792 of file TSQLStructure.cxx. Member Function Documentation. ◆ AddValues(). void TSqlCmdsBuffer::AddValues ; (; Bool_t ; isnorm, . const char * ; values . ). inline . Definition at line 800 of file TSQLStructure.cxx. Member Data Documentation. ◆ fBlobCmds. TObjArray TSqlCmdsBuffer::fBlobCmds. Definition at line 812 of file TSQLStructure.cxx. ◆ fBlobStmt. TSQLStatement* TSqlCmdsBuffer::fBlobStmt. Definition at line 813 of file TSQLStructure.cxx. ◆ fFile. TSQLFile* TSqlCmdsBuffer::fFile. Definition at line 809 of file TSQLStructure.cxx. ◆ fInfo. TSQLClassInfo* TSqlCmdsBuffer::fInfo. Definition at line 810 of file TSQLStructure.cxx. ◆ fNormCmds. TObjArray TSqlCmdsBuffer::fNormCmds. Definition at line 811 of file TSQLStructure.cxx. ◆ fNormStmt. TSQLStatement* TSqlCmdsBuffer::fNormStmt. Definition at line 814 of file TSQLStructure.cxx. io/sql/src/TSQLStructure.cxx. TSqlCmdsBuffer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlCmdsBuffer.html:11136,Guid,Guide,11136,doc/master/classTSqlCmdsBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlCmdsBuffer.html,1,['Guid'],['Guide']
Usability,eturn fCanEditMainTrans; }. Bool_t HasMainTrans() const; { return fMainTrans != 0; }. TRef& GetSource(); { return fSource; }. TObject* GetSourceObject() const; { return fSource.GetObject(); }. void SetSourceObject(TObject* o). void DumpSourceObject(); // *MENU*; void InspectSourceObject(); // *MENU*. { fSource = o; }. void* GetUserData() const; { return fUserData; }. void SetUserData(void* ud); { fUserData = ud; }. Bool_t IsPickable() const; { return fPickable; }. void SetPickable(Bool_t p); { fPickable = p; }. void SetCSCBits(UChar_t f); { fCSCBits |= f; }. void ResetCSCBits(UChar_t f); { fCSCBits &= ~f; }. Bool_t TestCSCBits(UChar_t f) const; { return (fCSCBits & f) != 0; }. void ResetAllCSCBits(); { fCSCBits = 0; }. void CSCImplySelectAllChildren(); { fCSCBits |= kCSCBImplySelectAllChildren; }. void CSCTakeAnyParentAsMaster(); { fCSCBits |= kCSCBTakeAnyParentAsMaster; }. void CSCApplyMainColorToAllChildren(); { fCSCBits |= kCSCBApplyMainColorToAllChildren; }. void CSCApplyMainColorToMatchingChildren(); { fCSCBits |= kCSCBApplyMainColorToMatchingChildren; }. void CSCApplyMainTransparencyToAllChildren(); { fCSCBits |= kCSCBApplyMainTransparencyToAllChildren; }. void CSCApplyMainTransparencyToMatchingChildren(); { fCSCBits |= kCSCBApplyMainTransparencyToMatchingChildren; }. void StampColorSelection(); { AddStamp(kCBColorSelection); }. void StampTransBBox(); { AddStamp(kCBTransBBox); }. void StampObjProps(); { AddStamp(kCBObjProps); }. void StampVisibility(); void StampElementAdded() { AddStamp(kCBElementAdded); }; void StampElementRemoved() { AddStamp(kCBElementRemoved); }. { AddStamp(kCBVisibility); }. void ClearStamps(); { fChangeBits = 0; }. UChar_t GetChangeBits() const; { return fChangeBits; }. » Last changed: root/eve:$Id: TEveElement.h 36374 2010-10-19 17:50:23Z matevz $ » Last generated: 2010-10-20 08:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:36395,Clear,ClearStamps,36395,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,1,['Clear'],['ClearStamps']
Usability,eturn fCanEditMainTrans; }. Bool_t HasMainTrans() const; { return fMainTrans != 0; }. TRef& GetSource(); { return fSource; }. TObject* GetSourceObject() const; { return fSource.GetObject(); }. void SetSourceObject(TObject* o). void DumpSourceObject(); // *MENU*; void InspectSourceObject(); // *MENU*. { fSource = o; }. void* GetUserData() const; { return fUserData; }. void SetUserData(void* ud); { fUserData = ud; }. Bool_t IsPickable() const; { return fPickable; }. void SetPickable(Bool_t p); { fPickable = p; }. void SetCSCBits(UChar_t f); { fCSCBits |= f; }. void ResetCSCBits(UChar_t f); { fCSCBits &= ~f; }. Bool_t TestCSCBits(UChar_t f) const; { return (fCSCBits & f) != 0; }. void ResetAllCSCBits(); { fCSCBits = 0; }. void CSCImplySelectAllChildren(); { fCSCBits |= kCSCBImplySelectAllChildren; }. void CSCTakeAnyParentAsMaster(); { fCSCBits |= kCSCBTakeAnyParentAsMaster; }. void CSCApplyMainColorToAllChildren(); { fCSCBits |= kCSCBApplyMainColorToAllChildren; }. void CSCApplyMainColorToMatchingChildren(); { fCSCBits |= kCSCBApplyMainColorToMatchingChildren; }. void CSCApplyMainTransparencyToAllChildren(); { fCSCBits |= kCSCBApplyMainTransparencyToAllChildren; }. void CSCApplyMainTransparencyToMatchingChildren(); { fCSCBits |= kCSCBApplyMainTransparencyToMatchingChildren; }. void StampColorSelection(); { AddStamp(kCBColorSelection); }. void StampTransBBox(); { AddStamp(kCBTransBBox); }. void StampObjProps(); { AddStamp(kCBObjProps); }. void StampVisibility(); void StampElementAdded() { AddStamp(kCBElementAdded); }; void StampElementRemoved() { AddStamp(kCBElementRemoved); }. { AddStamp(kCBVisibility); }. void ClearStamps(); { fChangeBits = 0; }. UChar_t GetChangeBits() const; { return fChangeBits; }. » Last changed: root/eve:$Id: TEveElement.h 36374 2010-10-19 17:50:23Z matevz $ » Last generated: 2011-07-04 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveElement.html:36395,Clear,ClearStamps,36395,root/html530/TEveElement.html,https://root.cern,https://root.cern/root/html530/TEveElement.html,1,['Clear'],['ClearStamps']
Usability,eturn fCanEditMainTrans; }. Bool_t HasMainTrans() const; { return fMainTrans != 0; }. TRef& GetSource(); { return fSource; }. TObject* GetSourceObject() const; { return fSource.GetObject(); }. void SetSourceObject(TObject* o). void DumpSourceObject(); // *MENU*; void InspectSourceObject(); // *MENU*. { fSource = o; }. void* GetUserData() const; { return fUserData; }. void SetUserData(void* ud); { fUserData = ud; }. Bool_t IsPickable() const; { return fPickable; }. void SetPickable(Bool_t p); { fPickable = p; }. void SetCSCBits(UChar_t f); { fCSCBits |= f; }. void ResetCSCBits(UChar_t f); { fCSCBits &= ~f; }. Bool_t TestCSCBits(UChar_t f) const; { return (fCSCBits & f) != 0; }. void ResetAllCSCBits(); { fCSCBits = 0; }. void CSCImplySelectAllChildren(); { fCSCBits |= kCSCBImplySelectAllChildren; }. void CSCTakeAnyParentAsMaster(); { fCSCBits |= kCSCBTakeAnyParentAsMaster; }. void CSCApplyMainColorToAllChildren(); { fCSCBits |= kCSCBApplyMainColorToAllChildren; }. void CSCApplyMainColorToMatchingChildren(); { fCSCBits |= kCSCBApplyMainColorToMatchingChildren; }. void CSCApplyMainTransparencyToAllChildren(); { fCSCBits |= kCSCBApplyMainTransparencyToAllChildren; }. void CSCApplyMainTransparencyToMatchingChildren(); { fCSCBits |= kCSCBApplyMainTransparencyToMatchingChildren; }. void StampColorSelection(); { AddStamp(kCBColorSelection); }. void StampTransBBox(); { AddStamp(kCBTransBBox); }. void StampObjProps(); { AddStamp(kCBObjProps); }. void StampVisibility(); void StampElementAdded() { AddStamp(kCBElementAdded); }; void StampElementRemoved() { AddStamp(kCBElementRemoved); }. { AddStamp(kCBVisibility); }. void ClearStamps(); { fChangeBits = 0; }. UChar_t GetChangeBits() const; { return fChangeBits; }. » Last changed: root/eve:$Id: TEveElement.h 36374 2010-10-19 17:50:23Z matevz $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveElement.html:36395,Clear,ClearStamps,36395,root/html532/TEveElement.html,https://root.cern,https://root.cern/root/html532/TEveElement.html,1,['Clear'],['ClearStamps']
Usability,"eturns the new current pad, or 0 in case of failure.; For example: c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad points to the current pad. One can use gPad to set attributes of the current pad.; Note3: One can get a pointer to one of the sub-pads of pad with: TPad subpad = (TPad)pad->GetPad(subpadnumber); ; Implements TVirtualPad.; Definition at line 693 of file TPad.cxx. ◆ Class(). static TClass * TPad::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPad::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPad::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 419 of file TPad.h. ◆ Clear(). void TPad::Clear ; (; Option_t * ; option = """"). overridevirtual . Delete all pad primitives. ; If the bit kClearAfterCR has been set for this pad, the Clear function will execute only after having pressed a CarriageReturn Set the bit with mypad->SetBit(TPad::kClearAfterCR) ; Implements TVirtualPad.; Definition at line 722 of file TPad.cxx. ◆ Clip() [1/2]. Int_t TPad::Clip ; (; Double_t * ; x, . Double_t * ; y, . Double_t ; xclipl, . Double_t ; yclipb, . Double_t ; xclipr, . Double_t ; yclipt . ). overridevirtual . Clipping routine: Cohen Sutherland algorithm. ; - If Clip ==2 the segment is outside the boundary.; If Clip ==1 the segment has one point outside the boundary.; If Clip ==0 the segment is inside the boundary. Parameters. [in,out]x[],y[]Segment coordinates (2 points) ; [in]xclipl,yclipb,xclipr,ycliptClipping boundary . Implements TVirtualPad.; Definition at line 830 of file TPad.cxx. ◆ Clip() [2/2]. Int_t TPad::Clip ; (; Float_t * ; x, . Float_t * ; y, . Float_t ; xclipl, . Float_t ; yclipb, . Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:60902,Clear,Clear,60902,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Clear'],['Clear']
Usability,"eturns the object at position idx. Returns 0 if idx is out of range. ; Implements TSeqCollection.; Reimplemented in TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 355 of file TList.cxx. ◆ Before(). TObject * TList::Before ; (; const TObject * ; obj); const. overridevirtual . Returns the object before object obj. ; Obj is found using the object's IsEqual() method. Returns 0 if obj is first in list. ; Implements TSeqCollection.; Reimplemented in TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 369 of file TList.cxx. ◆ Class(). static TClass * TList::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TList::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TList::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 112 of file TList.h. ◆ Clear(). void TList::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the list. ; Does not delete the objects unless the TList is the owner (set via SetOwner()) and option ""nodelete"" is not set. If option=""nodelete"" then don't delete any heap objects that were marked with the kCanDelete bit, otherwise these objects will be deleted (this option is used by THashTable::Clear()). ; Implements TCollection.; Reimplemented in TListOfEnums, TListOfEnumsWithLock, TListOfDataMembers, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 400 of file TList.cxx. ◆ DeclFileName(). static const char * TList::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 112 of file TList.h. ◆ Delete(). void TList::Delete ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the list AND delete all heap based objects. ; If option=""slow"" then keep list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTList.html:29362,Clear,Clear,29362,doc/master/classTList.html,https://root.cern,https://root.cern/doc/master/classTList.html,1,['Clear'],['Clear']
Usability,"eturns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DoRedraw () override;  Draw horizontal progress bar. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inher",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:24201,progress bar,progress bar,24201,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,1,['progress bar'],['progress bar']
Usability,"etween the axis and the axis title.Definition TAttAxis.cxx:298; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TH3The 3-D histogram classes derived from the 1-D histogram classes.Definition TH3.h:31; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf608_fitresultaspdfDefinition rf608_fitresultaspdf.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma_g1' with range [-inf, inf] of the RooGaussian 'g1' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf608_fitresultaspdf.C. tutorialsroofitrf608_fitresultaspdf.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf608__fitresultaspdf_8C.html:8514,Guid,Guide,8514,doc/master/rf608__fitresultaspdf_8C.html,https://root.cern,https://root.cern/doc/master/rf608__fitresultaspdf_8C.html,1,['Guid'],['Guide']
Usability,"etween; buttons and drawnbuttons (let's say icons) and assign to them his; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBar.html:1410,Simpl,Simple,1410,root/html526/TControlBar.html,https://root.cern,https://root.cern/root/html526/TControlBar.html,5,['Simpl'],['Simple']
Usability,"etwork on CPU using batches with size = 100; : ; TMVA_DNN_CPU : [dataset] : Evaluation of TMVA_DNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.0796 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_CNN_CPU for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 7 Input = ( 1, 16, 16 ) Batch size = 100 Loss function = C; Layer 0 CONV LAYER: ( W = 16 , H = 16 , D = 10 ) Filter ( W = 3 , H = 3 ) Output = ( 100 , 10 , 10 , 256 ) Activation Function = Relu; Layer 1 BATCH NORM Layer: Input/Output = ( 10 , 256 , 100 ) Norm dim = 10 axis = 1; ; Layer 2 CONV LAYER: ( W = 16 , H = 16 , D = 10 ) Filter ( W = 3 , H = 3 ) Output = ( 100 , 10 , 10 , 256 ) Activation Function = Relu; Layer 3 POOL Layer: ( W = 15 , H = 15 , D = 10 ) Filter ( W = 2 , H = 2 ) Output = ( 100 , 10 , 10 , 225 ) ; Layer 4 RESHAPE Layer Input = ( 10 , 15 , 15 ) Output = ( 1 , 100 , 2250 ) ; Layer 5 DENSE Layer: ( Input = 2250 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 6 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 13.2274; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 1.28042 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:13040,Learn,Learning,13040,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['Learning']
Usability,"euron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitly, or via; a string containing the formula to be used to define them, exactly as; for a TCut.; The learning method is defined using the; TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :; TMultiLayerPerceptron::kStochastic, ; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS; A weight can be assigned to events, either in the constructor, either; with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight; is taken into account.; Finally, one starts the training with; TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The; first argument is the number of epochs while option is a string that; can contain: ""text"" (simple text output) , ""graph""; (evoluting graphical training curves), ""update=X"" (step for; the text/graph output update) or ""+"" (will skip the; randomisation and start from the previous values). All combinations; are available. . Example:; net.Train(100,""text, graph, update=10"").; When the neural net is trained, it can be used; directly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:7355,learn,learning,7355,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['learn'],['learning']
Usability,"evTObjLink * Prev()Definition TList.h:152; TObjLink::GetAddOptionvirtual Option_t * GetAddOption() constDefinition TList.h:148; TObjLink::fObjectTObject * fObjectDefinition TList.h:134; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjLink::fPrevTObjLinkWeakPtr_t fPrevDefinition TList.h:132; TObjLink::NextTObjLink * Next()Definition TList.h:151; TObjLink::fNextTObjLinkPtr_t fNextDefinition TList.h:131; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::IsEqualvirtual Bool_t IsEqual(const TObject *obj) constDefault equal comparison (objects are equal if they have the same address in memory).Definition TObject.cxx:570; TObject::RecursiveRemovevirtual void RecursiveRemove(TObject *obj)Recursively remove this object from a list.Definition TObject.cxx:665; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::IsAvirtual TClass * IsA() constDefinition TObject.h:243; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TSeqCollection::Changedvirtual void Changed()Definition TSeqCollection.h:34; TSeqCollection::fSortedBool_t fSortedDefinition TSeqCollection.h:31; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; bool; int; object; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. corecontsrcTList.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:47825,Guid,Guide,47825,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['Guid'],['Guide']
Usability,"evel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messages that are not routed through RooMsgService (such as Minuit printouts). { return _silentMode ; }. void setSilentMode(Bool_t flag); { _silentMode = flag ; }. Int_t errorCount() const; { return _errorCount ; }. void clearErrorCount(); { _errorCount = 0 ; }. RooMsgService(); Private ctor -- singleton class. » Last changed: Mon Dec 7 13:48:17 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMsgService.html:12194,clear,clearErrorCount,12194,root/html526/RooMsgService.html,https://root.cern,https://root.cern/root/html526/RooMsgService.html,1,['clear'],['clearErrorCount']
Usability,"evel p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=5.8312, denominator=wrap_pdf_Int[pTV]=12183.6; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:InputArguments -- RooAbsData::plotOn(pseudo_dh) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 7389.24 will supersede previous event count of 9313.81 for normalization of PDF projections; DateJanuary 2022 ; AuthorRahul Balasubramanian ; Definition in file rf712_lagrangianmorphfit.py. tutorialsroofitrf712_lagrangianmorphfit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html:14886,Guid,Guide,14886,doc/master/rf712__lagrangianmorphfit_8py.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html,1,['Guid'],['Guide']
Usability,"evel=99);  Add a new branch, and infer the data type from the array addobj being passed. ;  ; template<class T > ; TBranch * Branch (const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99);  Add a new branch, and infer the data type from the type of obj being passed. ;  ; virtual TBranch * BranchRef ();  Build the optional branch supporting the TRefTable. ;  ; void Browse (TBrowser *) override;  Browse content of the TTree. ;  ; virtual Int_t BuildIndex (const char *majorname, const char *minorname=""0"");  Build a Tree Index (default is TTreeIndex). ;  ; TStreamerInfo * BuildStreamerInfo (TClass *cl, void *pointer=nullptr, bool canOptimize=true);  Build StreamerInfo for class cl. ;  ; virtual TFile * ChangeFile (TFile *file);  Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize. ;  ; virtual TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""");  Create a clone of this tree and copy nentries. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and TObject::Clone to automatically add us to a directory when we are read from a file. ;  ; virtual Long64_t Draw (const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Draw expression varexp for entries and objects that pass a (optional) selection. ;  ; virtual Long64_t Draw (const char *varexp, const TCut &selection, Option_t *option="""", Long64_t nentries=kMaxEn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:6095,undo,undo,6095,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,1,['undo'],['undo']
Usability,"event;; 1244 fEventX = px;; 1245 fEventY = py;; 1246 ; 1247 switch (event) {; 1248 ; 1249 case kMouseMotion:; 1250 // highlight object tracked over; 1251 pad = Pick(px, py, prevSelObj);; 1252 if (!pad) return;; 1253 ; 1254 EnterLeave(prevSelPad, prevSelObj);; 1255 ; 1256 gPad = pad; // don't use cd() we will use the current; 1257 // canvas via the GetCanvas member and not via; 1258 // gPad->GetCanvas; 1259 ; 1260 if (fSelected) {; 1261 fSelected->ExecuteEvent(event, px, py);; 1262 RunAutoExec();; 1263 }; 1264 ; 1265 break;; 1266 ; 1267 case kMouseEnter:; 1268 // mouse enters canvas; 1269 if (!fDoubleBuffer) FeedbackMode(kTRUE);; 1270 break;; 1271 ; 1272 case kMouseLeave:; 1273 // mouse leaves canvas; 1274 {; 1275 // force popdown of tooltips; 1276 TObject *sobj = fSelected;; 1277 TPad *spad = fSelectedPad;; 1278 fSelected = nullptr;; 1279 fSelectedPad = nullptr;; 1280 EnterLeave(prevSelPad, prevSelObj);; 1281 fSelected = sobj;; 1282 fSelectedPad = spad;; 1283 if (!fDoubleBuffer) FeedbackMode(kFALSE);; 1284 }; 1285 break;; 1286 ; 1287 case kButton1Double:; 1288 // triggered on the second button down within 350ms and within; 1289 // 3x3 pixels of the first button down, button up finishes action; 1290 ; 1291 case kButton1Down:; 1292 // find pad in which input occurred; 1293 pad = Pick(px, py, prevSelObj);; 1294 if (!pad) return;; 1295 ; 1296 gPad = pad; // don't use cd() because we won't draw in pad; 1297 // we will only use its coordinate system; 1298 ; 1299 if (fSelected) {; 1300 FeedbackMode(kTRUE); // to draw in rubberband mode; 1301 fSelected->ExecuteEvent(event, px, py);; 1302 ; 1303 RunAutoExec();; 1304 }; 1305 ; 1306 break;; 1307 ; 1308 case kArrowKeyPress:; 1309 case kArrowKeyRelease:; 1310 case kButton1Motion:; 1311 case kButton1ShiftMotion: //8 == kButton1Motion + shift modifier; 1312 if (fSelected) {; 1313 gPad = fSelectedPad;; 1314 ; 1315 fSelected->ExecuteEvent(event, px, py);; 1316 if (!IsWeb()); 1317 gVirtualX->Update();; 1318 if (fSelected && !fSelected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:40931,Feedback,FeedbackMode,40931,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"eventn;; 316 ; 317 // Create a ROOT Tree; 318 TTree tree(""T"",""An example of ROOT tree with a few branches"");; 319 tree.Branch(""point"",&point,""x:y:z"");; 320 tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; 321 tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);; 322 ; 323 Float_t px,py,pz;; 324 ; 325 // Here we start a loop on 1000 events; 326 for ( Int_t i=0; i<1000; i++) {; 327 gRandom->Rannor(px,py);; 328 pz = px*px + py*py;; 329 const auto random = gRandom->::Rndm(1);; 330 ; 331 // Fill histograms; 332 hpx.Fill(px);; 333 hpxpy.Fill(px,py,1);; 334 hprof.Fill(px,pz,1);; 335 ; 336 // Fill structures; 337 point.x = 10*(random-1);; 338 point.y = 5*random;; 339 point.z = 20*random;; 340 eventn.ntrack = Int_t(100*random);; 341 eventn.nseg = Int_t(2*eventn.ntrack);; 342 eventn.nvertex = 1;; 343 eventn.flag = Int_t(random+0.5);; 344 eventn.temperature = 20+random;; 345 ; 346 // Fill the tree. For each event, save the 2 structures and 3 objects; 347 // In this simple example, the objects hpx, hprof and hpxpy are slightly; 348 // different from event to event. We expect a big compression factor!; 349 tree->Fill();; 350 }; 351 // End of the loop; 352 ; 353 tree.Print();; 354 ; 355 // Save all objects in this file; 356 hfile.Write();; 357 ; 358 // Close the file. Note that this is automatically done when you leave; 359 // the application upon file destruction.; 360 hfile.Close();; 361 ; 362 return 0;; 363}; 364~~~; 365*/; 366 ; 367#include <ROOT/RConfig.hxx>; 368#include ""TTree.h""; 369 ; 370#include ""ROOT/TIOFeatures.hxx""; 371#include ""TArrayC.h""; 372#include ""TBufferFile.h""; 373#include ""TBaseClass.h""; 374#include ""TBasket.h""; 375#include ""TBranchClones.h""; 376#include ""TBranchElement.h""; 377#include ""TBranchObject.h""; 378#include ""TBranchRef.h""; 379#include ""TBrowser.h""; 380#include ""TClass.h""; 381#include ""TClassEdit.h""; 382#include ""TClonesArray.h""; 383#include ""TCut.h""; 384#include ""TDataMember.h""; 385#include ""TDataType.h""; 386#include ""TDirectory.h""; 38",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:15573,simpl,simple,15573,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simple']
Usability,"events);  Sets the number of total events in the given global bin. ;  ; Bool_t SetTotalHistogram (const TH1 &rTotal, Option_t *opt);  Sets the histogram containing all events. ;  ; void SetUseWeightedEvents (Bool_t on=kTRUE);  ; void SetWeight (Double_t weight);  Sets the global weight for this TEfficiency object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsesBayesianStat () const;  ; Bool_t UsesCentralInterval () const;  ; Bool_t UsesPosteriorAverage () const;  ; Bool_t UsesPosteriorMode () const;  ; Bool_t UsesShortestInterval () const;  ; Bool_t UsesWeights () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:40190,Clear,Clear,40190,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['Clear'],['Clear']
Usability,"events. ;  ; void Stop (Bool_t guiCommand=kFALSE);  Stopps recording events. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:5187,Clear,Clear,5187,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Clear'],['Clear']
Usability,"evious block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Send progress and feedback to client. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects and progress messages. ;  ;  Protected Member Functions inherited from TProofPlayerRemote; TProof * GetProof () const;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:19894,feedback,feedback,19894,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['feedback'],['feedback']
Usability,"evirtual . ReturnsTClass describing current object ; Reimplemented from TColorGradient.; Definition at line 113 of file TColorGradient.h. ◆ SetStartEnd(). void TLinearGradient::SetStartEnd ; (; const Point & ; p1, . const Point & ; p2 . ). Set end and start. ; Definition at line 208 of file TColorGradient.cxx. ◆ Streamer(). void TLinearGradient::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TColorGradient. ◆ StreamerNVirtual(). void TLinearGradient::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 113 of file TColorGradient.h. ◆ TColorGradient() [1/3]. TColorGradient::TColorGradient ; (; ). inline . Definition at line 70 of file TColorGradient.h. ◆ TColorGradient() [2/3]. TColorGradient::TColorGradient ; (; Color_t ; newColor, . UInt_t ; nPoints, . const Double_t * ; points, . const Color_t * ; colorIndices, . ECoordinateMode ; mode = kObjectBoundingMode . ). There is no way to validate parameters here, so it's up to user to pass correct arguments. ; Definition at line 71 of file TColorGradient.cxx. ◆ TColorGradient() [3/3]. TColorGradient::TColorGradient ; (; Color_t ; newColor, . UInt_t ; nPoints, . const Double_t * ; points, . const Double_t * ; colors, . ECoordinateMode ; mode = kObjectBoundingMode . ). There is no way to validate parameters here, so it's up to user to pass correct arguments. ; Definition at line 73 of file TColorGradient.cxx. Member Data Documentation. ◆ fEnd. Point TLinearGradient::fEnd. private . Definition at line 111 of file TColorGradient.h. ◆ fStart. Point TLinearGradient::fStart. private . Definition at line 110 of file TColorGradient.h. Libraries for TLinearGradient:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TColorGradient.h; core/base/src/TColorGradient.cxx. TLinearGradient. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearGradient.html:24830,Guid,Guide,24830,doc/master/classTLinearGradient.html,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html,1,['Guid'],['Guide']
Usability,"evirtual; SetPolyLine(Int_t n, Double_t *x, Double_t *y3, Option_t *option="""")TPolyLinevirtual; SetRadius(Double_t radius)TCurlyArcvirtual; SetStartPoint(Double_t x1, Double_t y1)TCurlyLinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetWaveLength(Double_t WaveLength)TCurlyLinevirtual; SetWavy()TCurlyLinevirtual; Size() constTPolyLineinlinevirtual; Streamer(TBuffer &) overrideTCurlyArcvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TCurlyArcinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TCurlyArc()TCurlyArc; TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl=.02, Double_t amp=.01)TCurlyArc; TCurlyLine()TCurlyLine; TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl=.02, Double_t amp=.01)TCurlyLine; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TPolyLine()TPolyLine; TPolyLine(Int_t n, Option_t *option="""")TPolyLine; TPolyLine(Int_t n, Float_t *x, Float_t *y, Option_t *option="""")TPolyLine; TPolyLine(Int_t n, Double_t *x, Double_t *y, Option_t *option="""")TPolyLine; TPolyLine(const TPolyLine &polyline)TPolyLine; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TCurlyArc() overrideTCurlyArcinline; ~TCurlyLine() overrideTCurlyLineinline; ~TObject()TObjectvirtual; ~TPolyLine() overrideTPolyLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyArc-members.html:10703,Guid,Guide,10703,doc/master/classTCurlyArc-members.html,https://root.cern,https://root.cern/doc/master/classTCurlyArc-members.html,1,['Guid'],['Guide']
Usability,evtData1(). virtual TUsrSevtData1::~TUsrSevtData1 ; (; ). inlinevirtual . Definition at line 67 of file clonesA_Event.h. Member Function Documentation. ◆ Class(). static TClass * TUsrSevtData1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUsrSevtData1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUsrSevtData1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file clonesA_Event.h. ◆ DeclFileName(). static const char * TUsrSevtData1::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file clonesA_Event.h. ◆ GetPileup(). Int_t TUsrSevtData1::GetPileup ; (; ). inline . Definition at line 69 of file clonesA_Event.h. ◆ IsA(). virtual TClass * TUsrSevtData1::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMrbSubevent_Caen.; Definition at line 76 of file clonesA_Event.h. ◆ SetEvent(). void TUsrSevtData1::SetEvent ; (; Int_t ; ev). Definition at line 40 of file clonesA_Event.cxx. ◆ Streamer(). virtual void TUsrSevtData1::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMrbSubevent_Caen. ◆ StreamerNVirtual(). void TUsrSevtData1::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file clonesA_Event.h. Member Data Documentation. ◆ fMer. Int_t TUsrSevtData1::fMer. protected . Definition at line 73 of file clonesA_Event.h. ◆ fPileup. Int_t TUsrSevtData1::fPileup. protected . Definition at line 74 of file clonesA_Event.h. ◆ fSevtName. TString TUsrSevtData1::fSevtName. protected . Definition at line 72 of file clonesA_Event.h. tutorials/tree/clonesA_Event.h; tutorials/tree/clonesA_Event.cxx. TUsrSevtData1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUsrSevtData1.html:12808,Guid,Guide,12808,doc/master/classTUsrSevtData1.html,https://root.cern,https://root.cern/doc/master/classTUsrSevtData1.html,1,['Guid'],['Guide']
Usability,evtData2(). virtual TUsrSevtData2::~TUsrSevtData2 ; (; ). inlinevirtual . Definition at line 84 of file clonesA_Event.h. Member Function Documentation. ◆ Class(). static TClass * TUsrSevtData2::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUsrSevtData2::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUsrSevtData2::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file clonesA_Event.h. ◆ DeclFileName(). static const char * TUsrSevtData2::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file clonesA_Event.h. ◆ GetPileup(). Int_t TUsrSevtData2::GetPileup ; (; ). inline . Definition at line 86 of file clonesA_Event.h. ◆ IsA(). virtual TClass * TUsrSevtData2::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMrbSubevent_Caen.; Definition at line 93 of file clonesA_Event.h. ◆ SetEvent(). void TUsrSevtData2::SetEvent ; (; Int_t ; ev). Definition at line 54 of file clonesA_Event.cxx. ◆ Streamer(). virtual void TUsrSevtData2::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMrbSubevent_Caen. ◆ StreamerNVirtual(). void TUsrSevtData2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file clonesA_Event.h. Member Data Documentation. ◆ fMer. Int_t TUsrSevtData2::fMer. protected . Definition at line 90 of file clonesA_Event.h. ◆ fPileup. Int_t TUsrSevtData2::fPileup. protected . Definition at line 91 of file clonesA_Event.h. ◆ fSevtName. TString TUsrSevtData2::fSevtName. protected . Definition at line 89 of file clonesA_Event.h. tutorials/tree/clonesA_Event.h; tutorials/tree/clonesA_Event.cxx. TUsrSevtData2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUsrSevtData2.html:12808,Guid,Guide,12808,doc/master/classTUsrSevtData2.html,https://root.cern,https://root.cern/doc/master/classTUsrSevtData2.html,1,['Guid'],['Guide']
Usability,"ew TH1F(""h2st"",""B"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kP6Yellow);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"",""C"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kP6Red);; hs->Add(h3st);; ; auto h4st = new TH1F(""h4st"",""D"",100,-4,4);; h4st->FillRandom(""gaus"",10000);; h4st->SetFillColor(kP6Grape);; hs->Add(h4st);; ; auto h5st = new TH1F(""h5st"",""E"",100,-4,4);; h5st->FillRandom(""gaus"",10000);; h5st->SetFillColor(kP6Gray);; hs->Add(h5st);; ; auto h6st = new TH1F(""h6st"",""F"",100,-4,4);; h6st->FillRandom(""gaus"",10000);; h6st->SetFillColor(kP6Violet);; hs->Add(h6st);; ; // draw the stack with colors; hs->Draw();; TLegend *l = gPad->BuildLegend(.8,.55,1.,.9,"""",""F"");; l->SetLineWidth(0);; l->SetFillStyle(0);; ; // draw the stack using gray-scale; auto c2 = new TCanvas();; c2->SetGrayscale();; hs->Draw();; l->Draw();; }; kP6Red@ kP6RedDefinition Rtypes.h:69; kP6Grape@ kP6GrapeDefinition Rtypes.h:69; kP6Gray@ kP6GrayDefinition Rtypes.h:69; kP6Yellow@ kP6YellowDefinition Rtypes.h:69; kP6Violet@ kP6VioletDefinition Rtypes.h:69; kP6Blue@ kP6BlueDefinition Rtypes.h:69; gPad#define gPadDefinition TVirtualPad.h:308; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; lTLine lDefinition textangle.C:4; AuthorOlivier Couet ; Definition in file thstackcolorscheme.C. tutorialshistthstackcolorscheme.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/thstackcolorscheme_8C.html:2702,Guid,Guide,2702,doc/master/thstackcolorscheme_8C.html,https://root.cern,https://root.cern/doc/master/thstackcolorscheme_8C.html,1,['Guid'],['Guide']
Usability,"ew TH1F(""hst12"", """", 20, -10, 10);; hst12->FillRandom(""gaus"", 500);; hst12->SetFillColor(kBlue);; hst12->SetLineColor(kBlue);. THStack st1(""st1"", ""st1"");; st1.Add(hst11);; st1.Add(hst12);. cst1->cd(1); st1.Draw();; cst1->cd(2); st1.Draw(""hist"");. return cst1;; }; Drawing of 3D implicit functions; 3D implicit functions (TF3) can be drawn as iso-surfaces.; The implicit function f(x,y,z) = 0 is drawn in cartesian coordinates.; In the following example the options ""FB"" and ""BB"" suppress the ; ""Front Box"" and ""Back Box"" around the plot. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",600,400);; TF3 *f3 = new TF3(""f3"",""sin(x*x+y*y+z*z-36)"",-2,2,-2,2,-2,2);; f3->SetClippingBoxOn(0,0,0);; f3->SetFillColor(30);; f3->SetLineColor(15);; f3->Draw(""FBBB"");; return c2;; }; Associated functions drawing; An associated function is created by TH1::Fit. More than on fitted; function can be associated with one histogram (see TH1::Fit).; A TF1 object f1 can be added to the list of associated; functions of an histogram h without calling TH1::Fit; simply doing:. h->GetListOfFunctions()->Add(f1);. or. h->GetListOfFunctions()->Add(f1,someoption);. To retrieve a function by name from this list, do:. TF1 *f1 = (TF1*)h->GetListOfFunctions()->FindObject(name);. or. TF1 *f1 = h->GetFunction(name);. Associated functions are automatically painted when an histogram is drawn.; To avoid the painting of the associated functions the option HIST; should be added to the list of the options used to paint the histogram.; Drawing using OpenGL; The class TGLHistPainter allows to paint data set using the OpenGL 3D; graphics library. The plotting options start with GL keyword.; In addition, in order to inform canvases that OpenGL should be used to render; 3D representations, the following option should be set:. gStyle->SetCanvasPreferGL(true);. General information: plot types and supported options; The following types of plots are provided:; For lego plots the supported options are:. ""GLLEGO""; Draw a l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THistPainter.html:69632,simpl,simply,69632,root/html530/THistPainter.html,https://root.cern,https://root.cern/root/html530/THistPainter.html,1,['simpl'],['simply']
Usability,"ew TObjArray();; a1->SetName(""a1"");; l->Add(a1);; TH1F *ha1a = new TH1F(""ha1a"",""ha1"",100,0,1);; TH1F *ha1b = new TH1F(""ha1b"",""ha1"",100,0,1);; a1->Add(ha1a);; a1->Add(ha1b);; TObjArray *b1 = new TObjArray();; b1->SetName(""b1"");; l->Add(b1);; TH1F *hb1a = new TH1F(""hb1a"",""hb1"",100,0,1);; TH1F *hb1b = new TH1F(""hb1b"",""hb1"",100,0,1);; b1->Add(hb1a);; b1->Add(hb1b);. TObjArray *a2 = new TObjArray();; a2->SetName(""a2"");; l->Add(a2);; TH1S *ha2a = new TH1S(""ha2a"",""ha2"",100,0,1);; TH1S *ha2b = new TH1S(""ha2b"",""ha2"",100,0,1);; a2->Add(ha2a);; a2->Add(ha2b);. T.Branch(l,16000,2);; T.Print();; }. Int_t Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99); Create one branch for each element in the folder.; Returns the total number of branches created. TBranch* Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); Create a new TTree Branch. This Branch constructor is provided to support non-objects in; a Tree. The variables described in leaflist may be simple; variables or structures. // See the two following; constructors for writing objects in a Tree. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. * address is the address of the first item of a structure.; * leaflist is the concatenation of all the variable names and types; separated by a colon character :; The variable name and the variable type are separated by a slash (/).; The variable type may be 0,1 or 2 characters. If no type is given,; the type of the variable is assumed to be the same as the previous; variable. If the first variable does not have a type, it is assumed; of type F by default. The list of currently supported types is given below:; - C : a character string terminated by the 0 character; - B : an 8 bit signed integer (Char_t); - b : an 8 bit unsigned integer (UChar_t); - S : a 16 bit signed integer (Short_t); - s : a 16 bit unsigned integer (UShort_t); - I : a 32 bit signed integer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:44037,simpl,simple,44037,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['simpl'],['simple']
Usability,"ew dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__FOAM.html:1467,simpl,simply,1467,doc/master/group__tutorial__FOAM.html,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html,1,['simpl'],['simply']
Usability,"ewer - ignore return cannot do more; viewer->AddObject(buffer);; }; }; TBuffer3DSphereSphere description class - see TBuffer3DTypes for producer classes Supports hollow and cut spheres.Definition TBuffer3D.h:130; TBuffer3D::kNone@ kNoneDefinition TBuffer3D.h:49; TBuffer3D::kRaw@ kRawDefinition TBuffer3D.h:54; TBuffer3D::kRawSizes@ kRawSizesDefinition TBuffer3D.h:53; int; ShapeSpecific: If the viewer can directly display the buffer without filling of the kRaw/kRawSizes section it will not need to request client side tessellation. Currently we provide the following various shape specific classes, which the OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). TBuffer3DSphere - solid, hollow and cut spheres*; TBuffer3DTubeSeg - angle tube segment; TBuffer3DCutTube - angle tube segment with plane cut ends. OpenGL only supports solid spheres at present - cut/hollow ones will be requested tessellated.; Anyone is free to add new TBuffer3D classes, but it should be clear that the viewers require updating to be able to take advantage of them. The number of native shapes in OpenGL will be expanded over time.; BoundingBox: You are not obliged to complete this, as any viewer requiring one internally (OpenGL) will build one for you if you do not provide. However to do this the viewer will force you to provide the raw tessellation, and the resulting box will be axis aligned with the overall scene, which is non-ideal for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(), for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 transl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:5892,clear,clear,5892,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['clear'],['clear']
Usability,"ewer to suspend redraws etc, and after; the EndScene the viewer will reset the camera to frame the new scene and redraw.; [x3d viewer does not support changing of scenes - objects added after the; first Open/CloseScene pair will be ignored.]; Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their; capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in; OpenGL) - others always require a raw tessellation description of points/lines/segments.; Some; need the 3D object positions in the global frame, others can cope with; local frames + a translation matrix - which can give considerable performance; benefits. To cope with these situations the object buffer is filled out in negotiation; with the viewer. TBuffer3D classes are conceptually divided into enumerated; sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). . The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D; are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw); are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section; in derived shape specific classes allows a more abstract shape description; (""a sphere of inner radius x, outer radius y""). This enables a viewer; which knows how to draw (tessellate) the shape itself to do so, which can bring; considerable performance and quality benefits, while providing a generic fallback; suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use; TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section; if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using; one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualViewer3D.html:3165,Clear,ClearSectionsValid,3165,root/html528/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html528/TVirtualViewer3D.html,12,"['Clear', 'clear']","['ClearSectionsValid', 'clear']"
Usability,"ewerGUI::SetNodePtr ; (; TStructNode * ; val). Sets top node pointer and updates view. ; Definition at line 758 of file TStructViewerGUI.cxx. ◆ SetPointerButtonSlot(). void TStructViewerGUI::SetPointerButtonSlot ; (; ). Sets pointer given in fPointerTestEntry to the main pointer. ; Definition at line 779 of file TStructViewerGUI.cxx. ◆ ShowLinksToggled(). void TStructViewerGUI::ShowLinksToggled ; (; Bool_t ; on). Changes links visibility and refresh view. ; Definition at line 788 of file TStructViewerGUI.cxx. ◆ UnCheckMaxObjects(). void TStructViewerGUI::UnCheckMaxObjects ; (; ). private . Shows hidden nodes. ; Definition at line 798 of file TStructViewerGUI.cxx. ◆ UndoButtonSlot(). void TStructViewerGUI::UndoButtonSlot ; (; ). UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ; Definition at line 873 of file TStructViewerGUI.cxx. ◆ Update(). void TStructViewerGUI::Update ; (; Bool_t ; resetCamera = false). Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ; Definition at line 814 of file TStructViewerGUI.cxx. ◆ UpdateButtonSlot(). void TStructViewerGUI::UpdateButtonSlot ; (; ). Update button slot. Updates scene. ; Definition at line 840 of file TStructViewerGUI.cxx. ◆ UpdateLabels(). void TStructViewerGUI::UpdateLabels ; (; TStructNode * ; node). private . Refresh information in labels when user put mouse over object. ; Definition at line 848 of file TStructViewerGUI.cxx. Member Data Documentation. ◆ fAllMembersCountLabel. TGLabel* TStructViewerGUI::fAllMembersCountLabel. private . Definition at line 64 of file TStructViewerGUI.h. ◆ fAutoRefesh. TGCheckButton* TStructViewerGUI::fAutoRefesh. private . Definition at line 76 of file TStructViewerGUI.h. ◆ fBoxHeightEntry. TGNumberEntry* TStructViewerGUI::fBoxHeightEntry. private . Definition at line 75 of file TStructViewerGUI.h. ◆ fCanvas. TCanvas* TStructViewerGUI::fCanvas. private . Definition at line 57 of file TStructViewerGUI.h. ◆ fC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:45948,Clear,Clear,45948,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Clear'],['Clear']
Usability,"ewtopic.php?f=3&t=13299; 1215 if (e1sq) w1 = 1./ e1sq;; 1216 else if (h1->fSumw2.fN) {; 1217 w1 = 1.E200; // use an arbitrary huge value; 1218 if (y1 == 0 ) { // use an estimated error from the global histogram scale; 1219 double sf = (s1[0] != 0) ? s1[1]/s1[0] : 1;; 1220 w1 = 1./(sf*sf);; 1221 }; 1222 }; 1223 if (e2sq) w2 = 1./ e2sq;; 1224 else if (h2->fSumw2.fN) {; 1225 w2 = 1.E200; // use an arbitrary huge value; 1226 if (y2 == 0) { // use an estimated error from the global histogram scale; 1227 double sf = (s2[0] != 0) ? s2[1]/s2[0] : 1;; 1228 w2 = 1./(sf*sf);; 1229 }; 1230 }; 1231 ; 1232 double y = (w1*y1 + w2*y2)/(w1 + w2);; 1233 UpdateBinContent(i, y);; 1234 if (fSumw2.fN) {; 1235 double err2 = 1./(w1 + w2);; 1236 if (err2 < 1.E-200) err2 = 0; // to remove arbitrary value when e1=0 AND e2=0; 1237 fSumw2.fArray[i] = err2;; 1238 }; 1239 }; 1240 } else { // case of simple histogram addition; 1241 Double_t c1sq = c1 * c1;; 1242 Double_t c2sq = c2 * c2;; 1243 for (Int_t i = 0; i < fNcells; ++i) { // Loop on cells (bins including underflows/overflows); 1244 UpdateBinContent(i, c1 * h1->RetrieveBinContent(i) + c2 * h2->RetrieveBinContent(i));; 1245 if (fSumw2.fN) {; 1246 fSumw2.fArray[i] = c1sq * h1->GetBinErrorSqUnchecked(i) + c2sq * h2->GetBinErrorSqUnchecked(i);; 1247 }; 1248 }; 1249 }; 1250 ; 1251 if (resetStats) {; 1252 // statistics need to be reset in case coefficient are negative; 1253 ResetStats();; 1254 }; 1255 else {; 1256 // update statistics (do here to avoid changes by SetBinContent) FIXME remove???; 1257 PutStats(s3);; 1258 SetEntries(nEntries);; 1259 }; 1260 ; 1261 return kTRUE;; 1262}; 1263 ; 1264////////////////////////////////////////////////////////////////////////////////; 1265/// Increment bin content by 1.; 1266/// Passing an out-of-range bin leads to undefined behavior; 1267 ; 1268void TH1::AddBinContent(Int_t); 1269{; 1270 AbstractMethod(""AddBinContent"");; 1271}; 1272 ; 1273////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:49262,simpl,simple,49262,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['simpl'],['simple']
Usability,"ex();; tree.SetTreeIndex(newIndex);; tree.Draw();; tree.SetTreeIndex(oldIndex);; tree.Draw(); etc. void SetWeight(Double_t w = 1, Option_t* option = """"); Set tree weight. The weight is used by TTree::Draw to automatically weight each; selected entry in the resulting histogram. For example the equivalent of:. T.Draw(""x"", ""w""). is:. T.SetWeight(w);; T.Draw(""x"");. This function is redefined by TChain::SetWeight. In case of a; TChain, an option ""global"" may be specified to set the same weight; for all trees in the TChain instead of the default behaviour; using the weights of each tree in the chain (see TChain::SetWeight). void Show(Long64_t entry = -1, Int_t lenmax = 20); Print values of all active leaves for entry. if entry==-1, print current entry (default); if a leaf is an array, a maximum of lenmax elements is printed. void StartViewer(); Start the TTreeViewer on this tree. ww is the width of the canvas in pixels; wh is the height of the canvas in pixels. void StopCacheLearningPhase(); stop the cache learning phase. void Streamer(TBuffer& ); Stream a class object. Int_t UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Unbinned fit of one or more variable(s) from a tree. funcname is a TF1 function. See TTree::Draw for explanations of the other parameters. Fit the variable varexp using the function funcname using the; selection cuts given by selection. The list of fit options is given in parameter option.; option = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""M"" More. Improve fit results. You can specify boundary limits for some or all parameters via; func->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters.; For example, if you fit a function with 6 parame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:137656,learn,learning,137656,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,2,['learn'],['learning']
Usability,"ex();; tree.SetTreeIndex(newIndex);; tree.Draw();; tree.SetTreeIndex(oldIndex);; tree.Draw(); etc. void SetWeight(Double_t w = 1, Option_t* option = """"); Set tree weight. The weight is used by TTree::Draw to automatically weight each; selected entry in the resulting histogram. For example the equivalent of:. T.Draw(""x"", ""w""). is:. T.SetWeight(w);; T.Draw(""x"");. This function is redefined by TChain::SetWeight. In case of a; TChain, an option ""global"" may be specified to set the same weight; for all trees in the TChain instead of the default behaviour; using the weights of each tree in the chain (see TChain::SetWeight). void Show(Long64_t entry = -1, Int_t lenmax = 20); Print values of all active leaves for entry. if entry==-1, print current entry (default); if a leaf is an array, a maximum of lenmax elements is printed. void StartViewer(); Start the TTreeViewer on this tree. ww is the width of the canvas in pixels; wh is the height of the canvas in pixels. void StopCacheLearningPhase(); stop the cache learning phase. void Streamer(TBuffer& b); Stream a class object. Int_t UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Unbinned fit of one or more variable(s) from a tree. funcname is a TF1 function. See TTree::Draw for explanations of the other parameters. Fit the variable varexp using the function funcname using the; selection cuts given by selection. The list of fit options is given in parameter option.; option = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""M"" More. Improve fit results. You can specify boundary limits for some or all parameters via; func->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters.; For example, if you fit a function with 6 param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:125403,learn,learning,125403,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,3,['learn'],['learning']
Usability,"ex);; tree.Draw();; tree.SetTreeIndex(oldIndex);; tree.Draw(); etc. void SetWeight(Double_t w = 1, Option_t* option = """"); Set tree weight. The weight is used by TTree::Draw to automatically weight each; selected entry in the resulting histogram. For example the equivalent of:. T.Draw(""x"", ""w""). is:. T.SetWeight(w);; T.Draw(""x"");. This function is redefined by TChain::SetWeight. In case of a; TChain, an option ""global"" may be specified to set the same weight; for all trees in the TChain instead of the default behaviour; using the weights of each tree in the chain (see TChain::SetWeight). void Show(Long64_t entry = -1, Int_t lenmax = 20); Print values of all active leaves for entry. if entry==-1, print current entry (default); if a leaf is an array, a maximum of lenmax elements is printed. void StartViewer(); Start the TTreeViewer on this tree. ww is the width of the canvas in pixels; wh is the height of the canvas in pixels. Int_t StopCacheLearningPhase(); stop the cache learning phase; Returns 0 learning phase stopped or not active; -1 on error. void Streamer(TBuffer& ); Stream a class object. Int_t UnbinnedFit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Unbinned fit of one or more variable(s) from a tree. funcname is a TF1 function. See TTree::Draw for explanations of the other parameters. Fit the variable varexp using the function funcname using the; selection cuts given by selection. The list of fit options is given in parameter option.; option = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""M"" More. Improve fit results. You can specify boundary limits for some or all parameters via; func->SetParLimits(p_number, parmin, parmax);; if parmin>=parmax, the parameter is fixed; Note that you are not forced to fix the limits for all parameters.; For example, if y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:139670,learn,learning,139670,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,2,['learn'],['learning']
Usability,"exDefinition RArrowDS.hxx:37; ROOT::RDF::RArrowDS::GetTypeNamestd::string GetTypeName(std::string_view colName) const finalType of a column as a string, e.g.Definition RArrowDS.cxx:475; ROOT::RDF::RArrowDS::GetColumnReadersImplstd::vector< void * > GetColumnReadersImpl(std::string_view name, const std::type_info &type) finalThis needs to return a pointer to the pointer each value getter will point to.Definition RArrowDS.cxx:570; ROOT::RDF::RArrowDS::fValueGettersstd::vector< std::unique_ptr< ROOT::Internal::RDF::TValueGetter > > fValueGettersDefinition RArrowDS.hxx:38; ROOT::RDF::RArrowDS::SetEntrybool SetEntry(unsigned int slot, ULong64_t entry) finalAdvance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot.Definition RArrowDS.cxx:502; ROOT::RDF::RArrowDS::fColumnNamesstd::vector< std::string > fColumnNamesDefinition RArrowDS.hxx:34; ROOT::RDF::RArrowDS::fEntryRangesstd::vector< std::pair< ULong64_t, ULong64_t > > fEntryRangesDefinition RArrowDS.hxx:33; ROOT::RDF::RArrowDS::GetColumnNamesconst std::vector< std::string > & GetColumnNames() const finalReturns a reference to the collection of the dataset's column names.Definition RArrowDS.cxx:464; ROOT::RDF::RDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats.Definition RDataSource.hxx:109; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::FromArrowRDataFrame FromArrow(std::shared_ptr< arrow::Table > table, std::vector< std::string > const &columnNames)Factory method to create a Apache Arrow RDataFrame.Definition RArrowDS.cxx:606; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; arrowDefinition RArrowDS.hxx:17. treedataframeincROOTRArrowDS.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RArrowDS_8hxx_source.html:6750,Guid,Guide,6750,doc/master/RArrowDS_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RArrowDS_8hxx_source.html,1,['Guid'],['Guide']
Usability,"example, if the formula; TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default; the name of the object = title = formula itself.; old.SetName(""old"").; then, old can be reused in a new expression.; TFormula new(""x*old"") is equivalent to:; TFormula new(""x*sin(x*(x<0.5 || x>1))""). Up to 4 dimensions are supported (indicated by x, y, z, t); An expression may have 0 parameters or a list of parameters; indicated by the sequence [par_number]. A graph showing the logic to compile and analyze a formula; is shown in TFormula::Compile and TFormula::Analyze.; Once a formula has been compiled, it can be evaluated for a given; set of parameters. see graph in TFormula::EvalPar. This class is the base class for the function classes TF1,TF2 and TF3.; It is also used by the ntuple selection mechanism TNtupleFormula. In version 7 of TFormula, the usage of fOper has been changed; to improve the performance of TFormula::EvalPar.; Conceptually, fOper was changed from a simple array of Int_t; to an array of composite values.; For example a 'ylandau(5)' operation used to be encoded as 4105;; it is now encoded as (klandau >> kTFOperShit) + 5; Any class inheriting from TFormula and using directly fOper (which; is now a private data member), needs to be updated to take this; in consideration. The member functions recommended to set and; access fOper are: SetAction, GetAction, GetActionParam; For more performant access to the information, see the implementation; TFormula::EvalPar. CHANGING DEFAULT SETTINGS. When creating complex formula , it may be necessary to increase; some default parameters. see static function TFormula::SetMaxima. WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?. This is a frequently asked question.; C++ is a strongly typed language. There is no way for TFormula (without; recompiling this class) to know about all possible user defined data types.; This also apply to the case of a static class function.; Because TMath is a special and fre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:2234,simpl,simple,2234,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,3,['simpl'],['simple']
Usability,"examples for the training and testing of the TMVA classifiers. ;  ; file  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:6127,simpl,simple,6127,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['simpl'],['simple']
Usability,"exception; 67 ; 68// ----------------------------------------------------------------------; 69// Epilog; 70 ; 71/// throw explicitly GenVector exceptions; 72inline void Throw(GenVector_exception &e); 73{; 74 if (GenVector_exception::IsOn()); 75 throw e;; 76}; 77 ; 78namespace GenVector {; 79/// function throwing exception, by creating internally a GenVector_exception only when needed; 80inline void Throw(const char *s); 81{; 82 if (!GenVector_exception::IsOn()); 83 return;; 84 GenVector_exception e(s);; 85 throw e;; 86}; 87} // namespace GenVector; 88 ; 89} // namespace Math; 90} // namespace ROOT; 91 ; 92#endif // GENVECTOR_EXCEPTION_H; e#define e(i)Definition RSha256.hxx:103; ROOT::Math::GenVector_exceptionDefinition GenVector_exception.h:36; ROOT::Math::GenVector_exception::IsOnstatic bool & IsOn()Definition GenVector_exception.h:60; ROOT::Math::GenVector_exception::EnableThrowstatic bool EnableThrow()Definition GenVector_exception.h:43; ROOT::Math::GenVector_exception::DisableThrowstatic bool DisableThrow()Definition GenVector_exception.h:49; ROOT::Math::GenVector_exception::Throwfriend void Throw(GenVector_exception &)throw explicitly GenVector exceptionsDefinition GenVector_exception.h:72; ROOT::Math::GenVector_exception::GenVector_exceptionGenVector_exception(const std::string &s)Definition GenVector_exception.h:38; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOT::Math::Throwvoid Throw(GenVector_exception &e)throw explicitly GenVector exceptionsDefinition GenVector_exception.h:72; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorincMathGenVectorGenVector_exception.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector__exception_8h_source.html:4107,Guid,Guide,4107,doc/master/GenVector__exception_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector__exception_8h_source.html,1,['Guid'],['Guide']
Usability,"exible Object; Oriented implementation has been choosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. The; MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with f being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In all methods implemented, one needs to compute; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especialy the; derivative of compound functions, one can write:. for a neuton: product of the local derivative with the; weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented.; Stochastic minimization: This; is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:3512,Learn,Learning,3512,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['Learn'],['Learning']
Usability,"exist. For example in the case of Minuit, we have Migrad, Simplex or Minimize. The minimizer and its corresponding algorithm, when available, can be set by using the function FitConfig::SetMinimizer(""minimizerName"") or by using directly the ROOT:Math::MinimizerOptions class.; If the requested minimizer is not available in ROOT, the default one is used. The default minimizer type and algorithm can be specified by using the static function ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""minimizerName""); 5.7.4 Minimizer Libraries and Algorithms; The list of available minimizer libraries currently available in ROOT, with their corresponding available algorithms is the following one. Some minimizers (e.g. Minuit) contain several algorithms that the user can choose. Others are based on a single algorithm (e.g. Fumili). Minuit (library libMinuit). Old version of Minuit, based on the TMinuit class. The list of possible algorithms are:. Migrad (default one); Simplex; Minimize (it is a combination of Migrad and Simplex); MigradImproved; Scan; Seek. Minuit2 (library libMinuit2). New C++ version of Minuit. The list of possible algorithm is :. Migrad (default); Simplex; Minimize; Scan; Fumili . This is the same algorithm of TFumili, but implemented in the Minuit2 library. Fumili. Implement a dedicated minimization algorithm for least-square and likelihood fits. It has requirements on the type of method function to be used. No specific algorithm exists; GSLMultiMin (library libMathMore). Minimizer based on the Multidimensional Minimization routines of the Gnu Scientific Library (GSL). The list of available algorithms is. BFGS2 (default) : second version of the vector Broyden-Fletcher-Goldfarb-Shanno (BFGS) algorithm;; BFGS : old version of the vector Broyden-Fletcher-Goldfarb-Shanno (BFGS) algorithm;; ConjugateFR : Fletcher-Reeves conjugate gradient algorithm;; ConjugatePR : Polak-Ribiere conjugate gradient algorithm;; SteepestDescent: steepest descent algorithm;. GSLMultiFit (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:202561,Simpl,Simplex,202561,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['Simpl'],['Simplex']
Usability,"experiment's data. You don't need a library with these classes (though ROOT will print ""Warning in : no dictionary for class EventData/Particle is available"") because a TTree knows what data is stored inside. The EventData class contains a vector (std::vector) of particles represented by a ""Particle"" class and the total size (in bytes) of the event itself:; class EventData {; public:; std::vector<Particle> fParticles; // particles of the event; int fEventSize; // size (in bytes) of the event; };. The data members of the Particle class describe the particle properties as shown below:; class Particle {; public:; double fPosX,fPosY,fPosZ; // particle position nearest to interaction point; double fMomentum; // particle momentum; double fMomentumPhi; // particle direction (phi); double fMomentumEta; // particle direction (eta); Long64_t fTags[128]; // particle tags; };. The TTree contains a branch event, which in turn contains the branches fParticles and fEventSize. It simply reflects the layout of class EventData. Each TTree entry has one object of type class EventData, which in turn has a collection of particles. Each tree entry can have a different number of particles. There are 200 TTree entries containing a total of 22994 particles.; If you are curious how we generated the TTree: the script is in our git repository.; . ‹ Introductory Tutorials; up; Accessing a TTree With a TBrowser ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Subm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meet-ttree.html:3891,simpl,simply,3891,d/meet-ttree.html,https://root.cern,https://root.cern/d/meet-ttree.html,1,['simpl'],['simply']
Usability,"expr Version_t TBinomialEfficiencyFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 73 of file TBinomialEfficiencyFitter.h. ◆ ComputeFCN(). void TBinomialEfficiencyFitter::ComputeFCN ; (; Double_t & ; f, . const Double_t * ; par . ). private . Compute the likelihood. ; Definition at line 329 of file TBinomialEfficiencyFitter.cxx. ◆ DeclFileName(). static const char * TBinomialEfficiencyFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 73 of file TBinomialEfficiencyFitter.h. ◆ EvaluateFCN(). Double_t TBinomialEfficiencyFitter::EvaluateFCN ; (; const Double_t * ; par). inline . Definition at line 67 of file TBinomialEfficiencyFitter.h. ◆ Fit(). TFitResultPtr TBinomialEfficiencyFitter::Fit ; (; TF1 * ; f1, . Option_t * ; option = """" . ). Carry out the fit of the given function to the given histograms. ; If option ""I"" is used, the fit function will be averaged over the bin (the default is to evaluate it simply at the bin center).; If option ""R"" is used, the fit range will be taken from the fit function (the default is to use the entire histogram).; If option ""S"" a TFitResult object is returned and it can be used to obtain additional fit information, like covariance or correlation matrix.; Note that all parameter values, limits, and step sizes are copied from the input fit function f1 (so they should be set before calling this method. This is particularly relevant for the step sizes, taken to be the ""error"" set on input, as a null step size usually fixes the corresponding parameter. That is protected against, but in such cases an arbitrary starting step size will be used, and the reliability of the fit should be questioned). If parameters are to be fixed, this should be done by specifying non-null parameter limits, with lower limits larger than upper limits.; On output, f1 contains the fitted parameters and errors, as well as the number of degrees",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html:17221,simpl,simply,17221,doc/master/classTBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/doc/master/classTBinomialEfficiencyFitter.html,1,['simpl'],['simply']
Usability,"expression). and write your own constructor. MyClass::MyClass(const char *name,const char *expression) : TFormula(). which has to call the TFormula default constructor and whose implementation; should be similar to the implementation of the normal TFormula constructor. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. Bool_t CheckOperands(Int_t operation, Int_t& err); Check whether the operand at 'oper-1' is compatible with the operation; at 'oper'. Bool_t CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); Check whether the operands at 'leftoper' and 'oper-1' are compatible with; the operation at 'oper'. Bool_t StringToNumber(Int_t code); Try to 'demote' a string into an array bytes. If this is not possible,; return false. void Clear(Option_t* option = """"); Resets the objects. Resets the object to its state before compilation. void ClearFormula(Option_t* option = """"); Resets the objects. Resets the object to its state before compilation. Int_t Compile(const char* expression = """"); Compile expression already stored in fTitle. Loop on all subexpressions of formula stored in fTitle. If you overload this member function, you also HAVE TO; never call the constructor:. TFormula::TFormula(const char *name,const char *expression). and write your own constructor. MyClass::MyClass(const char *name,const char *expression) : TFormula(). which has to call the TFormula default constructor and whose implementation; should be similar to the implementation of the normal TFormula constructor. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. /*; ; */. void Copy(TObject& formula) const; Copy this formula. char * DefinedString(Int_t code); Return address of string corresponding to special code. This member function is inactive in the TFormula cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:20008,Clear,ClearFormula,20008,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,3,['Clear'],['ClearFormula']
Usability,"ext table. Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogram drawing. To illustrate the possible effects of the various display modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight; displayMode = kDisplayModeSurface. Simple modes group, display mode = points, 256 x 256 channels. . Simple modes group, display mode = grid, 64 x 64 channels. . Simple modes group, display mode = contours, 64 x 64 channels. . Simple modes group, display mode = bars, 64 x 64 channels. . Simple modes group, display mode = linesX, 64 x 64 channels. . Simple modes group, display mode = linesY, 64 x 64 channels. . Simple modes group, display mode = barsX, 64 x 64 channels. . Simple modes group, display mode = barsY, 64 x 64 channels. . Simple modes group, display mode = needles, 64 x 64 channels. . Simple modes group, display mode = triangles, 64 x 64 channels. . Light modes group, display mode = points, 256 x 256 channels. . Light modes group, display mode = grid, 256 x 256 channels. . Light modes group, display mode = surface, 64 x 64 channels. . Light modes group, display mode = triangles, 64 x 64 channels. . Height modes group, display mode = points, 256 x 256 channels. . Height modes group, display mode = grid, 256 x 256 channels. . Height modes group, display mode = contours, 64 x 64 channels. . Height modes group, display mode = bars, 64 x 64 channels. . Height modes group, display mode = surface, 64 x 64 channels. . Height modes group, display mode = triangles, 64 x 64 channels. . Light - height modes group, display mode = surface, 64 x 64 channels. The weight between both shading algorithms is set to 0.5. One can o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:33258,Simpl,Simple,33258,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"ext())) {; 2959 if (info->IsA() != TStreamerInfo::Class()) {; 2960 continue;; 2961 }; 2962 if (info->GetClassVersion()==-4) continue; // Skip outer level namespace; 2963 TIter subnext(list);; 2964 TStreamerInfo *subinfo;; 2965 TList subClasses;; 2966 Int_t len = strlen(info->GetName());; 2967 while ((subinfo = (TStreamerInfo*)subnext())) {; 2968 if (subinfo->IsA() != TStreamerInfo::Class()) {; 2969 continue;; 2970 }; 2971 if (strncmp(info->GetName(),subinfo->GetName(),len)==0) {; 2972 // The 'sub' StreamerInfo start with the main StreamerInfo name,; 2973 // it subinfo is likely to be a nested class.; 2974 const Int_t sublen = strlen(subinfo->GetName());; 2975 if ( (sublen > len) && subinfo->GetName()[len+1]==':'; 2976 && !subClasses.FindObject(subinfo->GetName()) /* We need to insure uniqueness */); 2977 {; 2978 subClasses.Add(subinfo);; 2979 }; 2980 }; 2981 }; 2982 ngener += info->GenerateHeaderFile(clean_dirname.Data(),&subClasses,&extrainfos);; 2983 subClasses.Clear(""nodelete"");; 2984 }; 2985 extrainfos.Clear(""nodelete""); // We are done with this list.; 2986 ; 2987 TString path;; 2988 path.Form(""%s/%sProjectHeaders.h"",clean_dirname.Data(),subdirname.Data());; 2989 FILE *allfp = fopen(path,""a"");; 2990 if (!allfp) {; 2991 Error(""MakeProject"",""Cannot open output file:%s\n"",path.Data());; 2992 } else {; 2993 fprintf(allfp,""#include \""%sProjectInstances.h\""\n"", subdirname.Data());; 2994 fclose(allfp);; 2995 }; 2996 ; 2997 printf(""MakeProject has generated %d classes in %s\n"",ngener,clean_dirname.Data());; 2998 ; 2999 // generate the shared lib; 3000 if (!opt.Contains(""+"") && !makepar) {; 3001 delete list;; 3002 filelist->Delete();; 3003 delete filelist;; 3004 return;; 3005 }; 3006 ; 3007 // Makefiles files; 3008 FILE *fpMAKE = nullptr;; 3009 if (!makepar) {; 3010 // Create the MAKEP file by looping on all *.h files; 3011 // delete MAKEP if it already exists; 3012#ifdef WIN32; 3013 path.Form(""%s/makep.cmd"",clean_dirname.Data());; 3014#else; 3015 path.Form(""%s/MAKEP"",cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:108158,Clear,Clear,108158,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:3326,clear,clearValueAndShapeDirty,3326,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,32,['clear'],['clearValueAndShapeDirty']
Usability,"ext*binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:6988,clear,clearValueDirty,6988,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,2,['clear'],['clearValueDirty']
Usability,"ext::PopExpiredMargins ; (; SHtmlMargin_t ** ; ppMarginStack, . int ; y . ). protected . Pop all expired margins from the stack. ; An expired margin is one with a non-negative bottom parameter that is less than the value ""y"". ""y"" is the Y-coordinate of the top edge the next line of text to by positioned. What this function does is check to see if we have cleared any obstacles (an obstacle is an <IMG ALIGN=left> or <IMG ALIGN=right>) and expands the margins if we have. ; Definition at line 152 of file TGHtmlLayout.cxx. ◆ PopIndent(). void TGHtmlLayoutContext::PopIndent ; (; ). Adjust (pop) ident. ; Definition at line 1168 of file TGHtmlLayout.cxx. ◆ PopMargin(). void TGHtmlLayoutContext::PopMargin ; (; SHtmlMargin_t ** ; ppMargin, . int ; tag . ). protected . Pop as many margins as necessary until the margin that was created with ""tag"" is popped off. ; Update the layout context to move past obstacles, if necessary.; If there are some margins on the stack that contain non-negative bottom fields, that means there are some obstacles that we have not yet cleared. If these margins get popped off the stack, then we have to be careful to advance the 'bottom' value so that the next line of text will clear the obstacle. ; Definition at line 119 of file TGHtmlLayout.cxx. ◆ PopOneMargin(). void TGHtmlLayoutContext::PopOneMargin ; (; SHtmlMargin_t ** ; ppMargin). protected . Pop one margin off of the given margin stack. ; Definition at line 99 of file TGHtmlLayout.cxx. ◆ PushIndent(). void TGHtmlLayoutContext::PushIndent ; (; ). Adjust (push) ident. ; Definition at line 1156 of file TGHtmlLayout.cxx. ◆ PushMargin(). void TGHtmlLayoutContext::PushMargin ; (; SHtmlMargin_t ** ; ppMargin, . int ; indent, . int ; mbottom, . int ; tag . ). protected . Push a new margin onto the given margin stack. ; If the ""bottom"" parameter is non-negative, then this margin will automatically expire for all text that is placed below the y-coordinate given by ""bottom"". This feature is used for <IMG AL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:18878,clear,cleared,18878,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['clear'],['cleared']
Usability,"extMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; namechar name[80]Definition TGX11.cxx:110; nentriesint nentriesDefinition THbookFile.cxx:91; TLeaf.h; TNtuple.h; TTree.h; TreeUtils.h; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TBranch::SetAddressvirtual void SetAddress(void *add)Set address of this branch.Definition TBranch.cxx:2682; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TCollection::Browsevoid Browse(TBrowser *b) overrideBrowse this collection (called by TBrowser).Definition TCollection.cxx:248; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::ReadStreamLong64_t ReadStream(std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ') overrideRead from filename as many columns as variables in the ntuple the function returns the number of rows...Definition TNtuple.cxx:220; TNtuple::~TNtuple~TNtuple() overrideDefault destructor for an Ntuple.Definition TNtuple.cxx:103; TNtuple::IsATClass * IsA() const overrideDefinition TNtuple.h:61; TNtuple::ResetBranchAddressesvoid ResetBranchAddresses() overrideReset the branch addresses to the internal fArgs array.Definition TNtuple.cxx:147; TNtuple::fNvarInt_t fNvarNumber of columns.Definition TNtuple.h:31; TNtuple::ResetBranchAddressvoid ResetBranchAddress(TBranch *) overrideReset the branch addresses to the internal fArgs array.Definition TNtuple.cxx:133; TNtuple::Classstatic TClass * Class(); TNtuple::Browsevoid Browse(TBrowser *b) overrideBrowse content of the ntuple.Definition TNtuple.cxx:158; TN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNtuple_8cxx_source.html:9837,simpl,simple,9837,doc/master/TNtuple_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TNtuple_8cxx_source.html,1,['simpl'],['simple']
Usability,"extMagnitude() const; Delegate to gVirtualX. void SetTextAlign(Short_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPadPainter.html:5348,simpl,simple,5348,root/html528/TPadPainter.html,https://root.cern,https://root.cern/root/html528/TPadPainter.html,3,['simpl'],['simple']
Usability,"extend selection. . Delete Delete character after cursor, or text selection. . BackSpace Delete character before cursor, or text selection. . Ctrl+B Move cursor left. . Ctrl+D Delete character after cursor, or text selection. . Ctrl+E Move cursor to end of line. . Ctrl+H Delete character before cursor, or text selection. . Ctrl+K Delete characters from current position to the end of line. . Ctrl+U Delete current line. . Definition at line 33 of file TGTextEditor.h. Public Member Functions;  TGTextEditor (const char *filename=nullptr, const TGWindow *p=nullptr, UInt_t w=900, UInt_t h=600);  TGTextEditor constructor with file name as first argument. ;  ;  TGTextEditor (TMacro *macro, const TGWindow *p=nullptr, UInt_t w=0, UInt_t h=0);  TGTextEditor constructor with pointer to a TMacro as first argument. ;  ;  ~TGTextEditor () override;  TGTextEditor destructor. ;  ; void About ();  Display ROOT splash screen. ;  ; void AddLine (const char *string);  ; void AddLineFast (const char *string);  ; void AddText (TGText *text);  ; void ClearText ();  Clear text edit widget. ;  ; void CloseWindow () override;  Close TGTextEditor window. ;  ; void CompileMacro ();  Save the edited text in a temporary macro, then compile it. ;  ; void DataChanged ();  Slot setting the fTextChanged flag to true when the text has been modified in fTextEdit. ;  ; void DataDropped (char *fname);  Update file information when receiving the signal DataDropped from TGTextEdit widget. ;  ; void DeleteWindow () override;  Delete TGTextEditor Window. ;  ; void ExecuteMacro ();  Save the edited text in a temporary macro, execute it, and then delete the temporary file. ;  ; TGText * GetText () const;  ; void Goto ();  Invokes goto dialog, and go to the specified line. ;  ; Bool_t HandleKey (Event_t *event) override;  Keyboard event handler. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle timer event. ;  ; void InterruptMacro ();  Interrupt execution of a macro. ;  ; TClass * IsA () const override;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:5304,Clear,ClearText,5304,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,2,['Clear'],"['Clear', 'ClearText']"
Usability,"ey.cxx. ◆ ReadKeyBuffer(). void TKey::ReadKeyBuffer ; (; char *& ; buffer). Decode input buffer. ; Definition at line 1231 of file TKey.cxx. ◆ ReadObj(). TObject * TKey::ReadObj ; (; ). virtual . To read a TObject* from the file. ; The object associated to this key is read from the file into memory Once the key structure is read (via Streamer) the class identifier of the object is known. Using the class identifier we find the TClass object for this class. A TClass object contains a full description (i.e. dictionary) of the associated class. In particular the TClass object can create a new object of the class type it describes. This new object now calls its Streamer function to rebuilt itself.; Use TKey::ReadObjectAny to read any object non-derived from TObject. Note; A C style cast can only be used in the case where the final class of this object derives from TObject as a first inheritance, otherwise one must use a dynamic_cast.; Example1: simplified case; class MyClass : public TObject, public AnotherClass; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one get away with using: MyClass *obj = (MyClass*)key->ReadObj();; Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like: class MyClass : public AnotherClass, public TObject; Of course, dynamic_cast<> can also be used in the example 1. ; Reimplemented in TKeySQL, and TKeyXML.; Definition at line 759 of file TKey.cxx. ◆ ReadObject(). template<typename T > . T * TKey::ReadObject ; (; ). inline . To read an object (non deriving from TObject) from the file. ; This is more user friendly version of TKey::ReadObjectAny. See TKey::ReadObjectAny for more details. ; Definition at line 103 of file TKey.h. ◆ ReadObjectAny(). void * TKey::ReadObjectAny ; (; const TClass * ; expectedClass). virtual . To read an object (non deriving from TObject) from the file. ; If expectedClass is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKey.html:28547,simpl,simplified,28547,doc/master/classTKey.html,https://root.cern,https://root.cern/doc/master/classTKey.html,1,['simpl'],['simplified']
Usability,"eycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); static TGFrame*BuildCanvas(); static TGFrame*BuildComboBox(); static TGFrame*BuildH3DLine(); static TGFrame*BuildHProgressBar(); static TGFrame*BuildHScrollBar(); static TGFrame*BuildListBox(); static TGFrame*BuildListTree(); static TGFrame*BuildShutter(); static TGFrame*BuildTab(); static TGFrame*BuildTextEdit(); static TGFrame*BuildV3DLine(); static TGFrame*BuildVProgressBar(); static TGFrame*BuildVScrollBar(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidChangeSelected(TGFrame* f); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; static TGPopupMenu*CreatePopup(); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootGuiBuilder.html:4324,Clear,Clear,4324,root/html528/TRootGuiBuilder.html,https://root.cern,https://root.cern/root/html528/TRootGuiBuilder.html,6,['Clear'],['Clear']
Usability,"e . ). overridevirtual . Read object contents from given stream. ; Reimplemented from RooAbsReal.; Definition at line 186 of file RooGenericPdf.cxx. ◆ redirectServersHook(). bool RooGenericPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overrideprotectedvirtual . Propagate server changes to embedded formula object. ; Reimplemented from RooAbsPdf.; Definition at line 147 of file RooGenericPdf.cxx. ◆ Streamer(). void RooGenericPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooGenericPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file RooGenericPdf.h. ◆ translate(). void RooGenericPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overrideprotectedvirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 205 of file RooGenericPdf.cxx. ◆ writeToStream(). void RooGenericPdf::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to given stream. ; Reimplemented from RooAbsReal.; Definition at line 196 of file RooGenericPdf.cxx. Member Data Documentation. ◆ _actualVars. RooListProxy RooGenericPdf::_actualVars. protected . Definition at line 67 of file RooGenericPdf.h. ◆ _formE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:80859,simpl,simple,80859,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['simpl'],['simple']
Usability,e ; type). inlineprotected . Definition at line 53 of file TProfile2Poly.h. ◆ Streamer(). void TProfile2PolyBin::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TH2PolyBin. ◆ StreamerNVirtual(). void TProfile2PolyBin::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TProfile2Poly.h. ◆ Update(). void TProfile2PolyBin::Update ; (; ). Update. ; Definition at line 79 of file TProfile2Poly.cxx. ◆ UpdateAverage(). void TProfile2PolyBin::UpdateAverage ; (; ). protected . Update average. ; Definition at line 89 of file TProfile2Poly.cxx. ◆ UpdateError(). void TProfile2PolyBin::UpdateError ; (; ). protected . Update error. ; Definition at line 97 of file TProfile2Poly.cxx. Friends And Related Symbol Documentation. ◆ TProfile2Poly. friend class TProfile2Poly. friend . Definition at line 21 of file TProfile2Poly.h. Member Data Documentation. ◆ fAverage. Double_t TProfile2PolyBin::fAverage. private . Definition at line 45 of file TProfile2Poly.h. ◆ fError. Double_t TProfile2PolyBin::fError. private . Definition at line 46 of file TProfile2Poly.h. ◆ fErrorMode. EErrorType TProfile2PolyBin::fErrorMode = kERRORMEAN. private . Definition at line 47 of file TProfile2Poly.h. ◆ fSumvw. Double_t TProfile2PolyBin::fSumvw. private . Definition at line 42 of file TProfile2Poly.h. ◆ fSumw. Double_t TProfile2PolyBin::fSumw. private . Definition at line 41 of file TProfile2Poly.h. ◆ fSumw2. Double_t TProfile2PolyBin::fSumw2. private . Definition at line 43 of file TProfile2Poly.h. ◆ fSumwv2. Double_t TProfile2PolyBin::fSumwv2. private . Definition at line 44 of file TProfile2Poly.h. Libraries for TProfile2PolyBin:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile2Poly.h; hist/hist/src/TProfile2Poly.cxx. TProfile2PolyBin. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:12 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2PolyBin.html:17239,Guid,Guide,17239,doc/master/classTProfile2PolyBin.html,https://root.cern,https://root.cern/doc/master/classTProfile2PolyBin.html,1,['Guid'],['Guide']
Usability,"e | kDoubleBorder, . Pixel_t ; back = GetDefaultFrameBackground() . ). Create a canvas object. ; Definition at line 2130 of file TGCanvas.cxx. ◆ ~TGCanvas(). TGCanvas::~TGCanvas ; (; ). override . Delete canvas. ; Definition at line 2155 of file TGCanvas.cxx. Member Function Documentation. ◆ AddFrame(). void TGCanvas::AddFrame ; (; TGFrame * ; f, . TGLayoutHints * ; l = nullptr . ). virtual . Adding a frame to a canvas is actually adding the frame to the viewport container. ; The viewport container must be at least a TGCompositeFrame for this method to succeed. ; Definition at line 2188 of file TGCanvas.cxx. ◆ Class(). static TClass * TGCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 239 of file TGCanvas.h. ◆ ClearViewPort(). void TGCanvas::ClearViewPort ; (; ). virtual . Clear view port and redraw content. ; Definition at line 2434 of file TGCanvas.cxx. ◆ DeclFileName(). static const char * TGCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 239 of file TGCanvas.h. ◆ DrawBorder(). void TGCanvas::DrawBorder ; (; ). overridevirtual . Draw canvas border. ; Reimplemented from TGFrame.; Definition at line 2204 of file TGCanvas.cxx. ◆ GetContainer(). TGFrame * TGCanvas::GetContainer ; (; ); const. inline . Definition at line 216 of file TGCanvas.h. ◆ GetDefaultSize(). TGDimension TGCanvas::GetDefaultSize ; (; ); const. inlineoverridevirtual . std::cout << fWidth << ""x"" << fHeight << std::endl; ; Reimplemented from TGFrame.; Definition at line 234 of file TGCanvas.h. ◆ GetHsbPosition(). Int_t TGCanvas::GetHsbPosition ; (; ); const. virtual . Get position of horizontal scrollbar. ; Definition at line 2374 of file TGCanvas.cxx. ◆ GetH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCanvas.html:30597,Clear,ClearViewPort,30597,doc/master/classTGCanvas.html,https://root.cern,https://root.cern/doc/master/classTGCanvas.html,1,['Clear'],['ClearViewPort']
Usability,"f (IsGoodForAutoParseMap(*cxxRcd)){; 3247 headersDeclsMap[autoParseKey] = headers;; 3248 headersDeclsMap[annotatedRcd.GetRequestedName()] = headers;; 3249 } else {; 3250 ROOT::TMetaUtils::Info(nullptr, ""Class %s is not included in the set of autoparse keys.\n"", autoParseKey.c_str());; 3251 }; 3252 ; 3253 // Propagate to the classes map only if this is not a template.; 3254 // The header is then used as autoload key and we want to avoid duplicates.; 3255 if (!llvm::isa<clang::ClassTemplateSpecializationDecl>(cxxRcd)){; 3256 headersClassesMap[autoParseKey] = headersDeclsMap[autoParseKey];; 3257 headersClassesMap[annotatedRcd.GetRequestedName()] = headersDeclsMap[annotatedRcd.GetRequestedName()];; 3258 }; 3259 }; 3260 }; 3261 ; 3262 // The same for the typedefs:; 3263 for (auto & tDef : tDefDecls) {; 3264 if (clang::CXXRecordDecl *cxxRcd = tDef->getUnderlyingType()->getAsCXXRecordDecl()) {; 3265 autoParseKey = """";; 3266 visitedDecls.clear();; 3267 std::list<std::string> headers(RecordDecl2Headers(*cxxRcd, interp, visitedDecls));; 3268 headers.push_back(ROOT::TMetaUtils::GetFileName(*tDef, interp));; 3269 // remove duplicates, also if not subsequent; 3270 buffer.clear();; 3271 headers.remove_if([&buffer](const std::string & s) {; 3272 return !buffer.insert(s).second;; 3273 });; 3274 GetMostExternalEnclosingClassNameFromDecl(*tDef, autoParseKey, interp);; 3275 if (autoParseKey.empty()) autoParseKey = tDef->getQualifiedNameAsString();; 3276 headersDeclsMap[autoParseKey] = headers;; 3277 }; 3278 }; 3279 ; 3280 // The same for the functions:; 3281 for (auto & func : funcDecls) {; 3282 std::list<std::string> headers = {ROOT::TMetaUtils::GetFileName(*func, interp)};; 3283 headersDeclsMap[ROOT::TMetaUtils::GetQualifiedName(*func)] = headers;; 3284 }; 3285 ; 3286 // The same for the variables:; 3287 for (auto & var : varDecls) {; 3288 std::list<std::string> headers = {ROOT::TMetaUtils::GetFileName(*var, interp)};; 3289 headersDeclsMap[ROOT::TMetaUtils::GetQualifiedName(*var)] =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:129926,clear,clear,129926,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['clear'],['clear']
Usability,"f (xn != x1 || yn != y1) nloop++;; 1507 }; 1508 if (!optionR) {; 1509 npt = 0;; 1510 for (i=1;i<=nloop;i++) {; 1511 if (i > npoints) {; 1512 gxwork[npt] = gxwork[0]; gywork[npt] = gywork[0];; 1513 } else {; 1514 gxwork[npt] = x[i-1]; gywork[npt] = y[i-1];; 1515 npt++;; 1516 }; 1517 ComputeLogs(npt, optionZ);; 1518 if (gyworkl[npt-1] < rwymin || gyworkl[npt-1] > rwymax) {; 1519 if (npt > 2) {; 1520 ComputeLogs(npt, optionZ);; 1521 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 1522 }; 1523 gxwork[0] = gxwork[npt-1]; gywork[0] = gywork[npt-1];; 1524 npt=1;; 1525 continue;; 1526 }; 1527 }; 1528 if (npt > 1) {; 1529 ComputeLogs(npt, optionZ);; 1530 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 1531 }; 1532 } else {; 1533 drawtype += 10;; 1534 npt = 0;; 1535 for (i=1;i<=nloop;i++) {; 1536 if (i > npoints) {; 1537 gxwork[npt] = gxwork[0]; gywork[npt] = gywork[0];; 1538 } else {; 1539 if (y[i-1] < minimum || y[i-1] > maximum) continue;; 1540 if (x[i-1] < uxmin || x[i-1] > uxmax) continue;; 1541 gxwork[npt] = x[i-1]; gywork[npt] = y[i-1];; 1542 npt++;; 1543 }; 1544 ComputeLogs(npt, optionZ);; 1545 if (gxworkl[npt-1] < rwxmin || gxworkl[npt-1] > rwxmax) {; 1546 if (npt > 2) {; 1547 ComputeLogs(npt, optionZ);; 1548 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 1549 }; 1550 gxwork[0] = gxwork[npt-1]; gywork[0] = gywork[npt-1];; 1551 npt=1;; 1552 continue;; 1553 }; 1554 }; 1555 if (npt > 1) {; 1556 ComputeLogs(npt, optionZ);; 1557 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 1558 }; 1559 }; 1560 }; 1561 ; 1562 // Draw the graph with a '*' on every points; 1563 if (optionStar) {; 1564 theGraph->SetMarkerStyle(3);; 1565 npt = 0;; 1566 for (i=1;i<=npoints;i++) {; 1567 gxwork[npt] = x[i-1]; gywork[npt] = y[i-1];; 1568 npt++;; 1569 if (i == npoints) {; 1570 ComputeLogs(npt, optionZ);; 1571 if (optionR) gPad->PaintPolyMarker(npt,gyworkl.data(),gxworkl.data());; 1572 else gPad->PaintPolyMarker(npt,gxworkl.data(),gywor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:56465,ux,uxmin,56465,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"f TListIter, we consequently know that; 1171 // both this and aIter are of type inheriting from TListIter.; 1172 const TListIter &iter(dynamic_cast<const TListIter &>(aIter));; 1173 return (fCurCursor != iter.fCurCursor);; 1174 }; 1175 return false; // for base class we don't implement a comparison; 1176}; 1177 ; 1178////////////////////////////////////////////////////////////////////////////////; 1179/// This operator compares two TListIter objects.; 1180 ; 1181Bool_t TListIter::operator!=(const TListIter &aIter) const; 1182{; 1183 return (fCurCursor != aIter.fCurCursor);; 1184}; 1185 ; 1186////////////////////////////////////////////////////////////////////////////////; 1187/// Stream all objects in the collection to or from the I/O buffer.; 1188 ; 1189void TList::Streamer(TBuffer &b); 1190{; 1191 R__COLLECTION_WRITE_GUARD();; 1192 ; 1193 Int_t nobjects;; 1194 UChar_t nch;; 1195 Int_t nbig;; 1196 TObject *obj;; 1197 UInt_t R__s, R__c;; 1198 ; 1199 if (b.IsReading()) {; 1200 Clear(); // Get rid of old data if any.; 1201 Version_t v = b.ReadVersion(&R__s, &R__c);; 1202 if (v > 3) {; 1203 TObject::Streamer(b);; 1204 fName.Streamer(b);; 1205 b >> nobjects;; 1206 std::string readOption;; 1207 for (Int_t i = 0; i < nobjects; i++) {; 1208 b >> obj;; 1209 b >> nch;; 1210 if (v > 4 && nch == 255) {; 1211 b >> nbig;; 1212 } else {; 1213 nbig = nch;; 1214 }; 1215 readOption.resize(nbig,'\0');; 1216 b.ReadFastArray((char*) readOption.data(),nbig);; 1217 if (obj) { // obj can be null if the class had a custom streamer and we do not have the shared library nor a streamerInfo.; 1218 if (nch) {; 1219 Add(obj,readOption.c_str());; 1220 } else {; 1221 Add(obj);; 1222 }; 1223 }; 1224 }; 1225 b.CheckByteCount(R__s, R__c,TList::IsA());; 1226 return;; 1227 }; 1228 ; 1229 // process old versions when TList::Streamer was in TCollection::Streamer; 1230 if (v > 2); 1231 TObject::Streamer(b);; 1232 if (v > 1); 1233 fName.Streamer(b);; 1234 b >> nobjects;; 1235 for (Int_t i = 0; i < nobjects",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:35880,Clear,Clear,35880,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['Clear'],['Clear']
Usability,"f TObjArray and its base classes are not supported.; 16.8.1 The Idea Behind TClonesArray; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete):; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); a[i] = new TTrack(x,y,z,...);; ...; }; ...; a.Delete();; }; You better use a TClonesArray which reduces the number of new/delete calls to only O(10000):; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); TTrack *track = (Track*)a.ConstructedAt(i);; track->Set(x,y,z,...);; ...; }; ...; a.Clear(); // Or Clear(""C"") if the track objects must be returned (via Track::Clear) to a default state.; }; Considering that a pair of new/delete calls on average cost about 70 ms, O(109) new/deletes will save about 19 hours. For the other collections, see the class reference guide on the web and the test program $ROOTSYS/test/tcollex.cxx.; 16.9 Template Containers and STL; Some people dislike polymorphic containers because they are not truly “type safe”. In the end, the compiler leaves it the user to ensure that the types are correct. This only leaves the other alternative: creating a new class each time a new (container organization) / (contained object) combination is needed. To say the least this could be very tedious. Most people faced with this choice would, for each type of container:; Define the class leaving a dummy name for the contained object type. When a particular container was needed, copy the code and then do a global search and replace for the contained class. C++ has a built in template scheme that effectively does just this. For example:; template<class T>; class ArrayContainer {; private:; T *member[10];; ...; };; This is an array container with a 10-element array of pointers to T, it could hold up to 10 T objects. This array is flawed becau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:855465,guid,guide,855465,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guide']
Usability,"f a new minimum is found, the best parameter values are retained as start values for future scans or minimizations. The curve resulting from each scan can be plotted on the output terminal using MnPlot [api:plot] in order to show the approximate behaviour of the function.; 5.10.2 ScanMinimizer; Although the \(\mbox{SCAN}\) method is not intended for minimization it can be used as a minimizer in its most primitive form.; 5.11 MnSimplex and SimplexMinimizer; [api:simplex]; \(\mbox{SIMPLEX}\) is a function minimization method using the simplex method of Nelder and Mead. MnSimplex provides minimization of the function by the method of \(\mbox{SIMPLEX}\) and the functionality for parameters interaction. It also retains the result from the last minimization in case the user may want to do subsequent minimization steps with parameter interactions in between the minimization requests. The minimization is done by the SimplexMinimizer. Minimization of the function can be done by directly using the SimplexMinimizer if no parameters interaction is required. As \(\mbox{SIMPLEX}\) is a stepping method it does not produce a covariance matrix.; 5.11.1 MnSimplex(const FCNBase&, const std::vector\(<\)double\(>\)&,. const std::vector\(<\)double\(>\)&, unsigned int) ###; Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,. unsigned int) ###; Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,. const MnStrategy&) ###; Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:50094,Simpl,SimplexMinimizer,50094,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['Simpl'],['SimplexMinimizer']
Usability,"f a new minimum is found, the best parameter values are retained as start values for future scans or minimizations. The curve resulting from each scan can be plotted on the output terminal using MnPlot [api:plot] in order to show the approximate behaviour of the function.; 5.10.2 ScanMinimizer; Although the \(\mbox{SCAN}\) method is not intended for minimization it can be used as a minimizer in its most primitive form.; 5.11 MnSimplex and SimplexMinimizer; [api:simplex]; \(\mbox{SIMPLEX}\) is a function minimization method using the simplex method of Nelder and Mead. MnSimplex provides minimization of the function by the method of \(\mbox{SIMPLEX}\) and the functionality for parameters interaction. It also retains the result from the last minimization in case the user may want to do subsequent minimization steps with parameter interactions in between the minimization requests. The minimization is done by the SimplexMinimizer. Minimization of the function can be done by directly using the SimplexMinimizer if no parameters interaction is required. As \(\mbox{SIMPLEX}\) is a stepping method it does not produce a covariance matrix.; 5.11.1 MnSimplex(const FCNBase&, const std::vector\(<\)double\(>\)&,; const std::vector\(<\)double\(>\)&, unsigned int); Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,; unsigned int); Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,; const MnStrategy&); Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum. Minimizati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:54099,Simpl,SimplexMinimizer,54099,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['Simpl'],['SimplexMinimizer']
Usability,"f all members ; TGLViewerEditor Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; GUI editor for TGLViewer. ; Definition at line 36 of file TGLViewerEditor.h. Public Member Functions;  TGLViewerEditor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ;  ~TGLViewerEditor () override;  ; void DetachFromPad ();  ; void DoAnnotation ();  Create annotation via picking. ;  ; void DoASavImageGUIBaseName (const char *t);  Update base-name. ;  ; void DoASavImageGUIOutMode (Int_t m);  Update output mode. ;  ; void DoASavImageStart ();  Start auto-rotator image auto-save. ;  ; void DoASavImageStop ();  Stop auto-rotator image auto-save. ;  ; void DoCameraCenterExt ();  Set external camera center. ;  ; void DoCameraHome ();  CameraHome was clicked. ;  ; void DoCameraOverlay ();  Update viewer with GUI state. ;  ; void DoCaptureCenter ();  Capture camera-center via picking. ;  ; void DoClearColor (Pixel_t color);  Clear-color was changed. ;  ; void DoDrawCameraCenter ();  Draw camera center. ;  ; void DoIgnoreSizesOnUpdate ();  ResetCamerasOnUpdate was toggled. ;  ; void DoResetCamerasOnUpdate ();  ResetCamerasOnUpdate was toggled. ;  ; void DoRotatorStart ();  Start auto-rotator. ;  ; void DoRotatorStop ();  Stop auto-rotator. ;  ; void DoUpdateScene ();  UpdateScene was clicked. ;  ; TClass * IsA () const override;  ; void SetGuides ();  Configuration of guides GUI called from SetModel(). ;  ; void SetModel (TObject *obj) override;  Sets model or disables/hides viewer. ;  ; void SetRotatorMode ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateCameraCenter ();  Update current camera with GUI state. ;  ; void UpdateMaxDrawTimes ();  Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. ;  ; void UpdatePointLineStuff ();  Slot for point-sizes and line-widths. ;  ; void UpdateRota",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewerEditor.html:1271,Clear,Clear-color,1271,doc/master/classTGLViewerEditor.html,https://root.cern,https://root.cern/doc/master/classTGLViewerEditor.html,1,['Clear'],['Clear-color']
Usability,"f all members |; Public Attributes |; List of all members ; ROOT::RGeomConfig Class Reference. ; Configuration parameters which can be configured on the client Send as is to-from client. ; Definition at line 162 of file RGeomData.hxx. Public Attributes; int build_shapes {1};  when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ;  ; std::string drawopt;  draw options for TGeoPainter ;  ; int maxnumfaces {0};  maximal number of faces ;  ; int maxnumnodes {0};  maximal number of nodes ;  ; int nsegm {0};  number of segments for cylindrical shapes ;  ; bool showtop {false};  show geometry top volume, off by default ;  ; int vislevel {0};  visible level ;  . #include <ROOT/RGeomData.hxx>; Member Data Documentation. ◆ build_shapes. int ROOT::RGeomConfig::build_shapes {1}. when shapes build on server 0 - never, 1 - TGeoComposite, 2 - plus non-cylindrical, 3 - all ; Definition at line 168 of file RGeomData.hxx. ◆ drawopt. std::string ROOT::RGeomConfig::drawopt. draw options for TGeoPainter ; Definition at line 170 of file RGeomData.hxx. ◆ maxnumfaces. int ROOT::RGeomConfig::maxnumfaces {0}. maximal number of faces ; Definition at line 166 of file RGeomData.hxx. ◆ maxnumnodes. int ROOT::RGeomConfig::maxnumnodes {0}. maximal number of nodes ; Definition at line 165 of file RGeomData.hxx. ◆ nsegm. int ROOT::RGeomConfig::nsegm {0}. number of segments for cylindrical shapes ; Definition at line 169 of file RGeomData.hxx. ◆ showtop. bool ROOT::RGeomConfig::showtop {false}. show geometry top volume, off by default ; Definition at line 167 of file RGeomData.hxx. ◆ vislevel. int ROOT::RGeomConfig::vislevel {0}. visible level ; Definition at line 164 of file RGeomData.hxx. Libraries for ROOT::RGeomConfig:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomConfig. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomConfig.html:2049,Guid,Guide,2049,doc/v632/classROOT_1_1RGeomConfig.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomConfig.html,1,['Guid'],['Guide']
Usability,"f any (matching 'dataset', if defined). ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *opt="""");  Detach this instance to its proofserv. ;  ; void DisableGoAsyn ();  Signal to disable related switches. ;  ; Int_t DownloadPackage (const char *par, const char *dstdir=0);  Download a PROOF archive (PAR file) from the master package repository. ;  ; Long64_t DrawSelect (const char *dsetname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Execute the specified drawing action on a data set which is stored on the master with name 'dsetname'. ;  ; virtual Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0);  Execute the specified drawing action on a data set (TDSet). ;  ; virtual Int_t Echo (const char *str);  Sends a string t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:5532,feedback,feedback,5532,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['feedback'],['feedback']
Usability,"f blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); Update pointer to current Tree and recompute pointers to the branches in the cache. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). Bool_t IsLearning() const; {return fIsLearning;}. » Author: Rene Brun 04/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeCache.h 39275 2011-05-19 18:17:3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:22291,learn,learning,22291,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['learn'],['learning']
Usability,"f browsable elements - combines several different elements together. More...;  ; class  RHolder;  Basic class for object holder of any kind. More...;  ; class  RItem;  Representation of single item in the browser. More...;  ; class  RLevelIter;  Iterator over single level hierarchy like any array, keys list, ... More...;  ; class  RProvider;  Provider of different browsing methods for supported classes. More...;  ; class  RShared;  ; class  RSysDirLevelIter;  Iterator over files in in sub-directory. More...;  ; class  RSysFile;  ; class  RSysFileItem;  Representation of single item in the file browser. More...;  ; class  RUnique;  ; class  RWrapper;  Wrapper for other element - to provide different name. More...;  ; class  TGeoBrowseProvider;  Provider for TGeo browsing. More...;  ; class  TGeoManagerElement;  Representing TGeoManager in browsables. More...;  ; class  TGeoNodeElement;  Representing TGeoNode in browsables. More...;  ; class  TGeoVolumeElement;  Representing TGeoVolume in browsables. More...;  ; class  TGeoVolumeIter;  Iterating over nodes in the volume. More...;  ; class  TKeyItem;  Representation of single item in the file browser for object from TKey. More...;  ; class  TObjectElement;  Access to TObject basic properties for RBrowsable. More...;  ; class  TObjectHolder;  Holder of TObject instance. More...;  ; class  TObjectItem;  Representation of single item in the file browser for generic TObject object. More...;  . Typedefs; using RElementPath_t = std::vector< std::string >;  . Variables; ROOT::Browsable::TGeoBrowseProvider newTGeoBrowseProvider;  . Typedef Documentation. ◆ RElementPath_t. using ROOT::Browsable::RElementPath_t = typedef std::vector<std::string>. Definition at line 20 of file RElement.hxx. Variable Documentation. ◆ newTGeoBrowseProvider. ROOT::Browsable::TGeoBrowseProvider ROOT::Browsable::newTGeoBrowseProvider. ROOTBrowsable. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Browsable.html:2286,Guid,Guide,2286,doc/v632/namespaceROOT_1_1Browsable.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Browsable.html,1,['Guid'],['Guide']
Usability,"f class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBernstein::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file RooBernstein.h. ◆ translate(). void RooBernstein::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 84 of file RooBernstein.cxx. ◆ xmax(). double RooBernstein::xmax ; (; ); const. inlineprivate . Definition at line 42 of file RooBernstein.h. ◆ xmin(). double RooBernstein::xmin ; (; ); const. inlineprivate . Definition at line 41 of file RooBernstein.h. Member Data Documentation. ◆ _buffer. std::vector<double> RooBernstein::_buffer. mutableprivate . ! ; Definition at line 47 of file RooBernstein.h. ◆ _coefList. RooListProxy RooBernstein::_coefList. private . Definition at line 45 of file RooBernstein.h. ◆ _refRangeName. std::string RooBernstein::_refRangeName. private . Definition at line 46 of file RooBernstein.h. ◆ _x. RooTemplateProxy<RooAbsRealLValue> RooBernstein::_x. private . Definition at line 44 of file RooBernstein.h. Libraries for RooBernstein:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooBernstein.h; roofit/roofit/src/RooBernstein.cxx. RooBernstein. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:80823,Guid,Guide,80823,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,1,['Guid'],['Guide']
Usability,"f class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuperposeTo (TSpider *sp);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpider.html:6496,Clear,Clear,6496,doc/master/classTSpider.html,https://root.cern,https://root.cern/doc/master/classTSpider.html,1,['Clear'],['Clear']
Usability,"f clone (identical) objects.Definition TClonesArray.h:29; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeCacheA cache to speed-up the reading of ROOT datasets.Definition TTreeCache.h:32; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; int; nconst Int_t nDefinition legend1.C:16; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RCompressionSetting::EAlgorithm::kUseGlobal@ kUseGlobalUse the global compression algorithm.Definition Compression.h:93; ROOT::RCompressionSetting::EAlgorithm::kInherit@ kInheritSome objects use this value to denote that the compression algorithm should be inherited from the par...Definition Compression.h:91; ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault@ kUseCompiledDefaultUse the compile-time default setting.Definition Compression.h:53; ROOT::RCompressionSetting::ELevel::kUseMin@ kUseMinCompression level reserved when we are not sure what to use (1 is for the fastest compression)Definition Compression.h:72. treetreeincTBranch.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8h_source.html:43218,Guid,Guide,43218,doc/master/TBranch_8h_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8h_source.html,1,['Guid'],['Guide']
Usability,"f entries of the whole distribution). Candle plots like these are usually called ""notched candle plots"".; In case the significance of the median is greater that the size of the box, the box will have an unnatural shape. Usually it means the chart has not enough data, or that representing this uncertainty is not useful; The Mean; The mean can be drawn as a dashed line or as a circle or not drawn at all. The mean is the arithmetic average of the values in the distribution. It is calculated using GetMean(). Because histograms are binned data, the mean value can differ from a calculation on the raw-data. If the distribution is large enough and gaussian shaped the mean will be exactly the median.; The Whiskers; The whiskers represent the part of the distribution not covered by the box. The upper 25% and the lower 25% of the distribution are located within the whiskers. Two representations are available. A simple one (using w=1) defining the lower whisker from the lowest data value to the bottom of the box, and the upper whisker from the top of the box to the highest data value. In this representation the whisker-lines are dashed.; A more complex one having a further restriction. The whiskers are still connected to the box but their length cannot exceed \( 1.5\times iqr \). So it might be that the outermost part of the underlying distribution will not be covered by the whiskers. Usually these missing parts will be represented by the outliers (see points). Of course the upper and the lower whisker may differ in length. In this representation the whiskers are drawn as solid lines. SinceROOT version 6.11/01; Using the static function TCandle::SetWhiskerRange(double) the whisker definition w=1 will be overwritten. E.g. using a whisker-range of 0.95 and w=1 will redefine the area of the lower whisker to the upper whisker in order to cover 95% of the distribution inside that candle. The static function will affect all candle-charts in the running program. Default is 1.; If the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:61710,simpl,simple,61710,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['simpl'],['simple']
Usability,"f events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classific",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:1710,learn,learning,1710,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['learn'],['learning']
Usability,"f file NeuralNet.h. ◆ convergenceCount(). size_t TMVA::DNN::Settings::convergenceCount ; (; ); const. inline . returns the current convergence count ; Definition at line 827 of file NeuralNet.h. ◆ convergenceSteps(). size_t TMVA::DNN::Settings::convergenceSteps ; (; ); const. inline . how many steps until training is deemed to have converged ; Definition at line 766 of file NeuralNet.h. ◆ create() [1/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . for monitoring ; Definition at line 819 of file NeuralNet.h. ◆ create() [2/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max, . int ; bins2, . double ; min2, . double ; max2 . ). inline . for monitoring ; Definition at line 820 of file NeuralNet.h. ◆ cycle(). virtual void TMVA::DNN::Settings::cycle ; (; double ; progress, . TString ; text . ). inlinevirtual . Parameters. textadvance on the progress bar; progressthe new value; texta label . Definition at line 799 of file NeuralNet.h. ◆ drawSample(). virtual void TMVA::DNN::Settings::drawSample ; (; const std::vector< double > & ; , . const std::vector< double > & ; , . const std::vector< double > & ; , . double ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 807 of file NeuralNet.h. ◆ dropFractions(). const std::vector< double > & TMVA::DNN::Settings::dropFractions ; (; ); const. inline . Definition at line 762 of file NeuralNet.h. ◆ dropRepetitions(). size_t TMVA::DNN::Settings::dropRepetitions ; (; ); const. inline . Definition at line 761 of file NeuralNet.h. ◆ endTestCycle(). virtual void TMVA::DNN::Settings::endTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 805 of file NeuralNet.h. ◆ endTrainCycle(). virtual void TMVA::DNN::Settings::endTrainCycle ; (; double ; ). inlinevirtual . callback for monitoring",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:7357,progress bar,progress bar,7357,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['progress bar'],['progress bar']
Usability,f file TBaseClass.h. ◆ IsSTLContainer(). ROOT::ESTLType TBaseClass::IsSTLContainer ; (; ). Return which type (if any) of STL container the data member is. ; Definition at line 101 of file TBaseClass.cxx. ◆ operator=(). TBaseClass & TBaseClass::operator= ; (; const TBaseClass & ; ). privatedelete . ◆ Property(). Long_t TBaseClass::Property ; (; ); const. overridevirtual . Get property description word. For meaning of bits see EProperty. ; Implements TDictionary.; Definition at line 134 of file TBaseClass.cxx. ◆ SetClass(). void TBaseClass::SetClass ; (; TClass * ; cl). inline . Definition at line 67 of file TBaseClass.h. ◆ Streamer(). void TBaseClass::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of TBaseClass. ; Triggers the calculation of the cache variables to store them. ; Reimplemented from TObject.; Definition at line 147 of file TBaseClass.cxx. ◆ StreamerNVirtual(). void TBaseClass::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TBaseClass.h. Member Data Documentation. ◆ fClass. TClass* TBaseClass::fClass. private . Definition at line 51 of file TBaseClass.h. ◆ fClassPtr. TClassRef TBaseClass::fClassPtr. private . pointer to CINT base class info ; Definition at line 50 of file TBaseClass.h. ◆ fDelta. AtomicInt_t TBaseClass::fDelta. private . pointer to parent class ; Definition at line 52 of file TBaseClass.h. ◆ fInfo. BaseClassInfo_t* TBaseClass::fInfo. private . Definition at line 49 of file TBaseClass.h. ◆ fProperty. AtomicInt_t TBaseClass::fProperty. mutableprivate . Definition at line 53 of file TBaseClass.h. ◆ fSTLType. Int_t TBaseClass::fSTLType. private . Definition at line 54 of file TBaseClass.h. Libraries for TBaseClass:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TBaseClass.h; core/meta/src/TBaseClass.cxx. TBaseClass. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBaseClass.html:18823,Guid,Guide,18823,doc/master/classTBaseClass.html,https://root.cern,https://root.cern/doc/master/classTBaseClass.html,1,['Guid'],['Guide']
Usability,"f file TCling.cxx. ◆ ClassInfo_Size(). int TCling::ClassInfo_Size ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8400 of file TCling.cxx. ◆ ClassInfo_Tagnum(). Longptr_t TCling::ClassInfo_Tagnum ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8408 of file TCling.cxx. ◆ ClassInfo_Title(). const char * TCling::ClassInfo_Title ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8442 of file TCling.cxx. ◆ ClassInfo_TmpltName(). const char * TCling::ClassInfo_TmpltName ; (; ClassInfo_t * ; info); const. finalvirtual . Reimplemented from TInterpreter.; Definition at line 8450 of file TCling.cxx. ◆ ClearFileBusy(). void TCling::ClearFileBusy ; (; ). finalvirtual . Reset the interpreter internal state in case a previous action was not correctly terminated. ; Implements TInterpreter.; Definition at line 3077 of file TCling.cxx. ◆ ClearStack(). void TCling::ClearStack ; (; ). finalvirtual . Delete existing temporary values. ; Implements TInterpreter.; Definition at line 3085 of file TCling.cxx. ◆ CodeComplete(). void TCling::CodeComplete ; (; const std::string & ; line, . size_t & ; cursor, . std::vector< std::string > & ; completions . ). finalvirtual . The call to Cling's tab complition. ; Reimplemented from TInterpreter.; Definition at line 7670 of file TCling.cxx. ◆ CreateEnum(). TEnum * TCling::CreateEnum ; (; void * ; VD, . TClass * ; cl . ); const. finalvirtual . Implements TInterpreter.; Definition at line 469 of file TCling.cxx. ◆ CreateListOfBaseClasses(). void TCling::CreateListOfBaseClasses ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to base class(es) for TClass cl. ; Implements TInterpreter.; Definition at line 4371 of file TCling.cxx. ◆ CreateListOfDataMembers(). void TCling::CreateListOfDataMembers ; (; TClass * ; cl); const. finalvirtual . Create list of pointers to data members",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:76061,Clear,ClearStack,76061,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Clear'],['ClearStack']
Usability,"f file TEnum.h. ◆ IsA(). TClass * TEnum::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDictionary.; Definition at line 81 of file TEnum.h. ◆ IsValid(). Bool_t TEnum::IsValid ; (; ). Return true if this enum object is pointing to a currently loaded enum. ; If a enum is unloaded after the TEnum is created, the TEnum will be set to be invalid. ; Definition at line 124 of file TEnum.cxx. ◆ operator=(). TEnum & TEnum::operator= ; (; const TEnum & ; src). Assign operator. ; Definition at line 81 of file TEnum.cxx. ◆ Property(). Long_t TEnum::Property ; (; ); const. overridevirtual . Get property description word. For meaning of bits see EProperty. ; Implements TDictionary.; Definition at line 139 of file TEnum.cxx. ◆ SetClass(). void TEnum::SetClass ; (; TClass * ; cl). inline . Definition at line 75 of file TEnum.h. ◆ Streamer(). void TEnum::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDictionary. ◆ StreamerNVirtual(). void TEnum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TEnum.h. ◆ Update(). void TEnum::Update ; (; DeclId_t ; id). Definition at line 156 of file TEnum.cxx. Member Data Documentation. ◆ fClass. TClass* TEnum::fClass = nullptr. private . Interpreter information, owned by TEnum. ; Definition at line 38 of file TEnum.h. ◆ fConstantList. THashList TEnum::fConstantList. private . Definition at line 36 of file TEnum.h. ◆ fInfo. ClassInfo_t* TEnum::fInfo = nullptr. private . Definition at line 37 of file TEnum.h. ◆ fQualName. std::string TEnum::fQualName. private . Owning class. ; Definition at line 39 of file TEnum.h. ◆ fUnderlyingType. EDataType TEnum::fUnderlyingType = kInt_t. private . Definition at line 40 of file TEnum.h. core/meta/inc/TEnum.h; core/meta/src/TEnum.cxx. TEnum. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:11:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTEnum.html:20653,Guid,Guide,20653,doc/v632/classTEnum.html,https://root.cern,https://root.cern/doc/v632/classTEnum.html,1,['Guid'],['Guide']
Usability,f file TEveTreeTools.h. ◆ SetTree(). void TEvePointSelector::SetTree ; (; TTree * ; t). inline . Definition at line 94 of file TEveTreeTools.h. ◆ SetVarexp(). void TEvePointSelector::SetVarexp ; (; const char * ; v). inline . Definition at line 100 of file TEveTreeTools.h. ◆ Streamer(). void TEvePointSelector::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEvePointSelector::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 110 of file TEveTreeTools.h. ◆ TakeAction(). void TEvePointSelector::TakeAction ; (; ). overridevirtual . Callback from tree-player after a chunk of data has been processed. ; This is forwarded to the current point-consumer. ; Reimplemented from TSelectorDraw.; Definition at line 130 of file TEveTreeTools.cxx. Member Data Documentation. ◆ fConsumer. TEvePointSelectorConsumer* TEvePointSelector::fConsumer. protected . Definition at line 73 of file TEveTreeTools.h. ◆ fInputList. TList TEvePointSelector::fInputList. protected . Definition at line 81 of file TEveTreeTools.h. ◆ fSelection. TString TEvePointSelector::fSelection. protected . Definition at line 76 of file TEveTreeTools.h. ◆ fSelectTree. TTree* TEvePointSelector::fSelectTree. protected . Definition at line 72 of file TEveTreeTools.h. ◆ fSubIdExp. TString TEvePointSelector::fSubIdExp. protected . Definition at line 78 of file TEveTreeTools.h. ◆ fSubIdNum. Int_t TEvePointSelector::fSubIdNum. protected . Definition at line 79 of file TEveTreeTools.h. ◆ fVarexp. TString TEvePointSelector::fVarexp. protected . Definition at line 75 of file TEveTreeTools.h. Libraries for TEvePointSelector:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveTreeTools.h; graf3d/eve/src/TEveTreeTools.cxx. TEvePointSelector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:40 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSelector.html:23719,Guid,Guide,23719,doc/master/classTEvePointSelector.html,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html,1,['Guid'],['Guide']
Usability,f file TFormula.h. ◆ fNconst. Int_t ROOT::v5::TFormula::fNconst. protected . Definition at line 74 of file TFormula.h. ◆ fNdim. Int_t ROOT::v5::TFormula::fNdim. protected . Definition at line 71 of file TFormula.h. ◆ fNoper. Int_t ROOT::v5::TFormula::fNoper. protected . Definition at line 73 of file TFormula.h. ◆ fNOperOptimized. Int_t ROOT::v5::TFormula::fNOperOptimized. protected . cache for information ; Definition at line 91 of file TFormula.h. ◆ fNpar. Int_t ROOT::v5::TFormula::fNpar. protected . Definition at line 72 of file TFormula.h. ◆ fNstring. Int_t ROOT::v5::TFormula::fNstring. protected . Definition at line 77 of file TFormula.h. ◆ fNumber. Int_t ROOT::v5::TFormula::fNumber. protected . Definition at line 75 of file TFormula.h. ◆ fNval. Int_t ROOT::v5::TFormula::fNval. protected . Definition at line 76 of file TFormula.h. ◆ fOper. Int_t* ROOT::v5::TFormula::fOper. private . Definition at line 80 of file TFormula.h. ◆ fOperOffset. TOperOffset* ROOT::v5::TFormula::fOperOffset. protected . [fNOperOptimized] List of operators. (See documentation for changes made at version 7) ; Definition at line 94 of file TFormula.h. ◆ fOperOptimized. Int_t* ROOT::v5::TFormula::fOperOptimized. protected . [fNOperOptimized] List of expressions ; Definition at line 93 of file TFormula.h. ◆ fOptimal. TFuncG ROOT::v5::TFormula::fOptimal. protected . [fNPar] predefined function ; Definition at line 96 of file TFormula.h. ◆ fParams. Double_t* ROOT::v5::TFormula::fParams. protected . Definition at line 83 of file TFormula.h. ◆ fPredefined. TFormulaPrimitive** ROOT::v5::TFormula::fPredefined. protected . [fNOperOptimized] Offsets of operrands ; Definition at line 95 of file TFormula.h. Libraries for ROOT::v5::TFormula:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/v5/TFormula.h; hist/hist/src/TFormula_v5.cxx. ROOTv5TFormula. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:55515,Guid,Guide,55515,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['Guid'],['Guide']
Usability,"f file TGFont.h. ◆ DistanceToText(). Int_t TGTextLayout::DistanceToText ; (; Int_t ; x, . Int_t ; y . ); const. Computes the distance in pixels from the given point to the given text layout. ; Non-displaying space characters that occur at the end of individual lines in the text layout are ignored for hit detection purposes.; The return value is 0 if the point (x, y) is inside the text layout. If the point isn't inside the text layout then the return value is the distance in pixels from the point to the text item.; x, y – Coordinates of point to check, with respect to the upper-left corner of the text layout (in pixels). ; Definition at line 1191 of file TGFont.cxx. ◆ DrawText(). void TGTextLayout::DrawText ; (; Drawable_t ; dst, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . Int_t ; firstChar, . Int_t ; lastChar . ); const. Use the information in the TGTextLayout object to display a multi-line, justified string of text. ; This procedure is useful for simple widgets that need to display single-font, multi-line text and want TGFont to handle the details.; dst – Window or pixmap in which to draw. gc – Graphics context to use for drawing text. x, y – Upper-left hand corner of rectangle in which to draw (pixels). firstChar – The index of the first character to draw from the given text item. 0 specfies the beginning. lastChar – The index just after the last character to draw from the given text item. A number < 0 means to draw all characters. ; Definition at line 923 of file TGFont.cxx. ◆ IntersectText(). Int_t TGTextLayout::IntersectText ; (; Int_t ; x, . Int_t ; y, . Int_t ; w, . Int_t ; h . ); const. Determines whether a text layout lies entirely inside, entirely outside, or overlaps a given rectangle. ; Non-displaying space characters that occur at the end of individual lines in the text layout are ignored for intersection calculations.; The return value is -1 if the text layout is entirely outside of the rectangle, 0 if it overlaps, and 1 if it is entirely inside of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextLayout.html:15343,simpl,simple,15343,doc/master/classTGTextLayout.html,https://root.cern,https://root.cern/doc/master/classTGTextLayout.html,1,['simpl'],['simple']
Usability,f file TGListView.h. ◆ fColumns. Int_t* TGListView::fColumns. protected . column width ; Definition at line 123 of file TGListView.h. ◆ fFontStruct. FontStruct_t TGListView::fFontStruct. protected . text font ; Definition at line 131 of file TGListView.h. ◆ fgDefaultFont. const TGFont * TGListView::fgDefaultFont = nullptr. staticprotected . Definition at line 136 of file TGListView.h. ◆ fgDefaultGC. TGGC * TGListView::fgDefaultGC = nullptr. staticprotected . Definition at line 137 of file TGListView.h. ◆ fHeader. TGHeaderFrame* TGListView::fHeader. protected . frame used as container for column headers ; Definition at line 132 of file TGListView.h. ◆ fJmode. Int_t* TGListView::fJmode. protected . column text alignment ; Definition at line 124 of file TGListView.h. ◆ fJustChanged. Bool_t TGListView::fJustChanged. protected . Indicate whether the view mode was just changed to Detail. ; Definition at line 133 of file TGListView.h. ◆ fMaxSize. TGDimension TGListView::fMaxSize. protected . maximum item size ; Definition at line 126 of file TGListView.h. ◆ fMinColumnSize. UInt_t TGListView::fMinColumnSize. protected . Minimun column size. ; Definition at line 134 of file TGListView.h. ◆ fNColumns. Int_t TGListView::fNColumns. protected . number of columns ; Definition at line 122 of file TGListView.h. ◆ fNormGC. GContext_t TGListView::fNormGC. protected . drawing graphics context ; Definition at line 130 of file TGListView.h. ◆ fSplitHeader. TGVFileSplitter** TGListView::fSplitHeader. protected . column splitters ; Definition at line 129 of file TGListView.h. ◆ fViewMode. EListViewMode TGListView::fViewMode. protected . view mode if list view widget ; Definition at line 125 of file TGListView.h. Libraries for TGListView:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGListView.h; gui/gui/src/TGListView.cxx. TGListView. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListView.html:41854,Guid,Guide,41854,doc/master/classTGListView.html,https://root.cern,https://root.cern/doc/master/classTGListView.html,1,['Guid'],['Guide']
Usability,"f file TGProgressBar.h. ◆ DeclFileName(). static const char * TGHProgressBar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 118 of file TGProgressBar.h. ◆ DoRedraw(). void TGHProgressBar::DoRedraw ; (; ). overrideprotectedvirtual . Draw horizontal progress bar. ; Implements TGProgressBar.; Definition at line 265 of file TGProgressBar.cxx. ◆ GetDefaultSize(). TGDimension TGHProgressBar::GetDefaultSize ; (; ); const. inlineoverridevirtual . std::cout << fWidth << ""x"" << fHeight << std::endl; ; Reimplemented from TGFrame.; Definition at line 110 of file TGProgressBar.h. ◆ IsA(). TClass * TGHProgressBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 118 of file TGProgressBar.h. ◆ SavePrimitive(). void TGHProgressBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a horizontal progress bar as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 464 of file TGProgressBar.cxx. ◆ ShowPosition(). void TGHProgressBar::ShowPosition ; (; Bool_t ; set = kTRUE, . Bool_t ; percent = kTRUE, . const char * ; format = ""%.2f"" . ). Show postion text, either in percent or formatted according format. ; Definition at line 253 of file TGProgressBar.cxx. ◆ Streamer(). void TGHProgressBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGHProgressBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file TGProgressBar.h. Libraries for TGHProgressBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGProgressBar.h; gui/gui/src/TGProgressBar.cxx. TGHProgressBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:33775,progress bar,progress bar,33775,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,2,"['Guid', 'progress bar']","['Guide', 'progress bar']"
Usability,"f file TGSplitFrame.cxx. ◆ Undocked(). void TGSplitFrame::Undocked ; (; TGFrame * ; frame). Emit Undocked() signal. ; Definition at line 711 of file TGSplitFrame.cxx. ◆ UnSplit(). void TGSplitFrame::UnSplit ; (; const char * ; which). Close (unmap and remove from the list of frames) the frame contained in this split frame. ; Definition at line 720 of file TGSplitFrame.cxx. ◆ VSplit(). void TGSplitFrame::VSplit ; (; UInt_t ; w = 0). virtual . Vertically split the frame. ; Definition at line 452 of file TGSplitFrame.cxx. Member Data Documentation. ◆ fFirst. TGSplitFrame* TGSplitFrame::fFirst. protected . Pointer to the first child (if any) ; Definition at line 87 of file TGSplitFrame.h. ◆ fFrame. TGFrame* TGSplitFrame::fFrame. protected . Pointer to the embedded frame (if any) ; Definition at line 84 of file TGSplitFrame.h. ◆ fHRatio. Float_t TGSplitFrame::fHRatio. protected . Height ratio between the first child and this. ; Definition at line 91 of file TGSplitFrame.h. ◆ fSecond. TGSplitFrame* TGSplitFrame::fSecond. protected . Pointer to the second child (if any) ; Definition at line 88 of file TGSplitFrame.h. ◆ fSplitter. TGSplitter* TGSplitFrame::fSplitter. protected . Pointer to the (H/V) Splitter (if any) ; Definition at line 86 of file TGSplitFrame.h. ◆ fSplitTool. TGSplitTool* TGSplitFrame::fSplitTool. protected . SplitFrame Tool. ; Definition at line 89 of file TGSplitFrame.h. ◆ fUndocked. TGTransientFrame* TGSplitFrame::fUndocked. protected . Main frame used when ""undocking"" frame. ; Definition at line 85 of file TGSplitFrame.h. ◆ fWRatio. Float_t TGSplitFrame::fWRatio. protected . Width ratio between the first child and this. ; Definition at line 90 of file TGSplitFrame.h. Libraries for TGSplitFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGSplitFrame.h; gui/gui/src/TGSplitFrame.cxx. TGSplitFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitFrame.html:42447,undo,undocking,42447,doc/master/classTGSplitFrame.html,https://root.cern,https://root.cern/doc/master/classTGSplitFrame.html,2,"['Guid', 'undo']","['Guide', 'undocking']"
Usability,"f file TGeoBranchArray.h. ◆ Sort(). void TGeoBranchArray::Sort ; (; Int_t ; n, . TGeoBranchArray ** ; array, . Int_t * ; index, . Bool_t ; down = kTRUE . ). static . Sorting of an array of branch array pointers. ; Definition at line 386 of file TGeoBranchArray.cxx. ◆ Streamer(). void TGeoBranchArray::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoBranchArray::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 116 of file TGeoBranchArray.h. ◆ UpdateArray(). void TGeoBranchArray::UpdateArray ; (; size_t ; nobj). Updates the internal addresses for n contiguous objects which have the same fMaxLevel Updates the internal addresses for n contiguous objects which have the same fMaxLevel. ; Definition at line 138 of file TGeoBranchArray.cxx. ◆ UpdateNavigator(). void TGeoBranchArray::UpdateNavigator ; (; TGeoNavigator * ; nav); const. Update the navigator to reflect the branch. ; nav->CdTop(); ; Definition at line 400 of file TGeoBranchArray.cxx. Member Data Documentation. ◆ fArray. TGeoNode** TGeoBranchArray::fArray. protected . Definition at line 27 of file TGeoBranchArray.h. ◆ fLevel. Int_t TGeoBranchArray::fLevel. protected . Definition at line 24 of file TGeoBranchArray.h. ◆ fMatrix. TGeoHMatrix TGeoBranchArray::fMatrix. protected . Definition at line 26 of file TGeoBranchArray.h. ◆ fMaxLevel. Int_t TGeoBranchArray::fMaxLevel. protected . Definition at line 25 of file TGeoBranchArray.h. ◆ fRealArray. TGeoNode* TGeoBranchArray::fRealArray[1]. protected . [fMaxLevel+1] Array of nodes ; Definition at line 28 of file TGeoBranchArray.h. Libraries for TGeoBranchArray:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoBranchArray.h; geom/geom/src/TGeoBranchArray.cxx. TGeoBranchArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBranchArray.html:24280,Guid,Guide,24280,doc/master/classTGeoBranchArray.html,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html,1,['Guid'],['Guide']
Usability,f file TGraphPolar.cxx. ◆ SetMinimum(). void TGraphPolar::SetMinimum ; (; Double_t ; minimum = 0). inlineoverridevirtual . Set the minimum of the graph. ; Reimplemented from TGraph.; Definition at line 46 of file TGraphPolar.h. ◆ SetMinPolar(). void TGraphPolar::SetMinPolar ; (; Double_t ; minimum = 0). Set minimum Polar. ; Definition at line 154 of file TGraphPolar.cxx. ◆ SetMinRadial(). void TGraphPolar::SetMinRadial ; (; Double_t ; minimum = 0). Set minimum radial in the center of the circle. ; Definition at line 162 of file TGraphPolar.cxx. ◆ SetOptionAxis(). void TGraphPolar::SetOptionAxis ; (; Bool_t ; opt). inline . Definition at line 49 of file TGraphPolar.h. ◆ SetPolargram(). void TGraphPolar::SetPolargram ; (; TGraphPolargram * ; p). inline . Definition at line 50 of file TGraphPolar.h. ◆ Streamer(). void TGraphPolar::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraphErrors. ; Reimplemented from TGraphErrors. ◆ StreamerNVirtual(). void TGraphPolar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file TGraphPolar.h. Member Data Documentation. ◆ fOptionAxis. Bool_t TGraphPolar::fOptionAxis. private . Force drawing of new coord system. ; Definition at line 26 of file TGraphPolar.h. ◆ fPolargram. TGraphPolargram* TGraphPolar::fPolargram. protected . The polar coordinates system. ; Definition at line 29 of file TGraphPolar.h. ◆ fXpol. Double_t* TGraphPolar::fXpol. protected . [fNpoints] points in polar coordinates ; Definition at line 30 of file TGraphPolar.h. ◆ fYpol. Double_t* TGraphPolar::fYpol. protected . [fNpoints] points in polar coordinates ; Definition at line 31 of file TGraphPolar.h. Libraries for TGraphPolar:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TGraphPolar.h; graf2d/graf/src/TGraphPolar.cxx. TGraphPolar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolar.html:40778,Guid,Guide,40778,doc/master/classTGraphPolar.html,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html,1,['Guid'],['Guide']
Usability,"f file TH2.h. ◆ SetBinsLength(). void TH2C::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 3001 of file TH2.cxx. ◆ Streamer(). void TH2C::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2C. ; Reimplemented from TH2.; Definition at line 3012 of file TH2.cxx. ◆ StreamerNVirtual(). void TH2C::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 176 of file TH2.h. ◆ UpdateBinContent(). void TH2C::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 174 of file TH2.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH2C operator* ; (; Float_t ; c1, . TH2C const & ; h1 . ). friend . Operator *. ; Definition at line 3058 of file TH2.cxx. ◆ operator* [2/3]. TH2C operator* ; (; TH2C const & ; h1, . Float_t ; c1 . ). friend . Definition at line 166 of file TH2.h. ◆ operator* [3/3]. TH2C operator* ; (; TH2C const & ; h1, . TH2C const & ; h2 . ). friend . Operator *. ; Definition at line 3094 of file TH2.cxx. ◆ operator+. TH2C operator+ ; (; TH2C const & ; h1, . TH2C const & ; h2 . ). friend . Operator +. ; Definition at line 3070 of file TH2.cxx. ◆ operator-. TH2C operator- ; (; TH2C const & ; h1, . TH2C const & ; h2 . ). friend . Operator -. ; Definition at line 3082 of file TH2.cxx. ◆ operator/. TH2C operator/ ; (; TH2C const & ; h1, . TH2C const & ; h2 . ). friend . Operator /. ; Definition at line 3106 of file TH2.cxx. Libraries for TH2C:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH2.h; hist/hist/src/TH2.cxx. TH2C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2C.html:66140,Guid,Guide,66140,doc/master/classTH2C.html,https://root.cern,https://root.cern/doc/master/classTH2C.html,1,['Guid'],['Guide']
Usability,"f file TH2.h. ◆ SetBinsLength(). void TH2S::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 3265 of file TH2.cxx. ◆ Streamer(). void TH2S::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2S. ; Reimplemented from TH2.; Definition at line 3276 of file TH2.cxx. ◆ StreamerNVirtual(). void TH2S::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 219 of file TH2.h. ◆ UpdateBinContent(). void TH2S::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 217 of file TH2.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH2S operator* ; (; Float_t ; c1, . TH2S const & ; h1 . ). friend . Operator *. ; Definition at line 3322 of file TH2.cxx. ◆ operator* [2/3]. TH2S operator* ; (; TH2S const & ; h1, . Float_t ; c1 . ). friend . Definition at line 209 of file TH2.h. ◆ operator* [3/3]. TH2S operator* ; (; TH2S const & ; h1, . TH2S const & ; h2 . ). friend . Operator *. ; Definition at line 3358 of file TH2.cxx. ◆ operator+. TH2S operator+ ; (; TH2S const & ; h1, . TH2S const & ; h2 . ). friend . Operator +. ; Definition at line 3334 of file TH2.cxx. ◆ operator-. TH2S operator- ; (; TH2S const & ; h1, . TH2S const & ; h2 . ). friend . Operator -. ; Definition at line 3346 of file TH2.cxx. ◆ operator/. TH2S operator/ ; (; TH2S const & ; h1, . TH2S const & ; h2 . ). friend . Operator /. ; Definition at line 3370 of file TH2.cxx. Libraries for TH2S:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH2.h; hist/hist/src/TH2.cxx. TH2S. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2S.html:66207,Guid,Guide,66207,doc/master/classTH2S.html,https://root.cern,https://root.cern/doc/master/classTH2S.html,1,['Guid'],['Guide']
Usability,"f file TH3.h. ◆ SetBinsLength(). void TH3C::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 3647 of file TH3.cxx. ◆ Streamer(). void TH3C::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH3C. ; Reimplemented from TH3.; Definition at line 3687 of file TH3.cxx. ◆ StreamerNVirtual(). void TH3C::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 192 of file TH3.h. ◆ UpdateBinContent(). void TH3C::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 190 of file TH3.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH3C operator* ; (; Float_t ; c1, . TH3C const & ; h1 . ). friend . Operator *. ; Definition at line 3731 of file TH3.cxx. ◆ operator* [2/3]. TH3C operator* ; (; TH3C const & ; h1, . Float_t ; c1 . ). friend . Definition at line 182 of file TH3.h. ◆ operator* [3/3]. TH3C operator* ; (; TH3C const & ; h1, . TH3C const & ; h2 . ). friend . Operator *. ; Definition at line 3767 of file TH3.cxx. ◆ operator+. TH3C operator+ ; (; TH3C const & ; h1, . TH3C const & ; h2 . ). friend . Operator +. ; Definition at line 3743 of file TH3.cxx. ◆ operator-. TH3C operator- ; (; TH3C const & ; h1, . TH3C const & ; h2 . ). friend . Operator -. ; Definition at line 3755 of file TH3.cxx. ◆ operator/. TH3C operator/ ; (; TH3C const & ; h1, . TH3C const & ; h2 . ). friend . Operator /. ; Definition at line 3779 of file TH3.cxx. Libraries for TH3C:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH3.h; hist/hist/src/TH3.cxx. TH3C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3C.html:67424,Guid,Guide,67424,doc/master/classTH3C.html,https://root.cern,https://root.cern/doc/master/classTH3C.html,1,['Guid'],['Guide']
Usability,"f file TH3.h. ◆ SetBinsLength(). void TH3F::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 4546 of file TH3.cxx. ◆ Streamer(). void TH3F::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH3F. ; Reimplemented from TH3.; Definition at line 4557 of file TH3.cxx. ◆ StreamerNVirtual(). void TH3F::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 358 of file TH3.h. ◆ UpdateBinContent(). void TH3F::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 356 of file TH3.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH3F operator* ; (; Float_t ; c1, . TH3F const & ; h1 . ). friend . Operator *. ; Definition at line 4601 of file TH3.cxx. ◆ operator* [2/3]. TH3F operator* ; (; TH3F const & ; h1, . Float_t ; c1 . ). friend . Definition at line 348 of file TH3.h. ◆ operator* [3/3]. TH3F operator* ; (; TH3F const & ; h1, . TH3F const & ; h2 . ). friend . Operator *. ; Definition at line 4637 of file TH3.cxx. ◆ operator+. TH3F operator+ ; (; TH3F const & ; h1, . TH3F const & ; h2 . ). friend . Operator +. ; Definition at line 4613 of file TH3.cxx. ◆ operator-. TH3F operator- ; (; TH3F const & ; h1, . TH3F const & ; h2 . ). friend . Operator -. ; Definition at line 4625 of file TH3.cxx. ◆ operator/. TH3F operator/ ; (; TH3F const & ; h1, . TH3F const & ; h2 . ). friend . Operator /. ; Definition at line 4649 of file TH3.cxx. Libraries for TH3F:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH3.h; hist/hist/src/TH3.cxx. TH3F. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3F.html:67564,Guid,Guide,67564,doc/master/classTH3F.html,https://root.cern,https://root.cern/doc/master/classTH3F.html,1,['Guid'],['Guide']
Usability,"f file TH3.h. ◆ SetBinsLength(). void TH3S::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 3916 of file TH3.cxx. ◆ Streamer(). void TH3S::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH3S. ; Reimplemented from TH3.; Definition at line 3927 of file TH3.cxx. ◆ StreamerNVirtual(). void TH3S::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TH3.h. ◆ UpdateBinContent(). void TH3S::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 230 of file TH3.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH3S operator* ; (; Float_t ; c1, . TH3S const & ; h1 . ). friend . Operator *. ; Definition at line 3971 of file TH3.cxx. ◆ operator* [2/3]. TH3S operator* ; (; TH3S const & ; h1, . Float_t ; c1 . ). friend . Definition at line 222 of file TH3.h. ◆ operator* [3/3]. TH3S operator* ; (; TH3S const & ; h1, . TH3S const & ; h2 . ). friend . Operator *. ; Definition at line 4007 of file TH3.cxx. ◆ operator+. TH3S operator+ ; (; TH3S const & ; h1, . TH3S const & ; h2 . ). friend . Operator +. ; Definition at line 3983 of file TH3.cxx. ◆ operator-. TH3S operator- ; (; TH3S const & ; h1, . TH3S const & ; h2 . ). friend . Operator -. ; Definition at line 3995 of file TH3.cxx. ◆ operator/. TH3S operator/ ; (; TH3S const & ; h1, . TH3S const & ; h2 . ). friend . Operator /. ; Definition at line 4019 of file TH3.cxx. Libraries for TH3S:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH3.h; hist/hist/src/TH3.cxx. TH3S. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3S.html:67415,Guid,Guide,67415,doc/master/classTH3S.html,https://root.cern,https://root.cern/doc/master/classTH3S.html,1,['Guid'],['Guide']
Usability,"f file TProcessExecutor.hxx. ◆ operator=(). TProcessExecutor & ROOT::TProcessExecutor::operator= ; (; const TProcessExecutor & ; ). delete . ◆ ReplyToFuncResult(). void ROOT::TProcessExecutor::ReplyToFuncResult ; (; TSocket * ; s). private . Reply to a worker who just sent a result. ; If another argument to process exists, tell the worker. Otherwise send a shutdown order. ; Definition at line 108 of file TProcessExecutor.cxx. ◆ ReplyToIdle(). void ROOT::TProcessExecutor::ReplyToIdle ; (; TSocket * ; s). private . Reply to a worker who is idle. ; If another argument to process exists, tell the worker. Otherwise ask for a result ; Definition at line 126 of file TProcessExecutor.cxx. ◆ Reset(). void ROOT::TProcessExecutor::Reset ; (; ). private . Reset TProcessExecutor's state. ; Definition at line 97 of file TProcessExecutor.cxx. ◆ SetNWorkers(). void ROOT::TProcessExecutor::SetNWorkers ; (; unsigned ; n). inline . Definition at line 66 of file TProcessExecutor.hxx. Member Data Documentation. ◆ fNProcessed. unsigned ROOT::TProcessExecutor::fNProcessed. private . number of arguments already passed to the workers ; Definition at line 93 of file TProcessExecutor.hxx. ◆ fNToProcess. unsigned ROOT::TProcessExecutor::fNToProcess. private . total number of arguments to pass to the workers ; Definition at line 94 of file TProcessExecutor.hxx. ◆ fTaskType. ETask ROOT::TProcessExecutor::fTaskType = ETask::kNoTask. private . the kind of task that is being executed, if any ; Definition at line 107 of file TProcessExecutor.hxx. ◆ TExecutorCRTP. friend ROOT::TProcessExecutor::TExecutorCRTP. private . Definition at line 38 of file TProcessExecutor.hxx. Libraries for ROOT::TProcessExecutor:. [legend]; The documentation for this class was generated from the following files:; core/multiproc/inc/ROOT/TProcessExecutor.hxx; core/multiproc/src/TProcessExecutor.cxx. ROOTTProcessExecutor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html:21616,Guid,Guide,21616,doc/master/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TProcessExecutor.html,1,['Guid'],['Guide']
Usability,"f file TPyDispatcher.h. ◆ Dispatch() [50/56]. PyObject * TPyDispatcher::Dispatch ; (; TSlave * ; slave). inline . Definition at line 168 of file TPyDispatcher.h. ◆ Dispatch() [51/56]. PyObject * TPyDispatcher::Dispatch ; (; TSlave * ; slave, . Long64_t ; total, . Long64_t ; processed . ). inline . Definition at line 163 of file TPyDispatcher.h. ◆ Dispatch() [52/56]. PyObject * TPyDispatcher::Dispatch ; (; TSlave * ; slave, . TProofProgressInfo * ; pi . ). Definition at line 270 of file TPyDispatcher.cxx. ◆ Dispatch() [53/56]. PyObject * TPyDispatcher::Dispatch ; (; TSocket * ; sock). inline . Definition at line 132 of file TPyDispatcher.h. ◆ Dispatch() [54/56]. PyObject * TPyDispatcher::Dispatch ; (; TVirtualPad * ; pad). inline . Definition at line 133 of file TPyDispatcher.h. ◆ Dispatch() [55/56]. PyObject * TPyDispatcher::Dispatch ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; event . ). Definition at line 212 of file TPyDispatcher.cxx. ◆ Dispatch() [56/56]. PyObject * TPyDispatcher::Dispatch ; (; ULong_t ; param). inline . Definition at line 80 of file TPyDispatcher.h. ◆ DispatchVA(). PyObject * TPyDispatcher::DispatchVA ; (; const char * ; format = 0, .  ; ... . ). Definition at line 74 of file TPyDispatcher.cxx. ◆ DispatchVA1(). PyObject * TPyDispatcher::DispatchVA1 ; (; const char * ; clname, . void * ; obj, . const char * ; format, .  ; ... . ). Definition at line 114 of file TPyDispatcher.cxx. ◆ operator=(). TPyDispatcher & TPyDispatcher::operator= ; (; const TPyDispatcher & ; other). Assignment operator. Applies python object reference counting. ; Definition at line 52 of file TPyDispatcher.cxx. Member Data Documentation. ◆ fCallable. PyObject* TPyDispatcher::fCallable. private . Definition at line 172 of file TPyDispatcher.h. bindings/pyroot/pythonizations/inc/TPyDispatcher.h; bindings/pyroot/pythonizations/src/TPyDispatcher.cxx. TPyDispatcher. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPyDispatcher.html:23774,Guid,Guide,23774,doc/master/classTPyDispatcher.html,https://root.cern,https://root.cern/doc/master/classTPyDispatcher.html,1,['Guid'],['Guide']
Usability,"f file TRealData.cxx. ◆ GetThisOffset(). Long_t TRealData::GetThisOffset ; (; ); const. inline . Definition at line 55 of file TRealData.h. ◆ IsA(). TClass * TRealData::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 62 of file TRealData.h. ◆ IsObject(). Bool_t TRealData::IsObject ; (; ); const. inline . Definition at line 56 of file TRealData.h. ◆ operator=(). TRealData & TRealData::operator= ; (; const TRealData & ; rhs). privatedelete . ◆ SetIsObject(). void TRealData::SetIsObject ; (; Bool_t ; isObject). inline . Definition at line 57 of file TRealData.h. ◆ Streamer(). void TRealData::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TRealData::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TRealData.h. ◆ WriteRealData(). void TRealData::WriteRealData ; (; void * ; pointer, . char *& ; buffer . ). Write one persistent data member on output buffer. ; pointer points to the current persistent data member ; Definition at line 61 of file TRealData.cxx. Member Data Documentation. ◆ fDataMember. TDataMember* TRealData::fDataMember. private . Definition at line 33 of file TRealData.h. ◆ fIsObject. Bool_t TRealData::fIsObject. private . Definition at line 37 of file TRealData.h. ◆ fName. TString TRealData::fName. private . Definition at line 35 of file TRealData.h. ◆ fStreamer. TMemberStreamer* TRealData::fStreamer. private . Definition at line 36 of file TRealData.h. ◆ fThisOffset. Long_t TRealData::fThisOffset. private . Definition at line 34 of file TRealData.h. Libraries for TRealData:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TRealData.h; core/meta/src/TRealData.cxx. TRealData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRealData.html:15657,Guid,Guide,15657,doc/master/classTRealData.html,https://root.cern,https://root.cern/doc/master/classTRealData.html,1,['Guid'],['Guide']
Usability,"f file TUnfoldSys.cxx. ◆ GetDeltaSysTau(). Bool_t TUnfoldSys::GetDeltaSysTau ; (; TH1 * ; hist_delta, . const Int_t * ; binMap = nullptr . ). correlated one-sigma shifts from shifting tau ; Parameters. [out]hist_deltahistogram to store shifts ; [in]sourceidentifier of the background source ; [in]binMap(default=nullptr) remapping of histogram bins. returns true if the background source was found. ; This method returns the shifts of the unfolding result induced by varying the normalisation of the identified background by one sigma. ; the array binMap is explained with the method GetOutput(). ; Definition at line 1086 of file TUnfoldSys.cxx. ◆ GetEmatrixFromVyy(). void TUnfoldSys::GetEmatrixFromVyy ; (; const TMatrixDSparse * ; vyy, . TH2 * ; ematrix, . const Int_t * ; binMap, . Bool_t ; clearEmat . ). protected . propagate an error matrix on the input vector to the unfolding result ; Parameters. [in]vyyinput error matrix ; [in,out]ematrixhistogram to be updated ; [in]binMapmapping of histogram bins ; [in]clearEmatif set, clear histogram before adding this covariance contribution . Definition at line 1250 of file TUnfoldSys.cxx. ◆ GetEmatrixInput(). void TUnfoldSys::GetEmatrixInput ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from input measurement uncertainties ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the uncertainties or covariance of the input data. In many cases, these are the ""statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1207 of file TUnfoldSys.cxx. ◆ GetEmatrixSysBackgroundScale(). void TUnfoldSys::GetEmatrixSysBackgroundScale ; (; TH2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:37381,clear,clearEmatif,37381,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['clear'],"['clear', 'clearEmatif']"
Usability,"f file Timer.h. ◆ Reset(). void TMVA::Timer::Reset ; (; void ; ). resets timer ; Definition at line 127 of file Timer.cxx. ◆ SecToText(). TString TMVA::Timer::SecToText ; (; Double_t ; seconds, . Bool_t ; Scientific . ); const. private . pretty string output ; Definition at line 262 of file Timer.cxx. ◆ Streamer(). virtual void TMVA::Timer::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Timer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 99 of file Timer.h. Member Data Documentation. ◆ fColourfulOutput. Bool_t TMVA::Timer::fColourfulOutput. private . flag for use of colors ; Definition at line 84 of file Timer.h. ◆ fgClassName. const TString TMVA::Timer::fgClassName = ""Timer"". staticprivate . used for output ; Definition at line 93 of file Timer.h. ◆ fgNbins. const Int_t TMVA::Timer::fgNbins = 16. staticprivate . number of bins in progress bar ; Definition at line 94 of file Timer.h. ◆ fLogger. MsgLogger* TMVA::Timer::fLogger. mutableprivate . ! the output logger ; Definition at line 96 of file Timer.h. ◆ fNcounts. Int_t TMVA::Timer::fNcounts. private . reference number of ""counts"" ; Definition at line 82 of file Timer.h. ◆ fOutputToFile. Bool_t TMVA::Timer::fOutputToFile. private . Definition at line 89 of file Timer.h. ◆ fPrefix. TString TMVA::Timer::fPrefix. private . prefix for outputs ; Definition at line 83 of file Timer.h. ◆ fPreviousProgress. Int_t TMVA::Timer::fPreviousProgress. private . Definition at line 87 of file Timer.h. ◆ fPreviousTimeEstimate. TString TMVA::Timer::fPreviousTimeEstimate. private . Definition at line 88 of file Timer.h. ◆ fProgressBarStringLength. Int_t TMVA::Timer::fProgressBarStringLength. private . Definition at line 91 of file Timer.h. Libraries for TMVA::Timer:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Timer.h; tmva/tmva/src/Timer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:17355,progress bar,progress bar,17355,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['progress bar'],['progress bar']
Usability,"f file VavilovAccuratePdf.cxx. ◆ DoEvalPar(). double ROOT::Math::VavilovAccuratePdf::DoEvalPar ; (; double ; x, . const double * ; p . ); const. overridevirtual . Evaluate the function, using parameters p. ; Parameters. xThe Landau parameter \(x = \lambda_L\) ; pvector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). . Implements ROOT::Math::IParametricFunctionOneDim.; Definition at line 94 of file VavilovAccuratePdf.cxx. ◆ NPar(). unsigned int ROOT::Math::VavilovAccuratePdf::NPar ; (; ); const. overridevirtual . Return the number of Parameters. ; Implements ROOT::Math::IBaseParam.; Definition at line 74 of file VavilovAccuratePdf.cxx. ◆ ParameterName(). std::string ROOT::Math::VavilovAccuratePdf::ParameterName ; (; unsigned int ; i); const. overridevirtual . Return the name of the i-th parameter (starting from zero) ; Reimplemented from ROOT::Math::IBaseParam.; Definition at line 78 of file VavilovAccuratePdf.cxx. ◆ Parameters(). const double * ROOT::Math::VavilovAccuratePdf::Parameters ; (; ); const. overridevirtual . Access the parameter values. ; Implements ROOT::Math::IBaseParam.; Definition at line 64 of file VavilovAccuratePdf.cxx. ◆ SetParameters(). void ROOT::Math::VavilovAccuratePdf::SetParameters ; (; const double * ; p). overridevirtual . Set the parameter values. ; Parameters. pvector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). . Implements ROOT::Math::IBaseParam.; Definition at line 68 of file VavilovAccuratePdf.cxx. Member Data Documentation. ◆ fP. double ROOT::Math::VavilovAccuratePdf::fP[5]. private . Definition at line 135 of file VavilovAccuratePdf.h. Libraries for ROOT::Math::VavilovAccuratePdf:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/VavilovAccuratePdf.h; math/mathmore/src/VavilovAccuratePdf.cxx. ROOTMathVavilovAccuratePdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccuratePdf.html:6331,Guid,Guide,6331,doc/master/classROOT_1_1Math_1_1VavilovAccuratePdf.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccuratePdf.html,1,['Guid'],['Guide']
Usability,"f getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:1611,learn,learning,1611,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['learn'],['learning']
Usability,"f gxy normalized over y in range [-10,10] (i.e. treating x; # as parameter); nset_y = {y}; print(""gx_Norm[y] = "", gxy.getVal(nset_y)); ; # Integrate normalized pdf over subrange; # ----------------------------------------------------------------------------; ; # Define a range named ""signal"" in x from -5,5; x.setRange(""signal"", -5, 5); y.setRange(""signal"", -3, 3); ; # Create an integral of gxy_Norm[x,y] over x and y in range ""signal""; # ROOT.This is the fraction of of pdf gxy_Norm[x,y] which is in the; # range named ""signal""; ; igxy_sig = gxy.createIntegral(x_and_y, NormSet=x_and_y, Range=""signal""); print(""gx_Int[x,y|signal]_Norm[x,y] = "", igxy_sig.getVal()); ; # Construct cumulative distribution function from pdf; # -----------------------------------------------------------------------------------------------------; ; # Create the cumulative distribution function of gx; # i.e. calculate Int[-10,x] gx(x') dx'; gxy_cdf = gxy.createCdf({x, y}); ; # Plot cdf of gx versus x; hh_cdf = gxy_cdf.createHistogram(""hh_cdf"", x, Binning=40, YVar=dict(var=y, Binning=40)); hh_cdf.SetLineColor(ROOT.kBlue); ; c = ROOT.TCanvas(""rf308_normintegration2d"", ""rf308_normintegration2d"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); hh_cdf.GetZaxis().SetTitleOffset(1.8); hh_cdf.Draw(""surf""); ; c.SaveAs(""rf308_normintegration2d.png""); [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'signal' created with bounds [-5,5]; [#1] INFO:Eval -- RooRealVar::setRange(y) new range named 'signal' created with bounds [-3,3]; gxy = 0.4856717852477124; gx_Norm[x,y] = 0.012933200957206766; gx_Int[x,y] = 37.552326516436096; gx_Norm[x] = 0.1068955044839622; gx_Norm[y] = 0.12098919425696865; gx_Int[x,y|signal]_Norm[x,y] = 0.5720351351990984; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf308_normintegration2d.py. tutorialsroofitrf308_normintegration2d.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf308__normintegration2d_8py.html:3527,Guid,Guide,3527,doc/master/rf308__normintegration2d_8py.html,https://root.cern,https://root.cern/doc/master/rf308__normintegration2d_8py.html,1,['Guid'],['Guide']
Usability,"f index is not in the list range. Int_t GetIndex(Long64_t entry) const; Return index in the list of element with value entry; array is supposed to be sorted prior to this call.; If match is found, function returns position of element.; If no match found, function returns -1. void Intersect(const TEventList* list); Remove elements from this list that are NOT present in alist. Int_t Merge(TCollection* list); Merge entries in all the TEventList in the collection in this event list. void Print(Option_t* option = """") const; Print contents of this list. void Reset(Option_t* option = """"); Reset number of entries in event list. void Resize(Int_t delta = 0); Resize list by delta entries. void SetDirectory(TDirectory* dir); Remove reference to this EventList from current directory and add; reference to new directory dir. dir can be 0 in which case the list; does not belong to any directory. void SetName(const char* name); Change the name of this TEventList. void Sort(); Sort list entries in increasing order. void Streamer(TBuffer& b); Stream an object of class TEventList. void Subtract(const TEventList* list); Remove elements from this list that are present in alist. TEventList& operator=(const TEventList& list); Assingment. void Clear(Option_t* option = """"); {Reset(option);}. TDirectory * GetDirectory() const; {return fDirectory;}. Long64_t * GetList() const; { return fList; }. Int_t GetN() const; { return fN; }. Bool_t GetReapplyCut() const; { return fReapply; }. Int_t GetSize() const; { return fSize; }. void SetDelta(Int_t delta = 100); {fDelta = delta;}. void SetReapplyCut(Bool_t apply = kFALSE); {fReapply = apply;}. » Author: Rene Brun 11/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TEventList.h 22992 2008-04-05 09:43:01Z pcanal $ » Last generated: 2010-10-01 15:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEventList.html:10022,Clear,Clear,10022,root/html528/TEventList.html,https://root.cern,https://root.cern/root/html528/TEventList.html,1,['Clear'],['Clear']
Usability,"f index is not in the list range. Int_t GetIndex(Long64_t entry) const; Return index in the list of element with value entry; array is supposed to be sorted prior to this call.; If match is found, function returns position of element.; If no match found, function returns -1. void Intersect(const TEventList* list); Remove elements from this list that are NOT present in alist. Int_t Merge(TCollection* list); Merge entries in all the TEventList in the collection in this event list. void Print(Option_t* option = """") const; Print contents of this list. void Reset(Option_t* option = """"); Reset number of entries in event list. void Resize(Int_t delta = 0); Resize list by delta entries. void SetDirectory(TDirectory* dir); Remove reference to this EventList from current directory and add; reference to new directory dir. dir can be 0 in which case the list; does not belong to any directory. void SetName(const char* name); Change the name of this TEventList. void Sort(); Sort list entries in increasing order. void Streamer(TBuffer& b); Stream an object of class TEventList. void Subtract(const TEventList* list); Remove elements from this list that are present in alist. TEventList& operator=(const TEventList& list); Assingment. void Clear(Option_t* option = """"); {Reset(option);}. TDirectory * GetDirectory() const; {return fDirectory;}. Long64_t * GetList() const; { return fList; }. Int_t GetN() const; { return fN; }. Bool_t GetReapplyCut() const; { return fReapply; }. Int_t GetSize() const; { return fSize; }. void SetDelta(Int_t delta = 100); {fDelta = delta;}. void SetReapplyCut(Bool_t apply = kFALSE); {fReapply = apply;}. » Author: Rene Brun 11/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TEventList.h 22992 2008-04-05 09:43:01Z pcanal $ » Last generated: 2011-07-04 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEventList.html:10091,Clear,Clear,10091,root/html530/TEventList.html,https://root.cern,https://root.cern/root/html530/TEventList.html,1,['Clear'],['Clear']
Usability,"f index is not in the list range. Int_t GetIndex(Long64_t entry) const; Return index in the list of element with value entry; array is supposed to be sorted prior to this call.; If match is found, function returns position of element.; If no match found, function returns -1. void Intersect(const TEventList* list); Remove elements from this list that are NOT present in alist. Int_t Merge(TCollection* list); Merge entries in all the TEventList in the collection in this event list. void Print(Option_t* option = """") const; Print contents of this list. void Reset(Option_t* option = """"); Reset number of entries in event list. void Resize(Int_t delta = 0); Resize list by delta entries. void SetDirectory(TDirectory* dir); Remove reference to this EventList from current directory and add; reference to new directory dir. dir can be 0 in which case the list; does not belong to any directory. void SetName(const char* name); Change the name of this TEventList. void Sort(); Sort list entries in increasing order. void Streamer(TBuffer& b); Stream an object of class TEventList. void Subtract(const TEventList* list); Remove elements from this list that are present in alist. TEventList& operator=(const TEventList& list); Assingment. void Clear(Option_t* option = """"); {Reset(option);}. TDirectory * GetDirectory() const; {return fDirectory;}. Long64_t * GetList() const; { return fList; }. Int_t GetN() const; { return fN; }. Bool_t GetReapplyCut() const; { return fReapply; }. Int_t GetSize() const; { return fSize; }. void SetDelta(Int_t delta = 100); {fDelta = delta;}. void SetReapplyCut(Bool_t apply = kFALSE); {fReapply = apply;}. » Author: Rene Brun 11/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TEventList.h 22992 2008-04-05 09:43:01Z pcanal $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEventList.html:10091,Clear,Clear,10091,root/html532/TEventList.html,https://root.cern,https://root.cern/root/html532/TEventList.html,1,['Clear'],['Clear']
Usability,"f members for TLatex, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; Anal1(const TextSpec_t &spec, const Char_t *t, Int_t length)TLatexprotected; Analyse(Double_t x, Double_t y, const TextSpec_t &spec, const Char_t *t, Int_t length)TLatexprotected; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckLatexSyntax(TString &text)TLatexprotected; Class()TLatexstatic; Class_Name()TLatexstatic; Class_Version()TLatexinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &text) const overrideTLatexvirtual; TText::TAttText::Copy(TAttText &atttext) constTAttText; TAttLine::Copy(TAttLine &attline) constTAttLine; DeclFileName()TLatexinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTTextvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawCircle(Double_t x1, Double_t y1, Double_t r, const TextSpec_t &spec)TLatexprotected; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawLatex(Double_t x, Double_t y, const char *text)TLatex; DrawLatexNDC(Double_t x, Double_t y, const char *text)TLatex; DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const TextSpec_t &spec)TLatexprotected; DrawParenthesis(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, const TextSpec_t &spec)TLatexprotected; DrawPolyLine(Int_t npoints, Double_t *xx, Double_t *yy, const TextSpec_t &spec, Double_t scale_width=0.)TLatexprotected; DrawText(Double_t x, Double_t y, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLatex-members.html:755,Clear,Clear,755,doc/master/classTLatex-members.html,https://root.cern,https://root.cern/doc/master/classTLatex-members.html,1,['Clear'],['Clear']
Usability,"f parameters for a polynom. ; Definition at line 1679 of file TGraph.cxx. ◆ InsertPoint(). Int_t TGraph::InsertPoint ; (; ). virtual . Insert a new point at the mouse position. ; Definition at line 1699 of file TGraph.cxx. ◆ InsertPointBefore(). void TGraph::InsertPointBefore ; (; Int_t ; ipoint, . Double_t ; x, . Double_t ; y . ). virtual . Insert a new point with coordinates (x,y) before the point number ipoint. ; Definition at line 1749 of file TGraph.cxx. ◆ Integral(). Double_t TGraph::Integral ; (; Int_t ; first = 0, . Int_t ; last = -1 . ); const. virtual . Integrate the TGraph data within a given (index) range. ; Note that this function computes the area of the polygon enclosed by the points of the TGraph. The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon, since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point with the first one. It is clear that the order of the point is essential in defining the polygon. Also note that the segments should not intersect.; NB:; if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken. Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data you have to deal with. The most evident solution would be to divide the polygon in triangles and calculate the surface of them. But this can quickly become complicated as you will have to test every segments of every triangles and check if they are intersecting with a current polygon's segment or if it goes outside the polygon. Many calculations that would lead to many problems... The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's segments don't intersect. It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next vertex. Then it subtracts from it the result of the y coordinate of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:61350,clear,clear,61350,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['clear'],['clear']
Usability,"f parameters. void setCovarianceMatrix(TMatrixDSym& V); Store externally provided correlation matrix in this RooFitResult ;. TH2* correlationHist(const char* name = ""correlation_matrix"") const; Return TH2D of correlation matrix. const TMatrixDSym& covarianceMatrix() const; Return covariance matrix. TMatrixDSym reducedCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix (Note that Vred _is_ a simple sub-matrix of V,; row/columns are ordered to matched the convention given in input argument 'params'. TMatrixDSym conditionalCovarianceMatrix(const RooArgList& params) const; Return a reduced covariance matrix, which is calculated as; ___ -1; Vred = V22 = V11 - V12 * V22 * V21. Where V11,V12,V21,V22 represent a block decomposition of the covariance matrix into observables that; are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and V22bar; is the Shur complement of V22, calculated as shown above. (Note that Vred is _not_ a simple sub-matrix of V). const TMatrixDSym& correlationMatrix() const; Return correlation matrix ;. RooAbsPdf* createHessePdf(const RooArgSet& params) const; Return a p.d.f that represents the fit result as a multi-variate probability densisty; function on the floating fit parameters, including correlations. void SetName(const char* name); Change name of RooFitResult object. void SetNameTitle(const char* name, const char* title); Change name and title of RooFitResult object. void printName(ostream& os) const; Print name of fit result. void printTitle(ostream& os) const; Print title of fit result. void printClassName(ostream& os) const; Print class name of fit result. void printArgs(ostream& os) const; Print arguments of fit result, i.e. the parameters of the fit. void printValue(ostream& os) const; Print the value of the fit result, i.e.g the status, minimized FCN, edm and covariance quality code. Int_t defaultPrintContents(Option_t* opt) const; Configure default contents to be print",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFitResult.html:16540,simpl,simple,16540,root/html602/RooFitResult.html,https://root.cern,https://root.cern/root/html602/RooFitResult.html,2,['simpl'],['simple']
Usability,"f points to fit Second parameter - number of variables in the model Third parameter - the variables of the model, stored in the following way: (x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),... ; Definition at line 583 of file TLinearFitter.cxx. ◆ Chisquare() [1/2]. void TLinearFitter::Chisquare ; (; ). virtual . Calculates the chisquare. ; Definition at line 797 of file TLinearFitter.cxx. ◆ Chisquare() [2/2]. Double_t TLinearFitter::Chisquare ; (; Int_t ; , . Double_t * ;  . ); const. inlineoverridevirtual . Implements TVirtualFitter.; Definition at line 269 of file TLinearFitter.h. ◆ Class(). static TClass * TLinearFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLinearFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLinearFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 277 of file TLinearFitter.h. ◆ Clear(). void TLinearFitter::Clear ; (; Option_t * ; option = """"). overridevirtual . Clears everything. Used in TH1::Fit and TGraph::Fit(). ; Implements TVirtualFitter.; Definition at line 731 of file TLinearFitter.cxx. ◆ ClearPoints(). void TLinearFitter::ClearPoints ; (; ). virtual . To be used when different sets of points are fitted with the same formula. ; Definition at line 771 of file TLinearFitter.cxx. ◆ ComputeTValues(). void TLinearFitter::ComputeTValues ; (; ). private . Computes parameters' t-values and significance. ; Definition at line 862 of file TLinearFitter.cxx. ◆ CreateSubset(). void TLinearFitter::CreateSubset ; (; Int_t ; ntotal, . Int_t ; h, . Int_t * ; index . ). private . Creates a p-subset to start ntotal - total number of points from which the subset is chosen. ; Definition at line 2291 of file TLinearFitter.cxx. ◆ CStep(). Double_t TLinearFitter::CStep ; (; Int_t ; step, . Int_t ; h, . Double_t * ; residuals, . Int_t * ; index, . Int_t * ; subdat, . Int_t ; star",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:36056,Clear,Clear,36056,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['Clear'],['Clear']
Usability,"f positions. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WaitFinishPrefetch ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:19438,Clear,Clear,19438,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,4,['Clear'],['Clear']
Usability,"f ranges for the coordinate icoord ; Definition at line 89 of file DataRange.h. ◆ SetRange() [1/4]. void ROOT::Fit::DataRange::SetRange ; (; double ; xmin, . double ; xmax . ). inline . set a range [xmin,xmax] for the first coordinate icoord ; Definition at line 186 of file DataRange.h. ◆ SetRange() [2/4]. void ROOT::Fit::DataRange::SetRange ; (; double ; xmin, . double ; xmax, . double ; ymin, . double ; ymax . ). inline . set a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate ; Definition at line 190 of file DataRange.h. ◆ SetRange() [3/4]. void ROOT::Fit::DataRange::SetRange ; (; double ; xmin, . double ; xmax, . double ; ymin, . double ; ymax, . double ; zmin, . double ; zmax . ). inline . set a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and [zmin,zmax] for the third coordinate ; Definition at line 195 of file DataRange.h. ◆ SetRange() [4/4]. void ROOT::Fit::DataRange::SetRange ; (; unsigned int ; icoord, . double ; xmin, . double ; xmax . ). set a range [xmin,xmax] for the new coordinate icoord If more range exists for other coordinates, delete the existing one and use it the new one Use Add range if want to keep the union of the existing ranges ; Definition at line 124 of file DataRange.cxx. ◆ Size(). unsigned int ROOT::Fit::DataRange::Size ; (; unsigned int ; icoord = 0); const. inline . return range size for coordinate icoord (starts from zero) Size == 0 indicates no range is present [-inf, + inf] ; Definition at line 71 of file DataRange.h. Member Data Documentation. ◆ fRanges. RangeIntervals ROOT::Fit::DataRange::fRanges. private . list of all ranges ; Definition at line 232 of file DataRange.h. Libraries for ROOT::Fit::DataRange:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/DataRange.h; math/mathcore/src/DataRange.cxx. ROOTFitDataRange. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html:12980,Guid,Guide,12980,doc/master/classROOT_1_1Fit_1_1DataRange.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html,1,['Guid'],['Guide']
Usability,"f selected branches, and recheck if pos is now in the list. Returns:; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache. This function overloads TFileCacheRead::ReadBuffer. . Reimplemented from TFileCacheRead.; Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Int_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2072 of file TTreeCache.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:47673,simpl,simply,47673,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"f selected branches, and recheck if pos is now in the list. Returns:; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache. This function overloads TFileCacheRead::ReadBuffer. . Reimplemented from TFileCacheRead.; Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Long64_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Buffersize might be clamped, see TFileCacheRead::SetBufferSize Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:47677,simpl,simply,47677,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"f struct SSL SSL; /* dummy for SSL argument to push/pull */; 1739typedef struct SSL_CTX SSL_CTX;; 1740 ; 1741#elif defined(NO_SSL_DL); 1742/* OpenSSL without dynamic loading */; 1743#include <openssl/bn.h>; 1744#include <openssl/conf.h>; 1745#include <openssl/crypto.h>; 1746#include <openssl/dh.h>; 1747#include <openssl/err.h>; 1748#include <openssl/opensslv.h>; 1749#include <openssl/pem.h>; 1750#include <openssl/ssl.h>; 1751#include <openssl/tls1.h>; 1752#include <openssl/x509.h>; 1753 ; 1754#if defined(WOLFSSL_VERSION); 1755/* Additional defines for WolfSSL, see; 1756 * https://github.com/civetweb/civetweb/issues/583 */; 1757#include ""wolfssl_extras.inl""; 1758#endif; 1759 ; 1760#if defined(OPENSSL_IS_BORINGSSL); 1761/* From boringssl/src/include/openssl/mem.h:; 1762 *; 1763 * OpenSSL has, historically, had a complex set of malloc debugging options.; 1764 * However, that was written in a time before Valgrind and ASAN. Since we now; 1765 * have those tools, the OpenSSL allocation functions are simply macros around; 1766 * the standard memory functions.; 1767 *; 1768 * #define OPENSSL_free free */; 1769#define free free; 1770// disable for boringssl; 1771#define CONF_modules_unload(a) ((void)0); 1772#define ENGINE_cleanup() ((void)0); 1773#endif; 1774 ; 1775/* If OpenSSL headers are included, automatically select the API version */; 1776#if (OPENSSL_VERSION_NUMBER >= 0x30000000L); 1777#if !defined(OPENSSL_API_3_0); 1778#define OPENSSL_API_3_0; 1779#endif; 1780#define OPENSSL_REMOVE_THREAD_STATE(); 1781#else; 1782#if (OPENSSL_VERSION_NUMBER >= 0x10100000L); 1783#if !defined(OPENSSL_API_1_1); 1784#define OPENSSL_API_1_1; 1785#endif; 1786#define OPENSSL_REMOVE_THREAD_STATE(); 1787#else; 1788#if !defined(OPENSSL_API_1_0); 1789#define OPENSSL_API_1_0; 1790#endif; 1791#define OPENSSL_REMOVE_THREAD_STATE() ERR_remove_thread_state(NULL); 1792#endif; 1793#endif; 1794 ; 1795 ; 1796#else; 1797/* SSL loaded dynamically from DLL / shared object */; 1798/* Add all prototypes here,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:54194,simpl,simply,54194,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['simpl'],['simply']
Usability,"f the file.; 829///; 830/// - The buffer is written to the file.; 831///; 832/// Bufsize can be given to force a given buffer size to write this object.; 833/// By default, the buffersize will be taken from the average buffer size; 834/// of all objects written to the current file so far.; 835///; 836/// If a name is specified, it will be the name of the key.; 837/// If name is not given, the name of the key will be the name as returned; 838/// by GetName().; 839///; 840/// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; 841/// Using the kOverwrite option a previous key with the same name is; 842/// overwritten. The previous key is deleted before writing the new object.; 843/// Using the kWriteDelete option a previous key with the same name is; 844/// deleted only after the new object has been written. This option; 845/// is safer than kOverwrite but it is slower.; 846/// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; 847/// the space is simply freed up to be overwritten; in the case of a TTree,; 848/// it is more complicated. If one opens a TTree, appends some entries,; 849/// then writes it out, the behaviour is effectively the same. If, however,; 850/// one creates a new TTree and writes it out in this way,; 851/// only the metadata is replaced, effectively making the old data invisible; 852/// without deleting it. TTree::Delete() can be used to mark all disk space; 853/// occupied by a TTree as free before overwriting its metadata this way.; 854/// The kSingleKey option is only used by TCollection::Write() to write; 855/// a container with a single key instead of each object in the container; 856/// with its own key.; 857///; 858/// An object is read from the file into memory via TKey::Read() or; 859/// via TObject::Read().; 860///; 861/// The function returns the total number of bytes written to the file.; 862/// It returns 0 if the object cannot be written.; 863 ; 864Int_t TObject::Write(const char *name, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:30885,simpl,simply,30885,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['simpl'],['simply']
Usability,"f the ged-editor; TGeoTabManager*TGeoGedFrame::fTabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoTubeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube segment editor. ~TGeoTubeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSegEditor.html:21938,undo,undoing,21938,root/html534/TGeoTubeSegEditor.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSegEditor.html,1,['undo'],['undoing']
Usability,"f the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; TProof * GetProof () const;  ; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:19690,feedback,feedback,19690,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"f the submatrix the corresponding element of submatrix ms. ; Definition at line 1106 of file TMatrixTUtils.cxx. ◆ operator+=() [3/3]. template<class Element > . void TMatrixTSub< Element >::operator+= ; (; Element ; val). Add val to every element of the sub matrix. ; Definition at line 993 of file TMatrixTUtils.cxx. ◆ operator=() [1/4]. template<class Element > . void TMatrixTSub< Element >::operator= ; (; const TMatrixTBase< Element > & ; m). Assignment operator. ; Definition at line 1086 of file TMatrixTUtils.cxx. ◆ operator=() [2/4]. template<class Element > . TMatrixTSub< Element > & TMatrixTSub< Element >::operator= ; (; const TMatrixTSub< Element > & ; s). inline . Definition at line 561 of file TMatrixTUtils.h. ◆ operator=() [3/4]. template<class Element > . void TMatrixTSub< Element >::operator= ; (; const TMatrixTSub_const< Element > & ; s). Assignment operator. ; Definition at line 1027 of file TMatrixTUtils.cxx. ◆ operator=() [4/4]. template<class Element > . void TMatrixTSub< Element >::operator= ; (; Element ; val). Assign val to every element of the sub matrix. ; Definition at line 976 of file TMatrixTUtils.cxx. ◆ Rank1Update(). template<class Element > . void TMatrixTSub< Element >::Rank1Update ; (; const TVectorT< Element > & ; vec, . Element ; alpha = 1.0 . ). Perform a rank 1 operation on the matrix: A += alpha * v * v^T. ; Definition at line 950 of file TMatrixTUtils.cxx. ◆ Streamer(). template<class Element > . void TMatrixTSub< Element >::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TMatrixTSub_const< Element >. ◆ StreamerNVirtual(). template<class Element > . void TMatrixTSub< Element >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 570 of file TMatrixTUtils.h. math/matrix/inc/TMatrixDUtilsfwd.h; math/matrix/inc/TMatrixTUtils.h; math/matrix/src/TMatrixTUtils.cxx. TMatrixTSub. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSub.html:9551,Guid,Guide,9551,doc/master/classTMatrixTSub.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSub.html,1,['Guid'],['Guide']
Usability,"f the values in the first line do not use the /[type] syntax, all variables are assumed to be of type ""F"". If the filename ends with extensions .csv or .CSV and a delimiter is not specified (besides ' '), the delimiter is automatically set to ','.; Lines in the input file starting with ""#"" are ignored. Leading whitespace for each column data is skipped. Empty lines are skipped.; A TBranch object is created for each variable in the expression. The total number of rows read from the file is returned. FILLING a TTree WITH MULTIPLE INPUT TEXT FILES; To fill a TTree with multiple input text files, proceed as indicated above for the first input file and omit the second argument for subsequent calls T.ReadFile(""file1.dat"",""branch descriptor"");; T.ReadFile(""file2.dat"");. Definition at line 7564 of file TTree.cxx. ◆ ReadStream(). Long64_t TTree::ReadStream ; (; std::istream & ; inputStream, . const char * ; branchDescriptor = """", . char ; delimiter = ' ' . ). virtual . Create or simply read branches from an input stream. ; See alsoreference information for TTree::ReadFile ; Reimplemented in TNtuple, and TNtupleD.; Definition at line 7615 of file TTree.cxx. ◆ RecursiveRemove(). void TTree::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ; Reimplemented from TObject.; Definition at line 7881 of file TTree.cxx. ◆ Refresh(). void TTree::Refresh ; (; ). virtual . Refresh contents of this tree and its branches from the current status on disk. ; One can call this function in case the tree file is being updated by another process. ; Reimplemented in TTreeSQL.; Definition at line 7916 of file TTree.cxx. ◆ RegisterExternalFriend(). void TTree::RegisterExternalFriend ; (; TFriendElement * ; fe). virtual . Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ; Definition at line 7957 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:197345,simpl,simply,197345,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['simpl'],['simply']
Usability,"f this class ; Definition at line 59 of file PDEFoamTargetDensity.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamTargetDensity::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 59 of file PDEFoamTargetDensity.h. ◆ Density(). Double_t TMVA::PDEFoamTargetDensity::Density ; (; std::vector< Double_t > & ; xev, . Double_t & ; event_density . ). virtual . This function is needed during the foam buildup. ; It returns the average target value within the range-searching box at point xev, divided by volume (specified by fBox).; Parameters:. xev - event vector (in [fXmin,fXmax]) to place the box at; event_density - here the event density is stored. Returns:; Average target value in the range-searching volume at point 'xev', divided by the box volume. ; Implements TMVA::PDEFoamDensityBase.; Definition at line 104 of file PDEFoamTargetDensity.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamTargetDensity::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamDensityBase.; Definition at line 59 of file PDEFoamTargetDensity.h. ◆ Streamer(). virtual void TMVA::PDEFoamTargetDensity::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamDensityBase. ◆ StreamerNVirtual(). void TMVA::PDEFoamTargetDensity::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file PDEFoamTargetDensity.h. Member Data Documentation. ◆ fTarget. UInt_t TMVA::PDEFoamTargetDensity::fTarget. protected . Definition at line 47 of file PDEFoamTargetDensity.h. Libraries for TMVA::PDEFoamTargetDensity:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamTargetDensity.h; tmva/tmva/src/PDEFoamTargetDensity.cxx. TMVAPDEFoamTargetDensity. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamTargetDensity.html:14956,Guid,Guide,14956,doc/master/classTMVA_1_1PDEFoamTargetDensity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamTargetDensity.html,1,['Guid'],['Guide']
Usability,"f undo method Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color; ; com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; Color_tshort Color_tDefinition RtypesCore.h:85; TQCommand::SetRedoArgsvirtual void SetRedoArgs(Int_t nargs,...)Set redo parameters.Definition TQCommand.cxx:508; TQCommand::SetUndoArgsvirtual void SetUndoArgs(Int_t nargs,...)Set undo parameters.Definition TQCommand.cxx:542; 1st argument - the number of undo, redo parameters the other arguments - undo, redo values Since the number of undo,redo parameters is the same one can use com->SetArgs(1, new_color, old_color);; TQCommand::SetArgsvirtual void SetArgs(Int_t nargs,...)Set do/redo and undo parameters.Definition TQCommand.cxx:465. Undo, redo method execution com->Redo(); // execute redo method; com->Undo(); // execute undo method; TQCommand::Undovirtual void Undo(Option_t *option="""")Un-execute all merged commands and the command.Definition TQCommand.cxx:626; TQCommand::Redovirtual void Redo(Option_t *option="""")Execute command and then merge commands.Definition TQCommand.cxx:588. Merged commands It possible to group several commands together so an end user can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; updatestatic void update(gsl_integration_workspace *workspace, double a1, double b1, double area1, double error1, double a2, double b2, double area2, double error2)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:633; gPad#define gPadDefinition TVirtualPad.h:308; TQCommand::Addvoid Add(TObject *obj, Option_t *opt) overrideAdd command to the list of merged commands.Definition TQCommand.cxx:360. Macro ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:2493,undo,undo,2493,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"f which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented from RooAbsReal.; Definition at line 2361 of file RooProdPdf.cxx. ◆ initialize(). void RooFixedProdPdf::initialize ; (; ). inlineprivate . Definition at line 2380 of file RooProdPdf.cxx. ◆ selfNormalized(). bool RooFixedProdPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 2334 of file RooProdPdf.cxx. ◆ translate(). void RooFixedProdPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. inlineoverridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 2343 of file RooProdPdf.cxx. Member Data Documentation. ◆ _cache. std::unique_ptr<RooProdPdf::CacheElem> RooFixedProdPdf::_cache. private . Definition at line 2401 of file RooProdPdf.cxx. ◆ _normSet. RooArgSet RooFixedProdPdf::_normSet. private . Definition at line 2400 of file RooProdPdf.cxx. ◆ _prodPdf. std::unique_ptr<RooProdPdf> RooFixedProdPdf::_prodPdf. private . Definition at line 2403 of file RooProdPdf.cxx. ◆ _servers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:79305,simpl,simple,79305,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,1,['simpl'],['simple']
Usability,"f with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 680 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPdf::setExtended ; (; bool ; extended). inlineprivate . Definition at line 136 of file RooRealSumPdf.h. ◆ setFloor(). void RooRealSumPdf::setFloor ; (; bool ; flag). inline . Definition at line 62 of file RooRealSumPdf.h. ◆ setFloorGlobal(). static void RooRealSumPdf::setFloorGlobal ; (; bool ; flag). inlinestatic . Definition at line 64 of file RooRealSumPdf.h. ◆ Streamer(). void RooRealSumPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooRealSumPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 138 of file RooRealSumPdf.h. ◆ translate(). void RooRealSumPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 331 of file RooRealSumPdf.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 300 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumPdf.html:91025,simpl,simple,91025,doc/master/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/master/classRooRealSumPdf.html,1,['simpl'],['simple']
Usability,"f with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 687 of file RooRealSumPdf.cxx. ◆ setExtended(). void RooRealSumPdf::setExtended ; (; bool ; extended). inlineprivate . Definition at line 136 of file RooRealSumPdf.h. ◆ setFloor(). void RooRealSumPdf::setFloor ; (; bool ; flag). inline . Definition at line 62 of file RooRealSumPdf.h. ◆ setFloorGlobal(). static void RooRealSumPdf::setFloorGlobal ; (; bool ; flag). inlinestatic . Definition at line 64 of file RooRealSumPdf.h. ◆ Streamer(). void RooRealSumPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooRealSumPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 138 of file RooRealSumPdf.h. ◆ translate(). void RooRealSumPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 333 of file RooRealSumPdf.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 302 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:92146,simpl,simple,92146,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,1,['simpl'],['simple']
Usability,"f""Gaussian::gauss(x[-5,15], mu[0,4], {sigma})""); ws.factory(""Uniform::uniform(x)""); ws[""mu""].setVal(mu_observed); ws.Print(""v""); obs_data = ws[""gauss""].generate(ws[""x""], 1000); obs_data.SetName(""obs_data""); ws.Import(obs_data, Silence=True); ; return ws; ; ; # The ""observed"" data; mu_observed = 2.5; sigma = 1.5; workspace = build_ws(mu_observed, sigma); x_var = workspace[""x""]; mu_var = workspace[""mu""]; gauss = workspace[""gauss""]; uniform = workspace[""uniform""]; obs_data = workspace[""obs_data""]; ; # Training the model; model = SBI(workspace); model.model_data(""gauss"", ""x"", ""mu"", n_samples_train); model.reference_data(""uniform"", ""x"", n_samples_train); model.preprocessing(); model.train_classifier(); sbi_model = model; ; ; # Compute the likelihood ratio of the classifier for analysis purposes; def learned_likelihood_ratio(x, mu):; n = max(len(x), len(mu)); X = np.zeros((n, 2)); X[:, 0] = x; X[:, 1] = mu; prob = sbi_model.classifier.predict_proba(X)[:, 1]; return prob / (1 - prob); ; ; # Compute the learned likelihood ratio; llhr_learned = ROOT.RooFit.bindFunction(""MyBinFunc"", learned_likelihood_ratio, x_var, mu_var); ; # Compute the real likelihood ratio; llhr_calc = ROOT.RooFormulaVar(""llhr_calc"", ""x[0] / x[1]"", [gauss, uniform]); ; # Create the exact negative log likelihood functions for Gaussian model; nll_gauss = gauss.createNLL(obs_data); ROOT.SetOwnership(nll_gauss, True); ; # Create the learned pdf and NLL sum based on the learned likelihood ratio; pdf_learned = ROOT.RooWrapperPdf(""learned_pdf"", ""learned_pdf"", llhr_learned, True); ; nllr_learned = pdf_learned.createNLL(obs_data); ROOT.SetOwnership(nllr_learned, True); ; # Compute the morphed nll; morphing(ROOT.RooMomentMorphFuncND.Linear); nll_morph = workspace[""morph""].createNLL(obs_data); ROOT.SetOwnership(nll_morph, True); ; # Plot the negative logarithmic summed likelihood; frame1 = mu_var.frame(Title=""NLL of SBI vs. Morphing;mu;NLL"", Range=(2.2, 2.8)); nllr_learned.plotOn(frame1, LineColor=""kP6Blue"", ShiftT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:6561,learn,learned,6561,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,1,['learn'],['learned']
Usability,"f& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All elements of `nset` must be lvalues.; 312///; 313/// Unnormalized values are not cached.; 314/// Doing so would be complicated as `_norm->getVal()` could; 315/// spoil the cache and interfere with returning the cached; 316/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:10952,clear,clearValueAndShapeDirty,10952,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"f("" Fn+Arrow_Right : move cursor to end of line [Ctrl+E]"");; 1310 #else; 1311 Printf("" End : move cursor to end of line [Ctrl+E]"");; 1312 #endif; 1313 Printf("" Ctrl+Arrow_Left : jump to previous word [Esc,B] [Alt,B]"" FOOTNOTE);; 1314 Printf("" Ctrl+Arrow_Right : jump to next word [Esc,F] [Alt,F]"" FOOTNOTE);; 1315 ; 1316 Printf("" Backspace : delete previous character [Ctrl+H]"");; 1317 Printf("" Del : delete next character [Ctrl+D]"");; 1318 Printf("" Esc,Backspace : delete previous word [Ctrl+W] [Esc,Ctrl+H] [Alt+Backspace] [Esc,Del] [Esc,Ctrl+Del]"" FOOTNOTE);// Del is 0x7F on macOS; 1319 Printf("" Ctrl+Del : delete next word [Esc,D] [Alt,D]"" FOOTNOTE);; 1320 Printf("" Ctrl+U : cut all characters between cursor and start of line"");; 1321 Printf("" Ctrl+K : cut all characters between cursor and end of line"");; 1322 ; 1323 Printf("" Ctrl+T : transpose characters"");; 1324 Printf("" Esc,C : character to upper and jump to next word"");; 1325 Printf("" Esc,L : word to lower case and jump to its end"");; 1326 Printf("" Esc,U : word to upper case and jump to its end"");; 1327 Printf("" Ctrl+Shift+C : copy clipboard content"");; 1328 Printf("" Ctrl+Shift+V : paste clipboard content [Ctrl+Y] [Alt+Y]"");; 1329 #ifdef R__MACOSX; 1330 Printf("" Fn+Enter : toggle overwrite mode"");; 1331 #else; 1332 Printf("" Ins : toggle overwrite mode"");; 1333 #endif; 1334 ; 1335 Printf("" Ctrl+_ : undo last keypress action"");; 1336 Printf("" Tab : autocomplete command or print suggestions [Ctrl+I] [Esc,Tab]"");; 1337 Printf("" Enter : execute command [Ctrl+J] [Ctrl+M]"");; 1338 Printf("" Ctrl+L : clear prompt screen"");; 1339 Printf("" Ctrl+D : quit ROOT (if empty line)"");; 1340 Printf("" Ctrl+C : send kSigInt interrupt signal"");; 1341 Printf("" Ctrl+Z : send kSigStop pause job signal"");; 1342 ; 1343 Printf("" Arrow_Down : navigate downwards in command history [Ctrl+N]"");; 1344 Printf("" Arrow_Up : navigate upwards in command history [Ctrl+P]"");; 1345 Printf("" Ctrl+R ; Ctrl+S : search command in your history by typing a string.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:53790,undo,undo,53790,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,3,"['clear', 'pause', 'undo']","['clear', 'pause', 'undo']"
Usability,"f);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:79831,simpl,simple,79831,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"f, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 251 of file TStreamerInfoActions.cxx. ◆ WriteLoopInvalid(). Int_t TStreamerInfoActions::WriteLoopInvalid ; (; TBuffer & ; , . void * ; , . const void * ; , . const TConfiguration * ; config . ). Definition at line 1691 of file TStreamerInfoActions.cxx. ◆ WriteSTLp(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteSTLp ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 345 of file TStreamerInfoActions.cxx. ◆ WriteStreamerLoop(). template<bool kIsTextT> . Int_t TStreamerInfoActions::WriteStreamerLoop ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Direct copy of code from TStreamerInfo::WriteBufferAux, potentially can be used later for non-text streaming. ; Definition at line 505 of file TStreamerInfoActions.cxx. ◆ WriteTextBaseClass(). Int_t TStreamerInfoActions::WriteTextBaseClass ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 275 of file TStreamerInfoActions.cxx. ◆ WriteTextStreamer(). Int_t TStreamerInfoActions::WriteTextStreamer ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 283 of file TStreamerInfoActions.cxx. ◆ WriteTextTNamed(). Int_t TStreamerInfoActions::WriteTextTNamed ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 259 of file TStreamerInfoActions.cxx. ◆ WriteTextTObject(). Int_t TStreamerInfoActions::WriteTextTObject ; (; TBuffer & ; buf, . void * ; addr, . const TConfiguration * ; config . ). inline . Definition at line 267 of file TStreamerInfoActions.cxx. TStreamerInfoActions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTStreamerInfoActions.html:20083,Guid,Guide,20083,doc/master/namespaceTStreamerInfoActions.html,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html,1,['Guid'],['Guide']
Usability,"f->IsA() == TLeafD::Class()) {; 9433 ltype = 5;; 9434 }; 9435 if (leaf->IsA() == TLeafC::Class()) {; 9436 len = 1;; 9437 ltype = 5;; 9438 };; 9439 printf("" %-15s = "", leaf->GetName());; 9440 for (Int_t l = 0; l < len; l++) {; 9441 leaf->PrintValue(l);; 9442 if (l == (len - 1)) {; 9443 printf(""\n"");; 9444 continue;; 9445 }; 9446 printf("", "");; 9447 if ((l % ltype) == 0) {; 9448 printf(""\n "");; 9449 }; 9450 }; 9451 }; 9452}; 9453 ; 9454////////////////////////////////////////////////////////////////////////////////; 9455/// Start the TTreeViewer on this tree.; 9456///; 9457/// - ww is the width of the canvas in pixels; 9458/// - wh is the height of the canvas in pixels; 9459 ; 9460void TTree::StartViewer(); 9461{; 9462 GetPlayer();; 9463 if (fPlayer) {; 9464 fPlayer->StartViewer(600, 400);; 9465 }; 9466}; 9467 ; 9468////////////////////////////////////////////////////////////////////////////////; 9469/// Stop the cache learning phase; 9470///; 9471/// Returns:; 9472/// - 0 learning phase stopped or not active; 9473/// - -1 on error; 9474 ; 9475Int_t TTree::StopCacheLearningPhase(); 9476{; 9477 if (!GetTree()) {; 9478 if (LoadTree(0)<0) {; 9479 Error(""StopCacheLearningPhase"",""Could not load a tree"");; 9480 return -1;; 9481 }; 9482 }; 9483 if (GetTree()) {; 9484 if (GetTree() != this) {; 9485 return GetTree()->StopCacheLearningPhase();; 9486 }; 9487 } else {; 9488 Error(""StopCacheLearningPhase"", ""No tree is available. Could not stop cache learning phase"");; 9489 return -1;; 9490 }; 9491 ; 9492 TFile *f = GetCurrentFile();; 9493 if (!f) {; 9494 Error(""StopCacheLearningPhase"", ""No file is available. Could not stop cache learning phase"");; 9495 return -1;; 9496 }; 9497 TTreeCache *tc = GetReadCache(f,true);; 9498 if (!tc) {; 9499 Error(""StopCacheLearningPhase"", ""No cache is available. Could not stop learning phase"");; 9500 return -1;; 9501 }; 9502 tc->StopLearningPhase();; 9503 return 0;; 9504}; 9505 ; 9506///////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:364499,learn,learning,364499,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['learn'],['learning']
Usability,"f->_args[idx].c_str()) ; }. RooCategory& as_CAT(UInt_t idx); { checkIndex(idx) ; return _of->asCAT(_of->_args[idx].c_str()) ; }. RooAbsCategoryLValue& as_CATLV(UInt_t idx); { checkIndex(idx) ; return _of->asCATLV(_of->_args[idx].c_str()) ; }. RooAbsCategory& as_CATFUNC(UInt_t idx); { checkIndex(idx) ; return _of->asCATFUNC(_of->_args[idx].c_str()) ; }. RooArgSet as_SET(UInt_t idx); { checkIndex(idx) ; return _of->asSET(_of->_args[idx].c_str()) ; }. RooArgList as_LIST(UInt_t idx); { checkIndex(idx) ; return _of->asLIST(_of->_args[idx].c_str()) ; }. RooAbsData& as_DATA(UInt_t idx); { checkIndex(idx) ; return _of->asDATA(_of->_args[idx].c_str()) ; }. RooDataHist& as_DHIST(UInt_t idx); { checkIndex(idx) ; return _of->asDHIST(_of->_args[idx].c_str()) ; }. RooDataSet& as_DSET(UInt_t idx); { checkIndex(idx) ; return _of->asDSET(_of->_args[idx].c_str()) ; }. TObject& as_OBJ(UInt_t idx); { checkIndex(idx) ; return _of->asOBJ(_of->_args[idx].c_str()) ; }. const char* as_STRING(UInt_t idx); { checkIndex(idx) ; return _of->asSTRING(_of->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx); { checkIndex(idx) ; return _of->asINT(_of->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx); { checkIndex(idx) ; return _of->asDOUBLE(_of->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx, Int_t defVal); { checkIndex(idx) ; if (idx>_of->_args.size()-1) return defVal ; return _of->asINT(_of->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx, Double_t defVal); { checkIndex(idx) ; if (idx>_of->_args.size()-1) return defVal ; return _of->asDOUBLE(_of->_args[idx].c_str()) ; }. void logError(); { _errorCount++ ; }. std::map<std::string,IFace*>& hooks(); Hooks for other tools. void clearError(); { _errorCount = 0 ; }. Int_t errorCount(); { return _errorCount ; }. » Last changed: Mon Dec 7 13:47:37 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:24128,clear,clearError,24128,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,1,['clear'],['clearError']
Usability,"f->_args[idx].c_str()) ; }. RooCategory& as_CAT(UInt_t idx); { checkIndex(idx) ; return _of->asCAT(_of->_args[idx].c_str()) ; }. RooAbsCategoryLValue& as_CATLV(UInt_t idx); { checkIndex(idx) ; return _of->asCATLV(_of->_args[idx].c_str()) ; }. RooAbsCategory& as_CATFUNC(UInt_t idx); { checkIndex(idx) ; return _of->asCATFUNC(_of->_args[idx].c_str()) ; }. RooArgSet as_SET(UInt_t idx); { checkIndex(idx) ; return _of->asSET(_of->_args[idx].c_str()) ; }. RooArgList as_LIST(UInt_t idx); { checkIndex(idx) ; return _of->asLIST(_of->_args[idx].c_str()) ; }. RooAbsData& as_DATA(UInt_t idx); { checkIndex(idx) ; return _of->asDATA(_of->_args[idx].c_str()) ; }. RooDataHist& as_DHIST(UInt_t idx); { checkIndex(idx) ; return _of->asDHIST(_of->_args[idx].c_str()) ; }. RooDataSet& as_DSET(UInt_t idx); { checkIndex(idx) ; return _of->asDSET(_of->_args[idx].c_str()) ; }. TObject& as_OBJ(UInt_t idx); { checkIndex(idx) ; return _of->asOBJ(_of->_args[idx].c_str()) ; }. const char* as_STRING(UInt_t idx); { checkIndex(idx) ; return _of->asSTRING(_of->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx); { checkIndex(idx) ; return _of->asINT(_of->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx); { checkIndex(idx) ; return _of->asDOUBLE(_of->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx, Int_t defVal); { checkIndex(idx) ; if (idx>_of->_args.size()-1) return defVal ; return _of->asINT(_of->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx, Double_t defVal); { checkIndex(idx) ; if (idx>_of->_args.size()-1) return defVal ; return _of->asDOUBLE(_of->_args[idx].c_str()) ; }. void logError(); { _errorCount++ ; }. std::map<std::string,IFace*>& hooks(); Hooks for other tools. void clearError(); { _errorCount = 0 ; }. Int_t errorCount(); { return _errorCount ; }. » Last changed: Thu Dec 2 14:53:26 2010 » Last generated: 2010-12-02 14:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFactoryWSTool.html:24286,clear,clearError,24286,root/html528/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html528/RooFactoryWSTool.html,1,['clear'],['clearError']
Usability,f. ◆ StreamerNVirtual(). void RooMomentMorph::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file RooMomentMorph.h. ◆ sumPdf(). RooAbsPdf * RooMomentMorph::sumPdf ; (; const RooArgSet * ; nset). Definition at line 330 of file RooMomentMorph.cxx. ◆ useHorizontalMorphing(). void RooMomentMorph::useHorizontalMorphing ; (; bool ; val). inline . Definition at line 45 of file RooMomentMorph.h. Friends And Related Symbol Documentation. ◆ CacheElem. friend class CacheElem. friend . Current normalization set. ; Definition at line 76 of file RooMomentMorph.h. Member Data Documentation. ◆ _cacheMgr. RooObjCacheManager RooMomentMorph::_cacheMgr. mutableprotected . Definition at line 73 of file RooMomentMorph.h. ◆ _curNormSet. RooArgSet* RooMomentMorph::_curNormSet = nullptr. mutableprotected . The cache manager. ; Definition at line 74 of file RooMomentMorph.h. ◆ _M. TMatrixD* RooMomentMorph::_M = nullptr. mutableprotected . Definition at line 92 of file RooMomentMorph.h. ◆ _mref. TVectorD* RooMomentMorph::_mref = nullptr. mutableprotected . Definition at line 90 of file RooMomentMorph.h. ◆ _pdfList. RooListProxy RooMomentMorph::_pdfList. protected . Definition at line 89 of file RooMomentMorph.h. ◆ _setting. Setting RooMomentMorph::_setting. protected . Definition at line 94 of file RooMomentMorph.h. ◆ _useHorizMorph. bool RooMomentMorph::_useHorizMorph = true. protected . Definition at line 96 of file RooMomentMorph.h. ◆ _varList. RooSetProxy RooMomentMorph::_varList. protected . Definition at line 88 of file RooMomentMorph.h. ◆ m. RooRealProxy RooMomentMorph::m. protected . Definition at line 87 of file RooMomentMorph.h. Libraries for RooMomentMorph:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooMomentMorph.h; roofit/roofit/src/RooMomentMorph.cxx. RooMomentMorph. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:80638,Guid,Guide,80638,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,1,['Guid'],['Guide']
Usability,"f...Definition TSystem.cxx:4194; The user may sometimes try to compile a script before it has loaded all the needed shared libraries. In this case we want to be helpful and output a list of the unresolved symbols. So if the loading of the created shared library fails, we will try to build a executable that contains the script. The linker should then output a list of missing symbols.; To support this we provide a TSystem::SetMakeExe() function, that sets the directive telling how to create an executable. The loader will need to be informed of all the libraries available. The information about the libraries that has been loaded by .L and TSystem::Load() is accessible to the script compiler. However, the information about the libraries that have been selected at link time by the application builder (like the root libraries for root.exe) are not available and need to be explicitly listed in fLinkedLibs (either by default or by a call to TSystem::SetLinkedLibs()).; To simplify customization we could also add to the .rootrc support for the variables Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ; Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; I#define I(x, y, z); And also support for MakeSharedLibs() and MakeExe().; (the ... have to be replaced by the actual values and are here only to shorten this comment).; Note that the default behavior is to remove libraries when closing ROOT, ie TSystem::CleanCompiledMacros() is called in the TROOT destructor. The default behavior of .L script.C+ is the opposite one, leaving things after closing, without removing. In other words, .L always passes the 'k' option behind the scenes. ; Definition at line 2836 of file TSystem.cxx. ◆ ConcatFileName(). char * TSystem::ConcatFileName ; (; const char * ; dir, . const char * ; name . ). virtual . Concatenate a directory and a file name. User must delete returned string. ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:45747,simpl,simplify,45747,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['simpl'],['simplify']
Usability,"f.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector to process trees containing Event structures ;  ProofEventProc.hSelector to process trees containing Event structures ;  ProofFriends.CSelector to process tree friends ;  ProofFriends.hSelector to process tree friends ;  ProofNtuple.CSelector to fill a simple ntuple ;  ProofNtuple.hSelector to fill a simple ntuple ;  ProofPythia.CSelector to generate Monte Carlo events with Pythia8 ;  ProofPythia.hSelector to generate Monte Carlo events with Pythia8 ;  ProofSimple.CSelector to fill a set of histograms ;  ProofSimple.hSelector to fill a set of histograms ;  ProofSimpleFile.CSelector to fill a set of histograms and merging via file ;  ProofSimpleFile.hSelector to fill a set of histograms and merging via file ;  ProofStdVect.CSelector for generic processing with stdlib collections ;  ProofStdVect.hSelector for generic processing with stdlib collections ;  ProofTests.CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:136514,simpl,simple,136514,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability,"f.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 302 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Definition at line 99 of file RooRealSumPdf.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 98 of file RooRealSumPdf.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 100 of file RooRealSumPdf.h. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumPdf::_coefList. protected . List of coefficients. ; Definition at line 89 of file RooRealSumPdf.h. ◆ _doFloor. bool RooRealSumPdf::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 92 of file RooRealSumPdf.h. ◆ _doFloorGlobal. bool RooRealSumPdf::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 94 of file RooRealSumPdf.h. ◆ _extended. bool RooRealSumPdf::_extended. protected . Allow use as extended p.d.f. ; Definition at line 90 of file RooRealSumPdf.h. ◆ _funcList. RooListProxy RooRealSumPdf::_funcList. protected . List of component FUNCs. ; Definition at line 88 of file RooRealSumPdf.h. ◆ _haveWarned. bool RooRealSumPdf::_haveWarned {false}. mutableprotected . ! ; Definition at line 93 of file RooRealSumPdf.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumPdf::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 85 of file RooRealSumPdf.h. Libraries for RooRealSumPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumPdf.h; roofit/roofitcore/src/RooRealSumPdf.cxx. RooRealSumPdf. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:94613,Guid,Guide,94613,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,1,['Guid'],['Guide']
Usability,"f2(myf1);. // wrapping a class member function; ROOT::Math::Functor1D f3(&myf1,&MyFunction1D::Eval);. cout << f1(2) << endl;; cout << f2(2) << endl;; cout << f3(2) << endl;. return 0;; }; 13.7.4.2 Wrapping One Dimensional Gradient Functions; The ROOT::Math::GradFunctor1D class is used to wrap one-dimensional gradient functions. It can be constructed in three different ways: * Any object implementing both double operator()( double) for the function evaluation and double Derivative(double) for the function derivative. * Any object implementing any member function like Foo::XXX(double ) for the function evaluation and any other member function like Foo::YYY(double ) for the derivative. * Any two function objects implementing double operator()( double ) . One object provides the function evaluation, the other the derivative. One or both function object can be a free C function of type double ()(double ).; 13.7.4.3 Wrapping Multi-dimensional Functions; The class ROOT::Math::Functor is used to wrap in a very simple and convenient way multi-dimensional function objects. It can wrap all the following types: * Any C++ callable object implementing double operator()( const double * ). * A free C function of type double ()(const double * ). * A member function with the correct signature like Foo::Eval(const double * ). In this case one pass the object pointer and a pointer to the member function (&Foo::Eval).; The function dimension is required when constructing the functor.; Example of using Functor:; #include ""Math/Functor.h"". class MyFunction {. public:; double operator()(const double *x) const {; return x[0]+x[1];; }. double Eval(const double * x) const { return x[0]+x[1]; }; };. double freeFunction(const double * x ); {; return x[0]+x[1];; }. int main(); {; // test directly calling the function object; MyFunction myf;. // test from a free function pointer; ROOT::Math::Functor f1(&freeFunction,2);. // test from function object; ROOT::Math::Functor f2(myf,2);. // test from a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:696378,simpl,simple,696378,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"f::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:2187,Clear,ClearData,2187,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,6,['Clear'],['ClearData']
Usability,"f::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2294,Clear,ClearFeedback,2294,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearFeedback']
Usability,"f; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly choosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; MLPfit; package originaly written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been choosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. The; MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with f being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:2508,clear,clear,2508,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['clear'],['clear']
Usability,"fCollectFunc(collect_func),; 562 fCreateEnv(create_env),; 563 fCreateIterators(getIterators),fCopyIterator(copyIterator),fNext(next),; 564 fDeleteSingleIterator(deleteSingleIterator),fDeleteTwoIterators(deleteTwoIterators); 565 {; 566 }; 567 ; 568 /// Generate proxy from template; 569 template <class T> static TCollectionProxyInfo* Generate(const T&) {; 570 // Generate a TCollectionProxyInfo given a TCollectionProxyInfo::Type; 571 // template (used to described the behavior of the stl collection.; 572 // Typical use looks like:; 573 // ::ROOT::Detail::TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< std::vector<string> >()));; 574 ; 575 PairHolder<TYPENAME T::Value_t, TYPENAME T::Value_t>* p =; 576 (PairHolder<TYPENAME T::Value_t, TYPENAME T::Value_t>*)0x1000;; 577 return new TCollectionProxyInfo(typeid(TYPENAME T::Cont_t),; 578 sizeof(TYPENAME T::Iter_t),; 579 (((char*)&p->second)-((char*)&p->first)),; 580 T::value_offset(),; 581 T::size,; 582 T::resize,; 583 T::clear,; 584 T::first,; 585 T::next,; 586 T::construct,; 587 T::destruct,; 588 T::feed,; 589 T::collect,; 590 T::Env_t::Create,; 591 T::Iterators_t::create,; 592 T::Iterators_t::copy,; 593 T::Iterators_t::next,; 594 T::Iterators_t::destruct1,; 595 T::Iterators_t::destruct2);; 596 }; 597 ; 598 template <class T> static TCollectionProxyInfo Get(const T&) {; 599 ; 600 // Generate a TCollectionProxyInfo given a TCollectionProxyInfo::Type; 601 // template (used to described the behavior of the stl collection.; 602 // Typical use looks like:; 603 // ::ROOT::Detail::TCollectionProxyInfo::Get(TCollectionProxyInfo::Pushback< std::vector<string> >()));; 604 ; 605 PairHolder<TYPENAME T::Value_t, TYPENAME T::Value_t>* p =; 606 (PairHolder<TYPENAME T::Value_t, TYPENAME T::Value_t>*)0x1000;; 607 return TCollectionProxyInfo(typeid(TYPENAME T::Cont_t),; 608 sizeof(TYPENAME T::Iter_t),; 609 (((char*)&p->second)-((char*)&p->first)),; 610 T::value_offset(),; 611 T::size,; 612 T::resize,; 613 T::clear,; 614 T::firs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:20434,clear,clear,20434,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['clear'],['clear']
Usability,fContainer. TGFrame* TGMdiMainFrame::fContainer. protected . MDI container. ; Definition at line 151 of file TGMdiMainFrame.h. ◆ fCurrent. TGMdiFrameList* TGMdiMainFrame::fCurrent. protected . current list of MDI child windows ; Definition at line 154 of file TGMdiMainFrame.h. ◆ fCurrentX. Int_t TGMdiMainFrame::fCurrentX. protected . Definition at line 141 of file TGMdiMainFrame.h. ◆ fCurrentY. Int_t TGMdiMainFrame::fCurrentY. protected . Definition at line 141 of file TGMdiMainFrame.h. ◆ fFontCurrent. TGFont* TGMdiMainFrame::fFontCurrent. protected . Definition at line 143 of file TGMdiMainFrame.h. ◆ fFontNotCurrent. TGFont * TGMdiMainFrame::fFontNotCurrent. protected . fonts for active and inactive MDI children ; Definition at line 143 of file TGMdiMainFrame.h. ◆ fForeCurrent. Pixel_t TGMdiMainFrame::fForeCurrent. protected . back and fore colors for active MDI children ; Definition at line 144 of file TGMdiMainFrame.h. ◆ fForeNotCurrent. Pixel_t TGMdiMainFrame::fForeNotCurrent. protected . back and fore colors for inactive MDI children ; Definition at line 145 of file TGMdiMainFrame.h. ◆ fMenuBar. TGMdiMenuBar* TGMdiMainFrame::fMenuBar. protected . menu bar ; Definition at line 150 of file TGMdiMainFrame.h. ◆ fNumberOfFrames. Long_t TGMdiMainFrame::fNumberOfFrames. protected . number of MDI child windows ; Definition at line 149 of file TGMdiMainFrame.h. ◆ fResizeMode. Int_t TGMdiMainFrame::fResizeMode. protected . current MDI child XY position and resize mode ; Definition at line 141 of file TGMdiMainFrame.h. ◆ fWinListMenu. TGPopupMenu* TGMdiMainFrame::fWinListMenu. protected . popup menu with list of MDI child windows ; Definition at line 152 of file TGMdiMainFrame.h. Libraries for TGMdiMainFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiMainFrame.h; gui/gui/src/TGMdiMainFrame.cxx. TGMdiMainFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiMainFrame.html:46777,Guid,Guide,46777,doc/master/classTGMdiMainFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiMainFrame.html,1,['Guid'],['Guide']
Usability,"fDeviceBuffersDefinition DataLoader.h:146; TMVA::DNN::TDataLoader::operator=TDataLoader & operator=(const TDataLoader &)=default; TMVA::DNN::TDataLoader::Matrix_ttypename AArchitecture::Matrix_t Matrix_tDefinition DataLoader.h:134; TMVA::DNN::TDataLoader::fNStreamssize_t fNStreamsNumber of buffer pairs.Definition DataLoader.h:145; TMVA::DNN::TDataLoader::TDataLoaderTDataLoader(const Data_t &data, size_t nSamples, size_t batchSize, size_t nInputFeatures, size_t nOutputFeatures, size_t nStreams=1)Definition DataLoader.h:202; TMVA::DNN::TDataLoader::fBatchIndexsize_t fBatchIndexDefinition DataLoader.h:143; TMVA::DNN::TDataLoader::fBatchSizesize_t fBatchSizeDefinition DataLoader.h:140; TMVA::DNN::TDataLoader::HostBuffer_ttypename AArchitecture::HostBuffer_t HostBuffer_tDefinition DataLoader.h:132; TMVA::DNN::TDataLoader::Shufflevoid Shuffle()Shuffle the order of the samples in the batch.Definition DataLoader.h:269; TMVA::DNN::TDataLoader::fNOutputFeaturessize_t fNOutputFeaturesDefinition DataLoader.h:142; TMVA::DNN::TDataLoader::CopyWeightsvoid CopyWeights(HostBuffer_t &buffer, IndexIterator_t begin, size_t batchSize)Copy weight matrix into the given host buffer.; TMVA::DNN::TDataLoader::TDataLoaderTDataLoader(const TDataLoader &)=default; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMatrixTTMatrixT.Definition TMatrixT.h:40; TMVA::DNN::IndexIterator_ttypename std::vector< size_t >::iterator IndexIterator_tDefinition DataLoader.h:42; TMVA::DNN::TMVAInput_tstd::tuple< const std::vector< Event * > &, const DataSetInfo & > TMVAInput_tDefinition DataLoader.h:40; TMVA::DNN::MatrixInput_tstd::tuple< const TMatrixT< Double_t > &, const TMatrixT< Double_t > &, const TMatrixT< Double_t > & > MatrixInput_tDefinition DataLoader.h:38; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22. tmvatmvaincTMVADNNDataLoader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html:16737,Guid,Guide,16737,doc/master/DNN_2DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html,1,['Guid'],['Guide']
Usability,"fDisplay, fScreenNumber);; 819 ; 820 if (!fVisual) {; 821 fDepth = DefaultDepth((Display*)fDisplay, fScreenNumber);; 822 fVisual = (RVisual*)DefaultVisual((Display*)fDisplay, fScreenNumber);; 823 fVisRootWin = fRootWin;; 824 if (fDepth > 1); 825 fColormap = DefaultColormap((Display*)fDisplay, fScreenNumber);; 826 fBlackPixel = BlackPixel((Display*)fDisplay, fScreenNumber);; 827 fWhitePixel = WhitePixel((Display*)fDisplay, fScreenNumber);; 828 }; 829 if (gDebug > 1); 830 Printf(""Selected visual 0x%lx: depth %d, class %d, colormap: %s"",; 831 fVisual->visualid, fDepth, fVisual->c_class,; 832 fColormap == DefaultColormap((Display*)fDisplay, fScreenNumber) ? ""default"" :; 833 ""custom"");; 834}; 835 ; 836////////////////////////////////////////////////////////////////////////////////; 837/// Dummy error handler for X11. Used by FindUsableVisual().; 838 ; 839static Int_t DummyX11ErrorHandler(Display *, XErrorEvent *); 840{; 841 return 0;; 842}; 843 ; 844////////////////////////////////////////////////////////////////////////////////; 845/// Check if visual is usable, if so set fVisual, fDepth, fColormap,; 846/// fBlackPixel and fWhitePixel.; 847 ; 848void TGX11::FindUsableVisual(RXVisualInfo *vlist, Int_t nitems); 849{; 850 Int_t (*oldErrorHandler)(Display *, XErrorEvent *) =; 851 XSetErrorHandler(DummyX11ErrorHandler);; 852 ; 853 XSetWindowAttributes attr;; 854 memset(&attr, 0, sizeof(attr));; 855 ; 856 Window root = RootWindow((Display*)fDisplay, fScreenNumber);; 857 ; 858 for (Int_t i = 0; i < nitems; i++) {; 859 Window w = None, wjunk;; 860 UInt_t width, height, ujunk;; 861 Int_t junk;; 862 ; 863 // try and use default colormap when possible; 864 if (vlist[i].visual == DefaultVisual((Display*)fDisplay, fScreenNumber)) {; 865 attr.colormap = DefaultColormap((Display*)fDisplay, fScreenNumber);; 866 } else {; 867 attr.colormap = XCreateColormap((Display*)fDisplay, root, vlist[i].visual, AllocNone);; 868 }; 869 ; 870 static XColor black_xcol = { 0, 0x0000, 0x0000, 0x0000, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:27289,usab,usable,27289,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['usab'],['usable']
Usability,fElem. TDSetElement* TEventIter::fElem. protected . Definition at line 50 of file TEventIter.h. ◆ fElemCur. Long64_t TEventIter::fElemCur. protected . Definition at line 59 of file TEventIter.h. ◆ fElemFirst. Long64_t TEventIter::fElemFirst. protected . Definition at line 57 of file TEventIter.h. ◆ fElemNum. Long64_t TEventIter::fElemNum. protected . Definition at line 58 of file TEventIter.h. ◆ fEntryList. TEntryList* TEventIter::fEntryList. protected . current position in the eventList ; Definition at line 68 of file TEventIter.h. ◆ fEntryListPos. Long64_t TEventIter::fEntryListPos. protected . entry list for processing ; Definition at line 69 of file TEventIter.h. ◆ fEventList. TEventList* TEventIter::fEventList. protected . Definition at line 66 of file TEventIter.h. ◆ fEventListPos. Int_t TEventIter::fEventListPos. protected . eventList for processing ; Definition at line 67 of file TEventIter.h. ◆ fFile. TFile* TEventIter::fFile. protected . Definition at line 53 of file TEventIter.h. ◆ fFilename. TString TEventIter::fFilename. protected . Definition at line 52 of file TEventIter.h. ◆ fFirst. Long64_t TEventIter::fFirst. protected . Definition at line 62 of file TEventIter.h. ◆ fNum. Long64_t TEventIter::fNum. protected . Definition at line 63 of file TEventIter.h. ◆ fOldBytesRead. Long64_t TEventIter::fOldBytesRead. protected . Definition at line 54 of file TEventIter.h. ◆ fPackets. TList* TEventIter::fPackets. protected . current position in the entrylist ; Definition at line 71 of file TEventIter.h. ◆ fPath. TString TEventIter::fPath. protected . Definition at line 55 of file TEventIter.h. ◆ fSel. TSelector* TEventIter::fSel. protected . Definition at line 61 of file TEventIter.h. ◆ fStop. Bool_t TEventIter::fStop. protected . Definition at line 65 of file TEventIter.h. proof/proofplayer/inc/TEventIter.h; proof/proofplayer/src/TEventIter.cxx. TEventIter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:39 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIter.html:17498,Guid,Guide,17498,doc/master/classTEventIter.html,https://root.cern,https://root.cern/doc/master/classTEventIter.html,1,['Guid'],['Guide']
Usability,"fGamma. protected . Definition at line 111 of file MethodRSVM.h. ◆ fKernel. TString TMVA::MethodRSVM::fKernel. protected . Definition at line 104 of file MethodRSVM.h. ◆ fModel. ROOT::R::TRObject* TMVA::MethodRSVM::fModel. protected . Definition at line 131 of file MethodRSVM.h. ◆ fMvaCounter. UInt_t TMVA::MethodRSVM::fMvaCounter. protected . Definition at line 83 of file MethodRSVM.h. ◆ fNu. Float_t TMVA::MethodRSVM::fNu. protected . Definition at line 115 of file MethodRSVM.h. ◆ fProbability. Bool_t TMVA::MethodRSVM::fProbability. protected . Definition at line 124 of file MethodRSVM.h. ◆ fProbResultForTestSig. std::vector<Float_t> TMVA::MethodRSVM::fProbResultForTestSig. protected . Definition at line 85 of file MethodRSVM.h. ◆ fProbResultForTrainSig. std::vector<Float_t> TMVA::MethodRSVM::fProbResultForTrainSig. protected . Definition at line 84 of file MethodRSVM.h. ◆ fScale. Bool_t TMVA::MethodRSVM::fScale. protected . Definition at line 88 of file MethodRSVM.h. ◆ fShrinking. Bool_t TMVA::MethodRSVM::fShrinking. protected . Definition at line 119 of file MethodRSVM.h. ◆ fTolerance. Float_t TMVA::MethodRSVM::fTolerance. protected . Definition at line 117 of file MethodRSVM.h. ◆ fType. TString TMVA::MethodRSVM::fType. protected . Definition at line 93 of file MethodRSVM.h. ◆ IsModuleLoaded. Bool_t MethodRSVM::IsModuleLoaded = ROOT::R::TRInterface::Instance().Require(""e1071""). staticprotected . Definition at line 127 of file MethodRSVM.h. ◆ predict. ROOT::R::TRFunctionImport TMVA::MethodRSVM::predict. protected . Definition at line 129 of file MethodRSVM.h. ◆ svm. ROOT::R::TRFunctionImport TMVA::MethodRSVM::svm. protected . Definition at line 128 of file MethodRSVM.h. Libraries for TMVA::MethodRSVM:. [legend]; The documentation for this class was generated from the following files:; tmva/rmva/inc/TMVA/MethodRSVM.h; tmva/rmva/src/MethodRSVM.cxx. TMVAMethodRSVM. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRSVM.html:35551,Guid,Guide,35551,doc/master/classTMVA_1_1MethodRSVM.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRSVM.html,1,['Guid'],['Guide']
Usability,"fHistogram->GetXaxis()->GetXmin() != 0) return fHistogram;; 1446 } else if (gPad && gPad->GetLogy()) {; 1447 if (rwymin <= 0 || fHistogram->GetMinimum() != 0) return fHistogram;; 1448 } else {; 1449 return fHistogram;; 1450 }; 1451 } else {; 1452 const_cast <TGraph*>(this)->ResetBit(kResetHisto);; 1453 }; 1454 historg = fHistogram;; 1455 }; 1456 ; 1457 if (rwxmin == rwxmax) rwxmax += 1.;; 1458 if (rwymin == rwymax) rwymax += 1.;; 1459 dx = 0.1 * (rwxmax - rwxmin);; 1460 dy = 0.1 * (rwymax - rwymin);; 1461 uxmin = rwxmin - dx;; 1462 uxmax = rwxmax + dx;; 1463 minimum = rwymin - dy;; 1464 maximum = rwymax + dy;; 1465 ; 1466 if (fMinimum != -1111) minimum = fMinimum;; 1467 if (fMaximum != -1111) maximum = fMaximum;; 1468 ; 1469 // the graph is created with at least as many channels as there are points; 1470 // to permit zooming on the full range; 1471 if (uxmin < 0 && rwxmin >= 0) {; 1472 if (gPad && gPad->GetLogx()) uxmin = 0.9 * rwxmin;; 1473 else uxmin = 0;; 1474 }; 1475 if (uxmax > 0 && rwxmax <= 0) {; 1476 if (gPad && gPad->GetLogx()) uxmax = 1.1 * rwxmax;; 1477 else uxmax = 0;; 1478 }; 1479 ; 1480 if (minimum < 0 && rwymin >= 0) minimum = 0.9 * rwymin;; 1481 ; 1482 if (minimum <= 0 && gPad && gPad->GetLogy()) minimum = 0.001 * maximum;; 1483 if (uxmin <= 0 && gPad && gPad->GetLogx()) {; 1484 if (uxmax > 1000) uxmin = 1;; 1485 else uxmin = 0.001 * uxmax;; 1486 }; 1487 ; 1488 rwxmin = uxmin;; 1489 rwxmax = uxmax;; 1490 Int_t npt = 100;; 1491 if (fNpoints > npt) npt = fNpoints;; 1492 const char *gname = GetName();; 1493 if (!gname[0]) gname = ""Graph"";; 1494 // do not add the histogram to gDirectory; 1495 // use local TDirectory::TContect that will set temporarly gDirectory to a nullptr and; 1496 // will avoid that histogram is added in the global directory; 1497 {; 1498 TDirectory::TContext ctx(nullptr);; 1499 ((TGraph*)this)->fHistogram = new TH1F(gname, GetTitle(), npt, rwxmin, rwxmax);; 1500 }; 1501 if (!fHistogram) return nullptr;; 1502 fHistogram->SetMinimum(min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:53105,ux,uxmin,53105,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,3,['ux'],"['uxmax', 'uxmin']"
Usability,"fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSingleShotCleaner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSingleShotCleaner(). TSingleShotCleaner::TSingleShotCleaner ; (; ). inline . Definition at line 58 of file TTimer.cxx. ◆ ~TSingleShotCleaner(). virtual TSingleShotCleaner::~TSingleShotCleaner ; (; ). inlinevirtual . Definition at line 59 of file TTimer.cxx. Member Function Documentation. ◆ Notify(). Bool_t TSingleShotCleaner::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Implements TSysEvtHandler.; Definition at line 68 of file TTimer.cxx. ◆ TurnOn(). void TSingleShotCleaner::TurnOn ; (; ). inlineoverridevirtual . Add the timer to the system timer list. ; If a TTimer subclass has to be placed on another list, override TurnOn() to add the timer to the correct list. ; Reimplemented from TTimer.; Definition at line 60 of file TTimer.cxx. Member Data Documentation. ◆ fGarbage. TList* TSingleShotCleaner::fGarbage. private . Definition at line 56 of file TTimer.cxx. core/base/src/TTimer.cxx. TSingleShotCleaner. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSingleShotCleaner.html:18798,Guid,Guide,18798,doc/master/classTSingleShotCleaner.html,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html,1,['Guid'],['Guide']
Usability,"fNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:17786,undo,undo,17786,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,4,['undo'],['undo']
Usability,"fNavigators()->GetEntriesFast();; 1565 SelectTrackingMedia();; 1566 CheckGeometry();; 1567 if (fgVerboseLevel > 0); 1568 Info(""CloseGeometry"", ""Counting nodes..."");; 1569 fNNodes = CountNodes();; 1570 fNLevel = fMasterVolume->CountNodes(1, 3) + 1;; 1571 if (fNLevel < 30); 1572 fNLevel = 100;; 1573 ; 1574 // BuildIdArray();; 1575 // avoid voxelization if requested to speed up geometry startup; 1576 if (!opt.Contains(""nv"")) {; 1577 Voxelize(""ALL"");; 1578 } else {; 1579 TGeoVolume *vol;; 1580 TIter next(fVolumes);; 1581 while ((vol = (TGeoVolume *)next())) {; 1582 vol->SortNodes();; 1583 }; 1584 }; 1585 if (fgVerboseLevel > 0); 1586 Info(""CloseGeometry"", ""Building cache..."");; 1587 CountLevels();; 1588 for (Int_t i = 0; i < nnavigators; i++) {; 1589 nav = (TGeoNavigator *)GetListOfNavigators()->At(i);; 1590 nav->GetCache()->BuildInfoBranch();; 1591 if (nodeid); 1592 nav->GetCache()->BuildIdArray();; 1593 }; 1594 fClosed = kTRUE;; 1595 if (fgVerboseLevel > 0) {; 1596 Info(""CloseGeometry"", ""%i nodes/ %i volume UID's in %s"", fNNodes, fUniqueVolumes->GetEntriesFast() - 1,; 1597 GetTitle());; 1598 Info(""CloseGeometry"", ""----------------modeler ready----------------"");; 1599 }; 1600}; 1601 ; 1602////////////////////////////////////////////////////////////////////////////////; 1603/// Clear the list of overlaps.; 1604 ; 1605void TGeoManager::ClearOverlaps(); 1606{; 1607 if (fOverlaps) {; 1608 fOverlaps->Delete();; 1609 delete fOverlaps;; 1610 }; 1611 fOverlaps = new TObjArray();; 1612}; 1613 ; 1614////////////////////////////////////////////////////////////////////////////////; 1615/// Remove a shape from the list of shapes.; 1616 ; 1617void TGeoManager::ClearShape(const TGeoShape *shape); 1618{; 1619 if (fShapes->FindObject(shape)); 1620 fShapes->Remove((TGeoShape *)shape);; 1621 delete shape;; 1622}; 1623 ; 1624////////////////////////////////////////////////////////////////////////////////; 1625/// Clean temporary volumes and shapes from garbage collection.; 1626 ; 1627void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:59526,Clear,Clear,59526,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['Clear']
Usability,"fOffset;  ; TMemberStreamer * fStreamer;  Not Owned. ;  ; Int_t fType;  . Constructor & Destructor Documentation. ◆ TCompInfo(). TStreamerInfo::TCompInfo::TCompInfo ; (; ). inline . Definition at line 57 of file TStreamerInfo.h. ◆ ~TCompInfo(). TStreamerInfo::TCompInfo::~TCompInfo ; (; ). inline . Definition at line 59 of file TStreamerInfo.h. Member Function Documentation. ◆ Update(). void TStreamerInfo::TCompInfo::Update ; (; const TClass * ; oldcl, . TClass * ; newcl . ). Update the TClass pointer cached in this object. ; Definition at line 5644 of file TStreamerInfo.cxx. Member Data Documentation. ◆ fClass. TClass* TStreamerInfo::TCompInfo::fClass. Not Owned. ; Definition at line 53 of file TStreamerInfo.h. ◆ fClassName. TString TStreamerInfo::TCompInfo::fClassName. Definition at line 55 of file TStreamerInfo.h. ◆ fElem. TStreamerElement* TStreamerInfo::TCompInfo::fElem. Not Owned. ; Definition at line 51 of file TStreamerInfo.h. ◆ fLength. Int_t TStreamerInfo::TCompInfo::fLength. Definition at line 50 of file TStreamerInfo.h. ◆ fMethod. ULongptr_t TStreamerInfo::TCompInfo::fMethod. Definition at line 52 of file TStreamerInfo.h. ◆ fNewClass. TClass* TStreamerInfo::TCompInfo::fNewClass. Not Owned. ; Definition at line 54 of file TStreamerInfo.h. ◆ fNewType. Int_t TStreamerInfo::TCompInfo::fNewType. Definition at line 48 of file TStreamerInfo.h. ◆ fOffset. Int_t TStreamerInfo::TCompInfo::fOffset. Definition at line 49 of file TStreamerInfo.h. ◆ fStreamer. TMemberStreamer* TStreamerInfo::TCompInfo::fStreamer. Not Owned. ; Definition at line 56 of file TStreamerInfo.h. ◆ fType. Int_t TStreamerInfo::TCompInfo::fType. Definition at line 47 of file TStreamerInfo.h. Libraries for TStreamerInfo::TCompInfo:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TStreamerInfo.h; io/io/src/TStreamerInfo.cxx. TStreamerInfoTCompInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo_1_1TCompInfo.html:2624,Guid,Guide,2624,doc/master/classTStreamerInfo_1_1TCompInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo_1_1TCompInfo.html,1,['Guid'],['Guide']
Usability,"fParamsDouble_t fParams[20]Definition TGeoMedium.h:29; TGeoMedium::kMedSavePrimitive@ kMedSavePrimitiveDefinition TGeoMedium.h:25; TGeoMedium::operator=TGeoMedium & operator=(const TGeoMedium &)assignment operatorDefinition TGeoMedium.cxx:108; TGeoMedium::fIdInt_t fIdDefinition TGeoMedium.h:28; TGeoMedium::GetPointerNameconst char * GetPointerName() constProvide a pointer name containing uid.Definition TGeoMedium.cxx:128; TGeoMedium::TGeoMediumTGeoMedium()Default constructor.Definition TGeoMedium.cxx:35; TGeoMedium::~TGeoMedium~TGeoMedium() overrideDestructor.Definition TGeoMedium.cxx:123; TIterDefinition TCollection.h:235; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::fNameTString fNameDefinition TNamed.h:32; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TStringBasic string class.Definition TString.h:139; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; double; int; unsigned int. geomgeomsrcTGeoMedium.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMedium_8cxx_source.html:8944,Guid,Guide,8944,doc/master/TGeoMedium_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMedium_8cxx_source.html,1,['Guid'],['Guide']
Usability,"fParentIDs![fNumPIDs][fAllocSize] array of Parent IDs; TObjArray*fParentsarray of Parent objects (eg TTree branch) holding the referenced objects; vector<string>fProcessGUIDsUUIDs of TProcessIDs used in fParentIDs; Int_tfSizedummy for backward compatibility; UInt_tfUID!Current uid (set by TRef::GetObject); TProcessID*fUIDContext!TProcessID the current uid is referring to; static TRefTable*fgRefTablePointer to current TRefTable. Class Charts. Inheritance Chart:. TObject. ←; TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRefTable.html:9266,Clear,Clear,9266,root/html602/TRefTable.html,https://root.cern,https://root.cern/root/html602/TRefTable.html,4,['Clear'],['Clear']
Usability,"fPols[30] = fColor ; buffer.fPols[31] = 4 ; buffer.fPols[32] = 7 ; // 5; buffer.fPols[33] = 6 ; buffer.fPols[34] = 5 ; buffer.fPols[35] = 4 ;; ; buffer.SetSectionsValid(TBuffer3D::kRaw);; }; ; return buffer;; }; ; class SBPyramid : public Shape; {; public:; SBPyramid(Int_t color, Double_t d, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ);; ~SBPyramid() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fDX, fDY, fDZ; // Base half lengths dX,dY; // Pyr. height dZ; ; ClassDefOverride(SBPyramid,0);; };; ; ClassImp(SBPyramid);; ; SBPyramid::SBPyramid(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ) :; Shape(color,x,y,z),; fDX(dX), fDY(dY), fDZ(dZ); {}; ; TBuffer3D & SBPyramid::GetBuffer3D(UInt_t reqSections); {; static TBuffer3D buffer(TBuffer3DTypes::kGeneric);; ; // Complete kCore section - this could be moved to Shape base class; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); buffer.fLocalFrame = kFALSE;; buffer.SetLocalMasterIdentity();; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t halfLength[3] = { fDX, fDY, fDZ/2.0 };; Double_t origin[3] = { fX , fY, fZ + halfLength[2]};; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // No kShapeSpecific section; ; // Complete kRawSizes section; if (reqSections & TBuffer3D::kRawSizes) {; buffer.SetRawSizes(5, 3*5, 8, 3*8, 5, 6 + 4*5);; buffer.SetSectionsValid(TBuffer3D::kRawSizes);; }; // Complete kRaw section; if (reqSections & TBuffer3D::kRaw) {; // Points (5); // 3 components: x,y,z; buffer.fPnts[ 0] = fX - fDX; buffer.fPnts[ 1] = fY - fDY; buffer.fPnts[ 2] = fZ; // 0; buffer.f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DMaster_8C.html:6581,Clear,ClearSectionsValid,6581,doc/master/viewer3DMaster_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DMaster_8C.html,1,['Clear'],['ClearSectionsValid']
Usability,"fStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:18383,undo,undo,18383,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,4,['undo'],['undo']
Usability,"fTabMgrtab manager corresponding to ged-editor; Double_tTGeoTrapEditor::fThetaiInitial theta; Double_tTGeoTrapEditor::fTl1iInitial half length in x at low z and y high edge; Double_tfTwistiInitial twist angle; TGTextButton*TGeoTrapEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for gtra editor. ~TGeoGtraEditor(); Destructor. void SetModel(TObject* obj); Connect to a given twisted trapezoid. void DoApply(); Slot for applying current settings. void DoUndo(); Slot for undoing last operation. void DoTwist(); Change the twist angle. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoGtraEditor.html:22534,undo,undoing,22534,root/html534/TGeoGtraEditor.html,https://root.cern,https://root.cern/root/html534/TGeoGtraEditor.html,1,['undo'],['undoing']
Usability,"fTitleobject title; static TPythia6*fgInstance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia6(); TPythia6 constructor: creates a TClonesArray in which it will store all; particles. Note that there may be only one functional TPythia6 object; at a time, so it's not use to create more than one instance of it. TPythia6(const TPythia6& ); { }. ~TPythia6(); Destroys the object, deletes and disposes all TMCParticles currently on list. TPythia6* Instance(); model of automatic memory cleanup suggested by Jim Kowalkovski:; destructor for local static variable `cleaner' is always called in the end; of the job thus deleting the only TPythia6 instance. void GenerateEvent(); generate event and copy the information from /HEPEVT/ to fPrimaries. void OpenFortranFile(int lun, char* name); interface with fortran i/o. void CloseFortranFile(int lun); interface with fortran i/o. TObjArray * ImportParticles(Option_t* option = """"); Fills TObjArray fParticles list with particles from common LUJETS; Old contents of a list are cleared. This function should be called after; any change in common LUJETS, however GetParticles() method calls it; automatically - user don't need to care about it. In case you make a call; to LuExec() you must call this method yourself to transfer new data from; common LUJETS to the fParticles list. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"); Default primary creation method. It reads the /HEPEVT/ common block which; has been filled by the GenerateEvent method. If the event generator does; not use the HEPEVT common block, This routine has to be overloaded by; the subclasses.; The function loops on the generated particles and store them in; the TClonesArray pointed by the argument particles.; The default action is to store only the stable particles (ISTHEP = 1); This can be demanded explicitly by setting the option = ""Final""; If the option = ""All"", all the particles are stored. void Initiali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPythia6.html:12978,clear,cleared,12978,root/html528/TPythia6.html,https://root.cern,https://root.cern/root/html528/TPythia6.html,3,['clear'],['cleared']
Usability,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:23506,learn,learning,23506,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,10,"['clear', 'learn']","['clear', 'learning']"
Usability,"fX2end xDefinition TCurlyLine.h:24; TCurlyLine::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TCurlyLine.cxx:185; TCurlyLine::fIsCurlyBool_t fIsCurlytrue: Gluon, false: GammaDefinition TCurlyLine.h:29; TCurlyLine::SetBBoxCenterYvoid SetBBoxCenterY(const Int_t y) overrideSet Y coordinate of the center of the BoundingBox.Definition TCurlyLine.cxx:546; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TPointDefinition TPoint.h:31; TPolyLine::GetXDouble_t * GetX() constDefinition TPolyLine.h:54; TPolyLine::GetYDouble_t * GetY() constDefinition TPolyLine.h:55; TPolyLine::SetPolyLinevirtual void SetPolyLine(Int_t n)Resize this polyline to size n.Definition TPolyLine.cxx:657; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361. graf2dgrafsrcTCurlyLine.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCurlyLine_8cxx_source.html:26657,Guid,Guide,26657,doc/master/TCurlyLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCurlyLine_8cxx_source.html,1,['Guid'],['Guide']
Usability,"fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TPieSlice*fPieSlice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); TPieSliceEditor constructor. ~TPieSliceEditor(); TPieSliceEditor destructor. void SetModel(TObject* ); Set model. void ConnectSignals2Slots(); Connect signals to slots. void DoTitle(const char* ); Slot for setting the graph title. void DoValue(); Slot for setting the graph title. void DoOffset(); Slot for setting the graph title. TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Guido Volpi 05/18/2008 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 30 15:25:15 2015 » Last generated: 2015-06-30 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPieSliceEditor.html:21433,Guid,Guido,21433,root/html602/TPieSliceEditor.html,https://root.cern,https://root.cern/root/html602/TPieSliceEditor.html,1,['Guid'],['Guido']
Usability,"f_StreamerNVirtual_b);  ; void Subtract (TEveGridStepper &s);  Subtract current position of 's' from origin of this. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGridStepper.html:3289,Clear,Clear,3289,doc/master/classTEveGridStepper.html,https://root.cern,https://root.cern/doc/master/classTEveGridStepper.html,1,['Clear'],['Clear']
Usability,"failure. Bool_t AllocColor(Colormap cmap, RXColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(Colormap cmap, RXColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(Drawable* pix); Clear the pixmap pix. void ClearWindow(); Clear current window. void ClosePixmap(); Delete current pixmap. void CloseWindow(); Delete current window. void CloseWindow1(); Delete current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wid at the position xpos, ypos in the current window. void CopyWindowtoPixmap(Drawable* pix, Int_t xpos, Int_t ypos); Copy area of current window in the pixmap pix. void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel presicion; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area described by polygon.; n : number of points; xy(2,n) : list of p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11.html:27617,Clear,ClearWindow,27617,root/html602/TGX11.html,https://root.cern,https://root.cern/root/html602/TGX11.html,4,['Clear'],"['Clear', 'ClearWindow']"
Usability,"false otherwise ; A new row k is added to the matrix L, its dimension is expanded. The new elements Lki are filled from the array rowData[] where the indices i which are taken from the array indices[]. ; Definition at line 1954 of file TUnfold.cxx. ◆ Class(). static TClass * TUnfold::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUnfold::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUnfold::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 357 of file TUnfold.h. ◆ ClearHistogram(). void TUnfold::ClearHistogram ; (; TH1 * ; h, . Double_t ; x = 0. . ); const. protected . Initialize bin contents and bin errors for a given histogram. ; Parameters. [out]hhistogram ; [in]xnew histogram content. all histgram errors are set to zero, all contents are set to x ; Definition at line 3680 of file TUnfold.cxx. ◆ ClearResults(). void TUnfold::ClearResults ; (; void ; ). protectedvirtual . reset all results ; Reimplemented in TUnfoldSys.; Definition at line 208 of file TUnfold.cxx. ◆ CreateSparseMatrix(). TMatrixDSparse * TUnfold::CreateSparseMatrix ; (; Int_t ; nrow, . Int_t ; ncol, . Int_t ; nel, . Int_t * ; row, . Int_t * ; col, . Double_t * ; data . ); const. protected . create a sparse matrix, given the nonzero elements ; Parameters. [in]nrownumber of rows ; [in]ncolnumber of columns ; [in]nelnumber of non-zero elements ; [in]rowrow indexes of non-zero elements ; [in]colcolumn indexes of non-zero elements ; [in]datanon-zero elements data. return pointer to a new sparse matrix; shortcut to new TMatrixDSparse() followed by SetMatrixArray() ; Definition at line 578 of file TUnfold.cxx. ◆ DeclFileName(). static const char * TUnfold::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 357 of file TUnfold.h. ◆ DeleteMatrix() [1/2]. void TUnfold::DeleteMatrix ; (; TMatrix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:28615,Clear,ClearResults,28615,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['Clear'],['ClearResults']
Usability,"false;  ; bool cloneInputData = true;  ; double integrateOverBinsPrecision = -1.;  ; RooFit::MPSplit interleave = RooFit::BulkPartition;  ; int nCPU = 1;  ; std::string rangeName;  Stores the configuration parameters for RooAbsTestStatistic. ;  ; bool splitCutRange = false;  ; bool takeGlobalObservablesFromData = false;  ; bool verbose = true;  . #include <RooAbsTestStatistic.h>; Member Data Documentation. ◆ addCoefRangeName. std::string Configuration::addCoefRangeName. Definition at line 6 of file RooAbsTestStatistic.h. ◆ binnedL. bool Configuration::binnedL = false. Definition at line 13 of file RooAbsTestStatistic.h. ◆ cloneInputData. bool Configuration::cloneInputData = true. Definition at line 11 of file RooAbsTestStatistic.h. ◆ integrateOverBinsPrecision. double Configuration::integrateOverBinsPrecision = -1. Definition at line 12 of file RooAbsTestStatistic.h. ◆ interleave. RooFit::MPSplit Configuration::interleave = RooFit::BulkPartition. Definition at line 8 of file RooAbsTestStatistic.h. ◆ nCPU. int Configuration::nCPU = 1. Definition at line 7 of file RooAbsTestStatistic.h. ◆ rangeName. std::string Configuration::rangeName. Stores the configuration parameters for RooAbsTestStatistic. ; Definition at line 5 of file RooAbsTestStatistic.h. ◆ splitCutRange. bool Configuration::splitCutRange = false. Definition at line 10 of file RooAbsTestStatistic.h. ◆ takeGlobalObservablesFromData. bool Configuration::takeGlobalObservablesFromData = false. Definition at line 14 of file RooAbsTestStatistic.h. ◆ verbose. bool Configuration::verbose = true. Definition at line 9 of file RooAbsTestStatistic.h. Collaboration diagram for Configuration:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; roofit/roofitcore/inc/RooAbsTestStatistic.h. Configuration. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structConfiguration.html:2259,Guid,Guide,2259,doc/v632/structConfiguration.html,https://root.cern,https://root.cern/doc/v632/structConfiguration.html,1,['Guid'],['Guide']
Usability,"fault kIndexesBasic); Normally these functions should be called immidiately after TSQLFile constructor. When objects data written to database, by default START TRANSACTION/COMMIT; SQL commands are used before and after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function to hime. By default only indexes for basic tables are created.; In most cases usage of indexes increase perfomance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method. There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be usufull for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straigthforward. Known problems and open questions.; 1) TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; 2) TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; 3) TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); 4) Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. Example how TSQLFile can be used:. example of a session saving data to a SQL data base. const char* dbname = ""mysql://host.domain:330",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:5030,simpl,simple,5030,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,5,['simpl'],['simple']
Usability,"fault), ReadBuffer automatically; delete objects when a data member is a pointer to an object.; If your constructor is not presetting pointers to 0, you must; call this static function TStreamerInfo::SetCanDelete(kFALSE);. void SetFactory(TVirtualStreamerInfo* factory); static function: Set the StreamerInfo factory. Bool_t SetStreamMemberWise(Bool_t enable = kTRUE); Set whether the TStreamerInfos will save the collections in; ""member-wise"" order whenever possible. The default is to store member-wise.; kTRUE indicates member-wise storing; kFALSE inddicates object-wise storing; This function returns the previous value of fgStreamMemberWise. void Streamer(TBuffer& ); Stream an object of class TVirtualStreamerInfo. void ResetIsCompiled(). void SetIsCompiled(). void Build(). void BuildCheck(TFile* file = 0). void BuildEmulated(TFile* file). void BuildOld(). Bool_t BuildFor(const TClass* cl). void CallShowMembers(const void* obj, TMemberInspector& insp, Bool_t isTransient) const. void Clear(Option_t* ). Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file). void Compile(). void ForceWriteInfo(TFile* file, Bool_t force = kFALSE). Int_t GenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0). TClass * GetActualClass(const void* obj) const. TClass * GetClass() const. UInt_t GetCheckSum() const. Int_t GetClassVersion() const. TStreamerElement * GetElem(Int_t id) const. TStreamerElement * GetElement(Int_t id) const. TObjArray * GetElements() const. Int_t GetOffset(const char* ) const. Int_t GetOffset(Int_t id) const. Int_t GetElementOffset(Int_t id) const. Version_t GetOldVersion() const. Int_t GetOnFileClassVersion() const. Int_t GetNumber() const. Int_t GetSize() const. TStreamerElement * GetStreamerElement(const char* datamember, Int_t& offset) const. Bool_t IsBuilt() const; { return fIsBuilt; }. Bool_t IsCompiled() const; { return fIsCompiled; }. Bool_t IsOptimized() const; { retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualStreamerInfo.html:15277,Clear,Clear,15277,root/html602/TVirtualStreamerInfo.html,https://root.cern,https://root.cern/root/html602/TVirtualStreamerInfo.html,2,['Clear'],['Clear']
Usability,"faultFrameBackground()); virtual~TGButtonGroup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidButtonClicked(); virtual voidButtonPressed(); virtual voidButtonReleased(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidClicked(Int_t id)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGButtonGroup.html:4247,Clear,Clear,4247,root/html528/TGButtonGroup.html,https://root.cern,https://root.cern/root/html528/TGButtonGroup.html,4,['Clear'],['Clear']
Usability,fd. Int_t TSystem::fMaxwfd {-1}. protected . Definition at line 282 of file TSystem.h. ◆ fNfd. Int_t TSystem::fNfd {0}. protected . Signals that were trapped. ; Definition at line 280 of file TSystem.h. ◆ fObjExt. TString TSystem::fObjExt. protected . Definition at line 314 of file TSystem.h. ◆ fOnExitList. TSeqCollection* TSystem::fOnExitList {nullptr}. protected . Definition at line 298 of file TSystem.h. ◆ fReadmask. TFdSet* TSystem::fReadmask {nullptr}. protected . Definition at line 275 of file TSystem.h. ◆ fReadready. TFdSet* TSystem::fReadready {nullptr}. protected . Files that should be checked for write events. ; Definition at line 277 of file TSystem.h. ◆ fSigcnt. Int_t TSystem::fSigcnt {0}. protected . Definition at line 283 of file TSystem.h. ◆ fSignalHandler. TSeqCollection* TSystem::fSignalHandler {nullptr}. protected . Definition at line 295 of file TSystem.h. ◆ fSignals. TFdSet* TSystem::fSignals {nullptr}. protected . Files with writes waiting. ; Definition at line 279 of file TSystem.h. ◆ fSoExt. TString TSystem::fSoExt. protected . Definition at line 313 of file TSystem.h. ◆ fStdExceptionHandler. TSeqCollection* TSystem::fStdExceptionHandler {nullptr}. protected . Definition at line 297 of file TSystem.h. ◆ fTimers. TList* TSystem::fTimers {nullptr}. protected . Definition at line 294 of file TSystem.h. ◆ fWdpath. TString TSystem::fWdpath. protected . Definition at line 284 of file TSystem.h. ◆ fWritemask. TFdSet* TSystem::fWritemask {nullptr}. protected . Files that should be checked for read events. ; Definition at line 276 of file TSystem.h. ◆ fWriteready. TFdSet* TSystem::fWriteready {nullptr}. protected . Files with reads waiting. ; Definition at line 278 of file TSystem.h. Libraries for TSystem:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TSystem.h; core/base/src/TSystem.cxx. TSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:102421,Guid,Guide,102421,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['Guid'],['Guide']
Usability,"fer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawListOfPolyMarkers3D(); TProofDrawListOfPolyMarkers3D(TProofDrawListOfPolyMarkers3D&&); TProofDrawListOfPolyMarkers3D(const TProofDrawListOfPolyMarkers3D&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawListOfPolyMarkers3D.html:6107,Clear,ClearFormula,6107,root/html602/TProofDrawListOfPolyMarkers3D.html,https://root.cern,https://root.cern/root/html602/TProofDrawListOfPolyMarkers3D.html,2,['Clear'],['ClearFormula']
Usability,"fer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooObjCacheManager.html:3724,clear,clearCacheOnServerRedirect,3724,root/html526/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html526/RooObjCacheManager.html,4,['clear'],"['clearCacheOnServerRedirect', 'cleared']"
Usability,"fer, Long64_t size, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual~TMemFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual voidCopyTo(TBuffer& tobuf) const; virtual Long64_tCopyTo(void* to, Long64_t maxsize) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMemFile.html:1572,Clear,Clear,1572,root/html532/TMemFile.html,https://root.cern,https://root.cern/root/html532/TMemFile.html,2,['Clear'],['Clear']
Usability,"fer, nwh);; 1322 }; 1323 const char *data = GetPointer();; 1324 for (int i = 0; i < nchars; i++) buffer[i] = data[i];; 1325 buffer += nchars;; 1326}; 1327 ; 1328////////////////////////////////////////////////////////////////////////////////; 1329/// Read string from I/O buffer.; 1330 ; 1331void TString::ReadBuffer(char *&buffer); 1332{; 1333 UnLink();; 1334 Zero();; 1335 ; 1336 UChar_t nwh;; 1337 Int_t nchars;; 1338 ; 1339 frombuf(buffer, &nwh);; 1340 if (nwh == 255); 1341 frombuf(buffer, &nchars);; 1342 else; 1343 nchars = nwh;; 1344 ; 1345 if (nchars < 0) {; 1346 Error(""TString::ReadBuffer"", ""found case with nwh=%d and nchars=%d"", nwh, nchars);; 1347 return;; 1348 }; 1349 ; 1350 char *data = Init(nchars, nchars);; 1351 ; 1352 for (int i = 0; i < nchars; i++) frombuf(buffer, &data[i]);; 1353}; 1354 ; 1355////////////////////////////////////////////////////////////////////////////////; 1356/// Read TString object from buffer. Simplified version of; 1357/// TBuffer::ReadObject (does not keep track of multiple; 1358/// references to same string). We need to have it here; 1359/// because TBuffer::ReadObject can only handle descendant; 1360/// of TObject.; 1361 ; 1362TString *TString::ReadString(TBuffer &b, const TClass *clReq); 1363{; 1364 R__ASSERT(b.IsReading());; 1365 ; 1366 // Make sure ReadArray is initialized; 1367 b.InitMap();; 1368 ; 1369 // Before reading object save start position; 1370 UInt_t startpos = UInt_t(b.Length());; 1371 ; 1372 UInt_t tag;; 1373 TClass *clRef = b.ReadClass(clReq, &tag);; 1374 ; 1375 TString *a;; 1376 if (!clRef) {; 1377 ; 1378 a = nullptr;; 1379 ; 1380 } else {; 1381 ; 1382 a = (TString *) clRef->New();; 1383 if (!a) {; 1384 ::Error(""TString::ReadObject"", ""could not create object of class %s"",; 1385 clRef->GetName());; 1386 // Exception; 1387 return a;; 1388 }; 1389 ; 1390 a->Streamer(b);; 1391 ; 1392 b.CheckByteCount(startpos, tag, clRef);; 1393 }; 1394 ; 1395 return a;; 1396}; 1397 ; 1398////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:41211,Simpl,Simplified,41211,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['Simpl'],['Simplified']
Usability,"fer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafD(); Default constructor for LeafD*-*-*-*-*-*-*-*-; *-* ============================. TLeafD(TBranch* parent, const char* name, const char* type); Create a LeafD*-*-; *-* ==============; -. ~TLeafD(); Default destructor for a LeafD*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a double from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafD(). const char * GetTypeName() const; {return ""Double_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafD.html:9236,simpl,simple,9236,root/html534/TLeafD.html,https://root.cern,https://root.cern/root/html534/TLeafD.html,1,['simpl'],['simple']
Usability,"ference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TRecorder Class ReferenceGUI » Events recorder. ; Class provides direct recorder/replayer interface for a user. ; See 'ROOT EVENT RECORDING SYSTEM' for more information about usage.; Implementation uses C++ design pattern State. Functionality of recorder is divided into 4 classes according to the current state of recorder.; Internally, there is a pointer to TRecorderState object. This object changes whenever state of recorder is changed. States of recorder are the following:. INACTIVE Implemented in TRecorderInactive class. Default state after TRecorder object is created.; RECORDING Implemented in TRecorderRecording class.; REPLAYING Implemented in TRecorderReplaying class.; PAUSED Implemented in TRecorderPause class. Pause of replaying. Every command for TRecorder is just passed to TRecordeState object. Depending on the current state of recorder, this command is passed to some of the above mentioned classes and if valid, handled there.; Switching between states is not possible from outside. States are switched directly by state objects via:; ChangeState(TRecorderState* newstate, Bool_t deletePreviousState);; When recorder is switched to a new state, the old state object is typically deleted. The only exception is switching from REPLAYING state to PAUSED state. The previous state (REPLAYING) is not deleted in order to be used again after TRecorder::Resume call. STATE TRANSITIONS:. INACTIVE -> RECORDING via TRecorder::Start (Starts recording); RECORDING -> INACTIVE via TRecorder::Stop (Stops recording); INACTIVE -> REPLAYING via TRecorder::Replay (Starts replaying); REPLAYING -> INACTIVE via TRecorder::ReplayStop (Stops replaying); REPLAYING -> PAUSED via TRecorder::Pause (Paus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:1037,PAUSE,PAUSED,1037,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['PAUSE'],['PAUSED']
Usability,"ference Guide | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:1005,Guid,Guides,1005,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['Guid'],['Guides']
Usability,"ference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Histogramming in a Selector. Preparation; As previously, we provide a ready-made TSelector derived class in a simple source file. So please download also the following source file and save it where you can find it: EventDataSelector.C (or wget http://root-mirror.github.io/training/intro/EventDataSelector.C).; This selector contains all the necessary steps to read the data from the tree branches, like the number of particles, the X position of each particle PosX[nparticles], and the absolute momentum of each particle Momentum[nparticles].; Now quit and restart ROOT (to make sure everybody starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. Adding a Data Member; Just like for the sum of event sizes, you need to add a data member to the class. As in Histogramming, we want to histogram the particles' fPosX; the type of the data member should thus be TH1F*. Don't forget to initialize the histogram pointer to 0 in the constructor, again just like for the event size sum.; Creating the Hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:2023,simpl,simple,2023,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,1,['simpl'],['simple']
Usability,"ference. . Definition at line 403 of file TGFrame.h. Public Member Functions;  TGMapKey (UInt_t keycode, TGWindow *w);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html:1220,Clear,Clear,1220,doc/master/classTGMainFrame_1_1TGMapKey.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html,1,['Clear'],['Clear']
Usability,"ference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >Adagrad Optimizer class. ; This class represents the Adagrad Optimizer. ; Definition at line 45 of file Adagrad.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdagrad (DeepNet_t &deepNet, Scalar_t learningRate=0.01, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdagrad ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Ste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:1109,learn,learningRate,1109,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['learn'],['learningRate']
Usability,"ferent data (used by MethodCategory::GetMvaValues)Definition MethodBase.h:448; TMVA::MethodDLDefinition MethodDL.h:89; TMVA::MethodDL::TensorImpl_ttypename ArchitectureImpl_t::Tensor_t TensorImpl_tDefinition MethodDL.h:108; TMVA::MethodDL::fBatchHeightsize_t fBatchHeightThe height of the batch used to train the deep net.Definition MethodDL.h:183; TMVA::MethodDL::GetHelpMessagevoid GetHelpMessage() constDefinition MethodDL.cxx:2342; TMVA::MethodDL::fLossFunctionDNN::ELossFunction fLossFunctionThe loss function.Definition MethodDL.h:190; TMVA::MethodDL::fInputShapestd::vector< size_t > fInputShapeContains the batch size (no.Definition MethodDL.h:178; TMVA::MethodDL::fLayoutStringTString fLayoutStringThe string defining the layout of the deep net.Definition MethodDL.h:194; TMVA::MethodDL::SetInputDepthvoid SetInputDepth(int inputDepth)Setters.Definition MethodDL.h:286; TMVA::MethodDL::fYHatstd::unique_ptr< MatrixImpl_t > fYHatDefinition MethodDL.h:208; TMVA::MethodDL::Trainvoid Train()Methods for training the deep learning network.Definition MethodDL.cxx:1659; TMVA::MethodDL::GetBatchHeightsize_t GetBatchHeight() constDefinition MethodDL.h:263; TMVA::MethodDL::GetMvaValuesvirtual std::vector< Double_t > GetMvaValues(Long64_t firstEvt, Long64_t lastEvt, Bool_t logProgress)Evaluate the DeepNet on a vector of input values stored in the TMVA Event class Here we will evaluate...Definition MethodDL.cxx:2022; TMVA::MethodDL::fWeightInitializationStringTString fWeightInitializationStringThe string defining the weight initialization method.Definition MethodDL.h:197; TMVA::MethodDL::ParseMaxPoolLayervoid ParseMaxPoolLayer(DNN::TDeepNet< Architecture_t, Layer_t > &deepNet, std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > &nets, TString layerString, TString delim)Pases the layer string and creates the appropriate max pool layer.Definition MethodDL.cxx:768; TMVA::MethodDL::fXInputTensorImpl_t fXInputDefinition MethodDL.h:206; TMVA::MethodDL::fRandomSeedsize_t fRandomSeedThe r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:103509,learn,learning,103509,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learning']
Usability,"ffect.; “NOL” No OutLine: do not draw the slices’ outlines; any property over the slices’ line is ignored. The method SetLabelFormat() is used to customize the label format. The format string must contain one of these modifiers:. %txt : to print the text label associated with the slice. %val : to print the numeric value of the slice. %frac : to print the relative fraction of this slice. %perc : to print the % of this slice. mypie->SetLabelFormat(""%txt (%frac)"");; See the macro $ROOTSYS/tutorials/graphics/piechart.C . The picture generated by tutorial macro piechart.C. 3.21 The User Interface for Histograms; The classes T H1 Editor and T H2 Editor provides the user interface for setting histogram’s attributes and rebinning interactively.; 3.21.1 TH1Editor. 3.21.1.1 The Style Tab; 3.21.1.1.1 Title; sets the title of the histogram.; 3.21.1.1.2 Plot; draw a 2D or 3D plot; according to the dimension, different drawing possibilities can be set.; 3.21.1.1.3 Error; add different error bars to the histogram (no errors, simple, etc.).; 3.21.1.1.4 Add; further things which can be added to the histogram (None, simple/smooth line, fill area, etc.); 3.21.1.2 2-D Plot; 3.21.1.2.1 Simple Drawing; draw a simple histogram without errors (= “HIST” draw option). In combination with some other draw options an outer line is drawn on top of the histogram; 3.21.1.2.2 Show markers; draw a marker on to of each bin (=“P” draw option).; 3.21.1.2.3 Draw bar chart; draw a bar chart (=“B” draw option).; 3.21.1.2.4 Bar option; draw a bar chart (=“BAR” draw option); if selected, it will show an additional interface elements for bars: width, offset, percentage and the possibility to draw horizontal bars.; 3.21.1.3 3-D Plot; 3.21.1.3.1 Add; set histogram type Lego-Plot or Surface draw (Lego, Lego1.2, Surf, Surf1…5).; 3.21.1.3.2 Coords; set the coordinate system (Cartesian, Spheric, etc.).; 3.21.1.3.3 Error; same as for 2D plot.; 3.21.1.3.4 Bar; set the bar attributes: width and offset.; 3.21.1.3.5 Hor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:135531,simpl,simple,135531,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"ffer &) override;  Stream an object of class TLine. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLine.html:5930,Clear,Clear,5930,doc/master/classTLine.html,https://root.cern,https://root.cern/doc/master/classTLine.html,3,['Clear'],['Clear']
Usability,"ffer &) override;  Stream an object of class TLine. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:7505,Clear,Clear,7505,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,1,['Clear'],['Clear']
Usability,"ffer &ClassDef_StreamerNVirtual_b);  ; void x3d (Option_t *option="""") override;  Deprecated: use TPad::GetViewer3D() instead. ;  ;  Public Member Functions inherited from TCanvas;  TCanvas (Bool_t build=kTRUE);  Canvas default constructor. ;  ;  TCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ;  TCanvas (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ;  TCanvas (const char *name, const char *title="""", Int_t form=1);  Create a new canvas with a predefined size form. ;  ;  TCanvas (const char *name, Int_t ww, Int_t wh, Int_t winid);  Create an embedded canvas, i.e. ;  ;  ~TCanvas () override;  Canvas destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set current canvas & pad. ;  ; void Clear (Option_t *option="""") override;  Remove all primitives from the canvas. ;  ; virtual void Cleared (TVirtualPad *pad);  Emit pad Cleared signal. ;  ; void ClearPadSave ();  ; void Close (Option_t *option="""") override;  Close canvas. ;  ; void Closed () override;  Emit Closed signal. ;  ; void Constructor ();  Canvas default constructor. ;  ; void Constructor (const char *name, const char *title, Int_t form);  Create a new canvas with a predefined size form. ;  ; void Constructor (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ; void Constructor (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; void DeleteCanvasPainter ();  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:2575,Clear,Cleared,2575,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,4,['Clear'],['Cleared']
Usability,"ffer : "", char_buffer). # However, you can turn the buffer into a string very easily with as_string():; print(""struct.char_buffer.as_string(): "", char_buffer.as_string()); The output of this script with ROOT 6.32:; struct.char_buffer : <cppyy.LowLevelView object at 0x74c7a2682fb0>; struct.char_buffer.as_string(): foo; Deprecate the attribute pythonization of TDirectory in favor of item-getting syntax; The new recommended way to get objects from a TFile or any TDirectory in general is now via __getitem__:; tree = my_file[""my_tree""] # instead of my_file.my_tree; This is more consistent with other Python collections (like dictionaries), makes sure that member functions can’t be confused with branch names, and easily allows you to use string variables as keys.; With the new dictionary-like syntax, you can also get objects with names that don’t qualify as a Python variable. Here is a short demo:; import ROOT. with ROOT.TFile.Open(""my_file.root"", ""RECREATE"") as my_file:. # Populate the TFile with simple objects.; my_file.WriteObject(ROOT.std.string(""hello world""), ""my_string""); my_file.WriteObject(ROOT.vector[""int""]([1, 2, 3]), ""my vector""). print(my_file[""my_string""]) # new syntax; print(my_file.my_string) # old deprecated syntax. # With the dictionary syntax, you can also use names that don't qualify as; # a Python variable:; print(my_file[""my vector""]); # print(my_file.my vector) # the old syntax would not work here!; The old pythonization with the __getattr__ syntax still works, but emits a deprecation warning and will be removed from ROOT 6.34.; Removal of Python 2 support; ROOT does no longer support Python 2. The minimum Python version necessary to use ROOT in a Python application is 3.8. As a consequence, any reference to Python 2 in ROOT code was removed and certain configuration options are no longer usable, e.g. root-config --python2-version; cmake -Dpyroot-python2. The cmake build system now looks for the standard Python3 package and previously custom Python-r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:21873,simpl,simple,21873,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['simpl'],['simple']
Usability,"ffer an option to be drawn in NDC. For instance, a line (TLine) may be drawn in NDC by using DrawLineNDC(). A latex formula or a text may use TText::SetNDC() to be drawn in NDC coordinates.; 9.3.3 Converting between Coordinate Systems; There are a few utility functions in TPad to convert from one system of coordinates to another. In the following table, a point is defined by (px,py) in pixel coordinates, (ux,uy) in user coordinates, (ndcx,ndcy) in normalized coordinates, (apx, apy) are in absolute pixel coordinates. Conversion; TPad’s Methods; Returns. NDC to Pixel; UtoPixel(ndcx); VtoPixel(ndcy); Int_t; Int_t. Pixel to User; PixeltoX(px); PixeltoY(py); PixeltoXY(px,py,&ux,&uy); Double_t; Double_t; Double_t ux,uy. User to Pixel; XtoPixel(ux); YtoPixel(uy); XYtoPixel(ux,uy,&px,&py); Int_t; Int_t; Int_t px,py. User to absolute pixel; XtoAbsPixel(ux); YtoAbsPixel(uy); XYtoAbsPixel(ux,uy,&apx,&apy); Int_t; Int_t; Int_t apx,apy. Absolute pixel to user; AbsPixeltoX(apx); AbsPixeltoY(apy); AbsPixeltoXY(apx,apy,&ux,&uy); Double_t; Double_t; Double_t ux,uy. Note: all the pixel conversion functions along the Y axis consider that py=0 is at the top of the pad except PixeltoY() which assume that the position py=0 is at the bottom of the pad. To make PixeltoY() converting the same way as the other conversion functions, it should be used the following way (p is a pointer to a TPad):; p->PixeltoY(py - p->GetWh());; 9.3.4 Dividing a Pad into Sub-pads; Dividing a pad into sub pads in order for instance to draw a few histograms, may be done in two ways. The first is to build pad objects and to draw them into a parent pad, which may be a canvas. The second is to automatically divide a pad into horizontal and vertical sub pads.; 9.3.4.1 Creating a Single Sub-pad; The simplest way to divide a pad is to build sub-pads in it. However, this forces the user to explicitly indicate the size and position of those sub-pads. Suppose we want to build a sub-pad in the active pad (pointed by gPad). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:311160,ux,ux,311160,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['ux'],['ux']
Usability,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:3875,clear,cleared,3875,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,7,['clear'],['cleared']
Usability,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Copy (TObject &hnew) const override;  Copy this histogram structure to newth1. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the oper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:26640,clear,cleared,26640,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['clear'],['cleared']
Usability,"fference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void assign (in_iter in_start, in_iter in_end);  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:2299,clear,clear,2299,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,1,['clear'],['clear']
Usability,"fferent sequences..); 137 Bool_t color = kFALSE;; 138 Bool_t drawProgressBar = kFALSE;; 139#else; 140 Bool_t color = !gROOT->IsBatch();; 141 Bool_t drawProgressBar = kTRUE;; 142#endif; 143 DeclareOptionRef(fVerbose, ""V"", ""Verbose flag"");; 144 DeclareOptionRef(fVerboseLevel = TString(""Info""), ""VerboseLevel"", ""VerboseLevel (Debug/Verbose/Info)"");; 145 AddPreDefVal(TString(""Debug""));; 146 AddPreDefVal(TString(""Verbose""));; 147 AddPreDefVal(TString(""Info""));; 148 DeclareOptionRef(color, ""Color"", ""Flag for coloured screen output (default: True, if in batch mode: False)"");; 149 DeclareOptionRef(; 150 fTransformations, ""Transformations"",; 151 ""List of transformations to test; formatting example: \""Transformations=I;D;P;U;G,D\"", for identity, ""; 152 ""decorrelation, PCA, Uniform and Gaussianisation followed by decorrelation transformations"");; 153 DeclareOptionRef(fCorrelations, ""Correlations"", ""boolean to show correlation in output"");; 154 DeclareOptionRef(fROC, ""ROC"", ""boolean to show ROC in output"");; 155 DeclareOptionRef(silent, ""Silent"",; 156 ""Batch mode: boolean silent flag inhibiting any output from TMVA after the creation of the factory ""; 157 ""class object (default: False)"");; 158 DeclareOptionRef(drawProgressBar, ""DrawProgressBar"",; 159 ""Draw progress bar to display training, testing and evaluation schedule (default: True)"");; 160 DeclareOptionRef(fModelPersistence, ""ModelPersistence"",; 161 ""Option to save the trained model in xml file or using serialization"");; 162 ; 163 TString analysisType(""Auto"");; 164 DeclareOptionRef(analysisType, ""AnalysisType"",; 165 ""Set the analysis type (Classification, Regression, Multiclass, Auto) (default: Auto)"");; 166 AddPreDefVal(TString(""Classification""));; 167 AddPreDefVal(TString(""Regression""));; 168 AddPreDefVal(TString(""Multiclass""));; 169 AddPreDefVal(TString(""Auto""));; 170 ; 171 ParseOptions();; 172 CheckForUnusedOptions();; 173 ; 174 if (Verbose()); 175 fLogger->SetMinType(kVERBOSE);; 176 if (fVerboseLevel.CompareTo(""Debug"") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:6325,progress bar,progress bar,6325,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"fferent sequences..); 227 Bool_t color = kFALSE;; 228 Bool_t drawProgressBar = kFALSE;; 229#else; 230 Bool_t color = !gROOT->IsBatch();; 231 Bool_t drawProgressBar = kTRUE;; 232#endif; 233 DeclareOptionRef(fVerbose, ""V"", ""Verbose flag"");; 234 DeclareOptionRef(fVerboseLevel = TString(""Info""), ""VerboseLevel"", ""VerboseLevel (Debug/Verbose/Info)"");; 235 AddPreDefVal(TString(""Debug""));; 236 AddPreDefVal(TString(""Verbose""));; 237 AddPreDefVal(TString(""Info""));; 238 DeclareOptionRef(color, ""Color"", ""Flag for coloured screen output (default: True, if in batch mode: False)"");; 239 DeclareOptionRef(; 240 fTransformations, ""Transformations"",; 241 ""List of transformations to test; formatting example: \""Transformations=I;D;P;U;G,D\"", for identity, ""; 242 ""decorrelation, PCA, Uniform and Gaussianisation followed by decorrelation transformations"");; 243 DeclareOptionRef(fCorrelations, ""Correlations"", ""boolean to show correlation in output"");; 244 DeclareOptionRef(fROC, ""ROC"", ""boolean to show ROC in output"");; 245 DeclareOptionRef(silent, ""Silent"",; 246 ""Batch mode: boolean silent flag inhibiting any output from TMVA after the creation of the factory ""; 247 ""class object (default: False)"");; 248 DeclareOptionRef(drawProgressBar, ""DrawProgressBar"",; 249 ""Draw progress bar to display training, testing and evaluation schedule (default: True)"");; 250 DeclareOptionRef(fModelPersistence, ""ModelPersistence"",; 251 ""Option to save the trained model in xml file or using serialization"");; 252 ; 253 TString analysisType(""Auto"");; 254 DeclareOptionRef(analysisType, ""AnalysisType"",; 255 ""Set the analysis type (Classification, Regression, Multiclass, Auto) (default: Auto)"");; 256 AddPreDefVal(TString(""Classification""));; 257 AddPreDefVal(TString(""Regression""));; 258 AddPreDefVal(TString(""Multiclass""));; 259 AddPreDefVal(TString(""Auto""));; 260 ; 261 ParseOptions();; 262 CheckForUnusedOptions();; 263 ; 264 if (Verbose()); 265 fLogger->SetMinType(kVERBOSE);; 266 if (fVerboseLevel.CompareTo(""Debug"") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:10235,progress bar,progress bar,10235,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"fficiency object does not; belong to any directory and will not be written to file during the; next TFile::Write() command. void SetName(const char* name); sets the name. Note: The names of the internal histograms are set to ""name + _total"" and; ""name + _passed"" respectively. Bool_t SetPassedEvents(Int_t bin, Int_t events); sets the number of passed events in the given global bin. returns ""true"" if the number of passed events has been updated; otherwise ""false"" ist returned. Note: - requires: 0 <= events <= fTotalHistogram->GetBinContent(bin). Bool_t SetPassedHistogram(const TH1& rPassed, Option_t* opt); sets the histogram containing the passed events. The given histogram is cloned and stored internally as histogram containing; the passed events. The given histogram has to be consistent with the current; fTotalHistogram (see CheckConsistency(const TH1&,const TH1&)).; The method returns whether the fPassedHistogram has been replaced (true) or; not (false). Note: The list of associated functions fFunctions is cleared. Option: - ""f"": force the replacement without checking the consistency; This can lead to inconsistent histograms and useless results; or unexpected behaviour. But sometimes it might be the only; way to change the histograms. If you use this option, you; should ensure that the fTotalHistogram is replaced by a; consistent one (with respect to rPassed) as well. void SetStatisticOption(TEfficiency::EStatOption option); sets the statistic option which affects the calculation of the confidence interval. Options:; - kFCP (=0)(default): using the Clopper-Pearson interval (recommended by PDG); sets kIsBayesian = false; see also ClopperPearson; - kFNormal (=1) : using the normal approximation; sets kIsBayesian = false; see also Normal; - kFWilson (=2) : using the Wilson interval; sets kIsBayesian = false; see also Wilson; - kFAC (=3) : using the Agresti-Coull interval; sets kIsBayesian = false; see also AgrestiCoull; - kFFC (=4) : using the Feldman-Cousins frequent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEfficiency.html:63101,clear,cleared,63101,root/html532/TEfficiency.html,https://root.cern,https://root.cern/root/html532/TEfficiency.html,4,['clear'],['cleared']
Usability,"fficient number i. ; Definition at line 1817 of file TSpline.cxx. ◆ Streamer(). void TSpline5::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline5. ; Reimplemented from TSpline.; Definition at line 2488 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline5::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 296 of file TSpline.h. ◆ Test(). void TSpline5::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 3 always for quintic spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][6] two dimensional array whose columns are; the computed spline coefficients; diff[5] maximum values of differences of values and; derivatives to right and left of knots.; com[5] maximum values of coefficients.; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; mTMarker mDefinition textangle.C:8; test of TSpline5 with non equidistant knots and equidistant knots follows. ; Definition at line 2083 of file TSpline.cxx. Member Data Documentation. ◆ fPoly. TSplinePoly5* TSpline5::fPoly = nullptr. protected . [fNp] Array of polynomial terms ; Definition at line 240 of file TSpline.h. Libraries for TSpline5:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TSpline.h; hist/hist/src/TSpline.cxx. TSpline5. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline5.html:32831,Guid,Guide,32831,doc/master/classTSpline5.html,https://root.cern,https://root.cern/doc/master/classTSpline5.html,1,['Guid'],['Guide']
Usability,"fficients in front of each function.Definition TF1NormSum.h:27; TF1NormSum::GetNparInt_t GetNpar() constReturn the number of (non constant) parameters including the coefficients: for 2 functions: c1,...Definition TF1NormSum.cxx:361; TF1NormSum::fNOfFunctionsunsigned int fNOfFunctionsNumber of functions to add.Definition TF1NormSum.h:22; TF1NormSum::fCstIndexesstd::vector< Int_t > fCstIndexesVector with size of fNOfFunctions containing the index of the constant parameter/ function (the remov...Definition TF1NormSum.h:28; TF11-Dim function classDefinition TF1.h:233; TF1::InitStandardFunctionsstatic void InitStandardFunctions()Create the basic function objects.Definition TF1.cxx:2497; TF1::kNotGlobal@ kNotGlobalDefinition TF1.h:345; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjStringCollectable string class.Definition TObjString.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TStringBasic string class.Definition TString.h:139; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; double; int; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. histhistsrcTF1NormSum.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1NormSum_8cxx_source.html:20883,Guid,Guide,20883,doc/master/TF1NormSum_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1NormSum_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCategory.html:2190,clear,clearValueAndShapeDirty,2190,root/html534/RooCategory.html,https://root.cern,https://root.cern/root/html534/RooCategory.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"ffset(UInt_t offset, Int_t column); {((tableDescriptor_st *)At(column))->fOffset = offset;}. void SetSize(UInt_t size, Int_t column); {((tableDescriptor_st *)At(column))->fSize = size; }. void SetTypeSize(UInt_t size, Int_t column); {((tableDescriptor_st *)At(column))->fTypeSize = size; }. void SetDimensions(UInt_t dim, Int_t column); {((tableDescriptor_st *)At(column))->fDimensions = dim; }. void SetColumnType(TTable::EColumnType type, Int_t column); {((tableDescriptor_st *)At(column))->fType = type; }. void Init(TClass* classPtr). void SetCommentsSetName(const char* name = "".comments""). TTableDescriptor(const TTable* parentTable). TTableDescriptor(TClass* classPtr). TTableDescriptor(const TTableDescriptor& dsc); {}. virtual ~TTableDescriptor(). Int_t AddAt(const void* c). void AddAt(const void* c, Int_t i). void AddAt(const tableDescriptor_st& element, const char* comment, Int_t indx). void AddAt(TDataSet* dataset, Int_t idx = 0). TString CreateLeafList() const. void LearnTable(const TTable* parentTable). void LearnTable(TClass* classPtr). Int_t ColumnByName(const Char_t* columnName = 0) const. UInt_t Offset(Int_t column) const. UInt_t ColumnSize(Int_t column) const. UInt_t TypeSize(Int_t column) const. UInt_t Dimensions(Int_t column) const. Int_t Sizeof() const. Int_t UpdateOffsets(const TTableDescriptor* newDesciptor). TTableDescriptor * MakeDescriptor(const char* structName). TDataSet * MakeCommentField(Bool_t createFlag = kTRUE). TTableDescriptor * GetDescriptorPointer() const. void SetDescriptorPointer(TTableDescriptor* list). TTableDescriptor(); {SetType(""tableDescriptor_st"");}. TTableDescriptor(const char* name); {SetType(""tableDescriptor_st"");}. TTableDescriptor(Int_t n); {SetType(""tableDescriptor_st"");}. TTableDescriptor(const char* name, Int_t n); {SetType(""tableDescriptor_st"");}. tableDescriptor_st * GetTable(Int_t i = 0) const; { return ((tableDescriptor_st *)GetArray())+i;}. tableDescriptor_st & operator[](Int_t i); { assert(i>=0 && i < GetNRows()); r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableDescriptor.html:17345,Learn,LearnTable,17345,root/html528/TTableDescriptor.html,https://root.cern,https://root.cern/root/html528/TTableDescriptor.html,3,['Learn'],['LearnTable']
Usability,"ffset=0.025);  Set the labels offset. ;  ; void SetRangePolar (Double_t tmin, Double_t tmax);  Allows to change range Polar. ;  ; void SetRangeRadial (Double_t rmin, Double_t rmax);  Set the radial range. ;  ; void SetTickpolarSize (Double_t tickpolarsize=0.02);  Set polar ticks size. ;  ; void SetToDegree ();  The Polar circle is labelled using degree. ;  ; void SetToGrad ();  The Polar circle is labelled using gradian. ;  ; void SetToRadian ();  The Polar circle is labelled using radian. ;  ; void SetTwoPi ();  Set range from 0 to 2*pi. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolargram.html:5995,Clear,Clear,5995,doc/master/classTGraphPolargram.html,https://root.cern,https://root.cern/doc/master/classTGraphPolargram.html,1,['Clear'],['Clear']
Usability,"ffset=452, len=8, method=0; i=10, fContour type= 62, offset=516, len=1, method=1081287804; i=11, fSumw2 type= 62, offset=528, len=1, method=1081287924; i=12, fOption type= 65, offset=540, len=1, method=1081288044; i=13, fFunctions type= 63, offset=548, len=1, method=1081288164; 11.5.4 Optimized StreamerInfo; The entries starting with “i = 0” is the optimized format of the StreamerInfo. Consecutive data members of the same simple type and size are collapsed and read at once into an array for performance optimization.; i= 0, TNamed type= 67, offset= 0, len=1, method=0; i= 1, TAttLine type= 0, offset= 28, len=1, method=142484480; i= 2, TAttFill type= 0, offset= 40, len=1, method=142496992; i= 3, TAttMarker type= 0, offset= 48, len=1, method=142509704; For example, the five data members beginning with fEntiesand the three data members beginning with fMaximum, are put into an array called fEntries (i = 9) with the length 8.; i= 9, fEntries type= 28, offset=452, len=8, method=0; Only simple type data members are combined, object data members are not combined. For example the three axis data members remain separate. The “method” is a handle to the method that reads the object.; 11.5.5 Automatic Schema Evolution; When a class is defined in ROOT, it must include the ClassDef macro as the last line in the header file inside the class definition. The syntax is:; ClassDef(<ClassName>,<VersionNumber>); The version number identifies this particular version of the class. When a class has version 0 it is not stored in a root file but its base class(es) is(are). The reason can be that this class has no data members worth saving or all real info is in the base classes. The version number is written to the file in the Streamer by the call TBuffer::WriteVersion. You, as the designer of the class, do not need to do any manual modification in the Streamer. ROOT schema evolution mechanism is automatic and handled by the StreamerInfo.; 11.5.6 Manual Data Model Evolution Capabilities; The au",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:497135,simpl,simple,497135,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSessionLogView.html:23862,Clear,ClearLogView,23862,root/html604/TSessionLogView.html,https://root.cern,https://root.cern/root/html604/TSessionLogView.html,2,['Clear'],"['Clear', 'ClearLogView']"
Usability,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionLogView.html:23862,Clear,ClearLogView,23862,root/html602/TSessionLogView.html,https://root.cern,https://root.cern/root/html602/TSessionLogView.html,2,['Clear'],"['Clear', 'ClearLogView']"
Usability,"fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGDockableFrame.h>. Inheritance diagram for TGUndockedFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGUndockedFrame() [1/2]. TGUndockedFrame::TGUndockedFrame ; (; const TGUndockedFrame & ; ). privatedelete . ◆ TGUndockedFrame() [2/2]. TGUndockedFrame::TGUndockedFrame ; (; const TGWindow * ; p = nullptr, . TGDockableFrame * ; dockable = nullptr . ). Create the undocked (transient) frame. ; Definition at line 176 of file TGDockableFrame.cxx. ◆ ~TGUndockedFrame(). TGUndockedFrame::~TGUndockedFrame ; (; ). override . Delete undocked frame. Puts back dockable frame in its original container. ; Definition at line 193 of file TGDockableFrame.cxx. Member Function Documentation. ◆ Class(). static TClass * TGUndockedFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGUndockedFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGUndockedFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGDockableFrame.h. ◆ CloseWindow(). void TGUndockedFrame::CloseWindow ; (; ). overridevirtual . Close undocked frame (called via WM close button). ; Reimplemented from TGMainFrame.; Definition at line 213 of file TGDockableFrame.cxx. ◆ DeclFileName(). static const char * TGUndockedFrame::DeclFileName ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUndockedFrame.html:36688,undo,undocked,36688,doc/master/classTGUndockedFrame.html,https://root.cern,https://root.cern/doc/master/classTGUndockedFrame.html,1,['undo'],['undocked']
Usability,"fgets(line, 80, f)) {; sscanf(&line[20], ""%f"", &v);; strncpy(dt, line, 18);; dt[19] = '\0';; g->SetPoint(i, TDatime(dt).Convert(), v);; i++;; }; fclose(f);; ; // Draw the graph; auto c = new TCanvas(""c"", ""c"", 950, 500);; c->SetLeftMargin(0.07);; c->SetRightMargin(0.04);; c->SetGrid();; g->SetLineWidth(3);; g->SetLineColor(kBlue);; g->Draw(""al"");; g->GetYaxis()->CenterTitle();; ; // Make the X axis labelled with time.; auto xaxis = g->GetXaxis();; xaxis->SetTimeDisplay(1);; xaxis->CenterTitle();; xaxis->SetTimeFormat(""%a %d"");; xaxis->SetTimeOffset(0);; xaxis->SetNdivisions(-219);; xaxis->SetLimits(TDatime(2017, 7, 3, 0, 0, 0).Convert(), TDatime(2017, 7, 22, 0, 0, 0).Convert());; xaxis->SetLabelSize(0.025);; xaxis->CenterLabels();; }; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; kBlue@ kBlueDefinition Rtypes.h:66; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TCanvasThe Canvas class.Definition TCanvas.h:23; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AppendTString & Append(const char *cs)Definition TString.h:572; lineTLine * lineDefinition entrylistblock_figure1.C:235; timeSeriesFromCSVDefinition timeSeriesFromCSV.py:1; v@ vDefinition rootcling_impl.cxx:3699; AuthorsDanilo Piparo, Olivier Couet ; Definition in file timeSeriesFromCSV.C. tutorialsgraphstimeSeriesFromCSV.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeSeriesFromCSV_8C.html:2961,Guid,Guide,2961,doc/master/timeSeriesFromCSV_8C.html,https://root.cern,https://root.cern/doc/master/timeSeriesFromCSV_8C.html,1,['Guid'],['Guide']
Usability,"fication based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; MLPfit; package originaly written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been chosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. The; MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs of the previous layer. The output of the; neuron is then function of that combination with f being; linear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:2727,simpl,simple,2727,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['simpl'],['simple']
Usability,"fied and has all typedef desugared except for the 'special' typedef which include Double32_t, Float16_t, [U]Long64_t and std::string. It also has std:: removed [This is subject to change]. ; Definition at line 85 of file TMethodArg.cxx. ◆ IsA(). TClass * TMethodArg::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDictionary.; Definition at line 64 of file TMethodArg.h. ◆ operator=(). TMethodArg & TMethodArg::operator= ; (; const TMethodArg & ; ). privatedelete . ◆ Property(). Long_t TMethodArg::Property ; (; ); const. overridevirtual . Get property description word. For meaning of bits see EProperty. ; Implements TDictionary.; Definition at line 93 of file TMethodArg.cxx. ◆ Streamer(). void TMethodArg::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDictionary. ◆ StreamerNVirtual(). void TMethodArg::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TMethodArg.h. ◆ Update(). void TMethodArg::Update ; (; MethodArgInfo_t * ; info). Update fInfo (to 0 for unloading and non-zero for reloading). ; This takes ownership of 'info' ; Definition at line 137 of file TMethodArg.cxx. Friends And Related Symbol Documentation. ◆ TMethod. friend class TMethod. friend . Definition at line 38 of file TMethodArg.h. Member Data Documentation. ◆ fDataMember. TDataMember* TMethodArg::fDataMember. private . Definition at line 46 of file TMethodArg.h. ◆ fInfo. MethodArgInfo_t* TMethodArg::fInfo. private . Definition at line 44 of file TMethodArg.h. ◆ fMethod. TFunction* TMethodArg::fMethod. private . Definition at line 45 of file TMethodArg.h. Libraries for TMethodArg:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TMethodArg.h; core/meta/src/TMethodArg.cxx. TMethodArg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodArg.html:19792,Guid,Guide,19792,doc/master/classTMethodArg.html,https://root.cern,https://root.cern/doc/master/classTMethodArg.html,1,['Guid'],['Guide']
Usability,"fied connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datapointer to binary data ; lennumber of bytes in data . Definition at line 1630 of file RWebWindow.cxx. ◆ SendBinary() [2/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . std::string && ; data . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to be std-moved to SubmitData function . Definition at line 1619 of file RWebWindow.cxx. ◆ SetCallBacks(). void RWebWindow::SetCallBacks ; (; WebWindowConnectCallback_t ; conn, . WebWindowDataCallback_t ; data, . WebWindowConnectCallback_t ; disconn = nullptr . ). Set call-backs function for connect, data and disconnect events. ; Definition at line 1772 of file RWebWindow.cxx. ◆ SetClearOnClose(). void RWebWindow::SetClearOnClose ; (; const std::shared_ptr< void > & ; handle = nullptr). Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ; Definition at line 1764 of file RWebWindow.cxx. ◆ SetClientVersion(). void RWebWindow::SetClientVersion ; (; const std::string & ; vers). Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ; Definition at line 1289 of file RWebWindow.cxx. ◆ SetConnectCallBack(). void RWebWindow::SetConnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for new connection. ; Definition at line 1743 of file RWebWindow.cxx. ◆ SetConnLimit(). void RWebWindow::SetConnLimit ; (; unsigned ; lmt = 0). Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ; Definition at line 693 of file RWebWindow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:42565,clear,cleared,42565,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['clear'],['cleared']
Usability,"fied connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datapointer to binary data ; lennumber of bytes in data . Definition at line 1672 of file RWebWindow.cxx. ◆ SendBinary() [2/2]. void RWebWindow::SendBinary ; (; unsigned ; connid, . std::string && ; data . ). Send binary data to specified connection. ; Parameters. connidconnection id, when 0 - data will be send to all connections ; datadata to be std-moved to SubmitData function . Definition at line 1661 of file RWebWindow.cxx. ◆ SetCallBacks(). void RWebWindow::SetCallBacks ; (; WebWindowConnectCallback_t ; conn, . WebWindowDataCallback_t ; data, . WebWindowConnectCallback_t ; disconn = nullptr . ). Set call-backs function for connect, data and disconnect events. ; Definition at line 1814 of file RWebWindow.cxx. ◆ SetClearOnClose(). void RWebWindow::SetClearOnClose ; (; const std::shared_ptr< void > & ; handle = nullptr). Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ; Definition at line 1806 of file RWebWindow.cxx. ◆ SetClientVersion(). void RWebWindow::SetClientVersion ; (; const std::string & ; vers). Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ; Definition at line 1331 of file RWebWindow.cxx. ◆ SetConnectCallBack(). void RWebWindow::SetConnectCallBack ; (; WebWindowConnectCallback_t ; func). Set call-back function for new connection. ; Definition at line 1785 of file RWebWindow.cxx. ◆ SetConnLimit(). void RWebWindow::SetConnLimit ; (; unsigned ; lmt = 0). Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ; Definition at line 694 of file RWebWindow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:41449,clear,cleared,41449,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['clear'],['cleared']
Usability,"fiers:. %txt : to print the text label associated with the slice. %val : to print the numeric value of the slice. %frac : to print the relative fraction of this slice. %perc : to print the % of this slice. mypie->SetLabelFormat(""%txt (%frac)"");; See the macro $ROOTSYS/tutorials/graphics/piechart.C . The picture generated by tutorial macro piechart.C. 3.21 The User Interface for Histograms; The classes T H1 Editor and T H2 Editor provides the user interface for setting histogram’s attributes and rebinning interactively.; 3.21.1 TH1Editor. 3.21.1.1 The Style Tab; 3.21.1.1.1 Title; sets the title of the histogram.; 3.21.1.1.2 Plot; draw a 2D or 3D plot; according to the dimension, different drawing possibilities can be set.; 3.21.1.1.3 Error; add different error bars to the histogram (no errors, simple, etc.).; 3.21.1.1.4 Add; further things which can be added to the histogram (None, simple/smooth line, fill area, etc.); 3.21.1.2 2-D Plot; 3.21.1.2.1 Simple Drawing; draw a simple histogram without errors (= “HIST” draw option). In combination with some other draw options an outer line is drawn on top of the histogram; 3.21.1.2.2 Show markers; draw a marker on to of each bin (=“P” draw option).; 3.21.1.2.3 Draw bar chart; draw a bar chart (=“B” draw option).; 3.21.1.2.4 Bar option; draw a bar chart (=“BAR” draw option); if selected, it will show an additional interface elements for bars: width, offset, percentage and the possibility to draw horizontal bars.; 3.21.1.3 3-D Plot; 3.21.1.3.1 Add; set histogram type Lego-Plot or Surface draw (Lego, Lego1.2, Surf, Surf1…5).; 3.21.1.3.2 Coords; set the coordinate system (Cartesian, Spheric, etc.).; 3.21.1.3.3 Error; same as for 2D plot.; 3.21.1.3.4 Bar; set the bar attributes: width and offset.; 3.21.1.3.5 Horizontal Bar; draw a horizontal bar chart.; 3.21.1.4 The Binning tab; The binning tab has two different layouts. One is for a histogram, which is not drawn from an ntuple. The other one is available for a histogram, which ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:135689,Simpl,Simple,135689,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mTMVA_CNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:InputLayout=1|16|16:Layout=CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:InputLayout=1|16|16:Layout=CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|16|16"" [The Layout of the input]; : Layout: ""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:5473,Learn,LearningRate,5473,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,fig::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 148 of file Config.h. ◆ UseColor(). Bool_t TMVA::Config::UseColor ; (; ); const. inline . Definition at line 59 of file Config.h. ◆ WriteOptionsReference(). Bool_t TMVA::Config::WriteOptionsReference ; (; ); const. inline . Definition at line 65 of file Config.h. Member Data Documentation. ◆ fDrawProgressBar. std::atomic<Bool_t> TMVA::Config::fDrawProgressBar. private . draw progress bar to indicate training evolution ; Definition at line 140 of file Config.h. ◆ fExecutor. Executor TMVA::Config::fExecutor. protected . Definition at line 52 of file Config.h. ◆ fgConfigPtr. std::atomic< TMVA::Config * > TMVA::Config::fgConfigPtr { 0 }. staticprivate . Definition at line 137 of file Config.h. ◆ fIONames. class TMVA::Config::IONames TMVA::Config::fIONames. ◆ fLogger. MsgLogger* TMVA::Config::fLogger. mutableprivate . ! message logger ; Definition at line 145 of file Config.h. ◆ fNWorkers. std::atomic<UInt_t> TMVA::Config::fNWorkers. private . Default number of workers for multi-process jobs. ; Definition at line 141 of file Config.h. ◆ fSilent. std::atomic<Bool_t> TMVA::Config::fSilent. private . no output at all ; Definition at line 143 of file Config.h. ◆ fUseColoredConsole. std::atomic<Bool_t> TMVA::Config::fUseColoredConsole. private . coloured standard output ; Definition at line 142 of file Config.h. ◆ fVariablePlotting. class TMVA::Config::VariablePlotting TMVA::Config::fVariablePlotting. ◆ fWriteOptionsReference. std::atomic<Bool_t> TMVA::Config::fWriteOptionsReference. private . if set true: Configurable objects write file with option reference ; Definition at line 144 of file Config.h. Libraries for TMVA::Config:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Config.h; tmva/tmva/src/Config.cxx. TMVAConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Config.html:8831,Guid,Guide,8831,doc/master/classTMVA_1_1Config.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html,1,['Guid'],['Guide']
Usability,"figurable; AddPreDefVal(const T &)TMVA::Configurable; AddPreDefVal(const TString &optname, const T &)TMVA::Configurable; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AssignOpt(const TString &name, T &valAssign) constTMVA::Configurableprivate; BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString)TMVA::Factoryinline; BookMethodWeightfile(DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile)TMVA::Factoryprivate; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckForUnusedOptions() constTMVA::Configurable; Class()TMVA::Factorystatic; Class_Name()TMVA::Factorystatic; Class_Version()TMVA::Factoryinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Configurable(const TString &theOption="""")TMVA::Configurable; Copy(TObject &named) const overrideTNamedvirtual; CrossValidationTMVA::Factoryfriend; DeclareOptionRef(T &ref, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T &ref, const TString &name, const TString &desc)TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc)TMVA::Configurable; DeclFileName()TMVA::Factoryinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteAllMethods(void)TMVA::Factory; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory-members.html:1308,Clear,Clear,1308,doc/master/classTMVA_1_1Factory-members.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html,1,['Clear'],['Clear']
Usability,"figuration *loopconfig, const TConfiguration *config); 1723 {; 1724 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1725 iter = (char*)iter + config->fOffset;; 1726 end = (char*)end + config->fOffset;; 1727 for(; iter != end; iter = (char*)iter + incr ) {; 1728 T *x = (T*) ((char*) iter);; 1729 buf >> *x;; 1730 }; 1731 return 0;; 1732 }; 1733 ; 1734 template <typename From, typename To>; 1735 struct ConvertBasicType {; 1736 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1737 {; 1738 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1739 From temp;; 1740 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1741 iter = (char*)iter + config->fOffset;; 1742 end = (char*)end + config->fOffset;; 1743 for(; iter != end; iter = (char*)iter + incr ) {; 1744 buf >> temp;; 1745 *(To*)( ((char*)iter) ) = (To)temp;; 1746 }; 1747 return 0;; 1748 }; 1749 };; 1750 ; 1751 template <typename To>; 1752 struct ConvertBasicType<BitsMarker,To> {; 1753 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconfig, const TConfiguration *config); 1754 {; 1755 // Simple conversion from a 'From' on disk to a 'To' in memory.; 1756 UInt_t temp;; 1757 const Int_t incr = ((TVectorLoopConfig*)loopconfig)->fIncrement;; 1758 iter = (char*)iter + config->fOffset;; 1759 end = (char*)end + config->fOffset;; 1760 for(; iter != end; iter = (char*)iter + incr ) {; 1761 buf >> temp;; 1762 ; 1763 if ((temp & kIsReferenced) != 0) {; 1764 HandleReferencedTObject(buf, (char*)iter - config->fOffset, config);; 1765 }; 1766 ; 1767 *(To*)( ((char*)iter) ) = (To)temp;; 1768 }; 1769 return 0;; 1770 }; 1771 };; 1772 ; 1773 template <typename From, typename To>; 1774 struct ConvertBasicType<WithFactorMarker<From>,To> {; 1775 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:73117,Simpl,Simple,73117,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"fil, ifil, dl, il, nullptr, silent);; 1330}; 1331 ; 1332////////////////////////////////////////////////////////////////////////////////; 1333/// we found at least one equivalent.; 1334/// let's force a reload; 1335 ; 1336void TClass::ForceReload (TClass* oldcl); 1337{; 1338 TClass::RemoveClass(oldcl);; 1339 ; 1340 if (oldcl->CanIgnoreTObjectStreamer()) {; 1341 IgnoreTObjectStreamer();; 1342 }; 1343 ; 1344 TVirtualStreamerInfo *info;; 1345 TIter next(oldcl->GetStreamerInfos());; 1346 while ((info = (TVirtualStreamerInfo*)next())) {; 1347 info->Clear(""build"");; 1348 info->SetClass(this);; 1349 if (IsSyntheticPair()) {; 1350 // Some pair's StreamerInfo were inappropriately marked as versioned; 1351 info->SetClassVersion(1);; 1352 // There is already a TStreamerInfo put there by the synthetic; 1353 // creation.; 1354 fStreamerInfo->Add(info);; 1355 } else {; 1356 fStreamerInfo->AddAtAndExpand(info,info->GetClassVersion());; 1357 }; 1358 }; 1359 oldcl->fStreamerInfo->Clear();; 1360 ; 1361 oldcl->ReplaceWith(this);; 1362 delete oldcl;; 1363}; 1364 ; 1365////////////////////////////////////////////////////////////////////////////////; 1366/// Initialize a TClass object. This object contains the full dictionary; 1367/// of a class. It has list to baseclasses, datamembers and methods.; 1368 ; 1369void TClass::Init(const char *name, Version_t cversion,; 1370 const std::type_info *typeinfo, TVirtualIsAProxy *isa,; 1371 const char *dfil, const char *ifil, Int_t dl, Int_t il,; 1372 ClassInfo_t *givenInfo,; 1373 Bool_t silent); 1374{; 1375 if (!gROOT); 1376 ::Fatal(""TClass::TClass"", ""ROOT system not initialized"");; 1377 if (!name || !name[0]) {; 1378 ::Error(""TClass::Init"", ""The name parameter is invalid (null or empty)"");; 1379 MakeZombie();; 1380 return;; 1381 }; 1382 // Always strip the default STL template arguments (from any template argument or the class name); 1383 if (TClassEdit::IsArtificial(name)); 1384 fName = name; // We can assume that the artificial class name is al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:52720,Clear,Clear,52720,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['Clear'],['Clear']
Usability,"fil, ifil, dl, il, nullptr, silent);; 1397}; 1398 ; 1399////////////////////////////////////////////////////////////////////////////////; 1400/// we found at least one equivalent.; 1401/// let's force a reload; 1402 ; 1403void TClass::ForceReload (TClass* oldcl); 1404{; 1405 TClass::RemoveClass(oldcl);; 1406 ; 1407 if (oldcl->CanIgnoreTObjectStreamer()) {; 1408 IgnoreTObjectStreamer();; 1409 }; 1410 ; 1411 TVirtualStreamerInfo *info;; 1412 TIter next(oldcl->GetStreamerInfos());; 1413 while ((info = (TVirtualStreamerInfo*)next())) {; 1414 info->Clear(""build"");; 1415 info->SetClass(this);; 1416 if (IsSyntheticPair()) {; 1417 // Some pair's StreamerInfo were inappropriately marked as versioned; 1418 info->SetClassVersion(1);; 1419 // There is already a TStreamerInfo put there by the synthetic; 1420 // creation.; 1421 fStreamerInfo->Add(info);; 1422 } else {; 1423 fStreamerInfo->AddAtAndExpand(info,info->GetClassVersion());; 1424 }; 1425 }; 1426 oldcl->fStreamerInfo->Clear();; 1427 ; 1428 oldcl->ReplaceWith(this);; 1429 delete oldcl;; 1430}; 1431 ; 1432////////////////////////////////////////////////////////////////////////////////; 1433/// Initialize a TClass object. This object contains the full dictionary; 1434/// of a class. It has list to baseclasses, datamembers and methods.; 1435 ; 1436void TClass::Init(const char *name, Version_t cversion,; 1437 const std::type_info *typeinfo, TVirtualIsAProxy *isa,; 1438 const char *dfil, const char *ifil, Int_t dl, Int_t il,; 1439 ClassInfo_t *givenInfo,; 1440 Bool_t silent); 1441{; 1442 if (!gROOT); 1443 ::Fatal(""TClass::TClass"", ""ROOT system not initialized"");; 1444 if (!name || !name[0]) {; 1445 ::Error(""TClass::Init"", ""The name parameter is invalid (null or empty)"");; 1446 MakeZombie();; 1447 return;; 1448 }; 1449 // Always strip the default STL template arguments (from any template argument or the class name); 1450 if (TClassEdit::IsArtificial(name)); 1451 fName = name; // We can assume that the artificial class name is al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:55471,Clear,Clear,55471,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['Clear'],['Clear']
Usability,file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate the main features of RooFit. Their names are related to the aspect which is treated in the code ;  RooStats TutorialsThese tutorials illustrate the main features of RooStats ;  Spectrum tutorialsExamples showing the TSpectrum and TSpectrumPainter usage ;  TSPlot tutorialsThis tutorial illustrates the use of class TSPlot ;  SQL tutorialsExamples showing the SQL classes ;  Thread tutorialsThread examples ;  TMVA tutorialsExample code which illustrates how to use the TMVA toolkit ;  Tree tutorialsExample code which illustrates how to use ROOT trees and ntuples ;  TUnfold tutorialsTest programs for the classes TUnfold and related ;  Unuran tutorialsExamples showing unuran capabilities ;  ROOT 7 tutorialsVarious examples showing the ROOT 7 interface ;  VecOps tutorialsThese examples show the functionalities of the VecOps utilities ;  XML tutorialsXML examples ;  R Interface for Statistical Computing. ROOT 6.16/01 - Reference Guide Generated on Sun Dec 19 2021 22:33:51 (GVA Time) using Doxygen 1.9.3 (234637167bd5d39d32bf51f755d58253441f123a). ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/modules.html:13018,Guid,Guide,13018,doc/v616/modules.html,https://root.cern,https://root.cern/doc/v616/modules.html,1,['Guid'],['Guide']
Usability,file NeuralNet.h. ◆ endTestCycle(). virtual void TMVA::DNN::Settings::endTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 805 of file NeuralNet.h. ◆ endTrainCycle(). virtual void TMVA::DNN::Settings::endTrainCycle ; (; double ; ). inlinevirtual . callback for monitoring and logging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 788 of file NeuralNet.h. ◆ exists(). bool TMVA::DNN::Settings::exists ; (; std::string ; histoName). inline . for monitoring ; Definition at line 825 of file NeuralNet.h. ◆ factorWeightDecay(). double TMVA::DNN::Settings::factorWeightDecay ; (; ); const. inline . get the weight-decay factor ; Definition at line 769 of file NeuralNet.h. ◆ hasConverged(). bool TMVA::DNN::Settings::hasConverged ; (; double ; testError). virtual . has this training converged already? ; check for convergence; Definition at line 485 of file NeuralNet.cxx. ◆ learningRate(). double TMVA::DNN::Settings::learningRate ; (; ); const. inline . get the learning rate ; Definition at line 771 of file NeuralNet.h. ◆ maxConvergenceCount(). size_t TMVA::DNN::Settings::maxConvergenceCount ; (; ); const. inline . returns the max convergence count so far ; Definition at line 828 of file NeuralNet.h. ◆ minError(). size_t TMVA::DNN::Settings::minError ; (; ); const. inline . returns the smallest error so far ; Definition at line 829 of file NeuralNet.h. ◆ minimizerType(). MinimizerType TMVA::DNN::Settings::minimizerType ; (; ); const. inline . which minimizer shall be used (e.g. SGD) ; Definition at line 774 of file NeuralNet.h. ◆ momentum(). double TMVA::DNN::Settings::momentum ; (; ); const. inline . get the momentum (e.g. for SGD) ; Definition at line 772 of file NeuralNet.h. ◆ pads(). void TMVA::DNN::Settings::pads ; (; int ; numPads). inline . preparation for monitoring ; Definition at line 818 of file NeuralNet.h. ◆ plot(). void TMVA::DNN::Settings::plot ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:9000,learn,learningRate,9000,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['learn'],['learningRate']
Usability,"file RResultMap.hxx. ◆ ROOT::Detail::RDF::GetMergeableValue. template<typename T > . std::unique_ptr< ROOT::Detail::RDF::RMergeableVariations< T > > ROOT::Detail::RDF::GetMergeableValue ; (; RResultMap< T > & ; rmap). friend . ◆ ROOT::Internal::RDF::CloneResultAndAction. template<typename T > . RResultMap ROOT::Internal::RDF::CloneResultAndAction ; (; const RResultMap< T > & ; inmap). friend . ◆ ROOT::Internal::RDF::MakeResultMap. template<typename T > . RResultMap ROOT::Internal::RDF::MakeResultMap ; (; std::shared_ptr< T > ; nominalResult, . std::vector< std::shared_ptr< T > > && ; variedResults, . std::vector< std::string > && ; keys, . ROOT::Detail::RDF::RLoopManager & ; lm, . std::shared_ptr< ROOT::Internal::RDF::RActionBase > ; nominalAction, . std::shared_ptr< ROOT::Internal::RDF::RActionBase > ; variedAction . ). friend . Member Data Documentation. ◆ fKeys. template<typename T > . std::vector<std::string> ROOT::RDF::Experimental::RResultMap< T >::fKeys. private . Definition at line 100 of file RResultMap.hxx. ◆ fLoopManager. template<typename T > . ROOT::Detail::RDF::RLoopManager* ROOT::RDF::Experimental::RResultMap< T >::fLoopManager. private . Definition at line 102 of file RResultMap.hxx. ◆ fMap. template<typename T > . std::unordered_map<std::string, std::shared_ptr<T> > ROOT::RDF::Experimental::RResultMap< T >::fMap. private . Definition at line 101 of file RResultMap.hxx. ◆ fNominalAction. template<typename T > . std::shared_ptr<ROOT::Internal::RDF::RActionBase> ROOT::RDF::Experimental::RResultMap< T >::fNominalAction. private . Definition at line 103 of file RResultMap.hxx. ◆ fVariedAction. template<typename T > . std::shared_ptr<ROOT::Internal::RDF::RActionBase> ROOT::RDF::Experimental::RResultMap< T >::fVariedAction. private . Definition at line 104 of file RResultMap.hxx. tree/dataframe/inc/ROOT/RDF/RResultMap.hxx. ROOTRDFExperimentalRResultMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RResultMap.html:6660,Guid,Guide,6660,doc/master/classROOT_1_1RDF_1_1Experimental_1_1RResultMap.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RResultMap.html,1,['Guid'],['Guide']
Usability,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 513 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1107 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 482 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:23318,simpl,simpler,23318,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['simpl'],['simpler']
Usability,"file RWebWindow.hxx. Constructor & Destructor Documentation. ◆ RWebWindow(). RWebWindow::RWebWindow ; (; ). RWebWindow constructor Should be defined here because of std::unique_ptr<RWebWindowWSHandler> ; Definition at line 76 of file RWebWindow.cxx. ◆ ~RWebWindow(). RWebWindow::~RWebWindow ; (; ). RWebWindow destructor Closes all connections and remove window from manager. ; Definition at line 85 of file RWebWindow.cxx. Member Function Documentation. ◆ _CanTrustIn(). bool RWebWindow::_CanTrustIn ; (; std::shared_ptr< WebConn > & ; conn, . const std::string & ; hash, . const std::string & ; ntry, . bool ; remote, . bool ; test_first_time . ). private . Check if provided hash, ntry parameters from the connection request could be accepted. ; Parameters. hash- provided hash value which should match with HMAC hash for generated before connection key ; ntry- connection attempt number provided together with request, must come in increasing order ; remote- boolean flag indicating if request comming from remote (via real http), for local displays like Qt5 or CEF simpler connection rules are applied ; test_first_time- true if hash/ntry tested for the first time, false appears only with websocket when connection accepted by server . Definition at line 514 of file RWebWindow.cxx. ◆ _MakeSendHeader(). std::string RWebWindow::_MakeSendHeader ; (; std::shared_ptr< WebConn > & ; conn, . bool ; txt, . const std::string & ; data, . int ; chid . ). private . Internal method to prepare text part of send data Should be called under locked connection mutex. ; Definition at line 1140 of file RWebWindow.cxx. ◆ AddDisplayHandle(). unsigned RWebWindow::AddDisplayHandle ; (; bool ; headless_mode, . const std::string & ; key, . std::unique_ptr< RWebDisplayHandle > & ; handle . ). private . Add display handle and associated key Key is large random string generated when starting new window When client is connected, key should be supplied to correctly identify it. ; Definition at line 483 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:22921,simpl,simpler,22921,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['simpl'],['simpler']
Usability,file RichardsonDerivator.h. ◆ operator()(). double ROOT::Math::RichardsonDerivator::operator() ; (; double ; x). inline . Definition at line 117 of file RichardsonDerivator.h. ◆ operator=(). RichardsonDerivator & ROOT::Math::RichardsonDerivator::operator= ; (; const RichardsonDerivator & ; rhs). Assignment operator. ; Definition at line 60 of file RichardsonDerivator.cxx. ◆ SetFunction(). void ROOT::Math::RichardsonDerivator::SetFunction ; (; const IGenFunction & ; f). Set function for derivative calculation (copy the function if option has been enabled in the constructor) ; @param f Function to be differentiated ; Definition at line 71 of file RichardsonDerivator.cxx. ◆ SetStepSize(). void ROOT::Math::RichardsonDerivator::SetStepSize ; (; double ; h). inline . Set step size for derivative calculation. ; @param h step size for calculation ; Definition at line 230 of file RichardsonDerivator.h. Member Data Documentation. ◆ fFunction. const IGenFunction* ROOT::Math::RichardsonDerivator::fFunction. protected . pointer to function ; Definition at line 237 of file RichardsonDerivator.h. ◆ fFunctionCopied. bool ROOT::Math::RichardsonDerivator::fFunctionCopied. protected . flag to control if function is copied in the class ; Definition at line 234 of file RichardsonDerivator.h. ◆ fLastError. double ROOT::Math::RichardsonDerivator::fLastError. protected . error estimate of last derivative calculation ; Definition at line 236 of file RichardsonDerivator.h. ◆ fStepSize. double ROOT::Math::RichardsonDerivator::fStepSize. protected . step size used for derivative calculation ; Definition at line 235 of file RichardsonDerivator.h. Libraries for ROOT::Math::RichardsonDerivator:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/RichardsonDerivator.h; math/mathcore/src/RichardsonDerivator.cxx. ROOTMathRichardsonDerivator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html:13316,Guid,Guide,13316,doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,1,['Guid'],['Guide']
Usability,"file RooTreeDataStore.cxx. ◆ attachBuffers(). void RooTreeDataStore::attachBuffers ; (; const RooArgSet & ; extObs). overridevirtual . Implements RooAbsDataStore.; Definition at line 1036 of file RooTreeDataStore.cxx. ◆ attachCache(). void RooTreeDataStore::attachCache ; (; const RooAbsArg * ; newOwner, . const RooArgSet & ; cachedVars . ). overrideprivatevirtual . Initialize cache of dataset: attach variables of cache ArgSet to the corresponding TTree branches. ; Implements RooAbsDataStore.; Definition at line 229 of file RooTreeDataStore.cxx. ◆ cacheArgs(). void RooTreeDataStore::cacheArgs ; (; const RooAbsArg * ; owner, . RooArgSet & ; newVarSet, . const RooArgSet * ; nset = nullptr, . bool ; skipZeroWeights = false . ). overridevirtual . Cache given RooAbsArgs with this tree: The tree is given direct write access of the args internal cache the args values is pre-calculated for all data points in this data collection. ; Upon a get() call, the internal cache of 'newVar' will be loaded with the precalculated value and it's dirty flag will be cleared. ; Implements RooAbsDataStore.; Definition at line 950 of file RooTreeDataStore.cxx. ◆ cacheOwner(). const RooAbsArg * RooTreeDataStore::cacheOwner ; (; ). inlineoverridevirtual . Implements RooAbsDataStore.; Definition at line 121 of file RooTreeDataStore.h. ◆ changeObservableName(). bool RooTreeDataStore::changeObservableName ; (; const char * ; from, . const char * ; to . ). overridevirtual . Change name of internal observable named 'from' into 'to'. ; Implements RooAbsDataStore.; Definition at line 712 of file RooTreeDataStore.cxx. ◆ checkInit(). void RooTreeDataStore::checkInit ; (; ); const. overridevirtual . Reimplemented from RooAbsDataStore.; Definition at line 1080 of file RooTreeDataStore.cxx. ◆ Class(). static TClass * RooTreeDataStore::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooTreeDataStore::Class_Name ; (; ). static . ReturnsName of this class . ◆ Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:28357,clear,cleared,28357,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['clear'],['cleared']
Usability,"file RooVectorDataStore.cxx. ◆ weight() [1/3]. double RooVectorDataStore::weight ; (; ); const. inlineoverridevirtual . Return the weight of the last-retrieved data point. ; Implements RooAbsDataStore.; Definition at line 111 of file RooVectorDataStore.h. ◆ weight() [2/3]. virtual double RooAbsDataStore::weight ; (; ); const. virtual . Implements RooAbsDataStore. ◆ weight() [3/3]. double RooAbsDataStore::weight ; (; Int_t ; index); const. inline . Definition at line 66 of file RooAbsDataStore.h. ◆ weightError() [1/2]. void RooVectorDataStore::weightError ; (; double & ; lo, . double & ; hi, . RooAbsData::ErrorType ; etype = RooAbsData::Poisson . ); const. overridevirtual . Implements RooAbsDataStore.; Definition at line 425 of file RooVectorDataStore.cxx. ◆ weightError() [2/2]. double RooVectorDataStore::weightError ; (; RooAbsData::ErrorType ; etype = RooAbsData::Poisson); const. overridevirtual . Return the error of the current weight. ; Parameters. [in]etypeSwitch between simple Poisson or sum-of-weights statistics . Implements RooAbsDataStore.; Definition at line 390 of file RooVectorDataStore.cxx. ◆ weightVar(). RooRealVar * RooVectorDataStore::weightVar ; (; const RooArgSet & ; allVars, . const char * ; wgtName . ). private . Utility function for constructors Return pointer to weight variable if it is defined. ; Definition at line 125 of file RooVectorDataStore.cxx. Friends And Related Symbol Documentation. ◆ RooAbsCategory. friend class RooAbsCategory. friend . Definition at line 547 of file RooVectorDataStore.h. ◆ RooAbsReal. friend class RooAbsReal. friend . Definition at line 546 of file RooVectorDataStore.h. ◆ RooRealVar. friend class RooRealVar. friend . Definition at line 548 of file RooVectorDataStore.h. Member Data Documentation. ◆ _cache. RooVectorDataStore* RooVectorDataStore::_cache = nullptr. private . ! Optimization cache ; Definition at line 586 of file RooVectorDataStore.h. ◆ _cacheOwner. RooAbsArg* RooVectorDataStore::_cacheOwner = nullptr. pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:38936,simpl,simple,38936,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['simpl'],['simple']
Usability,file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file SimpleInterval.h. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 93 of file SimpleInterval.cxx. ◆ LowerLimit(). virtual double RooStats::SimpleInterval::LowerLimit ; (; ). inlinevirtual . return the interval lower limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterval.; Definition at line 40 of file SimpleInterval.h. ◆ Streamer(). void RooStats::SimpleInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::SimpleInterval::StreamerNVirtual ; (; TB,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:15988,Simpl,SimpleInterval,15988,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,file TClassMenuItem.h. ◆ SetToggle(). virtual void TClassMenuItem::SetToggle ; (; Bool_t ; toggle = kTRUE). inlinevirtual . Definition at line 75 of file TClassMenuItem.h. ◆ SetType(). virtual void TClassMenuItem::SetType ; (; Int_t ; type). inlinevirtual . Definition at line 72 of file TClassMenuItem.h. ◆ Streamer(). void TClassMenuItem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TClassMenuItem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TClassMenuItem.h. Member Data Documentation. ◆ fArgs. TString TClassMenuItem::fArgs. private . Definition at line 47 of file TClassMenuItem.h. ◆ fCalledObject. TObject* TClassMenuItem::fCalledObject. private . Definition at line 45 of file TClassMenuItem.h. ◆ fFunctionName. TString TClassMenuItem::fFunctionName. private . Definition at line 46 of file TClassMenuItem.h. ◆ fParent. TClass* TClassMenuItem::fParent. private . Definition at line 49 of file TClassMenuItem.h. ◆ fSelf. Bool_t TClassMenuItem::fSelf. private . Definition at line 42 of file TClassMenuItem.h. ◆ fSelfObjectPos. Int_t TClassMenuItem::fSelfObjectPos. private . Definition at line 41 of file TClassMenuItem.h. ◆ fSubMenu. TList* TClassMenuItem::fSubMenu. private . Definition at line 48 of file TClassMenuItem.h. ◆ fTitle. TString TClassMenuItem::fTitle. private . Definition at line 44 of file TClassMenuItem.h. ◆ fToggle. Bool_t TClassMenuItem::fToggle. private . Definition at line 43 of file TClassMenuItem.h. ◆ fType. EClassMenuItemType TClassMenuItem::fType. private . Definition at line 40 of file TClassMenuItem.h. Libraries for TClassMenuItem:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TClassMenuItem.h; core/gui/src/TClassMenuItem.cxx. TClassMenuItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassMenuItem.html:19166,Guid,Guide,19166,doc/master/classTClassMenuItem.html,https://root.cern,https://root.cern/doc/master/classTClassMenuItem.html,1,['Guid'],['Guide']
Usability,"file TDirectory.cxx. ◆ Cd1(). Bool_t TDirectory::Cd1 ; (; const char * ; apath). staticprotected . Change current directory to ""path"". ; The path syntax is: file.root:/dir1/dir2 where file.root is the file and /dir1/dir2 the desired subdirectory in the file. Relative syntax is relative to the current directory gDirectory, e.g.: ../aa.; Returns kFALSE in case path does not exist. ; Definition at line 617 of file TDirectory.cxx. ◆ Class(). static TClass * TDirectory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDirectory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDirectory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 308 of file TDirectory.h. ◆ CleanTargets(). void TDirectory::CleanTargets ; (; ). protected . Clean the pointers to this object (gDirectory, TContext, etc.). ; Definition at line 264 of file TDirectory.cxx. ◆ Clear(). void TDirectory::Clear ; (; Option_t * ; option = """"). overridevirtual . Delete all objects from a Directory list. ; Reimplemented from TObject.; Definition at line 634 of file TDirectory.cxx. ◆ CloneObject(). TObject * TDirectory::CloneObject ; (; const TObject * ; obj, . Bool_t ; autoadd = kTRUE . ). virtual . Clone an object. ; This function is called when the directory is not a TDirectoryFile. This version has to load the I/O package, hence via Cling.; If autoadd is true and if the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirector. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented in TDirectoryFile.; Definition at line 364 of file TDirectory.cxx. ◆ Close(). void TDirectory::Close ; (; Option_t * ; option = """"). virtual . Delete all objects from memory and directory structure itself. ; if option is ""slow"", iterate through the containers in a way to can handle ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:27514,Clear,Clear,27514,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,['Clear'],['Clear']
Usability,"file TEveCaloData.cxx. ◆ SetSliceTransparency(). void TEveCaloData::SetSliceTransparency ; (; Int_t ; slice, . Char_t ; t . ). Set transparency for given slice. ; Definition at line 346 of file TEveCaloData.cxx. ◆ SetWrapTwoPi(). void TEveCaloData::SetWrapTwoPi ; (; Bool_t ; w). inline . Definition at line 228 of file TEveCaloData.h. ◆ Streamer(). void TEveCaloData::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement.; Reimplemented in TEveCaloDataVec, and TEveCaloDataHist. ◆ StreamerNVirtual(). void TEveCaloData::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 233 of file TEveCaloData.h. ◆ UnHighlighted(). void TEveCaloData::UnHighlighted ; (; ). overridevirtual . Virtual method TEveElement::UnHighlighted. ; Reimplemented from TEveElement.; Definition at line 142 of file TEveCaloData.cxx. ◆ UnSelected(). void TEveCaloData::UnSelected ; (; ). overridevirtual . Virtual method TEveElement::UnSelect. ; Clear selected towers when deselected. ; Reimplemented from TEveElement.; Definition at line 134 of file TEveCaloData.cxx. Member Data Documentation. ◆ fCellsHighlighted. vCellId_t TEveCaloData::fCellsHighlighted. protected . Definition at line 171 of file TEveCaloData.h. ◆ fCellsSelected. vCellId_t TEveCaloData::fCellsSelected. protected . Definition at line 170 of file TEveCaloData.h. ◆ fEps. Float_t TEveCaloData::fEps. protected . Definition at line 168 of file TEveCaloData.h. ◆ fEtaAxis. TAxis* TEveCaloData::fEtaAxis. protected . Definition at line 160 of file TEveCaloData.h. ◆ fMaxValE. Float_t TEveCaloData::fMaxValE. protected . Definition at line 166 of file TEveCaloData.h. ◆ fMaxValEt. Float_t TEveCaloData::fMaxValEt. protected . Definition at line 165 of file TEveCaloData.h. ◆ fPhiAxis. TAxis* TEveCaloData::fPhiAxis. protected . Definition at line 161 of file TEveCaloData.h. ◆ fSliceInfos. vSliceInfo_t TEveCaloData::fSliceInfos. protected . Definition at line 158 of file TEveCaloData.h. ◆ fWrap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloData.html:42094,Clear,Clear,42094,doc/master/classTEveCaloData.html,https://root.cern,https://root.cern/doc/master/classTEveCaloData.html,1,['Clear'],['Clear']
Usability,file TEvePolygonSetProjected.cxx. ◆ Streamer(). void TEvePolygonSetProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEvePolygonSetProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TEvePolygonSetProjected.h. ◆ UpdateProjection(). void TEvePolygonSetProjected::UpdateProjection ; (; ). overridevirtual . This is virtual method from base-class TEveProjected. ; Implements TEveProjected.; Definition at line 108 of file TEvePolygonSetProjected.cxx. Friends And Related Symbol Documentation. ◆ TEvePolygonSetProjectedEditor. friend class TEvePolygonSetProjectedEditor. friend . Definition at line 25 of file TEvePolygonSetProjected.h. ◆ TEvePolygonSetProjectedGL. friend class TEvePolygonSetProjectedGL. friend . Definition at line 24 of file TEvePolygonSetProjected.h. Member Data Documentation. ◆ fBuff. TBuffer3D* TEvePolygonSetProjected::fBuff. private . Definition at line 57 of file TEvePolygonSetProjected.h. ◆ fNPnts. Int_t TEvePolygonSetProjected::fNPnts. protected . Definition at line 71 of file TEvePolygonSetProjected.h. ◆ fPnts. TEveVector* TEvePolygonSetProjected::fPnts. protected . Definition at line 72 of file TEvePolygonSetProjected.h. ◆ fPols. vpPolygon_t TEvePolygonSetProjected::fPols. protected . Definition at line 67 of file TEvePolygonSetProjected.h. ◆ fPolsBP. vpPolygon_t TEvePolygonSetProjected::fPolsBP. protected . Definition at line 69 of file TEvePolygonSetProjected.h. ◆ fPolsBS. vpPolygon_t TEvePolygonSetProjected::fPolsBS. protected . Definition at line 68 of file TEvePolygonSetProjected.h. Libraries for TEvePolygonSetProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEvePolygonSetProjected.h; graf3d/eve/src/TEvePolygonSetProjected.cxx. TEvePolygonSetProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePolygonSetProjected.html:47649,Guid,Guide,47649,doc/master/classTEvePolygonSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html,1,['Guid'],['Guide']
Usability,file TFeldmanCousins.h. ◆ SetNobserved(). void TFeldmanCousins::SetNobserved ; (; Double_t ; NObs). inline . Definition at line 100 of file TFeldmanCousins.h. ◆ Streamer(). void TFeldmanCousins::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFeldmanCousins::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TFeldmanCousins.h. Member Data Documentation. ◆ fCL. Double_t TFeldmanCousins::fCL. protected . Definition at line 49 of file TFeldmanCousins.h. ◆ fLowerLimit. Double_t TFeldmanCousins::fLowerLimit. protected . Definition at line 51 of file TFeldmanCousins.h. ◆ fMuMax. Double_t TFeldmanCousins::fMuMax. protected . Definition at line 55 of file TFeldmanCousins.h. ◆ fMuMin. Double_t TFeldmanCousins::fMuMin. protected . Definition at line 54 of file TFeldmanCousins.h. ◆ fMuStep. Double_t TFeldmanCousins::fMuStep. protected . Definition at line 56 of file TFeldmanCousins.h. ◆ fNbackground. Double_t TFeldmanCousins::fNbackground. protected . Definition at line 53 of file TFeldmanCousins.h. ◆ fNMax. Int_t TFeldmanCousins::fNMax. protected . Definition at line 58 of file TFeldmanCousins.h. ◆ fNMuStep. Int_t TFeldmanCousins::fNMuStep. protected . Definition at line 57 of file TFeldmanCousins.h. ◆ fNobserved. Double_t TFeldmanCousins::fNobserved. protected . Definition at line 52 of file TFeldmanCousins.h. ◆ fQUICK. Int_t TFeldmanCousins::fQUICK. protected . Definition at line 59 of file TFeldmanCousins.h. ◆ fUpperLimit. Double_t TFeldmanCousins::fUpperLimit. protected . Definition at line 50 of file TFeldmanCousins.h. Libraries for TFeldmanCousins:. [legend]; The documentation for this class was generated from the following files:; math/physics/inc/TFeldmanCousins.h; math/physics/src/TFeldmanCousins.cxx. TFeldmanCousins. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFeldmanCousins.html:19752,Guid,Guide,19752,doc/master/classTFeldmanCousins.html,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html,1,['Guid'],['Guide']
Usability,"file TGeoElement.h. ◆ ReadDecay(). TGeoDecayChannel * TGeoDecayChannel::ReadDecay ; (; const char * ; record). static . Create element from line record. ; Definition at line 782 of file TGeoElement.cxx. ◆ SavePrimitive(). void TGeoDecayChannel::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive for decays. ; Reimplemented from TObject.; Definition at line 795 of file TGeoElement.cxx. ◆ SetDaughter(). void TGeoDecayChannel::SetDaughter ; (; TGeoElementRN * ; daughter). inline . Definition at line 270 of file TGeoElement.h. ◆ SetParent(). void TGeoDecayChannel::SetParent ; (; TGeoElementRN * ; parent). inline . Definition at line 269 of file TGeoElement.h. ◆ Streamer(). void TGeoDecayChannel::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoDecayChannel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 277 of file TGeoElement.h. Member Data Documentation. ◆ fBranchingRatio. Double_t TGeoDecayChannel::fBranchingRatio. private . Definition at line 211 of file TGeoElement.h. ◆ fDaughter. TGeoElementRN* TGeoDecayChannel::fDaughter. private . Definition at line 214 of file TGeoElement.h. ◆ fDecay. UInt_t TGeoDecayChannel::fDecay. private . Definition at line 209 of file TGeoElement.h. ◆ fDiso. Int_t TGeoDecayChannel::fDiso. private . Definition at line 210 of file TGeoElement.h. ◆ fParent. TGeoElementRN* TGeoDecayChannel::fParent. private . Definition at line 213 of file TGeoElement.h. ◆ fQvalue. Double_t TGeoDecayChannel::fQvalue. private . Definition at line 212 of file TGeoElement.h. Libraries for TGeoDecayChannel:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoElement.h; geom/geom/src/TGeoElement.cxx. TGeoDecayChannel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoDecayChannel.html:17150,Guid,Guide,17150,doc/master/classTGeoDecayChannel.html,https://root.cern,https://root.cern/doc/master/classTGeoDecayChannel.html,1,['Guid'],['Guide']
Usability,"file TGeoPolygon.cxx. ◆ SetConvex(). void TGeoPolygon::SetConvex ; (; Bool_t ; flag = kTRUE). inline . Definition at line 63 of file TGeoPolygon.h. ◆ SetNextIndex(). void TGeoPolygon::SetNextIndex ; (; Int_t ; index = -1). Sets the next polygone index. ; If index<0 sets all indices consecutive in increasing order. ; Definition at line 440 of file TGeoPolygon.cxx. ◆ SetXY(). void TGeoPolygon::SetXY ; (; Double_t * ; x, . Double_t * ; y . ). Set X/Y array pointer for the polygon and daughters. ; Definition at line 469 of file TGeoPolygon.cxx. ◆ Streamer(). void TGeoPolygon::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoPolygon::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file TGeoPolygon.h. Member Data Documentation. ◆ fDaughters. TObjArray* TGeoPolygon::fDaughters {nullptr}. protected . pointer to list of current Y coordinates of vertices ; Definition at line 31 of file TGeoPolygon.h. ◆ fInd. Int_t* TGeoPolygon::fInd {nullptr}. protected . Definition at line 27 of file TGeoPolygon.h. ◆ fIndc. Int_t* TGeoPolygon::fIndc {nullptr}. protected . Definition at line 28 of file TGeoPolygon.h. ◆ fNconvex. Int_t TGeoPolygon::fNconvex {0}. protected . Definition at line 26 of file TGeoPolygon.h. ◆ fNvert. Int_t TGeoPolygon::fNvert {0}. protected . Definition at line 25 of file TGeoPolygon.h. ◆ fX. Double_t* TGeoPolygon::fX {nullptr}. protected . Definition at line 29 of file TGeoPolygon.h. ◆ fY. Double_t* TGeoPolygon::fY {nullptr}. protected . pointer to list of current X coordinates of vertices ; Definition at line 30 of file TGeoPolygon.h. Libraries for TGeoPolygon:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPolygon.h; geom/geom/src/TGeoPolygon.cxx. TGeoPolygon. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPolygon.html:20599,Guid,Guide,20599,doc/master/classTGeoPolygon.html,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html,1,['Guid'],['Guide']
Usability,file TH1Editor.h. ◆ fDim. TGRadioButton* TH1Editor::fDim. protected . 2D-Plot RadioButton ; Definition at line 42 of file TH1Editor.h. ◆ fDim0. TGRadioButton* TH1Editor::fDim0. protected . 3D-Plot RadioButton ; Definition at line 43 of file TH1Editor.h. ◆ fDim0lh. TGLayoutHints* TH1Editor::fDim0lh. protected . layout hints for 3D-Plot RadioButton ; Definition at line 45 of file TH1Editor.h. ◆ fDimGroup. TGHButtonGroup* TH1Editor::fDimGroup. protected . Radiobuttongroup to change 2D <-> 3D-Plot. ; Definition at line 41 of file TH1Editor.h. ◆ fDimlh. TGLayoutHints* TH1Editor::fDimlh. protected . layout hints for 2D-Plot RadioButton ; Definition at line 44 of file TH1Editor.h. ◆ fErrorCombo. TGComboBox* TH1Editor::fErrorCombo. protected . Error combo box. ; Definition at line 48 of file TH1Editor.h. ◆ fHist. TH1* TH1Editor::fHist. protected . histogram object ; Definition at line 36 of file TH1Editor.h. ◆ fHistOnOff. TGCheckButton* TH1Editor::fHistOnOff. protected . Draw a simple histogram with default options. ; Definition at line 49 of file TH1Editor.h. ◆ fMake. Bool_t TH1Editor::fMake. private . Definition at line 95 of file TH1Editor.h. ◆ fMakeB. Bool_t TH1Editor::fMakeB. private . Definition at line 96 of file TH1Editor.h. ◆ fMakeHBar. TGCheckButton* TH1Editor::fMakeHBar. protected . Draw Horizontal Bar Chart. ; Definition at line 54 of file TH1Editor.h. ◆ fOffsetNumberEntry. TGNumberEntryField* TH1Editor::fOffsetNumberEntry. protected . Shows the offset to the origin of the histogram. ; Definition at line 76 of file TH1Editor.h. ◆ fOldOffset. Double_t TH1Editor::fOldOffset. private . Definition at line 114 of file TH1Editor.h. ◆ fP1NDCold. Float_t TH1Editor::fP1NDCold[3]. private . Definition at line 101 of file TH1Editor.h. ◆ fP1old. Float_t TH1Editor::fP1old[3]. private . Definition at line 105 of file TH1Editor.h. ◆ fP2NDCold. Float_t TH1Editor::fP2NDCold[3]. private . Definition at line 102 of file TH1Editor.h. ◆ fP2old. Float_t TH1Editor::fP2old[3]. private ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:59226,simpl,simple,59226,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['simpl'],['simple']
Usability,"file TStructViewerGUI.cxx. ◆ GetNodePtr(). TStructNode * TStructViewerGUI::GetNodePtr ; (; ); const. Returns top node pointer. ; Definition at line 622 of file TStructViewerGUI.cxx. ◆ GLWidgetProcessedEventSlot(). void TStructViewerGUI::GLWidgetProcessedEventSlot ; (; Event_t * ; event). Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. ; Definition at line 630 of file TStructViewerGUI.cxx. ◆ LevelDistValueSetSlot(). void TStructViewerGUI::LevelDistValueSetSlot ; (; Long_t ; dist). Emmited when user changes distance between levels. ; Definition at line 654 of file TStructViewerGUI.cxx. ◆ MouseOverSlot(). void TStructViewerGUI::MouseOverSlot ; (; TGLPhysicalShape * ; shape). MouseOver slot. ; Activated when user out mouse over object on scene. Sets ToolTip and updates labels ; Definition at line 665 of file TStructViewerGUI.cxx. ◆ RedoButtonSlot(). void TStructViewerGUI::RedoButtonSlot ; (; ). Activated when user click Redo button. Repeat last Undo action. ; Definition at line 691 of file TStructViewerGUI.cxx. ◆ ResetButtonSlot(). void TStructViewerGUI::ResetButtonSlot ; (; ). Resets camera. ; Definition at line 707 of file TStructViewerGUI.cxx. ◆ Scale(). void TStructViewerGUI::Scale ; (; TStructNode * ; parent). private . Recursive method to scaling all modes on scene. ; We have to scale nodes to get real ratio between nodes. Uses fMaxRatio. ; Definition at line 717 of file TStructViewerGUI.cxx. ◆ ScaleByChangedSlot(). void TStructViewerGUI::ScaleByChangedSlot ; (; ). Activated when user press radio button. ; Definition at line 889 of file TStructViewerGUI.cxx. ◆ SetLinksVisibility(). void TStructViewerGUI::SetLinksVisibility ; (; Bool_t ; val). Sets links visibility to ""visible"". ; Definition at line 767 of file TStructViewerGUI.cxx. ◆ SetNodePtr(). void TStructViewerGUI::SetNodePtr ; (; TStructNode * ; val). Sets top node pointer and updates view. ; Definition at line 758 of file TStructViewerGUI.cxx. ◆ SetPointerButtonS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:44137,Undo,Undo,44137,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Undo'],['Undo']
Usability,file TSynapse.h. ◆ IsA(). TClass * TSynapse::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 42 of file TSynapse.h. ◆ SetDEDw(). void TSynapse::SetDEDw ; (; Double_t ; in). Sets the derivative of the total error wrt the synapse weight. ; Definition at line 110 of file TSynapse.cxx. ◆ SetPost(). void TSynapse::SetPost ; (; TNeuron * ; post). Sets the post-neuron. ; Definition at line 66 of file TSynapse.cxx. ◆ SetPre(). void TSynapse::SetPre ; (; TNeuron * ; pre). Sets the pre-neuron. ; Definition at line 53 of file TSynapse.cxx. ◆ SetWeight(). void TSynapse::SetWeight ; (; Double_t ; w). Sets the weight of the synapse. ; This weight is the multiplying factor applied on the output of a neuron in the linear combination given as input of another neuron. ; Definition at line 102 of file TSynapse.cxx. ◆ Streamer(). void TSynapse::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSynapse::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file TSynapse.h. Member Data Documentation. ◆ fDEDw. Double_t TSynapse::fDEDw. private . ! the derivative of the total error wrt the synapse weight ; Definition at line 40 of file TSynapse.h. ◆ fpost. TNeuron* TSynapse::fpost. private . the neuron after the synapse ; Definition at line 38 of file TSynapse.h. ◆ fpre. TNeuron* TSynapse::fpre. private . the neuron before the synapse ; Definition at line 37 of file TSynapse.h. ◆ fweight. Double_t TSynapse::fweight. private . the weight of the synapse ; Definition at line 39 of file TSynapse.h. Libraries for TSynapse:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TSynapse.h; math/mlp/src/TSynapse.cxx. TSynapse. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSynapse.html:14735,Guid,Guide,14735,doc/master/classTSynapse.html,https://root.cern,https://root.cern/doc/master/classTSynapse.html,1,['Guid'],['Guide']
Usability,"file and the path; and name of the histogram within that file. When providing these; in a script, HistFactory doesn't load the histogram from the file; right away. Instead, once all such histograms have been supplied,; one should run this method to open all ROOT files and to copy and; save all necessary histograms. Measurement(); Measurement( const Measurement& other ); // Copy. void SetOutputFilePrefix(const string& prefix); set output prefix. { fOutputFilePrefix = prefix; }. std::string GetOutputFilePrefix(); retrieve prefix for output files. { return fOutputFilePrefix; }. void SetPOI(const string& POI); insert PoI at beginning of vector of PoIs. { fPOI.insert( fPOI.begin(), POI ); }. void AddPOI(const string& POI); append parameter to vector of PoIs. { fPOI.push_back(POI); }. std::string GetPOI(unsigned int i = 0); get name of PoI at given index. { return fPOI.at(i); }. std::vector<std::string>& GetPOIList(); get vector of PoI names. { return fPOI; }. void ClearConstantParams(); empty vector of constant parameters. { fConstantParams.clear(); }. std::vector< std::string >& GetConstantParams(); get vector of all constant parameters. { return fConstantParams; }. std::map<std::string, double>& GetParamValues(); get map: parameter name <--> parameter value. { return fParamValues; }. void ClearParamValues(); clear map of parameter values. { fParamValues.clear(); }. void AddFunctionObject(const RooStats::HistFactory::PreprocessFunction function); add a preprocess function object. { fFunctionObjects.push_back( function ); }. void SetFunctionObjects(vector<RooStats::HistFactory::PreprocessFunction> objects); get vector of defined function objects. { fFunctionObjects = objects; }. std::vector< RooStats::HistFactory::PreprocessFunction >& GetFunctionObjects(); { return fFunctionObjects; }. std::vector< RooStats::HistFactory::Asimov >& GetAsimovDatasets(); get vector of defined Asimov Datasets. { return fAsimovDatasets; }. void AddAsimovDataset(RooStats::HistFactory::Asimov d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html:11870,Clear,ClearConstantParams,11870,root/html534/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html,1,['Clear'],['ClearConstantParams']
Usability,"file containing the SWAN usage statistics during July 2017 ;  timeSeriesFromCSV.py This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  timeSeriesFromCSV_TDF.C This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  zones.py Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:117377,simpl,simple,117377,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['simpl'],['simple']
Usability,"file has the .gdml extension.; Alternatively, one can also use the ROOT->GDML converter directly from the Python prompt (assuming the TGeo geometry has already been loaded into memory in one or another way), for example:; from math import *; ; import ROOT; import writer; import ROOTwriter; ; # get TGeoManager and; # get the top volume of the existing (in-memory) geometry tree; geomgr = ROOT.gGeoManager; topV = geomgr.GetTopVolume(); ; # instanciate writer; gdmlwriter = writer.writer('mygeo.gdml'); binding = ROOTwriter.ROOTwriter(gdmlwriter); ; # dump materials; matlist = geomgr.GetListOfMaterials(); binding.dumpMaterials(matlist); ; # dump solids; shapelist = geomgr.GetListOfShapes(); binding.dumpSolids(shapelist); ; # dump geo tree; print 'Traversing geometry tree'; gdmlwriter.addSetup('default', '1.0', topV.GetName()); binding.examineVol(topV); ; # write file; gdmlwriter.writeFile(); ROOTwriter.ROOTwriterDefinition ROOTwriter.py:58; ROOTwriter.ROOTwriter.dumpMaterialsdumpMaterials(self, matlist)Definition ROOTwriter.py:279; writer.writerDefinition writer.py:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOTwriterDefinition ROOTwriter.py:1; writerDefinition writer.py:1; For all other functionality questions or comments, or even GDML in general, please email Witol.nosp@m.d.Po.nosp@m.korsk.nosp@m.i@ce.nosp@m.rn.ch . Classes; class  TGDMLMatrix;  This class is used in the process of reading and writing the GDML ""matrix"" tag. More...;  ; class  TGDMLParse;  This class contains the implementation of the GDML parser associated to all the supported GDML elements. More...;  ; class  TGDMLRefl;  This class is a helper class for TGDMLParse. More...;  ; class  TGDMLWrite;  This class contains implementation of converting ROOT's gGeoManager geometry to GDML file. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry__gdml.html:5078,Guid,Guide,5078,doc/master/group__Geometry__gdml.html,https://root.cern,https://root.cern/doc/master/group__Geometry__gdml.html,1,['Guid'],['Guide']
Usability,"file. When providing these; in a script, HistFactory doesn't load the histogram from the file; right away. Instead, once all such histograms have been supplied,; one should run this method to open all ROOT files and to copy and; save all necessary histograms. Measurement(); Measurement( const Measurement& other ); // Copy. void SetOutputFilePrefix(const string& prefix); set output prefix. { fOutputFilePrefix = prefix; }. std::string GetOutputFilePrefix(); retrieve prefix for output files. { return fOutputFilePrefix; }. void SetPOI(const string& POI); insert PoI at beginning of vector of PoIs. { fPOI.insert( fPOI.begin(), POI ); }. void AddPOI(const string& POI); append parameter to vector of PoIs. { fPOI.push_back(POI); }. std::string GetPOI(unsigned int i = 0); get name of PoI at given index. { return fPOI.at(i); }. std::vector<std::string>& GetPOIList(); get vector of PoI names. { return fPOI; }. void ClearConstantParams(); empty vector of constant parameters. { fConstantParams.clear(); }. std::vector< std::string >& GetConstantParams(); get vector of all constant parameters. { return fConstantParams; }. std::map<std::string, double>& GetParamValues(); get map: parameter name <--> parameter value. { return fParamValues; }. void ClearParamValues(); clear map of parameter values. { fParamValues.clear(); }. void AddFunctionObject(const RooStats::HistFactory::PreprocessFunction function); add a preprocess function object. { fFunctionObjects.push_back( function ); }. void SetFunctionObjects(vector<RooStats::HistFactory::PreprocessFunction> objects); get vector of defined function objects. { fFunctionObjects = objects; }. std::vector< RooStats::HistFactory::PreprocessFunction >& GetFunctionObjects(); { return fFunctionObjects; }. std::vector< RooStats::HistFactory::Asimov >& GetAsimovDatasets(); get vector of defined Asimov Datasets. { return fAsimovDatasets; }. void AddAsimovDataset(RooStats::HistFactory::Asimov dataset); add an Asimov Dataset. { fAsimovDatasets.push_ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html:11948,clear,clear,11948,root/html534/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html,1,['clear'],['clear']
Usability,"file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GVIZ3D; » TStructViewer. class TStructViewer: public TObject. TStructViewer viewer represents class, struct or other type as an object in 3D space.; At the top of the scene we can see objects which is our pointer. Under it we see; pointers and collection elements. Collection must inherit from TCollection; or be STL collecion. We can change the number of visible levels or objects on the scene with the GUI or; methods. The size of geometry objects is proportional to the memory taken by this object; or to the number of members inside this object. An easy way to find some class in the viewer is to change the color of the type.; We can connect for example a TF2 class with red color or connect all classes; inheriting from TF2 by adding plus to name. For example typename ""TF2+"" tells us; that all classes inheriting from TF2 will be red. Navigation in viewer is very simple like in usual GLViewer. When you put the mouse over; some object you can see some information about it (e.g. name, size, actual level).; When you double click this object, it becames top object on scene.; Undo and redo operation are supported. In this picture we can see TStructViewer with pointer to TList which contains; other collections and objects of various classes. Other screenshot presents opened TStructNodeEditor. Function Members (Methods); public:. TStructViewer(void* ptr = NULL, const char* clname = NULL); virtual~TStructViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructViewer.html:1113,simpl,simple,1113,root/html530/TStructViewer.html,https://root.cern,https://root.cern/root/html530/TStructViewer.html,3,['simpl'],['simple']
Usability,"fileLL::RooProfileLL ; (; const RooProfileLL & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 73 of file RooProfileLL.cxx. Member Function Documentation. ◆ alwaysStartFromMin(). bool RooProfileLL::alwaysStartFromMin ; (; ); const. inline . Definition at line 31 of file RooProfileLL.h. ◆ bestFitObs(). const RooArgSet & RooProfileLL::bestFitObs ; (; ); const. Definition at line 98 of file RooProfileLL.cxx. ◆ bestFitParams(). const RooArgSet & RooProfileLL::bestFitParams ; (; ); const. Definition at line 89 of file RooProfileLL.cxx. ◆ Class(). static TClass * RooProfileLL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooProfileLL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooProfileLL::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 70 of file RooProfileLL.h. ◆ clearAbsMin(). void RooProfileLL::clearAbsMin ; (; ). inline . Definition at line 42 of file RooProfileLL.h. ◆ clone(). TObject * RooProfileLL::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 28 of file RooProfileLL.h. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooProfileLL::createProfile ; (; const RooArgSet & ; paramsOfInterest). overridevirtual . Optimized implementation of createProfile for profile likelihoods. ; Return profile of original function in terms of stated parameters of interest rather than profiling recursively. ; Reimplemented from RooAbsReal.; Definition at line 112 of file RooProfileLL.cxx. ◆ DeclFileName(). static const char * RooProfileLL::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 70 of file RooProfileLL.h. ◆ evaluate(). double RooProfileLL::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate profile likelihood by minimizing likelihood w.r.t. ; all par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:63034,clear,clearAbsMin,63034,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"files int(11) default NULL, status int(11) default NULL, rootver varchar(32) NOT NULL, PRIMARY KEY (id) );; Version 1 corresponds to the table created with the following command: ('user','begin','end' instead of 'proofuser', 'querybegin', 'queryend'; no 'status', 'missfiles', 'rootver'; 'dataset' field with name(s) of processed dataset(s)); CREATE TABLE proofquerylog ( id int(11) NOT NULL auto_increment, user varchar(32) NOT NULL, proofgroup varchar(32) default NULL, begin datetime default NULL, end datetime default NULL, walltime int(11) default NULL, cputime float default NULL, bytesread bigint(20) default NULL, events bigint(20) default NULL, totevents bigint(20) default NULL, workers int(11) default NULL, querytag varchar(64) NOT NULL, vmemmxw bigint(20) default NULL, rmemmxw bigint(20) default NULL, vmemmxm bigint(20) default NULL, rmemmxm bigint(20) default NULL, numfiles int(11) default NULL, dataset varchar(512) NOT NULL, PRIMARY KEY (id) ); ; Implements TProofMonSender.; Definition at line 137 of file TProofMonSenderSQL.cxx. ◆ Streamer(). void TProofMonSenderSQL::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofMonSender. ◆ StreamerNVirtual(). void TProofMonSenderSQL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file TProofMonSenderSQL.h. Member Data Documentation. ◆ fDSetSendOpts. TString TProofMonSenderSQL::fDSetSendOpts. private . Definition at line 34 of file TProofMonSenderSQL.h. ◆ fFilesSendOpts. TString TProofMonSenderSQL::fFilesSendOpts. private . Definition at line 35 of file TProofMonSenderSQL.h. ◆ fWriter. TVirtualMonitoringWriter* TProofMonSenderSQL::fWriter. private . Definition at line 33 of file TProofMonSenderSQL.h. proof/proofplayer/inc/TProofMonSenderSQL.h; proof/proofplayer/src/TProofMonSenderSQL.cxx. TProofMonSenderSQL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMonSenderSQL.html:20014,Guid,Guide,20014,doc/master/classTProofMonSenderSQL.html,https://root.cern,https://root.cern/doc/master/classTProofMonSenderSQL.html,1,['Guid'],['Guide']
Usability,"fine 3 dimensional pdf; z0 = ROOT.RooRealVar(""z0"", ""z0"", -0.1, 1); px = ROOT.RooPolynomial(""px"", ""px"", x, [0.0]); py = ROOT.RooPolynomial(""py"", ""py"", y, [0.0]); pz = ROOT.RooPolynomial(""pz"", ""pz"", z, [z0]); pxyz = ROOT.RooProdPdf(""pxyz"", ""pxyz"", [px, py, pz]); ; # Defined non-rectangular region R in (x, y, z); # -------------------------------------------------------------------------------------; ; #; # R = Z[0 - 0.1*Y^2] * Y[0.1*X - 0.9*X] * X[0 - 10]; #; ; # Construct range parameterized in ""R"" in y [ 0.1*x, 0.9*x ]; ylo = ROOT.RooFormulaVar(""ylo"", ""0.1*x"", [x]); yhi = ROOT.RooFormulaVar(""yhi"", ""0.9*x"", [x]); y.setRange(""R"", ylo, yhi); ; # Construct parameterized ranged ""R"" in z [ 0, 0.1*y^2 ]; zlo = ROOT.RooFormulaVar(""zlo"", ""0.0*y"", [y]); zhi = ROOT.RooFormulaVar(""zhi"", ""0.1*y*y"", [y]); z.setRange(""R"", zlo, zhi); ; # Calculate integral of normalized pdf in R; # ----------------------------------------------------------------------------------; ; # Create integral over normalized pdf model over x,y, in ""R"" region; intPdf = pxyz.createIntegral({x, y, z}, {x, y, z}, ""R""); ; # Plot value of integral as function of pdf parameter z0; frame = z0.frame(Title=""Integral of pxyz over x,y, in region R""); intPdf.plotOn(frame); ; c = ROOT.TCanvas(""rf313_paramranges"", ""rf313_paramranges"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.6); frame.Draw(); ; c.SaveAs(""rf313_paramranges.png""); [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]_Int[x|R]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]) using numeric integrator RooIntegrator1D to calculate Int(y); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf313_paramranges.py. tutorialsroofitrf313_paramranges.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf313__paramranges_8py.html:2502,Guid,Guide,2502,doc/master/rf313__paramranges_8py.html,https://root.cern,https://root.cern/doc/master/rf313__paramranges_8py.html,1,['Guid'],['Guide']
Usability,"fine ROOT_TGeoShape; 14 ; 15#include ""TNamed.h""; 16 ; 17// forward declarations; 18class TGeoBoolCombinator;; 19class TGeoBBox;; 20class TGeoMatrix;; 21class TGeoHMatrix;; 22class TGeoVolume;; 23class TBuffer3D;; 24 ; 25class TGeoShape : public TNamed {; 26private:; 27 static TGeoMatrix *fgTransform; // current transformation matrix that applies to shape; 28 static Double_t fgEpsMch; // Machine round-off error; 29public:; 30 enum EShapeType {; 31 kBitMask32 = 0xffffffff,; 32 kGeoNoShape = 0,; 33 kGeoBad = BIT(0),; 34 kGeoRSeg = BIT(1),; 35 kGeoPhiSeg = BIT(2),; 36 kGeoThetaSeg = BIT(3),; 37 kGeoVisX = BIT(4),; 38 kGeoVisY = BIT(5),; 39 kGeoVisZ = BIT(6),; 40 kGeoRunTimeShape = BIT(7),; 41 kGeoInvalidShape = BIT(8),; 42 kGeoTorus = BIT(9),; 43 kGeoBox = BIT(10),; 44 kGeoPara = BIT(11),; 45 kGeoSph = BIT(12),; 46 kGeoTube = BIT(13),; 47 kGeoTubeSeg = BIT(14),; 48 kGeoCone = BIT(15),; 49 kGeoConeSeg = BIT(16),; 50 kGeoPcon = BIT(17),; 51 kGeoPgon = BIT(18),; 52 kGeoArb8 = BIT(19),; 53 kGeoEltu = BIT(20),; 54 kGeoTrap = BIT(21),; 55 kGeoCtub = BIT(22),; 56 kGeoTrd1 = BIT(23),; 57 kGeoTrd2 = BIT(24),; 58 kGeoComb = BIT(25),; 59 kGeoClosedShape = BIT(26),; 60 kGeoXtru = BIT(27),; 61 kGeoParaboloid = BIT(28),; 62 kGeoHalfSpace = BIT(29),; 63 kGeoHype = BIT(30),; 64 kGeoSavePrimitive = BIT(20); 65 };; 66 virtual void ClearThreadData() const {}; 67 virtual void CreateThreadData(Int_t) {}; 68 ; 69protected:; 70 // data members; 71 Int_t fShapeId; // shape id; 72 UInt_t fShapeBits; // shape bits; 73 // methods; 74 virtual void FillBuffer3D(TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const;; 75 Int_t GetBasicColor() const;; 76 void SetOnBoundary(Bool_t /*flag=kTRUE*/) {}; 77 void TransformPoints(Double_t *points, UInt_t NbPoints) const;; 78 ; 79public:; 80 // constructors; 81 TGeoShape();; 82 TGeoShape(const char *name);; 83 // destructor; 84 ~TGeoShape() override;; 85 // methods; 86 ; 87 static Double_t Big() { return 1.E30; }; 88 static TGeoMatrix *GetTransform();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:1982,Clear,ClearThreadData,1982,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,1,['Clear'],['ClearThreadData']
Usability,"fineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:4571,guid,guide,4571,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['guid'],['guide']
Usability,fined. bool RooCmdConfig::_allowUndefined = false. protected . Definition at line 121 of file RooCmdConfig.h. ◆ _cList. std::vector<Var<RooArgSet*> > RooCmdConfig::_cList. protected . RooArgSet list. ; Definition at line 127 of file RooCmdConfig.h. ◆ _dList. std::vector<Var<double> > RooCmdConfig::_dList. protected . Double list. ; Definition at line 124 of file RooCmdConfig.h. ◆ _error. bool RooCmdConfig::_error = false. protected . Definition at line 120 of file RooCmdConfig.h. ◆ _fList. TList RooCmdConfig::_fList. protected . Forbidden cmd list. ; Definition at line 130 of file RooCmdConfig.h. ◆ _iList. std::vector<Var<int> > RooCmdConfig::_iList. protected . Integer list. ; Definition at line 123 of file RooCmdConfig.h. ◆ _mList. TList RooCmdConfig::_mList. protected . Mutex cmd list. ; Definition at line 131 of file RooCmdConfig.h. ◆ _name. std::string RooCmdConfig::_name. protected . Definition at line 117 of file RooCmdConfig.h. ◆ _oList. std::vector<Var<RooLinkedList> > RooCmdConfig::_oList. protected . Object list. ; Definition at line 126 of file RooCmdConfig.h. ◆ _pList. TList RooCmdConfig::_pList. protected . Processed cmd list. ; Definition at line 133 of file RooCmdConfig.h. ◆ _rList. TList RooCmdConfig::_rList. protected . Required cmd list. ; Definition at line 129 of file RooCmdConfig.h. ◆ _sList. std::vector<Var<std::string> > RooCmdConfig::_sList. protected . String list. ; Definition at line 125 of file RooCmdConfig.h. ◆ _verbose. bool RooCmdConfig::_verbose = false. protected . Definition at line 119 of file RooCmdConfig.h. ◆ _yList. TList RooCmdConfig::_yList. protected . Dependency cmd list. ; Definition at line 132 of file RooCmdConfig.h. Libraries for RooCmdConfig:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooCmdConfig.h; roofit/roofitcore/src/RooCmdConfig.cxx. RooCmdConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCmdConfig.html:30134,Guid,Guide,30134,doc/master/classRooCmdConfig.html,https://root.cern,https://root.cern/doc/master/classRooCmdConfig.html,1,['Guid'],['Guide']
Usability,"fines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 75 of file RooRealSumFunc.h. ◆ _funcList. RooListProxy RooRealSumFunc::_funcList. protected . List of component FUNCs. ; Definition at line 70 of file RooRealSumFunc.h. ◆ _haveLastCoef. bool RooRealSumFunc::_haveLastCoef. protected . The integration cache manager. ; Definition at line 68 of file RooRealSumFunc.h. ◆ _haveWarned. bool RooRealSumFunc::_haveWarned {false}. mutableprotected . ! ; Definition at line 74 of file RooRealSumFunc.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumFunc::_normIntMgr. mutableprotected . Definition at line 66 of file RooRealSumFunc.h. Libraries for RooRealSumFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumFunc.h; roofit/roofitcore/src/RooRealSumFunc.cxx. RooRealSumFunc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:70115,Guid,Guide,70115,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['Guid'],['Guide']
Usability,"finition FitConfig.h:109; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::LikelihoodFitbool LikelihoodFit(const std::shared_ptr< UnBinData > &data, bool extended=false, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)Un-binned Likelihood fit using a shared_ptr for NOT copying the input data.Definition Fitter.h:229; ROOT::Fit::Fitter::LinearFitbool LinearFit(const BinData &data)Do a linear fit copying the input data.Definition Fitter.h:247; ROOT::Fit::Fitter::LeastSquareFitbool LeastSquareFit(const std::shared_ptr< BinData > &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)Fit a binned data set using a least square fit NOT copying the input data.Definition Fitter.h:179; ROOT::Fit::Fitter::EvalFCNbool EvalFCN()Perform a simple FCN evaluation.Definition Fitter.cxx:288; ROOT::Fit::Fitter::fExtObjFunctionconst ROOT::Math::IMultiGenFunction * fExtObjFunction! pointer to an external FCNDefinition Fitter.h:576; ROOT::Fit::Fitter::operator=Fitter & operator=(const Fitter &)=deleteAssignment operator (disabled, class is not copyable); ROOT::Fit::Fitter::FitFCNbool FitFCN()Perform a fit with the previously set FCN function.Definition Fitter.cxx:269; ROOT::Fit::Fitter::DoUpdateFitConfigvoid DoUpdateFitConfig()Definition Fitter.cxx:860; ROOT::Fit::Fitter::DoMinimizationbool DoMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)do minimizationDefinition Fitter.cxx:836; ROOT::Fit::Fitter::DoSetFCNbool DoSetFCN(bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType)Set Objective function.Definition Fitter.cxx:137; ROOT::Fit::Fitter::fDataSizeint fDataSizesize of data sets (need for Fumili or LM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:30027,simpl,simple,30027,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['simpl'],['simple']
Usability,"finition Reader.cxx:468; TMVA::Reader::BookMVAIMethod * BookMVA(const TString &methodTag, const TString &weightfile)read method name from weight fileDefinition Reader.cxx:368; TMVA::Reader::AddSpectatorvoid AddSpectator(const TString &expression, Float_t *)Add a float spectator or expression to the reader.Definition Reader.cxx:321; TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; AuthorAndreas Hoecker ; Definition in file TMVAClassificationCategoryApplication.C. tutorialstmvaTMVAClassificationCategoryApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html:11108,Guid,Guide,11108,doc/master/TMVAClassificationCategoryApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategoryApplication_8C.html,1,['Guid'],['Guide']
Usability,"finition TDataType.h:44; TEnvThe TEnv class reads config files, by default named .rootrc.Definition TEnv.h:124; TFileHandlerDefinition TSysEvtHandler.h:65; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGX11This class is the basic interface to the X11 (Xlib) graphics system.Definition TGX11.h:80; TGaxisThe axis painter class.Definition TGaxis.h:24; TGeometryTGeometry description.Definition TGeometry.h:39; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; THashTableTHashTable implements a hash table to store TObject's.Definition THashTable.h:35; THtmlLegacy ROOT documentation system.Definition THtml.h:40; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLinkSpecial TText object used to show hyperlinks.Definition TLink.h:17; TListA doubly linked list.Definition TList.h:38; TMethodArgEach ROOT method (see TMethod) has a linked list of its arguments.Definition TMethodArg.h:36; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; TMinuitDefinition TMinuit.h:27; TObjectTableThis class registers all instances of TObject and its derived classes in a hash table.Definition TObjectTable.h:35; TObjectMother of all ROOT objects.Definition TObject.h:41; TOrdCollectionOrdered collection.Definition TOrdCollection.h:32; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveA TBox with a bordersize and a shadow option.Definition TPave.h:19; TPostScriptIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectTable.html:5157,simpl,simple,5157,doc/master/classTObjectTable.html,https://root.cern,https://root.cern/doc/master/classTObjectTable.html,1,['simpl'],['simple']
Usability,"finition TDirectory.h:384; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TH2Poly2D Histogram with Polygonal BinsDefinition TH2Poly.h:66; TIterDefinition TCollection.h:235; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TKey::ReadObjvirtual TObject * ReadObj()To read a TObject* from the file.Definition TKey.cxx:759; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; usaDefinition civetweb.c:1823; . AuthorOlivier Couet ; Definition in file th2polyUSA.C. tutorialshistth2polyUSA.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/th2polyUSA_8C.html:4992,Guid,Guide,4992,doc/master/th2polyUSA_8C.html,https://root.cern,https://root.cern/doc/master/th2polyUSA_8C.html,1,['Guid'],['Guide']
Usability,"finition TGeoMatrix.h:168; TGeoRotation::LocalToMasterBombvoid LocalToMasterBomb(const Double_t *local, Double_t *master) const overrideconvert a point by multiplying its column vector (x, y, z, 1) to matrix inverseDefinition TGeoMatrix.h:206; TGeoRotation::RotateXvoid RotateX(Double_t angle) overrideRotate about X axis of the master frame with angle expressed in degrees.Definition TGeoMatrix.cxx:1098; TGeoRotation::GetScaleconst Double_t * GetScale() const overrideDefinition TGeoMatrix.h:240; TGeoRotation::ReflectZvoid ReflectZ(Bool_t leftside, Bool_t rotonly=kFALSE) overrideMultiply by a reflection respect to XY.Definition TGeoMatrix.cxx:1203; TGeoRotation::TGeoRotationTGeoRotation()Default constructor.Definition TGeoMatrix.cxx:860; TGeoRotation::MasterToLocalVectvoid MasterToLocalVect(const Double_t *master, Double_t *local) const overrideconvert a point by multiplying its column vector (x, y, z, 1) to matrixDefinition TGeoMatrix.h:212; TGeoRotation::Clearvoid Clear(Option_t *option="""") overridereset data membersDefinition TGeoMatrix.cxx:1030; TGeoRotation::GetRotationMatrixconst Double_t * GetRotationMatrix() const overrideDefinition TGeoMatrix.h:239; TGeoRotation::SetAnglesvoid SetAngles(Double_t phi, Double_t theta, Double_t psi)Set matrix elements according to Euler angles.Definition TGeoMatrix.cxx:1251; TGeoRotation::~TGeoRotation~TGeoRotation() overrideDefinition TGeoMatrix.h:183; TGeoRotation::MasterToLocalBombvoid MasterToLocalBomb(const Double_t *master, Double_t *local) const overrideconvert a point by multiplying its column vector (x, y, z, 1) to matrixDefinition TGeoMatrix.h:216; TGeoRotation::MultiplyByvoid MultiplyBy(const TGeoRotation *rot, Bool_t after=kTRUE)Multiply this rotation with the one specified by ROT.Definition TGeoMatrix.cxx:1411; TGeoRotation::RotateYvoid RotateY(Double_t angle) overrideRotate about Y axis of the master frame with angle expressed in degrees.Definition TGeoMatrix.cxx:1121; TGeoRotation::operator==Bool_t operator==(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:43100,Clear,Clearvoid,43100,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"finition TGeoVolume.cxx:1103; TGeoVolume::IsRaytracingBool_t IsRaytracing() constCheck if the painter is currently ray-tracing the content of this volume.Definition TGeoVolume.cxx:857; TGeoXtruDefinition TGeoXtru.h:22; TGeoXtru::DefineSectionvirtual void DefineSection(Int_t snum, Double_t z, Double_t x0=0., Double_t y0=0., Double_t scale=1.); TGeoXtru::GetNvertInt_t GetNvert() constDefinition TGeoXtru.h:96; TGeoXtru::DefinePolygonBool_t DefinePolygon(Int_t nvert, const Double_t *xv, const Double_t *yv); TGeoXtru::GetNzInt_t GetNz() constDefinition TGeoXtru.h:95; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Clearvirtual void Clear(Option_t *="""")Definition TObject.h:119; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::SetAllWithvirtual void SetAllWith(const char *text, Option_t *option, Double_t value)Set attribute option for all lines containing string text.Definition TPaveText.cxx:827; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TProcessEventTimerDefinition TSystem.h:257; TProcessEventTimer::Process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geodemo_8C.html:82073,Clear,Clearvirtual,82073,doc/master/geodemo_8C.html,https://root.cern,https://root.cern/doc/master/geodemo_8C.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,"finition TGeoVolume.cxx:1812; TGeoVolume::UnmarkSavedvoid UnmarkSaved()Reset SavePrimitive bits.Definition TGeoVolume.cxx:1699; TGeoVolume::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute mouse actions on this volume.Definition TGeoVolume.cxx:1710; TGeoVolume::CloneVolumevirtual TGeoVolume * CloneVolume() constClone this volume.Definition TGeoVolume.cxx:1831; TGeoVolume::SetFindervoid SetFinder(TGeoPatternFinder *finder)Definition TGeoVolume.h:244; TGeoVolume::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoVolume.h:362; TGeoVolume::IsValidBool_t IsValid() constDefinition TGeoVolume.h:154; TGeoVolume::Grabvoid Grab()Definition TGeoVolume.h:136; TGeoVolume::CheckGeometryvoid CheckGeometry(Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) constShoot nrays with random directions from starting point (startx, starty, startz) in the reference fram...Definition TGeoVolume.cxx:588; TGeoVolume::SelectVolumevoid SelectVolume(Bool_t clear=kFALSE)Select this volume as matching an arbitrary criteria.Definition TGeoVolume.cxx:2325; TGeoVolume::GetPointerNameconst char * GetPointerName() constProvide a pointer name containing uid.Definition TGeoVolume.cxx:1792; TGeoVolume::Classstatic TClass * Class(); TGeoVolume::GetNodesTObjArray * GetNodes()Definition TGeoVolume.h:169; TGeoVolume::ClearShapevoid ClearShape()Clear the shape of this volume from the list held by the current manager.Definition TGeoVolume.cxx:668; TGeoVolume::SetFWExtensionvoid SetFWExtension(TGeoExtension *ext)Connect framework defined extension to the volume.Definition TGeoVolume.cxx:1498; TGeoVolume::VisibleDaughtersvoid VisibleDaughters(Bool_t vis=kTRUE)set visibility for daughtersDefinition TGeoVolume.cxx:2453; TGeoVolume::FindOverlapsvoid FindOverlaps() constloop all nodes marked as overlaps and find overlapping brothersDefinition TGeoVolume.cxx:2227; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:146400,clear,clear,146400,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['clear'],['clear']
Usability,"finition TGeoVolume.cxx:1812; TGeoVolume::UnmarkSavedvoid UnmarkSaved()Reset SavePrimitive bits.Definition TGeoVolume.cxx:1699; TGeoVolume::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute mouse actions on this volume.Definition TGeoVolume.cxx:1710; TGeoVolume::CloneVolumevirtual TGeoVolume * CloneVolume() constClone this volume.Definition TGeoVolume.cxx:1831; TGeoVolume::SetFindervoid SetFinder(TGeoPatternFinder *finder)Definition TGeoVolume.h:244; TGeoVolume::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoVolume.h:362; TGeoVolume::IsValidBool_t IsValid() constDefinition TGeoVolume.h:154; TGeoVolume::Grabvoid Grab()Definition TGeoVolume.h:136; TGeoVolume::CheckGeometryvoid CheckGeometry(Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) constShoot nrays with random directions from starting point (startx, starty, startz) in the reference fram...Definition TGeoVolume.cxx:588; TGeoVolume::SelectVolumevoid SelectVolume(Bool_t clear=kFALSE)Select this volume as matching an arbitrary criteria.Definition TGeoVolume.cxx:2325; TGeoVolume::GetPointerNameconst char * GetPointerName() constProvide a pointer name containing uid.Definition TGeoVolume.cxx:1792; TGeoVolume::GetNodesTObjArray * GetNodes()Definition TGeoVolume.h:169; TGeoVolume::SetTransparencyvoid SetTransparency(Char_t transparency=0)Definition TGeoVolume.h:376; TGeoVolume::ClearShapevoid ClearShape()Clear the shape of this volume from the list held by the current manager.Definition TGeoVolume.cxx:668; TGeoVolume::SetFWExtensionvoid SetFWExtension(TGeoExtension *ext)Connect framework defined extension to the volume.Definition TGeoVolume.cxx:1498; TGeoVolume::VisibleDaughtersvoid VisibleDaughters(Bool_t vis=kTRUE)set visibility for daughtersDefinition TGeoVolume.cxx:2453; TGeoVolume::Releasevoid Release()Definition TGeoVolume.h:137; TGeoVolume::FindOverlapsvoid FindOverlaps() constloop all nodes marked as overlaps and find overlapping brothersDefinition TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:38888,clear,clear,38888,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,1,['clear'],['clear']
Usability,"finition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::TNamedTNamed()Definition TNamed.h:36; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::IndexOfInt_t IndexOf(const TObject *obj) const overrideDefinition TObjArray.cxx:605; TObjArray::AddAtvoid AddAt(TObject *obj, Int_t idx) overrideAdd object at position ids.Definition TObjArray.cxx:254; TObjArray::Sortvirtual void Sort(Int_t upto=kMaxInt)If objects in array are sortable (i.e.Definition TObjArray.cxx:818; TObjArray::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the array.Definition TObjArray.cxx:321; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:240630,Clear,Clearvoid,240630,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"finition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TStyle::GetTimeOffsetDouble_t GetTimeOffset() constDefinition TStyle.h:269; bool; double; int; unsigned int; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699. histhistsrcTAxis.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:67785,Guid,Guide,67785,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['Guid'],['Guide']
Usability,"finition TPad.h:105; TPad::SetThetavoid SetTheta(Double_t theta=30) overrideDefinition TPad.h:359; TPad::GetNameconst char * GetName() const overrideReturns name of object.Definition TPad.h:260; TPad::XtoAbsPixelInt_t XtoAbsPixel(Double_t x) const overrideConvert X coordinate to absolute pixel.Definition TPad.cxx:7475; TPad::fGridyBool_t fGridySet to true if grid along Y.Definition TPad.h:101; TPad::SetBBoxY2void SetBBoxY2(const Int_t y) overrideSet bottom of BoundingBox to a value (resize in y direction on bottom)Definition TPad.cxx:7358; TPad::XtoPadDouble_t XtoPad(Double_t x) const overrideConvert x from X to pad.Definition TPad.cxx:3560; TPointDefinition TPoint.h:31; TQObject::Emitvoid Emit(const char *signal, const T &arg)Activate signal with single parameter.Definition TQObject.h:164; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TViewSee TView3D.Definition TView.h:25; TVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas.Definition TVirtualPadPainter.h:19; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; TWebCanvasBasic TCanvasImp ABI implementation for Web-based Graphics Provides painting of main ROOT classes in ...Definition TWebCanvas.h:35; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361; Drawth1 Draw(). graf2dgpadincTPad.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8h_source.html:66474,Guid,Guide,66474,doc/master/TPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TPad_8h_source.html,1,['Guid'],['Guide']
Usability,"finition TPad.h:28; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::VecOps::Mapauto Map(Args &&... args)Create new collection applying a callable to the elements of the input collection.Definition RVec.hxx:2150; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOT::RDF::ExperimentalDefinition RDataFrame.hxx:66; ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::VecOpsDefinition TCollectionProxyInfo.h:42; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; TMath::MeanDouble_t Mean(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the weighted mean of an array a with length n.Definition TMath.h:1089; df106_HiggsToFourLeptonsDefinition df106_HiggsToFourLeptons.py:1; graphDefinition graph.py:1; v@ vDefinition rootcling_impl.cxx:3699; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; . DateMarch 2020, August 2022, August 2023 ; AuthorsStefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN) ; Definition in file df106_HiggsToFourLeptons.C. tutorialsdataframedf106_HiggsToFourLeptons.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:18461,Guid,Guide,18461,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['Guid'],['Guide']
Usability,"finition at line 105 of file TSelectorDraw.cxx. ◆ Class(). static TClass * TSelectorDraw::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSelectorDraw::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSelectorDraw::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 121 of file TSelectorDraw.h. ◆ ClearFormula(). void TSelectorDraw::ClearFormula ; (; ). protectedvirtual . Delete internal buffers. ; Definition at line 941 of file TSelectorDraw.cxx. ◆ CompileVariables(). bool TSelectorDraw::CompileVariables ; (; const char * ; varexp = """", . const char * ; selection = """" . ). protectedvirtual . Compile input variables and selection expression. ; varexp is an expression of the general form e1:e2:e3 where e1,etc is a formula referencing a combination of the columns; Example: varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); selection is an expression with a combination of the columns; Example: selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized; Return false if any of the variable is not compilable. ; Definition at line 976 of file TSelectorDraw.cxx. ◆ DeclFileName(). static const char * TSelectorDraw::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 121 of file TSelectorDraw.h. ◆ GetAction(). virtual Int_t TSelectorDraw::GetAction ; (; ); const. inlinevirtual . Definition at line 80 of file TSelectorDraw.h. ◆ GetCleanElist(). virtual bool TSelectorDraw::GetCleanElist ; (; ); const. inlinevirtual . Definition at line 81 of file TSelectorDraw.h. ◆ GetDimension(). virtual Int_t TSelectorDraw::GetDimension ; (; ); const. inlinevirtual . Definition at line 82 of file TSelectorDraw.h. ◆ GetDrawFlag(). virtual Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:18695,simpl,simplest,18695,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['simpl'],['simplest']
Usability,"finition at line 125 of file TCling.h. ◆ fParsedPayloadsAddresses. std::set<const char*> TCling::fParsedPayloadsAddresses. private . Definition at line 123 of file TCling.h. ◆ fPayloads. std::set<size_t> TCling::fPayloads. private . Definition at line 122 of file TCling.h. ◆ fPendingRdicts. std::map<std::string, llvm::StringRef> TCling::fPendingRdicts. private . Definition at line 634 of file TCling.h. ◆ fPrevLoadedDynLibInfo. void* TCling::fPrevLoadedDynLibInfo. private . Definition at line 137 of file TCling.h. ◆ fPrompt. char TCling::fPrompt[64]. private . Definition at line 110 of file TCling.h. ◆ fRegisterModuleDyLibs. std::vector<void*> TCling::fRegisterModuleDyLibs. private . Definition at line 138 of file TCling.h. ◆ fRootmapFiles. TObjArray* TCling::fRootmapFiles. private . Definition at line 126 of file TCling.h. ◆ fRootmapLoadPath. TString TCling::fRootmapLoadPath. private . Definition at line 116 of file TCling.h. ◆ fSharedLibs. TString TCling::fSharedLibs. private . Definition at line 113 of file TCling.h. ◆ fSpecialObjectMaps. std::map<SpecialObjectLookupCtx_t, SpecialObjectMap_t> TCling::fSpecialObjectMaps. private . Definition at line 153 of file TCling.h. ◆ fStringHashFunction. std::hash<std::string> TCling::fStringHashFunction. private . Definition at line 124 of file TCling.h. ◆ fTemporaries. std::vector<cling::Value>* TCling::fTemporaries. private . Definition at line 133 of file TCling.h. ◆ fTransactionCount. ULong64_t TCling::fTransactionCount. private . Definition at line 148 of file TCling.h. ◆ fTransactionHeadersMap. std::map<const cling::Transaction*,size_t> TCling::fTransactionHeadersMap. private . Definition at line 120 of file TCling.h. ◆ kNullArgv. constexpr const char* TCling::kNullArgv[] = {nullptr}. staticconstexprprivate . Definition at line 185 of file TCling.h. core/metacling/src/TCling.h; core/metacling/src/TCling.cxx. TCling. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:148259,Guid,Guide,148259,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Guid'],['Guide']
Usability,"finition at line 132 of file TStyle.h. ◆ fTitleStyle. Style_t TStyle::fTitleStyle. private . Fill area style of title PaveLabel. ; Definition at line 124 of file TStyle.h. ◆ fTitleTextColor. Color_t TStyle::fTitleTextColor. private . Title text color. ; Definition at line 120 of file TStyle.h. ◆ fTitleW. Float_t TStyle::fTitleW. private . Width of title box. ; Definition at line 127 of file TStyle.h. ◆ fTitleX. Float_t TStyle::fTitleX. private . X position of top left corner of title box. ; Definition at line 125 of file TStyle.h. ◆ fTitleY. Float_t TStyle::fTitleY. private . Y position of top left corner of title box. ; Definition at line 126 of file TStyle.h. ◆ fViolinScaled. Bool_t TStyle::fViolinScaled. private . Violin plot, shall the violin or histos be scaled to each other by the maximum height? ; Definition at line 144 of file TStyle.h. ◆ fXaxis. TAttAxis TStyle::fXaxis. private . X axis attributes. ; Definition at line 32 of file TStyle.h. ◆ fXAxisExpXOffset. Float_t TStyle::fXAxisExpXOffset. private . X axis exponent label X offset. ; Definition at line 145 of file TStyle.h. ◆ fXAxisExpYOffset. Float_t TStyle::fXAxisExpYOffset. private . X axis exponent label Y offset. ; Definition at line 146 of file TStyle.h. ◆ fYaxis. TAttAxis TStyle::fYaxis. private . Y axis attributes. ; Definition at line 33 of file TStyle.h. ◆ fYAxisExpXOffset. Float_t TStyle::fYAxisExpXOffset. private . Y axis exponent label X offset. ; Definition at line 147 of file TStyle.h. ◆ fYAxisExpYOffset. Float_t TStyle::fYAxisExpYOffset. private . Y axis exponent label Y offset. ; Definition at line 148 of file TStyle.h. ◆ fZaxis. TAttAxis TStyle::fZaxis. private . Z axis attributes. ; Definition at line 34 of file TStyle.h. Libraries for TStyle:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TStyle.h; core/base/src/TStyle.cxx. TStyle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:110342,Guid,Guide,110342,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['Guid'],['Guide']
Usability,finition at line 193 of file MethodCuts.h. ◆ fRmsB. std::vector<Double_t>* TMVA::MethodCuts::fRmsB. private . RMSs of variables (background) ; Definition at line 200 of file MethodCuts.h. ◆ fRmsS. std::vector<Double_t>* TMVA::MethodCuts::fRmsS. private . RMSs of variables (signal) ; Definition at line 199 of file MethodCuts.h. ◆ fTestSignalEff. Double_t TMVA::MethodCuts::fTestSignalEff. private . used to test optimized signal efficiency ; Definition at line 172 of file MethodCuts.h. ◆ fTmpCutMax. Double_t* TMVA::MethodCuts::fTmpCutMax. private . temporary maximum requirement ; Definition at line 187 of file MethodCuts.h. ◆ fTmpCutMin. Double_t* TMVA::MethodCuts::fTmpCutMin. private . temporary minimum requirement ; Definition at line 186 of file MethodCuts.h. ◆ fVarHistB. std::vector<TH1*>* TMVA::MethodCuts::fVarHistB. private . reference histograms (background) ; Definition at line 206 of file MethodCuts.h. ◆ fVarHistB_smooth. std::vector<TH1*>* TMVA::MethodCuts::fVarHistB_smooth. private . smoothed reference histograms (background) ; Definition at line 208 of file MethodCuts.h. ◆ fVarHistS. std::vector<TH1*>* TMVA::MethodCuts::fVarHistS. private . reference histograms (signal) ; Definition at line 205 of file MethodCuts.h. ◆ fVarHistS_smooth. std::vector<TH1*>* TMVA::MethodCuts::fVarHistS_smooth. private . smoothed reference histograms (signal) ; Definition at line 207 of file MethodCuts.h. ◆ fVarPdfB. std::vector<PDF*>* TMVA::MethodCuts::fVarPdfB. private . reference PDFs (background) ; Definition at line 210 of file MethodCuts.h. ◆ fVarPdfS. std::vector<PDF*>* TMVA::MethodCuts::fVarPdfS. private . reference PDFs (signal) ; Definition at line 209 of file MethodCuts.h. Libraries for TMVA::MethodCuts:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodCuts.h; tmva/tmva/src/MethodCuts.cxx. TMVAMethodCuts. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:53413,Guid,Guide,53413,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,1,['Guid'],['Guide']
Usability,"finition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . Copy material properties. ; Definition at line 1159 of file RGeomData.cxx. ◆ CountShapeFaces(). int RGeomDescription::CountShapeFaces ; (; TGeoShape * ; shape). private . Count number of faces for the shape. ; Definition at line 937 of file RGeomData.cxx. ◆ FindNodeId(). int RGeomDescription::FindNodeId ; (; const std::vector< int > & ; stack). Returns nodeid for given stack array, returns -1 in case of failure. ; Definition at line 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:13210,Clear,ClearPhysNodeVisibility,13210,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['Clear'],['ClearPhysNodeVisibility']
Usability,"finition at line 2235 of file TRootBrowserLite.cxx. ◆ Checked(). void TRootBrowserLite::Checked ; (; TObject * ; obj, . Bool_t ; check . ). virtual . Emits signal when double clicking on icon. ; Definition at line 2562 of file TRootBrowserLite.cxx. ◆ CheckObjectItem(). void TRootBrowserLite::CheckObjectItem ; (; TObject * ; obj, . Bool_t ; check = kFALSE . ). overridevirtual . Check / uncheck the TGListTreeItem corresponding to this object and add a checkmark on TGLVEntry if check = kTRUE. ; Reimplemented from TBrowserImp.; Definition at line 1347 of file TRootBrowserLite.cxx. ◆ Class(). static TClass * TRootBrowserLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRootBrowserLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRootBrowserLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 165 of file TRootBrowserLite.h. ◆ ClearHistory(). void TRootBrowserLite::ClearHistory ; (; ). private . clear navigation history ; Definition at line 2301 of file TRootBrowserLite.cxx. ◆ CloseTabs(). void TRootBrowserLite::CloseTabs ; (; ). inlineoverridevirtual . Reimplemented from TBrowserImp.; Definition at line 131 of file TRootBrowserLite.h. ◆ CloseWindow(). void TRootBrowserLite::CloseWindow ; (; ). overridevirtual . In case window is closed via WM we get here. ; Reimplemented from TGMainFrame.; Definition at line 1578 of file TRootBrowserLite.cxx. ◆ CreateBrowser(). void TRootBrowserLite::CreateBrowser ; (; const char * ; name). private . Create the actual browser. ; Definition at line 977 of file TRootBrowserLite.cxx. ◆ DeclFileName(). static const char * TRootBrowserLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 165 of file TRootBrowserLite.h. ◆ DeleteListTreeItem(). void TRootBrowserLite::DeleteListTreeItem ; (; TGListTreeItem * ; item). priva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:46604,Clear,ClearHistory,46604,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['Clear'],['ClearHistory']
Usability,"finition at line 321 of file TClonesArray.cxx. ◆ CanBypassStreamer(). Bool_t TClonesArray::CanBypassStreamer ; (; ); const. inline . Definition at line 64 of file TClonesArray.h. ◆ Class(). static TClass * TClonesArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TClonesArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClonesArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 83 of file TClonesArray.h. ◆ Clear(). void TClonesArray::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Only use this routine when your objects don't allocate memory since it will not call the object dtors. However, if the class in the TClonesArray implements the function Clear(Option_t *option) and if option = ""C"" the function Clear() is called for all objects in the array. In the function Clear(), one can delete objects or dynamic arrays allocated in the class. This procedure is much faster than calling TClonesArray::Delete(). When the option starts with ""C+"", eg ""C+xyz"" the objects in the array are in turn cleared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, it is the callers responsibility to insure that the object is returned to a known state, usually by calling the Clear method on the TClonesArray.; Tests to see if the destructor has been called on the object. If so, or if the object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:33453,Clear,Clear,33453,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"finition at line 415 of file Rtypes.h. ◆ TESTBIT. #define TESTBIT; (;  ; n, .  ; i . );    ((Bool_t)(((n) & BIT(i)) != 0)). Definition at line 88 of file Rtypes.h. Typedef Documentation. ◆ atomic_TClass_ptr. typedef std::atomic<TClass*> atomic_TClass_ptr. Definition at line 195 of file Rtypes.h. ◆ ClassConvStreamerFunc_t. typedef void(* ClassConvStreamerFunc_t) (TBuffer &, void *, const TClass *). Definition at line 73 of file Rtypes.h. ◆ ClassStreamerFunc_t. typedef void(* ClassStreamerFunc_t) (TBuffer &, void *). Definition at line 72 of file Rtypes.h. ◆ DictFuncPtr_t. typedef TClass *(* DictFuncPtr_t) (). Definition at line 80 of file Rtypes.h. ◆ IsAGlobalFunc_t. typedef TClass *(* IsAGlobalFunc_t) (const TClass *, const void *obj). Definition at line 96 of file Rtypes.h. ◆ MemberStreamerFunc_t. typedef void(* MemberStreamerFunc_t) (TBuffer &, void *, Int_t). Definition at line 74 of file Rtypes.h. ◆ ShowMembersFunc_t. typedef void(* ShowMembersFunc_t) (const void *obj, TMemberInspector &R__insp, Bool_t isTransient). Definition at line 94 of file Rtypes.h. ◆ VoidFuncPtr_t. typedef void(* VoidFuncPtr_t) (). Definition at line 79 of file Rtypes.h. Enumeration Type Documentation. ◆ EColor. enum EColor. EnumeratorkWhite ; kBlack ; kGray ; kRed ; kGreen ; kBlue ; kYellow ; kMagenta ; kCyan ; kOrange ; kSpring ; kTeal ; kAzure ; kViolet ; kPink . Definition at line 65 of file Rtypes.h. ◆ ESysConstants. enum ESysConstants. EnumeratorkMAXSIGNALS ; kMAXPATHLEN ; kBUFFERSIZE ; kItimerResolution . Definition at line 58 of file Rtypes.h. Function Documentation. ◆ operator<<(). template<class Tmpl > . TBuffer & operator<< ; (; TBuffer & ; buf, . const Tmpl * ; obj . ). Definition at line 397 of file TBuffer.h. ◆ operator>>(). template<class Tmpl > . TBuffer & operator>> ; (; TBuffer & ; buf, . Tmpl *& ; obj . ). Definition at line 381 of file TBuffer.h. corebaseincRtypes.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h.html:21125,Guid,Guide,21125,doc/v632/Rtypes_8h.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html,1,['Guid'],['Guide']
Usability,"finition at line 428 of file GeneralLayer.h. ◆ UpdateBiasGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateBiasGradients ; (; const std::vector< Matrix_t > & ; biasGradients, . const Scalar_t ; learningRate . ). Updates the bias gradients, given some other weight gradients and learning rate. ; Definition at line 448 of file GeneralLayer.h. ◆ UpdateWeightGradients(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeightGradients ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weight gradients, given some other weight gradients and learning rate. ; Definition at line 438 of file GeneralLayer.h. ◆ UpdateWeights(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::UpdateWeights ; (; const std::vector< Matrix_t > & ; weightGradients, . const Scalar_t ; learningRate . ). Updates the weights, given the gradients and the learning rate,. ; Definition at line 418 of file GeneralLayer.h. ◆ WriteMatrixToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteMatrixToXML ; (; void * ; node, . const char * ; name, . const Matrix_t & ; matrix . ). Definition at line 521 of file GeneralLayer.h. ◆ WriteTensorToXML(). template<typename Architecture_t > . auto TMVA::DNN::VGeneralLayer< Architecture_t >::WriteTensorToXML ; (; void * ; node, . const char * ; name, . const std::vector< Matrix_t > & ; tensor . ). helper functions for XML ; Definition at line 496 of file GeneralLayer.h. Member Data Documentation. ◆ fActivationGradients. template<typename Architecture_t > . Tensor_t TMVA::DNN::VGeneralLayer< Architecture_t >::fActivationGradients. protected . Gradients w.r.t. the activations of this layer. ; Definition at line 78 of file GeneralLayer.h. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::VGeneralLayer< Architecture_t >::fBatchS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:26692,learn,learning,26692,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,1,['learn'],['learning']
Usability,"finition at line 46 of file TGDMLMatrix.h. ◆ GetRows(). size_t TGDMLMatrix::GetRows ; (; ); const. inline . Definition at line 43 of file TGDMLMatrix.h. ◆ IsA(). TClass * TGDMLMatrix::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TGDMLMatrix.h. ◆ operator=(). TGDMLMatrix & TGDMLMatrix::operator= ; (; const TGDMLMatrix & ; rhs). Definition at line 50 of file TGDMLMatrix.cxx. ◆ Print(). void TGDMLMatrix::Print ; (; Option_t * ; option = """"); const. overridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 83 of file TGDMLMatrix.cxx. ◆ Set(). void TGDMLMatrix::Set ; (; size_t ; r, . size_t ; c, . Double_t ; a . ). Definition at line 69 of file TGDMLMatrix.cxx. ◆ SetMatrixAsString(). void TGDMLMatrix::SetMatrixAsString ; (; const char * ; mat). inline . Definition at line 45 of file TGDMLMatrix.h. ◆ Streamer(). void TGDMLMatrix::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGDMLMatrix::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TGDMLMatrix.h. Member Data Documentation. ◆ fMatrix. Double_t* TGDMLMatrix::fMatrix = nullptr. private . Definition at line 54 of file TGDMLMatrix.h. ◆ fNcols. size_t TGDMLMatrix::fNcols = 0. private . Definition at line 53 of file TGDMLMatrix.h. ◆ fNelem. Int_t TGDMLMatrix::fNelem = 0. private . Definition at line 51 of file TGDMLMatrix.h. ◆ fNrows. size_t TGDMLMatrix::fNrows = 0. private . Definition at line 52 of file TGDMLMatrix.h. Libraries for TGDMLMatrix:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGDMLMatrix.h; geom/geom/src/TGDMLMatrix.cxx. TGDMLMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLMatrix.html:15466,Guid,Guide,15466,doc/master/classTGDMLMatrix.html,https://root.cern,https://root.cern/doc/master/classTGDMLMatrix.html,1,['Guid'],['Guide']
Usability,"finition at line 477 of file TSessionViewer.h. ◆ GetLVContainer(). TGLVContainer * TSessionOutputFrame::GetLVContainer ; (; ). inline . Definition at line 472 of file TSessionViewer.h. ◆ IsA(). TClass * TSessionOutputFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 477 of file TSessionViewer.h. ◆ OnElementClicked(). void TSessionOutputFrame::OnElementClicked ; (; TGLVEntry * ; entry, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). Handle mouse clicks on list view items. ; Definition at line 3525 of file TSessionViewer.cxx. ◆ OnElementDblClicked(). void TSessionOutputFrame::OnElementDblClicked ; (; TGLVEntry * ; entry, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). Handle double-clicks on list view items. ; Definition at line 3538 of file TSessionViewer.cxx. ◆ RemoveAll(). void TSessionOutputFrame::RemoveAll ; (; ). inlineoverridevirtual . Remove all frames from composite frame. ; Reimplemented from TGCompositeFrame.; Definition at line 475 of file TSessionViewer.h. ◆ Streamer(). void TSessionOutputFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TSessionOutputFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 477 of file TSessionViewer.h. Member Data Documentation. ◆ fEntryTmp. TGLVEntry* TSessionOutputFrame::fEntryTmp. private . Definition at line 462 of file TSessionViewer.h. ◆ fLVContainer. TGLVContainer* TSessionOutputFrame::fLVContainer. private . Definition at line 463 of file TSessionViewer.h. ◆ fViewer. TSessionViewer* TSessionOutputFrame::fViewer. private . Definition at line 464 of file TSessionViewer.h. gui/sessionviewer/inc/TSessionViewer.h; gui/sessionviewer/src/TSessionViewer.cxx. TSessionOutputFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionOutputFrame.html:34148,Guid,Guide,34148,doc/master/classTSessionOutputFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionOutputFrame.html,1,['Guid'],['Guide']
Usability,finition at line 48 of file TDecayChannel.h. ◆ DaughterPdgCode(). Int_t TDecayChannel::DaughterPdgCode ; (; Int_t ; i). inline . Definition at line 46 of file TDecayChannel.h. ◆ DeclFileName(). static const char * TDecayChannel::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file TDecayChannel.h. ◆ IsA(). TClass * TDecayChannel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 48 of file TDecayChannel.h. ◆ MatrixElementCode(). Int_t TDecayChannel::MatrixElementCode ; (; ). inline . Definition at line 43 of file TDecayChannel.h. ◆ NDaughters(). Int_t TDecayChannel::NDaughters ; (; ). inline . Definition at line 44 of file TDecayChannel.h. ◆ Number(). Int_t TDecayChannel::Number ; (; ). inline . Definition at line 42 of file TDecayChannel.h. ◆ Streamer(). void TDecayChannel::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDecayChannel::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TDecayChannel.h. Member Data Documentation. ◆ fBranchingRatio. Double_t TDecayChannel::fBranchingRatio. protected . Definition at line 28 of file TDecayChannel.h. ◆ fDaughters. TArrayI TDecayChannel::fDaughters. protected . Definition at line 29 of file TDecayChannel.h. ◆ fMatrixElementCode. Int_t TDecayChannel::fMatrixElementCode. protected . Definition at line 27 of file TDecayChannel.h. ◆ fNumber. Int_t TDecayChannel::fNumber. protected . Definition at line 26 of file TDecayChannel.h. Libraries for TDecayChannel:. [legend]; The documentation for this class was generated from the following files:; montecarlo/eg/inc/TDecayChannel.h; montecarlo/eg/src/TDecayChannel.cxx. TDecayChannel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecayChannel.html:13468,Guid,Guide,13468,doc/master/classTDecayChannel.html,https://root.cern,https://root.cern/doc/master/classTDecayChannel.html,1,['Guid'],['Guide']
Usability,"finition at line 65 of file GSLRootFinderDeriv.cxx. ◆ SetSolver(). void ROOT::Math::GSLRootFinderDeriv::SetSolver ; (; GSLRootFdFSolver * ; s). protected . Definition at line 83 of file GSLRootFinderDeriv.cxx. ◆ Solve(). bool ROOT::Math::GSLRootFinderDeriv::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). overridevirtual . Find the root (return false if failed) ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 123 of file GSLRootFinderDeriv.cxx. ◆ Status(). int ROOT::Math::GSLRootFinderDeriv::Status ; (; ); const. inlineoverridevirtual . Return the status of last root finding. ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 119 of file GSLRootFinderDeriv.h. Member Data Documentation. ◆ fFunction. GSLFunctionDerivWrapper* ROOT::Math::GSLRootFinderDeriv::fFunction. private . Definition at line 131 of file GSLRootFinderDeriv.h. ◆ fIter. int ROOT::Math::GSLRootFinderDeriv::fIter. private . Definition at line 136 of file GSLRootFinderDeriv.h. ◆ fPrevRoot. double ROOT::Math::GSLRootFinderDeriv::fPrevRoot. mutableprivate . Definition at line 135 of file GSLRootFinderDeriv.h. ◆ fRoot. double ROOT::Math::GSLRootFinderDeriv::fRoot. mutableprivate . Definition at line 134 of file GSLRootFinderDeriv.h. ◆ fS. GSLRootFdFSolver* ROOT::Math::GSLRootFinderDeriv::fS. private . Definition at line 132 of file GSLRootFinderDeriv.h. ◆ fStatus. int ROOT::Math::GSLRootFinderDeriv::fStatus. private . Definition at line 137 of file GSLRootFinderDeriv.h. ◆ fValidPoint. bool ROOT::Math::GSLRootFinderDeriv::fValidPoint. private . Definition at line 138 of file GSLRootFinderDeriv.h. Libraries for ROOT::Math::GSLRootFinderDeriv:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRootFinderDeriv.h; math/mathmore/src/GSLRootFinderDeriv.cxx. ROOTMathGSLRootFinderDeriv. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html:8678,Guid,Guide,8678,doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html,1,['Guid'],['Guide']
Usability,"finition at line 730 of file TEventIter.cxx. Member Function Documentation. ◆ Class(). static TClass * TEventIterTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEventIterTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEventIterTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 188 of file TEventIter.h. ◆ DeclFileName(). static const char * TEventIterTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 188 of file TEventIter.h. ◆ GetCacheSize(). Long64_t TEventIterTree::GetCacheSize ; (; ). overridevirtual . Return the size in bytes of the cache, if any Return -1 if not used. ; Implements TEventIter.; Definition at line 742 of file TEventIter.cxx. ◆ GetLearnEntries(). Int_t TEventIterTree::GetLearnEntries ; (; ). overridevirtual . Return the number of entries in the learning phase. ; Implements TEventIter.; Definition at line 751 of file TEventIter.cxx. ◆ GetNextEvent(). Long64_t TEventIterTree::GetNextEvent ; (; ). overridevirtual . Get next event. ; Implements TEventIter.; Definition at line 1189 of file TEventIter.cxx. ◆ GetNextPacket(). Int_t TEventIterTree::GetNextPacket ; (; Long64_t & ; first, . Long64_t & ; num . ). overridevirtual . Get loop range. ; Implements TEventIter.; Definition at line 1009 of file TEventIter.cxx. ◆ GetTrees(). TTree * TEventIterTree::GetTrees ; (; TDSetElement * ; elem). private . Create a Tree for the main TDSetElement and for all the friends. ; Returns the main tree or 0 in case of an error. ; Definition at line 760 of file TEventIter.cxx. ◆ IsA(). TClass * TEventIterTree::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEventIter.; Definition at line 188 of file TEventIter.h. ◆ Load(). TTree * TEventIterTree::Load ; (; TDSetElement * ; elem, . B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventIterTree.html:14371,learn,learning,14371,doc/master/classTEventIterTree.html,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html,1,['learn'],['learning']
Usability,"finition at line 91 of file RSampleInfo.hxx. ◆ GetSampleId(). unsigned int ROOT::RDF::RSampleInfo::GetSampleId ; (; ); const. inline . Get the sample id as an int. ; Definition at line 70 of file RSampleInfo.hxx. ◆ GetSampleName(). const std::string & ROOT::RDF::RSampleInfo::GetSampleName ; (; ); const. inline . Get the name of the sample as a string. ; Definition at line 63 of file RSampleInfo.hxx. ◆ NEntries(). ULong64_t ROOT::RDF::RSampleInfo::NEntries ; (; ); const. inline . Return the number of entries of this sample that is being taken into consideration. ; Definition at line 125 of file RSampleInfo.hxx. ◆ operator!=(). bool ROOT::RDF::RSampleInfo::operator!= ; (; const RSampleInfo & ; other); const. inline . Definition at line 128 of file RSampleInfo.hxx. ◆ operator=() [1/2]. RSampleInfo & ROOT::RDF::RSampleInfo::operator= ; (; const RSampleInfo & ; ). default . ◆ operator=() [2/2]. RSampleInfo & ROOT::RDF::RSampleInfo::operator= ; (; RSampleInfo && ; ). default . ◆ operator==(). bool ROOT::RDF::RSampleInfo::operator== ; (; const RSampleInfo & ; other); const. inline . Definition at line 127 of file RSampleInfo.hxx. ◆ ThrowIfNoSample(). void ROOT::RDF::RSampleInfo::ThrowIfNoSample ; (; ); const. inlineprivate . Definition at line 41 of file RSampleInfo.hxx. Member Data Documentation. ◆ fEntryRange. std::pair<ULong64_t, ULong64_t> ROOT::RDF::RSampleInfo::fEntryRange. private . Definition at line 37 of file RSampleInfo.hxx. ◆ fID. std::string ROOT::RDF::RSampleInfo::fID. private . Definition at line 36 of file RSampleInfo.hxx. ◆ fSample. const ROOT::RDF::Experimental::RSample* ROOT::RDF::RSampleInfo::fSample = nullptr. private . Definition at line 39 of file RSampleInfo.hxx. Libraries for ROOT::RDF::RSampleInfo:. [legend]; The documentation for this class was generated from the following file:; tree/dataframe/inc/ROOT/RDF/RSampleInfo.hxx. ROOTRDFRSampleInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html:6931,Guid,Guide,6931,doc/master/classROOT_1_1RDF_1_1RSampleInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RSampleInfo.html,1,['Guid'],['Guide']
Usability,finition at line 93 of file TRootBrowser.h. ◆ fPlugins. TList TRootBrowser::fPlugins. protected . List of plugins. ; Definition at line 88 of file TRootBrowser.h. ◆ fPreMenuFrame. TGHorizontalFrame* TRootBrowser::fPreMenuFrame. protected . First (owned) menu frame. ; Definition at line 78 of file TRootBrowser.h. ◆ fShowCloseTab. Bool_t TRootBrowser::fShowCloseTab. protected . kTRUE to show close icon on tab elements ; Definition at line 94 of file TRootBrowser.h. ◆ fStatusBar. TGStatusBar* TRootBrowser::fStatusBar. protected . Status bar. ; Definition at line 89 of file TRootBrowser.h. ◆ fTabBottom. TGTab* TRootBrowser::fTabBottom. protected . Bottom Tab. ; Definition at line 64 of file TRootBrowser.h. ◆ fTabLeft. TGTab* TRootBrowser::fTabLeft. protected . Left Tab. ; Definition at line 62 of file TRootBrowser.h. ◆ fTabRight. TGTab* TRootBrowser::fTabRight. protected . Right Tab. ; Definition at line 63 of file TRootBrowser.h. ◆ fToolbarFrame. TGHorizontalFrame* TRootBrowser::fToolbarFrame. protected . Toolbar frame. ; Definition at line 80 of file TRootBrowser.h. ◆ fTopMenuFrame. TGHorizontalFrame* TRootBrowser::fTopMenuFrame. protected . Top menu frame. ; Definition at line 77 of file TRootBrowser.h. ◆ fV1. TGVerticalFrame* TRootBrowser::fV1. protected . Vertical frame. ; Definition at line 72 of file TRootBrowser.h. ◆ fV2. TGVerticalFrame* TRootBrowser::fV2. protected . Vertical frame. ; Definition at line 73 of file TRootBrowser.h. ◆ fVf. TGVerticalFrame* TRootBrowser::fVf. protected . Vertical frame. ; Definition at line 68 of file TRootBrowser.h. ◆ fVSplitter. TGVSplitter* TRootBrowser::fVSplitter. protected . Vertical splitter. ; Definition at line 74 of file TRootBrowser.h. Libraries for TRootBrowser:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TRootBrowser.h; gui/gui/src/TRootBrowser.cxx. TRootBrowser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowser.html:62178,Guid,Guide,62178,doc/master/classTRootBrowser.html,https://root.cern,https://root.cern/doc/master/classTRootBrowser.html,1,['Guid'],['Guide']
Usability,"finition at line 93 of file TVirtualFitter.cxx. ◆ TVirtualFitter() [2/2]. TVirtualFitter::TVirtualFitter ; (; ). Default constructor. ; Definition at line 72 of file TVirtualFitter.cxx. ◆ ~TVirtualFitter(). TVirtualFitter::~TVirtualFitter ; (; ). override . Cleanup virtual fitter. ; Definition at line 142 of file TVirtualFitter.cxx. Member Function Documentation. ◆ Chisquare(). virtual Double_t TVirtualFitter::Chisquare ; (; Int_t ; npar, . Double_t * ; params . ); const. pure virtual . Implemented in TBackCompFitter, TFumili, TFitter, and TLinearFitter. ◆ Class(). static TClass * TVirtualFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 120 of file TVirtualFitter.h. ◆ Clear(). void TVirtualFitter::Clear ; (; Option_t * ; option = """"). overridepure virtual . Set name and title to empty strings (""""). ; Reimplemented from TNamed.; Implemented in TFumili, TBackCompFitter, TFitter, and TLinearFitter. ◆ DeclFileName(). static const char * TVirtualFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 120 of file TVirtualFitter.h. ◆ ExecuteCommand(). virtual Int_t TVirtualFitter::ExecuteCommand ; (; const char * ; command, . Double_t * ; args, . Int_t ; nargs . ). pure virtual . Implemented in TBackCompFitter, TFumili, TFitter, and TLinearFitter. ◆ Fitter(). TVirtualFitter * TVirtualFitter::Fitter ; (; TObject * ; obj, . Int_t ; maxpar = 25 . ). static . Static function returning a pointer to the current fitter. ; If the fitter does not exist, the default TFitter is created. Don't delete the returned fitter object, it will be re-used. ; Definition at line 159 of file TVirtualFitter.cxx. ◆ FixParameter(). virtual void TVirtualFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFitter.html:18331,Clear,Clear,18331,doc/master/classTVirtualFitter.html,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html,1,['Clear'],['Clear']
Usability,"finition at line 98 of file TVirtualPad.h. ◆ Update(). virtual void TVirtualPad::Update ; (; ). pure virtual . Implemented in TCanvas, TPad, and TEvePad. ◆ UpdateAsync(). virtual void TVirtualPad::UpdateAsync ; (; ). pure virtual . Implemented in TCanvas, and TPad. ◆ UtoAbsPixel(). virtual Int_t TVirtualPad::UtoAbsPixel ; (; Double_t ; u); const. pure virtual . Implemented in TPad. ◆ UtoPixel(). virtual Int_t TVirtualPad::UtoPixel ; (; Double_t ; u); const. pure virtual . Implemented in TPad. ◆ VtoAbsPixel(). virtual Int_t TVirtualPad::VtoAbsPixel ; (; Double_t ; v); const. pure virtual . Implemented in TPad. ◆ VtoPixel(). virtual Int_t TVirtualPad::VtoPixel ; (; Double_t ; v); const. pure virtual . Implemented in TPad. ◆ WaitPrimitive(). virtual TObject * TVirtualPad::WaitPrimitive ; (; const char * ; pname = """", . const char * ; emode = """" . ). pure virtual . Implemented in TPad. ◆ XtoAbsPixel(). virtual Int_t TVirtualPad::XtoAbsPixel ; (; Double_t ; x); const. pure virtual . Implemented in TPad. ◆ XtoPad(). virtual Double_t TVirtualPad::XtoPad ; (; Double_t ; x); const. pure virtual . Implemented in TPad. ◆ XtoPixel(). virtual Int_t TVirtualPad::XtoPixel ; (; Double_t ; x); const. pure virtual . Implemented in TPad. ◆ YtoAbsPixel(). virtual Int_t TVirtualPad::YtoAbsPixel ; (; Double_t ; y); const. pure virtual . Implemented in TPad. ◆ YtoPad(). virtual Double_t TVirtualPad::YtoPad ; (; Double_t ; y); const. pure virtual . Implemented in TPad. ◆ YtoPixel(). virtual Int_t TVirtualPad::YtoPixel ; (; Double_t ; y); const. pure virtual . Implemented in TPad. Member Data Documentation. ◆ fResizing. Bool_t TVirtualPad::fResizing. protected . Definition at line 54 of file TVirtualPad.h. Libraries for TVirtualPad:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TVirtualPad.h; core/base/src/TVirtualPad.cxx. TVirtualPad. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPad.html:64285,Guid,Guide,64285,doc/master/classTVirtualPad.html,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html,1,['Guid'],['Guide']
Usability,"finition of a method; 76 // that will discern whether a Box is included into another one; 77 class BoxContainer; 78 {; 79 private:; 80 const Box& fBox;; 81 public:; 82 //Constructs the BoxContainer object with a Box that is meant; 83 //to include another one that will be provided later; 84 BoxContainer(const Box& b): fBox(b) {}; 85 ; 86 bool operator() (const Box& b1); 87 { return operator()(fBox, b1); }; 88 ; 89 // Looks if b2 is included in b1; 90 bool operator() (const Box& b1, const Box& b2); 91 {; 92 bool isIn = true;; 93 vector<double>::const_iterator boxit = b2.fMin.begin();; 94 vector<double>::const_iterator bigit = b1.fMax.begin();; 95 while ( isIn && boxit != b2.fMin.end() ); 96 {; 97 if ( (*boxit) >= (*bigit) ) isIn = false;; 98 ++boxit;; 99 ++bigit;; 100 }; 101 ; 102 boxit = b2.fMax.begin();; 103 bigit = b1.fMin.begin();; 104 while ( isIn && boxit != b2.fMax.end() ); 105 {; 106 if ( (*boxit) <= (*bigit) ) isIn = false;; 107 ++boxit;; 108 ++bigit;; 109 }; 110 ; 111 return isIn;; 112 }; 113 };; 114 ; 115 // Another helper class to be used in std::for_each to simplify; 116 // the code later. It implements the operator() to know if a; 117 // specified Box is big enough to contain any 'space' inside.; 118 class AreaComparer; 119 {; 120 public:; 121 AreaComparer(vector<double>::iterator iter):; 122 fThereIsArea(true),; 123 fIter(iter),; 124 fLimit(8 * std::numeric_limits<double>::epsilon()); 125 {};; 126 ; 127 void operator() (double value); 128 {; 129 if ( fabs(value- (*fIter)) < fLimit ); 130// if ( TMath::AreEqualRel(value, (*fIter), fLimit) ); 131 fThereIsArea = false;; 132 ; 133 ++fIter;; 134 }; 135 ; 136 bool IsThereArea() { return fThereIsArea; }; 137 ; 138 private:; 139 bool fThereIsArea;; 140 vector<double>::iterator fIter;; 141 double fLimit;; 142 };; 143 ; 144 ; 145 // This is the key of the SparseData structure. This method; 146 // will, by recursion, divide the area passed as an argument in; 147 // min and max into pieces to insert the Box defined",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SparseData_8cxx_source.html:3545,simpl,simplify,3545,doc/master/SparseData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SparseData_8cxx_source.html,1,['simpl'],['simplify']
Usability,"fit including the fixed ones The matrix row and columns corresponding to the fixed parameters will contain only zero's ; Definition at line 77 of file TFitResult.cxx. ◆ GetCovarianceMatrix(). TMatrixDSym TFitResult::GetCovarianceMatrix ; (; ); const. Return the covariance matrix from fit. ; The matrix is a symmetric matrix with a size N equal to the total number of parameters considered in the fit including the fixed ones The matrix row and columns corresponding to the fixed parameters will contain only zero's ; Definition at line 59 of file TFitResult.cxx. ◆ IsA(). TClass * TFitResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 79 of file TFitResult.h. ◆ Print(). void TFitResult::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print result of the fit, by default chi2, parameter values and errors. ; if option ""V"" is given print also error matrix and correlation ; Reimplemented from TObject.; Definition at line 44 of file TFitResult.cxx. ◆ Scan(). bool TFitResult::Scan ; (; unsigned int ; ipar, . TGraph * ; gr, . double ; xmin = 0, . double ; xmax = 0 . ). Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ; Definition at line 93 of file TFitResult.cxx. ◆ Streamer(). void TFitResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFitResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TFitResult.h. Libraries for TFitResult:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TFitResult.h; hist/hist/src/TFitResult.cxx. TFitResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResult.html:26194,Guid,Guide,26194,doc/master/classTFitResult.html,https://root.cern,https://root.cern/doc/master/classTFitResult.html,1,['Guid'],['Guide']
Usability,"fit panel!; First, we draw the distribution of the vertex position along X for all muons. Do that into a histogram that has 20 bins and runs from -10 to +10. Now open the fit panel and click the histogram. We want to fit a Gaussian distribution - and hat's already selected by default. Se just press ""Fit"". Looks good, right?; Fit Parameters; As mentioned before, fitting means finding the optimal set of parameters. In the menu, select ""Options"", ""Fit Parameters"" (and resize the statistics box to make its content readable). You will see the values that the minimizer has found optimal, for instance it chose 1.2 as the mean of the Gaussian and 1.041 as the width.; These values are the crucial ones for physicists: they reduce the large amount of data into just a few parameters, describing the distribution even better than the original histogram. Fitting (or ""parametrization"") is thus a cornerstone of any physics analysis.; . ‹ 3. Examining a TTree's data; up; 6. Multivariate Analysis ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/5-fitting.html:4121,Guid,Guides,4121,d/5-fitting.html,https://root.cern,https://root.cern/d/5-fitting.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"fixed params; Double_t*TMinuit::fXt[fMaxpar] Internal parameters values X saved as Xt; Double_t*TMinuit::fXts[fMaxpar] Internal parameters values X saved as Xt for fixed params; Double_tTMinuit::fYdircr; Double_tTMinuit::fYmidcr; Double_t*TMinuit::fYpt[fMaxcpt] Y array of points for contours. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TMVA::IFitterTarget&fFitterTargetfitter Target; Int_tfNumParnumber of parameters; vector<Double_t>fParametersvector holding the current parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitWrapper(TMVA::IFitterTarget& target, Int_t maxpar); constructor. Int_t Eval(Int_t , Double_t* , Double_t& , Double_t* , Int_t ); std::vector<Double_t> parameters( npar );. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void Clear(Option_t* = 0); reset the fitter environment. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx); return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc); return current errors for a parameter; ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. TObject * Clone(const char* ) const; produces a clone of this MinuitWrapper. virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MinuitWrapper.html:18419,Clear,Clear,18419,root/html528/TMVA__MinuitWrapper.html,https://root.cern,https://root.cern/root/html528/TMVA__MinuitWrapper.html,4,['Clear'],['Clear']
Usability,"fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; Now we are really done with geometry building stage, but we would like to see our simple world:; root[] top->SetLineColor(kMagenta);; root[] gGeoManager->SetTopVisible(); // the TOP is invisible; root[] top->Draw();; kMagenta@ kMagentaDefinition Rtypes.h:66; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396. Example 2: A Geometrical Hierarchy Look and Feel; Before going further, let us get a look and feel of interacting with the modeller. For this, we will use one of the examples illustrating the geometry package. To get an idea on the geometry structure created in this example, just look at rootgeom.C. You will notice that this is a bit more complex that just creating the ""world"" since several other volumes are created and put together in a hierarchy. The purpose here is just to learn how to interact with a geometry that is already built, but just few hints on the building steps in this example might be useful. The geometry here represents the word ROOT that is replicated in some symmetric manner. You might for instance ask some questions after having a first look:; Q: ""OK, I understand the first lines that load the libGeom library and create; a geometry manager object. I also recognize from the previous example the following; lines creating some materials and media, but what about the geometrical transformations below?""; A: As explained before, the model that we are trying to create is a hierarchy of volumes based on ""containment"". This is accomplished by ""positioning"" some volumes ""inside"" others. Any volume is an un-positioned object in the sense that it defines only a ""local frame"" (matching the one of its ""shape""). In order to fully define the mother-daughter relationship between two volumes one has to specify how the daughter will be positioned inside. This is accomplished by defining a ""local geometrical ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:7842,learn,learn,7842,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['learn'],['learn']
Usability,"flag is set, the category names will be used to look up the precision in the precisions map instead of the pdf names. . Definition at line 1123 of file RooSimultaneous.cxx. Friends And Related Symbol Documentation. ◆ RooSimGenContext. friend class RooSimGenContext. friend . Definition at line 129 of file RooSimultaneous.h. ◆ RooSimSplitGenContext. friend class RooSimSplitGenContext. friend . Definition at line 130 of file RooSimultaneous.h. Member Data Documentation. ◆ _indexCat. RooCategoryProxy RooSimultaneous::_indexCat. protected . Index category. ; Definition at line 132 of file RooSimultaneous.h. ◆ _indexCatSet. std::unique_ptr<RooArgSet> RooSimultaneous::_indexCatSet. mutableprivate . ! Index category wrapped in a RooArgSet if needed internally ; Definition at line 145 of file RooSimultaneous.h. ◆ _numPdf. Int_t RooSimultaneous::_numPdf = 0. protected . Number of registered PDFs. ; Definition at line 134 of file RooSimultaneous.h. ◆ _partIntMgr. RooObjCacheManager RooSimultaneous::_partIntMgr. mutableprotected . ! Component normalization manager ; Definition at line 126 of file RooSimultaneous.h. ◆ _pdfProxyList. TList RooSimultaneous::_pdfProxyList. protected . List of PDF proxies (named after applicable category state) ; Definition at line 133 of file RooSimultaneous.h. ◆ _plotCoefNormRange. const TNamed* RooSimultaneous::_plotCoefNormRange = nullptr. protected . Definition at line 119 of file RooSimultaneous.h. ◆ _plotCoefNormSet. RooSetProxy RooSimultaneous::_plotCoefNormSet. mutableprotected . Definition at line 118 of file RooSimultaneous.h. Libraries for RooSimultaneous:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooSimultaneous.h; roofit/roofitcore/src/RooSimultaneous.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooSimultaneous. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:103025,Guid,Guide,103025,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['Guid'],['Guide']
Usability,"fo(""TTree::~TTree"", ""For tree %s, allocation count is %u."", GetName(), fAllocationCount.load());; 928#ifdef R__TRACK_BASKET_ALLOC_TIME; 929 Info(""TTree::~TTree"", ""For tree %s, allocation time is %lluus."", GetName(), fAllocationTime.load());; 930#endif; 931 }; 932 ; 933 if (fDirectory) {; 934 // We are in a directory, which may possibly be a file.; 935 if (fDirectory->GetList()) {; 936 // Remove us from the directory listing.; 937 fDirectory->Remove(this);; 938 }; 939 //delete the file cache if it points to this Tree; 940 TFile *file = fDirectory->GetFile();; 941 MoveReadCache(file,nullptr);; 942 }; 943 ; 944 // Remove the TTree from any list (linked to to the list of Cleanups) to avoid the unnecessary call to; 945 // this RecursiveRemove while we delete our content.; 946 ROOT::CallRecursiveRemoveIfNeeded(*this);; 947 ResetBit(kMustCleanup); // Don't redo it.; 948 ; 949 // We don't own the leaves in fLeaves, the branches do.; 950 fLeaves.Clear();; 951 // I'm ready to destroy any objects allocated by; 952 // SetAddress() by my branches. If I have clones,; 953 // tell them to zero their pointers to this shared; 954 // memory.; 955 if (fClones && fClones->GetEntries()) {; 956 // I have clones.; 957 // I am about to delete the objects created by; 958 // SetAddress() which we are sharing, so tell; 959 // the clones to release their pointers to them.; 960 for (TObjLink* lnk = fClones->FirstLink(); lnk; lnk = lnk->Next()) {; 961 TTree* clone = (TTree*) lnk->GetObject();; 962 // clone->ResetBranchAddresses();; 963 ; 964 // Reset only the branch we have set the address of.; 965 CopyAddresses(clone,true);; 966 }; 967 }; 968 // Get rid of our branches, note that this will also release; 969 // any memory allocated by TBranchElement::SetAddress().; 970 fBranches.Delete();; 971 ; 972 // The TBranch destructor is using fDirectory to detect whether it; 973 // owns the TFile that contains its data (See TBranch::~TBranch); 974 fDirectory = nullptr;; 975 ; 976 // FIXME: We must consider",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:34346,Clear,Clear,34346,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Clear'],['Clear']
Usability,"fo);; 3636 ; 3637 if (ID == remark_module_build && !isByproductModule) {; 3638 ROOT::TMetaUtils::Error(nullptr,; 3639 ""Building module '%s' implicitly. If '%s' requires a \n""; 3640 ""dictionary please specify build dependency: '%s' depends on '%s'.\n""; 3641 ""Otherwise, specify '-mByproduct %s' to disable this diagnostic.\n"",; 3642 moduleName.c_str(), moduleName.c_str(), gOptDictionaryFileName.c_str(),; 3643 moduleName.c_str(), moduleName.c_str());; 3644 }; 3645 }; 3646 ; 3647 // All methods below just forward to the child and the default method.; 3648 virtual void clear() override; 3649 {; 3650 fChild->clear();; 3651 DiagnosticConsumer::clear();; 3652 }; 3653 ; 3654 virtual void BeginSourceFile(const clang::LangOptions &LangOpts, const clang::Preprocessor *PP) override; 3655 {; 3656 fChild->BeginSourceFile(LangOpts, PP);; 3657 DiagnosticConsumer::BeginSourceFile(LangOpts, PP);; 3658 }; 3659 ; 3660 virtual void EndSourceFile() override; 3661 {; 3662 fChild->EndSourceFile();; 3663 DiagnosticConsumer::EndSourceFile();; 3664 }; 3665 ; 3666 virtual void finish() override; 3667 {; 3668 fChild->finish();; 3669 DiagnosticConsumer::finish();; 3670 }; 3671 ; 3672 virtual bool IncludeInDiagnosticCounts() const override { return fChild->IncludeInDiagnosticCounts(); }; 3673};; 3674 ; 3675static void MaybeSuppressWin32CrashDialogs() {; 3676#if defined(_WIN32) && defined(_MSC_VER); 3677 // Suppress error dialogs to avoid hangs on build nodes.; 3678 // One can use an environment variable (Cling_GuiOnAssert) to enable; 3679 // the error dialogs.; 3680 const char *EnablePopups = getenv(""Cling_GuiOnAssert"");; 3681 if (EnablePopups == nullptr || EnablePopups[0] == '0') {; 3682 ::_set_error_mode(_OUT_TO_STDERR);; 3683 _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);; 3684 _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);; 3685 _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);; 3686 _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);; 3687 _CrtSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:145866,clear,clear,145866,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,3,['clear'],['clear']
Usability,"fo::Class()) {; 2960 continue;; 2961 }; 2962 if (info->GetClassVersion()==-4) continue; // Skip outer level namespace; 2963 TIter subnext(list);; 2964 TStreamerInfo *subinfo;; 2965 TList subClasses;; 2966 Int_t len = strlen(info->GetName());; 2967 while ((subinfo = (TStreamerInfo*)subnext())) {; 2968 if (subinfo->IsA() != TStreamerInfo::Class()) {; 2969 continue;; 2970 }; 2971 if (strncmp(info->GetName(),subinfo->GetName(),len)==0) {; 2972 // The 'sub' StreamerInfo start with the main StreamerInfo name,; 2973 // it subinfo is likely to be a nested class.; 2974 const Int_t sublen = strlen(subinfo->GetName());; 2975 if ( (sublen > len) && subinfo->GetName()[len+1]==':'; 2976 && !subClasses.FindObject(subinfo->GetName()) /* We need to insure uniqueness */); 2977 {; 2978 subClasses.Add(subinfo);; 2979 }; 2980 }; 2981 }; 2982 ngener += info->GenerateHeaderFile(clean_dirname.Data(),&subClasses,&extrainfos);; 2983 subClasses.Clear(""nodelete"");; 2984 }; 2985 extrainfos.Clear(""nodelete""); // We are done with this list.; 2986 ; 2987 TString path;; 2988 path.Form(""%s/%sProjectHeaders.h"",clean_dirname.Data(),subdirname.Data());; 2989 FILE *allfp = fopen(path,""a"");; 2990 if (!allfp) {; 2991 Error(""MakeProject"",""Cannot open output file:%s\n"",path.Data());; 2992 } else {; 2993 fprintf(allfp,""#include \""%sProjectInstances.h\""\n"", subdirname.Data());; 2994 fclose(allfp);; 2995 }; 2996 ; 2997 printf(""MakeProject has generated %d classes in %s\n"",ngener,clean_dirname.Data());; 2998 ; 2999 // generate the shared lib; 3000 if (!opt.Contains(""+"") && !makepar) {; 3001 delete list;; 3002 filelist->Delete();; 3003 delete filelist;; 3004 return;; 3005 }; 3006 ; 3007 // Makefiles files; 3008 FILE *fpMAKE = nullptr;; 3009 if (!makepar) {; 3010 // Create the MAKEP file by looping on all *.h files; 3011 // delete MAKEP if it already exists; 3012#ifdef WIN32; 3013 path.Form(""%s/makep.cmd"",clean_dirname.Data());; 3014#else; 3015 path.Form(""%s/MAKEP"",clean_dirname.Data());; 3016#endif; 3017#ifdef R_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:108202,Clear,Clear,108202,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Clear'],['Clear']
Usability,"fo::fLastStyleLast combined viewer/scene style (set in scene::pre-draw).; Float_tTGLSceneInfo::fLastWFLineWLast combined viewer/scene wire-frame line-width (set in scene::pre-draw).; Float_tTGLSceneInfo::fOLLineWOptional override of scene outline line-width; TGLSceneBase*TGLSceneInfo::fScene; UInt_tTGLSceneInfo::fSceneStampScene's time-stamp on last update.; Short_tTGLSceneInfo::fStyleOptional override of scene style; TGLBoundingBoxTGLSceneInfo::fTransformedBBox; Bool_tTGLSceneInfo::fUpdateTimeoutedSet if update was interrupted.; Bool_tTGLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0); Constructor. ~TSceneInfo(); Destructor. void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearAfterRebuild(); Clear DrawElementVector fVisibleElement and optionally resize it; so that it doesn't take more space then required by all the; elements in the scene's draw-list. void ClearAfterUpdate(); Clear DrawElementPtrVectors and optionally resize them so that; they don't take more space then required by all the elements in; the scene's draw-list. void Lodify(TGLRnrCtx& ctx); Quantize LODs for gice render-context. void PreDraw(); Prepare for drawing - fill DrawElementPtrVectors from the; contents of fVisibleElements if there was some change. void PostDraw(); Clean-up after drawing, nothing to be done here. void ResetDrawStats(); Reset draw statistics. void UpdateDrawStats(const TGLPhysicalShape& shape, Short",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene__TSceneInfo.html:6261,Clear,ClearDrawElementVec,6261,root/html602/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html602/TGLScene__TSceneInfo.html,4,['Clear'],"['Clear', 'ClearDrawElementVec']"
Usability,"foActions::TActionSequence &sequence, void *object)=0TBufferpure virtual; ApplySequence(const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection)=0TBufferpure virtual; ApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence &sequence, void *start_collection, void *end_collection)=0TBufferpure virtual; AutoExpand(Int_t size_needed)TBuffer; Browse(TBrowser *b)TObjectvirtual; Buffer() constTBufferinline; BufferSize() constTBufferinline; ByteSwapBuffer(Long64_t n, EDataType type)TBuffer; CacheList_t typedefTBufferprotected; CheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass *clss)=0TBufferpure virtual; CheckByteCount(UInt_t startpos, UInt_t bcnt, const char *classname)=0TBufferpure virtual; CheckedHash()TObjectinline; CheckObject(const TObject *obj)=0TBufferpure virtual; CheckObject(const void *obj, const TClass *ptrClass)=0TBufferpure virtual; Class()TBufferstatic; Class_Name()TBufferstatic; Class_Version()TBufferinlinestatic; ClassBegin(const TClass *, Version_t=-1)=0TBufferpure virtual; ClassEnd(const TClass *)=0TBufferpure virtual; ClassMember(const char *, const char *=nullptr, Int_t=-1, Int_t=-1)=0TBufferpure virtual; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()TBufferinlinestatic; DecrementLevel(TVirtualStreamerInfo *)=0TBufferpure virtual; Delete(Option_t *option="""")TObjectvirtual; DetachBuffer()TBufferinline; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EMode enum nameTBuffer; Error(const char *method, const char *msgfmt,.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer-members.html:1611,Clear,Clear,1611,doc/master/classTBuffer-members.html,https://root.cern,https://root.cern/doc/master/classTBuffer-members.html,1,['Clear'],['Clear']
Usability,"foldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:160827,simpl,simple,160827,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"font = GetDefaultFontStruct(), . Pixel_t ; back = GetDefaultFrameBackground() . ). inline . Definition at line 115 of file TGButtonGroup.h. ◆ ~TGHButtonGroup(). TGHButtonGroup::~TGHButtonGroup ; (; ). inlineoverride . Definition at line 123 of file TGButtonGroup.h. Member Function Documentation. ◆ Class(). static TClass * TGHButtonGroup::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGHButtonGroup::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGHButtonGroup::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 126 of file TGButtonGroup.h. ◆ DeclFileName(). static const char * TGHButtonGroup::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 126 of file TGButtonGroup.h. ◆ IsA(). TClass * TGHButtonGroup::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGButtonGroup.; Definition at line 126 of file TGButtonGroup.h. ◆ SavePrimitive(). void TGHButtonGroup::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a button group widget as a C++ statement(s) on output stream out. ; Reimplemented from TGButtonGroup.; Definition at line 716 of file TGButtonGroup.cxx. ◆ Streamer(). void TGHButtonGroup::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGButtonGroup. ◆ StreamerNVirtual(). void TGHButtonGroup::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 126 of file TGButtonGroup.h. Libraries for TGHButtonGroup:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGButtonGroup.h; gui/gui/src/TGButtonGroup.cxx. TGHButtonGroup. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHButtonGroup.html:39047,Guid,Guide,39047,doc/master/classTGHButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGHButtonGroup.html,1,['Guid'],['Guide']
Usability,"for TBits:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBits() [1/2]. TBits::TBits ; (; UInt_t ; nbits = 8). TBits constructor. All bits set to 0. ; Definition at line 33 of file TBits.cxx. ◆ TBits() [2/2]. TBits::TBits ; (; const TBits & ; original). TBits copy constructor. ; Definition at line 45 of file TBits.cxx. ◆ ~TBits(). TBits::~TBits ; (; ). virtual . TBits destructor. ; Definition at line 76 of file TBits.cxx. Member Function Documentation. ◆ Class(). static TClass * TBits::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBits::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBits::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 144 of file TBits.h. ◆ Clear(). void TBits::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the value. ; Reimplemented from TObject.; Definition at line 84 of file TBits.cxx. ◆ Compact(). void TBits::Compact ; (; ). Reduce the storage used by the object to a minimun. ; Definition at line 95 of file TBits.cxx. ◆ CountBits(). UInt_t TBits::CountBits ; (; UInt_t ; startBit = 0); const. Return number of bits set to 1 starting at bit startBit. ; Definition at line 118 of file TBits.cxx. ◆ DeclFileName(). static const char * TBits::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 144 of file TBits.h. ◆ DoAndEqual(). void TBits::DoAndEqual ; (; const TBits & ; rhs). protected . Execute (*this) &= rhs; Extra bits in rhs are ignored Missing bits in rhs are assumed to be zero. ; Definition at line 165 of file TBits.cxx. ◆ DoFlip(). void TBits::DoFlip ; (; ). protected . Execute ~(*this) ; Definition at line 205 of file TBits.cxx. ◆ DoLeftShift(). void TBits::DoLeftShift ; (; UInt_t ; shift). protected . Execute the left shi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBits.html:14605,Clear,Clear,14605,doc/master/classTBits.html,https://root.cern,https://root.cern/doc/master/classTBits.html,1,['Clear'],['Clear']
Usability,"for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at line 1798 of file TProof.cxx. ◆ CloseProgressDialog(). void TProof::CloseProgressDialog ; (; ). Close progress dialog. ; Definition at line 9283 of file TProof.cxx. ◆ Colle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75904,Clear,ClearInputData,75904,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearInputData']
Usability,"for defining the placement of a volume with respect to its container reference frame. This frame will be called 'master' and the frame of the positioned volume - 'local'. If T is a transformation used for positioning volume daughters, then: MASTER = T * LOCAL; Therefore Tis used to perform a local to master conversion, while T-1 for a master to local conversion. The second use case is the computation of the global transformation of a given object in the geometry. Since the geometry is built as 'volumes-inside-volumes', the global transformation represents the pile-up of all local transformations in the corresponding branch. Once a given object in the hierarchy becomes the current one, the conversion from master to local coordinates or the other way around can be done from the manager class.; A general homogenous transformation is defined as a 4x4 matrix embedding a rotation, a translation and a scale. The advantage of this description is that each basic transformation can be represented as a homogenous matrix, composition being performed as simple matrix multiplication.; Rotation:. \[; \left|\begin{array}{cccc}; r_{11} & r_{12} & r_{13} & 0 \\; r_{21} & r_{22} & r_{23} & 0 \\; r_{31} & r_{32} & r_{33} & 0 \\; 0 & 0 & 0 & 1; \end{array}; \right|; \]. Translation:. \[; \left|\begin{array}{cccc}; 1 & 0 & 0 & 0 \\; 0 & 1 & 0 & 0 \\; 0 & 0 & 1 & 0 \\; t_x & t_y & t_z & 1; \end{array}; \right|; \]. Scale:. \[; \left|\begin{array}{cccc}; s_x & 0 & 0 & 0 \\; 0 & s_y & 0 & 0 \\; 0 & 0 & s_z & 0 \\; 0 & 0 & 0 & 1; \end{array}; \right|; \]. Inverse rotation:. \[; \left|\begin{array}{cccc}; r_{11} & r_{21} & r_{31} & 0 \\; r_{12} & r_{22} & r_{32} & 0 \\; r_{13} & r_{23} & r_{33} & 0 \\; 0 & 0 & 0 & 1; \end{array}; \right|; \]. Inverse translation:. \[; \left|\begin{array}{cccc}; 1 & 0 & 0 & 0 \\; 0 & 1 & 0 & 0 \\; 0 & 0 & 1 & 0 \\; -t_x & -t_y & -t_z & 1; \end{array}; \right|; \]. Inverse scale:. \[; \left|\begin{array}{cccc}; \frac{1}{s_x} & 0 & 0 & 0 \\; 0 & \frac{1}{s_y} & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:54657,simpl,simple,54657,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"for defining the placement of a volume with respect to its container reference frame. This frame will be called ‘master’ and the frame of the positioned volume - ‘local’. If T is a transformation used for positioning volume daughters, then: MASTER = T * LOCAL; Therefore Tis used to perform a local to master conversion, while T-1 for a master to local conversion. The second use case is the computation of the global transformation of a given object in the geometry. Since the geometry is built as ‘volumes-inside-volumes’, the global transformation represents the pile-up of all local transformations in the corresponding branch. Once a given object in the hierarchy becomes the current one, the conversion from master to local coordinates or the other way around can be done from the manager class.; A general homogenous transformation is defined as a 4x4 matrix embedding a rotation, a translation and a scale. The advantage of this description is that each basic transformation can be represented as a homogenous matrix, composition being performed as simple matrix multiplication.; Rotation: \(\left|\begin{array}{cccc} r_{11} & r_{12} & r_{13} & 0 \\ r_{21} & r_{22} & r_{23} & 0 \\ r_{31} & r_{32} & r_{33} & 0 \\ 0 & 0 & 0 & 1 \end{array} \right|\) Translation: \(\left|\begin{array}{cccc} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \\ t_x & t_y & t_z & 1 \end{array} \right|\) Scale: \(\left|\begin{array}{cccc} s_x & 0 & 0 & 0 \\ 0 & s_y & 0 & 0 \\ 0 & 0 & s_z & 0 \\ 0 & 0 & 0 & 1 \end{array} \right|\); Inverse rotation: \(\left|\begin{array}{cccc} r_{11} & r_{21} & r_{31} & 0 \\ r_{12} & r_{22} & r_{32} & 0 \\ r_{13} & r_{23} & r_{33} & 0 \\ 0 & 0 & 0 & 1 \end{array} \right|\) Inverse translation: \(\left|\begin{array}{cccc} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \\ -t_x & -t_y & -t_z & 1 \end{array} \right|\) Inverse scale: \(\left|\begin{array}{cccc} \frac{1}{s_x} & 0 & 0 & 0 \\ 0 & \frac{1}{s_y} & 0 & 0 \\ 0 & 0 & \frac{1}{s_z} & 0 \\ 0 & 0 & 0 & 1 \end{array} ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:962310,simpl,simple,962310,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooRealSumPdf with cache-and-track. ;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:5150,intuit,intuitively,5150,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,2,['intuit'],['intuitively']
Usability,"for name)Definition MsgLogger.h:108; TMVA::MsgLogger::fgSuffixstatic const std::string fgSuffixsuffix following source nameDefinition MsgLogger.h:111; TMVA::MsgLogger::EnableOutputstatic void EnableOutput()Definition MsgLogger.cxx:68; TMVA::MsgLogger::fMinTypeEMsgType fMinTypeminimum type for outputDefinition MsgLogger.h:119; TMVA::MsgLogger::fgTypeMapstatic std::atomic< const std::map< EMsgType, std::string > * > fgTypeMapmatches output types with stringsDefinition MsgLogger.h:117; TMVA::MsgLogger::GetSourcestd::string GetSource() constDefinition MsgLogger.h:71; TMVA::MsgLogger::GetFormattedSourcestd::string GetFormattedSource() constmake sure the source name is no longer than fgMaxSourceSize:Definition MsgLogger.cxx:143; TMVA::MsgLogger::InitMapsvoid InitMaps()Create the message type and color maps.Definition MsgLogger.cxx:270; TMVA::MsgLogger::fActiveTypeEMsgType fActiveTypeactive typeDefinition MsgLogger.h:112; TMVA::MsgLogger::WriteMsgvoid WriteMsg(EMsgType type, const std::string &line) constputting the output string, the message type, and the color switcher together into a single stringDefinition MsgLogger.cxx:220; TMVA::MsgLogger::Endmsgstatic MsgLogger & Endmsg(MsgLogger &logger)end lineDefinition MsgLogger.cxx:261; TMVA::MsgLogger::fgInhibitOutputstatic std::atomic< Bool_t > fgInhibitOutputflag to suppress all outputDefinition MsgLogger.h:115; TMVA::MsgLogger::Sendvoid Send()activates the logger writerDefinition MsgLogger.cxx:185; TMVA::MsgLogger::GetMinTypeEMsgType GetMinType() constDefinition MsgLogger.h:69; TMVA::EMsgTypeEMsgTypeDefinition Types.h:55; TObjectMother of all ROOT objects.Definition TObject.h:41; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; Types.h. tmvatmvaincTMVAMsgLogger.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MsgLogger_8h_source.html:9894,Guid,Guide,9894,doc/master/MsgLogger_8h_source.html,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html,1,['Guid'],['Guide']
Usability,"for new Math classes and functions.; ROOT::Math::detail::get_manipchar_t get_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m)Definition GenVectorIO.h:54; ROOT::Math::detail::require_delimstd::basic_istream< char_t, traits_t > & require_delim(std::basic_istream< char_t, traits_t > &is, manip_t m)Definition GenVectorIO.h:113; ROOT::Math::detail::set_manipvoid set_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch)Definition GenVectorIO.h:74; ROOT::Math::detail::open@ openDefinition GenVectorIO.h:35; ROOT::Math::detail::sep@ sepDefinition GenVectorIO.h:35; ROOT::Math::detail::close@ closeDefinition GenVectorIO.h:35; ROOT::Math::detail::bitforbit@ bitforbitDefinition GenVectorIO.h:35; ROOT::Math::operator>>std::basic_istream< char_t, traits_t > & operator>>(std::basic_istream< char_t, traits_t > &is, DisplacementVector2D< T, U > &v)Definition DisplacementVector2D.h:515; ROOT::Math::operator+DisplacementVector2D< CoordSystem1, U > operator+(DisplacementVector2D< CoordSystem1, U > v1, const DisplacementVector2D< CoordSystem2, U > &v2)Addition of DisplacementVector2D vectors.Definition DisplacementVector2D.h:440; ROOT::Math::operator-DisplacementVector2D< CoordSystem1, U > operator-(DisplacementVector2D< CoordSystem1, U > v1, DisplacementVector2D< CoordSystem2, U > const &v2)Difference between two DisplacementVector2D vectors.Definition DisplacementVector2D.h:453; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701. mathgenvectorincMathGenVectorDisplacementVector2D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2DisplacementVector2D_8h_source.html:26928,Guid,Guide,26928,doc/master/GenVector_2DisplacementVector2D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector2D_8h_source.html,1,['Guid'],['Guide']
Usability,"for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:2729,simpl,simple,2729,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"for repetitive data analysis tasks, where in a loop many times the same objects, are created and deleted. The only supported way to add objects to a TClonesArray is via the new with placement method. The different Add() methods of TObjArray and its base classes are not supported.; 16.8.1 The Idea Behind TClonesArray; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete):; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); a[i] = new TTrack(x,y,z,...);; ...; }; ...; a.Delete();; }; You better use a TClonesArray which reduces the number of new/delete calls to only O(10000):; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); TTrack *track = (Track*)a.ConstructedAt(i);; track->Set(x,y,z,...);; ...; }; ...; a.Clear(); // Or Clear(""C"") if the track objects must be returned (via Track::Clear) to a default state.; }; Considering that a pair of new/delete calls on average cost about 70 ms, O(109) new/deletes will save about 19 hours. For the other collections, see the class reference guide on the web and the test program $ROOTSYS/test/tcollex.cxx.; 16.9 Template Containers and STL; Some people dislike polymorphic containers because they are not truly “type safe”. In the end, the compiler leaves it the user to ensure that the types are correct. This only leaves the other alternative: creating a new class each time a new (container organization) / (contained object) combination is needed. To say the least this could be very tedious. Most people faced with this choice would, for each type of container:; Define the class leaving a dummy name for the contained object type. When a particular container was needed, copy the code and then do a global search and replace for the contained class. C++ has a built in template scheme that effectively does jus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:855189,Clear,Clear,855189,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,3,['Clear'],['Clear']
Usability,"for the coordinates of the point, where the function is measured; Second parameter - the value being fitted; Third parameter - weight(measurement error) of this point (=1 by default). void AssignData(Int_t npoints, Int_t xncols, Double_t* x, Double_t* y, Double_t* e = 0); This function is to use when you already have all the data in arrays; and don't want to copy them into the fitter. In this function, the Use() method; of TVectorD and TMatrixD is used, so no bytes are physically moved around.; First parameter - number of points to fit; Second parameter - number of variables in the model; Third parameter - the variables of the model, stored in the following way:; (x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),... void AddToDesign(Double_t* x, Double_t y, Double_t e); Add a point to the AtA matrix and to the Atb vector. void AddTempMatrices(). void Clear(Option_t* option = """"); Clears everything. Used in TH1::Fit and TGraph::Fit(). void ClearPoints(); To be used when different sets of points are fitted with the same formula. void Chisquare(); Calculates the chisquare. void ComputeTValues(); Computes parameters' t-values and significance. Int_t Eval(); Perform the fit and evaluate the parameters; Returns 0 if the fit is ok, 1 if there are errors. void FixParameter(Int_t ipar); Fixes paramter #ipar at its current value. void FixParameter(Int_t ipar, Double_t parvalue); Fixes parameter #ipar at value parvalue. void ReleaseParameter(Int_t ipar); Releases parameter #ipar. void GetAtbVector(TVectorD& v); Get the Atb vector - a vector, used for internal computations. Double_t GetChisquare(); Get the Chisquare. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.94999999999999996); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearFitter.html:23169,Clear,ClearPoints,23169,root/html602/TLinearFitter.html,https://root.cern,https://root.cern/root/html602/TLinearFitter.html,2,['Clear'],['ClearPoints']
Usability,"for the coordinates of the point, where the function is measured; Second parameter - the value being fitted; Third parameter - weight(measurement error) of this point (=1 by default). void AssignData(Int_t npoints, Int_t xncols, Double_t* x, Double_t* y, Double_t* e = 0); This function is to use when you already have all the data in arrays; and don't want to copy them into the fitter. In this function, the Use() method; of TVectorD and TMatrixD is used, so no bytes are physically moved around.; First parameter - number of points to fit; Second parameter - number of variables in the model; Third parameter - the variables of the model, stored in the following way:; (x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),... void AddToDesign(Double_t* x, Double_t y, Double_t e); Add a point to the AtA matrix and to the Atb vector. void AddTempMatrices(). void Clear(Option_t* option = """"); Clears everything. Used in TH1::Fit and TGraph::Fit(). void ClearPoints(); To be used when different sets of points are fitted with the same formula. void Chisquare(); Calculates the chisquare. void ComputeTValues(); Computes parameters' t-values and significance. Int_t Eval(); Perform the fit and evaluate the parameters; Returns 0 if the fit is ok, 1 if there are errors. void FixParameter(Int_t ipar); Fixes paramter #ipar at its current value. void FixParameter(Int_t ipar, Double_t parvalue); Fixes parameter #ipar at value parvalue. void ReleaseParameter(Int_t ipar); Releases parameter #ipar. void GetAtbVector(TVectorD& v); Get the Atb vector - a vector, used for internal computations. Double_t GetChisquare(); Get the Chisquare. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLinearFitter.html:22532,Clear,ClearPoints,22532,root/html528/TLinearFitter.html,https://root.cern,https://root.cern/root/html528/TLinearFitter.html,4,['Clear'],['ClearPoints']
Usability,"for the maximum number of calls to be registered in the Tree.; The default value is 5000000.; The 3 arguments can be set in $ROOTSYS/etc/system.rootrc; Root.TMemStat.system gnubuiltin; Root.TMemStat.buffersize 100000; Root.TMemStat.maxcalls 5000000. TMemStat::Show creates 3 canvases.; -In canvas1 it displays a dynamic histogram showing for pages (10 kbytes by default); the percentage of the page used.; A summary pave shows the total memory still in use when the TMemStat object; goes out of scope and the average occupancy of the pages.; The average occupancy gives a good indication of the memory fragmentation. -In canvas2 it displays the histogram of memory leaks in decreasing order.; when moving the mouse on this canvas, a tooltip shows the backtrace for the leak; in the bin below the mouse. -In canvas3 it displays the histogram of the nbigleaks largest leaks (default is 20); for each leak, the number of allocs and average alloc size is shown. Simply do:; root > TMemStat::Show(); or specifying arguments; root > TMemStat::Show(0.1,20,""mydir/mymemstat.root"");. The first argument to Show is the percentage of the time of the original job; that produced the file after which the display is updated. By default update=0.1,; ie 10 time intervals will be shown.; The second argument is nbigleaks.; The third argument is the imput file name (result of TMemStat).; If this argument is omitted, Show will take the most recent file; generated by TMemStat. You can restrict the address range to be analyzed via TMemStatShow::SetAddressRange; You can restrict the entry range to be analyzed via TMemStatShow::SetEntryRange. Function Members (Methods); public:. TMemStat(const TMemStat&); TMemStat(Option_t* option = ""read"", Int_t buffersize = 10000, Int_t maxcalls = 5000000); virtual~TMemStat(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMemStat.html:2798,Simpl,Simply,2798,root/html528/TMemStat.html,https://root.cern,https://root.cern/root/html528/TMemStat.html,4,['Simpl'],['Simply']
Usability,"for the maximum number of calls to be registered in the Tree.; The default value is 5000000.; The 3 arguments can be set in $ROOTSYS/etc/system.rootrc; Root.TMemStat.system gnubuiltin; Root.TMemStat.buffersize 100000; Root.TMemStat.maxcalls 5000000. TMemStat::Show creates 3 canvases.; -In canvas1 it displays a dynamic histogram showing for pages (10 kbytes by default); the percentage of the page used.; A summary pave shows the total memory still in use when the TMemStat object; goes out of scope and the average occupancy of the pages.; The average occupancy gives a good indication of the memory fragmentation. -In canvas2 it displays the histogram of memory leaks in decreasing order.; when moving the mouse on this canvas, a tooltip shows the backtrace for the leak; in the bin below the mouse. -In canvas3 it displays the histogram of the nbigleaks largest leaks (default is 20); for each leak, the number of allocs and average alloc size is shown. Simply do:; root > TMemStat::Show(); or specifying arguments; root > TMemStat::Show(0.1,20,""mydir/mymemstat.root"");. The first argument to Show is the percentage of the time of the original job; that produced the file after which the display is updated. By default update=0.1,; ie 10 time intervals will be shown.; The second argument is nbigleaks.; The third argument is the imput file name (result of TMemStat).; If this argument is omitted, Show will take the most recent file; generated by TMemStat. You can restrict the address range to be analyzed via TMemStatShow::SetAddressRange; You can restrict the entry range to be analyzed via TMemStatShow::SetEntryRange. Function Members (Methods); public:. virtual~TMemStat(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMemStat.html:2798,Simpl,Simply,2798,root/html602/TMemStat.html,https://root.cern,https://root.cern/root/html602/TMemStat.html,2,['Simpl'],['Simply']
Usability,"for user objects attached to TGeoVolume or TGeoNode.Definition TGeoExtension.h:17; TGeoExtension::Grabvirtual TGeoExtension * Grab()=0; TGeoExtension::Releasevirtual void Release() const =0; TGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition.Definition TGeoMatrix.h:458; TGeoHMatrix::MultiplyLeftvoid MultiplyLeft(const TGeoMatrix *left)multiply to the left with an other transformation if right is identity matrix, just returnDefinition TGeoMatrix.cxx:2670; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::GetListOfOverlapsTObjArray * GetListOfOverlaps()Definition TGeoManager.h:469; TGeoManager::GetListOfMediaTList * GetListOfMedia() constDefinition TGeoManager.h:472; TGeoManager::SetUserPaintVolumevoid SetUserPaintVolume(TGeoVolume *vol)Definition TGeoManager.h:235; TGeoManager::GetListOfVolumesTObjArray * GetListOfVolumes() constDefinition TGeoManager.h:473; TGeoManager::ClearOverlapsvoid ClearOverlaps()Clear the list of overlaps.Definition TGeoManager.cxx:1605; TGeoManager::GetListOfMatricesTObjArray * GetListOfMatrices() constDefinition TGeoManager.h:470; TGeoManager::IsClosedBool_t IsClosed() constDefinition TGeoManager.h:297; TGeoManager::GetGeomPainterTVirtualGeoPainter * GetGeomPainter()Make a default painter if none present. Returns pointer to it.Definition TGeoManager.cxx:2916; TGeoManager::SetVisOptionvoid SetVisOption(Int_t option=0)set drawing mode :Definition TGeoManager.cxx:2426; TGeoManager::AddMaterialInt_t AddMaterial(const TGeoMaterial *material)Add a material to the list. Returns index of the material in list.Definition TGeoManager.cxx:616; TGeoManager::GetHMatrixTGeoHMatrix * GetHMatrix()Return stored current matrix (global matrix of the next touched node).Definition TGeoManager.cxx:2139; TGeoManager::AddVolumeInt_t AddVolume(TGeoVolume *volume)Add a volume to the list. Returns index of the volume in list.Definition TGeoManager.cxx:743; TGeoManager::IsS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:122130,Clear,ClearOverlapsvoid,122130,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,3,['Clear'],"['Clear', 'ClearOverlaps', 'ClearOverlapsvoid']"
Usability,"form the merge operation of a graphDefinition TGraph.cxx:2676; TGraph::SwapPointsvirtual void SwapPoints(Int_t pos1, Int_t pos2)Swap points.Definition TGraph.cxx:2583; TGraph::FillZerovirtual void FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE)Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes.Definition TGraph.cxx:1102; TGraph::fXDouble_t * fX[fNpoints] array of X pointsDefinition TGraph.h:47; TGraph::GetPointvirtual Int_t GetPoint(Int_t i, Double_t &x, Double_t &y) constGet x and y values for point number i.Definition TGraph.cxx:1533; TGraph::CopyPointsvirtual Bool_t CopyPoints(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin)Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin !...Definition TGraph.cxx:779; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. histhistsrcTGraphBentErrors.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:35164,Guid,Guide,35164,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['Guid'],['Guide']
Usability,"form1"",0,10);; sqroot->SetParameters(10,4,1,20);; ; //; // Create a one dimensional histogram (one float per bin); // and fill it following the distribution in function sqroot.; //; TH1F *h1f = new TH1F(""h1f"",""Test random numbers"",200,0,10);; h1f->SetFillColor(45);; h1f->FillRandom(""sqroot"",100000);; h1f->Draw();; TPaveLabel *lfunction = new TPaveLabel(5,39,9.8,46,""The sqroot function"");; lfunction->SetFillColor(41);; ; c1->SetGridx();; c1->SetGridy();; ; h1f->SetDirectory(nullptr);; ; c1->Update();; ; sqroot->SetParameters(200,4,1,20);; }; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TCanvas.h; TF1.h; TH1F.h; TPaveLabel.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TFormulaThe Formula class.Definition TFormula.h:89; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file qa2.C. tutorialsfitqa2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/qa2_8C.html:2719,Guid,Guide,2719,doc/master/qa2_8C.html,https://root.cern,https://root.cern/doc/master/qa2_8C.html,1,['Guid'],['Guide']
Usability,form::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooUnblindUniform::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 40 of file RooUnblindUniform.h. ◆ clone(). TObject * RooUnblindUniform::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 30 of file RooUnblindUniform.h. ◆ DeclFileName(). static const char * RooUnblindUniform::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 40 of file RooUnblindUniform.h. ◆ evaluate(). double RooUnblindUniform::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate RooBlindTools unhide-offset method on blind value. ; Implements RooAbsReal.; Definition at line 68 of file RooUnblindUniform.cxx. ◆ IsA(). TClass * RooUnblindUniform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsHiddenReal.; Definition at line 40 of file RooUnblindUniform.h. ◆ Streamer(). void RooUnblindUniform::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsHiddenReal. ◆ StreamerNVirtual(). void RooUnblindUniform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 40 of file RooUnblindUniform.h. Member Data Documentation. ◆ _blindEngine. RooBlindTools RooUnblindUniform::_blindEngine. protected . Definition at line 38 of file RooUnblindUniform.h. ◆ _value. RooRealProxy RooUnblindUniform::_value. protected . Definition at line 37 of file RooUnblindUniform.h. Libraries for RooUnblindUniform:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooUnblindUniform.h; roofit/roofit/src/RooUnblindUniform.cxx. RooUnblindUniform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindUniform.html:65137,Guid,Guide,65137,doc/master/classRooUnblindUniform.html,https://root.cern,https://root.cern/doc/master/classRooUnblindUniform.html,1,['Guid'],['Guide']
Usability,"formance; 75}; 76 ; 77 ; 78} //namespace Math; 79} //namespace ROOT; Quaternion.h; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; qfloat * qDefinition THbookFile.cxx:89; ROOT::Math::QuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k).Definition Quaternion.h:49; ROOT::Math::Quaternion::QuaternionQuaternion()Default constructor (identity rotation)Definition Quaternion.h:60; ROOT::Math::Quaternion::UScalar U() constAccess to the four quaternion components: U() is the coefficient of the identity Pauli matrix,...Definition Quaternion.h:167; ROOT::Math::Quaternion::operator*AVector operator*(const AVector &v) constOverload operator * for rotation on a vector.Definition Quaternion.h:242; ROOT::Math::Quaternion::KScalar K() constDefinition Quaternion.h:170; ROOT::Math::Quaternion::JScalar J() constDefinition Quaternion.h:169; ROOT::Math::RotationXRotation class representing a 3D rotation about the X axis by the angle of rotation.Definition RotationX.h:45; ROOT::Math::RotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation.Definition RotationY.h:45; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; I#define I(x, y, z); MathNamespace for new Math classes and functions.; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorsrcQuaternionXaxial.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/QuaternionXaxial_8cxx_source.html:4186,Guid,Guide,4186,doc/master/QuaternionXaxial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/QuaternionXaxial_8cxx_source.html,1,['Guid'],['Guide']
Usability,"formation for all or the slowest showlast workers. ;  ; void RatePlot (const char *wrks=0);  Show event processing or MB processing rate plot vs time. ;  ; void SetDebug (Int_t d=0);  Static setter for the verbosity level. ;  ; Int_t SetSaveResult (const char *file=""results.root"", Option_t *mode=""RECREATE"");  Set save result mode and validate 'file' according to 'mode'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Summary (Option_t *opt="""", const char *out="""");  Print summary of query. ;  ; void WorkerActivity ();  Measure the worker activity. ;  ; Bool_t WrkInfoOK () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis.html:3235,Clear,Clear,3235,doc/master/classTProofPerfAnalysis.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis.html,1,['Clear'],['Clear']
Usability,"fox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RLogChannel() [1/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ). default . Construct an anonymous channel. . ◆ RLogChannel() [2/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; ELogLevel ; verbosity). inlineexplicit . Construct an anonymous channel with a default verbosity. ; Definition at line 113 of file RLogger.hxx. ◆ RLogChannel() [3/3]. ROOT::Experimental::RLogChannel::RLogChannel ; (; const std::string & ; name). inline . Construct a log channel given its name, which is part of the diagnostics. ; Definition at line 116 of file RLogger.hxx. Member Function Documentation. ◆ GetEffectiveVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetEffectiveVerbosity ; (; const RLogManager & ; mgr); const. inline . Definition at line 313 of file RLogger.hxx. ◆ GetName(). const std::string & ROOT::Experimental::RLogChannel::GetName ; (; ); const. inline . Definition at line 126 of file RLogger.hxx. ◆ GetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::GetVerbosity ; (; ); const. inline . Definition at line 123 of file RLogger.hxx. ◆ SetVerbosity(). ELogLevel ROOT::Experimental::RLogChannel::SetVerbosity ; (; ELogLevel ; verbosity). inline . Definition at line 118 of file RLogger.hxx. Member Data Documentation. ◆ fName. std::string ROOT::Experimental::RLogChannel::fName. private . Name as shown in diagnostics. ; Definition at line 103 of file RLogger.hxx. ◆ fVerbosity. ELogLevel ROOT::Experimental::RLogChannel::fVerbosity = ELogLevel::kUnset. private . Verbosity of this channel. By default, use the global verbosity. ; Definition at line 106 of file RLogger.hxx. Libraries for ROOT::Experimental::RLogChannel:. [legend]; The documentation for this class was generated from the following file:; core/foundation/inc/ROOT/RLogger.hxx. ROOTExperimentalRLogChannel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html:3864,Guid,Guide,3864,doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RLogChannel.html,1,['Guid'],['Guide']
Usability,"fox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGridJobStatusList(). TGridJobStatusList::TGridJobStatusList ; (; ). inline . Definition at line 36 of file TGridJobStatusList.h. ◆ ~TGridJobStatusList(). virtual TGridJobStatusList::~TGridJobStatusList ; (; ). inlinevirtual . Definition at line 37 of file TGridJobStatusList.h. Member Function Documentation. ◆ Class(). static TClass * TGridJobStatusList::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGridJobStatusList::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGridJobStatusList::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 39 of file TGridJobStatusList.h. ◆ DeclFileName(). static const char * TGridJobStatusList::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 39 of file TGridJobStatusList.h. ◆ IsA(). TClass * TGridJobStatusList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TCollection.; Definition at line 39 of file TGridJobStatusList.h. ◆ Streamer(). void TGridJobStatusList::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TCollection. ◆ StreamerNVirtual(). void TGridJobStatusList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TGridJobStatusList.h. Member Data Documentation. ◆ fJobID. TString TGridJobStatusList::fJobID. protected . Definition at line 33 of file TGridJobStatusList.h. Libraries for TGridJobStatusList:. [legend]; The documentation for this class was generated from the following file:; net/net/inc/TGridJobStatusList.h. TGridJobStatusList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJobStatusList.html:21739,Guid,Guide,21739,doc/master/classTGridJobStatusList.html,https://root.cern,https://root.cern/doc/master/classTGridJobStatusList.html,1,['Guid'],['Guide']
Usability,"frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);; ; // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));; ; // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();; ; // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;; ; return mainframe;; }; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree.Definition TTreeTableInterface.h:25; TTreeTableInterface::SetSelectionvirtual void SetSelection(const char *selection)Set the selection expression.Definition TTreeTableInterface.cxx:140; TTreeTableInterface::AddColumnvirtual void AddColumn(const char *expression, UInt_t position)Add column according ot expression at position, TGTable->Update() is needed afterwards to apply the c...Definition TTreeTableInterface.cxx:378. Definition at line 34 of file TGTable.h. Public Member Functions;  TGTable (const TGWindow *p=nullptr, Int_t id=0, TVirtualTableInterface *interface=nullptr, UInt_t nrows=50, UInt_t ncolumns=20);  TGTable constuctor. ;  ;  ~TGTable () override;  TGTable destructor. ;  ; virtual TGTableCell * FindCell (TGString label);  Find the TGTableCell with label. ;  ; virtual const TGTableCell * FindCell (TGString label) const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:5833,simpl,simple,5833,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['simpl'],['simple']
Usability,"frame width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionOutputFrame.html:18902,feedback,feedback,18902,root/html534/TSessionOutputFrame.html,https://root.cern,https://root.cern/root/html534/TSessionOutputFrame.html,1,['feedback'],['feedback']
Usability,"frame width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:20; This pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionOutputFrame.html:18783,feedback,feedback,18783,root/html528/TSessionOutputFrame.html,https://root.cern,https://root.cern/root/html528/TSessionOutputFrame.html,1,['feedback'],['feedback']
Usability,"frame width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:37; This pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSessionOutputFrame.html:18883,feedback,feedback,18883,root/html530/TSessionOutputFrame.html,https://root.cern,https://root.cern/root/html530/TSessionOutputFrame.html,1,['feedback'],['feedback']
Usability,"frame width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.h 40088 2011-06-30 15:10:06Z bellenot $ » Last generated: 2011-11-03 20:22; Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionOutputFrame.html:18883,feedback,feedback,18883,root/html532/TSessionOutputFrame.html,https://root.cern,https://root.cern/root/html532/TSessionOutputFrame.html,1,['feedback'],['feedback']
Usability,"frame/df016_vecOps.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df016_vecOps.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Process collections in RDataFrame with the help of RVec. ; This tutorial shows the potential of the VecOps approach for treating collections stored in datasets, a situation very common in HEP data analysis. ; import ROOT; ; df = ROOT.RDataFrame(1024); coordDefineCode = '''ROOT::RVecD {0}(len);; std::transform({0}.begin(), {0}.end(), {0}.begin(), [](double){{return gRandom->Uniform(-1.0, 1.0);}});; return {0};'''; d = df.Define(""len"", ""gRandom->Uniform(0, 16)"")\; .Define(""x"", coordDefineCode.format(""x""))\; .Define(""y"", coordDefineCode.format(""y"")); ; # Now we have in our hands d, a RDataFrame with two columns, x and y, which; # hold collections of coordinates. The sizes of these collections vary.; # Let's now define radii radii from the x and y coordinates. We'll do it treating ; # the collections stored in the columns without looping on the individual elements.; d1 = d.Define(""r"", ""sqrt(x*x + y*y)""); ; # Now we want to plot 2 quarters of a ring with radii .5 and 1.; # Note how the cuts are performed on RVecs, comparing them with integers and; # among themselves.; ring_h = d1.Define(""rInFig"", ""r > .5 && r < 1 && x*y < 0"")\; .Define(""yFig"", ""y[rInFig]"")\; .Define(""xFig"", ""x[rInFig]"")\; .Histo2D((""fig"", ""Two quarters of a ring"", 64, -1.1, 1.1, 64, -1.1, 1.1), ""xFig"", ""yFig""); ; cring = ROOT.TCanvas(); ring_h.Draw(""Colz""); cring.SaveAs(""df016_ring.png""); ; print(""Saved figure to df016_ring.png""); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df016_vecOps.py. tutorialsdataframedf016_vecOps.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df016__vecOps_8py.html:1942,Guid,Guide,1942,doc/master/df016__vecOps_8py.html,https://root.cern,https://root.cern/doc/master/df016__vecOps_8py.html,1,['Guid'],['Guide']
Usability,"freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Tue Jun 30 14:30:45 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:53171,intuit,intuitively,53171,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,1,['intuit'],['intuitively']
Usability,"freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; Model is self normalized when used as p.d.f. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Tue Mar 10 17:14:23 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:51514,intuit,intuitively,51514,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,1,['intuit'],['intuitively']
Usability,"friend. . Definition at line 190 of file RDatasetSpec.cxx. ◆ WithGlobalRange(). RDatasetSpec & ROOT::RDF::Experimental::RDatasetSpec::WithGlobalRange ; (; const RDatasetSpec::REntryRange & ; entryRange = {}). Create an RDatasetSpec object for a given range of entries. ; Parameters. [in]entryRange. Example usage:; ROOT::RDF::Experimental::RSample s(""mySample"", ""outputTree1"", ""outputFile.root"");; ROOT::RDF::Experimental::RDatasetSpec spec;; spec.AddSample(s);; // Set the entries range to be processed: including entry 1 and excluding entry 10.; spec.WithGlobalRange({1, 10});; auto df = ROOT::RDataFrame(spec);; ROOT::RDF::Experimental::RDatasetSpec::WithGlobalRangeRDatasetSpec & WithGlobalRange(const RDatasetSpec::REntryRange &entryRange={})Create an RDatasetSpec object for a given range of entries.Definition RDatasetSpec.cxx:216. Definition at line 216 of file RDatasetSpec.cxx. Friends And Related Symbol Documentation. ◆ ::ROOT::Detail::RDF::RLoopManager. friend class ::ROOT::Detail::RDF::RLoopManager. friend . Definition at line 49 of file RDatasetSpec.hxx. Member Data Documentation. ◆ fEntryRange. REntryRange ROOT::RDF::Experimental::RDatasetSpec::fEntryRange. private . Start (inclusive) and end (exclusive) entry for the dataset processing. ; Definition at line 63 of file RDatasetSpec.hxx. ◆ fFriendInfo. ROOT::TreeUtils::RFriendInfo ROOT::RDF::Experimental::RDatasetSpec::fFriendInfo. private . List of friends. ; Definition at line 62 of file RDatasetSpec.hxx. ◆ fSamples. std::vector<RSample> ROOT::RDF::Experimental::RDatasetSpec::fSamples. private . List of samples. ; Definition at line 61 of file RDatasetSpec.hxx. Libraries for ROOT::RDF::Experimental::RDatasetSpec:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RDatasetSpec.hxx; tree/dataframe/src/RDatasetSpec.cxx. ROOTRDFExperimentalRDatasetSpec. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html:12339,Guid,Guide,12339,doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1Experimental_1_1RDatasetSpec.html,1,['Guid'],['Guide']
Usability,from RooAbsAnaConvPdf.; Definition at line 72 of file RooBDecay.h. ◆ Streamer(). void RooBDecay::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsAnaConvPdf. ◆ StreamerNVirtual(). void RooBDecay::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file RooBDecay.h. Member Data Documentation. ◆ _basisB. Int_t RooBDecay::_basisB. protected . Definition at line 69 of file RooBDecay.h. ◆ _basisCos. Int_t RooBDecay::_basisCos. protected . Definition at line 67 of file RooBDecay.h. ◆ _basisCosh. Int_t RooBDecay::_basisCosh. protected . Definition at line 65 of file RooBDecay.h. ◆ _basisSin. Int_t RooBDecay::_basisSin. protected . Definition at line 68 of file RooBDecay.h. ◆ _basisSinh. Int_t RooBDecay::_basisSinh. protected . Definition at line 66 of file RooBDecay.h. ◆ _dgamma. RooRealProxy RooBDecay::_dgamma. protected . Definition at line 59 of file RooBDecay.h. ◆ _dm. RooRealProxy RooBDecay::_dm. protected . Definition at line 64 of file RooBDecay.h. ◆ _f0. RooRealProxy RooBDecay::_f0. protected . Definition at line 60 of file RooBDecay.h. ◆ _f1. RooRealProxy RooBDecay::_f1. protected . Definition at line 61 of file RooBDecay.h. ◆ _f2. RooRealProxy RooBDecay::_f2. protected . Definition at line 62 of file RooBDecay.h. ◆ _f3. RooRealProxy RooBDecay::_f3. protected . Definition at line 63 of file RooBDecay.h. ◆ _t. RooRealProxy RooBDecay::_t. protected . Definition at line 57 of file RooBDecay.h. ◆ _tau. RooRealProxy RooBDecay::_tau. protected . Definition at line 58 of file RooBDecay.h. ◆ _type. DecayType RooBDecay::_type. protected . Definition at line 70 of file RooBDecay.h. Libraries for RooBDecay:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooBDecay.h; roofit/roofit/src/RooBDecay.cxx. RooBDecay. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBDecay.html:84288,Guid,Guide,84288,doc/master/classRooBDecay.html,https://root.cern,https://root.cern/doc/master/classRooBDecay.html,1,['Guid'],['Guide']
Usability,"from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <RooFit/xRooFit/xRooHypoSpace.h>. Inheritance diagram for ROOT::Experimental::XRooFit::xRooHypoSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Class(). static TClass * ROOT::Experimental::XRooFit::xRooHypoSpace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::Experimental::XRooFit::xRooHypoSpace::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 30 of file xRooHypoSpace.h. ◆ DeclFileName(). static const char * ROOT::Experimental::XRooFit::xRooHypoSpace::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 30 of file xRooHypoSpace.h. ◆ IsA(). virtual TClass * ROOT::Experimental::XRooFit::xRooHypoSpace::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 30 of file xRooHypoSpace.h. ◆ Streamer(). virtual void ROOT::Experimental::XRooFit::xRooHypoSpace::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void ROOT::Experimental::XRooFit::xRooHypoSpace::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 30 of file xRooHypoSpace.h. Libraries for ROOT::Experimental::XRooFit::xRooHypoSpace:. [legend]; The documentation for this class was generated from the following file:; roofit/xroofit/inc/RooFit/xRooFit/xRooHypoSpace.h. ROOTExperimentalXRooFitxRooHypoSpace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:20275,Guid,Guide,20275,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,1,['Guid'],['Guide']
Usability,"from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/SimpleInterval.h>. Inheritance diagram for RooStats::SimpleInterval:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SimpleInterval() [1/3]. SimpleInterval::SimpleInterval ; (; const char * ; name = nullptr). explicit . default constructor ; Default constructor. ; Definition at line 42 of file SimpleInterval.cxx. ◆ SimpleInterval() [2/3]. SimpleInterval::SimpleInterval ; (; const SimpleInterval & ; other, . const char * ; name . ). default constructor ; fParameters.add( other.fParameters ); ; Definition at line 51 of file SimpleInterval.cxx. ◆ SimpleInterval() [3/3]. SimpleInterval::SimpleInterval ; (; const char * ; name, . const RooRealVar & ; var, . double ; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParameters ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implements RooStats::ConfInterval.; Definition at line 122 of file SimpleInterval.cxx. ◆ Class(). static TClass * RooStats::SimpleInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::SimpleInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SimpleInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:14009,Simpl,SimpleInterval,14009,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,from TObject.; Definition at line 98 of file TPerfStats.cxx. ◆ Streamer(). void TPerfEvent::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPerfEvent::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file TPerfStats.h. Member Data Documentation. ◆ fBytesRead. Long64_t TPerfEvent::fBytesRead. Definition at line 51 of file TPerfStats.h. ◆ fCpuTime. Double_t TPerfEvent::fCpuTime. Definition at line 55 of file TPerfStats.h. ◆ fEventsProcessed. Long64_t TPerfEvent::fEventsProcessed. Definition at line 50 of file TPerfStats.h. ◆ fEvtNode. TString TPerfEvent::fEvtNode. Definition at line 42 of file TPerfStats.h. ◆ fFileClass. TString TPerfEvent::fFileClass. Definition at line 48 of file TPerfStats.h. ◆ fFileName. TString TPerfEvent::fFileName. Definition at line 47 of file TPerfStats.h. ◆ fIsOk. Bool_t TPerfEvent::fIsOk. Definition at line 57 of file TPerfStats.h. ◆ fIsStart. Bool_t TPerfEvent::fIsStart. Definition at line 56 of file TPerfStats.h. ◆ fLatency. Double_t TPerfEvent::fLatency. Definition at line 53 of file TPerfStats.h. ◆ fLen. Long64_t TPerfEvent::fLen. Definition at line 52 of file TPerfStats.h. ◆ fNodeName. TString TPerfEvent::fNodeName. Definition at line 46 of file TPerfStats.h. ◆ fProcTime. Double_t TPerfEvent::fProcTime. Definition at line 54 of file TPerfStats.h. ◆ fSlave. TString TPerfEvent::fSlave. Definition at line 49 of file TPerfStats.h. ◆ fSlaveName. TString TPerfEvent::fSlaveName. Definition at line 45 of file TPerfStats.h. ◆ fTimeStamp. TTimeStamp TPerfEvent::fTimeStamp. Definition at line 43 of file TPerfStats.h. ◆ fType. TVirtualPerfStats::EEventType TPerfEvent::fType. Definition at line 44 of file TPerfStats.h. proof/proofplayer/inc/TPerfStats.h; proof/proofplayer/src/TPerfStats.cxx. TPerfEvent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPerfEvent.html:13914,Guid,Guide,13914,doc/master/classTPerfEvent.html,https://root.cern,https://root.cern/doc/master/classTPerfEvent.html,1,['Guid'],['Guide']
Usability,"from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'myvar1' <---> Output : variable 'myvar1'; : Input : variable 'myvar2' <---> Output : variable 'myvar2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; MLPBNN : Building Network. ; : Initializing weights; Factory : Booking method: ␛[1mDNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Layout=TANH|128,TANH|128,TANH|128,LINEAR:TrainingStrategy=LearningRate=1e-2,Momentum=0.9,ConvergenceSteps=20,BatchSize=100,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,DropConfig=0.0+0.5+0.5+0.5:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Layout=TANH|128,TANH|128,TANH|128,LINEAR:TrainingStrategy=LearningRate=1e-2,Momentum=0.9,ConvergenceSteps=20,BatchSize=100,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,DropConfig=0.0+0.5+0.5+0.5:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""N"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|128,TANH|128,TANH|128,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:6321,Learn,LearningRate,6321,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Learn'],['LearningRate']
Usability,"from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; virtual void ResetCache ();  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Int_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cache. ;  ; void StartLearningPhase ();  The name should be enough to explain the method. ;  ; virtual void StopLearningPhase ();  This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateBranches (TTree *tree);  Update pointer to current Tree and recompute pointers to the branches in the cache. ;  ;  Public Member Functions inherited from TFileCacheRead;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Creates a TFileCacheRead data structure. ;  ;  ~TFileCacheRead () override;  Destructor. ;  ; virtual void AddNoCacheBytesRead (Long64_t len);  ; virtual void A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:15886,learn,learning,15886,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['learn'],['learning']
Usability,"fsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidAdjustPos(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCopy(TObject&) const; virtual voidCursorOff(); virtual voidCursorOn(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGView::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawCursor(Int_t mode); static const TGGC&GetCursor0GC(); static const TGGC&GetCursor1GC(); static FontStruct_tTGTextView::GetDefaultFontStruct(); static const TGGC&TGTextView::GetDefaultGC(); static const TGGC&TGTextView::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextView::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTextView::HLayout(); voidInit(); virtual Bool_tTGView::ItemLayout(); voidTObject::MakeZombie(); virtual voidTGTextView::Mark(Long_t xPos, Long_t yPos); Int_tTGWidget::SetFlags(Int_t flags); virtual voidSetMenuState(); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTextView::UnMark(); virtual voidTGView::UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTextView::VLayout(). private:. TGTextEdit(const TGTextEdit&); TGTextEdit&operator=(const TGTextEdit&). Data Members; public:. enum EInser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEdit.html:19331,Clear,ClearFlags,19331,root/html528/TGTextEdit.html,https://root.cern,https://root.cern/root/html528/TGTextEdit.html,4,['Clear'],['ClearFlags']
Usability,"fter a loop on all batches Some layer (e.g. ;  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetDepth (size_t depth);  ; virtual void SetExtraLayerParameters (const std::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Private Attributes; Architecture_t::ActivationDescriptor_t fActivationDesc;  ; Tensor_t fDerivatives;  activation function gradient ;  ; Scalar_t fDropoutProbability;  Probability that an input is active. ;  ; EActivationFunction fF;  Activation function of the layer. ;  ; Tensor_t fInputActivation;  output of GEMM and input to activation function ;  ; ERegularization fReg;  The regularization method. ;  ; Scalar_t fWeightDecay;  The weight decay. ;  . Additional Inherited Members;  Protected Attributes inherited from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html:7093,learn,learningRate,7093,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"fter, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; voidAttachList(TList* alist); virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofOutputList.html:1743,Clear,Clear,1743,root/html602/TProofOutputList.html,https://root.cern,https://root.cern/root/html602/TProofOutputList.html,2,['Clear'],['Clear']
Usability,"ful application of the log view is interactive cherry-picking: just press 'C' to cherry-pick currently selected commit into your current branch.; Blame view; Blame view is extremely useful to see which lines were committed by whom. It is an improved version of the standard git blame command with a much clearer and interactive output.; Each line can be selected to display the associated full commit log and diff. Usage:; tig blame path/to/file.cxx. Interactive staging and current status; tig status opens an interactive display to quickly select files to be staged. Move over the file and press 'u' to (un)stage it. The .gitconfig file; This file contains global (~/.gitconfig) or repository-local configuration settings. You can (eg):. Set user and email information to label commits usefully:; git config --global user.name ""Chris Green"" ; git config --global user.email <email-address>. Set colors for various types of command output.; Set which local branches track which remote branches.; Set pull behavior for branches to be rebase rather than merge.; Define aliases as shortcuts for internal or external commands. See the attached .gitconfig example. Have fun!; Reproduced with permission from the following page: https://cdcvs.fnal.gov/redmine/projects/cet-is-public/wiki/GitTipsAndTri... by Chris Green. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:18892,Guid,Guides,18892,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RBrowserTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserTimer(). ROOT::RBrowserTimer::RBrowserTimer ; (; Long_t ; milliSec, . Bool_t ; mode, . RBrowser & ; br . ). inline . !< browser processing postponed requests ; constructor ; Definition at line 52 of file RBrowser.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RBrowserTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 56 of file RBrowser.cxx. Member Data Documentation. ◆ fBrowser. RBrowser& ROOT::RBrowserTimer::fBrowser. Definition at line 49 of file RBrowser.cxx. gui/browserv7/src/RBrowser.cxx. ROOTRBrowserTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserTimer.html:18029,Guid,Guide,18029,doc/master/classROOT_1_1RBrowserTimer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserTimer.html,1,['Guid'],['Guide']
Usability,"function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:7581,simpl,simple,7581,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['simpl'],['simple']
Usability,"function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetNamevoid SetName(const std::string &name)interactionDefinition ParameterSettings.h:113; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; TArcCreate an Arc.Definition TArc.h:26; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TEllipse::Drawvoid Draw(Option_t *option="""") overrideDraw this ellipse with its current attributes.Definition TEllipse.cxx:169; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TRandom3Random number generator class based on M.Definition TRandom3.h:27; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; v@ vDefinition rootcling_impl.cxx:3699; AuthorRene Brun ; Definition in file fitCircle.C. tutorialsfitfitCircle.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitCircle_8C.html:7117,Guid,Guide,7117,doc/master/fitCircle_8C.html,https://root.cern,https://root.cern/doc/master/fitCircle_8C.html,1,['Guid'],['Guide']
Usability,"function in warning situations.Definition TError.cxx:229; TH1F.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttPad::SetFrameFillColorvoid SetFrameFillColor(Color_t color=1)Definition TAttPad.h:73; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::IsWebBool_t IsWeb() const overrideIs web canvas.Definition TCanvas.cxx:1496; TCanvas::UseGLBool_t UseGL() constDefinition TCanvas.h:228; TColor::GetLinearGradientstatic Int_t GetLinearGradient(Double_t angle, const std::vector< Int_t > &colors, const std::vector< Double_t > &positions={})Static function: Returns the linear gradient color number corresponding to specified parameters.Definition TColor.cxx:2210; TColor::GetRadialGradientstatic Int_t GetRadialGradient(Double_t r, const std::vector< Int_t > &colors, const std::vector< Double_t > &positions={})Static function: Returns the radial gradient color number corresponding to specified parameters.Definition TColor.cxx:2287; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TStyle::SetCanvasPreferGLvoid SetCanvasPreferGL(Bool_t prefer=kTRUE)Definition TStyle.h:341; TStyle::SetStatColorvoid SetStatColor(Color_t color=19)Definition TStyle.h:390; AuthorsTimur Pocheptsov, Sergey Linev ; Definition in file grad.C. tutorialsglgrad.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gl_2grad_8C.html:4614,Guid,Guide,4614,doc/master/gl_2grad_8C.html,https://root.cern,https://root.cern/doc/master/gl_2grad_8C.html,1,['Guid'],['Guide']
Usability,"function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 80 of file RooBifurGauss.cxx. ◆ IsA(). TClass * RooBifurGauss::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 49 of file RooBifurGauss.h. ◆ Streamer(). void RooBifurGauss::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBifurGauss::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooBifurGauss.h. ◆ translate(). void RooBifurGauss::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 65 of file RooBifurGauss.cxx. Member Data Documentation. ◆ mean. RooRealProxy RooBifurGauss::mean. protected . Definition at line 40 of file RooBifurGauss.h. ◆ sigmaL. RooRealProxy RooBifurGauss::sigmaL. protected . Definition at line 41 of file RooBifurGauss.h. ◆ sigmaR. RooRealProxy RooBifurGauss::sigmaR. protected . Definition at line 42 of file RooBifurGauss.h. ◆ x. RooRealProxy RooBifurGauss::x. protected . Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:77941,simpl,simple,77941,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['simpl'],['simple']
Usability,"function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 80 of file RooEfficiency.cxx. ◆ IsA(). TClass * RooEfficiency::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 48 of file RooEfficiency.h. ◆ Streamer(). void RooEfficiency::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooEfficiency::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file RooEfficiency.h. ◆ translate(). void RooEfficiency::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 90 of file RooEfficiency.cxx. Member Data Documentation. ◆ _cat. RooCategoryProxy RooEfficiency::_cat. protected . Accept/reject categort. ; Definition at line 44 of file RooEfficiency.h. ◆ _effFunc. RooRealProxy RooEfficiency::_effFunc. protected . Efficiency modeling function. ; Definition at line 45 of file RooEfficiency.h. ◆ _sigCatName. TString RooEfficiency::_sigCatName. protected . Name of accept state of accept/reject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:78465,simpl,simple,78465,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['simpl'],['simple']
Usability,"g &methodTag, Double_t aux=0)evaluates MVA for given set of input variablesDefinition Reader.cxx:630; TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gToolsTools & gTools(). tutorialstmvaTMVAMulticlassApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlassApplication_8C_source.html:12024,Guid,Guide,12024,doc/master/TMVAMulticlassApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlassApplication_8C_source.html,1,['Guid'],['Guide']
Usability,"g () const override;  ; Int_t GetFontSize () const;  ; TList * GetListOfLines () const;  Get the list of lines as TObjStrings. ;  ; Bool_t GetResult (TString &result) override;  convert fLatex to a gif by creating a TLatex, drawing it on a temporary canvas, and saving that to a filename in the output directory. ;  ; const char * GetSeparator () const;  ; TClass * IsA () const override;  ; Bool_t SeparatorIsRegexp () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocLatexDirective.html:1613,Clear,Clear,1613,doc/master/classTDocLatexDirective.html,https://root.cern,https://root.cern/doc/master/classTDocLatexDirective.html,1,['Clear'],['Clear']
Usability,"g * ; text, . Int_t ; partidx = 0 . ). virtual . Set text in partition partidx in status bar. ; The TGString is adopted by the status bar. ; Definition at line 145 of file TGStatusBar.cxx. ◆ Streamer(). void TGStatusBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGHorizontalFrame. ◆ StreamerNVirtual(). void TGStatusBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file TGStatusBar.h. Friends And Related Symbol Documentation. ◆ TGStatusBarPart. friend class TGStatusBarPart. friend . Definition at line 23 of file TGStatusBar.h. Member Data Documentation. ◆ f3DCorner. Bool_t TGStatusBar::f3DCorner. protected . draw 3D corner (drawn by default) ; Definition at line 35 of file TGStatusBar.h. ◆ fgDefaultFont. const TGFont * TGStatusBar::fgDefaultFont = nullptr. staticprotected . Definition at line 37 of file TGStatusBar.h. ◆ fgDefaultGC. TGGC * TGStatusBar::fgDefaultGC = nullptr. staticprotected . Definition at line 38 of file TGStatusBar.h. ◆ fNpart. Int_t TGStatusBar::fNpart. protected . number of parts ; Definition at line 32 of file TGStatusBar.h. ◆ fParts. Int_t* TGStatusBar::fParts. protected . size of parts (in percent of total width) ; Definition at line 31 of file TGStatusBar.h. ◆ fStatusPart. TGStatusBarPart** TGStatusBar::fStatusPart. protected . frames containing statusbar text ; Definition at line 30 of file TGStatusBar.h. ◆ fXt. Int_t* TGStatusBar::fXt. protected . x position for each part ; Definition at line 34 of file TGStatusBar.h. ◆ fYt. Int_t TGStatusBar::fYt. protected . y drawing position (depending on font) ; Definition at line 33 of file TGStatusBar.h. Libraries for TGStatusBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGStatusBar.h; gui/gui/src/TGStatusBar.cxx. TGStatusBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGStatusBar.html:38711,Guid,Guide,38711,doc/master/classTGStatusBar.html,https://root.cern,https://root.cern/doc/master/classTGStatusBar.html,1,['Guid'],['Guide']
Usability,"g -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_LEFT,fit_nll_model_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_LEFT,fit_nll_model_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_LEFT,fit_nll_model_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_LEFT,fit_nll_model_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_LEFT,fit_nll_model_modelData_RIGHT'; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_extmodel_modelData_LEFT' created with bounds [10,20]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_extmodel_modelData_RIGHT' created with bounds [60,100]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(extmodel) f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html:14794,Clear,Clear,14794,doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,2,['Clear'],['Clear']
Usability,"g -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_left,fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_left,fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_left,fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_left,fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_left,fit_nll_model_modelData_right'; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'leftToMiddle' created with bounds [0,5]; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_model_modelData' created with bounds [0,5]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coeffici",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html:16353,Clear,Clear,16353,doc/master/rf204a__extendedLikelihood_8C.html,https://root.cern,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html,2,['Clear'],['Clear']
Usability,"g ; (; ). Return the next message or 0. ; Definition at line 150 of file TStatus.cxx. ◆ Print(). void TStatus::Print ; (; Option_t * ; option = """"); const. overridevirtual . Standard print function. ; Reimplemented from TNamed.; Definition at line 110 of file TStatus.cxx. ◆ Reset(). void TStatus::Reset ; (; ). Reset the iterator on the messages. ; Definition at line 142 of file TStatus.cxx. ◆ SetExitStatus(). void TStatus::SetExitStatus ; (; Int_t ; est). inline . Definition at line 66 of file TStatus.h. ◆ SetMemValues(). void TStatus::SetMemValues ; (; Long_t ; vmem = -1, . Long_t ; rmem = -1, . Bool_t ; master = kFALSE . ). Set max memory values. ; Definition at line 160 of file TStatus.cxx. ◆ Streamer(). void TStatus::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStatus. ; Reimplemented from TNamed.; Definition at line 174 of file TStatus.cxx. ◆ StreamerNVirtual(). void TStatus::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TStatus.h. Member Data Documentation. ◆ fExitStatus. Int_t TStatus::fExitStatus. private . Definition at line 44 of file TStatus.h. ◆ fInfoMsgs. THashList TStatus::fInfoMsgs. private . iterator in messages ; Definition at line 42 of file TStatus.h. ◆ fIter. TIter TStatus::fIter. private . Definition at line 41 of file TStatus.h. ◆ fMsgs. TList TStatus::fMsgs. private . Definition at line 40 of file TStatus.h. ◆ fResMaxMst. Long_t TStatus::fResMaxMst. private . Definition at line 48 of file TStatus.h. ◆ fResMemMax. Long_t TStatus::fResMemMax. private . Definition at line 46 of file TStatus.h. ◆ fVirtMaxMst. Long_t TStatus::fVirtMaxMst. private . Definition at line 47 of file TStatus.h. ◆ fVirtMemMax. Long_t TStatus::fVirtMemMax. private . Definition at line 45 of file TStatus.h. proof/proofplayer/inc/TStatus.h; proof/proofplayer/src/TStatus.cxx. TStatus. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatus.html:16212,Guid,Guide,16212,doc/master/classTStatus.html,https://root.cern,https://root.cern/doc/master/classTStatus.html,1,['Guid'],['Guide']
Usability,"g = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidCheckAndFixBoxOrientationEv(TEveVector[8] box); static voidCheckAndFixBoxOrientationFv(Float_t[8][3] box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveShape.html:2735,Clear,ClearStamps,2735,root/html602/TEveShape.html,https://root.cern,https://root.cern/root/html602/TEveShape.html,2,['Clear'],['ClearStamps']
Usability,"g > var, bool silent=false);  Add an argument and transfer the ownership to the collection from a std::unique_ptr. ;  ; template<class Arg_t > ; bool addTyped (const RooAbsCollection &list, bool silent=false);  Adds elements of a given RooAbsCollection to the container if they match the specified type. ;  ; bool allInRange (const char *rangeSpec) const;  Return true if all contained object report to have their value inside the specified range. ;  ; void assign (const RooAbsCollection &other) const;  Sets the value, cache and constant attribute of any argument in our set that also appears in the other set. ;  ; void assignFast (const RooAbsCollection &other, bool setValDirty=true) const;  Functional equivalent of assign() but assumes this and other collection have same layout. ;  ; RooAbsCollection & assignValueOnly (const RooAbsCollection &other, bool forceIfSizeOne=false);  Sets the value of any argument in our set that also appears in the other set. ;  ; const_iterator begin () const;  ; void clear ();  Clear contents. If the collection is owning, it will also delete the contents. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; bool contains (const RooAbsArg &var) const;  Check if collection contains an argument with the same name as var. ;  ; std::string contentsString () const;  Return comma separated list of contained object names as STL string. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default RooPrinable print options for given Print() flag string For inline printing only show value of objects, for default print show name,class name value and extras of each object. ;  ; void dump () const;  Base contents dumper for debugging purposes. ;  ; bool empty () const;  ; const_iterator end () const;  ; bool equals (const RooAbsCollection &otherColl) const;  Check if this and other collection have identically-named contents. ;  ; RooAbsArg * find (const char *n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:8743,clear,clear,8743,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"g > var, bool silent=false);  Add an argument and transfer the ownership to the collection from a std::unique_ptr. ;  ; template<class Arg_t > ; bool addTyped (const RooAbsCollection &list, bool silent=false);  Adds elements of a given RooAbsCollection to the container if they match the specified type. ;  ; bool allInRange (const char *rangeSpec) const;  Return true if all contained object report to have their value inside the specified range. ;  ; void assign (const RooAbsCollection &other) const;  Sets the value, cache and constant attribute of any argument in our set that also appears in the other set. ;  ; void assignFast (const RooAbsCollection &other, bool setValDirty=true) const;  Functional equivalent of assign() but assumes this and other collection have same layout. ;  ; RooAbsCollection & assignValueOnly (const RooAbsCollection &other, bool forceIfSizeOne=false);  Sets the value of any argument in our set that also appears in the other set. ;  ; const_iterator begin () const;  ; void clear ();  Clear contents. If the collection is owning, it will also delete the contents. ;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; bool contains (const RooAbsArg &var) const;  Check if collection contains an argument with the same name as var. ;  ; virtual bool containsInstance (const RooAbsArg &var) const;  Check if this exact instance is in this collection. ;  ; std::string contentsString () const;  Return comma separated list of contained object names as STL string. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default RooPrinable print options for given Print() flag string For inline printing only show value of objects, for default print show name,class name value and extras of each object. ;  ; void dump () const;  Base contents dumper for debugging purposes. ;  ; bool empty () const;  ; const_iterator end () const;  ; bool equals (const RooAbsCollection &other",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgList.html:6159,clear,clear,6159,doc/master/classRooArgList.html,https://root.cern,https://root.cern/doc/master/classRooArgList.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"g > var, bool silent=false);  Add an argument and transfer the ownership to the collection from a std::unique_ptr. ;  ; template<class Arg_t > ; bool addTyped (const RooAbsCollection &list, bool silent=false);  Adds elements of a given RooAbsCollection to the container if they match the specified type. ;  ; bool allInRange (const char *rangeSpec) const;  Return true if all contained object report to have their value inside the specified range. ;  ; void assign (const RooAbsCollection &other) const;  Sets the value, cache and constant attribute of any argument in our set that also appears in the other set. ;  ; void assignFast (const RooAbsCollection &other, bool setValDirty=true) const;  Functional equivalent of assign() but assumes this and other collection have same layout. ;  ; RooAbsCollection & assignValueOnly (const RooAbsCollection &other, bool forceIfSizeOne=false);  Sets the value of any argument in our set that also appears in the other set. ;  ; const_iterator begin () const;  ; void clear ();  Clear contents. If the collection is owning, it will also delete the contents. ;  ; virtual TObject * clone (const char *newname) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; bool contains (const RooAbsArg &var) const;  Check if collection contains an argument with the same name as var. ;  ; virtual bool containsInstance (const RooAbsArg &var) const;  Check if this exact instance is in this collection. ;  ; std::string contentsString () const;  Return comma separated list of contained object names as STL string. ;  ; virtual TObject * create (const char *newname) const =0;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default RooPrinable print options for given Print() flag string For inline printing only show value of objects, for default print show name,class name value and extras of each object. ;  ; void dump () const;  Base contents dumper for debu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:5154,clear,clear,5154,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,g Contours From TH2D ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  SearchHR1.C Example to illustrate high resolution peak searching function (class TSpectrum) ;  SearchHR3.C Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVAC,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:155139,simpl,simple,155139,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simple']
Usability,g Contours From TH2D ;  peaks2.C Example to illustrate the 2-d peak finder (class TSpectrum2) ;  SearchHR1.C Example to illustrate high resolution peak searching function (class TSpectrum) ;  SearchHR3.C Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum) ;  Smoothing.C Example to illustrate smoothing using Markov algorithm (class TSpectrum) ;  spectrumpainter.C Examples showing how to use TSpectrum2Painter (the SPEC option) ;  ► splot;  TestSPlot.CThis tutorial illustrates the use of class TSPlot and of the sPlots method ;  ► sql;  sqlcanvas.CThis is slight modification of ntuple1.C example ;  sqlcreatedb.CCreate a runcatalog table in a MySQL test database ;  sqlfilldb.CFill run catalog with nfiles entries ;  sqlselect.C;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example ex,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:154345,simpl,simple,154345,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"g Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anything to the ROOT repository is mandatory.; The ROOT continuous integration infrastructure allows to automatically check the PR also on a battery of platform, for example including macos and linux boxes.; In order to be able to run all tests, the simple steps below need to be followed; Prepare your development area and build ROOT; mkdir RootDevelopment; cd RootDevelopment; git clone https://github.com/root-project/root; git clone https://github.com/root-project/roottest; mkdir build; cd build; echo Note the cmake options; cmake -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON ../root. Inspect and run the tests; From within the build directory. List all tests: ctest -N; List all test matching a regex: ctest -N -R myregex; Run all tests on N cores: ctest -j N. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:2855,Guid,Guides,2855,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"g Conventions | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Coding Conventions. Naming conventions; Class definition conventions. Inline; Declaration Order. Avoid raw C types; Exception handling; Name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:1008,Guid,Guides,1008,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['Guid'],['Guides']
Usability,"g Dataset dataset; : Building event vectors for type 2 Signal; : Dataset[dataset] : create input formulas for tree sig_tree; : Using variable vars[0] from array expression vars of size 256; : Building event vectors for type 2 Background; : Dataset[dataset] : create input formulas for tree bkg_tree; : Using variable vars[0] from array expression vars of size 256; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 800; : Signal -- testing events : 200; : Signal -- training and testing events: 1000; : Background -- training events : 800; : Background -- testing events : 200; : Background -- training and testing events: 1000; : ; Factory : Booking method: ␛[1mTMVA_DNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:1821,Learn,LearningRate,1821,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,g ROOT::RBrowserEditorWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 75 of file RBrowser.cxx. ◆ GetTitle(). std::string ROOT::RBrowserEditorWidget::GetTitle ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 76 of file RBrowser.cxx. ◆ GetUrl(). std::string ROOT::RBrowserEditorWidget::GetUrl ; (; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 77 of file RBrowser.cxx. ◆ ResetConn(). void ROOT::RBrowserEditorWidget::ResetConn ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 73 of file RBrowser.cxx. ◆ SendWidgetContent(). std::string ROOT::RBrowserEditorWidget::SendWidgetContent ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 121 of file RBrowser.cxx. ◆ Show(). void ROOT::RBrowserEditorWidget::Show ; (; const std::string & ; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 79 of file RBrowser.cxx. Member Data Documentation. ◆ fContent. std::string ROOT::RBrowserEditorWidget::fContent. Definition at line 66 of file RBrowser.cxx. ◆ fFileName. std::string ROOT::RBrowserEditorWidget::fFileName. Definition at line 65 of file RBrowser.cxx. ◆ fFirstSend. bool ROOT::RBrowserEditorWidget::fFirstSend {false}. ! if editor content was send at least once ; Definition at line 67 of file RBrowser.cxx. ◆ fIsEditor. bool ROOT::RBrowserEditorWidget::fIsEditor {true}. ! either editor or image viewer ; Definition at line 63 of file RBrowser.cxx. ◆ fItemPath. std::string ROOT::RBrowserEditorWidget::fItemPath. ! item path in the browser ; Definition at line 68 of file RBrowser.cxx. ◆ fTitle. std::string ROOT::RBrowserEditorWidget::fTitle. Definition at line 64 of file RBrowser.cxx. gui/browserv7/src/RBrowser.cxx. ROOTRBrowserEditorWidget. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserEditorWidget.html:4331,Guid,Guide,4331,doc/v632/classROOT_1_1RBrowserEditorWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserEditorWidget.html,1,['Guid'],['Guide']
Usability,"g any lines that begin; # with '#'; file_lines = ['\t'.join([val if (val.find(' ') == -1 and val != ''); else 'empty' for val in line.split('\t')]); for line in file_lines[1:] if line[0] != '#' ]; ; # Removing NaN, setting these entries to 0.0.; # Also joining the list of strings into one large string.; file_as_string = ('\n'.join(file_lines)).replace('NaN', str(0.0)); #print(file_as_string); ; # creating an istringstream to pass into ReadStream; istring = ROOT.istringstream(file_as_string); ; # Now read the stream; output_tree.ReadStream(istring, branch_descriptor); ; output_file.cd(); output_tree.Write(); ; ; if __name__ == '__main__':; if len(sys.argv) < 2:; print(""Usage: %s file_to_parse.dat"" % sys.argv[0]); sys.exit(1); parse_CSV_file_with_TTree_ReadStream(""example_tree"", sys.argv[1]); ; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; readlinechar * readline(); parse_CSV_file_with_TTree_ReadStreamDefinition parse_CSV_file_with_TTree_ReadStream.py:1; AuthorMichael Marino ; Definition in file parse_CSV_file_with_TTree_ReadStream.py. tutorialspyrootparse_CSV_file_with_TTree_ReadStream.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/parse__CSV__file__with__TTree__ReadStream_8py.html:5885,Guid,Guide,5885,doc/master/parse__CSV__file__with__TTree__ReadStream_8py.html,https://root.cern,https://root.cern/doc/master/parse__CSV__file__with__TTree__ReadStream_8py.html,1,['Guid'],['Guide']
Usability,"g batch 21 => (128, 29); Training batch 22 => (128, 29); Training batch 23 => (128, 29); Training batch 24 => (128, 29); Training batch 25 => (128, 29); Training batch 26 => (128, 29); Training batch 27 => (128, 29); Training batch 28 => (128, 29); Training batch 29 => (128, 29); Training batch 30 => (128, 29); Training batch 31 => (128, 29); Training batch 32 => (128, 29); Training batch 33 => (128, 29); Training batch 34 => (128, 29); Training batch 35 => (128, 29); Training batch 36 => (128, 29); Training batch 37 => (128, 29); Training batch 38 => (128, 29); Training batch 39 => (128, 29); Training batch 40 => (128, 29); Training batch 41 => (128, 29); Training batch 42 => (128, 29); Training batch 43 => (128, 29); Training batch 44 => (128, 29); Training batch 45 => (128, 29); Training batch 46 => (128, 29); Training batch 47 => (128, 29); Training batch 48 => (128, 29); Training batch 49 => (128, 29); Training batch 50 => (128, 29); Training batch 51 => (128, 29); Training batch 52 => (128, 29); Training batch 53 => (128, 29); Validation batch 0 => (128, 29); Validation batch 1 => (128, 29); Validation batch 2 => (128, 29); Validation batch 3 => (128, 29); Validation batch 4 => (128, 29); Validation batch 5 => (128, 29); Validation batch 6 => (128, 29); Validation batch 7 => (128, 29); Validation batch 8 => (128, 29); Validation batch 9 => (128, 29); Validation batch 10 => (128, 29); Validation batch 11 => (128, 29); Validation batch 12 => (128, 29); Validation batch 13 => (128, 29); Validation batch 14 => (128, 29); Validation batch 15 => (128, 29); Validation batch 16 => (128, 29); Validation batch 17 => (128, 29); Validation batch 18 => (128, 29); Validation batch 19 => (128, 29); Validation batch 20 => (128, 29); Validation batch 21 => (128, 29); AuthorDante Niewenhuis ; Definition in file RBatchGenerator_NumPy.py. tutorialstmvaRBatchGenerator_NumPy.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBatchGenerator__NumPy_8py.html:3461,Guid,Guide,3461,doc/master/RBatchGenerator__NumPy_8py.html,https://root.cern,https://root.cern/doc/master/RBatchGenerator__NumPy_8py.html,1,['Guid'],['Guide']
Usability,"g current object ; Reimplemented from TDictionary.; Definition at line 81 of file TEnum.h. ◆ IsValid(). Bool_t TEnum::IsValid ; (; ). Return true if this enum object is pointing to a currently loaded enum. ; If a enum is unloaded after the TEnum is created, the TEnum will be set to be invalid. ; Definition at line 124 of file TEnum.cxx. ◆ operator=(). TEnum & TEnum::operator= ; (; const TEnum & ; src). Assign operator. ; Definition at line 81 of file TEnum.cxx. ◆ Property(). Long_t TEnum::Property ; (; ); const. overridevirtual . Get property description word. For meaning of bits see EProperty. ; Implements TDictionary.; Definition at line 139 of file TEnum.cxx. ◆ SetClass(). void TEnum::SetClass ; (; TClass * ; cl). inline . Definition at line 75 of file TEnum.h. ◆ Streamer(). void TEnum::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDictionary. ◆ StreamerNVirtual(). void TEnum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TEnum.h. ◆ Update(). void TEnum::Update ; (; DeclId_t ; id). Definition at line 156 of file TEnum.cxx. Member Data Documentation. ◆ fClass. TClass* TEnum::fClass = nullptr. private . Interpreter information, owned by TEnum. ; Definition at line 38 of file TEnum.h. ◆ fConstantList. THashList TEnum::fConstantList. private . Definition at line 36 of file TEnum.h. ◆ fInfo. ClassInfo_t* TEnum::fInfo = nullptr. private . Definition at line 37 of file TEnum.h. ◆ fQualName. std::string TEnum::fQualName. private . Owning class. ; Definition at line 39 of file TEnum.h. ◆ fUnderlyingType. EDataType TEnum::fUnderlyingType = kInt_t. private . Definition at line 40 of file TEnum.h. Libraries for TEnum:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TEnum.h; core/meta/src/TEnum.cxx. TEnum. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEnum.html:20761,Guid,Guide,20761,doc/master/classTEnum.html,https://root.cern,https://root.cern/doc/master/classTEnum.html,1,['Guid'],['Guide']
Usability,"g current object ; Reimplemented from TMVA::PDEFoam.; Reimplemented in TMVA::PDEFoamDecisionTree.; Definition at line 62 of file PDEFoamDiscriminant.h. ◆ Project2(). TH2D * TMVA::PDEFoamDiscriminant::Project2 ; (; Int_t ; idim1, . Int_t ; idim2, . ECellValue ; cell_value, . PDEFoamKernelBase * ; kernel, . UInt_t ; nbin . ). virtual . Project foam variable idim1 and variable idim2 to histogram. ; The projection algorithm is modified such that the z axis range of the returned histogram is [0, 1], as necessary for the interpretation as a discriminator. This is done by weighting the cell values (in case of cell_value = kValue) by the cell volume in all dimensions, excluding 'idim1' and 'idim2'.; Parameters:. idim1, idim2 - dimensions to project to; cell_value - the cell value to draw; kernel - a PDEFoam kernel (optional). If NULL is given, the kernel is ignored and the pure cell values are plotted.; nbin - number of bins in x and y direction of result histogram (optional, default is 50). Returns: a 2-dimensional histogram ; Reimplemented from TMVA::PDEFoam.; Definition at line 171 of file PDEFoamDiscriminant.cxx. ◆ Streamer(). virtual void TMVA::PDEFoamDiscriminant::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoam.; Reimplemented in TMVA::PDEFoamDecisionTree. ◆ StreamerNVirtual(). void TMVA::PDEFoamDiscriminant::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file PDEFoamDiscriminant.h. Member Data Documentation. ◆ fClass. UInt_t TMVA::PDEFoamDiscriminant::fClass. protected . Definition at line 42 of file PDEFoamDiscriminant.h. Libraries for TMVA::PDEFoamDiscriminant:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamDiscriminant.h; tmva/tmva/src/PDEFoamDiscriminant.cxx. TMVAPDEFoamDiscriminant. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html:23082,Guid,Guide,23082,doc/master/classTMVA_1_1PDEFoamDiscriminant.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html,1,['Guid'],['Guide']
Usability,"g events : 800; : Signal -- testing events : 200; : Signal -- training and testing events: 1000; : Background -- training events : 800; : Background -- testing events : 200; : Background -- training and testing events: 1000; : ; Factory : Booking method: ␛[1mTMVA_DNN_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:Layout=DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:2395,Learn,LearningRate,2395,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"g fixes n...Definition TTask.h:35; TTask::TTaskTTask()Default constructor invoked when reading a TTask object from a file.Definition TTask.cxx:98; TTask::Addvirtual void Add(TTask *task)Add TTask to this.Definition TTask.cxx:176; . Definition at line 35 of file TTask.h. Public Member Functions;  TTask ();  Default constructor invoked when reading a TTask object from a file. ;  ;  TTask (const char *name, const char *title);  Standard constructor. ;  ;  TTask (const TTask &task);  Copy constructor. ;  ; virtual ~TTask ();  Delete a task and its subtasks. ;  ; virtual void Abort ();  Abort current tree of tasks. ;  ; virtual void Add (TTask *task);  Add TTask to this. ;  ; void Browse (TBrowser *b) override;  Browse the list of tasks. ;  ; virtual void CleanTasks ();  Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ;  ; void Clear (Option_t *option="""") override;  Recursively call the Clear function of this task and its subtasks. ;  ; virtual void Continue ();  Resume execution at the current break point. ;  ; virtual void Exec (Option_t *option);  Dummy Execute. ;  ; virtual void ExecuteTask (Option_t *option=""0"");  Execute main task and its subtasks. ;  ; virtual void ExecuteTasks (Option_t *option);  Execute all the subtasks of a task. ;  ; Int_t GetBreakin () const;  ; Int_t GetBreakout () const;  ; TList * GetListOfTasks () const;  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void ls (Option_t *option=""*"") const override;  List the tree of tasks. ;  ; TTask & operator= (const TTask &tt);  Assignment operator. ;  ; void SetActive (Bool_t active=kTRUE);  ; void SetBreakin (Int_t breakin=1);  ; void SetBreakout (Int_t breakout=1);  ; void Streamer (TBuffer &) override;  Stream an object of c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:4417,Clear,Clear,4417,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,2,['Clear'],['Clear']
Usability,"g from the compilation.; static atomic<Int_t>fgCountNumber of TStreamerInfo instances. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TVirtualStreamerInfo. ←; TStreamerInfo. Function documentation; TStreamerInfo(); Default ctor. TStreamerInfo(TClass* cl); Create a TStreamerInfo object. ~TStreamerInfo(); TStreamerInfo dtor. void Build(); Build the I/O data structure for the current class version.; A list of TStreamerElement derived classes is built by scanning; one by one the list of data members of the analyzed class. void BuildCheck(TFile* file = 0); Check if built and consistent with the class dictionary.; This method is called by TFile::ReadStreamerInfo. void BuildEmulated(TFile* file); Create an Emulation TStreamerInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(const void* obj, TMemberInspector& insp, Bool_t isTransient) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStreamerInfo.html:22705,Clear,Clear,22705,root/html602/TStreamerInfo.html,https://root.cern,https://root.cern/root/html602/TStreamerInfo.html,1,['Clear'],['Clear']
Usability,"g in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. » Author: Maarten Ballintijn 07/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerRemote.html:19447,feedback,feedback,19447,root/html530/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html530/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"g its column vector (x, y, z, 1) to matrix ;  ; virtual void MasterToLocalVect (const Double_t *master, Double_t *local) const;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void Print (Option_t *option="""") const override;  print the matrix in 4x4 format ;  ; virtual void RegisterYourself ();  Register the matrix in the current manager, which will become the owner. ;  ; void SetDefaultName ();  If no name was supplied in the ctor, the type of transformation is checked. ;  ; void SetShared (Bool_t flag=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHMatrix.html:6268,Clear,Clear,6268,doc/master/classTGeoHMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html,1,['Clear'],['Clear']
Usability,"g multiple values of a RooAbsReal. ;  ; const std::vector< double > & high () const;  ; const std::vector< int > & interpolationCodes () const;  ; TClass * IsA () const override;  ; const std::vector< double > & low () const;  ; double nominal () const;  ; void printAllInterpCodes ();  ; virtual void printFlexibleInterpVars (std::ostream &os) const;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Interface for detailed printing of object. ;  ; void setAllInterpCodes (int code);  ; void setGlobalBoundary (double boundary);  ; void setHigh (RooAbsReal &param, double newHigh);  ; void setInterpCode (RooAbsReal &param, int code);  ; void setLow (RooAbsReal &param, double newLow);  ; void setNominal (double newNominal);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; const RooListProxy & variables () const;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html:2384,simpl,simple,2384,doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1FlexibleInterpVar.html,1,['simpl'],['simple']
Usability,"g none. Their proper usage is for setting attributes, properties or values; also for data or choices that are discrete, small and fixed in number, not easily remembered. With check boxes all alternatives are visible: it is easy to access and compare choices because they can all be seen together. Each option acts as a switch and can be either “on” or “off”. It is never changed in contents. Checkboxes differ from radio buttons in that they permit selection of more than one alternative. Each box can be switched on or off independently. These buttons can be used alone or grouped in sets. It is good practice to provide default settings for check boxes whenever it is possible. This can be done by:; SetState(EButtonState state); The parameter state can be one of kButtonUp, kButtonDown, kButtonEngaged, kButtonDisabled.; Check boxes can be used to affect other controls. The contents of a list can, for example, be filtered by setting a check box. In any case, use a check box only when both states of a choice are clearly opposite and unambiguous. If opposite states are not clear, it is better to use two radio buttons.; Choice description, i.e. check box label, must be clear, meaningful, fully spelled out, and displayed in mixed-type text. Whenever the use of a given button is inappropriate, for whatever reason, that button should be disabled:; button->SetState(kButtonDisabled);; Never make a button appear and disappear.; In general, option buttons should not offer more than eight choices. If the number of choices exceeds this maximum, it is better to use a multiple selection list box.; The method IsToggleButton() gives the information whether a radio button or a check button is selected. An option button can be set or unset via its method PSetState(EButtonState state).; The method HandleKey(event) is called when the defined hotkey is hit for any button. It sets the selected option button or clicks the selected text button and invokes its defined action.; 25.8.2 Text Entries; A ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1184393,clear,clearly,1184393,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clearly']
Usability,"g objects.Definition RooArgSet.h:24; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; RooFit::YVarRooCmdArg YVar(const RooAbsRealLValue &var, const RooCmdArg &arg={})Definition RooGlobalFunc.cxx:846; RooFit::NormSetRooCmdArg NormSet(Args_t &&... argsOrArgSet)Definition RooGlobalFunc.h:371; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf308_normintegration2dDefinition rf308_normintegration2d.py:1; RangeTa Range(0, 0, 1, 1); ; gxy = 0.485672; gx_Norm[x,y] = 0.0129332; gx_Int[x,y] = 37.5523; gx_Norm[x] = 0.106896; gx_Norm[y] = 0.120989; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'signal' created with bounds [-5,5]; [#1] INFO:Eval -- RooRealVar::setRange(y) new range named 'signal' created with bounds [-3,3]; gx_Int[x,y|signal]_Norm[x,y] = 0.572035; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf308_normintegration2d.C. tutorialsroofitrf308_normintegration2d.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf308__normintegration2d_8C.html:5541,Guid,Guide,5541,doc/master/rf308__normintegration2d_8C.html,https://root.cern,https://root.cern/doc/master/rf308__normintegration2d_8C.html,1,['Guid'],['Guide']
Usability,"g of bits see EProperty. ;  ; void SetClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of TBaseClass. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () const override;  ; TDictionary & operator= (const TDictionary &other);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBaseClass.html:2488,Clear,Clear,2488,doc/master/classTBaseClass.html,https://root.cern,https://root.cern/doc/master/classTBaseClass.html,1,['Clear'],['Clear']
Usability,"g of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TProofServTerminationHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofServTerminationHandler(). TProofServTerminationHandler::TProofServTerminationHandler ; (; TProofServ * ; s). inline . Definition at line 155 of file TProofServ.cxx. Member Function Documentation. ◆ Notify(). Bool_t TProofServTerminationHandler::Notify ; (; ). overridevirtual . Handle this interrupt. ; Implements TSysEvtHandler.; Definition at line 163 of file TProofServ.cxx. Member Data Documentation. ◆ fServ. TProofServ* TProofServTerminationHandler::fServ. private . Definition at line 153 of file TProofServ.cxx. proof/proof/src/TProofServ.cxx. TProofServTerminationHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServTerminationHandler.html:16620,Guid,Guide,16620,doc/master/classTProofServTerminationHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServTerminationHandler.html,1,['Guid'],['Guide']
Usability,"g of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist ; Reimplemented in RooStats::UpperLimitMCSModule.; Definition at line 64 of file RooAbsMCStudyModule.h. ◆ projDeps(). RooArgSet * RooAbsMCStudyModule::projDeps ; (; ). inlineprotected . Return projected observables. ; Definition at line 112 of file RooAbsMCStudyModule.h. ◆ randProto(). bool RooAbsMCStudyModule::randProto ; (; ). inlineprotected . If true randomization of prototype data order is requested. ; Definition at line 171 of file RooAbsMCStudyModule.h. ◆ refit(). RooFit::OwningPtr< RooFitResult > RooAbsMCStudyModule::refit ; (; RooAbsData * ; inGenSample = nullptr). protected . Refit model using original or specified data sample. ; Definition at line 67 of file RooAbsMCStudyModule.cxx. ◆ Streamer(). void RooAbsMCStudyModule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooChi2MCSModule, RooDLLSignificanceMCSModule, RooRandomizeParamMCSModule, and RooStats::UpperLimitMCSModule. ◆ StreamerNVirtual(). void RooAbsMCStudyModule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 184 of file RooAbsMCStudyModule.h. ◆ verboseGen(). bool RooAbsMCStudyModule::verboseGen ; (; ). inlineprotected . If true verbose message in the generation step is requested. ; Definition at line 176 of file RooAbsMCStudyModule.h. Member Data Documentation. ◆ _mcs. RooMCStudy* RooAbsMCStudyModule::_mcs. private . Pointer to RooMCStudy object module is attached to. ; Definition at line 182 of file RooAbsMCStudyModule.h. Libraries for RooAbsMCStudyModule:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsMCStudyModule.h; roofit/roofitcore/src/RooAbsMCStudyModule.cxx. RooAbsMCStudyModule. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:23386,Guid,Guide,23386,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,1,['Guid'],['Guide']
Usability,"g on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:70320,simpl,simplex,70320,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['simpl'],['simplex']
Usability,"g on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:71570,simpl,simplex,71570,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,3,['simpl'],['simplex']
Usability,"g or a TString. ; As such, it serves as a drop-in replacement for const char* in public RooFit interfaces, keeping the possibility to pass a C-style string without copying but also accepting a std::string. ; Definition at line 27 of file RooStringView.h. Public Member Functions;  RooStringView (const char *str);  ;  RooStringView (std::string &&str);  ;  RooStringView (std::string const &str);  ;  RooStringView (TString const &str);  ; const char * c_str () const;  ;  operator const char * ();  . Private Attributes; const char * _cstr;  ; std::shared_ptr< std::string > _strp;  . #include <RooStringView.h>; Constructor & Destructor Documentation. ◆ RooStringView() [1/4]. RooStringView::RooStringView ; (; const char * ; str). inline . Definition at line 29 of file RooStringView.h. ◆ RooStringView() [2/4]. RooStringView::RooStringView ; (; TString const & ; str). inline . Definition at line 30 of file RooStringView.h. ◆ RooStringView() [3/4]. RooStringView::RooStringView ; (; std::string const & ; str). inline . Definition at line 31 of file RooStringView.h. ◆ RooStringView() [4/4]. RooStringView::RooStringView ; (; std::string && ; str). inline . Definition at line 33 of file RooStringView.h. Member Function Documentation. ◆ c_str(). const char * RooStringView::c_str ; (; ); const. inline . Definition at line 34 of file RooStringView.h. ◆ operator const char *(). RooStringView::operator const char * ; (; ). inline . Definition at line 35 of file RooStringView.h. Member Data Documentation. ◆ _cstr. const char* RooStringView::_cstr. private . Definition at line 40 of file RooStringView.h. ◆ _strp. std::shared_ptr<std::string> RooStringView::_strp. private . Definition at line 39 of file RooStringView.h. Libraries for RooStringView:. [legend]; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooStringView.h. RooStringView. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringView.html:2268,Guid,Guide,2268,doc/master/classRooStringView.html,https://root.cern,https://root.cern/doc/master/classRooStringView.html,1,['Guid'],['Guide']
Usability,"g routines.; 14 ; 15This file defines a number of global error handling routines:; 16Warning(), Error(), SysError() and Fatal(). They all take a; 17location string (where the error happened) and a printf style format; 18string plus vararg's. In the end these functions call an; 19errorhandler function. Initially the MinimalErrorHandler, which is supposed; 20to be replaced by the proper DefaultErrorHandler(); 21*/; 22 ; 23#include ""TError.h""; 24 ; 25#include <cstdarg>; 26#include <cstdio>; 27#include <cstdlib>; 28#include <cerrno>; 29#include <string>; 30 ; 31Int_t gErrorIgnoreLevel = kUnset;; 32Int_t gErrorAbortLevel = kSysError+1;; 33Bool_t gPrintViaErrorHandler = kFALSE;; 34 ; 35const char *kAssertMsg = ""%s violated at line %d of `%s'"";; 36const char *kCheckMsg = ""%s not true at line %d of `%s'"";; 37 ; 38static ErrorHandlerFunc_t gErrorHandler = ROOT::Internal::MinimalErrorHandler;; 39 ; 40 ; 41static ROOT::Internal::ErrorSystemMsgHandlerFunc_t &GetErrorSystemMsgHandlerRef(); 42{; 43 static ROOT::Internal::ErrorSystemMsgHandlerFunc_t h;; 44 return h;; 45}; 46 ; 47 ; 48namespace ROOT {; 49namespace Internal {; 50 ; 51ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler(); 52{; 53 return GetErrorSystemMsgHandlerRef();; 54}; 55 ; 56ErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h); 57{; 58 auto oldHandler = GetErrorSystemMsgHandlerRef();; 59 GetErrorSystemMsgHandlerRef() = h;; 60 return oldHandler;; 61}; 62 ; 63/// A very simple error handler that is usually replaced by the TROOT default error handler.; 64/// The minimal error handler is not serialized across threads, so that output of multi-threaded programs; 65/// can get scrambled; 66/// @note `abort()` is only called if `abort_bool` is `true` and `level >= gErrorIgnoreLevel`; 67void MinimalErrorHandler(Int_t level, Bool_t abort_bool, const char *location, const char *msg); 68{; 69 if (level < gErrorIgnoreLevel); 70 return;; 71 ; 72 if (level >= kBreak); 73 fprintf(stderr, ""\n *** ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8cxx_source.html:2126,simpl,simple,2126,doc/master/TError_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TError_8cxx_source.html,1,['simpl'],['simple']
Usability,"g scheme to this stream ; [in]writeFooterset true when writing the last binning scheme to this stream ; [in]indentindentation of the XML output. returns true if the writing succeeded ; Definition at line 479 of file TUnfoldBinningXML.cxx. ◆ ImportXML(). TUnfoldBinningXML * TUnfoldBinningXML::ImportXML ; (; const TXMLDocument * ; document, . const char * ; name . ). static . import a binning scheme from an XML file ; Parameters. [in]documentXMP document tree ; [in]nameidentifier of the binning scheme. returns a new TUnfoldBinningXML, if name is found in document ; Definition at line 184 of file TUnfoldBinningXML.cxx. ◆ ImportXMLNode(). TUnfoldBinningXML * TUnfoldBinningXML::ImportXMLNode ; (; TXMLNode * ; node). staticprotected . recursively import one node from the XML tree ; Parameters. [in]nodenode in the XML document tree. returns a new TUnfoldBinningXML ; Definition at line 228 of file TUnfoldBinningXML.cxx. ◆ IsA(). TClass * TUnfoldBinningXML::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TUnfoldBinning.; Definition at line 76 of file TUnfoldBinningXML.h. ◆ Streamer(). void TUnfoldBinningXML::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TUnfoldBinning. ◆ StreamerNVirtual(). void TUnfoldBinningXML::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TUnfoldBinningXML.h. ◆ WriteDTD() [1/2]. void TUnfoldBinningXML::WriteDTD ; (; const char * ; file = ""tunfoldbinning.dtd""). static . write dtd file ; Parameters. [in]fileregular file for writing the dtd . Definition at line 172 of file TUnfoldBinningXML.cxx. ◆ WriteDTD() [2/2]. static void TUnfoldBinningXML::WriteDTD ; (; std::ostream & ; out). static . hist/unfold/inc/TUnfoldBinningXML.h; hist/unfold/src/TUnfoldBinningXML.cxx. TUnfoldBinningXML. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinningXML.html:29232,Guid,Guide,29232,doc/master/classTUnfoldBinningXML.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html,1,['Guid'],['Guide']
Usability,"g terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TTreeViewer; 13A graphic user interface designed to handle ROOT trees and to take advantage of; 14TTree class features.; 15 ; 16It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality.; 17in the same session.; 18 ; 19### The following capabilities are making the viewer a helpful tool for analysis:; 20 ; 21 - several trees may be opened in the same session;; 22 - branches and leaves can be easily browsed or scanned;; 23 - fast drawing of branch expressions by double-clicking;; 24 - new variables/selections easy to compose with the built-in editor;; 25 - histograms can be composed by dragging leaves or user-defined expressions; 26 to X, Y and Z axis items;; 27 - the tree entries to be processed can be selected with a double slider;; 28 - selections can be defined and activated by dragging them to the 'Cut' item;; 29 - all expressions can be aliased and aliases can be used in composing others;; 30 - input/output event lists easy to handle;; 31 - menu with histogram drawing options;; 32 - user commands may be executed within the viewer and the current command; 33 can be echoed;; 34 - current 'Draw' event loop is reflected by a progress bar and may be; 35 interrupted by the user;; 36 - all widgets have self-explaining tool tips and/or context menus;; 37 - expressions/leaves can be dragged to a 'scan box' and scanned by; 38 double-clicking this item. The result can be redirected to an ASCII file;; 39 ; 40### The layout has the following items:; 41 ; 42 - a menu bar with entries : File, Edit, Run, Options and Help;; 43 - a toolbar in the upper part where you can issue user commands, change; 44 the drawing option and the histogram name, three check buttons Hist, Rec; 45 and Scan.HIST toggles histogram drawing mode, REC enables recording of the; 46 last command issu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:1855,progress bar,progress bar,1855,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"g the class declaration ; Definition at line 36 of file TEveScalableStraightLineSet.h. ◆ GetScale(). Double_t TEveScalableStraightLineSet::GetScale ; (; ); const. Return current scale. ; Definition at line 48 of file TEveScalableStraightLineSet.cxx. ◆ IsA(). TClass * TEveScalableStraightLineSet::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElement.; Definition at line 36 of file TEveScalableStraightLineSet.h. ◆ operator=(). TEveScalableStraightLineSet & TEveScalableStraightLineSet::operator= ; (; const TEveScalableStraightLineSet & ; ). private . ◆ SetScale(). void TEveScalableStraightLineSet::SetScale ; (; Double_t ; scale). Loop over line parameters and scale coordinates. ; Definition at line 56 of file TEveScalableStraightLineSet.cxx. ◆ SetScaleCenter(). void TEveScalableStraightLineSet::SetScaleCenter ; (; Float_t ; x, . Float_t ; y, . Float_t ; z . ). Set scale center. ; Definition at line 38 of file TEveScalableStraightLineSet.cxx. ◆ Streamer(). void TEveScalableStraightLineSet::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement. ◆ StreamerNVirtual(). void TEveScalableStraightLineSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 36 of file TEveScalableStraightLineSet.h. Member Data Documentation. ◆ fCurrentScale. Double_t TEveScalableStraightLineSet::fCurrentScale. protected . Definition at line 24 of file TEveScalableStraightLineSet.h. ◆ fScaleCenter. Float_t TEveScalableStraightLineSet::fScaleCenter[3]. protected . Definition at line 25 of file TEveScalableStraightLineSet.h. Libraries for TEveScalableStraightLineSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveScalableStraightLineSet.h; graf3d/eve/src/TEveScalableStraightLineSet.cxx. TEveScalableStraightLineSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveScalableStraightLineSet.html:48119,Guid,Guide,48119,doc/master/classTEveScalableStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html,1,['Guid'],['Guide']
Usability,g the class declaration ; Definition at line 48 of file TDictAttributeMap.h. ◆ GetPropertyAsString(). const char * TDictAttributeMap::GetPropertyAsString ; (; const char * ; key); const. Access the value of a String property using the key. ; Definition at line 66 of file TDictAttributeMap.cxx. ◆ GetPropertySize(). Int_t TDictAttributeMap::GetPropertySize ; (; ); const. inline . Definition at line 39 of file TDictAttributeMap.h. ◆ HasKey(). Bool_t TDictAttributeMap::HasKey ; (; const char * ; key); const. Definition at line 54 of file TDictAttributeMap.cxx. ◆ IsA(). TClass * TDictAttributeMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 48 of file TDictAttributeMap.h. ◆ RemoveProperty(). Bool_t TDictAttributeMap::RemoveProperty ; (; const char * ; key). Definition at line 93 of file TDictAttributeMap.cxx. ◆ RemovePropertyString(). TString TDictAttributeMap::RemovePropertyString ; (; const char * ; key). Remove a String property from the attribute map specified by the key. ; Returns the TString property removed or NULL if the property does not exist. ; Definition at line 83 of file TDictAttributeMap.cxx. ◆ Streamer(). void TDictAttributeMap::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDictAttributeMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TDictAttributeMap.h. Member Data Documentation. ◆ fStringProperty. THashTable TDictAttributeMap::fStringProperty. private . Definition at line 46 of file TDictAttributeMap.h. Libraries for TDictAttributeMap:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TDictAttributeMap.h; core/meta/src/TDictAttributeMap.cxx. TDictAttributeMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:29 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDictAttributeMap.html:14121,Guid,Guide,14121,doc/master/classTDictAttributeMap.html,https://root.cern,https://root.cern/doc/master/classTDictAttributeMap.html,1,['Guid'],['Guide']
Usability,"g this class . ◆ Class_Name(). static const char * RooChangeTracker::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooChangeTracker::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 49 of file RooChangeTracker.h. ◆ clone(). TObject * RooChangeTracker::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 30 of file RooChangeTracker.h. ◆ DeclFileName(). static const char * RooChangeTracker::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 49 of file RooChangeTracker.h. ◆ evaluate(). double RooChangeTracker::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 47 of file RooChangeTracker.h. ◆ hasChanged(). bool RooChangeTracker::hasChanged ; (; bool ; clearState). Returns true if state has changed since last call with clearState=true. ; If clearState is true, changeState flag will be cleared. ; Definition at line 104 of file RooChangeTracker.cxx. ◆ IsA(). TClass * RooChangeTracker::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 49 of file RooChangeTracker.h. ◆ parameters(). RooArgSet RooChangeTracker::parameters ; (; ); const. Definition at line 188 of file RooChangeTracker.cxx. ◆ Streamer(). void RooChangeTracker::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooChangeTracker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooChangeTracker.h. Member Data Documentation. ◆ _catRef. std::vector<Int_t> RooChangeTracker::_catRef. protected . Reference values for categories. ; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChangeTracker.html:62728,clear,clearState,62728,doc/master/classRooChangeTracker.html,https://root.cern,https://root.cern/doc/master/classRooChangeTracker.html,1,['clear'],['clearState']
Usability,"g this class . ◆ Class_Name(). static const char * RooStats::ConfInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::ConfInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file ConfInterval.h. ◆ ConfidenceLevel(). virtual double RooStats::ConfInterval::ConfidenceLevel ; (; ); const. pure virtual . return confidence level ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ DeclFileName(). static const char * RooStats::ConfInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 67 of file ConfInterval.h. ◆ GetParameters(). virtual RooArgSet * RooStats::ConfInterval::GetParameters ; (; ); const. pure virtual . return list of parameters of interest defining this interval (return a new cloned list) ; Implemented in RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ IsA(). TClass * RooStats::ConfInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval.; Definition at line 67 of file ConfInterval.h. ◆ IsInInterval(). virtual bool RooStats::ConfInterval::IsInInterval ; (; const RooArgSet & ; ); const. pure virtual . check if given point is in the interval ; Implemented in RooStats::LikelihoodInterval, RooStats::PointSetInterval, RooStats::SimpleInterval, and RooStats::MCMCInterval. ◆ operator=(). ConfInterval & RooStats::ConfInterval::operator= ; (; const ConfInterval & ; other). inline . operator= ; Definition at line 43 of file ConfInterval.h. ◆ SetConfidenceLevel(). virtual void RooStats::ConfInterval::SetConfide",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:14276,Simpl,SimpleInterval,14276,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"g to one event.; 1103///; 1104/// This member function must be implemented to realize the action; 1105/// corresponding to the mouse click on the object in the canvas; 1106///; 1107/// Only handle mouse motion events in TCanvas, all other events are; 1108/// ignored for the time being; 1109 ; 1110void TCanvas::ExecuteEvent(Int_t event, Int_t px, Int_t py); 1111{; 1112 if (gROOT->GetEditorMode()) {; 1113 TPad::ExecuteEvent(event,px,py);; 1114 return;; 1115 }; 1116 ; 1117 switch (event) {; 1118 ; 1119 case kMouseMotion:; 1120 SetCursor(kCross);; 1121 break;; 1122 }; 1123}; 1124 ; 1125////////////////////////////////////////////////////////////////////////////////; 1126/// Turn rubberband feedback mode on or off.; 1127 ; 1128void TCanvas::FeedbackMode(Bool_t set); 1129{; 1130 if (IsWeb()); 1131 return;; 1132 ; 1133 if (set) {; 1134 SetDoubleBuffer(0); // turn off double buffer mode; 1135 gVirtualX->SetDrawMode(TVirtualX::kInvert); // set the drawing mode to XOR mode; 1136 } else {; 1137 SetDoubleBuffer(1); // turn on double buffer mode; 1138 gVirtualX->SetDrawMode(TVirtualX::kCopy); // set drawing mode back to normal (copy) mode; 1139 }; 1140}; 1141 ; 1142////////////////////////////////////////////////////////////////////////////////; 1143/// Flush canvas buffers.; 1144 ; 1145void TCanvas::Flush(); 1146{; 1147 if ((fCanvasID == -1) || IsWeb()) return;; 1148 ; 1149 TContext ctxt(this, kTRUE);; 1150 if (!IsBatch()) {; 1151 if (!UseGL() || fGLDevice == -1) {; 1152 gVirtualX->SelectWindow(fCanvasID);; 1153 gPad = ctxt.GetSaved(); //don't do cd() because than also the pixmap is changed; 1154 CopyPixmaps();; 1155 gVirtualX->UpdateWindow(1);; 1156 } else {; 1157 TVirtualPS *tvps = gVirtualPS;; 1158 gVirtualPS = nullptr;; 1159 gGLManager->MakeCurrent(fGLDevice);; 1160 fPainter->InitPainter();; 1161 Paint();; 1162 if (ctxt.GetSaved() && ctxt.GetSaved()->GetCanvas() == this) {; 1163 ctxt.GetSaved()->cd();; 1164 ctxt.GetSaved()->HighLight(ctxt.GetSaved()->GetHighLightColor());; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:36308,Feedback,FeedbackMode,36308,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"g weight file: datasetcv/weights/TMVACrossValidation_Fisher_fold2.weights.xml; : Booked classifier ""Fisher"" of type: ""CrossValidation""; : Rebuilding Dataset Default; (int) 0; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TChain.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TObjString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/Tools.h""; #include ""TMVA/TMVAGui.h""; ; // Helper function to load data into TTrees.; TTree *fillTree(TTree * tree, Int_t nPoints, Double_t offset, Double_t scale, UInt_t seed = 100); {; TRandom3 rng(seed);; Float_t x = 0;; Float_t y = 0;; Int_t eventID = 0;; ; tree->SetBranchAddress(""x"", &x);; tree->SetBranchAddress(""y"", &y);; tree->SetBranchAddress(""eventID"", &eventID);; ; for (Int_t n = 0; n < nPoints; ++n) {; x = rng.Gaus(offset, scale);; y = rng.Gaus(offset, scale);; ; // For our simple example it is enough that the id's are uniformly; // distributed and independent of the data.; ++eventID;; ; tree->Fill();; }; ; // Important: Disconnects the tree from the memory locations of x and y.; tree->ResetBranchAddresses();; return tree;; }; ; int TMVACrossValidationApplication(); {; // This loads the library; TMVA::Tools::Instance();; ; // Set up the TMVA::Reader; TMVA::Reader *reader = new TMVA::Reader(""!Color:!Silent:!V"");; ; Float_t x;; Float_t y;; Int_t eventID;; ; reader->AddVariable(""x"", &x);; reader->AddVariable(""y"", &y);; reader->AddSpectator(""eventID"", &eventID);; ; // Book the serialised methods; TString jobname(""TMVACrossValidation"");; {; TString methodName = ""BDTG"";; TString weightfile = TString(""datasetcv/weights/"") + jobname + ""_"" + methodName + TString("".weights.xml"");; ; Bool_t weightfileExists = (gSystem->AccessPathName(weightfile) == kFALSE);; if (weightfileExists) {; reader->BookMVA(methodName, weightfile);; } else {; std::cout << ""Weightfile for method "" << methodName << "" not foun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationApplication_8C.html:2735,simpl,simple,2735,doc/master/TMVACrossValidationApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationApplication_8C.html,1,['simpl'],['simple']
Usability,"g""); ; # Draw the 2D projections of the 3D pdf; c2 = ROOT.TCanvas(""rf608_fitresultaspdf_2"", ""rf608_fitresultaspdf_2"", 900, 600); c2.Divide(3, 2); c2.cd(1); ROOT.gPad.SetLeftMargin(0.15); hh_mean_sigmag2.GetZaxis().SetTitleOffset(1.4); hh_mean_sigmag2.Draw(""surf3""); c2.cd(2); ROOT.gPad.SetLeftMargin(0.15); hh_sigmag2_frac.GetZaxis().SetTitleOffset(1.4); hh_sigmag2_frac.Draw(""surf3""); c2.cd(3); ROOT.gPad.SetLeftMargin(0.15); hh_mean_frac.GetZaxis().SetTitleOffset(1.4); hh_mean_frac.Draw(""surf3""); ; # Draw the distributions of parameter points sampled from the pdf; tmp1 = d.createHistogram(mean, sigma_g2, 50, 50); tmp2 = d.createHistogram(sigma_g2, frac, 50, 50); tmp3 = d.createHistogram(mean, frac, 50, 50); ; c2.cd(4); ROOT.gPad.SetLeftMargin(0.15); tmp1.GetZaxis().SetTitleOffset(1.4); tmp1.Draw(""lego3""); c2.cd(5); ROOT.gPad.SetLeftMargin(0.15); tmp2.GetZaxis().SetTitleOffset(1.4); tmp2.Draw(""lego3""); c2.cd(6); ROOT.gPad.SetLeftMargin(0.15); tmp3.GetZaxis().SetTitleOffset(1.4); tmp3.Draw(""lego3""); ; c2.SaveAs(""rf608_fitresultaspdf_2.png""); [#0] WARNING:InputArguments -- The parameter 'sigma_g1' with range [-inf, inf] of the RooGaussian 'g1' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf608_fitresultaspdf.py. tutorialsroofitrf608_fitresultaspdf.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf608__fitresultaspdf_8py.html:4735,Guid,Guide,4735,doc/master/rf608__fitresultaspdf_8py.html,https://root.cern,https://root.cern/doc/master/rf608__fitresultaspdf_8py.html,1,['Guid'],['Guide']
Usability,"g& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:5646,clear,clearValueAndShapeDirty,5646,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"g& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:5805,clear,clearValueAndShapeDirty,5805,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"g(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. stringchannel; pair<double,double>dummyForRoot; vector<TH1F*>highHistsx pb per jet bin for + variations over list of systematics; vector<TH1F*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1F*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<NormFactor>normFactor; stringnormName; map<std::string,std::pair<double,double> >overallSyst""acceptance""->(0.8,1.2); vector<std::string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1F* low, TH1F* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2010-12-08 11:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HistFactory__EstimateSummary.html:6334,simpl,simple,6334,root/html528/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html528/RooStats__HistFactory__EstimateSummary.html,1,['simpl'],['simple']
Usability,"g(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. stringchannel; pair<double,double>dummyForRoot; vector<TH1F*>highHistsx pb per jet bin for + variations over list of systematics; vector<TH1F*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1F*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<NormFactor>normFactor; stringnormName; map<std::string,std::pair<double,double> >overallSyst""acceptance""->(0.8,1.2); vector<std::string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1F* low, TH1F* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HistFactory__EstimateSummary.html:6403,simpl,simple,6403,root/html530/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html530/RooStats__HistFactory__EstimateSummary.html,1,['simpl'],['simple']
Usability,"g(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. boolAdd(const RooStats::HypoTestInverterResult& otherResult); doubleCalculateEstimatedError(double target); intFindClosestPointIndex(double target); doubleFindInterpolatedLimit(double target). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tRooStats::SimpleInterval::fConfidenceLevelconfidence level; Double_tRooStats::SimpleInterval::fLowerLimitlower interval limit; RooArgSetRooStats::SimpleInterval::fParametersset containing the parameter of interest; Double_tRooStats::SimpleInterval::fUpperLimitupper interval limit. protected:. boolfInterpolateLowerLimit; boolfInterpolateUpperLimit; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; boolfUseCLs; vector<double>fXValues; TListfYObjects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestInverterResult(const char* name = 0); default constructor. HypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); constructor. ~HypoTestInverterResult(); destructor; no need to delete explictly the objects in the TList since the TList owns the objects. bool Add(const RooStats::HypoTestInverterResult& otherResult); Merge this HypoTestInverterResult with another; HypoTestInverterResult passed as argument. double GetXValue(int index) const. double GetYValue(int index) const. double GetYError(int index) const. HypoTestResult*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestInverterResult.html:6838,Simpl,SimpleInterval,6838,root/html528/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestInverterResult.html,4,['Simpl'],['SimpleInterval']
Usability,g). protected . Definition at line 46 of file TVirtualFitter.h. ◆ fMethodCall. TMethodCall* TVirtualFitter::fMethodCall. protected . Pointer to MethodCall in case of interpreted function. ; Definition at line 45 of file TVirtualFitter.h. ◆ fNpoints. Int_t TVirtualFitter::fNpoints. protected . Number of points to fit. ; Definition at line 39 of file TVirtualFitter.h. ◆ fObjectFit. TObject* TVirtualFitter::fObjectFit. protected . Pointer to object being fitted. ; Definition at line 43 of file TVirtualFitter.h. ◆ fOption. Foption_t TVirtualFitter::fOption. protected . Struct with the fit options. ; Definition at line 32 of file TVirtualFitter.h. ◆ fPointSize. Int_t TVirtualFitter::fPointSize. protected . Number of words per point in the cache. ; Definition at line 40 of file TVirtualFitter.h. ◆ fUserFunc. TObject* TVirtualFitter::fUserFunc. protected . Pointer to user theoretical function (a TF1*) ; Definition at line 44 of file TVirtualFitter.h. ◆ fXfirst. Int_t TVirtualFitter::fXfirst. protected . First bin on X axis. ; Definition at line 33 of file TVirtualFitter.h. ◆ fXlast. Int_t TVirtualFitter::fXlast. protected . Last bin on X axis. ; Definition at line 34 of file TVirtualFitter.h. ◆ fYfirst. Int_t TVirtualFitter::fYfirst. protected . First bin on Y axis. ; Definition at line 35 of file TVirtualFitter.h. ◆ fYlast. Int_t TVirtualFitter::fYlast. protected . Last bin on Y axis. ; Definition at line 36 of file TVirtualFitter.h. ◆ fZfirst. Int_t TVirtualFitter::fZfirst. protected . First bin on Z axis. ; Definition at line 37 of file TVirtualFitter.h. ◆ fZlast. Int_t TVirtualFitter::fZlast. protected . Last bin on Z axis. ; Definition at line 38 of file TVirtualFitter.h. Libraries for TVirtualFitter:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TVirtualFitter.h; hist/hist/src/TVirtualFitter.cxx. TVirtualFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFitter.html:32355,Guid,Guide,32355,doc/master/classTVirtualFitter.html,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html,1,['Guid'],['Guide']
Usability,"g); 1372 printf(""Current Pad: %s / %s\n"", pad->GetName(), pad->GetTitle());; 1373 ; 1374 // loop over all canvases to make sure that only one pad is highlighted; 1375 {; 1376 TIter next(gROOT->GetListOfCanvases());; 1377 TCanvas *tc;; 1378 while ((tc = (TCanvas *)next())); 1379 tc->Update();; 1380 }; 1381 ; 1382 //if (pad->GetGLDevice() != -1 && fSelected); 1383 // fSelected->ExecuteEvent(event, px, py);; 1384 ; 1385 break; // don't want fPadSave->cd() to be executed at the end; 1386 ; 1387 case kButton2Motion:; 1388 //was empty!; 1389 case kButton2Up:; 1390 if (fSelected) {; 1391 gPad = fSelectedPad;; 1392 ; 1393 fSelected->ExecuteEvent(event, px, py);; 1394 RunAutoExec();; 1395 }; 1396 break;; 1397 ; 1398 case kButton2Double:; 1399 break;; 1400 ; 1401//*-*----------------------------------------------------------------------; 1402 ; 1403 case kButton3Down:; 1404 // popup context menu; 1405 pad = Pick(px, py, prevSelObj);; 1406 if (!pad) return;; 1407 ; 1408 if (!fDoubleBuffer) FeedbackMode(kFALSE);; 1409 ; 1410 if (fContextMenu && fSelected && !fSelected->TestBit(kNoContextMenu) &&; 1411 !pad->TestBit(kNoContextMenu) && !TestBit(kNoContextMenu)); 1412 fContextMenu->Popup(px, py, fSelected, this, pad);; 1413 ; 1414 break;; 1415 ; 1416 case kButton3Motion:; 1417 break;; 1418 ; 1419 case kButton3Up:; 1420 if (!fDoubleBuffer) FeedbackMode(kTRUE);; 1421 break;; 1422 ; 1423 case kButton3Double:; 1424 break;; 1425 ; 1426 case kKeyPress:; 1427 if (!fSelectedPad || !fSelected) return;; 1428 gPad = fSelectedPad; // don't use cd() because we won't draw in pad; 1429 // we will only use its coordinate system; 1430 fSelected->ExecuteEvent(event, px, py);; 1431 ; 1432 RunAutoExec();; 1433 ; 1434 break;; 1435 ; 1436 case kButton1Shift:; 1437 // Try to select; 1438 pad = Pick(px, py, prevSelObj);; 1439 ; 1440 if (!pad) return;; 1441 ; 1442 EnterLeave(prevSelPad, prevSelObj);; 1443 ; 1444 gPad = pad; // don't use cd() we will use the current; 1445 // canvas via the GetCanvas member ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:44340,Feedback,FeedbackMode,44340,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"g);; ; // Set starting values and step sizes for parameters; static double vstart[4] = {3, 1 , 0.1 , 0.01};; static double step[4] = {0.1 , 0.1 , 0.01 , 0.001};; gMinuit->mnparm(0, ""a1"", vstart[0], step[0], 0,0,ierflg);; gMinuit->mnparm(1, ""a2"", vstart[1], step[1], 0,0,ierflg);; gMinuit->mnparm(2, ""a3"", vstart[2], step[2], 0,0,ierflg);; gMinuit->mnparm(3, ""a4"", vstart[3], step[3], 0,0,ierflg);; ; // Now ready for minimization step; arglist[0] = 500;; arglist[1] = 1.;; gMinuit->mnexcm(""MIGRAD"", arglist ,2,ierflg);; ; // Print results; double amin,edm,errdef;; int nvpar,nparx,icstat;; gMinuit->mnstat(amin,edm,errdef,nvpar,nparx,icstat);; //gMinuit->mnprin(3,amin);; ; }; ; f#define f(i)Definition RSha256.hxx:104; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TMinuit.h; gMinuitR__EXTERN TMinuit * gMinuitDefinition TMinuit.h:271; TMinuit::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization function.Definition TMinuit.cxx:920; TMinuit::mnexcmvirtual void mnexcm(const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg)Interprets a command and takes appropriate action.Definition TMinuit.cxx:2664; TMinuit::mnstatvirtual void mnstat(Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat)Returns concerning the current status of the minimization.Definition TMinuit.cxx:7638; TMinuit::mnparmvirtual void mnparm(Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t &ierflg)Implements one parameter definition.Definition TMinuit.cxx:5665; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; AuthorRene Brun ; Definition in file Ifit.C. tutorialsfitIfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Ifit_8C.html:6434,Guid,Guide,6434,doc/master/Ifit_8C.html,https://root.cern,https://root.cern/doc/master/Ifit_8C.html,1,['Guid'],['Guide']
Usability,"g* CreateRanking(). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); return boosted MVA response. Double_t GetBoostROCIntegral(Bool_t , TMVA::Types::ETreeType , Bool_t CalcOverlapIntergral = kFALSE); Calculate the ROC integral of a single classifier or even the; whole boosted classifier. The tree type (training or testing; sample) is specified by 'eTT'. If tree type kTraining is set, the original training sample is; used to compute the ROC integral (original weights). - singleMethod - if kTRUE, return ROC integral of single (last; trained) classifier; if kFALSE, return ROC; integral of full classifier. - eTT - tree type (Types::kTraining / Types::kTesting). - CalcOverlapIntergral - if kTRUE, the overlap integral of the; signal/background MVA distributions; is calculated and stored in; 'fOverlap_integral'. void CalcMVAValues(); Calculate MVA values of current method fMethods.back() on; training sample. void SetBoostedMethodName(TString methodName); { fBoostedMethodName = methodName; }. Int_t GetBoostNum(); { return fBoostNum; }. TH1* GetMonitoringHist(Int_t histInd); gives the monitoring historgram from the vector according to index of the; histrogram added in the MonitorBoost function. { return (*fMonitorHist)[fDefaultHistNum+histInd]; }. void AddMonitoringHist(TH1* hist); { return fMonitorHist->push_back(hist); }. Types::EBoostStage GetBoostStage(); { return fBoostStage; }. void ClearAll(); clean up. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; print fit results. MethodBoost* SetStage(TMVA::Types::EBoostStage stage); { fBoostStage = stage; return this; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Or Cohen » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodBoost.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-10 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBoost.html:20627,Clear,ClearAll,20627,root/html528/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBoost.html,1,['Clear'],['ClearAll']
Usability,"g** subnames = 0, UInt_t options = kChildFrame, Pixel_t back = GetWhitePixel()); TGLVEntry(const TGWindow* p = 0, const TGPicture* bigpic = 0, const TGPicture* smallpic = 0, TGString* name = 0, TGString** subnames = 0, EListViewMode ViewMode = kLVDetails, UInt_t options = kChildFrame, Pixel_t back = GetWhitePixel()); virtual~TGLVEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidActivate(Bool_t a); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLVEntry.html:1925,Clear,Clear,1925,root/html528/TGLVEntry.html,https://root.cern,https://root.cern/root/html528/TGLVEntry.html,4,['Clear'],['Clear']
Usability,"g*>_floatParamVec; RooAbsReal*_funct; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; double_maxFCN; int_nDim; int_numBadNLL; int_printEvalErrors; bool_verbose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMinimizerFcn(RooAbsReal* funct, RooMinimizer* context, bool verbose = false). virtual ~RooMinimizerFcn(). ROOT::Math::IBaseFunctionMultiDim* Clone() const. unsigned int NDim() const; { return _nDim; }. RooArgList* GetFloatParamList(); { return _floatParamList; }. RooArgList* GetConstParamList(); { return _constParamList; }. RooArgList* GetInitFloatParamList(); { return _initFloatParamList; }. RooArgList* GetInitConstParamList(); { return _initConstParamList; }. void SetEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void SetPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. Bool_t SetLogFile(const char* inLogfile). std::ofstream* GetLogFile(); { return _logfile; }. void SetVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. Double_t& GetMaxFCN(); { return _maxFCN; }. Int_t GetNumInvalidNLL(); { return _numBadNLL; }. Bool_t Synchronize(vector<ROOT::Fit::ParameterSettings>& parameters, Bool_t optConst, Bool_t verbose). void ApplyCovarianceMatrix(TMatrixDSym& V). Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _evalCounter = 0 ; }. Double_t GetPdfParamVal(Int_t index). Double_t GetPdfParamErr(Int_t index). void SetPdfParamErr(Int_t index, Double_t value). void ClearPdfParamAsymErr(Int_t index). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal). Bool_t SetPdfParamVal(const Int_t& index, const Double_t& value) const. double DoEval(const double* x) const. void updateFloatVec(). » Last changed: Tue Sep 8 17:03:10 2015 » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinimizerFcn.html:3404,Clear,ClearPdfParamAsymErr,3404,root/html534/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html534/RooMinimizerFcn.html,1,['Clear'],['ClearPdfParamAsymErr']
Usability,"g*kBIGGEST_RGB_VALUE/(fVisual->green_mask >> fGreenShift));; 395 ; 396 b = (color[i].pixel & fVisual->blue_mask) >> fBlueShift;; 397 color[i].blue = UShort_t(b*kBIGGEST_RGB_VALUE/(fVisual->blue_mask >> fBlueShift));; 398 ; 399 color[i].flags = DoRed | DoGreen | DoBlue;; 400 }; 401 }; 402}; 403 ; 404////////////////////////////////////////////////////////////////////////////////; 405/// Clear the pixmap pix.; 406 ; 407void TGX11::ClearPixmap(Drawable *pix); 408{; 409 Window root;; 410 int xx, yy;; 411 unsigned int ww, hh, border, depth;; 412 XGetGeometry((Display*)fDisplay, *pix, &root, &xx, &yy, &ww, &hh, &border, &depth);; 413 SetColor(gGCpxmp, 0);; 414 XFillRectangle((Display*)fDisplay, *pix, *gGCpxmp, 0 ,0 ,ww ,hh);; 415 SetColor(gGCpxmp, 1);; 416 XFlush((Display*)fDisplay);; 417}; 418 ; 419////////////////////////////////////////////////////////////////////////////////; 420/// Clear current window.; 421 ; 422void TGX11::ClearWindow(); 423{; 424 if (!gCws->fIsPixmap && !gCws->fDoubleBuffer) {; 425 XSetWindowBackground((Display*)fDisplay, gCws->fDrawing, GetColor(0).fPixel);; 426 XClearWindow((Display*)fDisplay, gCws->fDrawing);; 427 XFlush((Display*)fDisplay);; 428 } else {; 429 SetColor(gGCpxmp, 0);; 430 XFillRectangle((Display*)fDisplay, gCws->fDrawing, *gGCpxmp,; 431 0, 0, gCws->fWidth, gCws->fHeight);; 432 SetColor(gGCpxmp, 1);; 433 }; 434}; 435 ; 436////////////////////////////////////////////////////////////////////////////////; 437/// Delete current pixmap.; 438 ; 439void TGX11::ClosePixmap(); 440{; 441 CloseWindow1();; 442}; 443 ; 444////////////////////////////////////////////////////////////////////////////////; 445/// Delete current window.; 446 ; 447void TGX11::CloseWindow(); 448{; 449 if (gCws->fShared); 450 gCws->fOpen = 0;; 451 else; 452 CloseWindow1();; 453 ; 454 // Never close connection. TApplication takes care of that; 455 // if (!gCws) Close(); // close X when no open window left; 456}; 457 ; 458////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:13731,Clear,ClearWindow,13731,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['Clear'],['ClearWindow']
Usability,"g, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, const char* weight, TTree* data, TEventList* training, TEventList* test, TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a simple string:; The input/output layers are defined by giving; the branch names separated by comas.; Hidden layers are just described by the number of neurons.; The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be; normalized.; The output can be followed by '!' to use Softmax neurons for the; output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument.; training and test are the two TEventLists defining events; to be used during the neural net training.; Both the TTree and the TEventLists can be defined in the constructor,; or later with the suited setter method. TMultiLayerPerceptron(const char* layout, TTree* data = 0, const char* training = ""Entry$%2==0"", const char* test = """", TNeuron::ENeuronType type = TNeuron::kSigmoid, const char* extF = """", const char* extD = """"); The network is described by a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:19947,simpl,simple,19947,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['simpl'],['simple']
Usability,"g->SetTitle(""Simple Graph"");; 554 ; 555 g->SetPoint(0,-4,-3);; 556 g->SetPoint(1,1,1);; 557 g->SetPoint(2,2,1);; 558 g->SetPoint(3,3,4);; 559 g->SetPoint(4,5,5);; 560 ; 561 g->SetPointError(0,1.,2.);; 562 g->SetPointError(1,2,1);; 563 g->SetPointError(2,2,3);; 564 g->SetPointError(3,3,2);; 565 g->SetPointError(4,4,5);; 566 ; 567 g->GetXaxis()->SetNdivisions(520);; 568 ; 569 g->SetMarkerStyle(21);; 570 c->cd(1); gPad->SetGrid(1,1);; 571 g->Draw(""APL"");; 572 ; 573 c->cd(2); gPad->SetGrid(1,1);; 574 g->Draw(""A RX RY PL"");; 575}; 576End_Macro; 577 ; 578\anchor GrP7; 579### Graphs in logarithmic scale; 580 ; 581Like histograms, graphs can be drawn in logarithmic scale along X and Y. When; 582a pad is set to logarithmic scale with TPad::SetLogx() and/or with TPad::SetLogy(); 583the points building the graph are converted into logarithmic scale. But **only** the; 584points not the lines connecting them which stay linear. This can be clearly seen; 585on the following example:; 586 ; 587Begin_Macro(source); 588{; 589 // A graph with 3 points; 590 Double_t xmin = 750.;; 591 Double_t xmax = 1000;; 592 auto g = new TGraph(3);; 593 g->SetPoint(0,xmin,0.1);; 594 g->SetPoint(1,845,0.06504);; 595 g->SetPoint(2,xmax,0.008);; 596 ; 597 // The same graph with n points; 598 Int_t n = 10000;; 599 Double_t dx = (xmax-xmin)/n;; 600 Double_t x = xmin;; 601 auto g2 = new TGraph();; 602 for (Int_t i=0; i<n; i++) {; 603 g2->SetPoint(i, x, g->Eval(x));; 604 x = x + dx;; 605 }; 606 ; 607 auto cv = new TCanvas(""cv"",""cv"",800,600);; 608 cv->SetLogy();; 609 cv->SetGridx();; 610 cv->SetGridy();; 611 g->Draw(""AL*"");; 612 ; 613 g2->SetMarkerColor(kRed);; 614 g2->SetMarkerStyle(1);; 615 g2->Draw(""P"");; 616}; 617 ; 618End_Macro; 619 ; 620\anchor GrP8; 621#### Highlight mode for graph; 622 ; 623\since **ROOT version 6.15/01**; 624 ; 625\image html hlGraph1.gif ""Highlight mode""; 626 ; 627Highlight mode is implemented for `TGraph` (and for `TH1`) class. When; 628highlight mode is on, mouse movement over the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:22843,clear,clearly,22843,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clearly']
Usability,"g->fCopyIterator(&iterator,start);; 2395 void *addr;; 2396 while( (addr = next(iter,end)) ) {; 2397 To *x = (To*)( ((char*)addr) + offset );; 2398 *x = (To)(*items);; 2399 ++items;; 2400 }; 2401 if (iter != &iterator[0]) {; 2402 loopconfig->fDeleteIterator(iter);; 2403 }; 2404 }; 2405 };; 2406 ; 2407 template <typename From, typename To>; 2408 struct Numeric {; 2409 static void ConvertAction(From *items, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration * /* config */); 2410 {; 2411 // The difference with ConvertAction is that we can modify the start; 2412 // iterator and skip the copy. We also never have an offset.; 2413 ; 2414 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2415 Next_t next = loopconfig->fNext;; 2416 ; 2417 void *iter = start;; 2418 void *addr;; 2419 while( (addr = next(iter,end)) ) {; 2420 To *x = (To*)(addr);; 2421 *x = (To)(*items);; 2422 ++items;; 2423 }; 2424 }; 2425 };; 2426 ; 2427 template <typename From, typename To, template <typename F, typename T> class Converter = Generic >; 2428 struct ConvertBasicType {; 2429 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2430 {; 2431 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2432 ; 2433 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2434 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2435 Int_t nvalues = proxy->Size();; 2436 ; 2437 From *items = new From[nvalues];; 2438 buf.ReadFastArray(items, nvalues);; 2439 Converter<From,To>::ConvertAction(items,start,end,loopconfig,config);; 2440 delete [] items;; 2441 return 0;; 2442 }; 2443 };; 2444 ; 2445 template <typename To>; 2446 struct ConvertBasicType<BitsMarker, To, Generic> {; 2447 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2448 {; 2449 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:98307,Simpl,Simple,98307,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"g. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canBeAdded (const RooAbsArg &arg, bool silent) const override;  Determine whether it's possible to add a given RooAbsArg to the collection or not. ;  ; bool checkForDup (const RooAbsArg &arg, bool silent) const;  Check if element with var's name is already in set. ;  ;  Protected Member Functions inherited from RooAbsCollection; void clearStructureTags ();  ; void deleteList ();  Delete contents of the list. ;  ; void makeStructureTag ();  ; void makeTypedStructureTag ();  ; TNamed * structureTag ();  ; TNamed * typedStructureTag ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; template<class Arg_t > ; void processArg (Arg_t &&arg);  ; void processArg (const char *name);  ; void processArg (const RooAbsArg &arg);  ; void processArg (const RooAbsArg *arg);  ; void processArg (const RooAbsCollection &coll);  ; void processArg (const RooArgList &list);  ; void processArg (double value);  ; void processArg (RooAbsArg *var);  ; void processArg (RooAbsCollection &&coll);  ; template<typename... Args_t> ; void processArgs (Args_t &&... args);  . Additional Inherited Members;  Public Types inherited from RooAbsCollection; using const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:27370,clear,clearStructureTags,27370,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,1,['clear'],['clearStructureTags']
Usability,"g...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; ROOT::Math::GSLSimAnParams Struct ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; structure holding the simulated annealing parameters ; Definition at line 161 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnParams ();  . Public Attributes; int iters_fixed_T;  ; double k;  parameters for the Boltzman distribution ;  ; double mu_t;  ; int n_tries;  ; double step_size;  ; double t_initial;  ; double t_min;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnParams(). ROOT::Math::GSLSimAnParams::GSLSimAnParams ; (; ). inline . Definition at line 164 of file GSLSimAnnealing.h. Member Data Documentation. ◆ iters_fixed_T. int ROOT::Math::GSLSimAnParams::iters_fixed_T. Definition at line 177 of file GSLSimAnnealing.h. ◆ k. double ROOT::Math::GSLSimAnParams::k. parameters for the Boltzman distribution ; Definition at line 180 of file GSLSimAnnealing.h. ◆ mu_t. double ROOT::Math::GSLSimAnParams::mu_t. Definition at line 182 of file GSLSimAnnealing.h. ◆ n_tries. int ROOT::Math::GSLSimAnParams::n_tries. Definition at line 176 of file GSLSimAnnealing.h. ◆ step_size. double ROOT::Math::GSLSimAnParams::step_size. Definition at line 178 of file GSLSimAnnealing.h. ◆ t_initial. double ROOT::Math::GSLSimAnParams::t_initial. Definition at line 181 of file GSLSimAnnealing.h. ◆ t_min. double ROOT::Math::GSLSimAnParams::t_min. Definition at line 183 of file GSLSimAnnealing.h. Collaboration diagram for ROOT::Math::GSLSimAnParams:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; math/mathmore/inc/Math/GSLSimAnnealing.h. ROOTMathGSLSimAnParams. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLSimAnParams.html:2022,Guid,Guide,2022,doc/master/structROOT_1_1Math_1_1GSLSimAnParams.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Math_1_1GSLSimAnParams.html,1,['Guid'],['Guide']
Usability,"g2 > nsig1 (default is nsig1=1 and nsig2=2) the second band is also done. ;  ; TGraphErrors * MakePlot (Option_t *opt="""");  return a TGraphErrors with the obtained observed p-values resultinf from the scan By default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently of the flag ;  ; SamplingDistPlot * MakeTestStatPlot (int index, int type=0, int nbins=100);  Plot the test statistic distributions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:2554,Clear,Clear,2554,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['Clear'],['Clear']
Usability,"g64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorDraw.html:10194,Clear,ClearFormula,10194,root/html602/TSelectorDraw.html,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html,2,['Clear'],['ClearFormula']
Usability,"g::CallFunc_GetWrapperCodestd::string CallFunc_GetWrapperCode(CallFunc_t *func) const finalDefinition TCling.cxx:8112; TCling::RewindInterpreterMutexvoid * RewindInterpreterMutex()Reset the interpreter lock to the state it had before interpreter-related calls happened.Definition TCling.cxx:9664; TCling::MethodArgInfo_Nameconst char * MethodArgInfo_Name(MethodArgInfo_t *marginfo) const finalDefinition TCling.cxx:9304; TCling::HasPCMForLibraryBool_t HasPCMForLibrary(const char *libname) const finalReturn true if ROOT has cxxmodules pcm for a given library name.Definition TCling.cxx:3147; TCling::TypedefInfo_Initvoid TypedefInfo_Init(TypedefInfo_t *tinfo, const char *name) const finalDefinition TCling.cxx:9472; TCling::DataMemberInfo_Titleconst char * DataMemberInfo_Title(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8706; TCling::CallFunc_ExecIntLongptr_t CallFunc_ExecInt(CallFunc_t *func, void *address) const finalDefinition TCling.cxx:7885; TCling::ClearStackvoid ClearStack() finalDelete existing temporary values.Definition TCling.cxx:3085; TCling::SetAlloclockfuncvoid SetAlloclockfunc(void(*)()) const final[Place holder for Mutex Lock] Provide the interpreter with a way to acquire a lock used to protect cr...Definition TCling.cxx:7536; TCling::SetErrorMessagesBool_t SetErrorMessages(Bool_t enable=kTRUE) finalIf error messages are disabled, the interpreter should suppress its failures and warning messages fro...Definition TCling.cxx:7356; TCling::CallFunc_FactoryMethodMethodInfo_t * CallFunc_FactoryMethod(CallFunc_t *func) const finalDefinition TCling.cxx:7924; TCling::IsUnsignedIntegerTypebool IsUnsignedIntegerType(const void *QualTypePtr) constDefinition TCling.cxx:9563; TCling::TypedefInfo_FactoryCopyTypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t *tinfo) const finalDefinition TCling.cxx:9465; TCling::GetFunctionOverloadsvoid GetFunctionOverloads(ClassInfo_t *cl, const char *funcname, std::vector< DeclId_t > &res) const finalInsert overloads of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:434168,Clear,ClearStackvoid,434168,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,4,['Clear'],"['ClearStack', 'ClearStackvoid']"
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3099,clear,clearEvalError,3099,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2588,clear,clearEvalError,2588,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:2890,clear,clearEvalError,2890,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,4,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2788,clear,clearEvalError,2788,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2612,clear,clearEvalError,2612,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,49,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:4084,clear,clearEvalError,4084,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,2,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:3184,clear,clearEvalError,3184,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,2,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:3184,clear,clearEvalError,3184,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,2,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDecay.html:2588,clear,clearEvalError,2588,root/html528/RooDecay.html,https://root.cern,https://root.cern/root/html528/RooDecay.html,2,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:2890,clear,clearEvalError,2890,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,8,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:2788,clear,clearEvalError,2788,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,2,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgusBG.html:2612,clear,clearEvalError,2612,root/html528/RooArgusBG.html,https://root.cern,https://root.cern/root/html528/RooArgusBG.html,46,['clear'],['clearEvalError']
Usability,"g::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:3137,clear,clearEvalError,3137,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,60,['clear'],['clearEvalError']
Usability,"g::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMultiVarGaussian.html:2918,Clear,Clear,2918,root/html526/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html526/RooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"g; // slot number. The latter may change when implicit multithreading is active.; // The special columns which provide the entry number and the slot index are; // called ""rdfentry_"" and ""rdfslot_"" respectively. Their types are an unsigned; // 64 bit integer and an unsigned integer.; auto printEntrySlot = [](ULong64_t iEntry, unsigned int slot) {; std::cout << ""Entry: "" << iEntry << "" Slot: "" << slot << std::endl;; };; d.Foreach(printEntrySlot, {""rdfentry_"", ""rdfslot_""});; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; h#define h(i)Definition RSha256.hxx:106; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; double; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; ROOT::GetClassTClass * GetClass(T *)Definition TClass.h:663; df001_introductionDefinition df001_introduction.py:1; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; ; 2 entries passed all filters; 5 entries passed the string filter; The mean is always included between the min and the max: 1 <= 2 <= 3; Selected b1 entries; 0 1 2 3 4 ; The type of b1Vec is vector<double>; Filled h 5 times, mean: 2; Filled h with 5 entries; Events passing cutb1: 5; Events passing cutb1b2: 2; Events passing both: 2; 8; 8; Entry: 0 Slot: 0; Entry: 1 Slot: 0; Entry: 2 Slot: 0; Entry: 3 Slot: 0; Entry: 4 Slot: 0; Entry: 5 Slot: 0; Entry: 6 Slot: 0; Entry: 7 Slot: 0; Entry: 8 Slot: 0; Entry: 9 Slot: 0; (int) 0; DateDecember 2016 ; AuthorEnrico Guiraud (CERN) ; Definition in file df001_introduction.C. tutorialsdataframedf001_introduction.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8C.html:9131,Guid,Guide,9131,doc/master/df001__introduction_8C.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html,1,['Guid'],['Guide']
Usability,"g; 957should be preferred for performance-critical applications.; 958 ; 959Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 960See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 961 ; 962Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 963before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 964 ; 965Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 966 ; 967### Memory usage; 968 ; 969There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 970 ; 971Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:56069,simpl,simplifies,56069,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simplifies']
Usability,"g; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:25233,learn,learning,25233,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['learn'],['learning']
Usability,"g; fracLep = ttable.getFrac(""Lepton""); print(""Fraction of events tagged with Lepton tag is "", fracLep); ; # Defining ranges for plotting, fitting on categories; # ------------------------------------------------------------------------------------------------------; ; # Define named range as comma separated list of labels; tagCat.setRange(""good"", ""Lepton,Kaon""); ; # Or add state names one by one; tagCat.addToRange(""soso"", ""NetTagger-1""); tagCat.addToRange(""soso"", ""NetTagger-2""); ; # Use category range in dataset reduction specification; goodData = data.reduce(CutRange=""good""); goodData.table(tagCat).Print(""v""); Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; RooCategory::tagCat = Lepton(idx = 0); ; RooCategory::b0flav = B0(idx = -1); ; Roo1DTable::b0flav = (B0=5040,B0bar=4960); ; Table b0flav : pData; +-------+------+; | B0 | 5040 |; | B0bar | 4960 |; +-------+------+; ; Roo1DTable::tagCat = (Lepton=487,Kaon=433,NetTagger-1=439,NetTagger-2=406); ; Table tagCat : pData(x>8.23); +-------------+-----+; | Lepton | 487 |; | Kaon | 433 |; | NetTagger-1 | 439 |; | NetTagger-2 | 406 |; +-------------+-----+; ; ; Table (tagCat x b0flav) : pData; +---------------------+------+; | {Lepton;B0} | 1281 |; | {Kaon;B0} | 1253 |; | {NetTagger-1;B0} | 1234 |; | {NetTagger-2;B0} | 1272 |; | {Lepton;B0bar} | 1269 |; | {Kaon;B0bar} | 1255 |; | {NetTagger-1;B0bar} | 1219 |; | {NetTagger-2;B0bar} | 1217 |; +---------------------+------+; ; ; Table tagCat : pData; +-------------+------+; | Lepton | 2550 |; | Kaon | 2508 |; | NetTagger-1 | 0 |; | NetTagger-2 | 0 |; +-------------+------+; ; Number of events with B0 flavor is 5040.0; Fraction of events tagged with Lepton tag is 0.27592067988668556; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf404_categories.py. tutorialsroofitrf404_categories.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf404__categories_8py.html:3844,Guid,Guide,3844,doc/master/rf404__categories_8py.html,https://root.cern,https://root.cern/doc/master/rf404__categories_8py.html,1,['Guid'],['Guide']
Usability,"g=true)Definition RooGlobalFunc.cxx:649; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; RooFit::ProtoDataRooCmdArg ProtoData(const RooDataSet &protoData, bool randomizeOrder=false, bool resample=false)Definition RooGlobalFunc.cxx:812; RooFit::MarkerColorRooCmdArg MarkerColor(Color_t color)Definition RooGlobalFunc.cxx:352; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf314_paramfitrangeDefinition rf314_paramfitrange.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_over_model_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_over_model_Int[t]_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 5000 will supersede previous event count of 10000 for normalization of PDF projections; ; RooFitResult: minimized FCN value: 2823.97, estimated distance to minimum: 3.17108e-08; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter InitialValue FinalValue +/- Error GblCorr.; -------------------- ------------ -------------------------- --------; tau -1.5400e+00 -1.5335e+00 +/- 2.22e-02 <none>; ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf314_paramfitrange.C. tutorialsroofitrf314_paramfitrange.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf314__paramfitrange_8C.html:6178,Guid,Guide,6178,doc/master/rf314__paramfitrange_8C.html,https://root.cern,https://root.cern/doc/master/rf314__paramfitrange_8C.html,1,['Guid'],['Guide']
Usability,"g>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7247,clear,clearEvalError,7247,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,1,['clear'],['clearEvalError']
Usability,"g>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:7247,clear,clearEvalError,7247,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,1,['clear'],['clearEvalError']
Usability,"g>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:7247,clear,clearEvalError,7247,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['clear'],['clearEvalError']
Usability,"gConst = 143; , kVariable = 144; , ;   kFunctionCall = 145; , kData = 146; , kUnary = 147; , kBinary = 148; , ;   kThree = 149; , kDefinedVariable = 150; , kDefinedString = 151; , kPlusD = 152; , ;   kPlusDD = 153; , kMultD = 154; , kMultDD = 155; , kBoolOptimizeOr = 156; , ;   kBoolOptimizeAnd = 157; , kBoolSet = 158; , kFDM = 159; , kFD0 = 160; , ;   kFD1 = 161; , kFD2 = 162; , kFD3 = 163. };  ; typedef Double_t(TObject::* TFuncG) (const Double_t *, const Double_t *) const;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from ROOT::v5::TFormula; virtual Bool_t CheckOperands (Int_t leftoperand, Int_t rightoperartion, Int_t &err);  Check whether the operands at 'leftoper' and 'oper-1' are compatible with the operation at 'oper'. ;  ; virtual Bool_t CheckOperands (Int_t operation, Int_t &err);  Check whether the operand at 'oper-1' is compatible with the operation at 'oper'. ;  ; void ClearFormula (Option_t *option="""");  Resets the objects. ;  ; virtual void Convert (UInt_t fromVersion);  ; Double_t EvalParFast (const Double_t *x, const Double_t *params);  Evaluate this formula. ;  ; Double_t EvalPrimitive (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive0 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive1 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive2 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive3 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive4 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Short_t GetAction (Int_t code) const;  ; Short_t GetActionOptimized (Int_t code) const;  ; Int_t GetActionParam (Int_t code) const;  ; Int_t GetActionParamOptimized (Int_t code) const;  ; Int_t * GetOper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html:23625,Clear,ClearFormula,23625,doc/master/structROOT_1_1v5_1_1TF1Data.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html,1,['Clear'],['ClearFormula']
Usability,"gDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGVProgressBar.html:20333,Simpl,Simple,20333,root/html528/TGVProgressBar.html,https://root.cern,https://root.cern/root/html528/TGVProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"gDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGVProgressBar.html:20433,Simpl,Simple,20433,root/html530/TGVProgressBar.html,https://root.cern,https://root.cern/root/html530/TGVProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"gDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGProgressBar.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGVProgressBar.html:20433,Simpl,Simple,20433,root/html532/TGVProgressBar.html,https://root.cern,https://root.cern/root/html532/TGVProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"gDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*fgDefaultSelectedBackgroundGC; static const TGGC*fgDefaultSelectedGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextEntry(const TGWindow* p, TGTextBuffer* text, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame | kDoubleBorder, Pixel_t back = GetWhitePixel()); Create a text entry widget. It will adopt the TGTextBuffer object; (i.e. the text buffer will be deleted by the text entry widget). TGTextEntry(const TGWindow* parent = 0, const char* text = 0, Int_t id = -1); Simple text entry constructor. TGTextEntry(const TString& contents, const TGWindow* parent, Int_t id = -1); Simple test entry constructor. Notice TString argument comes before the; parent argument (to make this ctor different from the first one taking a; const char*). ~TGTextEntry(); Delete a text entry widget. void Init(); Do default initialization. TGDimension GetDefaultSize() const; Return the default / minimal size of the widget. void SetDefaultSize(UInt_t w, UInt_t h); Set the default / minimal size of the widget. void ReturnPressed(); This signal is emitted when the return or enter key is pressed. void ShiftTabPressed(); This signal is emitted when <SHIFT> and <TAB> keys are pressed. void TabPressed(); This signal is emitted when the <TAB> key is pressed. void TextChanged(const char* text = 0); This signal is emitted every time the text has changed. void CursorOutLeft(); This signal is emitted when cursor is going out of left side. void CursorOutRight(); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextEntry.html:27544,Simpl,Simple,27544,root/html602/TGTextEntry.html,https://root.cern,https://root.cern/root/html602/TGTextEntry.html,2,['Simpl'],['Simple']
Usability,"gLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame). virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGHProgressBar.html:22168,progress bar,progress bar,22168,root/html604/TGHProgressBar.html,https://root.cern,https://root.cern/root/html604/TGHProgressBar.html,2,['progress bar'],['progress bar']
Usability,"gLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame). virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHProgressBar.html:22168,progress bar,progress bar,22168,root/html602/TGHProgressBar.html,https://root.cern,https://root.cern/root/html602/TGHProgressBar.html,2,['progress bar'],['progress bar']
Usability,"gLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:22668,learn,learning,22668,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['learn'],['learning']
Usability,"gPad#define gPadDefinition TVirtualPad.h:308; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetV3virtual Double_t * GetV3()Definition TTree.h:580; TTree::GetV1virtual Double_t * GetV1()Definition TTree.h:576; TTree::GetV4virtual Double_t * GetV4()Definition TTree.h:582; TTree::GetV2virtual Double_t * GetV2()Definition TTree.h:578; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; yDouble_t y[n]Definition legend1.C:17; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; graphDefinition graph.py:1; DateMarch 2018 ; AuthorJan Musinsky ; Definition in file hlGraph2.C. tutorialsgraphshlGraph2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlGraph2_8C.html:5318,Guid,Guide,5318,doc/master/hlGraph2_8C.html,https://root.cern,https://root.cern/doc/master/hlGraph2_8C.html,1,['Guid'],['Guide']
Usability,"gPad->PadtoX(gPad->AbsPixeltoX(x[i]+dpx));; 1012 if (!y.empty()) theY[i] = gPad->PadtoY(gPad->AbsPixeltoY(y[i]+dpy));; 1013 }; 1014 } else {; 1015 pxold = px;; 1016 pxold = TMath::Max(pxold, px1);; 1017 pxold = TMath::Min(pxold, px2);; 1018 pyold = py;; 1019 pyold = TMath::Max(pyold, py2);; 1020 pyold = TMath::Min(pyold, py1);; 1021 theX[ipoint] = gPad->PadtoX(gPad->AbsPixeltoX(pxold));; 1022 theY[ipoint] = gPad->PadtoY(gPad->AbsPixeltoY(pyold));; 1023 if (theGraph->InheritsFrom(""TCutG"")) {; 1024 //make sure first and last point are the same; 1025 if (ipoint == 0) {; 1026 theX[theNpoints-1] = theX[0];; 1027 theY[theNpoints-1] = theY[0];; 1028 }; 1029 if (ipoint == theNpoints-1) {; 1030 theX[0] = theX[theNpoints-1];; 1031 theY[0] = theY[theNpoints-1];; 1032 }; 1033 }; 1034 }; 1035 badcase = kFALSE;; 1036 gPad->Modified(kTRUE);; 1037 //gPad->Update();; 1038 }; 1039 break;; 1040 ; 1041 case kButton1Up:; 1042 ; 1043 if (gROOT->IsEscaped()) {; 1044 gROOT->SetEscape(kFALSE);; 1045 x.clear();; 1046 y.clear();; 1047 break;; 1048 }; 1049 ; 1050 // Compute x,y range; 1051 xmin = gPad->GetUxmin();; 1052 xmax = gPad->GetUxmax();; 1053 ymin = gPad->GetUymin();; 1054 ymax = gPad->GetUymax();; 1055 dx = xmax-xmin;; 1056 dy = ymax-ymin;; 1057 dxr = dx/(1 - gPad->GetLeftMargin() - gPad->GetRightMargin());; 1058 dyr = dy/(1 - gPad->GetBottomMargin() - gPad->GetTopMargin());; 1059 ; 1060 if (theGraph->GetHistogram()) {; 1061 // Range() could change the size of the pad pixmap and therefore should; 1062 // be called before the other paint routines; 1063 gPad->Range(xmin - dxr*gPad->GetLeftMargin(),; 1064 ymin - dyr*gPad->GetBottomMargin(),; 1065 xmax + dxr*gPad->GetRightMargin(),; 1066 ymax + dyr*gPad->GetTopMargin());; 1067 gPad->RangeAxis(xmin, ymin, xmax, ymax);; 1068 }; 1069 if (middle) {; 1070 for(i=0;i<theNpoints;i++) {; 1071 if (badcase) continue; //do not update if big zoom and points moved; 1072 if (!x.empty()) theX[i] = gPad->PadtoX(gPad->AbsPixeltoX(x[i]+dpx));; 1073 if (!y.em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:38508,clear,clear,38508,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"gPad->PadtoX(upx);; 10951 Int_t binx1 = fH->GetXaxis()->FindBin(x);; 10952 Int_t binx2 = TMath::Min(binx1+nbins-1, fH->GetXaxis()->GetNbins());; 10953 Int_t px1 = gPad->XtoAbsPixel(fH->GetXaxis()->GetBinLowEdge(binx1));; 10954 Int_t px2 = gPad->XtoAbsPixel(fH->GetXaxis()->GetBinUpEdge(binx2));; 10955 ; 10956 if (pxold1 || pxold2) gVirtualX->DrawBox(pxold1,pymin,pxold2,pymax,TVirtualX::kFilled);; 10957 gVirtualX->DrawBox(px1,pymin,px2,pymax,TVirtualX::kFilled);; 10958 pxold1 = px1;; 10959 pxold2 = px2;; 10960 ; 10961 // Create or set the new canvas proj y; 10962 TVirtualPad::TContext ctxt(true);; 10963 ; 10964 TString name2 = fShowProjection2 ? TString::Format(""c_%zx_projection2_%d"", (size_t)fH, fShowProjection2); 10965 : TString::Format(""c_%zx_projection_%d"", (size_t)fH, fShowProjection);; 10966 ; 10967 TVirtualPad *c = (TVirtualPad*)gROOT->GetListOfCanvases()->FindObject(name2.Data());; 10968 if (c) {; 10969 c->Clear();; 10970 } else {; 10971 fShowProjection = 0;; 10972 fShowProjection2 = 0;; 10973 pxold1 = 0;; 10974 pxold2 = 0;; 10975 return;; 10976 }; 10977 c->cd();; 10978 c->SetLogy(ctxt.GetSaved()->GetLogz());; 10979 c->SetLogx(ctxt.GetSaved()->GetLogy());; 10980 ; 10981 // Draw slice corresponding to mouse position; 10982 TString prjName = TString::Format(""slice_py_of_%s"",fH->GetName());; 10983 TH1D *hp = ((TH2*)fH)->ProjectionY(prjName, binx1, binx2);; 10984 if (hp) {; 10985 hp->SetFillColor(38);; 10986 // apply a patch from Oliver Freyermuth to set the title in the projection; 10987 // using the range of the projected X values; 10988 if (binx1 == binx2) {; 10989 Double_t valueFrom = fH->GetXaxis()->GetBinLowEdge(binx1);; 10990 Double_t valueTo = fH->GetXaxis()->GetBinUpEdge(binx1);; 10991 // Limit precision to 1 digit more than the difference between upper and lower bound (to also catch 121.5-120.5).; 10992 Int_t valuePrecision = -TMath::Nint(TMath::Log10(valueTo-valueFrom))+1;; 10993 if (fH->GetXaxis()->GetLabels() != nullptr) {; 10994 hp->SetTitle(TString:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:395605,Clear,Clear,395605,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.8); else:; c.SaveAs(""rf618_plot_1.png""); c = ROOT.TCanvas("""", """", 600, 600); ; frame2.Draw(); ; if not single_canvas:; c.SaveAs(""rf618_plot_2.png""); ; # Compute the minimum via minuit and display the results; minimizer = ROOT.RooMinimizer(nll); minimizer.setErrorLevel(0.5) # Adjust the error level in the minimization to work with likelihoods; minimizer.setPrintLevel(-1); minimizer.minimize(""Minuit2""); result = minimizer.save(); ROOT.SetOwnership(result, True); result.Print(); ; del minimizer; del nll; del pdf_learned_extended; del n_pred; del llh; del nll_ratio; ; import sys; ; # Hack to bypass ClearProxiedObjects(); del sys.modules[""libROOTPythonizations""]; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; DateSeptember 2024 ; AuthorRobin Syring ; Definition in file rf618_mixture_models.py. tutorialsroofitrf618_mixture_models.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf618__mixture__models_8py.html:8626,Guid,Guide,8626,doc/master/rf618__mixture__models_8py.html,https://root.cern,https://root.cern/doc/master/rf618__mixture__models_8py.html,1,['Guid'],['Guide']
Usability,"gPath;; 174 path.insert(path.end(), request.path.begin(), request.path.end());; 175 ; 176 if ((path != fLastPath) || !fLastElement) {; 177 ; 178 auto elem = GetSubElement(path);; 179 if (!elem) return false;; 180 ; 181 ResetLastRequestData(true);; 182 ; 183 fLastPath = path;; 184 fLastElement = std::move(elem);; 185 ; 186 fLastElement->cd(); // set element active; 187 } else if (request.reload) {; 188 // only reload items from element, not need to reset element itself; 189 ResetLastRequestData(false);; 190 }; 191 ; 192 // when request childs, always try to make elements; 193 if (fLastItems.empty()) {; 194 ; 195 auto iter = fLastElement->GetChildsIter();; 196 ; 197 if (!iter) return false;; 198 int id = 0;; 199 fLastAllChilds = true;; 200 ; 201 while (iter->Next() && fLastAllChilds) {; 202 fLastItems.emplace_back(iter->CreateItem());; 203 if (id++ > 10000); 204 fLastAllChilds = false;; 205 }; 206 ; 207 fLastSortedItems.clear();; 208 fLastSortMethod.clear();; 209 }; 210 ; 211 // create sorted array; 212 if ((fLastSortedItems.size() != fLastItems.size()) ||; 213 (fLastSortMethod != request.sort) ||; 214 (fLastSortReverse != request.reverse)) {; 215 fLastSortedItems.resize(fLastItems.size(), nullptr);; 216 int id = 0;; 217 if (request.sort.empty()) {; 218 // no sorting, just move all folders up; 219 for (auto &item : fLastItems); 220 if (item->IsFolder()); 221 fLastSortedItems[id++] = item.get();; 222 for (auto &item : fLastItems); 223 if (!item->IsFolder()); 224 fLastSortedItems[id++] = item.get();; 225 } else {; 226 // copy items; 227 for (auto &item : fLastItems); 228 fLastSortedItems[id++] = item.get();; 229 ; 230 if (request.sort != ""unsorted""); 231 std::sort(fLastSortedItems.begin(), fLastSortedItems.end(),; 232 [request](const Browsable::RItem *a, const Browsable::RItem *b) { return a ? a->Compare(b, request.sort) : !b; });; 233 }; 234 ; 235 if (request.reverse); 236 std::reverse(fLastSortedItems.begin(), fLastSortedItems.end());; 237 ; 238 fLastSortMethod = reque",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:6576,clear,clear,6576,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,2,['clear'],['clear']
Usability,"gRandom->Rndm()*20;; h->Fill(people[r],1);; }; h->LabelsDeflate();; h->Draw();; TPaveText *pt = new TPaveText(0.7,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; ptTPaveText * ptDefinition entrylist_figure1.C:7; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file hlabels1.C. tutorialshisthlabels1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlabels1_8C.html:2681,Guid,Guide,2681,doc/master/hlabels1_8C.html,https://root.cern,https://root.cern/doc/master/hlabels1_8C.html,1,['Guid'],['Guide']
Usability,"gScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(RLogChannel &channel, ELogLevel verbosity)Definition RLogger.hxx:248; ROOT::Experimental::RLogScopedVerbosity::fPrevLevelELogLevel fPrevLevelDefinition RLogger.hxx:245; ROOT::Experimental::RLogScopedVerbosity::~RLogScopedVerbosity~RLogScopedVerbosity()Definition RLogger.hxx:253; ROOT::Experimental::RLogScopedVerbosity::RLogScopedVerbosityRLogScopedVerbosity(ELogLevel verbosity)Definition RLogger.hxx:252; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::operator+ELogLevel operator+(ELogLevel severity, int offset)Definition RLogger.hxx:45; ROOT::Experimental::ELogLevelELogLevelKinds of diagnostics.Definition RLogger.hxx:36; ROOT::Experimental::ELogLevel::kInfo@ kInfoInformational messages; used for instance for tracing.; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kUnset@ kUnset; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::Experimental::ELogLevel::kFatal@ kFatalAn error which causes further processing to be unreliable.; ROOT::Experimental::ELogLevel::kWarning@ kWarningWarnings about likely unexpected behavior.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Experimental::RLogLocationA diagnostic location, part of an RLogEntry.Definition RLogger.hxx:166; ROOT::Experimental::RLogLocation::fFuncNamestd::string fFuncNameDefinition RLogger.hxx:168; ROOT::Experimental::RLogLocation::fFilestd::string fFileDefinition RLogger.hxx:167; ROOT::Experimental::RLogLocation::fLineint fLineDefinition RLogger.hxx:169. corefoundationincROOTRLogger.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:26032,Guid,Guide,26032,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['Guid'],['Guide']
Usability,"gSet &numVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; const RooArgList & list () const;  ; const RooArgList & list1 () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  ; bool setData (RooAbsData &data, bool cloneData=true) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:2902,simpl,simple,2902,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,1,['simpl'],['simple']
Usability,"gSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooFormulaVarA RooFormulaVar is a generic implementation of a real-valued object, which takes a RooArgList of serv...Definition RooFormulaVar.h:30; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf313_paramrangesDefinition rf313_paramranges.py:1; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]_Int[x|R]) using numeric integrator RooIntegrator1D to calculate Int(x); [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]) using numeric integrator RooIntegrator1D to calculate Int(y); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf313_paramranges.C. tutorialsroofitrf313_paramranges.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf313__paramranges_8C.html:4376,Guid,Guide,4376,doc/master/rf313__paramranges_8C.html,https://root.cern,https://root.cern/doc/master/rf313__paramranges_8C.html,1,['Guid'],['Guide']
Usability,"gSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); virtual voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html:3301,Clear,Clear,3301,root/html530/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html530/RooCacheManager_RooAbsCacheElement_.html,2,['Clear'],['Clear']
Usability,"gSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:4679,clear,clearEvalError,4679,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['clear'],['clearEvalError']
Usability,"gTCling.h""; 20 ; 21#undef R__DLLEXPORT; 22 ; 23#ifdef __FreeBSD__; 24char* __progname;; 25char** environ;; 26#endif; 27 ; 28#include ""TROOT.h""; 29#include ""TCling.h""; 30 ; 31extern ""C""; 32const char ** *TROOT__GetExtraInterpreterArgs(); 33{; 34 return &TROOT::GetExtraInterpreterArgs();; 35}; 36 ; 37extern ""C""; 38const char *TROOT__GetIncludeDir(); 39{; 40 return TROOT::GetIncludeDir();; 41}; 42 ; 43extern ""C""; 44const char *TROOT__GetEtcDir(); 45{; 46 return TROOT::GetEtcDir();; 47}; 48 ; 49extern ""C""; 50cling::Interpreter *TCling__GetInterpreter(); 51{; 52 static auto triggerInitialization = gROOT;; 53 (void)triggerInitialization;; 54 return (cling::Interpreter *)((TCling *)gCling)->GetInterpreterImpl();; 55}; 56 ; TCling.h; gClingR__EXTERN TInterpreter * gClingDefinition TInterpreter.h:574; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TClingThis class defines an interface to the cling C++ interpreter.Definition TCling.h:102; TROOT::GetIncludeDirstatic const TString & GetIncludeDir()Get the include directory in the installation. Static utility function.Definition TROOT.cxx:3046; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2966; TROOT__GetExtraInterpreterArgsconst char *** TROOT__GetExtraInterpreterArgs()Definition rootclingTCling.cxx:32; TROOT__GetEtcDirconst char * TROOT__GetEtcDir()Definition rootclingTCling.cxx:44; TROOT__GetIncludeDirconst char * TROOT__GetIncludeDir()Definition rootclingTCling.cxx:38; TCling__GetInterpretercling::Interpreter * TCling__GetInterpreter()Definition rootclingTCling.cxx:50; rootclingTCling.h. coremetaclingsrcrootclingTCling.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootclingTCling_8cxx_source.html:2732,Guid,Guide,2732,doc/master/rootclingTCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootclingTCling_8cxx_source.html,1,['Guid'],['Guide']
Usability,"gTNamed::fTitleobject title; Long64_tTBranch::fTotBytesTotal number of bytes in all leaves before compression; TTree*TBranch::fTree! Pointer to Tree header; Int_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. void FillLeaves(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetReadEntry(Long64_t entry); {fReadEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchRef.h 37275 2010-12-04 21:32:11Z pcanal $ » Last generated: 2010-12-04 22:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchRef.html:13918,clear,cleared,13918,root/html528/TBranchRef.html,https://root.cern,https://root.cern/root/html528/TBranchRef.html,1,['clear'],['cleared']
Usability,"gWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). virtual ~TGProgressBar(); { }. Float_t GetMin() const; { return fMin; }. Float_t GetMax() const; { return fMax; }. Float_t GetPosition() const; { return fPos; }. EFillType GetFillType() const; { return fFillType; }. EBarType GetBarType() const; { return fBarType; }. Bool_t GetShowPos() const; { return fShowPos; }. TString GetFormat() const; { return fFormat; }. const char* GetValueFormat() const; { return fFormat.Data(); }. Bool_t UsePercent() const; { return fPercent; }. Pixel_t GetBarColor() const; { return fBarColorGC.GetForeground(); }. GContext_t GetNormGC() const; { return fNormGC; }. FontStruct_t GetFontStruct() const; { return fFontStruct; }. void Percent(Bool_t on); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t on); { fShowPos = on; fClient->NeedRedraw(this); }. void SetMin(Float_t min); { fMin = min; }. void SetMax(Float_t max); { fMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGProgressBar.html:19918,progress bar,progress bar,19918,root/html528/TGProgressBar.html,https://root.cern,https://root.cern/root/html528/TGProgressBar.html,4,['progress bar'],['progress bar']
Usability,"gYHighlightBox.reset();; 3866 // emit Highlighted() signal (user can check on disabled); 3867 if (gPad->GetCanvas()) gPad->GetCanvas()->Highlighted(gPad, fH, fXHighlightBin, fYHighlightBin);; 3868}; 3869 ; 3870////////////////////////////////////////////////////////////////////////////////; 3871/// Check on highlight bin; 3872 ; 3873void THistPainter::HighlightBin(Int_t px, Int_t py); 3874{; 3875 // call from DistancetoPrimitive (only if highlight is enable); 3876 ; 3877 Double_t x = gPad->PadtoX(gPad->AbsPixeltoX(px));; 3878 Double_t y = gPad->PadtoY(gPad->AbsPixeltoY(py));; 3879 Int_t binx = fXaxis->FindFixBin(x);; 3880 Int_t biny = fYaxis->FindFixBin(y);; 3881 if (!gPad->IsVertical()) binx = fXaxis->FindFixBin(y);; 3882 ; 3883 Bool_t changedBin = kFALSE;; 3884 if (binx != fXHighlightBin) {; 3885 fXHighlightBin = binx;; 3886 changedBin = kTRUE;; 3887 } else if (fH->GetDimension() == 1) return;; 3888 if (biny != fYHighlightBin) {; 3889 fYHighlightBin = biny;; 3890 changedBin = kTRUE;; 3891 }; 3892 if (!changedBin) return;; 3893 ; 3894 // Info(""HighlightBin"", ""histo: %p '%s'\txbin: %d, ybin: %d"",; 3895 // (void *)fH, fH->GetName(), fXHighlightBin, fYHighlightBin);; 3896 ; 3897 // paint highlight bin as box (recursive calls PaintHighlightBin); 3898 gPad->Modified(kTRUE);; 3899 gPad->Update();; 3900 ; 3901 // emit Highlighted() signal; 3902 if (gPad->GetCanvas()) gPad->GetCanvas()->Highlighted(gPad, fH, fXHighlightBin, fYHighlightBin);; 3903}; 3904 ; 3905////////////////////////////////////////////////////////////////////////////////; 3906/// Paint highlight bin as TBox object; 3907 ; 3908void THistPainter::PaintHighlightBin(Option_t * /*option*/); 3909{; 3910 // call from PaintTitle; 3911 ; 3912 if (!fH->IsHighlight()) return;; 3913 ; 3914 Double_t uxmin = gPad->GetUxmin();; 3915 Double_t uxmax = gPad->GetUxmax();; 3916 Double_t uymin = gPad->GetUymin();; 3917 Double_t uymax = gPad->GetUymax();; 3918 if (gPad->GetLogx()) {; 3919 uxmin = TMath::Power(10.0, uxmin);; 392",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:151666,ux,uxmin,151666,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,3,['ux'],"['uxmax', 'uxmin']"
Usability,"g_out = new char[nvar*nchar+1];; 667 Int_t *charflag = new Int_t[nvar];; 668 Int_t *lenchar = new Int_t[nvar];; 669 Int_t *boolflag = new Int_t[nvar];; 670 Int_t *lenbool = new Int_t[nvar];; 671 UChar_t *boolarr = new UChar_t[10000];; 672 ; 673 chtag_out[nvar*nchar]=0;; 674 for (i=0;i<80;i++)chtitl[i]=0;; 675#ifndef WIN32; 676 hgiven(id,chtitl,nvar,chtag_out,rmin[0],rmax[0],80,nchar);; 677#else; 678 hgiven(id,chtitl,80,nvar,chtag_out,nchar,rmin[0],rmax[0]);; 679#endif; 680 ; 681 Int_t bufpos = 0;; 682 //Int_t isachar = 0;; 683 //Int_t isabool = 0;; 684 char fullname[64];; 685 char name[32];; 686 char block[32];; 687 char oldblock[32];; 688 strlcpy(oldblock,""OLDBLOCK"",32);; 689 Int_t oldischar = -1;; 690 for (i=80;i>0;i--) {if (chtitl[i] == ' ') chtitl[i] = 0; }; 691 THbookTree *tree = new THbookTree(idname,id);; 692 tree->SetHbookFile(this);; 693 tree->SetType(1);; 694 ; 695 char *bigbuf = tree->MakeX(500000);; 696 ; 697#ifndef WIN32; 698 hbnam(id,PASSCHAR("" ""),bigbuf[0],PASSCHAR(""$CLEAR""),0,1,6);; 699#else; 700 hbnam(id,PASSCHAR("" ""),bigbuf[0],PASSCHAR(""$CLEAR""),0);; 701#endif; 702 ; 703 UInt_t varNumber = 0;; 704 Int_t golower = 1;; 705 Int_t nbits = 0;; 706 for(i=0; i<nvar;i++) {; 707 memset(name,' ',sizeof(name));; 708 name[sizeof(name)-1] = 0;; 709 memset(block,' ',sizeof(block));; 710 block[sizeof(block)-1] = 0;; 711 memset(fullname,' ',sizeof(fullname));; 712 fullname[sizeof(fullname)-1]=0;; 713#ifndef WIN32; 714 hntvar2(id,i+1,PASSCHAR(name),PASSCHAR(fullname),PASSCHAR(block),nsub,itype,isize,nbits,ielem,32,64,32);; 715#else; 716 hntvar2(id,i+1,PASSCHAR(name),PASSCHAR(fullname),PASSCHAR(block),nsub,itype,isize,nbits,ielem);; 717#endif; 718 TString hbookName = name;; 719 ; 720 for (j=30;j>0;j--) {; 721 if(golower) name[j] = tolower(name[j]);; 722 if (name[j] == ' ') name[j] = 0;; 723 }; 724 if (golower == 2) name[0] = tolower(name[0]);; 725 ; 726 for (j=62;j>0;j--) {; 727 if(golower && fullname[j-1] != '[') fullname[j] = tolower(fullname[j]);; 728 // convert ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THbookFile_8cxx_source.html:21529,CLEAR,CLEAR,21529,doc/master/THbookFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THbookFile_8cxx_source.html,1,['CLEAR'],['CLEAR']
Usability,"g_t Property() const overrideGet property description word. For meaning of bits see EProperty.Definition TBaseClass.cxx:134; TBaseClass::~TBaseClassvirtual ~TBaseClass()TBaseClass dtor deletes adopted CINT BaseClassInfo object.Definition TBaseClass.cxx:46; TBaseClass::TBaseClassTBaseClass(const TBaseClass &)=delete; TBaseClass::fClassPtrTClassRef fClassPtrpointer to CINT base class infoDefinition TBaseClass.h:50; TBaseClass::fDeltaAtomicInt_t fDeltapointer to parent classDefinition TBaseClass.h:52; TBaseClass::fClassTClass * fClassDefinition TBaseClass.h:51; TBaseClass::fSTLTypeInt_t fSTLTypeDefinition TBaseClass.h:54; TBaseClass::fPropertyAtomicInt_t fPropertyDefinition TBaseClass.h:53; TBaseClass::SetClassvoid SetClass(TClass *cl)Definition TBaseClass.h:67; TBaseClass::fInfoBaseClassInfo_t * fInfoDefinition TBaseClass.h:49; TBaseClass::GetClassPointerTClass * GetClassPointer(Bool_t load=kTRUE)Get pointer to the base class TClass.Definition TBaseClass.cxx:63; TBaseClass::AtomicInt_tstd::atomic< Int_t > AtomicInt_tDefinition TBaseClass.h:35; TBaseClass::IsFolderBool_t IsFolder() const overrideReturns kTRUE in case object contains browsable objects (like containers or lists of other objects).Definition TBaseClass.h:64; TBaseClass::GetTitleconst char * GetTitle() const overrideGet base class description (comment).Definition TBaseClass.cxx:92; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TDictionaryThis class defines an abstract interface that must be implemented by all classes that contain diction...Definition TDictionary.h:168; bool; int; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28. coremetaincTBaseClass.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBaseClass_8h_source.html:5271,Guid,Guide,5271,doc/master/TBaseClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TBaseClass_8h_source.html,1,['Guid'],['Guide']
Usability,"gacy/pyroot/tree.py') + '"" );', 'The Tree Data Structure' ); bar.AddButton( 'ntuple1', r'TPython::Exec( ""' + to_run.format('ntuple1.py') + '"" );', 'Ntuples and Selections' ); bar.AddButton( 'rootmarks', r'TPython::Exec( ""' + to_run.format('../legacy/pyroot/rootmarks.py') +'"" );', 'Prints an Estimated ROOTMARKS for Your Machine' ); bar.AddSeparator() # not implemented; bar.AddButton( 'make ntuple', r'TPython::Exec( ""' + to_run.format('mrt.py') + '"" );', 'Convert a text file to an ntuple' ); ; bar.Show(); ; ROOT.gROOT.SaveContext(); ; ; ## wait for input to keep the GUI (which lives on a ROOT event dispatcher) alive; if __name__ == '__main__':; rep = ''; while not rep in [ 'q', 'Q' ]:; rep = input( 'enter ""q"" to quit: ' ); if 1 < len(rep):; rep = rep[0]; inputOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void inputDefinition TGWin32VirtualXProxy.cxx:142; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; AuthorWim Lavrijsen, Enric Tejedor ; Definition in file demo.py. tutorialspyrootdemo.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demo_8py.html:5499,Guid,Guide,5499,doc/master/demo_8py.html,https://root.cern,https://root.cern/doc/master/demo_8py.html,1,['Guid'],['Guide']
Usability,"gainst possible overflows. ; Definition at line 535 of file TMath.cxx. ◆ Normalize() [2/2]. Float_t TMath::Normalize ; (; Float_t ; v[3]). Normalize a vector v in place. ; Returns the norm of the original vector. ; Definition at line 518 of file TMath.cxx. ◆ NormCross(). template<typename T > . T TMath::NormCross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). inline . Calculates the Normalized Cross Product of two vectors. ; Definition at line 951 of file TMath.h. ◆ NormQuantile(). Double_t TMath::NormQuantile ; (; Double_t ; p). Computes quantiles for standard normal distribution N(0, 1) at probability p. ; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. ; Definition at line 2456 of file TMath.cxx. ◆ Odd(). Bool_t TMath::Odd ; (; Long_t ; a). inline . Returns true if a is odd. ; Definition at line 117 of file TMathBase.h. ◆ Permute(). Bool_t TMath::Permute ; (; Int_t ; n, . Int_t * ; a . ). Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ; The input array has to be initialised with a non descending sequence. The method returns kFALSE when all combinations are exhausted. ; Definition at line 2557 of file TMath.cxx. ◆ Pi(). constexpr Double_t TMath::Pi ; (; ). constexpr . \( \pi\) ; Definition at line 37 of file TMath.h. ◆ PiOver2(). constexpr Double_t TMath::PiOver2 ; (; ). constexpr . \( \frac{\pi}{2} \) ; Definition at line 51 of file TMath.h. ◆ PiOver4(). constexpr Double_t TMath::PiOver4 ; (; ). constexpr . \( \frac{\pi}{4} \) ; Definition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:70394,Simpl,Simple,70394,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['Simpl'],['Simple']
Usability,gator::fNMax. protected . Definition at line 191 of file TEveTrackPropagator.h. ◆ fOwnMagFiledObj. Bool_t TEveTrackPropagator::fOwnMagFiledObj. protected . Definition at line 186 of file TEveTrackPropagator.h. ◆ fPMAtt. TMarker TEveTrackPropagator::fPMAtt. protected . Definition at line 207 of file TEveTrackPropagator.h. ◆ fPoints. std::vector<TEveVector4D> TEveTrackPropagator::fPoints. protected . Definition at line 218 of file TEveTrackPropagator.h. ◆ fProjTrackBreaking. UChar_t TEveTrackPropagator::fProjTrackBreaking. protected . Definition at line 211 of file TEveTrackPropagator.h. ◆ fPTBAtt. TMarker TEveTrackPropagator::fPTBAtt. protected . Definition at line 213 of file TEveTrackPropagator.h. ◆ fRnrCluster2Ds. Bool_t TEveTrackPropagator::fRnrCluster2Ds. protected . Definition at line 205 of file TEveTrackPropagator.h. ◆ fRnrDaughters. Bool_t TEveTrackPropagator::fRnrDaughters. protected . Definition at line 202 of file TEveTrackPropagator.h. ◆ fRnrDecay. Bool_t TEveTrackPropagator::fRnrDecay. protected . Definition at line 204 of file TEveTrackPropagator.h. ◆ fRnrFV. Bool_t TEveTrackPropagator::fRnrFV. protected . Definition at line 206 of file TEveTrackPropagator.h. ◆ fRnrPTBMarkers. Bool_t TEveTrackPropagator::fRnrPTBMarkers. protected . Definition at line 212 of file TEveTrackPropagator.h. ◆ fRnrReferences. Bool_t TEveTrackPropagator::fRnrReferences. protected . Definition at line 203 of file TEveTrackPropagator.h. ◆ fStepper. EStepper_e TEveTrackPropagator::fStepper. protected . Definition at line 183 of file TEveTrackPropagator.h. ◆ fV. TEveVectorD TEveTrackPropagator::fV. protected . Definition at line 220 of file TEveTrackPropagator.h. Libraries for TEveTrackPropagator:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveTrackPropagator.h; graf3d/eve/src/TEveTrackPropagator.cxx. TEveTrackPropagator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:67250,Guid,Guide,67250,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['Guid'],['Guide']
Usability,"ge datasets, an operation which can take a very long time.; If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2 all files marked as 'staged' are still open or touched); Return code kTRUE the file appears newly staged kFALSE otherwise; changed is true if the fileinfo is modified touched is true if the file is open and read disappeared is true if the file is marked staged but actually not staged ; Definition at line 1414 of file TDataSetManager.cxx. ◆ Class(). static TClass * TDataSetManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDataSetManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDataSetManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 158 of file TDataSetManager.h. ◆ ClearCache(). Int_t TDataSetManager::ClearCache ; (; const char * ; uri). virtual . Clear cached information matching uri. ; Reimplemented in TDataSetManagerFile.; Definition at line 786 of file TDataSetManager.cxx. ◆ CreateUri(). TString TDataSetManager::CreateUri ; (; const char * ; dsGroup = 0, . const char * ; dsUser = 0, . const char * ; dsName = 0, . const char * ; dsTree = 0 . ). static . Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]', The optional dsObjPath can be in the form [subdir/]objname]'. ; Definition at line 805 of file TDataSetManager.cxx. ◆ DeclFileName(). static const char * TDataSetManager::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 158 of file TDataSetManager.h. ◆ ExistsDataSet(). Bool_t TDataSetManager::ExistsDataSet ; (; const char * ; uri). virtual . Checks if the indicated dataset exits. ; Reimplemented in TDataSetManagerFile.; Definition at line 439 of file TDataSetManager.cxx. ◆ FillMetaData(). Int_t TDataSetManager::FillMetaData ; (; TFileInfo * ; f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:21402,Clear,Clear,21402,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['Clear'],['Clear']
Usability,"ge of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::model; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooChebychev::bkg; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::x; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a0; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::bkgfrac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::sig; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing dataset modelData; ; RooWorkspace(w) workspace contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,sigma1,sigma2,x); ; p.d.f.s; -------; RooChebychev::bkg[ x=x coefList=(a0,a1) ] = 0.8; RooAddPdf::model[ bkgfrac * bkg + [%] * sig ] = 0.9/1; RooAddPdf::sig[ sig1frac * sig1 + [%] * sig2 ] = 1/1; RooGaussian::sig1[ x=x mean=mean sigma=sigma1 ] = 1; RooGaussian::sig2[ x=x mean=mean sigma=sigma2 ] = 1; ; datasets; --------; RooDataSet::modelData(x); ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf502_wspacewrite.C. tutorialsroofitrf502_wspacewrite.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf502__wspacewrite_8C.html:5872,Guid,Guide,5872,doc/master/rf502__wspacewrite_8C.html,https://root.cern,https://root.cern/doc/master/rf502__wspacewrite_8C.html,1,['Guid'],['Guide']
Usability,"ge of (see TBuffer3D.h and TBuffer3DTypes.h). TBuffer3DSphere - solid, hollow and cut spheres*; TBuffer3DTubeSeg - angle tube segment; TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated.; Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time.; BoundingBox: You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However; to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference; frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates; if any positions in the buffer (bounding box and tessellation vertexes) are; in local or master (world; frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL; colum major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an; identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function.; Logical & Physical Objects; There are two cases of object addition:. Add this object as a single independent entity in the world reference; frame.; Add; a physical placement (copy) of this logical object (described in local; reference frame). The second case is very typical in geometry packages, GEANT4, where we have; very large number repeated placements of relatively fe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:4075,simpl,simpler,4075,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,13,['simpl'],['simpler']
Usability,"ge of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 444 of file TH1.h. ◆ ClearUnderflowAndOverflow(). void TH1::ClearUnderflowAndOverflow ; (; ). virtual . Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in the histogram has changed since the previous call to GetRandom. The resulting integral is normalized to 1. If the routine is called with the onlyPositive flag set an error will be produced in case of negative bin content and a NaN value returned Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:102039,clear,cleared,102039,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['clear'],['cleared']
Usability,"ge the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TEventList have influence on the behaviour of the cache:. Special case of a TChain Once the training is done on the first Tree, the list of branches in the cache is kept for the following files.; Special case of a TEventlist if the Tree or TChain has a TEventlist, only the buffers referenced by the list are put in the cache. The learning phase is started or restarted when:; TTree automatically creates a cache.; TTree::SetCacheSize is called with a non-zero size and a cache did not previously exist; TTreeCache::StartLearningPhase is called.; TTreeCache::SetEntryRange is called and the learning is not yet finished and has not been set to manual and the new minimun entry is different. The learning period is stopped (and prefetching is started) when:; TTreeCache::StopLearningPhase is called.; An entry outside the 'learning' range is requested The 'learning range is from fEntryMin (default to 0) to fEntryMin + fgLearnEntries.; A 'cached' TChain switches over to a new file. Self-optimization in presence of cache misses; The TTreeCache can optimize its behavior on a cache miss. When miss optimization is enabled (see the SetOptimizeMisses method), it tracks all branches utilized after the learning phase which caused a cache miss. When one cache miss occurs, all the utilized branches are be prefetched for that event. This optimization utilizes the observation that infrequently accessed branches are often accessed together. An example scenario where such behavior is desirable, is an analysis where a set of collections are read only for a few events in which a certain condition is respected, e.g. a tri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:3962,learn,learning,3962,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"ge"");; 904 view->SetAutoRange(kFALSE);; 905 view->SetPerspective();; 906 // Create a 3D viewer to paint us; 907 gPad->GetViewer3D(option);; 908}; 909 ; 910////////////////////////////////////////////////////////////////////////////////; 911/// Draw an overlap.; 912 ; 913void TGeoPainter::DrawOverlap(void *ovlp, Option_t *option); 914{; 915 TString opt = option;; 916 fIsPaintingShape = kFALSE;; 917 TGeoOverlap *overlap = (TGeoOverlap *)ovlp;; 918 if (!overlap); 919 return;; 920 ; 921 fPaintingOverlaps = kTRUE;; 922 fOverlap = overlap;; 923 opt.ToLower();; 924 if (fVisLock) {; 925 ClearVisibleVolumes();; 926 fVisLock = kFALSE;; 927 }; 928 Bool_t has_pad = (gPad == nullptr) ? kFALSE : kTRUE;; 929 // Clear pad if option ""same"" not given; 930 if (!gPad) {; 931 gROOT->MakeDefCanvas();; 932 }; 933 if (!opt.Contains(""same"")); 934 gPad->Clear();; 935 // append this volume to pad; 936 overlap->AppendPad(option);; 937 ; 938 // Create a 3-D view; 939 // Create a 3D viewer to paint us; 940 gPad->GetViewer3D(option);; 941 TView *view = gPad->GetView();; 942 if (!view) {; 943 view = TView::CreateView(11, nullptr, nullptr);; 944 // Set the view to perform a first autorange (frame) draw.; 945 // TViewer3DPad will revert view to normal painting after this; 946 view->SetAutoRange(kTRUE);; 947 PaintOverlap(ovlp, ""range"");; 948 overlap->GetPolyMarker()->Draw(""SAME"");; 949 if (has_pad); 950 gPad->Update();; 951 }; 952 ; 953 // If we are drawing into the pad, then the view needs to be; 954 // set to perspective; 955 // if (!view->IsPerspective()) view->SetPerspective();; 956 fVisLock = kTRUE;; 957}; 958 ; 959////////////////////////////////////////////////////////////////////////////////; 960/// Draw only one volume.; 961 ; 962void TGeoPainter::DrawOnly(Option_t *option); 963{; 964 TString opt = option;; 965 opt.ToLower();; 966 if (fVisLock) {; 967 ClearVisibleVolumes();; 968 fVisLock = kFALSE;; 969 }; 970 fPaintingOverlaps = kFALSE;; 971 fIsPaintingShape = kFALSE;; 972 Bool_t has_pad = (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:29833,Clear,Clear,29833,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ge() [2/2]. void RooCategory::addToRange ; (; const char * ; name, . RooAbsCategory::value_type ; stateIndex . ). Add the given state to the given range. ; NoteThis creates or accesses a shared map with allowed ranges. All copies of this category will share this range such that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 348 of file RooCategory.cxx. ◆ Class(). static TClass * RooCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooCategory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file RooCategory.h. ◆ clear(). void RooCategory::clear ; (; ). inline . Clear all defined category states. ; Definition at line 69 of file RooCategory.h. ◆ clearRange(). void RooCategory::clearRange ; (; const char * ; name, . bool ; silent . ). Clear the named range. ; NoteThis affects all copies of this category, because they are sharing range definitions. This ensures that categories inside a dataset and their counterparts on the outside will both see a modification of the range. ; Definition at line 321 of file RooCategory.cxx. ◆ clone(). TObject * RooCategory::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 37 of file RooCategory.h. ◆ DeclFileName(). static const char * RooCategory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 141 of file RooCategory.h. ◆ defineType() [1/2]. bool RooCategory::defineType ; (; const std::string & ; label). Define a state with given name. ; The lowest available positive integer is assigned as index. Category state labels may not contain semicolons. ReturnsTrue in case of an error. ; Definition at line 209 of file Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:55191,clear,clearRange,55191,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['clear'],['clearRange']
Usability,"ge(Long64_t first, Long64_t last); 8833{; 8834 if (!GetTree()) {; 8835 if (LoadTree(0)<0) {; 8836 Error(""SetCacheEntryRange"",""Could not load a tree"");; 8837 return -1;; 8838 }; 8839 }; 8840 if (GetTree()) {; 8841 if (GetTree() != this) {; 8842 return GetTree()->SetCacheEntryRange(first, last);; 8843 }; 8844 } else {; 8845 Error(""SetCacheEntryRange"", ""No tree is available. Could not set cache entry range"");; 8846 return -1;; 8847 }; 8848 ; 8849 TFile *f = GetCurrentFile();; 8850 if (!f) {; 8851 Error(""SetCacheEntryRange"", ""No file is available. Could not set cache entry range"");; 8852 return -1;; 8853 }; 8854 TTreeCache *tc = GetReadCache(f,true);; 8855 if (!tc) {; 8856 Error(""SetCacheEntryRange"", ""No cache is available. Could not set entry range"");; 8857 return -1;; 8858 }; 8859 tc->SetEntryRange(first,last);; 8860 return 0;; 8861}; 8862 ; 8863////////////////////////////////////////////////////////////////////////////////; 8864/// Interface to TTreeCache to set the number of entries for the learning phase; 8865 ; 8866void TTree::SetCacheLearnEntries(Int_t n); 8867{; 8868 TTreeCache::SetLearnEntries(n);; 8869}; 8870 ; 8871////////////////////////////////////////////////////////////////////////////////; 8872/// Enable/Disable circularity for this tree.; 8873///; 8874/// if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; 8875/// per branch in memory.; 8876/// Note that when this function is called (maxEntries>0) the Tree; 8877/// must be empty or having only one basket per branch.; 8878/// if maxEntries <= 0 the tree circularity is disabled.; 8879///; 8880/// #### NOTE 1:; 8881/// Circular Trees are interesting in online real time environments; 8882/// to store the results of the last maxEntries events.; 8883/// #### NOTE 2:; 8884/// Calling SetCircular with maxEntries <= 0 is necessary before; 8885/// merging circular Trees that have been saved on files.; 8886/// #### NOTE 3:; 8887/// SetCircular with maxEntries <= 0 is automatically called; 8888",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:343901,learn,learning,343901,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['learn'],['learning']
Usability,"ge; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOMBUILDER; » TGeoVolumeEditor. class TGeoVolumeEditor: public TGeoGedFrame. TGeoVolumeEditor. Editor for geometry volumes and assemblies of volumes. Besides the volume; name and line attributes, a TGeoVolume has the following editable categories; split vertically by a shutter:; - Properties: one can edit the shape and medium components from here. It is; also possible to change the existing ones.; - Daughters: the main category allowing defining, editing, removing or; positioning daughter volumes inside the current edited volume. To add a; daughter, one needs to select first a volume and a matrix. Currently no check; is performed if the daughter volume creates an extrusion (illegal for tracking).; To remove or change the position of an existing daughter, one should simply; select the desired daughter from the combo box with the existing ones, then; simply click the appropriate button.; - Visualization: One can set the visibility of the volume and of its daughters,; set the visibility depth and the view type. Selecting ""All"" will draw the; volume and all visible daughters down to the selected level starting from the; edited volume. Selecting ""Leaves"" will draw just the deepest daughters within; the selected visibility level, without displaying the containers, while ""Only""; will just draw the edited volume.; - Division: The category becomes active only if there are no daughters of the; edited volume added by normal positioning (e.g. from <Daughters> category). The; minimum allowed starting value for the selected division axis is automatically; selected, while the dslicing step is set to 0 - meaning that only the number; of slices matter. Function Members (Methods); public:. TGeoVolumeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolumeEditor.html:1020,simpl,simply,1020,root/html534/TGeoVolumeEditor.html,https://root.cern,https://root.cern/root/html534/TGeoVolumeEditor.html,2,['simpl'],['simply']
Usability,"ge; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOMBUILDER; » TGeoVolumeEditor. class TGeoVolumeEditor: public TGeoGedFrame. TGeoVolumeEditor. Editor for geometry volumes and assemblies of volumes. Besides the volume; name and line attributes, a TGeoVolume has the following editable categories; split vertically by a shutter:; - Properties: one can edit the shape and medium components from here. It is; also possible to change the existing ones.; - Daughters: the main category allowing defining, editing, removing or; positioning daughter volumes inside the current edited volume. To add a; daughter, one needs to select first a volume and a matrix. Currently no check; is performed if the daughter volume creates an extrusion (illegal for tracking).; To remove or change the position of an existing daughter, one should simply; select the desired daughter from the combo box with the existing ones, then; simply click the appropriate button.; - Visualization: One can set the visibility of the volume and of its daughters,; set the visibility depth and the view type. Selecting ""All"" will draw the; volume and all visible daughters down to the selected level starting from the; edited volume. Selecting ""Leaves"" will draw just the deepest daughters within; the selected visibility level, without displaying the containers, while ""Only""; will just draw the edited volume.; - Division: The category becomes active only if there are no daughters of the; edited volume added by normal positioning (e.g. from <Daughters> category). The; minimum allowed starting value for the selected division axis is automatically; selected, while the dslicing step is set to 0 - meaning that only the number; of slices matter. Function Members (Methods); public:. virtual~TGeoVolumeEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoVolumeEditor.html:1020,simpl,simply,1020,root/html602/TGeoVolumeEditor.html,https://root.cern,https://root.cern/root/html602/TGeoVolumeEditor.html,4,['simpl'],['simply']
Usability,"geWindowAttributes(). void TGWin32::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Change window attributes. ; Reimplemented from TVirtualX.; Definition at line 6330 of file TGWin32.cxx. ◆ CheckEvent(). Bool_t TGWin32::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 5804 of file TGWin32.cxx. ◆ Class(). static TClass * TGWin32::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGWin32::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGWin32::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGWin32.h. ◆ ClearArea(). void TGWin32::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the bakcground color. ; Reimplemented from TVirtualX.; Definition at line 6398 of file TGWin32.cxx. ◆ ClearWindow() [1/2]. void TGWin32::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 1569 of file TGWin32.cxx. ◆ ClearWindow() [2/2]. void TGWin32::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 6728 of file TGWin32.cxx. ◆ CloseDisplay(). void TGWin32::CloseDisplay ; (; ). overridevirtual . close display (terminate server/gMainThread thread) ; Reimplemented from TVirtualX.; Definition at line 899 of file TGWin32.cxx. ◆ ClosePixmap(). void TGWin32::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 1588 of file TGWin32.cxx. ◆ CloseWindow(). void TGWin32::CloseWindow ; (; ). ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:57419,Clear,ClearArea,57419,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Clear'],['ClearArea']
Usability,"gendEntryTLegendEntry()TLegendEntry do-nothing default constructor.Definition TLegendEntry.cxx:30; TLegendEntry::SaveEntryvirtual void SaveEntry(std::ostream &out, const char *name)Save this TLegendEntry as C++ statements on output stream out to be used with the SaveAs ....Definition TLegendEntry.cxx:114; TLegendEntry::Classstatic TClass * Class(); TLegendEntry::~TLegendEntry~TLegendEntry() overrideTLegendEntry default destructor.Definition TLegendEntry.cxx:72; TLegendEntry::fLabelTString fLabelText associated with the entry, will become latex.Definition TLegendEntry.h:44; TLegendEntry::SetObjectvirtual void SetObject(TObject *obj)(re)set the obj pointed to by this entryDefinition TLegendEntry.cxx:138; TLegendEntry::Copyvoid Copy(TObject &obj) const overridecopy this TLegendEntry into objDefinition TLegendEntry.cxx:80; TLegendEntry::Printvoid Print(Option_t *option="""") const overridedump this TLegendEntry to std::coutDefinition TLegendEntry.cxx:95; TLegendEntry::fOptionTString fOptionOptions associated with this entry.Definition TLegendEntry.h:45; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::Copyvirtual void Copy(TObject &object) constCopy this to obj.Definition TObject.cxx:146; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; outputstatic void output(). graf2dgrafsrcTLegendEntry.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegendEntry_8cxx_source.html:9779,Guid,Guide,9779,doc/master/TLegendEntry_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLegendEntry_8cxx_source.html,1,['Guid'],['Guide']
Usability,"genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented from TFile.; Definition at line 232 of file TSQLFile.h. ◆ MakeSelectQuery(). TString TSQLFile::MakeSelectQuery ; (; TClass * ; cl). Produce SELECT statement which can be used t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:77624,clear,clear,77624,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['clear'],['clear']
Usability,"genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented from TFile.; Definition at line 78 of file TXMLFile.h. ◆ Map() [1/2]. void TXMLFile::Map ; (; ). inlinefinalvirtual . Reimplemented from TFile.; Definition at line 80 of file T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:60098,clear,clear,60098,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['clear'],['clear']
Usability,"genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filema",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:76979,clear,clear,76979,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['clear'],['clear']
Usability,"geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usage of ""Default"" geometry alias ;  geom_lhcb.CShows LHCB geometry ;  glplot.CPreliminary demo for showing Timur's GL plots in EVE ;  glplot_geom.CDemonstrates how to combine Timur's GL plots with other scene elements ;  hierarchical_scene.C;  histobrowser.CDemonstates how to use EVE as a histogram browser ;  jetcone.CDemonstrates usage of TEveJetCone class ;  lineset.CDemonstrates usage of class TEveStraightLineSet ;  lineset.py;  MultiView.CMulti-view (3d, rphi, rhoz) service class using EVE Window Manager ;  overlay_palette.C;  pack.CDemonstrates usage of class TGPack ;  paramlist.CDemonstrates usage of simple configuration via TEveParamList class ;  pointset.CDemonstrates usage of class TEvePointSet ;  projection.CDemonstrates usage of automatic 2D projections - class TEveProjectionManager ;  projection_prescale.CDemonstrates usage pre-scaling for automatic 2D projections ;  pythia_display.CDemo showing H -> ZZ -> 4 mu generated by Pythia ;  quadset.CDemonstates usage of 2D digit class TEveQuadSet ;  selection_sigs.CTest signals from TEveSelection class ;  show_extract.CHelper script for showing of extracted / simplified geometries ;  SplitGLView.CHelper classes for the alice_esd_split.C demo ;  text.CDemonstrates usage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► eve7;  collection.CThis example display collection of ??? in web browser ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:104969,simpl,simple,104969,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,"ger.hxx. ◆ DeclFileName(). static const char * ROOT::TBufferMergerFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 177 of file TBufferMerger.hxx. ◆ IsA(). TClass * ROOT::TBufferMergerFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 177 of file TBufferMerger.hxx. ◆ operator=(). TBufferMergerFile & ROOT::TBufferMergerFile::operator= ; (; const TBufferMergerFile & ; ). private . TBufferMergerFile has no copy operator. . ◆ Streamer(). void ROOT::TBufferMergerFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::TBufferMergerFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 177 of file TBufferMerger.hxx. ◆ Write(). Int_t ROOT::TBufferMergerFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsize = 0 . ). overridevirtual . Write data into a TBufferFile and append it to TBufferMerger. ; Parameters. nameName ; optOptions ; bufsizeBuffer size This function must be called before the TBufferMergerFile gets destroyed, or no data is appended to the TBufferMerger. . Reimplemented from TDirectory.; Definition at line 29 of file TBufferMergerFile.cxx. Friends And Related Symbol Documentation. ◆ TBufferMerger. friend class TBufferMerger. friend . Definition at line 160 of file TBufferMerger.hxx. Member Data Documentation. ◆ fMerger. TBufferMerger& ROOT::TBufferMergerFile::fMerger. private . Definition at line 145 of file TBufferMerger.hxx. Libraries for ROOT::TBufferMergerFile:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/ROOT/TBufferMerger.hxx; io/io/src/TBufferMergerFile.cxx. ROOTTBufferMergerFile. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:47963,Guid,Guide,47963,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,1,['Guid'],['Guide']
Usability,ger::AddNewEventCommand ; (; const TString & ; cmd). virtual . Register a command to be executed on each new event. ; Definition at line 48 of file TEveEventManager.cxx. ◆ AfterNewEventLoaded(). void TEveEventManager::AfterNewEventLoaded ; (; ). virtual . Virtual function to be called after a new event is loaded. ; It iterates over the list of registered commands (fNewEventCommands) and executes them in given order. ; Definition at line 37 of file TEveEventManager.cxx. ◆ Class(). static TClass * TEveEventManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveEventManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveEventManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 42 of file TEveEventManager.h. ◆ ClearNewEventCommands(). void TEveEventManager::ClearNewEventCommands ; (; ). virtual . Clear the list of commands to be executed on each new event. ; Definition at line 70 of file TEveEventManager.cxx. ◆ Close(). virtual void TEveEventManager::Close ; (; ). inlinevirtual . Definition at line 34 of file TEveEventManager.h. ◆ DeclFileName(). static const char * TEveEventManager::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 42 of file TEveEventManager.h. ◆ GetNewEventCommands(). std::vector< TString > & TEveEventManager::GetNewEventCommands ; (; ). inline . Definition at line 28 of file TEveEventManager.h. ◆ GotoEvent(). virtual void TEveEventManager::GotoEvent ; (; Int_t ; ). inlinevirtual . Definition at line 31 of file TEveEventManager.h. ◆ IsA(). TClass * TEveEventManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 42 of file TEveEventManager.h. ◆ NextEvent(). virtual void TEveEventManager::NextEvent ; (; ). inlinevirtual . Definition ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveEventManager.html:35064,Clear,Clear,35064,doc/master/classTEveEventManager.html,https://root.cern,https://root.cern/doc/master/classTEveEventManager.html,1,['Clear'],['Clear']
Usability,"ger::MakeTube() method, we would have been able to create our wire with a single line :; TGeoVolume *wire_co = gGeoManager->MakeTube(""WIRE_CO"", ptrCOPPER, 0, 0.01, 1);; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::MakeTubeTGeoVolume * MakeTube(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3204; The same applies for all primitive shapes, for which there can be found corresponding MakeSHAPE() methods. Their usage is much more convenient unless a shape has to be shared between more volumes. Let's make now an aluminium wire having the same shape, supposing that we have created the copper wire with the line above :; TGeoVolume *wire_al = new TGeoVolume(""WIRE_AL"", wire_co->GetShape(), ptrAL);; TGeoVolume::GetShapeTGeoShape * GetShape() constDefinition TGeoVolume.h:190; Now that we have learned how to create elementary volumes, let's see how we can create a geometrical hierarchy. Positioning volumes; When creating a volume one does not specify if this will contain or not other volumes. Adding daughters to a volume implies creating those and adding them one by one to the list of daughters. Since the volume has to know the position of all its daughters, we will have to supply at the same time a geometrical transformation with respect to its local reference frame for each of them. The objects referencing a volume and a transformation are called NODES and their creation is fully handled by the modeler. They represent the link elements in the hierarchy of volumes. Nodes are unique and distinct geometrical objects ONLY from their container point of view. Since volumes can be replicated in the geometry, the same node may be found on different branches. An important observation is that volume objects are owned by the TGeoManager class. This stores a list of all volumes in the geometry, that is cleaned upon des",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:4960,learn,learned,4960,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['learn'],['learned']
Usability,"ges to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in firs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:1578,undo,undo,1578,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,12,['undo'],['undo']
Usability,"gested work-flow, with an explanation of its motivation and details.; Some pertinent Git details; It is assumed at this point that you have a passing familiarity with CVS and/or Subversion; and that you have at least obtained a local copy (cloned) of a remote repository. Unlike CVS and SVN, every local working area is also a repository.; Unlike CVS and SVN, repositories are not sub-divisible: in the former systems, one can easily check out only a subsection of a package; with git, it's all-or-nothing.; A repository may have zero or more remote repositories to which items may be pushed (or from which they may be retrieved): Git is a truly distributed system.; Branches are easy to create, merge and destroy.; The, ""unit of change"" is a commit, labeled by its SHA1 hash. A tree's, ""state"" is a collection of commits. Merging branches multiple times is therefore trivial because it consists of comparing commit lists.; Git commit trees do not record history: they record changes. A simple change has one parent. Creating a branch creates another child of the parent commit; and a non-trivial merge joins two branches -- the resulting commit has two parents. Git (very) basics; Getting help. man git; git help <command>; man git-<command>; The git community book; Pragmatic Guide to Git; Google. Glossary. Add: put a file (or particular changes thereto) into the index ready for a commit operation. Optional for modifications to tracked files; mandatory for hitherto un-tracked files.; Alias shorthand for a git (or external) command, stored in a .gitconfig file.; Branch: a divergent change tree (eg a patch branch) which can me merged either wholesale or piecemeal with the master tree.; Commit: save the current state of the index and/or other specified files to the local repository.; Commit object: an object which contains the information about a particular revision, such as parents, committer, author, date and the tree object which corresponds to the top directory of the stored revision",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:2975,simpl,simple,2975,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['simpl'],['simple']
Usability,"get. Initialize it with the specified string. ; Definition at line 267 of file TGTextEdit.cxx. ◆ ~TGTextEdit(). TGTextEdit::~TGTextEdit ; (; ). override . Cleanup text edit widget. ; Definition at line 278 of file TGTextEdit.cxx. Member Function Documentation. ◆ AdjustPos(). void TGTextEdit::AdjustPos ; (; ). protectedvirtual . Adjust current position. ; Definition at line 907 of file TGTextEdit.cxx. ◆ BreakLine(). void TGTextEdit::BreakLine ; (; ). virtual . Break a line. ; Definition at line 1906 of file TGTextEdit.cxx. ◆ Class(). static TClass * TGTextEdit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextEdit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextEdit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 133 of file TGTextEdit.h. ◆ Clear(). void TGTextEdit::Clear ; (; Option_t * ; = """"). overridevirtual . Clear text edit widget. ; Reimplemented from TObject.; Definition at line 382 of file TGTextEdit.cxx. ◆ Closed(). virtual void TGTextEdit::Closed ; (; ). inlinevirtual . Definition at line 126 of file TGTextEdit.h. ◆ Copy() [1/2]. Bool_t TGTextEdit::Copy ; (; ). overridevirtual . Copy text. ; Reimplemented from TGTextView.; Definition at line 422 of file TGTextEdit.cxx. ◆ Copy() [2/2]. void TGTextEdit::Copy ; (; TObject & ; object); const. inlineoverrideprotectedvirtual . Copy this to obj. ; Reimplemented from TObject.; Definition at line 60 of file TGTextEdit.h. ◆ CursorOff(). void TGTextEdit::CursorOff ; (; ). protectedvirtual . If cursor if on, turn it off. ; Definition at line 790 of file TGTextEdit.cxx. ◆ CursorOn(). void TGTextEdit::CursorOn ; (; ). protectedvirtual . Turn cursor on. ; Definition at line 801 of file TGTextEdit.cxx. ◆ Cut(). Bool_t TGTextEdit::Cut ; (; ). virtual . Cut text. ; Definition at line 448 of file TGTextEdit.cxx. ◆ DeclFileName(). static const char * TGTextEdit::De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:49252,Clear,Clear,49252,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['Clear'],['Clear']
Usability,"getPlotLabel() const; Double_tRooAbsReal::getPropagatedError(const RooFitResult& fr); const Text_t*RooAbsArg::getStringAttribute(const Text_t* key) const; virtual const char*TNamed::GetTitle() const; TStringRooAbsReal::getTitle(Bool_t appendUnit = kFALSE) const; Bool_tRooAbsArg::getTransientAttribute(const Text_t* name) const; virtual UInt_tTObject::GetUniqueID() const; const Text_t*RooAbsReal::getUnit() const; Double_tRooAbsReal::getVal(const RooArgSet* set = 0) const; Double_tRooAbsReal::getVal(const RooArgSet& set) const; virtual Double_tRooAbsReal::getValV(const RooArgSet* set = 0) const; RooArgSet*RooAbsArg::getVariables(Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); voidRooAbsArg::graphVizTree(ostream& os, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_thasChanged(Bool_t clearState); Bool_tRooAbsArg::hasClients() const; virtual ULong_tTNamed::Hash() const; virtual Bool_tRooAbsArg::hasRange(const char*) const; static Bool_tRooAbsReal::hideOffset(); RooGenFunction*RooAbsReal::iGenFunction(RooRealVar& x, const RooArgSet& nset = RooArgSet()); RooMultiGenFunction*RooAbsReal::iGenFunction(const RooArgSet& observables, const RooArgSet& nset = RooArgSet()); virtual Bool_tRooAbsArg::importWorkspaceHook(RooWorkspace&); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Bool_tRooAbsArg::inRange(const char*) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual voidRooAbsArg::ioStreamerPass2(); static voidRooAbsArg::ioStreamerPass2Finalize(); virtual TClass*IsA() const; virtual Bool_tRooAbsReal::isBinnedDistribution(const RooArgSet&) const; Bool_tRooAbsArg::isCloneOf(const RooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChangeTracker.html:15811,clear,clearState,15811,root/html534/RooChangeTracker.html,https://root.cern,https://root.cern/root/html534/RooChangeTracker.html,3,['clear'],['clearState']
Usability,"getValV(const RooArgSet* set = 0) const; Return value of object. If the cache is clean, return the; cached value, otherwise recalculate on the fly and refill; the cache. Double_t evaluate() const; Perform the integration and return the result. Double_t jacobianProduct() const; Return product of jacobian terms originating from analytical integration. Double_t sum() const; Perform summation of list of category dependents to be integrated. Double_t integrate() const; Perform hybrid numerical/analytical integration over all real-valued dependents. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCacheAllNumeric(); Return minimum dimensions of numeric integration for which values are cached. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. RooArgSet intVars() const; { RooArgSet tmp(_sumList) ; tmp.add(_intList) ; tmp.add(_anaList) ; tmp.add(_facList) ; return tmp ; }. const char* intRange(); { return _rangeName ? _rangeName->Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealIntegral.html:38011,intuit,intuitively,38011,root/html532/RooRealIntegral.html,https://root.cern,https://root.cern/root/html532/RooRealIntegral.html,4,['intuit'],['intuitively']
Usability,"gger than 100 (TTree::kSplitCollectionOfPointers); then the collection will be written in split mode, e.g. if it contains objects of; any types deriving from TTrack this function will sort the objects; based on their type and store them in separate branches in split; mode. ==> branch->SetAddress(Void *address); In case of dynamic structures changing with each entry for example, one must; redefine the branch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with branches of floats). Adding a Branch to an Existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved. void tree3AddBranch(){; TFile f(""tree3.root"", ""update"");. Float_t new_v;; TTree *t3 = (TTree*)f->Get(""t3"");; TBranch *newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. //read the number of entries in the t3; Long64_t nentries = t3->GetEntries();. for (Long64_t i = 0; i < nentries; i++){; new_v= gRandom->Gaus(0, 1);; newBranch->Fill();; }; // save only the new version of the tree; t3->Write("""", TObject::kOverwrite);; }; Adding a branch is often not possible because the tree is in a read-only; file and you do not have permission to save the modified tree with the; new branch. Even if you do have the permission, you risk losing the; original tree with an unsuccessful attempt to save the modification.; Since trees are usually large, adding a branch could extend it over the; 2GB limit. In this case, the attempt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:7458,simpl,simple,7458,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['simpl'],['simple']
Usability,"gger than 100 (TTree::kSplitCollectionOfPointers); then the collection will be written in split mode. Ie. if it contains objects of; any types deriving from TTrack this function will sort the objects; basing on their type and store them in separate branches in split; mode. ==> branch->SetAddress(Void *address); In case of dynamic structures changing with each entry for example, one must; redefine the branch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with branches of floats). Adding a Branch to an Existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved. void tree3AddBranch(){; TFile f(""tree3.root"", ""update"");. Float_t new_v;; TTree *t3 = (TTree*)f->Get(""t3"");; TBranch *newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. //read the number of entries in the t3; Long64_t nentries = t3->GetEntries();. for (Long64_t i = 0; i < nentries; i++){; new_v= gRandom->Gaus(0, 1);; newBranch->Fill();; }; // save only the new version of the tree; t3->Write("""", TObject::kOverwrite);; }; Adding a branch is often not possible because the tree is in a read-only; file and you do not have permission to save the modified tree with the; new branch. Even if you do have the permission, you risk losing the; original tree with an unsuccessful attempt to save the modification.; Since trees are usually large, adding a branch could extend it over the; 2GB limit. In this case, the attempt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:7069,simpl,simple,7069,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['simpl'],['simple']
Usability,"gh); Scans the value of the user function by varying parameter number \(\mbox{par}\), leaving all other parameters fixed at the current value. If \(\mbox{par}\) is not specified, all variable parameters are scanned in sequence. The number of points \(\mbox{npoints}\) in the scan is 40 by default, and cannot exceed 100. The range of the scan is by default 2 standard deviations on each side of the current best value, but can be specified as from \(\mbox{low}\) to \(\mbox{high}\). After each scan, if a new minimum is found, the best parameter values are retained as start values for future scans or minimizations. The curve resulting from each scan can be plotted on the output terminal using MnPlot [api:plot] in order to show the approximate behaviour of the function.; 5.10.2 ScanMinimizer; Although the \(\mbox{SCAN}\) method is not intended for minimization it can be used as a minimizer in its most primitive form.; 5.11 MnSimplex and SimplexMinimizer; [api:simplex]; \(\mbox{SIMPLEX}\) is a function minimization method using the simplex method of Nelder and Mead. MnSimplex provides minimization of the function by the method of \(\mbox{SIMPLEX}\) and the functionality for parameters interaction. It also retains the result from the last minimization in case the user may want to do subsequent minimization steps with parameter interactions in between the minimization requests. The minimization is done by the SimplexMinimizer. Minimization of the function can be done by directly using the SimplexMinimizer if no parameters interaction is required. As \(\mbox{SIMPLEX}\) is a stepping method it does not produce a covariance matrix.; 5.11.1 MnSimplex(const FCNBase&, const std::vector\(<\)double\(>\)&,. const std::vector\(<\)double\(>\)&, unsigned int) ###; Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:49534,Simpl,SimplexMinimizer,49534,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,4,"['SIMPL', 'Simpl', 'simpl']","['SIMPLEX', 'SimplexMinimizer', 'simplex']"
